
CH2_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004530  08004530  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004530  08004530  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004530  08004530  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004534  08004534  00014534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  080045a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080045a8  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098ed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca7  00000000  00000000  0002998d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ea3  00000000  00000000  0002c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b346  00000000  00000000  0004e823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc105  00000000  00000000  00059b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f00  00000000  00000000  00125cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004430 	.word	0x08004430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004430 	.word	0x08004430

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 f9a5 	bl	80005c2 <HAL_Init>

  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  USER_SystemClock_Config();
 8000278:	f003 f808 	bl	800328c <USER_SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
USER_GPIO_Init();
 800027c:	f003 f8aa 	bl	80033d4 <USER_GPIO_Init>
USER_ADC1_Init();
 8000280:	f003 f866 	bl	8003350 <USER_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adc_handler(channel);
 8000284:	4b02      	ldr	r3, [pc, #8]	; (8000290 <main+0x20>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	4618      	mov	r0, r3
 800028a:	f002 fff1 	bl	8003270 <adc_handler>
 800028e:	e7f9      	b.n	8000284 <main+0x14>
 8000290:	2000008c 	.word	0x2000008c

08000294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000298:	b672      	cpsid	i
}
 800029a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800029c:	e7fe      	b.n	800029c <Error_Handler+0x8>
	...

080002a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <HAL_MspInit+0x44>)
 80002a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002aa:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <HAL_MspInit+0x44>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6613      	str	r3, [r2, #96]	; 0x60
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <HAL_MspInit+0x44>)
 80002b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002b6:	f003 0301 	and.w	r3, r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_MspInit+0x44>)
 80002c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002c2:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <HAL_MspInit+0x44>)
 80002c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c8:	6593      	str	r3, [r2, #88]	; 0x58
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <HAL_MspInit+0x44>)
 80002cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000

080002e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09e      	sub	sp, #120	; 0x78
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	2254      	movs	r2, #84	; 0x54
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f003 f8fb 	bl	8003504 <memset>
  if(hadc->Instance==ADC1)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <HAL_ADC_MspInit+0xc0>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d143      	bne.n	80003a0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800031c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800031e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000322:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000324:	2301      	movs	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000328:	2301      	movs	r3, #1
 800032a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800032c:	2310      	movs	r3, #16
 800032e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000330:	2307      	movs	r3, #7
 8000332:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000334:	2302      	movs	r3, #2
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000338:	2302      	movs	r3, #2
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800033c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fc7a 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000352:	f7ff ff9f 	bl	8000294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <HAL_ADC_MspInit+0xc4>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <HAL_ADC_MspInit+0xc4>)
 800035c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <HAL_ADC_MspInit+0xc4>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_ADC_MspInit+0xc4>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_ADC_MspInit+0xc4>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_ADC_MspInit+0xc4>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000386:	2303      	movs	r3, #3
 8000388:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800038a:	230b      	movs	r3, #11
 800038c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000396:	4619      	mov	r1, r3
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f001 fc72 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80003a0:	bf00      	nop
 80003a2:	3778      	adds	r7, #120	; 0x78
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	50040000 	.word	0x50040000
 80003ac:	40021000 	.word	0x40021000

080003b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <NMI_Handler+0x4>

080003b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <MemManage_Handler+0x4>

080003c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <BusFault_Handler+0x4>

080003c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <UsageFault_Handler+0x4>

080003ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fc:	f000 f936 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	e00a      	b.n	800042c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000416:	f3af 8000 	nop.w
 800041a:	4601      	mov	r1, r0
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	dbf0      	blt.n	8000416 <_read+0x12>
  }

  return len;
 8000434:	687b      	ldr	r3, [r7, #4]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b086      	sub	sp, #24
 8000442:	af00      	add	r7, sp, #0
 8000444:	60f8      	str	r0, [r7, #12]
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	e009      	b.n	8000464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	60ba      	str	r2, [r7, #8]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	3301      	adds	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	697a      	ldr	r2, [r7, #20]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	429a      	cmp	r2, r3
 800046a:	dbf1      	blt.n	8000450 <_write+0x12>
  }
  return len;
 800046c:	687b      	ldr	r3, [r7, #4]
}
 800046e:	4618      	mov	r0, r3
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <_close>:

int _close(int file)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800049e:	605a      	str	r2, [r3, #4]
  return 0;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <_isatty>:

int _isatty(int file)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004b6:	2301      	movs	r3, #1
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <_sbrk+0x5c>)
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <_sbrk+0x60>)
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <_sbrk+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d102      	bne.n	8000502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <_sbrk+0x64>)
 80004fe:	4a12      	ldr	r2, [pc, #72]	; (8000548 <_sbrk+0x68>)
 8000500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	693a      	ldr	r2, [r7, #16]
 800050c:	429a      	cmp	r2, r3
 800050e:	d207      	bcs.n	8000520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000510:	f002 ffce 	bl	80034b0 <__errno>
 8000514:	4603      	mov	r3, r0
 8000516:	220c      	movs	r2, #12
 8000518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	e009      	b.n	8000534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <_sbrk+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <_sbrk+0x64>)
 8000530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000532:	68fb      	ldr	r3, [r7, #12]
}
 8000534:	4618      	mov	r0, r3
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20010000 	.word	0x20010000
 8000540:	00000400 	.word	0x00000400
 8000544:	20000090 	.word	0x20000090
 8000548:	20000110 	.word	0x20000110

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f7ff ffea 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f002 ff8d 	bl	80034bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f7ff fe65 	bl	8000270 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005b4:	08004538 	.word	0x08004538
  ldr r2, =_sbss
 80005b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005bc:	2000010c 	.word	0x2000010c

080005c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_IRQHandler>

080005c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f001 fb25 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f80e 	bl	80005f4 <HAL_InitTick>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	e001      	b.n	80005e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e4:	f7ff fe5c 	bl	80002a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005e8:	79fb      	ldrb	r3, [r7, #7]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HAL_InitTick+0x6c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d023      	beq.n	8000650 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <HAL_InitTick+0x70>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <HAL_InitTick+0x6c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fb23 	bl	8001c6a <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10f      	bne.n	800064a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d809      	bhi.n	8000644 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f001 fafb 	bl	8001c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <HAL_InitTick+0x74>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	e007      	b.n	8000654 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	e004      	b.n	8000654 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	e001      	b.n	8000654 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000008 	.word	0x20000008
 8000664:	20000000 	.word	0x20000000
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000008 	.word	0x20000008
 8000690:	20000094 	.word	0x20000094

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000094 	.word	0x20000094

080006ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	431a      	orrs	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	431a      	orrs	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	609a      	str	r2, [r3, #8]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000714:	b480      	push	{r7}
 8000716:	b087      	sub	sp, #28
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3360      	adds	r3, #96	; 0x60
 8000726:	461a      	mov	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <LL_ADC_SetOffset+0x44>)
 8000736:	4013      	ands	r3, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	430a      	orrs	r2, r1
 8000742:	4313      	orrs	r3, r2
 8000744:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800074c:	bf00      	nop
 800074e:	371c      	adds	r7, #28
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	03fff000 	.word	0x03fff000

0800075c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3360      	adds	r3, #96	; 0x60
 800076a:	461a      	mov	r2, r3
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800077c:	4618      	mov	r0, r3
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3360      	adds	r3, #96	; 0x60
 8000798:	461a      	mov	r2, r3
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	431a      	orrs	r2, r3
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80007b2:	bf00      	nop
 80007b4:	371c      	adds	r7, #28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007d2:	2301      	movs	r3, #1
 80007d4:	e000      	b.n	80007d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3330      	adds	r3, #48	; 0x30
 80007f4:	461a      	mov	r2, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	f003 030c 	and.w	r3, r3, #12
 8000800:	4413      	add	r3, r2
 8000802:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	211f      	movs	r1, #31
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	401a      	ands	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	0e9b      	lsrs	r3, r3, #26
 800081c:	f003 011f 	and.w	r1, r3, #31
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	f003 031f 	and.w	r3, r3, #31
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	431a      	orrs	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000830:	bf00      	nop
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3314      	adds	r3, #20
 800084c:	461a      	mov	r2, r3
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	0e5b      	lsrs	r3, r3, #25
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	4413      	add	r3, r2
 800085a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	0d1b      	lsrs	r3, r3, #20
 8000864:	f003 031f 	and.w	r3, r3, #31
 8000868:	2107      	movs	r1, #7
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	401a      	ands	r2, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	0d1b      	lsrs	r3, r3, #20
 8000876:	f003 031f 	and.w	r3, r3, #31
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	431a      	orrs	r2, r3
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008ac:	43db      	mvns	r3, r3
 80008ae:	401a      	ands	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0318 	and.w	r3, r3, #24
 80008b6:	4908      	ldr	r1, [pc, #32]	; (80008d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008b8:	40d9      	lsrs	r1, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	400b      	ands	r3, r1
 80008be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008c2:	431a      	orrs	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	0007ffff 	.word	0x0007ffff

080008dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80008ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6093      	str	r3, [r2, #8]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000914:	d101      	bne.n	800091a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800093c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000964:	d101      	bne.n	800096a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000988:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800098c:	f043 0201 	orr.w	r2, r3, #1
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009b4:	f043 0202 	orr.w	r2, r3, #2
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <LL_ADC_IsEnabled+0x18>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <LL_ADC_IsEnabled+0x1a>
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d101      	bne.n	8000a06 <LL_ADC_IsDisableOngoing+0x18>
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <LL_ADC_IsDisableOngoing+0x1a>
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a28:	f043 0204 	orr.w	r2, r3, #4
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a50:	f043 0210 	orr.w	r2, r3, #16
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d101      	bne.n	8000a7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a9e:	f043 0220 	orr.w	r2, r3, #32
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d101      	bne.n	8000aca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e12c      	b.n	8000d4c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d109      	bne.n	8000b14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fbf1 	bl	80002e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fef1 	bl	8000900 <LL_ADC_IsDeepPowerDownEnabled>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fed7 	bl	80008dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff0c 	bl	8000950 <LL_ADC_IsInternalRegulatorEnabled>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d115      	bne.n	8000b6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fef0 	bl	8000928 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b48:	4b82      	ldr	r3, [pc, #520]	; (8000d54 <HAL_ADC_Init+0x27c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	099b      	lsrs	r3, r3, #6
 8000b4e:	4a82      	ldr	r2, [pc, #520]	; (8000d58 <HAL_ADC_Init+0x280>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	099b      	lsrs	r3, r3, #6
 8000b56:	3301      	adds	r3, #1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b5c:	e002      	b.n	8000b64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f9      	bne.n	8000b5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff feee 	bl	8000950 <LL_ADC_IsInternalRegulatorEnabled>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10d      	bne.n	8000b96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b7e:	f043 0210 	orr.w	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f043 0201 	orr.w	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff62 	bl	8000a64 <LL_ADC_REG_IsConversionOngoing>
 8000ba0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f040 80c5 	bne.w	8000d3a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 80c1 	bne.w	8000d3a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000bc0:	f043 0202 	orr.w	r2, r3, #2
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fefb 	bl	80009c8 <LL_ADC_IsEnabled>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10b      	bne.n	8000bf0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000bd8:	4860      	ldr	r0, [pc, #384]	; (8000d5c <HAL_ADC_Init+0x284>)
 8000bda:	f7ff fef5 	bl	80009c8 <LL_ADC_IsEnabled>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d105      	bne.n	8000bf0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4619      	mov	r1, r3
 8000bea:	485d      	ldr	r0, [pc, #372]	; (8000d60 <HAL_ADC_Init+0x288>)
 8000bec:	f7ff fd5e 	bl	80006ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e5b      	ldrb	r3, [r3, #25]
 8000bf4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bfa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000c00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000c06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d106      	bne.n	8000c2c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	3b01      	subs	r3, #1
 8000c24:	045b      	lsls	r3, r3, #17
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d009      	beq.n	8000c48 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <HAL_ADC_Init+0x28c>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	69b9      	ldr	r1, [r7, #24]
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff feff 	bl	8000a64 <LL_ADC_REG_IsConversionOngoing>
 8000c66:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff20 	bl	8000ab2 <LL_ADC_INJ_IsConversionOngoing>
 8000c72:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d13d      	bne.n	8000cf6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d13a      	bne.n	8000cf6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c84:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c8c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c9c:	f023 0302 	bic.w	r3, r3, #2
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	69b9      	ldr	r1, [r7, #24]
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d118      	bne.n	8000ce6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000cbe:	f023 0304 	bic.w	r3, r3, #4
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cca:	4311      	orrs	r1, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000cd0:	4311      	orrs	r1, r2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0201 	orr.w	r2, r2, #1
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	e007      	b.n	8000cf6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0201 	bic.w	r2, r2, #1
 8000cf4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10c      	bne.n	8000d18 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	f023 010f 	bic.w	r1, r3, #15
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	1e5a      	subs	r2, r3, #1
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
 8000d16:	e007      	b.n	8000d28 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 020f 	bic.w	r2, r2, #15
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2c:	f023 0303 	bic.w	r3, r3, #3
 8000d30:	f043 0201 	orr.w	r2, r3, #1
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	655a      	str	r2, [r3, #84]	; 0x54
 8000d38:	e007      	b.n	8000d4a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3e:	f043 0210 	orr.w	r2, r3, #16
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	053e2d63 	.word	0x053e2d63
 8000d5c:	50040000 	.word	0x50040000
 8000d60:	50040300 	.word	0x50040300
 8000d64:	fff0c007 	.word	0xfff0c007

08000d68 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fe75 	bl	8000a64 <LL_ADC_REG_IsConversionOngoing>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14f      	bne.n	8000e20 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Start+0x26>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e04b      	b.n	8000e26 <HAL_ADC_Start+0xbe>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 fda8 	bl	80018ec <ADC_Enable>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d137      	bne.n	8000e16 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000daa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dc6:	d106      	bne.n	8000dd6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	f023 0206 	bic.w	r2, r3, #6
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	659a      	str	r2, [r3, #88]	; 0x58
 8000dd4:	e002      	b.n	8000ddc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	221c      	movs	r2, #28
 8000de2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe00 	bl	8000a14 <LL_ADC_REG_StartConversion>
 8000e14:	e006      	b.n	8000e24 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000e1e:	e001      	b.n	8000e24 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e20:	2302      	movs	r3, #2
 8000e22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d101      	bne.n	8000e44 <HAL_ADC_Stop+0x16>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e023      	b.n	8000e8c <HAL_ADC_Stop+0x5e>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 fc90 	bl	8001774 <ADC_ConversionStop>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d111      	bne.n	8000e82 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fdca 	bl	80019f8 <ADC_Disable>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d109      	bne.n	8000e82 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e76:	f023 0301 	bic.w	r3, r3, #1
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d102      	bne.n	8000eac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e010      	b.n	8000ece <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebe:	f043 0220 	orr.w	r2, r3, #32
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e06f      	b.n	8000faa <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000eca:	2304      	movs	r3, #4
 8000ecc:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ece:	f7ff fbe1 	bl	8000694 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ed4:	e021      	b.n	8000f1a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d01d      	beq.n	8000f1a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000ede:	f7ff fbd9 	bl	8000694 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d302      	bcc.n	8000ef4 <HAL_ADC_PollForConversion+0x60>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d112      	bne.n	8000f1a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10b      	bne.n	8000f1a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f06:	f043 0204 	orr.w	r2, r3, #4
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e047      	b.n	8000faa <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0d6      	beq.n	8000ed6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fc40 	bl	80007be <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01c      	beq.n	8000f7e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7e5b      	ldrb	r3, [r3, #25]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d118      	bne.n	8000f7e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d111      	bne.n	8000f7e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d104      	bne.n	8000f96 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2208      	movs	r2, #8
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e008      	b.n	8000fa8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d103      	bne.n	8000fa8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b6      	sub	sp, #216	; 0xd8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x22>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e3b9      	b.n	800174a <HAL_ADC_ConfigChannel+0x796>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fd3e 	bl	8000a64 <LL_ADC_REG_IsConversionOngoing>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f040 839e 	bne.w	800172c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	d824      	bhi.n	8001042 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	3b02      	subs	r3, #2
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d81b      	bhi.n	800103a <HAL_ADC_ConfigChannel+0x86>
 8001002:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <HAL_ADC_ConfigChannel+0x54>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001019 	.word	0x08001019
 800100c:	08001021 	.word	0x08001021
 8001010:	08001029 	.word	0x08001029
 8001014:	08001031 	.word	0x08001031
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	220c      	movs	r2, #12
 800101c:	605a      	str	r2, [r3, #4]
          break;
 800101e:	e011      	b.n	8001044 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2212      	movs	r2, #18
 8001024:	605a      	str	r2, [r3, #4]
          break;
 8001026:	e00d      	b.n	8001044 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2218      	movs	r2, #24
 800102c:	605a      	str	r2, [r3, #4]
          break;
 800102e:	e009      	b.n	8001044 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001036:	605a      	str	r2, [r3, #4]
          break;
 8001038:	e004      	b.n	8001044 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2206      	movs	r2, #6
 800103e:	605a      	str	r2, [r3, #4]
          break;
 8001040:	e000      	b.n	8001044 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001042:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6859      	ldr	r1, [r3, #4]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	f7ff fbc7 	bl	80007e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fd02 	bl	8000a64 <LL_ADC_REG_IsConversionOngoing>
 8001060:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fd22 	bl	8000ab2 <LL_ADC_INJ_IsConversionOngoing>
 800106e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001072:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001076:	2b00      	cmp	r3, #0
 8001078:	f040 81a6 	bne.w	80013c8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800107c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001080:	2b00      	cmp	r3, #0
 8001082:	f040 81a1 	bne.w	80013c8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	461a      	mov	r2, r3
 8001094:	f7ff fbd2 	bl	800083c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	08db      	lsrs	r3, r3, #3
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d00a      	beq.n	80010d0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6919      	ldr	r1, [r3, #16]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010ca:	f7ff fb23 	bl	8000714 <LL_ADC_SetOffset>
 80010ce:	e17b      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fb40 	bl	800075c <LL_ADC_GetOffsetChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10a      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x148>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fb35 	bl	800075c <LL_ADC_GetOffsetChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	0e9b      	lsrs	r3, r3, #26
 80010f6:	f003 021f 	and.w	r2, r3, #31
 80010fa:	e01e      	b.n	800113a <HAL_ADC_ConfigChannel+0x186>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fb2a 	bl	800075c <LL_ADC_GetOffsetChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800111a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800111e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800112a:	2320      	movs	r3, #32
 800112c:	e004      	b.n	8001138 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800112e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001132:	fab3 f383 	clz	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x19e>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	0e9b      	lsrs	r3, r3, #26
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	e018      	b.n	8001184 <HAL_ADC_ConfigChannel+0x1d0>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800116a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800116e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001176:	2320      	movs	r3, #32
 8001178:	e004      	b.n	8001184 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800117a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001184:	429a      	cmp	r2, r3
 8001186:	d106      	bne.n	8001196 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff faf9 	bl	8000788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2101      	movs	r1, #1
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fadd 	bl	800075c <LL_ADC_GetOffsetChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10a      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x20e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fad2 	bl	800075c <LL_ADC_GetOffsetChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	0e9b      	lsrs	r3, r3, #26
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	e01e      	b.n	8001200 <HAL_ADC_ConfigChannel+0x24c>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fac7 	bl	800075c <LL_ADC_GetOffsetChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80011e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80011e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80011f0:	2320      	movs	r3, #32
 80011f2:	e004      	b.n	80011fe <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80011f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x264>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0e9b      	lsrs	r3, r3, #26
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	e018      	b.n	800124a <HAL_ADC_ConfigChannel+0x296>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800122c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800123c:	2320      	movs	r3, #32
 800123e:	e004      	b.n	800124a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800124a:	429a      	cmp	r2, r3
 800124c:	d106      	bne.n	800125c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fa96 	bl	8000788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2102      	movs	r1, #2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa7a 	bl	800075c <LL_ADC_GetOffsetChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10a      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x2d4>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2102      	movs	r1, #2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fa6f 	bl	800075c <LL_ADC_GetOffsetChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	0e9b      	lsrs	r3, r3, #26
 8001282:	f003 021f 	and.w	r2, r3, #31
 8001286:	e01e      	b.n	80012c6 <HAL_ADC_ConfigChannel+0x312>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fa64 	bl	800075c <LL_ADC_GetOffsetChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80012a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80012ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80012b6:	2320      	movs	r3, #32
 80012b8:	e004      	b.n	80012c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80012ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_ADC_ConfigChannel+0x32a>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0e9b      	lsrs	r3, r3, #26
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	e016      	b.n	800130c <HAL_ADC_ConfigChannel+0x358>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80012f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80012f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80012fe:	2320      	movs	r3, #32
 8001300:	e004      	b.n	800130c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800130c:	429a      	cmp	r2, r3
 800130e:	d106      	bne.n	800131e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	2102      	movs	r1, #2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fa35 	bl	8000788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2103      	movs	r1, #3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fa19 	bl	800075c <LL_ADC_GetOffsetChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10a      	bne.n	800134a <HAL_ADC_ConfigChannel+0x396>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2103      	movs	r1, #3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fa0e 	bl	800075c <LL_ADC_GetOffsetChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	0e9b      	lsrs	r3, r3, #26
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	e017      	b.n	800137a <HAL_ADC_ConfigChannel+0x3c6>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2103      	movs	r1, #3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fa03 	bl	800075c <LL_ADC_GetOffsetChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001364:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800136c:	2320      	movs	r3, #32
 800136e:	e003      	b.n	8001378 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x3de>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0e9b      	lsrs	r3, r3, #26
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	e011      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x402>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80013a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80013a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80013aa:	2320      	movs	r3, #32
 80013ac:	e003      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80013ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d106      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	2103      	movs	r1, #3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f9e0 	bl	8000788 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fafb 	bl	80009c8 <LL_ADC_IsEnabled>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f040 813f 	bne.w	8001658 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f7ff fa54 	bl	8000894 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a8e      	ldr	r2, [pc, #568]	; (800162c <HAL_ADC_ConfigChannel+0x678>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f040 8130 	bne.w	8001658 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10b      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x46c>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0e9b      	lsrs	r3, r3, #26
 800140e:	3301      	adds	r3, #1
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2b09      	cmp	r3, #9
 8001416:	bf94      	ite	ls
 8001418:	2301      	movls	r3, #1
 800141a:	2300      	movhi	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	e019      	b.n	8001454 <HAL_ADC_ConfigChannel+0x4a0>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800142e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001430:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001438:	2320      	movs	r3, #32
 800143a:	e003      	b.n	8001444 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800143c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	2b09      	cmp	r3, #9
 800144c:	bf94      	ite	ls
 800144e:	2301      	movls	r3, #1
 8001450:	2300      	movhi	r3, #0
 8001452:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001454:	2b00      	cmp	r3, #0
 8001456:	d079      	beq.n	800154c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001460:	2b00      	cmp	r3, #0
 8001462:	d107      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x4c0>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0e9b      	lsrs	r3, r3, #26
 800146a:	3301      	adds	r3, #1
 800146c:	069b      	lsls	r3, r3, #26
 800146e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001472:	e015      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x4ec>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800147c:	fa93 f3a3 	rbit	r3, r3
 8001480:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001484:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800148c:	2320      	movs	r3, #32
 800148e:	e003      	b.n	8001498 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3301      	adds	r3, #1
 800149a:	069b      	lsls	r3, r3, #26
 800149c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x50c>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0e9b      	lsrs	r3, r3, #26
 80014b2:	3301      	adds	r3, #1
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	2101      	movs	r1, #1
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	e017      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x53c>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80014ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80014d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80014d8:	2320      	movs	r3, #32
 80014da:	e003      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80014dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	ea42 0103 	orr.w	r1, r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10a      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x562>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0e9b      	lsrs	r3, r3, #26
 8001506:	3301      	adds	r3, #1
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	051b      	lsls	r3, r3, #20
 8001514:	e018      	b.n	8001548 <HAL_ADC_ConfigChannel+0x594>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800152e:	2320      	movs	r3, #32
 8001530:	e003      	b.n	800153a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001548:	430b      	orrs	r3, r1
 800154a:	e080      	b.n	800164e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001554:	2b00      	cmp	r3, #0
 8001556:	d107      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x5b4>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0e9b      	lsrs	r3, r3, #26
 800155e:	3301      	adds	r3, #1
 8001560:	069b      	lsls	r3, r3, #26
 8001562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001566:	e015      	b.n	8001594 <HAL_ADC_ConfigChannel+0x5e0>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001580:	2320      	movs	r3, #32
 8001582:	e003      	b.n	800158c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	3301      	adds	r3, #1
 800158e:	069b      	lsls	r3, r3, #26
 8001590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x600>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0e9b      	lsrs	r3, r3, #26
 80015a6:	3301      	adds	r3, #1
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	e017      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x630>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	61fb      	str	r3, [r7, #28]
  return result;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80015cc:	2320      	movs	r3, #32
 80015ce:	e003      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	ea42 0103 	orr.w	r1, r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d10d      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x65c>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0e9b      	lsrs	r3, r3, #26
 80015fa:	3301      	adds	r3, #1
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	3b1e      	subs	r3, #30
 8001608:	051b      	lsls	r3, r3, #20
 800160a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160e:	e01d      	b.n	800164c <HAL_ADC_ConfigChannel+0x698>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	613b      	str	r3, [r7, #16]
  return result;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d103      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001628:	2320      	movs	r3, #32
 800162a:	e005      	b.n	8001638 <HAL_ADC_ConfigChannel+0x684>
 800162c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	f003 021f 	and.w	r2, r3, #31
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	3b1e      	subs	r3, #30
 8001646:	051b      	lsls	r3, r3, #20
 8001648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800164c:	430b      	orrs	r3, r1
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	6892      	ldr	r2, [r2, #8]
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff f8f2 	bl	800083c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_ADC_ConfigChannel+0x7a0>)
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d06c      	beq.n	800173e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001664:	483c      	ldr	r0, [pc, #240]	; (8001758 <HAL_ADC_ConfigChannel+0x7a4>)
 8001666:	f7ff f847 	bl	80006f8 <LL_ADC_GetCommonPathInternalCh>
 800166a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <HAL_ADC_ConfigChannel+0x7a8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d127      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001678:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800167c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d121      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a35      	ldr	r2, [pc, #212]	; (8001760 <HAL_ADC_ConfigChannel+0x7ac>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d157      	bne.n	800173e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800168e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001696:	4619      	mov	r1, r3
 8001698:	482f      	ldr	r0, [pc, #188]	; (8001758 <HAL_ADC_ConfigChannel+0x7a4>)
 800169a:	f7ff f81a 	bl	80006d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800169e:	4b31      	ldr	r3, [pc, #196]	; (8001764 <HAL_ADC_ConfigChannel+0x7b0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_ADC_ConfigChannel+0x7b4>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016b8:	e002      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3b01      	subs	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f9      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016c6:	e03a      	b.n	800173e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a27      	ldr	r2, [pc, #156]	; (800176c <HAL_ADC_ConfigChannel+0x7b8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d113      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x746>
 80016d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_ADC_ConfigChannel+0x7ac>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d12a      	bne.n	800173e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016f0:	4619      	mov	r1, r3
 80016f2:	4819      	ldr	r0, [pc, #100]	; (8001758 <HAL_ADC_ConfigChannel+0x7a4>)
 80016f4:	f7fe ffed 	bl	80006d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016f8:	e021      	b.n	800173e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <HAL_ADC_ConfigChannel+0x7bc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d11c      	bne.n	800173e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d116      	bne.n	800173e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <HAL_ADC_ConfigChannel+0x7ac>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d111      	bne.n	800173e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800171a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800171e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <HAL_ADC_ConfigChannel+0x7a4>)
 8001726:	f7fe ffd4 	bl	80006d2 <LL_ADC_SetCommonPathInternalCh>
 800172a:	e008      	b.n	800173e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f043 0220 	orr.w	r2, r3, #32
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001746:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800174a:	4618      	mov	r0, r3
 800174c:	37d8      	adds	r7, #216	; 0xd8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	80080000 	.word	0x80080000
 8001758:	50040300 	.word	0x50040300
 800175c:	c7520000 	.word	0xc7520000
 8001760:	50040000 	.word	0x50040000
 8001764:	20000000 	.word	0x20000000
 8001768:	053e2d63 	.word	0x053e2d63
 800176c:	cb840000 	.word	0xcb840000
 8001770:	80000001 	.word	0x80000001

08001774 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f96a 	bl	8000a64 <LL_ADC_REG_IsConversionOngoing>
 8001790:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f98b 	bl	8000ab2 <LL_ADC_INJ_IsConversionOngoing>
 800179c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8098 	beq.w	80018dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d02a      	beq.n	8001810 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7e5b      	ldrb	r3, [r3, #25]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d126      	bne.n	8001810 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7e1b      	ldrb	r3, [r3, #24]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d122      	bne.n	8001810 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80017ce:	e014      	b.n	80017fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <ADC_ConversionStop+0x174>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d90d      	bls.n	80017f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f043 0210 	orr.w	r2, r3, #16
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e074      	b.n	80018de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3301      	adds	r3, #1
 80017f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d1e3      	bne.n	80017d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d014      	beq.n	8001840 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f922 	bl	8000a64 <LL_ADC_REG_IsConversionOngoing>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00c      	beq.n	8001840 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f8df 	bl	80009ee <LL_ADC_IsDisableOngoing>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d104      	bne.n	8001840 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f8fe 	bl	8000a3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d014      	beq.n	8001870 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f931 	bl	8000ab2 <LL_ADC_INJ_IsConversionOngoing>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f8c7 	bl	80009ee <LL_ADC_IsDisableOngoing>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d104      	bne.n	8001870 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f90d 	bl	8000a8a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d005      	beq.n	8001882 <ADC_ConversionStop+0x10e>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d105      	bne.n	8001888 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800187c:	230c      	movs	r3, #12
 800187e:	617b      	str	r3, [r7, #20]
        break;
 8001880:	e005      	b.n	800188e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001882:	2308      	movs	r3, #8
 8001884:	617b      	str	r3, [r7, #20]
        break;
 8001886:	e002      	b.n	800188e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001888:	2304      	movs	r3, #4
 800188a:	617b      	str	r3, [r7, #20]
        break;
 800188c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800188e:	f7fe ff01 	bl	8000694 <HAL_GetTick>
 8001892:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001894:	e01b      	b.n	80018ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001896:	f7fe fefd 	bl	8000694 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d914      	bls.n	80018ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f043 0210 	orr.w	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f043 0201 	orr.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e007      	b.n	80018de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1dc      	bne.n	8001896 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	a33fffff 	.word	0xa33fffff

080018ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f863 	bl	80009c8 <LL_ADC_IsEnabled>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d169      	bne.n	80019dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <ADC_Enable+0xfc>)
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e055      	b.n	80019de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f81e 	bl	8000978 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800193c:	482b      	ldr	r0, [pc, #172]	; (80019ec <ADC_Enable+0x100>)
 800193e:	f7fe fedb 	bl	80006f8 <LL_ADC_GetCommonPathInternalCh>
 8001942:	4603      	mov	r3, r0
 8001944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <ADC_Enable+0x104>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <ADC_Enable+0x108>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001966:	e002      	b.n	800196e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3b01      	subs	r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f9      	bne.n	8001968 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001974:	f7fe fe8e 	bl	8000694 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800197a:	e028      	b.n	80019ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f821 	bl	80009c8 <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d104      	bne.n	8001996 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fff1 	bl	8000978 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001996:	f7fe fe7d 	bl	8000694 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d914      	bls.n	80019ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d00d      	beq.n	80019ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	f043 0210 	orr.w	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e007      	b.n	80019de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d1cf      	bne.n	800197c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	8000003f 	.word	0x8000003f
 80019ec:	50040300 	.word	0x50040300
 80019f0:	20000000 	.word	0x20000000
 80019f4:	053e2d63 	.word	0x053e2d63

080019f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fff2 	bl	80009ee <LL_ADC_IsDisableOngoing>
 8001a0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe ffd9 	bl	80009c8 <LL_ADC_IsEnabled>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d047      	beq.n	8001aac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d144      	bne.n	8001aac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 030d 	and.w	r3, r3, #13
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10c      	bne.n	8001a4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe ffb3 	bl	80009a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a42:	f7fe fe27 	bl	8000694 <HAL_GetTick>
 8001a46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a48:	e029      	b.n	8001a9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f043 0210 	orr.w	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e023      	b.n	8001aae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a66:	f7fe fe15 	bl	8000694 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d914      	bls.n	8001a9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00d      	beq.n	8001a9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a86:	f043 0210 	orr.w	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e007      	b.n	8001aae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1dc      	bne.n	8001a66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff8e 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff47 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff5c 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff8e 	bl	8001b70 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5d 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffb0 	bl	8001bd8 <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c92:	e148      	b.n	8001f26 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 813a 	beq.w	8001f20 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <HAL_GPIO_Init+0x40>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d130      	bne.n	8001d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0201 	and.w	r2, r3, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d017      	beq.n	8001d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d123      	bne.n	8001db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	220f      	movs	r2, #15
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8094 	beq.w	8001f20 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df8:	4b52      	ldr	r3, [pc, #328]	; (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	4a51      	ldr	r2, [pc, #324]	; (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6613      	str	r3, [r2, #96]	; 0x60
 8001e04:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_GPIO_Init+0x2c0>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e10:	4a4d      	ldr	r2, [pc, #308]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1d4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <HAL_GPIO_Init+0x2c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1d0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a42      	ldr	r2, [pc, #264]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1cc>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e004      	b.n	8001e5a <HAL_GPIO_Init+0x1d6>
 8001e50:	2307      	movs	r3, #7
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x1d6>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_GPIO_Init+0x1d6>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	f002 0203 	and.w	r2, r2, #3
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	4093      	lsls	r3, r2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e6a:	4937      	ldr	r1, [pc, #220]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e9c:	4a2d      	ldr	r2, [pc, #180]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ec6:	4a23      	ldr	r2, [pc, #140]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f aeaf 	bne.w	8001c94 <HAL_GPIO_Init+0x10>
  }
}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	48000400 	.word	0x48000400
 8001f50:	48000800 	.word	0x48000800
 8001f54:	40010400 	.word	0x40010400

08001f58 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40007000 	.word	0x40007000

08001f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40007000 	.word	0x40007000

08001f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa2:	d130      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb0:	d038      	beq.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fba:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2232      	movs	r2, #50	; 0x32
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9b      	lsrs	r3, r3, #18
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd8:	e002      	b.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fec:	d102      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f2      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002000:	d110      	bne.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e00f      	b.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	d007      	beq.n	8002024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800201c:	4a05      	ldr	r2, [pc, #20]	; (8002034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40007000 	.word	0x40007000
 8002038:	20000000 	.word	0x20000000
 800203c:	431bde83 	.word	0x431bde83

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f000 bc02 	b.w	8002858 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002054:	4b96      	ldr	r3, [pc, #600]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800205e:	4b94      	ldr	r3, [pc, #592]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80e4 	beq.w	800223e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_RCC_OscConfig+0x4c>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	f040 808b 	bne.w	800219a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 8087 	bne.w	800219a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x64>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e3d9      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_RCC_OscConfig+0x7e>
 80020b4:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	e005      	b.n	80020ca <HAL_RCC_OscConfig+0x8a>
 80020be:	4b7c      	ldr	r3, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d223      	bcs.n	8002116 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fd54 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e3ba      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e2:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a72      	ldr	r2, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b70      	ldr	r3, [pc, #448]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	496d      	ldr	r1, [pc, #436]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002100:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	4968      	ldr	r1, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e025      	b.n	8002162 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4960      	ldr	r1, [pc, #384]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002134:	4b5e      	ldr	r3, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	495b      	ldr	r1, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fd14 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e37a      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002162:	f000 fc81 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4950      	ldr	r1, [pc, #320]	; (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a4e      	ldr	r2, [pc, #312]	; (80022b8 <HAL_RCC_OscConfig+0x278>)
 8002180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_RCC_OscConfig+0x27c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fa34 	bl	80005f4 <HAL_InitTick>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d052      	beq.n	800223c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	e35e      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d032      	beq.n	8002208 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a42      	ldr	r2, [pc, #264]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fa71 	bl	8000694 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b6:	f7fe fa6d 	bl	8000694 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e347      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4930      	ldr	r1, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	492b      	ldr	r1, [pc, #172]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
 8002206:	e01a      	b.n	800223e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002214:	f7fe fa3e 	bl	8000694 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221c:	f7fe fa3a 	bl	8000694 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e314      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1dc>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d073      	beq.n	8002332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x21c>
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d10e      	bne.n	8002274 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d10b      	bne.n	8002274 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d063      	beq.n	8002330 <HAL_RCC_OscConfig+0x2f0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d15f      	bne.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e2f1      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d106      	bne.n	800228c <HAL_RCC_OscConfig+0x24c>
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e025      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	d114      	bne.n	80022c0 <HAL_RCC_OscConfig+0x280>
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a02      	ldr	r2, [pc, #8]	; (80022b0 <HAL_RCC_OscConfig+0x270>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e013      	b.n	80022d8 <HAL_RCC_OscConfig+0x298>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08004458 	.word	0x08004458
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004
 80022c0:	4ba0      	ldr	r3, [pc, #640]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a9f      	ldr	r2, [pc, #636]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b9d      	ldr	r3, [pc, #628]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a9c      	ldr	r2, [pc, #624]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe f9d8 	bl	8000694 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe f9d4 	bl	8000694 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e2ae      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2a8>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe f9c4 	bl	8000694 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe f9c0 	bl	8000694 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e29a      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002322:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x2d0>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d060      	beq.n	8002400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x310>
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d119      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d116      	bne.n	800237e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002350:	4b7c      	ldr	r3, [pc, #496]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x328>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e277      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4973      	ldr	r1, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	e040      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d023      	beq.n	80023ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe f97f 	bl	8000694 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe f97b 	bl	8000694 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e255      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	495f      	ldr	r1, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe f95b 	bl	8000694 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe f957 	bl	8000694 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e231      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03c      	beq.n	8002486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01c      	beq.n	800244e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002414:	4b4b      	ldr	r3, [pc, #300]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241a:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe f936 	bl	8000694 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe f932 	bl	8000694 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e20c      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x3ec>
 800244c:	e01b      	b.n	8002486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	4a3b      	ldr	r2, [pc, #236]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7fe f919 	bl	8000694 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002466:	f7fe f915 	bl	8000694 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1ef      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1ef      	bne.n	8002466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a6 	beq.w	80025e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d118      	bne.n	80024fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d8:	f7fe f8dc 	bl	8000694 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe f8d8 	bl	8000694 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1b2      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x508>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0x4d8>
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002516:	e029      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d115      	bne.n	800254c <HAL_RCC_OscConfig+0x50c>
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <HAL_RCC_OscConfig+0x504>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002540:	e014      	b.n	800256c <HAL_RCC_OscConfig+0x52c>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	4b9a      	ldr	r3, [pc, #616]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a99      	ldr	r2, [pc, #612]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255c:	4b96      	ldr	r3, [pc, #600]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a95      	ldr	r2, [pc, #596]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe f88e 	bl	8000694 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe f88a 	bl	8000694 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e162      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ed      	beq.n	800257c <HAL_RCC_OscConfig+0x53c>
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe f877 	bl	8000694 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe f873 	bl	8000694 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e14b      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	4b7d      	ldr	r3, [pc, #500]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ed      	bne.n	80025aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b78      	ldr	r3, [pc, #480]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a77      	ldr	r2, [pc, #476]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d03c      	beq.n	8002666 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01c      	beq.n	800262e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025f4:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 80025f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fa:	4a6f      	ldr	r2, [pc, #444]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe f846 	bl	8000694 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260c:	f7fe f842 	bl	8000694 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e11c      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800261e:	4b66      	ldr	r3, [pc, #408]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ef      	beq.n	800260c <HAL_RCC_OscConfig+0x5cc>
 800262c:	e01b      	b.n	8002666 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800262e:	4b62      	ldr	r3, [pc, #392]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002634:	4a60      	ldr	r2, [pc, #384]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe f829 	bl	8000694 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002646:	f7fe f825 	bl	8000694 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0ff      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002658:	4b57      	ldr	r3, [pc, #348]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 800265a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ef      	bne.n	8002646 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80f3 	beq.w	8002856 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 80c9 	bne.w	800280c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800267a:	4b4f      	ldr	r3, [pc, #316]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0203 	and.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	429a      	cmp	r2, r3
 800268c:	d12c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	3b01      	subs	r3, #1
 800269a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d123      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d113      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d109      	bne.n	80026e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d06b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d062      	beq.n	80027b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0ac      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002708:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800270a:	f7fd ffc3 	bl	8000694 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7fd ffbf 	bl	8000694 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e099      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002730:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_RCC_OscConfig+0x77c>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002740:	3a01      	subs	r2, #1
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800274a:	0212      	lsls	r2, r2, #8
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002752:	0852      	lsrs	r2, r2, #1
 8002754:	3a01      	subs	r2, #1
 8002756:	0552      	lsls	r2, r2, #21
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800275e:	0852      	lsrs	r2, r2, #1
 8002760:	3a01      	subs	r2, #1
 8002762:	0652      	lsls	r2, r2, #25
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800276a:	06d2      	lsls	r2, r2, #27
 800276c:	430a      	orrs	r2, r1
 800276e:	4912      	ldr	r1, [pc, #72]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002770:	4313      	orrs	r3, r2
 8002772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800278c:	f7fd ff82 	bl	8000694 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fd ff7e 	bl	8000694 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e058      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b2:	e050      	b.n	8002856 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e04f      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
 80027b8:	40021000 	.word	0x40021000
 80027bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d144      	bne.n	8002856 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a20      	ldr	r2, [pc, #128]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e4:	f7fd ff56 	bl	8000694 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fd ff52 	bl	8000694 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e02c      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x7ac>
 800280a:	e024      	b.n	8002856 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d01f      	beq.n	8002852 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 8002818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800281c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fd ff39 	bl	8000694 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fd ff35 	bl	8000694 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e00f      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4905      	ldr	r1, [pc, #20]	; (8002860 <HAL_RCC_OscConfig+0x820>)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_OscConfig+0x824>)
 800284c:	4013      	ands	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
 8002850:	e001      	b.n	8002856 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	feeefffc 	.word	0xfeeefffc

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0e7      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d910      	bls.n	80028ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b72      	ldr	r3, [pc, #456]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0207 	bic.w	r2, r3, #7
 8002892:	4970      	ldr	r1, [pc, #448]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	4b6e      	ldr	r3, [pc, #440]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0cf      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d908      	bls.n	80028da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4960      	ldr	r1, [pc, #384]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04c      	beq.n	8002980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d121      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0a6      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002906:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e09a      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291e:	4b4e      	ldr	r3, [pc, #312]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e08e      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292e:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e086      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4943      	ldr	r1, [pc, #268]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7fd fea0 	bl	8000694 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fd fe9c 	bl	8000694 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e06e      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002998:	429a      	cmp	r2, r3
 800299a:	d208      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	492b      	ldr	r1, [pc, #172]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d210      	bcs.n	80029de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0207 	bic.w	r2, r3, #7
 80029c4:	4923      	ldr	r1, [pc, #140]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCC_ClockConfig+0x1ec>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e036      	b.n	8002a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4918      	ldr	r1, [pc, #96]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4910      	ldr	r1, [pc, #64]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1c:	f000 f824 	bl	8002a68 <HAL_RCC_GetSysClockFreq>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	490b      	ldr	r1, [pc, #44]	; (8002a5c <HAL_RCC_ClockConfig+0x1f4>)
 8002a2e:	5ccb      	ldrb	r3, [r1, r3]
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x1fc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fdd7 	bl	80005f4 <HAL_InitTick>
 8002a46:	4603      	mov	r3, r0
 8002a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40022000 	.word	0x40022000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08004458 	.word	0x08004458
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a76:	4b3e      	ldr	r3, [pc, #248]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x34>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d121      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d11e      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a9c:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10d      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	e004      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d134      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d003      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xac>
 8002b0c:	e005      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b10:	617b      	str	r3, [r7, #20]
      break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b16:	617b      	str	r3, [r7, #20]
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	617b      	str	r3, [r7, #20]
      break;
 8002b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	fb03 f202 	mul.w	r2, r3, r2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	0e5b      	lsrs	r3, r3, #25
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	3301      	adds	r3, #1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b60:	69bb      	ldr	r3, [r7, #24]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08004468 	.word	0x08004468
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b98:	f7ff f9ee 	bl	8001f78 <HAL_PWREx_GetVoltageRange>
 8002b9c:	6178      	str	r0, [r7, #20]
 8002b9e:	e014      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bac:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb8:	f7ff f9de 	bl	8001f78 <HAL_PWREx_GetVoltageRange>
 8002bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d10b      	bne.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d919      	bls.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2ba0      	cmp	r3, #160	; 0xa0
 8002bdc:	d902      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bde:	2302      	movs	r3, #2
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e013      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e010      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d902      	bls.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e00a      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b80      	cmp	r3, #128	; 0x80
 8002bfa:	d102      	bne.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e004      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d101      	bne.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c08:	2301      	movs	r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 0207 	bic.w	r2, r3, #7
 8002c14:	4909      	ldr	r1, [pc, #36]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40022000 	.word	0x40022000

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c64:	d01a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c6a:	d814      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c74:	d10f      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c82:	e00c      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f9de 	bl	800304c <RCCEx_PLLSAI1_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	494e      	ldr	r1, [pc, #312]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 809e 	beq.w	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a3f      	ldr	r2, [pc, #252]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf4:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a39      	ldr	r2, [pc, #228]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d10:	f7fd fcc0 	bl	8000694 <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d16:	e009      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fd fcbc 	bl	8000694 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	74fb      	strb	r3, [r7, #19]
        break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d2c:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d15a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01e      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d019      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d86:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fd fc7c 	bl	8000694 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fd fc78 	bl	8000694 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	74fb      	strb	r3, [r7, #19]
            break;
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ec      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002de2:	e009      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
 8002de8:	e006      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df8:	7c7b      	ldrb	r3, [r7, #17]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b8a      	ldr	r3, [pc, #552]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	4a89      	ldr	r2, [pc, #548]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e16:	4b84      	ldr	r3, [pc, #528]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 0203 	bic.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4980      	ldr	r1, [pc, #512]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e38:	4b7b      	ldr	r3, [pc, #492]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 020c 	bic.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	4978      	ldr	r1, [pc, #480]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	496f      	ldr	r1, [pc, #444]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	4967      	ldr	r1, [pc, #412]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e9e:	4b62      	ldr	r3, [pc, #392]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	495e      	ldr	r1, [pc, #376]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	4956      	ldr	r1, [pc, #344]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee2:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d028      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4945      	ldr	r1, [pc, #276]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f22:	d106      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f24:	4b40      	ldr	r3, [pc, #256]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a3f      	ldr	r2, [pc, #252]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f2e:	60d3      	str	r3, [r2, #12]
 8002f30:	e011      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f882 	bl	800304c <RCCEx_PLLSAI1_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	492d      	ldr	r1, [pc, #180]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a28      	ldr	r2, [pc, #160]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8c:	60d3      	str	r3, [r2, #12]
 8002f8e:	e011      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f853 	bl	800304c <RCCEx_PLLSAI1_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002fb0:	7cfb      	ldrb	r3, [r7, #19]
 8002fb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01c      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fce:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f830 	bl	800304c <RCCEx_PLLSAI1_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	4904      	ldr	r1, [pc, #16]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800301c:	7cbb      	ldrb	r3, [r7, #18]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000

0800304c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800305a:	4b74      	ldr	r3, [pc, #464]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d018      	beq.n	8003098 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003066:	4b71      	ldr	r3, [pc, #452]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0203 	and.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d10d      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
       ||
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800307e:	4b6b      	ldr	r3, [pc, #428]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
       ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d047      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	e044      	b.n	8003122 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d018      	beq.n	80030d2 <RCCEx_PLLSAI1_Config+0x86>
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d825      	bhi.n	80030f0 <RCCEx_PLLSAI1_Config+0xa4>
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d002      	beq.n	80030ae <RCCEx_PLLSAI1_Config+0x62>
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d009      	beq.n	80030c0 <RCCEx_PLLSAI1_Config+0x74>
 80030ac:	e020      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11d      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030be:	e01a      	b.n	80030f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030c0:	4b5a      	ldr	r3, [pc, #360]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d0:	e013      	b.n	80030fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030d2:	4b56      	ldr	r3, [pc, #344]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030de:	4b53      	ldr	r3, [pc, #332]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ee:	e006      	b.n	80030fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e004      	b.n	8003100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003106:	4b49      	ldr	r3, [pc, #292]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	430b      	orrs	r3, r1
 800311c:	4943      	ldr	r1, [pc, #268]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 800311e:	4313      	orrs	r3, r2
 8003120:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d17c      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003128:	4b40      	ldr	r3, [pc, #256]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a3f      	ldr	r2, [pc, #252]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 800312e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fd faae 	bl	8000694 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800313a:	e009      	b.n	8003150 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800313c:	f7fd faaa 	bl	8000694 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d902      	bls.n	8003150 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	73fb      	strb	r3, [r7, #15]
        break;
 800314e:	e005      	b.n	800315c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1ef      	bne.n	800313c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d15f      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d110      	bne.n	800318a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003168:	4b30      	ldr	r3, [pc, #192]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003170:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6892      	ldr	r2, [r2, #8]
 8003178:	0211      	lsls	r1, r2, #8
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	06d2      	lsls	r2, r2, #27
 8003180:	430a      	orrs	r2, r1
 8003182:	492a      	ldr	r1, [pc, #168]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	610b      	str	r3, [r1, #16]
 8003188:	e027      	b.n	80031da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d112      	bne.n	80031b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003190:	4b26      	ldr	r3, [pc, #152]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6892      	ldr	r2, [r2, #8]
 80031a0:	0211      	lsls	r1, r2, #8
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6912      	ldr	r2, [r2, #16]
 80031a6:	0852      	lsrs	r2, r2, #1
 80031a8:	3a01      	subs	r2, #1
 80031aa:	0552      	lsls	r2, r2, #21
 80031ac:	430a      	orrs	r2, r1
 80031ae:	491f      	ldr	r1, [pc, #124]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	610b      	str	r3, [r1, #16]
 80031b4:	e011      	b.n	80031da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b6:	4b1d      	ldr	r3, [pc, #116]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6892      	ldr	r2, [r2, #8]
 80031c6:	0211      	lsls	r1, r2, #8
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6952      	ldr	r2, [r2, #20]
 80031cc:	0852      	lsrs	r2, r2, #1
 80031ce:	3a01      	subs	r2, #1
 80031d0:	0652      	lsls	r2, r2, #25
 80031d2:	430a      	orrs	r2, r1
 80031d4:	4915      	ldr	r1, [pc, #84]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a13      	ldr	r2, [pc, #76]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fa55 	bl	8000694 <HAL_GetTick>
 80031ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ec:	e009      	b.n	8003202 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ee:	f7fd fa51 	bl	8000694 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d902      	bls.n	8003202 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	73fb      	strb	r3, [r7, #15]
          break;
 8003200:	e005      	b.n	800320e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ef      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <RCCEx_PLLSAI1_Config+0x1e0>)
 800321e:	4313      	orrs	r3, r2
 8003220:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000

08003230 <adc_channel>:
	 A = adc_value();
	return (A * (3.3 / 4095));
}

void adc_channel(ADC_Channel channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
	switch(channel)
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b05      	cmp	r3, #5
 800323e:	d002      	beq.n	8003246 <adc_channel+0x16>
 8003240:	2b06      	cmp	r3, #6
 8003242:	d003      	beq.n	800324c <adc_channel+0x1c>
 8003244:	e005      	b.n	8003252 <adc_channel+0x22>
	{
	case my_ADC_CHANNEL_5:
		ADC_select_CH5();
 8003246:	f000 f8e9 	bl	800341c <ADC_select_CH5>
		break;
 800324a:	e005      	b.n	8003258 <adc_channel+0x28>
	case my_ADC_CHANNEL_6:
		ADC_select_CH5();
 800324c:	f000 f8e6 	bl	800341c <ADC_select_CH5>
		break;
 8003250:	e002      	b.n	8003258 <adc_channel+0x28>
	default:printf("invalid channel");
 8003252:	4806      	ldr	r0, [pc, #24]	; (800326c <adc_channel+0x3c>)
 8003254:	f000 f95e 	bl	8003514 <iprintf>

	}
	adc_start();
 8003258:	f000 f90a 	bl	8003470 <adc_start>
	adc_conversion();
 800325c:	f000 f912 	bl	8003484 <adc_conversion>
		d = voltage_cal();
	} else if (channel == ADC_CHANNEL_6)
	{
		f = voltage_cal();
	}
	adc_stop();
 8003260:	f000 f91c 	bl	800349c <adc_stop>
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	08004448 	.word	0x08004448

08003270 <adc_handler>:

void adc_handler(ADC_Channel channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
	adc_channel(channel);
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffd7 	bl	8003230 <adc_channel>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <USER_SystemClock_Config>:
#include"com_adc.h"
#include"app_adc.h"
ADC_HandleTypeDef hadc1;

void USER_SystemClock_Config(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b096      	sub	sp, #88	; 0x58
 8003290:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	2244      	movs	r2, #68	; 0x44
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f932 	bl	8003504 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032a0:	463b      	mov	r3, r7
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80032ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032b2:	f7fe fe6f 	bl	8001f94 <HAL_PWREx_ControlVoltageScaling>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <USER_SystemClock_Config+0x34>
	{
		Error_Handler();
 80032bc:	f7fc ffea 	bl	8000294 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80032c0:	f7fe fe4a 	bl	8001f58 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80032c4:	4b21      	ldr	r3, [pc, #132]	; (800334c <USER_SystemClock_Config+0xc0>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	4a20      	ldr	r2, [pc, #128]	; (800334c <USER_SystemClock_Config+0xc0>)
 80032cc:	f023 0318 	bic.w	r3, r3, #24
 80032d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80032d4:	2314      	movs	r3, #20
 80032d6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032d8:	2301      	movs	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80032dc:	2301      	movs	r3, #1
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80032e4:	2360      	movs	r3, #96	; 0x60
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032e8:	2302      	movs	r3, #2
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80032ec:	2301      	movs	r3, #1
 80032ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80032f0:	2301      	movs	r3, #1
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 80032f4:	2310      	movs	r3, #16
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032f8:	2307      	movs	r3, #7
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032fc:	2302      	movs	r3, #2
 80032fe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003300:	2302      	movs	r3, #2
 8003302:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fe99 	bl	8002040 <HAL_RCC_OscConfig>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <USER_SystemClock_Config+0x8c>
	{
		Error_Handler();
 8003314:	f7fc ffbe 	bl	8000294 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003318:	230f      	movs	r3, #15
 800331a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800331c:	2303      	movs	r3, #3
 800331e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800332c:	463b      	mov	r3, r7
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fa99 	bl	8002868 <HAL_RCC_ClockConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <USER_SystemClock_Config+0xb4>
	{
		Error_Handler();
 800333c:	f7fc ffaa 	bl	8000294 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8003340:	f7ff fe74 	bl	800302c <HAL_RCCEx_EnableMSIPLLMode>
}
 8003344:	bf00      	nop
 8003346:	3758      	adds	r7, #88	; 0x58
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000

08003350 <USER_ADC1_Init>:

void USER_ADC1_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <USER_ADC1_Init+0x7c>)
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <USER_ADC1_Init+0x80>)
 8003358:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <USER_ADC1_Init+0x7c>)
 800335c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003360:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <USER_ADC1_Init+0x7c>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <USER_ADC1_Init+0x7c>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <USER_ADC1_Init+0x7c>)
 8003370:	2201      	movs	r2, #1
 8003372:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <USER_ADC1_Init+0x7c>)
 8003376:	2208      	movs	r2, #8
 8003378:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <USER_ADC1_Init+0x7c>)
 800337c:	2200      	movs	r2, #0
 800337e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003380:	4b12      	ldr	r3, [pc, #72]	; (80033cc <USER_ADC1_Init+0x7c>)
 8003382:	2201      	movs	r2, #1
 8003384:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <USER_ADC1_Init+0x7c>)
 8003388:	2201      	movs	r2, #1
 800338a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <USER_ADC1_Init+0x7c>)
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <USER_ADC1_Init+0x7c>)
 8003396:	2200      	movs	r2, #0
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <USER_ADC1_Init+0x7c>)
 800339c:	2200      	movs	r2, #0
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <USER_ADC1_Init+0x7c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <USER_ADC1_Init+0x7c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <USER_ADC1_Init+0x7c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <USER_ADC1_Init+0x7c>)
 80033b8:	f7fd fb8e 	bl	8000ad8 <HAL_ADC_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <USER_ADC1_Init+0x76>
	{
		Error_Handler();
 80033c2:	f7fc ff67 	bl	8000294 <Error_Handler>
	//  }
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000098 	.word	0x20000098
 80033d0:	50040000 	.word	0x50040000

080033d4 <USER_GPIO_Init>:

void USER_GPIO_Init(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <USER_GPIO_Init+0x44>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <USER_GPIO_Init+0x44>)
 80033e0:	f043 0304 	orr.w	r3, r3, #4
 80033e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <USER_GPIO_Init+0x44>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <USER_GPIO_Init+0x44>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <USER_GPIO_Init+0x44>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <USER_GPIO_Init+0x44>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000

0800341c <ADC_select_CH5>:
void ADC_select_CH5(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003422:	463b      	mov	r3, r7
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
 8003430:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_5;
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <ADC_select_CH5+0x4c>)
 8003434:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003436:	2306      	movs	r3, #6
 8003438:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800343a:	2305      	movs	r3, #5
 800343c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800343e:	237f      	movs	r3, #127	; 0x7f
 8003440:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003442:	2304      	movs	r3, #4
 8003444:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800344a:	463b      	mov	r3, r7
 800344c:	4619      	mov	r1, r3
 800344e:	4807      	ldr	r0, [pc, #28]	; (800346c <ADC_select_CH5+0x50>)
 8003450:	f7fd fdb0 	bl	8000fb4 <HAL_ADC_ConfigChannel>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <ADC_select_CH5+0x42>
	{
		Error_Handler();
 800345a:	f7fc ff1b 	bl	8000294 <Error_Handler>
	}
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	14f00020 	.word	0x14f00020
 800346c:	20000098 	.word	0x20000098

08003470 <adc_start>:
		Error_Handler();
	}
}

void adc_start(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <adc_start+0x10>)
 8003476:	f7fd fc77 	bl	8000d68 <HAL_ADC_Start>
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000098 	.word	0x20000098

08003484 <adc_conversion>:

void adc_conversion(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8003488:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <adc_conversion+0x14>)
 800348e:	f7fd fd01 	bl	8000e94 <HAL_ADC_PollForConversion>

}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000098 	.word	0x20000098

0800349c <adc_stop>:
{
	return HAL_ADC_GetValue(&hadc1);
}

void adc_stop(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <adc_stop+0x10>)
 80034a2:	f7fd fcc4 	bl	8000e2e <HAL_ADC_Stop>
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000098 	.word	0x20000098

080034b0 <__errno>:
 80034b0:	4b01      	ldr	r3, [pc, #4]	; (80034b8 <__errno+0x8>)
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	2000000c 	.word	0x2000000c

080034bc <__libc_init_array>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4d0d      	ldr	r5, [pc, #52]	; (80034f4 <__libc_init_array+0x38>)
 80034c0:	4c0d      	ldr	r4, [pc, #52]	; (80034f8 <__libc_init_array+0x3c>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	2600      	movs	r6, #0
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	d109      	bne.n	80034e0 <__libc_init_array+0x24>
 80034cc:	4d0b      	ldr	r5, [pc, #44]	; (80034fc <__libc_init_array+0x40>)
 80034ce:	4c0c      	ldr	r4, [pc, #48]	; (8003500 <__libc_init_array+0x44>)
 80034d0:	f000 ffae 	bl	8004430 <_init>
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	2600      	movs	r6, #0
 80034da:	42a6      	cmp	r6, r4
 80034dc:	d105      	bne.n	80034ea <__libc_init_array+0x2e>
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e4:	4798      	blx	r3
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7ee      	b.n	80034c8 <__libc_init_array+0xc>
 80034ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ee:	4798      	blx	r3
 80034f0:	3601      	adds	r6, #1
 80034f2:	e7f2      	b.n	80034da <__libc_init_array+0x1e>
 80034f4:	08004530 	.word	0x08004530
 80034f8:	08004530 	.word	0x08004530
 80034fc:	08004530 	.word	0x08004530
 8003500:	08004534 	.word	0x08004534

08003504 <memset>:
 8003504:	4402      	add	r2, r0
 8003506:	4603      	mov	r3, r0
 8003508:	4293      	cmp	r3, r2
 800350a:	d100      	bne.n	800350e <memset+0xa>
 800350c:	4770      	bx	lr
 800350e:	f803 1b01 	strb.w	r1, [r3], #1
 8003512:	e7f9      	b.n	8003508 <memset+0x4>

08003514 <iprintf>:
 8003514:	b40f      	push	{r0, r1, r2, r3}
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <iprintf+0x2c>)
 8003518:	b513      	push	{r0, r1, r4, lr}
 800351a:	681c      	ldr	r4, [r3, #0]
 800351c:	b124      	cbz	r4, 8003528 <iprintf+0x14>
 800351e:	69a3      	ldr	r3, [r4, #24]
 8003520:	b913      	cbnz	r3, 8003528 <iprintf+0x14>
 8003522:	4620      	mov	r0, r4
 8003524:	f000 f866 	bl	80035f4 <__sinit>
 8003528:	ab05      	add	r3, sp, #20
 800352a:	9a04      	ldr	r2, [sp, #16]
 800352c:	68a1      	ldr	r1, [r4, #8]
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	4620      	mov	r0, r4
 8003532:	f000 f9bd 	bl	80038b0 <_vfiprintf_r>
 8003536:	b002      	add	sp, #8
 8003538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800353c:	b004      	add	sp, #16
 800353e:	4770      	bx	lr
 8003540:	2000000c 	.word	0x2000000c

08003544 <std>:
 8003544:	2300      	movs	r3, #0
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	e9c0 3300 	strd	r3, r3, [r0]
 800354e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003552:	6083      	str	r3, [r0, #8]
 8003554:	8181      	strh	r1, [r0, #12]
 8003556:	6643      	str	r3, [r0, #100]	; 0x64
 8003558:	81c2      	strh	r2, [r0, #14]
 800355a:	6183      	str	r3, [r0, #24]
 800355c:	4619      	mov	r1, r3
 800355e:	2208      	movs	r2, #8
 8003560:	305c      	adds	r0, #92	; 0x5c
 8003562:	f7ff ffcf 	bl	8003504 <memset>
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <std+0x38>)
 8003568:	6263      	str	r3, [r4, #36]	; 0x24
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <std+0x3c>)
 800356c:	62a3      	str	r3, [r4, #40]	; 0x28
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <std+0x40>)
 8003570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <std+0x44>)
 8003574:	6224      	str	r4, [r4, #32]
 8003576:	6323      	str	r3, [r4, #48]	; 0x30
 8003578:	bd10      	pop	{r4, pc}
 800357a:	bf00      	nop
 800357c:	08003e59 	.word	0x08003e59
 8003580:	08003e7b 	.word	0x08003e7b
 8003584:	08003eb3 	.word	0x08003eb3
 8003588:	08003ed7 	.word	0x08003ed7

0800358c <_cleanup_r>:
 800358c:	4901      	ldr	r1, [pc, #4]	; (8003594 <_cleanup_r+0x8>)
 800358e:	f000 b8af 	b.w	80036f0 <_fwalk_reent>
 8003592:	bf00      	nop
 8003594:	080041b1 	.word	0x080041b1

08003598 <__sfmoreglue>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	2268      	movs	r2, #104	; 0x68
 800359c:	1e4d      	subs	r5, r1, #1
 800359e:	4355      	muls	r5, r2
 80035a0:	460e      	mov	r6, r1
 80035a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035a6:	f000 f8e5 	bl	8003774 <_malloc_r>
 80035aa:	4604      	mov	r4, r0
 80035ac:	b140      	cbz	r0, 80035c0 <__sfmoreglue+0x28>
 80035ae:	2100      	movs	r1, #0
 80035b0:	e9c0 1600 	strd	r1, r6, [r0]
 80035b4:	300c      	adds	r0, #12
 80035b6:	60a0      	str	r0, [r4, #8]
 80035b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035bc:	f7ff ffa2 	bl	8003504 <memset>
 80035c0:	4620      	mov	r0, r4
 80035c2:	bd70      	pop	{r4, r5, r6, pc}

080035c4 <__sfp_lock_acquire>:
 80035c4:	4801      	ldr	r0, [pc, #4]	; (80035cc <__sfp_lock_acquire+0x8>)
 80035c6:	f000 b8b3 	b.w	8003730 <__retarget_lock_acquire_recursive>
 80035ca:	bf00      	nop
 80035cc:	200000fd 	.word	0x200000fd

080035d0 <__sfp_lock_release>:
 80035d0:	4801      	ldr	r0, [pc, #4]	; (80035d8 <__sfp_lock_release+0x8>)
 80035d2:	f000 b8ae 	b.w	8003732 <__retarget_lock_release_recursive>
 80035d6:	bf00      	nop
 80035d8:	200000fd 	.word	0x200000fd

080035dc <__sinit_lock_acquire>:
 80035dc:	4801      	ldr	r0, [pc, #4]	; (80035e4 <__sinit_lock_acquire+0x8>)
 80035de:	f000 b8a7 	b.w	8003730 <__retarget_lock_acquire_recursive>
 80035e2:	bf00      	nop
 80035e4:	200000fe 	.word	0x200000fe

080035e8 <__sinit_lock_release>:
 80035e8:	4801      	ldr	r0, [pc, #4]	; (80035f0 <__sinit_lock_release+0x8>)
 80035ea:	f000 b8a2 	b.w	8003732 <__retarget_lock_release_recursive>
 80035ee:	bf00      	nop
 80035f0:	200000fe 	.word	0x200000fe

080035f4 <__sinit>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
 80035f8:	f7ff fff0 	bl	80035dc <__sinit_lock_acquire>
 80035fc:	69a3      	ldr	r3, [r4, #24]
 80035fe:	b11b      	cbz	r3, 8003608 <__sinit+0x14>
 8003600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003604:	f7ff bff0 	b.w	80035e8 <__sinit_lock_release>
 8003608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800360c:	6523      	str	r3, [r4, #80]	; 0x50
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <__sinit+0x68>)
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <__sinit+0x6c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	62a2      	str	r2, [r4, #40]	; 0x28
 8003616:	42a3      	cmp	r3, r4
 8003618:	bf04      	itt	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	61a3      	streq	r3, [r4, #24]
 800361e:	4620      	mov	r0, r4
 8003620:	f000 f820 	bl	8003664 <__sfp>
 8003624:	6060      	str	r0, [r4, #4]
 8003626:	4620      	mov	r0, r4
 8003628:	f000 f81c 	bl	8003664 <__sfp>
 800362c:	60a0      	str	r0, [r4, #8]
 800362e:	4620      	mov	r0, r4
 8003630:	f000 f818 	bl	8003664 <__sfp>
 8003634:	2200      	movs	r2, #0
 8003636:	60e0      	str	r0, [r4, #12]
 8003638:	2104      	movs	r1, #4
 800363a:	6860      	ldr	r0, [r4, #4]
 800363c:	f7ff ff82 	bl	8003544 <std>
 8003640:	68a0      	ldr	r0, [r4, #8]
 8003642:	2201      	movs	r2, #1
 8003644:	2109      	movs	r1, #9
 8003646:	f7ff ff7d 	bl	8003544 <std>
 800364a:	68e0      	ldr	r0, [r4, #12]
 800364c:	2202      	movs	r2, #2
 800364e:	2112      	movs	r1, #18
 8003650:	f7ff ff78 	bl	8003544 <std>
 8003654:	2301      	movs	r3, #1
 8003656:	61a3      	str	r3, [r4, #24]
 8003658:	e7d2      	b.n	8003600 <__sinit+0xc>
 800365a:	bf00      	nop
 800365c:	08004498 	.word	0x08004498
 8003660:	0800358d 	.word	0x0800358d

08003664 <__sfp>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	4607      	mov	r7, r0
 8003668:	f7ff ffac 	bl	80035c4 <__sfp_lock_acquire>
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <__sfp+0x84>)
 800366e:	681e      	ldr	r6, [r3, #0]
 8003670:	69b3      	ldr	r3, [r6, #24]
 8003672:	b913      	cbnz	r3, 800367a <__sfp+0x16>
 8003674:	4630      	mov	r0, r6
 8003676:	f7ff ffbd 	bl	80035f4 <__sinit>
 800367a:	3648      	adds	r6, #72	; 0x48
 800367c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003680:	3b01      	subs	r3, #1
 8003682:	d503      	bpl.n	800368c <__sfp+0x28>
 8003684:	6833      	ldr	r3, [r6, #0]
 8003686:	b30b      	cbz	r3, 80036cc <__sfp+0x68>
 8003688:	6836      	ldr	r6, [r6, #0]
 800368a:	e7f7      	b.n	800367c <__sfp+0x18>
 800368c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003690:	b9d5      	cbnz	r5, 80036c8 <__sfp+0x64>
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <__sfp+0x88>)
 8003694:	60e3      	str	r3, [r4, #12]
 8003696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800369a:	6665      	str	r5, [r4, #100]	; 0x64
 800369c:	f000 f847 	bl	800372e <__retarget_lock_init_recursive>
 80036a0:	f7ff ff96 	bl	80035d0 <__sfp_lock_release>
 80036a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036ac:	6025      	str	r5, [r4, #0]
 80036ae:	61a5      	str	r5, [r4, #24]
 80036b0:	2208      	movs	r2, #8
 80036b2:	4629      	mov	r1, r5
 80036b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036b8:	f7ff ff24 	bl	8003504 <memset>
 80036bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036c4:	4620      	mov	r0, r4
 80036c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c8:	3468      	adds	r4, #104	; 0x68
 80036ca:	e7d9      	b.n	8003680 <__sfp+0x1c>
 80036cc:	2104      	movs	r1, #4
 80036ce:	4638      	mov	r0, r7
 80036d0:	f7ff ff62 	bl	8003598 <__sfmoreglue>
 80036d4:	4604      	mov	r4, r0
 80036d6:	6030      	str	r0, [r6, #0]
 80036d8:	2800      	cmp	r0, #0
 80036da:	d1d5      	bne.n	8003688 <__sfp+0x24>
 80036dc:	f7ff ff78 	bl	80035d0 <__sfp_lock_release>
 80036e0:	230c      	movs	r3, #12
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	e7ee      	b.n	80036c4 <__sfp+0x60>
 80036e6:	bf00      	nop
 80036e8:	08004498 	.word	0x08004498
 80036ec:	ffff0001 	.word	0xffff0001

080036f0 <_fwalk_reent>:
 80036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f4:	4606      	mov	r6, r0
 80036f6:	4688      	mov	r8, r1
 80036f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036fc:	2700      	movs	r7, #0
 80036fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003702:	f1b9 0901 	subs.w	r9, r9, #1
 8003706:	d505      	bpl.n	8003714 <_fwalk_reent+0x24>
 8003708:	6824      	ldr	r4, [r4, #0]
 800370a:	2c00      	cmp	r4, #0
 800370c:	d1f7      	bne.n	80036fe <_fwalk_reent+0xe>
 800370e:	4638      	mov	r0, r7
 8003710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003714:	89ab      	ldrh	r3, [r5, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d907      	bls.n	800372a <_fwalk_reent+0x3a>
 800371a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800371e:	3301      	adds	r3, #1
 8003720:	d003      	beq.n	800372a <_fwalk_reent+0x3a>
 8003722:	4629      	mov	r1, r5
 8003724:	4630      	mov	r0, r6
 8003726:	47c0      	blx	r8
 8003728:	4307      	orrs	r7, r0
 800372a:	3568      	adds	r5, #104	; 0x68
 800372c:	e7e9      	b.n	8003702 <_fwalk_reent+0x12>

0800372e <__retarget_lock_init_recursive>:
 800372e:	4770      	bx	lr

08003730 <__retarget_lock_acquire_recursive>:
 8003730:	4770      	bx	lr

08003732 <__retarget_lock_release_recursive>:
 8003732:	4770      	bx	lr

08003734 <sbrk_aligned>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	4e0e      	ldr	r6, [pc, #56]	; (8003770 <sbrk_aligned+0x3c>)
 8003738:	460c      	mov	r4, r1
 800373a:	6831      	ldr	r1, [r6, #0]
 800373c:	4605      	mov	r5, r0
 800373e:	b911      	cbnz	r1, 8003746 <sbrk_aligned+0x12>
 8003740:	f000 fb7a 	bl	8003e38 <_sbrk_r>
 8003744:	6030      	str	r0, [r6, #0]
 8003746:	4621      	mov	r1, r4
 8003748:	4628      	mov	r0, r5
 800374a:	f000 fb75 	bl	8003e38 <_sbrk_r>
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	d00a      	beq.n	8003768 <sbrk_aligned+0x34>
 8003752:	1cc4      	adds	r4, r0, #3
 8003754:	f024 0403 	bic.w	r4, r4, #3
 8003758:	42a0      	cmp	r0, r4
 800375a:	d007      	beq.n	800376c <sbrk_aligned+0x38>
 800375c:	1a21      	subs	r1, r4, r0
 800375e:	4628      	mov	r0, r5
 8003760:	f000 fb6a 	bl	8003e38 <_sbrk_r>
 8003764:	3001      	adds	r0, #1
 8003766:	d101      	bne.n	800376c <sbrk_aligned+0x38>
 8003768:	f04f 34ff 	mov.w	r4, #4294967295
 800376c:	4620      	mov	r0, r4
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	20000104 	.word	0x20000104

08003774 <_malloc_r>:
 8003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003778:	1ccd      	adds	r5, r1, #3
 800377a:	f025 0503 	bic.w	r5, r5, #3
 800377e:	3508      	adds	r5, #8
 8003780:	2d0c      	cmp	r5, #12
 8003782:	bf38      	it	cc
 8003784:	250c      	movcc	r5, #12
 8003786:	2d00      	cmp	r5, #0
 8003788:	4607      	mov	r7, r0
 800378a:	db01      	blt.n	8003790 <_malloc_r+0x1c>
 800378c:	42a9      	cmp	r1, r5
 800378e:	d905      	bls.n	800379c <_malloc_r+0x28>
 8003790:	230c      	movs	r3, #12
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	2600      	movs	r6, #0
 8003796:	4630      	mov	r0, r6
 8003798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800379c:	4e2e      	ldr	r6, [pc, #184]	; (8003858 <_malloc_r+0xe4>)
 800379e:	f000 fdbb 	bl	8004318 <__malloc_lock>
 80037a2:	6833      	ldr	r3, [r6, #0]
 80037a4:	461c      	mov	r4, r3
 80037a6:	bb34      	cbnz	r4, 80037f6 <_malloc_r+0x82>
 80037a8:	4629      	mov	r1, r5
 80037aa:	4638      	mov	r0, r7
 80037ac:	f7ff ffc2 	bl	8003734 <sbrk_aligned>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	4604      	mov	r4, r0
 80037b4:	d14d      	bne.n	8003852 <_malloc_r+0xde>
 80037b6:	6834      	ldr	r4, [r6, #0]
 80037b8:	4626      	mov	r6, r4
 80037ba:	2e00      	cmp	r6, #0
 80037bc:	d140      	bne.n	8003840 <_malloc_r+0xcc>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	4631      	mov	r1, r6
 80037c2:	4638      	mov	r0, r7
 80037c4:	eb04 0803 	add.w	r8, r4, r3
 80037c8:	f000 fb36 	bl	8003e38 <_sbrk_r>
 80037cc:	4580      	cmp	r8, r0
 80037ce:	d13a      	bne.n	8003846 <_malloc_r+0xd2>
 80037d0:	6821      	ldr	r1, [r4, #0]
 80037d2:	3503      	adds	r5, #3
 80037d4:	1a6d      	subs	r5, r5, r1
 80037d6:	f025 0503 	bic.w	r5, r5, #3
 80037da:	3508      	adds	r5, #8
 80037dc:	2d0c      	cmp	r5, #12
 80037de:	bf38      	it	cc
 80037e0:	250c      	movcc	r5, #12
 80037e2:	4629      	mov	r1, r5
 80037e4:	4638      	mov	r0, r7
 80037e6:	f7ff ffa5 	bl	8003734 <sbrk_aligned>
 80037ea:	3001      	adds	r0, #1
 80037ec:	d02b      	beq.n	8003846 <_malloc_r+0xd2>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	442b      	add	r3, r5
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	e00e      	b.n	8003814 <_malloc_r+0xa0>
 80037f6:	6822      	ldr	r2, [r4, #0]
 80037f8:	1b52      	subs	r2, r2, r5
 80037fa:	d41e      	bmi.n	800383a <_malloc_r+0xc6>
 80037fc:	2a0b      	cmp	r2, #11
 80037fe:	d916      	bls.n	800382e <_malloc_r+0xba>
 8003800:	1961      	adds	r1, r4, r5
 8003802:	42a3      	cmp	r3, r4
 8003804:	6025      	str	r5, [r4, #0]
 8003806:	bf18      	it	ne
 8003808:	6059      	strne	r1, [r3, #4]
 800380a:	6863      	ldr	r3, [r4, #4]
 800380c:	bf08      	it	eq
 800380e:	6031      	streq	r1, [r6, #0]
 8003810:	5162      	str	r2, [r4, r5]
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	4638      	mov	r0, r7
 8003816:	f104 060b 	add.w	r6, r4, #11
 800381a:	f000 fd83 	bl	8004324 <__malloc_unlock>
 800381e:	f026 0607 	bic.w	r6, r6, #7
 8003822:	1d23      	adds	r3, r4, #4
 8003824:	1af2      	subs	r2, r6, r3
 8003826:	d0b6      	beq.n	8003796 <_malloc_r+0x22>
 8003828:	1b9b      	subs	r3, r3, r6
 800382a:	50a3      	str	r3, [r4, r2]
 800382c:	e7b3      	b.n	8003796 <_malloc_r+0x22>
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	42a3      	cmp	r3, r4
 8003832:	bf0c      	ite	eq
 8003834:	6032      	streq	r2, [r6, #0]
 8003836:	605a      	strne	r2, [r3, #4]
 8003838:	e7ec      	b.n	8003814 <_malloc_r+0xa0>
 800383a:	4623      	mov	r3, r4
 800383c:	6864      	ldr	r4, [r4, #4]
 800383e:	e7b2      	b.n	80037a6 <_malloc_r+0x32>
 8003840:	4634      	mov	r4, r6
 8003842:	6876      	ldr	r6, [r6, #4]
 8003844:	e7b9      	b.n	80037ba <_malloc_r+0x46>
 8003846:	230c      	movs	r3, #12
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4638      	mov	r0, r7
 800384c:	f000 fd6a 	bl	8004324 <__malloc_unlock>
 8003850:	e7a1      	b.n	8003796 <_malloc_r+0x22>
 8003852:	6025      	str	r5, [r4, #0]
 8003854:	e7de      	b.n	8003814 <_malloc_r+0xa0>
 8003856:	bf00      	nop
 8003858:	20000100 	.word	0x20000100

0800385c <__sfputc_r>:
 800385c:	6893      	ldr	r3, [r2, #8]
 800385e:	3b01      	subs	r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	b410      	push	{r4}
 8003864:	6093      	str	r3, [r2, #8]
 8003866:	da08      	bge.n	800387a <__sfputc_r+0x1e>
 8003868:	6994      	ldr	r4, [r2, #24]
 800386a:	42a3      	cmp	r3, r4
 800386c:	db01      	blt.n	8003872 <__sfputc_r+0x16>
 800386e:	290a      	cmp	r1, #10
 8003870:	d103      	bne.n	800387a <__sfputc_r+0x1e>
 8003872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003876:	f000 bb33 	b.w	8003ee0 <__swbuf_r>
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	1c58      	adds	r0, r3, #1
 800387e:	6010      	str	r0, [r2, #0]
 8003880:	7019      	strb	r1, [r3, #0]
 8003882:	4608      	mov	r0, r1
 8003884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003888:	4770      	bx	lr

0800388a <__sfputs_r>:
 800388a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388c:	4606      	mov	r6, r0
 800388e:	460f      	mov	r7, r1
 8003890:	4614      	mov	r4, r2
 8003892:	18d5      	adds	r5, r2, r3
 8003894:	42ac      	cmp	r4, r5
 8003896:	d101      	bne.n	800389c <__sfputs_r+0x12>
 8003898:	2000      	movs	r0, #0
 800389a:	e007      	b.n	80038ac <__sfputs_r+0x22>
 800389c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a0:	463a      	mov	r2, r7
 80038a2:	4630      	mov	r0, r6
 80038a4:	f7ff ffda 	bl	800385c <__sfputc_r>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d1f3      	bne.n	8003894 <__sfputs_r+0xa>
 80038ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038b0 <_vfiprintf_r>:
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	460d      	mov	r5, r1
 80038b6:	b09d      	sub	sp, #116	; 0x74
 80038b8:	4614      	mov	r4, r2
 80038ba:	4698      	mov	r8, r3
 80038bc:	4606      	mov	r6, r0
 80038be:	b118      	cbz	r0, 80038c8 <_vfiprintf_r+0x18>
 80038c0:	6983      	ldr	r3, [r0, #24]
 80038c2:	b90b      	cbnz	r3, 80038c8 <_vfiprintf_r+0x18>
 80038c4:	f7ff fe96 	bl	80035f4 <__sinit>
 80038c8:	4b89      	ldr	r3, [pc, #548]	; (8003af0 <_vfiprintf_r+0x240>)
 80038ca:	429d      	cmp	r5, r3
 80038cc:	d11b      	bne.n	8003906 <_vfiprintf_r+0x56>
 80038ce:	6875      	ldr	r5, [r6, #4]
 80038d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038d2:	07d9      	lsls	r1, r3, #31
 80038d4:	d405      	bmi.n	80038e2 <_vfiprintf_r+0x32>
 80038d6:	89ab      	ldrh	r3, [r5, #12]
 80038d8:	059a      	lsls	r2, r3, #22
 80038da:	d402      	bmi.n	80038e2 <_vfiprintf_r+0x32>
 80038dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038de:	f7ff ff27 	bl	8003730 <__retarget_lock_acquire_recursive>
 80038e2:	89ab      	ldrh	r3, [r5, #12]
 80038e4:	071b      	lsls	r3, r3, #28
 80038e6:	d501      	bpl.n	80038ec <_vfiprintf_r+0x3c>
 80038e8:	692b      	ldr	r3, [r5, #16]
 80038ea:	b9eb      	cbnz	r3, 8003928 <_vfiprintf_r+0x78>
 80038ec:	4629      	mov	r1, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	f000 fb5a 	bl	8003fa8 <__swsetup_r>
 80038f4:	b1c0      	cbz	r0, 8003928 <_vfiprintf_r+0x78>
 80038f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038f8:	07dc      	lsls	r4, r3, #31
 80038fa:	d50e      	bpl.n	800391a <_vfiprintf_r+0x6a>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	b01d      	add	sp, #116	; 0x74
 8003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003906:	4b7b      	ldr	r3, [pc, #492]	; (8003af4 <_vfiprintf_r+0x244>)
 8003908:	429d      	cmp	r5, r3
 800390a:	d101      	bne.n	8003910 <_vfiprintf_r+0x60>
 800390c:	68b5      	ldr	r5, [r6, #8]
 800390e:	e7df      	b.n	80038d0 <_vfiprintf_r+0x20>
 8003910:	4b79      	ldr	r3, [pc, #484]	; (8003af8 <_vfiprintf_r+0x248>)
 8003912:	429d      	cmp	r5, r3
 8003914:	bf08      	it	eq
 8003916:	68f5      	ldreq	r5, [r6, #12]
 8003918:	e7da      	b.n	80038d0 <_vfiprintf_r+0x20>
 800391a:	89ab      	ldrh	r3, [r5, #12]
 800391c:	0598      	lsls	r0, r3, #22
 800391e:	d4ed      	bmi.n	80038fc <_vfiprintf_r+0x4c>
 8003920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003922:	f7ff ff06 	bl	8003732 <__retarget_lock_release_recursive>
 8003926:	e7e9      	b.n	80038fc <_vfiprintf_r+0x4c>
 8003928:	2300      	movs	r3, #0
 800392a:	9309      	str	r3, [sp, #36]	; 0x24
 800392c:	2320      	movs	r3, #32
 800392e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003932:	f8cd 800c 	str.w	r8, [sp, #12]
 8003936:	2330      	movs	r3, #48	; 0x30
 8003938:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003afc <_vfiprintf_r+0x24c>
 800393c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003940:	f04f 0901 	mov.w	r9, #1
 8003944:	4623      	mov	r3, r4
 8003946:	469a      	mov	sl, r3
 8003948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800394c:	b10a      	cbz	r2, 8003952 <_vfiprintf_r+0xa2>
 800394e:	2a25      	cmp	r2, #37	; 0x25
 8003950:	d1f9      	bne.n	8003946 <_vfiprintf_r+0x96>
 8003952:	ebba 0b04 	subs.w	fp, sl, r4
 8003956:	d00b      	beq.n	8003970 <_vfiprintf_r+0xc0>
 8003958:	465b      	mov	r3, fp
 800395a:	4622      	mov	r2, r4
 800395c:	4629      	mov	r1, r5
 800395e:	4630      	mov	r0, r6
 8003960:	f7ff ff93 	bl	800388a <__sfputs_r>
 8003964:	3001      	adds	r0, #1
 8003966:	f000 80aa 	beq.w	8003abe <_vfiprintf_r+0x20e>
 800396a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800396c:	445a      	add	r2, fp
 800396e:	9209      	str	r2, [sp, #36]	; 0x24
 8003970:	f89a 3000 	ldrb.w	r3, [sl]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a2 	beq.w	8003abe <_vfiprintf_r+0x20e>
 800397a:	2300      	movs	r3, #0
 800397c:	f04f 32ff 	mov.w	r2, #4294967295
 8003980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003984:	f10a 0a01 	add.w	sl, sl, #1
 8003988:	9304      	str	r3, [sp, #16]
 800398a:	9307      	str	r3, [sp, #28]
 800398c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003990:	931a      	str	r3, [sp, #104]	; 0x68
 8003992:	4654      	mov	r4, sl
 8003994:	2205      	movs	r2, #5
 8003996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800399a:	4858      	ldr	r0, [pc, #352]	; (8003afc <_vfiprintf_r+0x24c>)
 800399c:	f7fc fc18 	bl	80001d0 <memchr>
 80039a0:	9a04      	ldr	r2, [sp, #16]
 80039a2:	b9d8      	cbnz	r0, 80039dc <_vfiprintf_r+0x12c>
 80039a4:	06d1      	lsls	r1, r2, #27
 80039a6:	bf44      	itt	mi
 80039a8:	2320      	movmi	r3, #32
 80039aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ae:	0713      	lsls	r3, r2, #28
 80039b0:	bf44      	itt	mi
 80039b2:	232b      	movmi	r3, #43	; 0x2b
 80039b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b8:	f89a 3000 	ldrb.w	r3, [sl]
 80039bc:	2b2a      	cmp	r3, #42	; 0x2a
 80039be:	d015      	beq.n	80039ec <_vfiprintf_r+0x13c>
 80039c0:	9a07      	ldr	r2, [sp, #28]
 80039c2:	4654      	mov	r4, sl
 80039c4:	2000      	movs	r0, #0
 80039c6:	f04f 0c0a 	mov.w	ip, #10
 80039ca:	4621      	mov	r1, r4
 80039cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d0:	3b30      	subs	r3, #48	; 0x30
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d94e      	bls.n	8003a74 <_vfiprintf_r+0x1c4>
 80039d6:	b1b0      	cbz	r0, 8003a06 <_vfiprintf_r+0x156>
 80039d8:	9207      	str	r2, [sp, #28]
 80039da:	e014      	b.n	8003a06 <_vfiprintf_r+0x156>
 80039dc:	eba0 0308 	sub.w	r3, r0, r8
 80039e0:	fa09 f303 	lsl.w	r3, r9, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	9304      	str	r3, [sp, #16]
 80039e8:	46a2      	mov	sl, r4
 80039ea:	e7d2      	b.n	8003992 <_vfiprintf_r+0xe2>
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	1d19      	adds	r1, r3, #4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	9103      	str	r1, [sp, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bfbb      	ittet	lt
 80039f8:	425b      	neglt	r3, r3
 80039fa:	f042 0202 	orrlt.w	r2, r2, #2
 80039fe:	9307      	strge	r3, [sp, #28]
 8003a00:	9307      	strlt	r3, [sp, #28]
 8003a02:	bfb8      	it	lt
 8003a04:	9204      	strlt	r2, [sp, #16]
 8003a06:	7823      	ldrb	r3, [r4, #0]
 8003a08:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0a:	d10c      	bne.n	8003a26 <_vfiprintf_r+0x176>
 8003a0c:	7863      	ldrb	r3, [r4, #1]
 8003a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a10:	d135      	bne.n	8003a7e <_vfiprintf_r+0x1ce>
 8003a12:	9b03      	ldr	r3, [sp, #12]
 8003a14:	1d1a      	adds	r2, r3, #4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	9203      	str	r2, [sp, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfb8      	it	lt
 8003a1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a22:	3402      	adds	r4, #2
 8003a24:	9305      	str	r3, [sp, #20]
 8003a26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b0c <_vfiprintf_r+0x25c>
 8003a2a:	7821      	ldrb	r1, [r4, #0]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	4650      	mov	r0, sl
 8003a30:	f7fc fbce 	bl	80001d0 <memchr>
 8003a34:	b140      	cbz	r0, 8003a48 <_vfiprintf_r+0x198>
 8003a36:	2340      	movs	r3, #64	; 0x40
 8003a38:	eba0 000a 	sub.w	r0, r0, sl
 8003a3c:	fa03 f000 	lsl.w	r0, r3, r0
 8003a40:	9b04      	ldr	r3, [sp, #16]
 8003a42:	4303      	orrs	r3, r0
 8003a44:	3401      	adds	r4, #1
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4c:	482c      	ldr	r0, [pc, #176]	; (8003b00 <_vfiprintf_r+0x250>)
 8003a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a52:	2206      	movs	r2, #6
 8003a54:	f7fc fbbc 	bl	80001d0 <memchr>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d03f      	beq.n	8003adc <_vfiprintf_r+0x22c>
 8003a5c:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <_vfiprintf_r+0x254>)
 8003a5e:	bb1b      	cbnz	r3, 8003aa8 <_vfiprintf_r+0x1f8>
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	3307      	adds	r3, #7
 8003a64:	f023 0307 	bic.w	r3, r3, #7
 8003a68:	3308      	adds	r3, #8
 8003a6a:	9303      	str	r3, [sp, #12]
 8003a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6e:	443b      	add	r3, r7
 8003a70:	9309      	str	r3, [sp, #36]	; 0x24
 8003a72:	e767      	b.n	8003944 <_vfiprintf_r+0x94>
 8003a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a78:	460c      	mov	r4, r1
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	e7a5      	b.n	80039ca <_vfiprintf_r+0x11a>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	3401      	adds	r4, #1
 8003a82:	9305      	str	r3, [sp, #20]
 8003a84:	4619      	mov	r1, r3
 8003a86:	f04f 0c0a 	mov.w	ip, #10
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a90:	3a30      	subs	r2, #48	; 0x30
 8003a92:	2a09      	cmp	r2, #9
 8003a94:	d903      	bls.n	8003a9e <_vfiprintf_r+0x1ee>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0c5      	beq.n	8003a26 <_vfiprintf_r+0x176>
 8003a9a:	9105      	str	r1, [sp, #20]
 8003a9c:	e7c3      	b.n	8003a26 <_vfiprintf_r+0x176>
 8003a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e7f0      	b.n	8003a8a <_vfiprintf_r+0x1da>
 8003aa8:	ab03      	add	r3, sp, #12
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	462a      	mov	r2, r5
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <_vfiprintf_r+0x258>)
 8003ab0:	a904      	add	r1, sp, #16
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f3af 8000 	nop.w
 8003ab8:	4607      	mov	r7, r0
 8003aba:	1c78      	adds	r0, r7, #1
 8003abc:	d1d6      	bne.n	8003a6c <_vfiprintf_r+0x1bc>
 8003abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ac0:	07d9      	lsls	r1, r3, #31
 8003ac2:	d405      	bmi.n	8003ad0 <_vfiprintf_r+0x220>
 8003ac4:	89ab      	ldrh	r3, [r5, #12]
 8003ac6:	059a      	lsls	r2, r3, #22
 8003ac8:	d402      	bmi.n	8003ad0 <_vfiprintf_r+0x220>
 8003aca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003acc:	f7ff fe31 	bl	8003732 <__retarget_lock_release_recursive>
 8003ad0:	89ab      	ldrh	r3, [r5, #12]
 8003ad2:	065b      	lsls	r3, r3, #25
 8003ad4:	f53f af12 	bmi.w	80038fc <_vfiprintf_r+0x4c>
 8003ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ada:	e711      	b.n	8003900 <_vfiprintf_r+0x50>
 8003adc:	ab03      	add	r3, sp, #12
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <_vfiprintf_r+0x258>)
 8003ae4:	a904      	add	r1, sp, #16
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f000 f880 	bl	8003bec <_printf_i>
 8003aec:	e7e4      	b.n	8003ab8 <_vfiprintf_r+0x208>
 8003aee:	bf00      	nop
 8003af0:	080044bc 	.word	0x080044bc
 8003af4:	080044dc 	.word	0x080044dc
 8003af8:	0800449c 	.word	0x0800449c
 8003afc:	080044fc 	.word	0x080044fc
 8003b00:	08004506 	.word	0x08004506
 8003b04:	00000000 	.word	0x00000000
 8003b08:	0800388b 	.word	0x0800388b
 8003b0c:	08004502 	.word	0x08004502

08003b10 <_printf_common>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	4616      	mov	r6, r2
 8003b16:	4699      	mov	r9, r3
 8003b18:	688a      	ldr	r2, [r1, #8]
 8003b1a:	690b      	ldr	r3, [r1, #16]
 8003b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b20:	4293      	cmp	r3, r2
 8003b22:	bfb8      	it	lt
 8003b24:	4613      	movlt	r3, r2
 8003b26:	6033      	str	r3, [r6, #0]
 8003b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b2c:	4607      	mov	r7, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	b10a      	cbz	r2, 8003b36 <_printf_common+0x26>
 8003b32:	3301      	adds	r3, #1
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	0699      	lsls	r1, r3, #26
 8003b3a:	bf42      	ittt	mi
 8003b3c:	6833      	ldrmi	r3, [r6, #0]
 8003b3e:	3302      	addmi	r3, #2
 8003b40:	6033      	strmi	r3, [r6, #0]
 8003b42:	6825      	ldr	r5, [r4, #0]
 8003b44:	f015 0506 	ands.w	r5, r5, #6
 8003b48:	d106      	bne.n	8003b58 <_printf_common+0x48>
 8003b4a:	f104 0a19 	add.w	sl, r4, #25
 8003b4e:	68e3      	ldr	r3, [r4, #12]
 8003b50:	6832      	ldr	r2, [r6, #0]
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	42ab      	cmp	r3, r5
 8003b56:	dc26      	bgt.n	8003ba6 <_printf_common+0x96>
 8003b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b5c:	1e13      	subs	r3, r2, #0
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	0692      	lsls	r2, r2, #26
 8003b66:	d42b      	bmi.n	8003bc0 <_printf_common+0xb0>
 8003b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4638      	mov	r0, r7
 8003b70:	47c0      	blx	r8
 8003b72:	3001      	adds	r0, #1
 8003b74:	d01e      	beq.n	8003bb4 <_printf_common+0xa4>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	68e5      	ldr	r5, [r4, #12]
 8003b7a:	6832      	ldr	r2, [r6, #0]
 8003b7c:	f003 0306 	and.w	r3, r3, #6
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	bf08      	it	eq
 8003b84:	1aad      	subeq	r5, r5, r2
 8003b86:	68a3      	ldr	r3, [r4, #8]
 8003b88:	6922      	ldr	r2, [r4, #16]
 8003b8a:	bf0c      	ite	eq
 8003b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b90:	2500      	movne	r5, #0
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bfc4      	itt	gt
 8003b96:	1a9b      	subgt	r3, r3, r2
 8003b98:	18ed      	addgt	r5, r5, r3
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	341a      	adds	r4, #26
 8003b9e:	42b5      	cmp	r5, r6
 8003ba0:	d11a      	bne.n	8003bd8 <_printf_common+0xc8>
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e008      	b.n	8003bb8 <_printf_common+0xa8>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	4652      	mov	r2, sl
 8003baa:	4649      	mov	r1, r9
 8003bac:	4638      	mov	r0, r7
 8003bae:	47c0      	blx	r8
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d103      	bne.n	8003bbc <_printf_common+0xac>
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bbc:	3501      	adds	r5, #1
 8003bbe:	e7c6      	b.n	8003b4e <_printf_common+0x3e>
 8003bc0:	18e1      	adds	r1, r4, r3
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	2030      	movs	r0, #48	; 0x30
 8003bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bca:	4422      	add	r2, r4
 8003bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	e7c7      	b.n	8003b68 <_printf_common+0x58>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	4622      	mov	r2, r4
 8003bdc:	4649      	mov	r1, r9
 8003bde:	4638      	mov	r0, r7
 8003be0:	47c0      	blx	r8
 8003be2:	3001      	adds	r0, #1
 8003be4:	d0e6      	beq.n	8003bb4 <_printf_common+0xa4>
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7d9      	b.n	8003b9e <_printf_common+0x8e>
	...

08003bec <_printf_i>:
 8003bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	7e0f      	ldrb	r7, [r1, #24]
 8003bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bf4:	2f78      	cmp	r7, #120	; 0x78
 8003bf6:	4691      	mov	r9, r2
 8003bf8:	4680      	mov	r8, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	469a      	mov	sl, r3
 8003bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c02:	d807      	bhi.n	8003c14 <_printf_i+0x28>
 8003c04:	2f62      	cmp	r7, #98	; 0x62
 8003c06:	d80a      	bhi.n	8003c1e <_printf_i+0x32>
 8003c08:	2f00      	cmp	r7, #0
 8003c0a:	f000 80d8 	beq.w	8003dbe <_printf_i+0x1d2>
 8003c0e:	2f58      	cmp	r7, #88	; 0x58
 8003c10:	f000 80a3 	beq.w	8003d5a <_printf_i+0x16e>
 8003c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c1c:	e03a      	b.n	8003c94 <_printf_i+0xa8>
 8003c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c22:	2b15      	cmp	r3, #21
 8003c24:	d8f6      	bhi.n	8003c14 <_printf_i+0x28>
 8003c26:	a101      	add	r1, pc, #4	; (adr r1, 8003c2c <_printf_i+0x40>)
 8003c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c2c:	08003c85 	.word	0x08003c85
 8003c30:	08003c99 	.word	0x08003c99
 8003c34:	08003c15 	.word	0x08003c15
 8003c38:	08003c15 	.word	0x08003c15
 8003c3c:	08003c15 	.word	0x08003c15
 8003c40:	08003c15 	.word	0x08003c15
 8003c44:	08003c99 	.word	0x08003c99
 8003c48:	08003c15 	.word	0x08003c15
 8003c4c:	08003c15 	.word	0x08003c15
 8003c50:	08003c15 	.word	0x08003c15
 8003c54:	08003c15 	.word	0x08003c15
 8003c58:	08003da5 	.word	0x08003da5
 8003c5c:	08003cc9 	.word	0x08003cc9
 8003c60:	08003d87 	.word	0x08003d87
 8003c64:	08003c15 	.word	0x08003c15
 8003c68:	08003c15 	.word	0x08003c15
 8003c6c:	08003dc7 	.word	0x08003dc7
 8003c70:	08003c15 	.word	0x08003c15
 8003c74:	08003cc9 	.word	0x08003cc9
 8003c78:	08003c15 	.word	0x08003c15
 8003c7c:	08003c15 	.word	0x08003c15
 8003c80:	08003d8f 	.word	0x08003d8f
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	1d1a      	adds	r2, r3, #4
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	602a      	str	r2, [r5, #0]
 8003c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0a3      	b.n	8003de0 <_printf_i+0x1f4>
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	6829      	ldr	r1, [r5, #0]
 8003c9c:	0606      	lsls	r6, r0, #24
 8003c9e:	f101 0304 	add.w	r3, r1, #4
 8003ca2:	d50a      	bpl.n	8003cba <_printf_i+0xce>
 8003ca4:	680e      	ldr	r6, [r1, #0]
 8003ca6:	602b      	str	r3, [r5, #0]
 8003ca8:	2e00      	cmp	r6, #0
 8003caa:	da03      	bge.n	8003cb4 <_printf_i+0xc8>
 8003cac:	232d      	movs	r3, #45	; 0x2d
 8003cae:	4276      	negs	r6, r6
 8003cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb4:	485e      	ldr	r0, [pc, #376]	; (8003e30 <_printf_i+0x244>)
 8003cb6:	230a      	movs	r3, #10
 8003cb8:	e019      	b.n	8003cee <_printf_i+0x102>
 8003cba:	680e      	ldr	r6, [r1, #0]
 8003cbc:	602b      	str	r3, [r5, #0]
 8003cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cc2:	bf18      	it	ne
 8003cc4:	b236      	sxthne	r6, r6
 8003cc6:	e7ef      	b.n	8003ca8 <_printf_i+0xbc>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	6820      	ldr	r0, [r4, #0]
 8003ccc:	1d19      	adds	r1, r3, #4
 8003cce:	6029      	str	r1, [r5, #0]
 8003cd0:	0601      	lsls	r1, r0, #24
 8003cd2:	d501      	bpl.n	8003cd8 <_printf_i+0xec>
 8003cd4:	681e      	ldr	r6, [r3, #0]
 8003cd6:	e002      	b.n	8003cde <_printf_i+0xf2>
 8003cd8:	0646      	lsls	r6, r0, #25
 8003cda:	d5fb      	bpl.n	8003cd4 <_printf_i+0xe8>
 8003cdc:	881e      	ldrh	r6, [r3, #0]
 8003cde:	4854      	ldr	r0, [pc, #336]	; (8003e30 <_printf_i+0x244>)
 8003ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2308      	moveq	r3, #8
 8003ce6:	230a      	movne	r3, #10
 8003ce8:	2100      	movs	r1, #0
 8003cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cee:	6865      	ldr	r5, [r4, #4]
 8003cf0:	60a5      	str	r5, [r4, #8]
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	bfa2      	ittt	ge
 8003cf6:	6821      	ldrge	r1, [r4, #0]
 8003cf8:	f021 0104 	bicge.w	r1, r1, #4
 8003cfc:	6021      	strge	r1, [r4, #0]
 8003cfe:	b90e      	cbnz	r6, 8003d04 <_printf_i+0x118>
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	d04d      	beq.n	8003da0 <_printf_i+0x1b4>
 8003d04:	4615      	mov	r5, r2
 8003d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8003d0e:	5dc7      	ldrb	r7, [r0, r7]
 8003d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d14:	4637      	mov	r7, r6
 8003d16:	42bb      	cmp	r3, r7
 8003d18:	460e      	mov	r6, r1
 8003d1a:	d9f4      	bls.n	8003d06 <_printf_i+0x11a>
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d10b      	bne.n	8003d38 <_printf_i+0x14c>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	07de      	lsls	r6, r3, #31
 8003d24:	d508      	bpl.n	8003d38 <_printf_i+0x14c>
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	6861      	ldr	r1, [r4, #4]
 8003d2a:	4299      	cmp	r1, r3
 8003d2c:	bfde      	ittt	le
 8003d2e:	2330      	movle	r3, #48	; 0x30
 8003d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d38:	1b52      	subs	r2, r2, r5
 8003d3a:	6122      	str	r2, [r4, #16]
 8003d3c:	f8cd a000 	str.w	sl, [sp]
 8003d40:	464b      	mov	r3, r9
 8003d42:	aa03      	add	r2, sp, #12
 8003d44:	4621      	mov	r1, r4
 8003d46:	4640      	mov	r0, r8
 8003d48:	f7ff fee2 	bl	8003b10 <_printf_common>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d14c      	bne.n	8003dea <_printf_i+0x1fe>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	b004      	add	sp, #16
 8003d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5a:	4835      	ldr	r0, [pc, #212]	; (8003e30 <_printf_i+0x244>)
 8003d5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d60:	6829      	ldr	r1, [r5, #0]
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d68:	6029      	str	r1, [r5, #0]
 8003d6a:	061d      	lsls	r5, r3, #24
 8003d6c:	d514      	bpl.n	8003d98 <_printf_i+0x1ac>
 8003d6e:	07df      	lsls	r7, r3, #31
 8003d70:	bf44      	itt	mi
 8003d72:	f043 0320 	orrmi.w	r3, r3, #32
 8003d76:	6023      	strmi	r3, [r4, #0]
 8003d78:	b91e      	cbnz	r6, 8003d82 <_printf_i+0x196>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	f023 0320 	bic.w	r3, r3, #32
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	2310      	movs	r3, #16
 8003d84:	e7b0      	b.n	8003ce8 <_printf_i+0xfc>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f043 0320 	orr.w	r3, r3, #32
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	2378      	movs	r3, #120	; 0x78
 8003d90:	4828      	ldr	r0, [pc, #160]	; (8003e34 <_printf_i+0x248>)
 8003d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d96:	e7e3      	b.n	8003d60 <_printf_i+0x174>
 8003d98:	0659      	lsls	r1, r3, #25
 8003d9a:	bf48      	it	mi
 8003d9c:	b2b6      	uxthmi	r6, r6
 8003d9e:	e7e6      	b.n	8003d6e <_printf_i+0x182>
 8003da0:	4615      	mov	r5, r2
 8003da2:	e7bb      	b.n	8003d1c <_printf_i+0x130>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	6826      	ldr	r6, [r4, #0]
 8003da8:	6961      	ldr	r1, [r4, #20]
 8003daa:	1d18      	adds	r0, r3, #4
 8003dac:	6028      	str	r0, [r5, #0]
 8003dae:	0635      	lsls	r5, r6, #24
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	d501      	bpl.n	8003db8 <_printf_i+0x1cc>
 8003db4:	6019      	str	r1, [r3, #0]
 8003db6:	e002      	b.n	8003dbe <_printf_i+0x1d2>
 8003db8:	0670      	lsls	r0, r6, #25
 8003dba:	d5fb      	bpl.n	8003db4 <_printf_i+0x1c8>
 8003dbc:	8019      	strh	r1, [r3, #0]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6123      	str	r3, [r4, #16]
 8003dc2:	4615      	mov	r5, r2
 8003dc4:	e7ba      	b.n	8003d3c <_printf_i+0x150>
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	1d1a      	adds	r2, r3, #4
 8003dca:	602a      	str	r2, [r5, #0]
 8003dcc:	681d      	ldr	r5, [r3, #0]
 8003dce:	6862      	ldr	r2, [r4, #4]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f7fc f9fc 	bl	80001d0 <memchr>
 8003dd8:	b108      	cbz	r0, 8003dde <_printf_i+0x1f2>
 8003dda:	1b40      	subs	r0, r0, r5
 8003ddc:	6060      	str	r0, [r4, #4]
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	2300      	movs	r3, #0
 8003de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de8:	e7a8      	b.n	8003d3c <_printf_i+0x150>
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	462a      	mov	r2, r5
 8003dee:	4649      	mov	r1, r9
 8003df0:	4640      	mov	r0, r8
 8003df2:	47d0      	blx	sl
 8003df4:	3001      	adds	r0, #1
 8003df6:	d0ab      	beq.n	8003d50 <_printf_i+0x164>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	079b      	lsls	r3, r3, #30
 8003dfc:	d413      	bmi.n	8003e26 <_printf_i+0x23a>
 8003dfe:	68e0      	ldr	r0, [r4, #12]
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	4298      	cmp	r0, r3
 8003e04:	bfb8      	it	lt
 8003e06:	4618      	movlt	r0, r3
 8003e08:	e7a4      	b.n	8003d54 <_printf_i+0x168>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4632      	mov	r2, r6
 8003e0e:	4649      	mov	r1, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	47d0      	blx	sl
 8003e14:	3001      	adds	r0, #1
 8003e16:	d09b      	beq.n	8003d50 <_printf_i+0x164>
 8003e18:	3501      	adds	r5, #1
 8003e1a:	68e3      	ldr	r3, [r4, #12]
 8003e1c:	9903      	ldr	r1, [sp, #12]
 8003e1e:	1a5b      	subs	r3, r3, r1
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	dcf2      	bgt.n	8003e0a <_printf_i+0x21e>
 8003e24:	e7eb      	b.n	8003dfe <_printf_i+0x212>
 8003e26:	2500      	movs	r5, #0
 8003e28:	f104 0619 	add.w	r6, r4, #25
 8003e2c:	e7f5      	b.n	8003e1a <_printf_i+0x22e>
 8003e2e:	bf00      	nop
 8003e30:	0800450d 	.word	0x0800450d
 8003e34:	0800451e 	.word	0x0800451e

08003e38 <_sbrk_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4d06      	ldr	r5, [pc, #24]	; (8003e54 <_sbrk_r+0x1c>)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4604      	mov	r4, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	f7fc fb4c 	bl	80004e0 <_sbrk>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_sbrk_r+0x1a>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_sbrk_r+0x1a>
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	20000108 	.word	0x20000108

08003e58 <__sread>:
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e60:	f000 fab2 	bl	80043c8 <_read_r>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	bfab      	itete	ge
 8003e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e6c:	181b      	addge	r3, r3, r0
 8003e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e72:	bfac      	ite	ge
 8003e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e76:	81a3      	strhlt	r3, [r4, #12]
 8003e78:	bd10      	pop	{r4, pc}

08003e7a <__swrite>:
 8003e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7e:	461f      	mov	r7, r3
 8003e80:	898b      	ldrh	r3, [r1, #12]
 8003e82:	05db      	lsls	r3, r3, #23
 8003e84:	4605      	mov	r5, r0
 8003e86:	460c      	mov	r4, r1
 8003e88:	4616      	mov	r6, r2
 8003e8a:	d505      	bpl.n	8003e98 <__swrite+0x1e>
 8003e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e90:	2302      	movs	r3, #2
 8003e92:	2200      	movs	r2, #0
 8003e94:	f000 f9c8 	bl	8004228 <_lseek_r>
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eae:	f000 b869 	b.w	8003f84 <_write_r>

08003eb2 <__sseek>:
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eba:	f000 f9b5 	bl	8004228 <_lseek_r>
 8003ebe:	1c43      	adds	r3, r0, #1
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	bf15      	itete	ne
 8003ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ece:	81a3      	strheq	r3, [r4, #12]
 8003ed0:	bf18      	it	ne
 8003ed2:	81a3      	strhne	r3, [r4, #12]
 8003ed4:	bd10      	pop	{r4, pc}

08003ed6 <__sclose>:
 8003ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eda:	f000 b8d3 	b.w	8004084 <_close_r>
	...

08003ee0 <__swbuf_r>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	460e      	mov	r6, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	b118      	cbz	r0, 8003ef2 <__swbuf_r+0x12>
 8003eea:	6983      	ldr	r3, [r0, #24]
 8003eec:	b90b      	cbnz	r3, 8003ef2 <__swbuf_r+0x12>
 8003eee:	f7ff fb81 	bl	80035f4 <__sinit>
 8003ef2:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <__swbuf_r+0x98>)
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	d12b      	bne.n	8003f50 <__swbuf_r+0x70>
 8003ef8:	686c      	ldr	r4, [r5, #4]
 8003efa:	69a3      	ldr	r3, [r4, #24]
 8003efc:	60a3      	str	r3, [r4, #8]
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	071a      	lsls	r2, r3, #28
 8003f02:	d52f      	bpl.n	8003f64 <__swbuf_r+0x84>
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	b36b      	cbz	r3, 8003f64 <__swbuf_r+0x84>
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	6820      	ldr	r0, [r4, #0]
 8003f0c:	1ac0      	subs	r0, r0, r3
 8003f0e:	6963      	ldr	r3, [r4, #20]
 8003f10:	b2f6      	uxtb	r6, r6
 8003f12:	4283      	cmp	r3, r0
 8003f14:	4637      	mov	r7, r6
 8003f16:	dc04      	bgt.n	8003f22 <__swbuf_r+0x42>
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f000 f948 	bl	80041b0 <_fflush_r>
 8003f20:	bb30      	cbnz	r0, 8003f70 <__swbuf_r+0x90>
 8003f22:	68a3      	ldr	r3, [r4, #8]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	60a3      	str	r3, [r4, #8]
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	6022      	str	r2, [r4, #0]
 8003f2e:	701e      	strb	r6, [r3, #0]
 8003f30:	6963      	ldr	r3, [r4, #20]
 8003f32:	3001      	adds	r0, #1
 8003f34:	4283      	cmp	r3, r0
 8003f36:	d004      	beq.n	8003f42 <__swbuf_r+0x62>
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	07db      	lsls	r3, r3, #31
 8003f3c:	d506      	bpl.n	8003f4c <__swbuf_r+0x6c>
 8003f3e:	2e0a      	cmp	r6, #10
 8003f40:	d104      	bne.n	8003f4c <__swbuf_r+0x6c>
 8003f42:	4621      	mov	r1, r4
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 f933 	bl	80041b0 <_fflush_r>
 8003f4a:	b988      	cbnz	r0, 8003f70 <__swbuf_r+0x90>
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <__swbuf_r+0x9c>)
 8003f52:	429c      	cmp	r4, r3
 8003f54:	d101      	bne.n	8003f5a <__swbuf_r+0x7a>
 8003f56:	68ac      	ldr	r4, [r5, #8]
 8003f58:	e7cf      	b.n	8003efa <__swbuf_r+0x1a>
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <__swbuf_r+0xa0>)
 8003f5c:	429c      	cmp	r4, r3
 8003f5e:	bf08      	it	eq
 8003f60:	68ec      	ldreq	r4, [r5, #12]
 8003f62:	e7ca      	b.n	8003efa <__swbuf_r+0x1a>
 8003f64:	4621      	mov	r1, r4
 8003f66:	4628      	mov	r0, r5
 8003f68:	f000 f81e 	bl	8003fa8 <__swsetup_r>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d0cb      	beq.n	8003f08 <__swbuf_r+0x28>
 8003f70:	f04f 37ff 	mov.w	r7, #4294967295
 8003f74:	e7ea      	b.n	8003f4c <__swbuf_r+0x6c>
 8003f76:	bf00      	nop
 8003f78:	080044bc 	.word	0x080044bc
 8003f7c:	080044dc 	.word	0x080044dc
 8003f80:	0800449c 	.word	0x0800449c

08003f84 <_write_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d07      	ldr	r5, [pc, #28]	; (8003fa4 <_write_r+0x20>)
 8003f88:	4604      	mov	r4, r0
 8003f8a:	4608      	mov	r0, r1
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	602a      	str	r2, [r5, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fc fa53 	bl	800043e <_write>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_write_r+0x1e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_write_r+0x1e>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	20000108 	.word	0x20000108

08003fa8 <__swsetup_r>:
 8003fa8:	4b32      	ldr	r3, [pc, #200]	; (8004074 <__swsetup_r+0xcc>)
 8003faa:	b570      	push	{r4, r5, r6, lr}
 8003fac:	681d      	ldr	r5, [r3, #0]
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	b125      	cbz	r5, 8003fbe <__swsetup_r+0x16>
 8003fb4:	69ab      	ldr	r3, [r5, #24]
 8003fb6:	b913      	cbnz	r3, 8003fbe <__swsetup_r+0x16>
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f7ff fb1b 	bl	80035f4 <__sinit>
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <__swsetup_r+0xd0>)
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	d10f      	bne.n	8003fe4 <__swsetup_r+0x3c>
 8003fc4:	686c      	ldr	r4, [r5, #4]
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fcc:	0719      	lsls	r1, r3, #28
 8003fce:	d42c      	bmi.n	800402a <__swsetup_r+0x82>
 8003fd0:	06dd      	lsls	r5, r3, #27
 8003fd2:	d411      	bmi.n	8003ff8 <__swsetup_r+0x50>
 8003fd4:	2309      	movs	r3, #9
 8003fd6:	6033      	str	r3, [r6, #0]
 8003fd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe2:	e03e      	b.n	8004062 <__swsetup_r+0xba>
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <__swsetup_r+0xd4>)
 8003fe6:	429c      	cmp	r4, r3
 8003fe8:	d101      	bne.n	8003fee <__swsetup_r+0x46>
 8003fea:	68ac      	ldr	r4, [r5, #8]
 8003fec:	e7eb      	b.n	8003fc6 <__swsetup_r+0x1e>
 8003fee:	4b24      	ldr	r3, [pc, #144]	; (8004080 <__swsetup_r+0xd8>)
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	bf08      	it	eq
 8003ff4:	68ec      	ldreq	r4, [r5, #12]
 8003ff6:	e7e6      	b.n	8003fc6 <__swsetup_r+0x1e>
 8003ff8:	0758      	lsls	r0, r3, #29
 8003ffa:	d512      	bpl.n	8004022 <__swsetup_r+0x7a>
 8003ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ffe:	b141      	cbz	r1, 8004012 <__swsetup_r+0x6a>
 8004000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004004:	4299      	cmp	r1, r3
 8004006:	d002      	beq.n	800400e <__swsetup_r+0x66>
 8004008:	4630      	mov	r0, r6
 800400a:	f000 f991 	bl	8004330 <_free_r>
 800400e:	2300      	movs	r3, #0
 8004010:	6363      	str	r3, [r4, #52]	; 0x34
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	2300      	movs	r3, #0
 800401c:	6063      	str	r3, [r4, #4]
 800401e:	6923      	ldr	r3, [r4, #16]
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	f043 0308 	orr.w	r3, r3, #8
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	6923      	ldr	r3, [r4, #16]
 800402c:	b94b      	cbnz	r3, 8004042 <__swsetup_r+0x9a>
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004038:	d003      	beq.n	8004042 <__swsetup_r+0x9a>
 800403a:	4621      	mov	r1, r4
 800403c:	4630      	mov	r0, r6
 800403e:	f000 f92b 	bl	8004298 <__smakebuf_r>
 8004042:	89a0      	ldrh	r0, [r4, #12]
 8004044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004048:	f010 0301 	ands.w	r3, r0, #1
 800404c:	d00a      	beq.n	8004064 <__swsetup_r+0xbc>
 800404e:	2300      	movs	r3, #0
 8004050:	60a3      	str	r3, [r4, #8]
 8004052:	6963      	ldr	r3, [r4, #20]
 8004054:	425b      	negs	r3, r3
 8004056:	61a3      	str	r3, [r4, #24]
 8004058:	6923      	ldr	r3, [r4, #16]
 800405a:	b943      	cbnz	r3, 800406e <__swsetup_r+0xc6>
 800405c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004060:	d1ba      	bne.n	8003fd8 <__swsetup_r+0x30>
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	0781      	lsls	r1, r0, #30
 8004066:	bf58      	it	pl
 8004068:	6963      	ldrpl	r3, [r4, #20]
 800406a:	60a3      	str	r3, [r4, #8]
 800406c:	e7f4      	b.n	8004058 <__swsetup_r+0xb0>
 800406e:	2000      	movs	r0, #0
 8004070:	e7f7      	b.n	8004062 <__swsetup_r+0xba>
 8004072:	bf00      	nop
 8004074:	2000000c 	.word	0x2000000c
 8004078:	080044bc 	.word	0x080044bc
 800407c:	080044dc 	.word	0x080044dc
 8004080:	0800449c 	.word	0x0800449c

08004084 <_close_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4d06      	ldr	r5, [pc, #24]	; (80040a0 <_close_r+0x1c>)
 8004088:	2300      	movs	r3, #0
 800408a:	4604      	mov	r4, r0
 800408c:	4608      	mov	r0, r1
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	f7fc f9f1 	bl	8000476 <_close>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_close_r+0x1a>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_close_r+0x1a>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	20000108 	.word	0x20000108

080040a4 <__sflush_r>:
 80040a4:	898a      	ldrh	r2, [r1, #12]
 80040a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040aa:	4605      	mov	r5, r0
 80040ac:	0710      	lsls	r0, r2, #28
 80040ae:	460c      	mov	r4, r1
 80040b0:	d458      	bmi.n	8004164 <__sflush_r+0xc0>
 80040b2:	684b      	ldr	r3, [r1, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	dc05      	bgt.n	80040c4 <__sflush_r+0x20>
 80040b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dc02      	bgt.n	80040c4 <__sflush_r+0x20>
 80040be:	2000      	movs	r0, #0
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040c6:	2e00      	cmp	r6, #0
 80040c8:	d0f9      	beq.n	80040be <__sflush_r+0x1a>
 80040ca:	2300      	movs	r3, #0
 80040cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040d0:	682f      	ldr	r7, [r5, #0]
 80040d2:	602b      	str	r3, [r5, #0]
 80040d4:	d032      	beq.n	800413c <__sflush_r+0x98>
 80040d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	075a      	lsls	r2, r3, #29
 80040dc:	d505      	bpl.n	80040ea <__sflush_r+0x46>
 80040de:	6863      	ldr	r3, [r4, #4]
 80040e0:	1ac0      	subs	r0, r0, r3
 80040e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040e4:	b10b      	cbz	r3, 80040ea <__sflush_r+0x46>
 80040e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040e8:	1ac0      	subs	r0, r0, r3
 80040ea:	2300      	movs	r3, #0
 80040ec:	4602      	mov	r2, r0
 80040ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040f0:	6a21      	ldr	r1, [r4, #32]
 80040f2:	4628      	mov	r0, r5
 80040f4:	47b0      	blx	r6
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	d106      	bne.n	800410a <__sflush_r+0x66>
 80040fc:	6829      	ldr	r1, [r5, #0]
 80040fe:	291d      	cmp	r1, #29
 8004100:	d82c      	bhi.n	800415c <__sflush_r+0xb8>
 8004102:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <__sflush_r+0x108>)
 8004104:	40ca      	lsrs	r2, r1
 8004106:	07d6      	lsls	r6, r2, #31
 8004108:	d528      	bpl.n	800415c <__sflush_r+0xb8>
 800410a:	2200      	movs	r2, #0
 800410c:	6062      	str	r2, [r4, #4]
 800410e:	04d9      	lsls	r1, r3, #19
 8004110:	6922      	ldr	r2, [r4, #16]
 8004112:	6022      	str	r2, [r4, #0]
 8004114:	d504      	bpl.n	8004120 <__sflush_r+0x7c>
 8004116:	1c42      	adds	r2, r0, #1
 8004118:	d101      	bne.n	800411e <__sflush_r+0x7a>
 800411a:	682b      	ldr	r3, [r5, #0]
 800411c:	b903      	cbnz	r3, 8004120 <__sflush_r+0x7c>
 800411e:	6560      	str	r0, [r4, #84]	; 0x54
 8004120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004122:	602f      	str	r7, [r5, #0]
 8004124:	2900      	cmp	r1, #0
 8004126:	d0ca      	beq.n	80040be <__sflush_r+0x1a>
 8004128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800412c:	4299      	cmp	r1, r3
 800412e:	d002      	beq.n	8004136 <__sflush_r+0x92>
 8004130:	4628      	mov	r0, r5
 8004132:	f000 f8fd 	bl	8004330 <_free_r>
 8004136:	2000      	movs	r0, #0
 8004138:	6360      	str	r0, [r4, #52]	; 0x34
 800413a:	e7c1      	b.n	80040c0 <__sflush_r+0x1c>
 800413c:	6a21      	ldr	r1, [r4, #32]
 800413e:	2301      	movs	r3, #1
 8004140:	4628      	mov	r0, r5
 8004142:	47b0      	blx	r6
 8004144:	1c41      	adds	r1, r0, #1
 8004146:	d1c7      	bne.n	80040d8 <__sflush_r+0x34>
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0c4      	beq.n	80040d8 <__sflush_r+0x34>
 800414e:	2b1d      	cmp	r3, #29
 8004150:	d001      	beq.n	8004156 <__sflush_r+0xb2>
 8004152:	2b16      	cmp	r3, #22
 8004154:	d101      	bne.n	800415a <__sflush_r+0xb6>
 8004156:	602f      	str	r7, [r5, #0]
 8004158:	e7b1      	b.n	80040be <__sflush_r+0x1a>
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004160:	81a3      	strh	r3, [r4, #12]
 8004162:	e7ad      	b.n	80040c0 <__sflush_r+0x1c>
 8004164:	690f      	ldr	r7, [r1, #16]
 8004166:	2f00      	cmp	r7, #0
 8004168:	d0a9      	beq.n	80040be <__sflush_r+0x1a>
 800416a:	0793      	lsls	r3, r2, #30
 800416c:	680e      	ldr	r6, [r1, #0]
 800416e:	bf08      	it	eq
 8004170:	694b      	ldreq	r3, [r1, #20]
 8004172:	600f      	str	r7, [r1, #0]
 8004174:	bf18      	it	ne
 8004176:	2300      	movne	r3, #0
 8004178:	eba6 0807 	sub.w	r8, r6, r7
 800417c:	608b      	str	r3, [r1, #8]
 800417e:	f1b8 0f00 	cmp.w	r8, #0
 8004182:	dd9c      	ble.n	80040be <__sflush_r+0x1a>
 8004184:	6a21      	ldr	r1, [r4, #32]
 8004186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004188:	4643      	mov	r3, r8
 800418a:	463a      	mov	r2, r7
 800418c:	4628      	mov	r0, r5
 800418e:	47b0      	blx	r6
 8004190:	2800      	cmp	r0, #0
 8004192:	dc06      	bgt.n	80041a2 <__sflush_r+0xfe>
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e78e      	b.n	80040c0 <__sflush_r+0x1c>
 80041a2:	4407      	add	r7, r0
 80041a4:	eba8 0800 	sub.w	r8, r8, r0
 80041a8:	e7e9      	b.n	800417e <__sflush_r+0xda>
 80041aa:	bf00      	nop
 80041ac:	20400001 	.word	0x20400001

080041b0 <_fflush_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	690b      	ldr	r3, [r1, #16]
 80041b4:	4605      	mov	r5, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	b913      	cbnz	r3, 80041c0 <_fflush_r+0x10>
 80041ba:	2500      	movs	r5, #0
 80041bc:	4628      	mov	r0, r5
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	b118      	cbz	r0, 80041ca <_fflush_r+0x1a>
 80041c2:	6983      	ldr	r3, [r0, #24]
 80041c4:	b90b      	cbnz	r3, 80041ca <_fflush_r+0x1a>
 80041c6:	f7ff fa15 	bl	80035f4 <__sinit>
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <_fflush_r+0x6c>)
 80041cc:	429c      	cmp	r4, r3
 80041ce:	d11b      	bne.n	8004208 <_fflush_r+0x58>
 80041d0:	686c      	ldr	r4, [r5, #4]
 80041d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0ef      	beq.n	80041ba <_fflush_r+0xa>
 80041da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041dc:	07d0      	lsls	r0, r2, #31
 80041de:	d404      	bmi.n	80041ea <_fflush_r+0x3a>
 80041e0:	0599      	lsls	r1, r3, #22
 80041e2:	d402      	bmi.n	80041ea <_fflush_r+0x3a>
 80041e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041e6:	f7ff faa3 	bl	8003730 <__retarget_lock_acquire_recursive>
 80041ea:	4628      	mov	r0, r5
 80041ec:	4621      	mov	r1, r4
 80041ee:	f7ff ff59 	bl	80040a4 <__sflush_r>
 80041f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041f4:	07da      	lsls	r2, r3, #31
 80041f6:	4605      	mov	r5, r0
 80041f8:	d4e0      	bmi.n	80041bc <_fflush_r+0xc>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	059b      	lsls	r3, r3, #22
 80041fe:	d4dd      	bmi.n	80041bc <_fflush_r+0xc>
 8004200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004202:	f7ff fa96 	bl	8003732 <__retarget_lock_release_recursive>
 8004206:	e7d9      	b.n	80041bc <_fflush_r+0xc>
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <_fflush_r+0x70>)
 800420a:	429c      	cmp	r4, r3
 800420c:	d101      	bne.n	8004212 <_fflush_r+0x62>
 800420e:	68ac      	ldr	r4, [r5, #8]
 8004210:	e7df      	b.n	80041d2 <_fflush_r+0x22>
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <_fflush_r+0x74>)
 8004214:	429c      	cmp	r4, r3
 8004216:	bf08      	it	eq
 8004218:	68ec      	ldreq	r4, [r5, #12]
 800421a:	e7da      	b.n	80041d2 <_fflush_r+0x22>
 800421c:	080044bc 	.word	0x080044bc
 8004220:	080044dc 	.word	0x080044dc
 8004224:	0800449c 	.word	0x0800449c

08004228 <_lseek_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4d07      	ldr	r5, [pc, #28]	; (8004248 <_lseek_r+0x20>)
 800422c:	4604      	mov	r4, r0
 800422e:	4608      	mov	r0, r1
 8004230:	4611      	mov	r1, r2
 8004232:	2200      	movs	r2, #0
 8004234:	602a      	str	r2, [r5, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	f7fc f944 	bl	80004c4 <_lseek>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d102      	bne.n	8004246 <_lseek_r+0x1e>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	b103      	cbz	r3, 8004246 <_lseek_r+0x1e>
 8004244:	6023      	str	r3, [r4, #0]
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	20000108 	.word	0x20000108

0800424c <__swhatbuf_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	460e      	mov	r6, r1
 8004250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004254:	2900      	cmp	r1, #0
 8004256:	b096      	sub	sp, #88	; 0x58
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	da08      	bge.n	8004270 <__swhatbuf_r+0x24>
 800425e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	602a      	str	r2, [r5, #0]
 8004266:	061a      	lsls	r2, r3, #24
 8004268:	d410      	bmi.n	800428c <__swhatbuf_r+0x40>
 800426a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426e:	e00e      	b.n	800428e <__swhatbuf_r+0x42>
 8004270:	466a      	mov	r2, sp
 8004272:	f000 f8bb 	bl	80043ec <_fstat_r>
 8004276:	2800      	cmp	r0, #0
 8004278:	dbf1      	blt.n	800425e <__swhatbuf_r+0x12>
 800427a:	9a01      	ldr	r2, [sp, #4]
 800427c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004280:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004284:	425a      	negs	r2, r3
 8004286:	415a      	adcs	r2, r3
 8004288:	602a      	str	r2, [r5, #0]
 800428a:	e7ee      	b.n	800426a <__swhatbuf_r+0x1e>
 800428c:	2340      	movs	r3, #64	; 0x40
 800428e:	2000      	movs	r0, #0
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	b016      	add	sp, #88	; 0x58
 8004294:	bd70      	pop	{r4, r5, r6, pc}
	...

08004298 <__smakebuf_r>:
 8004298:	898b      	ldrh	r3, [r1, #12]
 800429a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800429c:	079d      	lsls	r5, r3, #30
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	d507      	bpl.n	80042b4 <__smakebuf_r+0x1c>
 80042a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	2301      	movs	r3, #1
 80042ae:	6163      	str	r3, [r4, #20]
 80042b0:	b002      	add	sp, #8
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	ab01      	add	r3, sp, #4
 80042b6:	466a      	mov	r2, sp
 80042b8:	f7ff ffc8 	bl	800424c <__swhatbuf_r>
 80042bc:	9900      	ldr	r1, [sp, #0]
 80042be:	4605      	mov	r5, r0
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7ff fa57 	bl	8003774 <_malloc_r>
 80042c6:	b948      	cbnz	r0, 80042dc <__smakebuf_r+0x44>
 80042c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042cc:	059a      	lsls	r2, r3, #22
 80042ce:	d4ef      	bmi.n	80042b0 <__smakebuf_r+0x18>
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	e7e3      	b.n	80042a4 <__smakebuf_r+0xc>
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <__smakebuf_r+0x7c>)
 80042de:	62b3      	str	r3, [r6, #40]	; 0x28
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	6020      	str	r0, [r4, #0]
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	6163      	str	r3, [r4, #20]
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	6120      	str	r0, [r4, #16]
 80042f2:	b15b      	cbz	r3, 800430c <__smakebuf_r+0x74>
 80042f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f889 	bl	8004410 <_isatty_r>
 80042fe:	b128      	cbz	r0, 800430c <__smakebuf_r+0x74>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	89a0      	ldrh	r0, [r4, #12]
 800430e:	4305      	orrs	r5, r0
 8004310:	81a5      	strh	r5, [r4, #12]
 8004312:	e7cd      	b.n	80042b0 <__smakebuf_r+0x18>
 8004314:	0800358d 	.word	0x0800358d

08004318 <__malloc_lock>:
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <__malloc_lock+0x8>)
 800431a:	f7ff ba09 	b.w	8003730 <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	200000fc 	.word	0x200000fc

08004324 <__malloc_unlock>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__malloc_unlock+0x8>)
 8004326:	f7ff ba04 	b.w	8003732 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	200000fc 	.word	0x200000fc

08004330 <_free_r>:
 8004330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004332:	2900      	cmp	r1, #0
 8004334:	d044      	beq.n	80043c0 <_free_r+0x90>
 8004336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800433a:	9001      	str	r0, [sp, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f1a1 0404 	sub.w	r4, r1, #4
 8004342:	bfb8      	it	lt
 8004344:	18e4      	addlt	r4, r4, r3
 8004346:	f7ff ffe7 	bl	8004318 <__malloc_lock>
 800434a:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <_free_r+0x94>)
 800434c:	9801      	ldr	r0, [sp, #4]
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	b933      	cbnz	r3, 8004360 <_free_r+0x30>
 8004352:	6063      	str	r3, [r4, #4]
 8004354:	6014      	str	r4, [r2, #0]
 8004356:	b003      	add	sp, #12
 8004358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800435c:	f7ff bfe2 	b.w	8004324 <__malloc_unlock>
 8004360:	42a3      	cmp	r3, r4
 8004362:	d908      	bls.n	8004376 <_free_r+0x46>
 8004364:	6825      	ldr	r5, [r4, #0]
 8004366:	1961      	adds	r1, r4, r5
 8004368:	428b      	cmp	r3, r1
 800436a:	bf01      	itttt	eq
 800436c:	6819      	ldreq	r1, [r3, #0]
 800436e:	685b      	ldreq	r3, [r3, #4]
 8004370:	1949      	addeq	r1, r1, r5
 8004372:	6021      	streq	r1, [r4, #0]
 8004374:	e7ed      	b.n	8004352 <_free_r+0x22>
 8004376:	461a      	mov	r2, r3
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	b10b      	cbz	r3, 8004380 <_free_r+0x50>
 800437c:	42a3      	cmp	r3, r4
 800437e:	d9fa      	bls.n	8004376 <_free_r+0x46>
 8004380:	6811      	ldr	r1, [r2, #0]
 8004382:	1855      	adds	r5, r2, r1
 8004384:	42a5      	cmp	r5, r4
 8004386:	d10b      	bne.n	80043a0 <_free_r+0x70>
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	4421      	add	r1, r4
 800438c:	1854      	adds	r4, r2, r1
 800438e:	42a3      	cmp	r3, r4
 8004390:	6011      	str	r1, [r2, #0]
 8004392:	d1e0      	bne.n	8004356 <_free_r+0x26>
 8004394:	681c      	ldr	r4, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	6053      	str	r3, [r2, #4]
 800439a:	4421      	add	r1, r4
 800439c:	6011      	str	r1, [r2, #0]
 800439e:	e7da      	b.n	8004356 <_free_r+0x26>
 80043a0:	d902      	bls.n	80043a8 <_free_r+0x78>
 80043a2:	230c      	movs	r3, #12
 80043a4:	6003      	str	r3, [r0, #0]
 80043a6:	e7d6      	b.n	8004356 <_free_r+0x26>
 80043a8:	6825      	ldr	r5, [r4, #0]
 80043aa:	1961      	adds	r1, r4, r5
 80043ac:	428b      	cmp	r3, r1
 80043ae:	bf04      	itt	eq
 80043b0:	6819      	ldreq	r1, [r3, #0]
 80043b2:	685b      	ldreq	r3, [r3, #4]
 80043b4:	6063      	str	r3, [r4, #4]
 80043b6:	bf04      	itt	eq
 80043b8:	1949      	addeq	r1, r1, r5
 80043ba:	6021      	streq	r1, [r4, #0]
 80043bc:	6054      	str	r4, [r2, #4]
 80043be:	e7ca      	b.n	8004356 <_free_r+0x26>
 80043c0:	b003      	add	sp, #12
 80043c2:	bd30      	pop	{r4, r5, pc}
 80043c4:	20000100 	.word	0x20000100

080043c8 <_read_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d07      	ldr	r5, [pc, #28]	; (80043e8 <_read_r+0x20>)
 80043cc:	4604      	mov	r4, r0
 80043ce:	4608      	mov	r0, r1
 80043d0:	4611      	mov	r1, r2
 80043d2:	2200      	movs	r2, #0
 80043d4:	602a      	str	r2, [r5, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f7fc f814 	bl	8000404 <_read>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_read_r+0x1e>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_read_r+0x1e>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000108 	.word	0x20000108

080043ec <_fstat_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d07      	ldr	r5, [pc, #28]	; (800440c <_fstat_r+0x20>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	f7fc f848 	bl	800048e <_fstat>
 80043fe:	1c43      	adds	r3, r0, #1
 8004400:	d102      	bne.n	8004408 <_fstat_r+0x1c>
 8004402:	682b      	ldr	r3, [r5, #0]
 8004404:	b103      	cbz	r3, 8004408 <_fstat_r+0x1c>
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	bd38      	pop	{r3, r4, r5, pc}
 800440a:	bf00      	nop
 800440c:	20000108 	.word	0x20000108

08004410 <_isatty_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d06      	ldr	r5, [pc, #24]	; (800442c <_isatty_r+0x1c>)
 8004414:	2300      	movs	r3, #0
 8004416:	4604      	mov	r4, r0
 8004418:	4608      	mov	r0, r1
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	f7fc f847 	bl	80004ae <_isatty>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_isatty_r+0x1a>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_isatty_r+0x1a>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	20000108 	.word	0x20000108

08004430 <_init>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	bf00      	nop
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr

0800443c <_fini>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr

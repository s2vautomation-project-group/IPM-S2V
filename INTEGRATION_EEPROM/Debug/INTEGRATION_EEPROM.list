
INTEGRATION_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008420  08008420  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008420  08008420  00018420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008428  08008428  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000070  080084a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080084a0  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132d0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003364  00000000  00000000  00033370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  000366d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00037520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267f5  00000000  00000000  000381e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ab9  00000000  00000000  0005e9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9ac0  00000000  00000000  00076496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ff56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004510  00000000  00000000  0014ffa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f00 	.word	0x08007f00

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007f00 	.word	0x08007f00

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	; 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__aeabi_d2f>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008b4:	bf24      	itt	cs
 80008b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008be:	d90d      	bls.n	80008dc <__aeabi_d2f+0x30>
 80008c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008d4:	bf08      	it	eq
 80008d6:	f020 0001 	biceq.w	r0, r0, #1
 80008da:	4770      	bx	lr
 80008dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e0:	d121      	bne.n	8000926 <__aeabi_d2f+0x7a>
 80008e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008e6:	bfbc      	itt	lt
 80008e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ec:	4770      	bxlt	lr
 80008ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008f6:	f1c2 0218 	rsb	r2, r2, #24
 80008fa:	f1c2 0c20 	rsb	ip, r2, #32
 80008fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	bf18      	it	ne
 8000908:	f040 0001 	orrne.w	r0, r0, #1
 800090c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000914:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000918:	ea40 000c 	orr.w	r0, r0, ip
 800091c:	fa23 f302 	lsr.w	r3, r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x14>
 8000926:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800092a:	d107      	bne.n	800093c <__aeabi_d2f+0x90>
 800092c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000930:	bf1e      	ittt	ne
 8000932:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000936:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800093a:	4770      	bxne	lr
 800093c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000940:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000944:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b974 	b.w	8000c4c <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	4604      	mov	r4, r0
 8000984:	468e      	mov	lr, r1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d14d      	bne.n	8000a26 <__udivmoddi4+0xaa>
 800098a:	428a      	cmp	r2, r1
 800098c:	4694      	mov	ip, r2
 800098e:	d969      	bls.n	8000a64 <__udivmoddi4+0xe8>
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	b152      	cbz	r2, 80009ac <__udivmoddi4+0x30>
 8000996:	fa01 f302 	lsl.w	r3, r1, r2
 800099a:	f1c2 0120 	rsb	r1, r2, #32
 800099e:	fa20 f101 	lsr.w	r1, r0, r1
 80009a2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009a6:	ea41 0e03 	orr.w	lr, r1, r3
 80009aa:	4094      	lsls	r4, r2
 80009ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b0:	0c21      	lsrs	r1, r4, #16
 80009b2:	fbbe f6f8 	udiv	r6, lr, r8
 80009b6:	fa1f f78c 	uxth.w	r7, ip
 80009ba:	fb08 e316 	mls	r3, r8, r6, lr
 80009be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009c2:	fb06 f107 	mul.w	r1, r6, r7
 80009c6:	4299      	cmp	r1, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x64>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80009d2:	f080 811f 	bcs.w	8000c14 <__udivmoddi4+0x298>
 80009d6:	4299      	cmp	r1, r3
 80009d8:	f240 811c 	bls.w	8000c14 <__udivmoddi4+0x298>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	1a5b      	subs	r3, r3, r1
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f0:	fb00 f707 	mul.w	r7, r0, r7
 80009f4:	42a7      	cmp	r7, r4
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x92>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a00:	f080 810a 	bcs.w	8000c18 <__udivmoddi4+0x29c>
 8000a04:	42a7      	cmp	r7, r4
 8000a06:	f240 8107 	bls.w	8000c18 <__udivmoddi4+0x29c>
 8000a0a:	4464      	add	r4, ip
 8000a0c:	3802      	subs	r0, #2
 8000a0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a12:	1be4      	subs	r4, r4, r7
 8000a14:	2600      	movs	r6, #0
 8000a16:	b11d      	cbz	r5, 8000a20 <__udivmoddi4+0xa4>
 8000a18:	40d4      	lsrs	r4, r2
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a20:	4631      	mov	r1, r6
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d909      	bls.n	8000a3e <__udivmoddi4+0xc2>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	f000 80ef 	beq.w	8000c0e <__udivmoddi4+0x292>
 8000a30:	2600      	movs	r6, #0
 8000a32:	e9c5 0100 	strd	r0, r1, [r5]
 8000a36:	4630      	mov	r0, r6
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	fab3 f683 	clz	r6, r3
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d14a      	bne.n	8000adc <__udivmoddi4+0x160>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d302      	bcc.n	8000a50 <__udivmoddi4+0xd4>
 8000a4a:	4282      	cmp	r2, r0
 8000a4c:	f200 80f9 	bhi.w	8000c42 <__udivmoddi4+0x2c6>
 8000a50:	1a84      	subs	r4, r0, r2
 8000a52:	eb61 0303 	sbc.w	r3, r1, r3
 8000a56:	2001      	movs	r0, #1
 8000a58:	469e      	mov	lr, r3
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d0e0      	beq.n	8000a20 <__udivmoddi4+0xa4>
 8000a5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a62:	e7dd      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000a64:	b902      	cbnz	r2, 8000a68 <__udivmoddi4+0xec>
 8000a66:	deff      	udf	#255	; 0xff
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	f040 8092 	bne.w	8000b96 <__udivmoddi4+0x21a>
 8000a72:	eba1 010c 	sub.w	r1, r1, ip
 8000a76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7a:	fa1f fe8c 	uxth.w	lr, ip
 8000a7e:	2601      	movs	r6, #1
 8000a80:	0c20      	lsrs	r0, r4, #16
 8000a82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a86:	fb07 1113 	mls	r1, r7, r3, r1
 8000a8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a8e:	fb0e f003 	mul.w	r0, lr, r3
 8000a92:	4288      	cmp	r0, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x12c>
 8000a96:	eb1c 0101 	adds.w	r1, ip, r1
 8000a9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x12a>
 8000aa0:	4288      	cmp	r0, r1
 8000aa2:	f200 80cb 	bhi.w	8000c3c <__udivmoddi4+0x2c0>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	1a09      	subs	r1, r1, r0
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ab8:	fb0e fe00 	mul.w	lr, lr, r0
 8000abc:	45a6      	cmp	lr, r4
 8000abe:	d908      	bls.n	8000ad2 <__udivmoddi4+0x156>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac8:	d202      	bcs.n	8000ad0 <__udivmoddi4+0x154>
 8000aca:	45a6      	cmp	lr, r4
 8000acc:	f200 80bb 	bhi.w	8000c46 <__udivmoddi4+0x2ca>
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	eba4 040e 	sub.w	r4, r4, lr
 8000ad6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ada:	e79c      	b.n	8000a16 <__udivmoddi4+0x9a>
 8000adc:	f1c6 0720 	rsb	r7, r6, #32
 8000ae0:	40b3      	lsls	r3, r6
 8000ae2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ae6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aea:	fa20 f407 	lsr.w	r4, r0, r7
 8000aee:	fa01 f306 	lsl.w	r3, r1, r6
 8000af2:	431c      	orrs	r4, r3
 8000af4:	40f9      	lsrs	r1, r7
 8000af6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000afa:	fa00 f306 	lsl.w	r3, r0, r6
 8000afe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b02:	0c20      	lsrs	r0, r4, #16
 8000b04:	fa1f fe8c 	uxth.w	lr, ip
 8000b08:	fb09 1118 	mls	r1, r9, r8, r1
 8000b0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b10:	fb08 f00e 	mul.w	r0, r8, lr
 8000b14:	4288      	cmp	r0, r1
 8000b16:	fa02 f206 	lsl.w	r2, r2, r6
 8000b1a:	d90b      	bls.n	8000b34 <__udivmoddi4+0x1b8>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b24:	f080 8088 	bcs.w	8000c38 <__udivmoddi4+0x2bc>
 8000b28:	4288      	cmp	r0, r1
 8000b2a:	f240 8085 	bls.w	8000c38 <__udivmoddi4+0x2bc>
 8000b2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b32:	4461      	add	r1, ip
 8000b34:	1a09      	subs	r1, r1, r0
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b48:	458e      	cmp	lr, r1
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x1e2>
 8000b4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b54:	d26c      	bcs.n	8000c30 <__udivmoddi4+0x2b4>
 8000b56:	458e      	cmp	lr, r1
 8000b58:	d96a      	bls.n	8000c30 <__udivmoddi4+0x2b4>
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	4461      	add	r1, ip
 8000b5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b62:	fba0 9402 	umull	r9, r4, r0, r2
 8000b66:	eba1 010e 	sub.w	r1, r1, lr
 8000b6a:	42a1      	cmp	r1, r4
 8000b6c:	46c8      	mov	r8, r9
 8000b6e:	46a6      	mov	lr, r4
 8000b70:	d356      	bcc.n	8000c20 <__udivmoddi4+0x2a4>
 8000b72:	d053      	beq.n	8000c1c <__udivmoddi4+0x2a0>
 8000b74:	b15d      	cbz	r5, 8000b8e <__udivmoddi4+0x212>
 8000b76:	ebb3 0208 	subs.w	r2, r3, r8
 8000b7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b82:	fa22 f306 	lsr.w	r3, r2, r6
 8000b86:	40f1      	lsrs	r1, r6
 8000b88:	431f      	orrs	r7, r3
 8000b8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b8e:	2600      	movs	r6, #0
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	40d8      	lsrs	r0, r3
 8000b9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4301      	orrs	r1, r0
 8000ba8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000bb8:	0c0b      	lsrs	r3, r1, #16
 8000bba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000bc2:	429e      	cmp	r6, r3
 8000bc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x260>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bd2:	d22f      	bcs.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd4:	429e      	cmp	r6, r3
 8000bd6:	d92d      	bls.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1b9b      	subs	r3, r3, r6
 8000bde:	b289      	uxth	r1, r1
 8000be0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000be4:	fb07 3316 	mls	r3, r7, r6, r3
 8000be8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bec:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x28a>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bfc:	d216      	bcs.n	8000c2c <__udivmoddi4+0x2b0>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d914      	bls.n	8000c2c <__udivmoddi4+0x2b0>
 8000c02:	3e02      	subs	r6, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	1ac9      	subs	r1, r1, r3
 8000c08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c0c:	e738      	b.n	8000a80 <__udivmoddi4+0x104>
 8000c0e:	462e      	mov	r6, r5
 8000c10:	4628      	mov	r0, r5
 8000c12:	e705      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000c14:	4606      	mov	r6, r0
 8000c16:	e6e3      	b.n	80009e0 <__udivmoddi4+0x64>
 8000c18:	4618      	mov	r0, r3
 8000c1a:	e6f8      	b.n	8000a0e <__udivmoddi4+0x92>
 8000c1c:	454b      	cmp	r3, r9
 8000c1e:	d2a9      	bcs.n	8000b74 <__udivmoddi4+0x1f8>
 8000c20:	ebb9 0802 	subs.w	r8, r9, r2
 8000c24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e7a3      	b.n	8000b74 <__udivmoddi4+0x1f8>
 8000c2c:	4646      	mov	r6, r8
 8000c2e:	e7ea      	b.n	8000c06 <__udivmoddi4+0x28a>
 8000c30:	4620      	mov	r0, r4
 8000c32:	e794      	b.n	8000b5e <__udivmoddi4+0x1e2>
 8000c34:	4640      	mov	r0, r8
 8000c36:	e7d1      	b.n	8000bdc <__udivmoddi4+0x260>
 8000c38:	46d0      	mov	r8, sl
 8000c3a:	e77b      	b.n	8000b34 <__udivmoddi4+0x1b8>
 8000c3c:	3b02      	subs	r3, #2
 8000c3e:	4461      	add	r1, ip
 8000c40:	e732      	b.n	8000aa8 <__udivmoddi4+0x12c>
 8000c42:	4630      	mov	r0, r6
 8000c44:	e709      	b.n	8000a5a <__udivmoddi4+0xde>
 8000c46:	4464      	add	r4, ip
 8000c48:	3802      	subs	r0, #2
 8000c4a:	e742      	b.n	8000ad2 <__udivmoddi4+0x156>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 fb6e 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f005 fc02 	bl	8006460 <SystemClock_Config>
//    MX_I2C3_Init();
//  MX_UART4_Init();
//  MX_USART1_UART_Init();
//  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
      USER_GPIO_Init();
 8000c5c:	f005 f990 	bl	8005f80 <USER_GPIO_Init>
      USER_I2C1_Init();
 8000c60:	f005 fbd0 	bl	8006404 <USER_I2C1_Init>
      USER_I2C3_Init();
 8000c64:	f005 fdb0 	bl	80067c8 <USER_I2C3_Init>
      USER_USART3_UART_Init();
 8000c68:	f005 fd84 	bl	8006774 <USER_USART3_UART_Init>
      user_USART1_UART_Init();
 8000c6c:	f005 fc66 	bl	800653c <user_USART1_UART_Init>
      UART4_Init();
 8000c70:	f005 fa50 	bl	8006114 <UART4_Init>
      USER_ADC1_Init();
 8000c74:	f005 f94a 	bl	8005f0c <USER_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  application();
 8000c78:	f004 fa7c 	bl	8005174 <application>
 8000c7c:	e7fc      	b.n	8000c78 <main+0x28>

08000c7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c82:	b672      	cpsid	i
}
 8000c84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <Error_Handler+0x8>

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f001 f8aa 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a31      	ldr	r2, [pc, #196]	; (8000dbc <HAL_ADC_MspInit+0xe4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d15b      	bne.n	8000db2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_ADC_MspInit+0xe8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <HAL_ADC_MspInit+0xec>)
 8000d7e:	f001 f923 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d82:	2360      	movs	r3, #96	; 0x60
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <HAL_ADC_MspInit+0xf0>)
 8000d96:	f001 f917 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4807      	ldr	r0, [pc, #28]	; (8000dcc <HAL_ADC_MspInit+0xf4>)
 8000dae:	f001 f90b 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3730      	adds	r7, #48	; 0x30
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40012000 	.word	0x40012000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <HAL_I2C_MspInit+0x128>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12c      	bne.n	8000e4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a40      	ldr	r2, [pc, #256]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0e:	23c0      	movs	r3, #192	; 0xc0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	2312      	movs	r3, #18
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4835      	ldr	r0, [pc, #212]	; (8000f00 <HAL_I2C_MspInit+0x130>)
 8000e2a:	f001 f8cd 	bl	8001fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	4b32      	ldr	r3, [pc, #200]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e4a:	e050      	b.n	8000eee <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <HAL_I2C_MspInit+0x134>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d14b      	bne.n	8000eee <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a27      	ldr	r2, [pc, #156]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a20      	ldr	r2, [pc, #128]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4817      	ldr	r0, [pc, #92]	; (8000f08 <HAL_I2C_MspInit+0x138>)
 8000eac:	f001 f88c 	bl	8001fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb6:	2312      	movs	r3, #18
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <HAL_I2C_MspInit+0x13c>)
 8000ece:	f001 f87b 	bl	8001fc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	; 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40005c00 	.word	0x40005c00
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a5f      	ldr	r2, [pc, #380]	; (80010ac <HAL_UART_MspInit+0x19c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12c      	bne.n	8000f8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a5d      	ldr	r2, [pc, #372]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b5b      	ldr	r3, [pc, #364]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	484b      	ldr	r0, [pc, #300]	; (80010b4 <HAL_UART_MspInit+0x1a4>)
 8000f86:	f001 f81f 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f8a:	e08a      	b.n	80010a2 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <HAL_UART_MspInit+0x1a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d135      	bne.n	8001002 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	4b45      	ldr	r3, [pc, #276]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4832      	ldr	r0, [pc, #200]	; (80010b4 <HAL_UART_MspInit+0x1a4>)
 8000fec:	f000 ffec 	bl	8001fc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2025      	movs	r0, #37	; 0x25
 8000ff6:	f000 ff1e 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ffa:	2025      	movs	r0, #37	; 0x25
 8000ffc:	f000 ff37 	bl	8001e6e <HAL_NVIC_EnableIRQ>
}
 8001000:	e04f      	b.n	80010a2 <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <HAL_UART_MspInit+0x1ac>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d14a      	bne.n	80010a2 <HAL_UART_MspInit+0x192>
    __HAL_RCC_USART3_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8001016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_UART_MspInit+0x1a0>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001060:	2320      	movs	r3, #32
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001070:	2307      	movs	r3, #7
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4811      	ldr	r0, [pc, #68]	; (80010c0 <HAL_UART_MspInit+0x1b0>)
 800107c:	f000 ffa4 	bl	8001fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001092:	2307      	movs	r3, #7
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	4619      	mov	r1, r3
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 800109e:	f000 ff93 	bl	8001fc8 <HAL_GPIO_Init>
}
 80010a2:	bf00      	nop
 80010a4:	3738      	adds	r7, #56	; 0x38
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40004c00 	.word	0x40004c00
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40004800 	.word	0x40004800
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020400 	.word	0x40020400

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f960 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <USART1_IRQHandler+0x10>)
 8001122:	f003 f8b5 	bl	8004290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000254 	.word	0x20000254

08001130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return 1;
 8001134:	2301      	movs	r3, #1
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_kill>:

int _kill(int pid, int sig)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800114a:	f005 fb91 	bl	8006870 <__errno>
 800114e:	4603      	mov	r3, r0
 8001150:	2216      	movs	r2, #22
 8001152:	601a      	str	r2, [r3, #0]
  return -1;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_exit>:

void _exit (int status)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffe7 	bl	8001140 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001172:	e7fe      	b.n	8001172 <_exit+0x12>

08001174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e00a      	b.n	800119c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001186:	f3af 8000 	nop.w
 800118a:	4601      	mov	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <_read+0x12>
  }

  return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e009      	b.n	80011d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbf1      	blt.n	80011c0 <_write+0x12>
  }
  return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_close>:

int _close(int file)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120e:	605a      	str	r2, [r3, #4]
  return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_isatty>:

int _isatty(int file)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f005 faf6 	bl	8006870 <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20020000 	.word	0x20020000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	20000168 	.word	0x20000168
 80012b8:	200004c0 	.word	0x200004c0

080012bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012e6:	490e      	ldr	r1, [pc, #56]	; (8001320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012fc:	4c0b      	ldr	r4, [pc, #44]	; (800132c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800130a:	f7ff ffd7 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f005 fab5 	bl	800687c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff fc9d 	bl	8000c50 <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001324:	08008430 	.word	0x08008430
  ldr r2, =_sbss
 8001328:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800132c:	200004bc 	.word	0x200004bc

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_Init+0x40>)
 800133e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_Init+0x40>)
 800134a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x40>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 fd5f 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fc8e 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fd77 	bl	8001e8a <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 fd3f 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008
 80013fc:	2000016c 	.word	0x2000016c

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000016c 	.word	0x2000016c

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008

08001460 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e033      	b.n	80014de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fc2a 	bl	8000cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b00      	cmp	r3, #0
 800149c:	d118      	bne.n	80014d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014a6:	f023 0302 	bic.w	r3, r3, #2
 80014aa:	f043 0202 	orr.w	r2, r3, #2
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fae8 	bl	8001a88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f023 0303 	bic.w	r3, r3, #3
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40
 80014ce:	e001      	b.n	80014d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_Start+0x1a>
 80014fe:	2302      	movs	r3, #2
 8001500:	e0b2      	b.n	8001668 <HAL_ADC_Start+0x180>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b01      	cmp	r3, #1
 8001516:	d018      	beq.n	800154a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001528:	4b52      	ldr	r3, [pc, #328]	; (8001674 <HAL_ADC_Start+0x18c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_ADC_Start+0x190>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	0c9a      	lsrs	r2, r3, #18
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800153c:	e002      	b.n	8001544 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3b01      	subs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f9      	bne.n	800153e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b01      	cmp	r3, #1
 8001556:	d17a      	bne.n	800164e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001582:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001596:	d106      	bne.n	80015a6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f023 0206 	bic.w	r2, r3, #6
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
 80015a4:	e002      	b.n	80015ac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_ADC_Start+0x194>)
 80015b6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d12a      	bne.n	8001624 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <HAL_ADC_Start+0x198>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d015      	beq.n	8001604 <HAL_ADC_Start+0x11c>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_ADC_Start+0x19c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d105      	bne.n	80015ee <HAL_ADC_Start+0x106>
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_ADC_Start+0x194>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00a      	beq.n	8001604 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_ADC_Start+0x1a0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d136      	bne.n	8001666 <HAL_ADC_Start+0x17e>
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_ADC_Start+0x194>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0310 	and.w	r3, r3, #16
 8001600:	2b00      	cmp	r3, #0
 8001602:	d130      	bne.n	8001666 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d129      	bne.n	8001666 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	e020      	b.n	8001666 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a15      	ldr	r2, [pc, #84]	; (8001680 <HAL_ADC_Start+0x198>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d11b      	bne.n	8001666 <HAL_ADC_Start+0x17e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d114      	bne.n	8001666 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e00b      	b.n	8001666 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f043 0210 	orr.w	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	20000000 	.word	0x20000000
 8001678:	431bde83 	.word	0x431bde83
 800167c:	40012300 	.word	0x40012300
 8001680:	40012000 	.word	0x40012000
 8001684:	40012100 	.word	0x40012100
 8001688:	40012200 	.word	0x40012200

0800168c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Stop+0x16>
 800169e:	2302      	movs	r3, #2
 80016a0:	e021      	b.n	80016e6 <HAL_ADC_Stop+0x5a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d113      	bne.n	8001738 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800171a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800171e:	d10b      	bne.n	8001738 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f043 0220 	orr.w	r2, r3, #32
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e063      	b.n	8001800 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001738:	f7ff fe62 	bl	8001400 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800173e:	e021      	b.n	8001784 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d01d      	beq.n	8001784 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_ADC_PollForConversion+0x6c>
 800174e:	f7ff fe57 	bl	8001400 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d212      	bcs.n	8001784 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b02      	cmp	r3, #2
 800176a:	d00b      	beq.n	8001784 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f043 0204 	orr.w	r2, r3, #4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e03d      	b.n	8001800 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b02      	cmp	r3, #2
 8001790:	d1d6      	bne.n	8001740 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f06f 0212 	mvn.w	r2, #18
 800179a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d123      	bne.n	80017fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11f      	bne.n	80017fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d111      	bne.n	80017fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1c>
 800183c:	2302      	movs	r3, #2
 800183e:	e113      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x244>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b09      	cmp	r3, #9
 800184e:	d925      	bls.n	800189c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68d9      	ldr	r1, [r3, #12]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	3b1e      	subs	r3, #30
 8001866:	2207      	movs	r2, #7
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43da      	mvns	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	400a      	ands	r2, r1
 8001874:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68d9      	ldr	r1, [r3, #12]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	4603      	mov	r3, r0
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4403      	add	r3, r0
 800188e:	3b1e      	subs	r3, #30
 8001890:	409a      	lsls	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	e022      	b.n	80018e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6919      	ldr	r1, [r3, #16]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	2207      	movs	r2, #7
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4403      	add	r3, r0
 80018d8:	409a      	lsls	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d824      	bhi.n	8001934 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	3b05      	subs	r3, #5
 80018fc:	221f      	movs	r2, #31
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	400a      	ands	r2, r1
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b05      	subs	r3, #5
 8001926:	fa00 f203 	lsl.w	r2, r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	; 0x34
 8001932:	e04c      	b.n	80019ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d824      	bhi.n	8001986 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b23      	subs	r3, #35	; 0x23
 800194e:	221f      	movs	r2, #31
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4618      	mov	r0, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	3b23      	subs	r3, #35	; 0x23
 8001978:	fa00 f203 	lsl.w	r2, r0, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
 8001984:	e023      	b.n	80019ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	3b41      	subs	r3, #65	; 0x41
 8001998:	221f      	movs	r2, #31
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	400a      	ands	r2, r1
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b41      	subs	r3, #65	; 0x41
 80019c2:	fa00 f203 	lsl.w	r2, r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <HAL_ADC_ConfigChannel+0x250>)
 80019d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a28      	ldr	r2, [pc, #160]	; (8001a78 <HAL_ADC_ConfigChannel+0x254>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d10f      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1d8>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d10b      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_ADC_ConfigChannel+0x254>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12b      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <HAL_ADC_ConfigChannel+0x258>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d003      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x1f4>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b11      	cmp	r3, #17
 8001a16:	d122      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_ADC_ConfigChannel+0x258>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d111      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_ADC_ConfigChannel+0x25c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_ADC_ConfigChannel+0x260>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9a      	lsrs	r2, r3, #18
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40012300 	.word	0x40012300
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	10000012 	.word	0x10000012
 8001a80:	20000000 	.word	0x20000000
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a90:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <ADC_Init+0x1f0>)
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	021a      	lsls	r2, r3, #8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <ADC_Init+0x1f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d022      	beq.n	8001b66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6899      	ldr	r1, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e00f      	b.n	8001b86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0202 	bic.w	r2, r2, #2
 8001b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6899      	ldr	r1, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ba0:	005a      	lsls	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01b      	beq.n	8001bec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6859      	ldr	r1, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	3b01      	subs	r3, #1
 8001be0:	035a      	lsls	r2, r3, #13
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	e007      	b.n	8001bfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	051a      	lsls	r2, r3, #20
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6899      	ldr	r1, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c3e:	025a      	lsls	r2, r3, #9
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	029a      	lsls	r2, r3, #10
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	0f000001 	.word	0x0f000001

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	; (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff29 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff3e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff31 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffa2 	bl	8001ddc <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff faa6 	bl	8001400 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d008      	beq.n	8001ed4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2280      	movs	r2, #128	; 0x80
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e052      	b.n	8001f7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0216 	bic.w	r2, r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d103      	bne.n	8001f04 <HAL_DMA_Abort+0x62>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0208 	bic.w	r2, r2, #8
 8001f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f24:	e013      	b.n	8001f4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f26:	f7ff fa6b 	bl	8001400 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d90c      	bls.n	8001f4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e015      	b.n	8001f7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e4      	bne.n	8001f26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	223f      	movs	r2, #63	; 0x3f
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e00c      	b.n	8001fba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e165      	b.n	80022b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8154 	bne.w	80022aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d005      	beq.n	800201a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002016:	2b02      	cmp	r3, #2
 8002018:	d130      	bne.n	800207c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 0201 	and.w	r2, r3, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b03      	cmp	r3, #3
 8002086:	d017      	beq.n	80020b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80ae 	beq.w	80022aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_GPIO_Init+0x300>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <HAL_GPIO_Init+0x300>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <HAL_GPIO_Init+0x300>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216a:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_GPIO_Init+0x304>)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4f      	ldr	r2, [pc, #316]	; (80022d0 <HAL_GPIO_Init+0x308>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x21a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4e      	ldr	r2, [pc, #312]	; (80022d4 <HAL_GPIO_Init+0x30c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x216>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4d      	ldr	r2, [pc, #308]	; (80022d8 <HAL_GPIO_Init+0x310>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x212>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <HAL_GPIO_Init+0x314>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x20e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <HAL_GPIO_Init+0x318>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x20a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4a      	ldr	r2, [pc, #296]	; (80022e4 <HAL_GPIO_Init+0x31c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x206>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a49      	ldr	r2, [pc, #292]	; (80022e8 <HAL_GPIO_Init+0x320>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x202>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00c      	b.n	80021e4 <HAL_GPIO_Init+0x21c>
 80021ca:	2307      	movs	r3, #7
 80021cc:	e00a      	b.n	80021e4 <HAL_GPIO_Init+0x21c>
 80021ce:	2305      	movs	r3, #5
 80021d0:	e008      	b.n	80021e4 <HAL_GPIO_Init+0x21c>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x21c>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e004      	b.n	80021e4 <HAL_GPIO_Init+0x21c>
 80021da:	2302      	movs	r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_Init+0x21c>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_GPIO_Init+0x21c>
 80021e2:	2300      	movs	r3, #0
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f002 0203 	and.w	r2, r2, #3
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	4093      	lsls	r3, r2
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f4:	4935      	ldr	r1, [pc, #212]	; (80022cc <HAL_GPIO_Init+0x304>)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_GPIO_Init+0x324>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002226:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_GPIO_Init+0x324>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_GPIO_Init+0x324>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002250:	4a26      	ldr	r2, [pc, #152]	; (80022ec <HAL_GPIO_Init+0x324>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_GPIO_Init+0x324>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_GPIO_Init+0x324>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_GPIO_Init+0x324>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <HAL_GPIO_Init+0x324>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3301      	adds	r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	f67f ae96 	bls.w	8001fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40021800 	.word	0x40021800
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e001      	b.n	8002312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800233c:	e003      	b.n	8002346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	041a      	lsls	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e12b      	b.n	80025be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fd28 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b8:	f001 f87e 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a81      	ldr	r2, [pc, #516]	; (80025c8 <HAL_I2C_Init+0x274>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d807      	bhi.n	80023d8 <HAL_I2C_Init+0x84>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a80      	ldr	r2, [pc, #512]	; (80025cc <HAL_I2C_Init+0x278>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bf94      	ite	ls
 80023d0:	2301      	movls	r3, #1
 80023d2:	2300      	movhi	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e006      	b.n	80023e6 <HAL_I2C_Init+0x92>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a7d      	ldr	r2, [pc, #500]	; (80025d0 <HAL_I2C_Init+0x27c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0e7      	b.n	80025be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a78      	ldr	r2, [pc, #480]	; (80025d4 <HAL_I2C_Init+0x280>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_I2C_Init+0x274>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d802      	bhi.n	8002428 <HAL_I2C_Init+0xd4>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	e009      	b.n	800243c <HAL_I2C_Init+0xe8>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <HAL_I2C_Init+0x284>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	3301      	adds	r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800244e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	495c      	ldr	r1, [pc, #368]	; (80025c8 <HAL_I2C_Init+0x274>)
 8002458:	428b      	cmp	r3, r1
 800245a:	d819      	bhi.n	8002490 <HAL_I2C_Init+0x13c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e59      	subs	r1, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fbb1 f3f3 	udiv	r3, r1, r3
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002470:	400b      	ands	r3, r1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_I2C_Init+0x138>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e59      	subs	r1, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fbb1 f3f3 	udiv	r3, r1, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248a:	e051      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 800248c:	2304      	movs	r3, #4
 800248e:	e04f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_I2C_Init+0x168>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e012      	b.n	80024e2 <HAL_I2C_Init+0x18e>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	0099      	lsls	r1, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x196>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e022      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10e      	bne.n	8002510 <HAL_I2C_Init+0x1bc>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1e58      	subs	r0, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	440b      	add	r3, r1
 8002500:	fbb0 f3f3 	udiv	r3, r0, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	0099      	lsls	r1, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	fbb0 f3f3 	udiv	r3, r0, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800255e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6911      	ldr	r1, [r2, #16]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	000186a0 	.word	0x000186a0
 80025cc:	001e847f 	.word	0x001e847f
 80025d0:	003d08ff 	.word	0x003d08ff
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	817b      	strh	r3, [r7, #10]
 80025ee:	460b      	mov	r3, r1
 80025f0:	813b      	strh	r3, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025f6:	f7fe ff03 	bl	8001400 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b20      	cmp	r3, #32
 8002606:	f040 80d9 	bne.w	80027bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2319      	movs	r3, #25
 8002610:	2201      	movs	r2, #1
 8002612:	496d      	ldr	r1, [pc, #436]	; (80027c8 <HAL_I2C_Mem_Write+0x1ec>)
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fc7f 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
 8002622:	e0cc      	b.n	80027be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_I2C_Mem_Write+0x56>
 800262e:	2302      	movs	r3, #2
 8002630:	e0c5      	b.n	80027be <HAL_I2C_Mem_Write+0x1e2>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d007      	beq.n	8002658 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2221      	movs	r2, #33	; 0x21
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a4d      	ldr	r2, [pc, #308]	; (80027cc <HAL_I2C_Mem_Write+0x1f0>)
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800269a:	88f8      	ldrh	r0, [r7, #6]
 800269c:	893a      	ldrh	r2, [r7, #8]
 800269e:	8979      	ldrh	r1, [r7, #10]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	4603      	mov	r3, r0
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fab6 	bl	8002c1c <I2C_RequestMemoryWrite>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d052      	beq.n	800275c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e081      	b.n	80027be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fd00 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d107      	bne.n	80026e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06b      	b.n	80027be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11b      	bne.n	800275c <HAL_I2C_Mem_Write+0x180>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d017      	beq.n	800275c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1aa      	bne.n	80026ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fcec 	bl	8003146 <I2C_WaitOnBTFFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b04      	cmp	r3, #4
 800277a:	d107      	bne.n	800278c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e016      	b.n	80027be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	00100002 	.word	0x00100002
 80027cc:	ffff0000 	.word	0xffff0000

080027d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	817b      	strh	r3, [r7, #10]
 80027e2:	460b      	mov	r3, r1
 80027e4:	813b      	strh	r3, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ea:	f7fe fe09 	bl	8001400 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 8208 	bne.w	8002c0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2319      	movs	r3, #25
 8002804:	2201      	movs	r2, #1
 8002806:	497b      	ldr	r1, [pc, #492]	; (80029f4 <HAL_I2C_Mem_Read+0x224>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fb85 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	e1fb      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Mem_Read+0x56>
 8002822:	2302      	movs	r3, #2
 8002824:	e1f4      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d007      	beq.n	800284c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2222      	movs	r2, #34	; 0x22
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <HAL_I2C_Mem_Read+0x228>)
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288e:	88f8      	ldrh	r0, [r7, #6]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4603      	mov	r3, r0
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fa52 	bl	8002d48 <I2C_RequestMemoryRead>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1b0      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d113      	bne.n	80028de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e184      	b.n	8002be8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d11b      	bne.n	800291e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e164      	b.n	8002be8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	2b02      	cmp	r3, #2
 8002924:	d11b      	bne.n	800295e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002934:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002944:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	e144      	b.n	8002be8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002974:	e138      	b.n	8002be8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	2b03      	cmp	r3, #3
 800297c:	f200 80f1 	bhi.w	8002b62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	2b01      	cmp	r3, #1
 8002986:	d123      	bne.n	80029d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fc1b 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e139      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029ce:	e10b      	b.n	8002be8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d14e      	bne.n	8002a76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029de:	2200      	movs	r2, #0
 80029e0:	4906      	ldr	r1, [pc, #24]	; (80029fc <HAL_I2C_Mem_Read+0x22c>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fa98 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e10e      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
 80029f2:	bf00      	nop
 80029f4:	00100002 	.word	0x00100002
 80029f8:	ffff0000 	.word	0xffff0000
 80029fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a74:	e0b8      	b.n	8002be8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4966      	ldr	r1, [pc, #408]	; (8002c18 <HAL_I2C_Mem_Read+0x448>)
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fa49 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0bf      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	2200      	movs	r2, #0
 8002ada:	494f      	ldr	r1, [pc, #316]	; (8002c18 <HAL_I2C_Mem_Read+0x448>)
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fa1b 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e091      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b60:	e042      	b.n	8002be8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fb2e 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e04c      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d118      	bne.n	8002be8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f aec2 	bne.w	8002976 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	00010004 	.word	0x00010004

08002c1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	813b      	strh	r3, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f960 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6c:	d103      	bne.n	8002c76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e05f      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c7a:	897b      	ldrh	r3, [r7, #10]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	492d      	ldr	r1, [pc, #180]	; (8002d44 <I2C_RequestMemoryWrite+0x128>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f998 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04c      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	6a39      	ldr	r1, [r7, #32]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa02 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d107      	bne.n	8002cde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e02b      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	e021      	b.n	8002d38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f9dc 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e005      	b.n	8002d3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2e:	893b      	ldrh	r3, [r7, #8]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	00010002 	.word	0x00010002

08002d48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8c2 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da8:	d103      	bne.n	8002db2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e0aa      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	6a3a      	ldr	r2, [r7, #32]
 8002dca:	4952      	ldr	r1, [pc, #328]	; (8002f14 <I2C_RequestMemoryRead+0x1cc>)
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f8fa 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e097      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	6a39      	ldr	r1, [r7, #32]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f964 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d107      	bne.n	8002e1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e076      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e24:	893b      	ldrh	r3, [r7, #8]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]
 8002e2e:	e021      	b.n	8002e74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	6a39      	ldr	r1, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f93e 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e050      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6a:	893b      	ldrh	r3, [r7, #8]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e76:	6a39      	ldr	r1, [r7, #32]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f923 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d107      	bne.n	8002e9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e035      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f82b 	bl	8002f18 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed6:	d103      	bne.n	8002ee0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e013      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	4906      	ldr	r1, [pc, #24]	; (8002f14 <I2C_RequestMemoryRead+0x1cc>)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f863 	bl	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	00010002 	.word	0x00010002

08002f18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f28:	e025      	b.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d021      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe fa65 	bl	8001400 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d116      	bne.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e023      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10d      	bne.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	e00c      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf0c      	ite	eq
 8002fae:	2301      	moveq	r3, #1
 8002fb0:	2300      	movne	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d0b6      	beq.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd4:	e051      	b.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe4:	d123      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ffe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e046      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d021      	beq.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe f9e3 	bl	8001400 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d116      	bne.n	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e020      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10c      	bne.n	800309e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e00b      	b.n	80030b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	43da      	mvns	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d18d      	bne.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d0:	e02d      	b.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f8ce 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e02d      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d021      	beq.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe f989 	bl	8001400 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e007      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d1ca      	bne.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003152:	e02d      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f88d 	bl	8003274 <I2C_IsAcknowledgeFailed>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e02d      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d021      	beq.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fe f948 	bl	8001400 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d1ca      	bne.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031d4:	e042      	b.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d119      	bne.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0210 	mvn.w	r2, #16
 80031ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e029      	b.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fe f8f2 	bl	8001400 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d116      	bne.n	800325c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d1b5      	bne.n	80031d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d11b      	bne.n	80032c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003294:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0cc      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b68      	ldr	r3, [pc, #416]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d90c      	bls.n	8003310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b63      	ldr	r3, [pc, #396]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0b8      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003328:	4b59      	ldr	r3, [pc, #356]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a52      	ldr	r2, [pc, #328]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800334a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	494d      	ldr	r1, [pc, #308]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d044      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d119      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338e:	2b03      	cmp	r3, #3
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e067      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4934      	ldr	r1, [pc, #208]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c4:	f7fe f81c 	bl	8001400 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7fe f818 	bl	8001400 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e04f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 020c 	and.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1eb      	bne.n	80033cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d20c      	bcs.n	800341c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e032      	b.n	8003482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4916      	ldr	r1, [pc, #88]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	490e      	ldr	r1, [pc, #56]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800345a:	f000 f855 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490a      	ldr	r1, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd ff7c 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023c00 	.word	0x40023c00
 8003490:	40023800 	.word	0x40023800
 8003494:	080081bc 	.word	0x080081bc
 8003498:	20000000 	.word	0x20000000
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000000 	.word	0x20000000

080034b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034bc:	f7ff fff0 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0a9b      	lsrs	r3, r3, #10
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4903      	ldr	r1, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	080081cc 	.word	0x080081cc

080034e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034e4:	f7ff ffdc 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0b5b      	lsrs	r3, r3, #13
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	080081cc 	.word	0x080081cc

08003508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800350c:	b0ae      	sub	sp, #184	; 0xb8
 800350e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352e:	4bcb      	ldr	r3, [pc, #812]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b0c      	cmp	r3, #12
 8003538:	f200 8206 	bhi.w	8003948 <HAL_RCC_GetSysClockFreq+0x440>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_RCC_GetSysClockFreq+0x3c>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003579 	.word	0x08003579
 8003548:	08003949 	.word	0x08003949
 800354c:	08003949 	.word	0x08003949
 8003550:	08003949 	.word	0x08003949
 8003554:	08003581 	.word	0x08003581
 8003558:	08003949 	.word	0x08003949
 800355c:	08003949 	.word	0x08003949
 8003560:	08003949 	.word	0x08003949
 8003564:	08003589 	.word	0x08003589
 8003568:	08003949 	.word	0x08003949
 800356c:	08003949 	.word	0x08003949
 8003570:	08003949 	.word	0x08003949
 8003574:	08003779 	.word	0x08003779
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4bb9      	ldr	r3, [pc, #740]	; (8003860 <HAL_RCC_GetSysClockFreq+0x358>)
 800357a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800357e:	e1e7      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003580:	4bb8      	ldr	r3, [pc, #736]	; (8003864 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003582:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003586:	e1e3      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003588:	4bb4      	ldr	r3, [pc, #720]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003594:	4bb1      	ldr	r3, [pc, #708]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d071      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a0:	4bae      	ldr	r3, [pc, #696]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	099b      	lsrs	r3, r3, #6
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80035b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035c6:	4622      	mov	r2, r4
 80035c8:	462b      	mov	r3, r5
 80035ca:	f04f 0000 	mov.w	r0, #0
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	0159      	lsls	r1, r3, #5
 80035d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d8:	0150      	lsls	r0, r2, #5
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4621      	mov	r1, r4
 80035e0:	1a51      	subs	r1, r2, r1
 80035e2:	6439      	str	r1, [r7, #64]	; 0x40
 80035e4:	4629      	mov	r1, r5
 80035e6:	eb63 0301 	sbc.w	r3, r3, r1
 80035ea:	647b      	str	r3, [r7, #68]	; 0x44
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80035f8:	4649      	mov	r1, r9
 80035fa:	018b      	lsls	r3, r1, #6
 80035fc:	4641      	mov	r1, r8
 80035fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003602:	4641      	mov	r1, r8
 8003604:	018a      	lsls	r2, r1, #6
 8003606:	4641      	mov	r1, r8
 8003608:	1a51      	subs	r1, r2, r1
 800360a:	63b9      	str	r1, [r7, #56]	; 0x38
 800360c:	4649      	mov	r1, r9
 800360e:	eb63 0301 	sbc.w	r3, r3, r1
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003620:	4649      	mov	r1, r9
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4641      	mov	r1, r8
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4641      	mov	r1, r8
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4622      	mov	r2, r4
 8003636:	189b      	adds	r3, r3, r2
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
 800363a:	462b      	mov	r3, r5
 800363c:	460a      	mov	r2, r1
 800363e:	eb42 0303 	adc.w	r3, r2, r3
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003650:	4629      	mov	r1, r5
 8003652:	024b      	lsls	r3, r1, #9
 8003654:	4621      	mov	r1, r4
 8003656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800365a:	4621      	mov	r1, r4
 800365c:	024a      	lsls	r2, r1, #9
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800366c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003674:	f7fd f96a 	bl	800094c <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003682:	e067      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003684:	4b75      	ldr	r3, [pc, #468]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003690:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369c:	67bb      	str	r3, [r7, #120]	; 0x78
 800369e:	2300      	movs	r3, #0
 80036a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80036a6:	4622      	mov	r2, r4
 80036a8:	462b      	mov	r3, r5
 80036aa:	f04f 0000 	mov.w	r0, #0
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	0159      	lsls	r1, r3, #5
 80036b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b8:	0150      	lsls	r0, r2, #5
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4621      	mov	r1, r4
 80036c0:	1a51      	subs	r1, r2, r1
 80036c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80036c4:	4629      	mov	r1, r5
 80036c6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80036d8:	4649      	mov	r1, r9
 80036da:	018b      	lsls	r3, r1, #6
 80036dc:	4641      	mov	r1, r8
 80036de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036e2:	4641      	mov	r1, r8
 80036e4:	018a      	lsls	r2, r1, #6
 80036e6:	4641      	mov	r1, r8
 80036e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ec:	4649      	mov	r1, r9
 80036ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003706:	4692      	mov	sl, r2
 8003708:	469b      	mov	fp, r3
 800370a:	4623      	mov	r3, r4
 800370c:	eb1a 0303 	adds.w	r3, sl, r3
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	462b      	mov	r3, r5
 8003714:	eb4b 0303 	adc.w	r3, fp, r3
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003726:	4629      	mov	r1, r5
 8003728:	028b      	lsls	r3, r1, #10
 800372a:	4621      	mov	r1, r4
 800372c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003730:	4621      	mov	r1, r4
 8003732:	028a      	lsls	r2, r1, #10
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800373c:	2200      	movs	r2, #0
 800373e:	673b      	str	r3, [r7, #112]	; 0x70
 8003740:	677a      	str	r2, [r7, #116]	; 0x74
 8003742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003746:	f7fd f901 	bl	800094c <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4613      	mov	r3, r2
 8003750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003754:	4b41      	ldr	r3, [pc, #260]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	3301      	adds	r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800376a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800376e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003776:	e0eb      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003778:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003784:	4b35      	ldr	r3, [pc, #212]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d06b      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <HAL_RCC_GetSysClockFreq+0x354>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	2200      	movs	r2, #0
 8003798:	66bb      	str	r3, [r7, #104]	; 0x68
 800379a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800379c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a2:	663b      	str	r3, [r7, #96]	; 0x60
 80037a4:	2300      	movs	r3, #0
 80037a6:	667b      	str	r3, [r7, #100]	; 0x64
 80037a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80037ac:	4622      	mov	r2, r4
 80037ae:	462b      	mov	r3, r5
 80037b0:	f04f 0000 	mov.w	r0, #0
 80037b4:	f04f 0100 	mov.w	r1, #0
 80037b8:	0159      	lsls	r1, r3, #5
 80037ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037be:	0150      	lsls	r0, r2, #5
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4621      	mov	r1, r4
 80037c6:	1a51      	subs	r1, r2, r1
 80037c8:	61b9      	str	r1, [r7, #24]
 80037ca:	4629      	mov	r1, r5
 80037cc:	eb63 0301 	sbc.w	r3, r3, r1
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037de:	4659      	mov	r1, fp
 80037e0:	018b      	lsls	r3, r1, #6
 80037e2:	4651      	mov	r1, sl
 80037e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e8:	4651      	mov	r1, sl
 80037ea:	018a      	lsls	r2, r1, #6
 80037ec:	4651      	mov	r1, sl
 80037ee:	ebb2 0801 	subs.w	r8, r2, r1
 80037f2:	4659      	mov	r1, fp
 80037f4:	eb63 0901 	sbc.w	r9, r3, r1
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380c:	4690      	mov	r8, r2
 800380e:	4699      	mov	r9, r3
 8003810:	4623      	mov	r3, r4
 8003812:	eb18 0303 	adds.w	r3, r8, r3
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	462b      	mov	r3, r5
 800381a:	eb49 0303 	adc.w	r3, r9, r3
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800382c:	4629      	mov	r1, r5
 800382e:	024b      	lsls	r3, r1, #9
 8003830:	4621      	mov	r1, r4
 8003832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003836:	4621      	mov	r1, r4
 8003838:	024a      	lsls	r2, r1, #9
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003842:	2200      	movs	r2, #0
 8003844:	65bb      	str	r3, [r7, #88]	; 0x58
 8003846:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800384c:	f7fd f87e 	bl	800094c <__aeabi_uldivmod>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4613      	mov	r3, r2
 8003856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800385a:	e065      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0x420>
 800385c:	40023800 	.word	0x40023800
 8003860:	00f42400 	.word	0x00f42400
 8003864:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003868:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCC_GetSysClockFreq+0x458>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	2200      	movs	r2, #0
 8003870:	4618      	mov	r0, r3
 8003872:	4611      	mov	r1, r2
 8003874:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003878:	653b      	str	r3, [r7, #80]	; 0x50
 800387a:	2300      	movs	r3, #0
 800387c:	657b      	str	r3, [r7, #84]	; 0x54
 800387e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003882:	4642      	mov	r2, r8
 8003884:	464b      	mov	r3, r9
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0159      	lsls	r1, r3, #5
 8003890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003894:	0150      	lsls	r0, r2, #5
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4641      	mov	r1, r8
 800389c:	1a51      	subs	r1, r2, r1
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	4649      	mov	r1, r9
 80038a2:	eb63 0301 	sbc.w	r3, r3, r1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038b4:	4659      	mov	r1, fp
 80038b6:	018b      	lsls	r3, r1, #6
 80038b8:	4651      	mov	r1, sl
 80038ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038be:	4651      	mov	r1, sl
 80038c0:	018a      	lsls	r2, r1, #6
 80038c2:	4651      	mov	r1, sl
 80038c4:	1a54      	subs	r4, r2, r1
 80038c6:	4659      	mov	r1, fp
 80038c8:	eb63 0501 	sbc.w	r5, r3, r1
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	00eb      	lsls	r3, r5, #3
 80038d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038da:	00e2      	lsls	r2, r4, #3
 80038dc:	4614      	mov	r4, r2
 80038de:	461d      	mov	r5, r3
 80038e0:	4643      	mov	r3, r8
 80038e2:	18e3      	adds	r3, r4, r3
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	464b      	mov	r3, r9
 80038e8:	eb45 0303 	adc.w	r3, r5, r3
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038fa:	4629      	mov	r1, r5
 80038fc:	028b      	lsls	r3, r1, #10
 80038fe:	4621      	mov	r1, r4
 8003900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003904:	4621      	mov	r1, r4
 8003906:	028a      	lsls	r2, r1, #10
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003910:	2200      	movs	r2, #0
 8003912:	64bb      	str	r3, [r7, #72]	; 0x48
 8003914:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800391a:	f7fd f817 	bl	800094c <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4613      	mov	r3, r2
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_RCC_GetSysClockFreq+0x458>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0f1b      	lsrs	r3, r3, #28
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800393a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003946:	e003      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_GetSysClockFreq+0x45c>)
 800394a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800394e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003954:	4618      	mov	r0, r3
 8003956:	37b8      	adds	r7, #184	; 0xb8
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	00f42400 	.word	0x00f42400

08003968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e28d      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8083 	beq.w	8003a8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003988:	4b94      	ldr	r3, [pc, #592]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b04      	cmp	r3, #4
 8003992:	d019      	beq.n	80039c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003994:	4b91      	ldr	r3, [pc, #580]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800399c:	2b08      	cmp	r3, #8
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039a0:	4b8e      	ldr	r3, [pc, #568]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ac:	d00c      	beq.n	80039c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ae:	4b8b      	ldr	r3, [pc, #556]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d112      	bne.n	80039e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ba:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c6:	d10b      	bne.n	80039e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	4b84      	ldr	r3, [pc, #528]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d05b      	beq.n	8003a8c <HAL_RCC_OscConfig+0x124>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d157      	bne.n	8003a8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e25a      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d106      	bne.n	80039f8 <HAL_RCC_OscConfig+0x90>
 80039ea:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7b      	ldr	r2, [pc, #492]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e01d      	b.n	8003a34 <HAL_RCC_OscConfig+0xcc>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0xb4>
 8003a02:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a72      	ldr	r2, [pc, #456]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCC_OscConfig+0xcc>
 8003a1c:	4b6f      	ldr	r3, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a6e      	ldr	r2, [pc, #440]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6b      	ldr	r2, [pc, #428]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d013      	beq.n	8003a64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fce0 	bl	8001400 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fd fcdc 	bl	8001400 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e21f      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0xdc>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd fccc 	bl	8001400 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fd fcc8 	bl	8001400 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e20b      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	4b57      	ldr	r3, [pc, #348]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x104>
 8003a8a:	e000      	b.n	8003a8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d06f      	beq.n	8003b7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d017      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aa6:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d105      	bne.n	8003abe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d11c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x186>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1d3      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4937      	ldr	r1, [pc, #220]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	e03a      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <HAL_RCC_OscConfig+0x278>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fd fc75 	bl	8001400 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fd fc71 	bl	8001400 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1b4      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4925      	ldr	r1, [pc, #148]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	e015      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <HAL_RCC_OscConfig+0x278>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fc54 	bl	8001400 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fd fc50 	bl	8001400 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e193      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d036      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fd fc34 	bl	8001400 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fd fc30 	bl	8001400 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e173      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_OscConfig+0x274>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x234>
 8003bba:	e01b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc2:	f7fd fc1d 	bl	8001400 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	e00e      	b.n	8003be8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fd fc19 	bl	8001400 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d907      	bls.n	8003be8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e15c      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	42470000 	.word	0x42470000
 8003be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b8a      	ldr	r3, [pc, #552]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ea      	bne.n	8003bca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8097 	beq.w	8003d30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a7e      	ldr	r2, [pc, #504]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_OscConfig+0x4b0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x4b0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x4b0>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fbd9 	bl	8001400 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fd fbd5 	bl	8001400 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e118      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x4b0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x31e>
 8003c78:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	e01c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x358>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x340>
 8003c8e:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	4a60      	ldr	r2, [pc, #384]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9a:	4b5e      	ldr	r3, [pc, #376]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	4a5d      	ldr	r2, [pc, #372]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x358>
 8003ca8:	4b5a      	ldr	r3, [pc, #360]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a59      	ldr	r2, [pc, #356]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	f023 0304 	bic.w	r3, r3, #4
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fd fb9a 	bl	8001400 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fd fb96 	bl	8001400 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0d7      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ee      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x368>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fb84 	bl	8001400 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fd fb80 	bl	8001400 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0c1      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ee      	bne.n	8003cfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80ad 	beq.w	8003e94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3a:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d060      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d145      	bne.n	8003dda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b33      	ldr	r3, [pc, #204]	; (8003e1c <HAL_RCC_OscConfig+0x4b4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fb54 	bl	8001400 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fd fb50 	bl	8001400 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e093      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	071b      	lsls	r3, r3, #28
 8003da6:	491b      	ldr	r1, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x4b4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fd fb25 	bl	8001400 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fd fb21 	bl	8001400 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e064      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x452>
 8003dd8:	e05c      	b.n	8003e94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_RCC_OscConfig+0x4b4>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fd fb0e 	bl	8001400 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fb0a 	bl	8001400 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e04d      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_OscConfig+0x4ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x480>
 8003e06:	e045      	b.n	8003e94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e040      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e20:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <HAL_RCC_OscConfig+0x538>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d030      	beq.n	8003e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d129      	bne.n	8003e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d122      	bne.n	8003e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d119      	bne.n	8003e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d10f      	bne.n	8003e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e03f      	b.n	8003f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd f820 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fecf 	bl	8004c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b08a      	sub	sp, #40	; 0x28
 8003f42:	af02      	add	r7, sp, #8
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d17c      	bne.n	8004058 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_UART_Transmit+0x2c>
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e075      	b.n	800405a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_UART_Transmit+0x3e>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e06e      	b.n	800405a <HAL_UART_Transmit+0x11c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2221      	movs	r2, #33	; 0x21
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f92:	f7fd fa35 	bl	8001400 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d108      	bne.n	8003fc0 <HAL_UART_Transmit+0x82>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e003      	b.n	8003fc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fd0:	e02a      	b.n	8004028 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fc0f 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e036      	b.n	800405a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004000:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3302      	adds	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e007      	b.n	800401a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1cf      	bne.n	8003fd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	2140      	movs	r1, #64	; 0x40
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fbdf 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e006      	b.n	800405a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08a      	sub	sp, #40	; 0x28
 8004066:	af02      	add	r7, sp, #8
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	f040 808c 	bne.w	800419c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Receive+0x2e>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e084      	b.n	800419e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Receive+0x40>
 800409e:	2302      	movs	r3, #2
 80040a0:	e07d      	b.n	800419e <HAL_UART_Receive+0x13c>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2222      	movs	r2, #34	; 0x22
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040be:	f7fd f99f 	bl	8001400 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	88fa      	ldrh	r2, [r7, #6]
 80040ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d8:	d108      	bne.n	80040ec <HAL_UART_Receive+0x8a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e003      	b.n	80040f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80040fc:	e043      	b.n	8004186 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2120      	movs	r1, #32
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fb79 	bl	8004800 <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e042      	b.n	800419e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	b29a      	uxth	r2, r3
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	3302      	adds	r3, #2
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e01f      	b.n	8004178 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004140:	d007      	beq.n	8004152 <HAL_UART_Receive+0xf0>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_UART_Receive+0xfe>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e008      	b.n	8004172 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800416c:	b2da      	uxtb	r2, r3
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1b6      	bne.n	80040fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d130      	bne.n	8004222 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_UART_Transmit_IT+0x26>
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e029      	b.n	8004224 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_UART_Transmit_IT+0x38>
 80041da:	2302      	movs	r3, #2
 80041dc:	e022      	b.n	8004224 <HAL_UART_Transmit_IT+0x7e>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	88fa      	ldrh	r2, [r7, #6]
 80041f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2221      	movs	r2, #33	; 0x21
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800421c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b20      	cmp	r3, #32
 8004248:	d11d      	bne.n	8004286 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_UART_Receive_IT+0x26>
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e016      	b.n	8004288 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UART_Receive_IT+0x38>
 8004264:	2302      	movs	r3, #2
 8004266:	e00f      	b.n	8004288 <HAL_UART_Receive_IT+0x58>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	461a      	mov	r2, r3
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fb2d 	bl	80048dc <UART_Start_Receive_IT>
 8004282:	4603      	mov	r3, r0
 8004284:	e000      	b.n	8004288 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b0ba      	sub	sp, #232	; 0xe8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_UART_IRQHandler+0x66>
 80042e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fc11 	bl	8004b16 <UART_Receive_IT>
      return;
 80042f4:	e256      	b.n	80047a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80de 	beq.w	80044bc <HAL_UART_IRQHandler+0x22c>
 8004300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80d1 	beq.w	80044bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_UART_IRQHandler+0xae>
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f043 0201 	orr.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_UART_IRQHandler+0xd2>
 800434a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0202 	orr.w	r2, r3, #2
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <HAL_UART_IRQHandler+0xf6>
 800436e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f043 0204 	orr.w	r2, r3, #4
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d011      	beq.n	80043b6 <HAL_UART_IRQHandler+0x126>
 8004392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d105      	bne.n	80043aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800439e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f043 0208 	orr.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 81ed 	beq.w	800479a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_UART_IRQHandler+0x14e>
 80043cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fb9c 	bl	8004b16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d103      	bne.n	800440a <HAL_UART_IRQHandler+0x17a>
 8004402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d04f      	beq.n	80044aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 faa4 	bl	8004958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d141      	bne.n	80044a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800443c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3314      	adds	r3, #20
 8004446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800444a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800444e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1d9      	bne.n	800441e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	2b00      	cmp	r3, #0
 8004470:	d013      	beq.n	800449a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	4a7d      	ldr	r2, [pc, #500]	; (800466c <HAL_UART_IRQHandler+0x3dc>)
 8004478:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	4618      	mov	r0, r3
 8004480:	f7fd fd7f 	bl	8001f82 <HAL_DMA_Abort_IT>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004494:	4610      	mov	r0, r2
 8004496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	e00e      	b.n	80044b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f99a 	bl	80047d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	e00a      	b.n	80044b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f996 	bl	80047d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	e006      	b.n	80044b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f992 	bl	80047d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044b6:	e170      	b.n	800479a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	bf00      	nop
    return;
 80044ba:	e16e      	b.n	800479a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	f040 814a 	bne.w	800475a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8143 	beq.w	800475a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 813c 	beq.w	800475a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	f040 80b4 	bne.w	8004670 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8140 	beq.w	800479e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004526:	429a      	cmp	r2, r3
 8004528:	f080 8139 	bcs.w	800479e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004532:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453e:	f000 8088 	beq.w	8004652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800455c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800456e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800457a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1d9      	bne.n	8004542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800459e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3314      	adds	r3, #20
 80045ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e1      	bne.n	800458e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3314      	adds	r3, #20
 80045d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e3      	bne.n	80045ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004634:	65ba      	str	r2, [r7, #88]	; 0x58
 8004636:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800463a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e3      	bne.n	8004610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	4618      	mov	r0, r3
 800464e:	f7fd fc28 	bl	8001ea2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800465a:	b29b      	uxth	r3, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	b29b      	uxth	r3, r3
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8c0 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004668:	e099      	b.n	800479e <HAL_UART_IRQHandler+0x50e>
 800466a:	bf00      	nop
 800466c:	08004a1f 	.word	0x08004a1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004678:	b29b      	uxth	r3, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 808b 	beq.w	80047a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800468c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8086 	beq.w	80047a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046ba:	647a      	str	r2, [r7, #68]	; 0x44
 80046bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e3      	bne.n	8004696 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	623b      	str	r3, [r7, #32]
   return(result);
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046f2:	633a      	str	r2, [r7, #48]	; 0x30
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e3      	bne.n	80046ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	60fb      	str	r3, [r7, #12]
   return(result);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0310 	bic.w	r3, r3, #16
 800472a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004738:	61fa      	str	r2, [r7, #28]
 800473a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	617b      	str	r3, [r7, #20]
   return(result);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e3      	bne.n	8004714 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800474c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f848 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004758:	e023      	b.n	80047a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_UART_IRQHandler+0x4ea>
 8004766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f967 	bl	8004a46 <UART_Transmit_IT>
    return;
 8004778:	e014      	b.n	80047a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00e      	beq.n	80047a4 <HAL_UART_IRQHandler+0x514>
 8004786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f9a7 	bl	8004ae6 <UART_EndTransmit_IT>
    return;
 8004798:	e004      	b.n	80047a4 <HAL_UART_IRQHandler+0x514>
    return;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <HAL_UART_IRQHandler+0x514>
      return;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <HAL_UART_IRQHandler+0x514>
      return;
 80047a2:	bf00      	nop
  }
}
 80047a4:	37e8      	adds	r7, #232	; 0xe8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop

080047ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b090      	sub	sp, #64	; 0x40
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004810:	e050      	b.n	80048b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d04c      	beq.n	80048b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800481a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x30>
 8004820:	f7fc fdee 	bl	8001400 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482c:	429a      	cmp	r2, r3
 800482e:	d241      	bcs.n	80048b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004850:	637a      	str	r2, [r7, #52]	; 0x34
 8004852:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e5      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	613b      	str	r3, [r7, #16]
   return(result);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	63bb      	str	r3, [r7, #56]	; 0x38
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004884:	623a      	str	r2, [r7, #32]
 8004886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69f9      	ldr	r1, [r7, #28]
 800488a:	6a3a      	ldr	r2, [r7, #32]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	61bb      	str	r3, [r7, #24]
   return(result);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e00f      	b.n	80048d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d09f      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3740      	adds	r7, #64	; 0x40
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	88fa      	ldrh	r2, [r7, #6]
 80048fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2222      	movs	r2, #34	; 0x22
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004928:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0201 	orr.w	r2, r2, #1
 8004938:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0220 	orr.w	r2, r2, #32
 8004948:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b095      	sub	sp, #84	; 0x54
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004980:	643a      	str	r2, [r7, #64]	; 0x40
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3314      	adds	r3, #20
 800499a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d119      	bne.n	8004a04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f023 0310 	bic.w	r3, r3, #16
 80049e6:	647b      	str	r3, [r7, #68]	; 0x44
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f0:	61ba      	str	r2, [r7, #24]
 80049f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6979      	ldr	r1, [r7, #20]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	613b      	str	r3, [r7, #16]
   return(result);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e5      	bne.n	80049d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a12:	bf00      	nop
 8004a14:	3754      	adds	r7, #84	; 0x54
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff fecb 	bl	80047d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b21      	cmp	r3, #33	; 0x21
 8004a58:	d13e      	bne.n	8004ad8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d114      	bne.n	8004a8e <UART_Transmit_IT+0x48>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d110      	bne.n	8004a8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	621a      	str	r2, [r3, #32]
 8004a8c:	e008      	b.n	8004aa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	1c59      	adds	r1, r3, #1
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6211      	str	r1, [r2, #32]
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10f      	bne.n	8004ad4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fe50 	bl	80047ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b08c      	sub	sp, #48	; 0x30
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b22      	cmp	r3, #34	; 0x22
 8004b28:	f040 80ab 	bne.w	8004c82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d117      	bne.n	8004b66 <UART_Receive_IT+0x50>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d113      	bne.n	8004b66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	1c9a      	adds	r2, r3, #2
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	629a      	str	r2, [r3, #40]	; 0x28
 8004b64:	e026      	b.n	8004bb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	d007      	beq.n	8004b8a <UART_Receive_IT+0x74>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <UART_Receive_IT+0x82>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e008      	b.n	8004baa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d15a      	bne.n	8004c7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0220 	bic.w	r2, r2, #32
 8004bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d135      	bne.n	8004c74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f023 0310 	bic.w	r3, r3, #16
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2e:	623a      	str	r2, [r7, #32]
 8004c30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	69f9      	ldr	r1, [r7, #28]
 8004c34:	6a3a      	ldr	r2, [r7, #32]
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d10a      	bne.n	8004c66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fdbb 	bl	80047e8 <HAL_UARTEx_RxEventCallback>
 8004c72:	e002      	b.n	8004c7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fda3 	bl	80047c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e002      	b.n	8004c84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
  }
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3730      	adds	r7, #48	; 0x30
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c90:	b0c0      	sub	sp, #256	; 0x100
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	68d9      	ldr	r1, [r3, #12]
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	ea40 0301 	orr.w	r3, r0, r1
 8004cb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ce4:	f021 010c 	bic.w	r1, r1, #12
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d06:	6999      	ldr	r1, [r3, #24]
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	ea40 0301 	orr.w	r3, r0, r1
 8004d12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b8f      	ldr	r3, [pc, #572]	; (8004f58 <UART_SetConfig+0x2cc>)
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d005      	beq.n	8004d2c <UART_SetConfig+0xa0>
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b8d      	ldr	r3, [pc, #564]	; (8004f5c <UART_SetConfig+0x2d0>)
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d104      	bne.n	8004d36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7fe fbd8 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8004d30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d34:	e003      	b.n	8004d3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d36:	f7fe fbbf 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8004d3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	f040 810c 	bne.w	8004f64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d5e:	4622      	mov	r2, r4
 8004d60:	462b      	mov	r3, r5
 8004d62:	1891      	adds	r1, r2, r2
 8004d64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d66:	415b      	adcs	r3, r3
 8004d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d6e:	4621      	mov	r1, r4
 8004d70:	eb12 0801 	adds.w	r8, r2, r1
 8004d74:	4629      	mov	r1, r5
 8004d76:	eb43 0901 	adc.w	r9, r3, r1
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d8e:	4690      	mov	r8, r2
 8004d90:	4699      	mov	r9, r3
 8004d92:	4623      	mov	r3, r4
 8004d94:	eb18 0303 	adds.w	r3, r8, r3
 8004d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	eb49 0303 	adc.w	r3, r9, r3
 8004da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004db2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004db6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dba:	460b      	mov	r3, r1
 8004dbc:	18db      	adds	r3, r3, r3
 8004dbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	eb42 0303 	adc.w	r3, r2, r3
 8004dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004dcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dd0:	f7fb fdbc 	bl	800094c <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4b61      	ldr	r3, [pc, #388]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	011c      	lsls	r4, r3, #4
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004df0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e04:	4641      	mov	r1, r8
 8004e06:	eb12 0a01 	adds.w	sl, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e24:	4692      	mov	sl, r2
 8004e26:	469b      	mov	fp, r3
 8004e28:	4643      	mov	r3, r8
 8004e2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e32:	464b      	mov	r3, r9
 8004e34:	eb4b 0303 	adc.w	r3, fp, r3
 8004e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e50:	460b      	mov	r3, r1
 8004e52:	18db      	adds	r3, r3, r3
 8004e54:	643b      	str	r3, [r7, #64]	; 0x40
 8004e56:	4613      	mov	r3, r2
 8004e58:	eb42 0303 	adc.w	r3, r2, r3
 8004e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e66:	f7fb fd71 	bl	800094c <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004e72:	fba3 2301 	umull	r2, r3, r3, r1
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2264      	movs	r2, #100	; 0x64
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	1acb      	subs	r3, r1, r3
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e86:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004e88:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e94:	441c      	add	r4, r3
 8004e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ea0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ea4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	1891      	adds	r1, r2, r2
 8004eae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004eb8:	4641      	mov	r1, r8
 8004eba:	1851      	adds	r1, r2, r1
 8004ebc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	414b      	adcs	r3, r1
 8004ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	00cb      	lsls	r3, r1, #3
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eda:	4651      	mov	r1, sl
 8004edc:	00ca      	lsls	r2, r1, #3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eec:	464b      	mov	r3, r9
 8004eee:	460a      	mov	r2, r1
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	18db      	adds	r3, r3, r3
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f12:	4613      	mov	r3, r2
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f22:	f7fb fd13 	bl	800094c <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2164      	movs	r1, #100	; 0x64
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <UART_SetConfig+0x2d4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f003 0207 	and.w	r2, r3, #7
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4422      	add	r2, r4
 8004f52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f54:	e105      	b.n	8005162 <UART_SetConfig+0x4d6>
 8004f56:	bf00      	nop
 8004f58:	40011000 	.word	0x40011000
 8004f5c:	40011400 	.word	0x40011400
 8004f60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f76:	4642      	mov	r2, r8
 8004f78:	464b      	mov	r3, r9
 8004f7a:	1891      	adds	r1, r2, r2
 8004f7c:	6239      	str	r1, [r7, #32]
 8004f7e:	415b      	adcs	r3, r3
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f86:	4641      	mov	r1, r8
 8004f88:	1854      	adds	r4, r2, r1
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	eb43 0501 	adc.w	r5, r3, r1
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	00eb      	lsls	r3, r5, #3
 8004f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f9e:	00e2      	lsls	r2, r4, #3
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	4643      	mov	r3, r8
 8004fa6:	18e3      	adds	r3, r4, r3
 8004fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fac:	464b      	mov	r3, r9
 8004fae:	eb45 0303 	adc.w	r3, r5, r3
 8004fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	008b      	lsls	r3, r1, #2
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fdc:	4621      	mov	r1, r4
 8004fde:	008a      	lsls	r2, r1, #2
 8004fe0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fe4:	f7fb fcb2 	bl	800094c <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4b60      	ldr	r3, [pc, #384]	; (8005170 <UART_SetConfig+0x4e4>)
 8004fee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	011c      	lsls	r4, r3, #4
 8004ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005000:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005004:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	1891      	adds	r1, r2, r2
 800500e:	61b9      	str	r1, [r7, #24]
 8005010:	415b      	adcs	r3, r3
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005018:	4641      	mov	r1, r8
 800501a:	1851      	adds	r1, r2, r1
 800501c:	6139      	str	r1, [r7, #16]
 800501e:	4649      	mov	r1, r9
 8005020:	414b      	adcs	r3, r1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005030:	4659      	mov	r1, fp
 8005032:	00cb      	lsls	r3, r1, #3
 8005034:	4651      	mov	r1, sl
 8005036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503a:	4651      	mov	r1, sl
 800503c:	00ca      	lsls	r2, r1, #3
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	4603      	mov	r3, r0
 8005044:	4642      	mov	r2, r8
 8005046:	189b      	adds	r3, r3, r2
 8005048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800504c:	464b      	mov	r3, r9
 800504e:	460a      	mov	r2, r1
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	67bb      	str	r3, [r7, #120]	; 0x78
 8005062:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005070:	4649      	mov	r1, r9
 8005072:	008b      	lsls	r3, r1, #2
 8005074:	4641      	mov	r1, r8
 8005076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507a:	4641      	mov	r1, r8
 800507c:	008a      	lsls	r2, r1, #2
 800507e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005082:	f7fb fc63 	bl	800094c <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <UART_SetConfig+0x4e4>)
 800508c:	fba3 1302 	umull	r1, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	2164      	movs	r1, #100	; 0x64
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	3332      	adds	r3, #50	; 0x32
 800509e:	4a34      	ldr	r2, [pc, #208]	; (8005170 <UART_SetConfig+0x4e4>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050aa:	441c      	add	r4, r3
 80050ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b0:	2200      	movs	r2, #0
 80050b2:	673b      	str	r3, [r7, #112]	; 0x70
 80050b4:	677a      	str	r2, [r7, #116]	; 0x74
 80050b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ca:	4641      	mov	r1, r8
 80050cc:	1851      	adds	r1, r2, r1
 80050ce:	6039      	str	r1, [r7, #0]
 80050d0:	4649      	mov	r1, r9
 80050d2:	414b      	adcs	r3, r1
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050e2:	4659      	mov	r1, fp
 80050e4:	00cb      	lsls	r3, r1, #3
 80050e6:	4651      	mov	r1, sl
 80050e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ec:	4651      	mov	r1, sl
 80050ee:	00ca      	lsls	r2, r1, #3
 80050f0:	4610      	mov	r0, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	4603      	mov	r3, r0
 80050f6:	4642      	mov	r2, r8
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80050fc:	464b      	mov	r3, r9
 80050fe:	460a      	mov	r2, r1
 8005100:	eb42 0303 	adc.w	r3, r2, r3
 8005104:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	663b      	str	r3, [r7, #96]	; 0x60
 8005110:	667a      	str	r2, [r7, #100]	; 0x64
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800511e:	4649      	mov	r1, r9
 8005120:	008b      	lsls	r3, r1, #2
 8005122:	4641      	mov	r1, r8
 8005124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005128:	4641      	mov	r1, r8
 800512a:	008a      	lsls	r2, r1, #2
 800512c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005130:	f7fb fc0c 	bl	800094c <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <UART_SetConfig+0x4e4>)
 800513a:	fba3 1302 	umull	r1, r3, r3, r2
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2164      	movs	r1, #100	; 0x64
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	3332      	adds	r3, #50	; 0x32
 800514c:	4a08      	ldr	r2, [pc, #32]	; (8005170 <UART_SetConfig+0x4e4>)
 800514e:	fba2 2303 	umull	r2, r3, r2, r3
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4422      	add	r2, r4
 8005160:	609a      	str	r2, [r3, #8]
}
 8005162:	bf00      	nop
 8005164:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516e:	bf00      	nop
 8005170:	51eb851f 	.word	0x51eb851f

08005174 <application>:
#include "app_EEPROM.h"

struct data d;

void application(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
	Configurator();
 8005178:	f000 fb12 	bl	80057a0 <Configurator>
//	strcpy(d.CH4, "ADC4");
//	strcpy(d.Status1, "GPIO1");
//	strcpy(d.Status2, "GPIO2");
//	strcpy(d.Status3, "GPIO3");
//	strcpy(d.Status4, "GPIO4");
	get_time(&d);
 800517c:	4807      	ldr	r0, [pc, #28]	; (800519c <application+0x28>)
 800517e:	f000 fabf 	bl	8005700 <get_time>
    ADC_handler(&d);
 8005182:	4806      	ldr	r0, [pc, #24]	; (800519c <application+0x28>)
 8005184:	f000 f832 	bl	80051ec <ADC_handler>
	DataToGsm(&d);
 8005188:	4804      	ldr	r0, [pc, #16]	; (800519c <application+0x28>)
 800518a:	f000 f94f 	bl	800542c <DataToGsm>
	EEPROM();
 800518e:	f000 f93d 	bl	800540c <EEPROM>
	terminal(&d);
 8005192:	4802      	ldr	r0, [pc, #8]	; (800519c <application+0x28>)
 8005194:	f000 fe72 	bl	8005e7c <terminal>


}
 8005198:	bf00      	nop
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000170 	.word	0x20000170

080051a0 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 80051a4:	f000 ffa0 	bl	80060e8 <adc_value>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <voltage_cal+0x48>)
 80051ae:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 80051b0:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <voltage_cal+0x48>)
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fb fb0f 	bl	80007d8 <__aeabi_i2d>
 80051ba:	a309      	add	r3, pc, #36	; (adr r3, 80051e0 <voltage_cal+0x40>)
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f7fb f88e 	bl	80002e0 <__aeabi_dmul>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	f7fb fb6e 	bl	80008ac <__aeabi_d2f>
 80051d0:	4603      	mov	r3, r0
 80051d2:	ee07 3a90 	vmov	s15, r3
}
 80051d6:	eeb0 0a67 	vmov.f32	s0, s15
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	f3af 8000 	nop.w
 80051e0:	e734d9b4 	.word	0xe734d9b4
 80051e4:	3f4a680c 	.word	0x3f4a680c
 80051e8:	200001b8 	.word	0x200001b8

080051ec <ADC_handler>:

void ADC_handler(struct data *d)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 80051f4:	4b2b      	ldr	r3, [pc, #172]	; (80052a4 <ADC_handler+0xb8>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10f      	bne.n	800521c <ADC_handler+0x30>
	{
		ADC_select_CH1();
 80051fc:	f000 fef6 	bl	8005fec <ADC_select_CH1>
		adc_start();
 8005200:	f000 ff5c 	bl	80060bc <adc_start>
		adc_conversion();
 8005204:	f000 ff64 	bl	80060d0 <adc_conversion>
		d->adc1_value = voltage_cal();
 8005208:	f7ff ffca 	bl	80051a0 <voltage_cal>
 800520c:	eef0 7a40 	vmov.f32	s15, s0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	edc3 7a07 	vstr	s15, [r3, #28]
		adc_stop();
 8005216:	f000 ff73 	bl	8006100 <adc_stop>
 800521a:	e000      	b.n	800521e <ADC_handler+0x32>
	}
	else
	{
		__NOP();
 800521c:	bf00      	nop
	}
	if(adcChnlChecker[1] == 1)
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <ADC_handler+0xb8>)
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10f      	bne.n	8005246 <ADC_handler+0x5a>
	{
		ADC_select_CH2();
 8005226:	f000 fefb 	bl	8006020 <ADC_select_CH2>
		adc_start();
 800522a:	f000 ff47 	bl	80060bc <adc_start>
		adc_conversion();
 800522e:	f000 ff4f 	bl	80060d0 <adc_conversion>
		d->adc2_value = voltage_cal();
 8005232:	f7ff ffb5 	bl	80051a0 <voltage_cal>
 8005236:	eef0 7a40 	vmov.f32	s15, s0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	edc3 7a08 	vstr	s15, [r3, #32]
		adc_stop();
 8005240:	f000 ff5e 	bl	8006100 <adc_stop>
 8005244:	e000      	b.n	8005248 <ADC_handler+0x5c>
	}
	else
	{
		__NOP();
 8005246:	bf00      	nop
	}
	if(adcChnlChecker[2] == 1)
 8005248:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <ADC_handler+0xb8>)
 800524a:	789b      	ldrb	r3, [r3, #2]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d10f      	bne.n	8005270 <ADC_handler+0x84>
	{
		ADC_select_CH3();
 8005250:	f000 ff00 	bl	8006054 <ADC_select_CH3>
		adc_start();
 8005254:	f000 ff32 	bl	80060bc <adc_start>
		adc_conversion();
 8005258:	f000 ff3a 	bl	80060d0 <adc_conversion>
		d->adc3_value = voltage_cal();
 800525c:	f7ff ffa0 	bl	80051a0 <voltage_cal>
 8005260:	eef0 7a40 	vmov.f32	s15, s0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		adc_stop();
 800526a:	f000 ff49 	bl	8006100 <adc_stop>
 800526e:	e000      	b.n	8005272 <ADC_handler+0x86>
	}
	else
	{
		__NOP();
 8005270:	bf00      	nop
	}
	if(adcChnlChecker[3] == 1)
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <ADC_handler+0xb8>)
 8005274:	78db      	ldrb	r3, [r3, #3]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10f      	bne.n	800529a <ADC_handler+0xae>
	{
		ADC_select_CH4();
 800527a:	f000 ff05 	bl	8006088 <ADC_select_CH4>
		adc_start();
 800527e:	f000 ff1d 	bl	80060bc <adc_start>
		adc_conversion();
 8005282:	f000 ff25 	bl	80060d0 <adc_conversion>
		d->adc4_value = voltage_cal();
 8005286:	f7ff ff8b 	bl	80051a0 <voltage_cal>
 800528a:	eef0 7a40 	vmov.f32	s15, s0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		adc_stop();
 8005294:	f000 ff34 	bl	8006100 <adc_stop>
	{
		__NOP();
	}
//	adc_stop();

}
 8005298:	e000      	b.n	800529c <ADC_handler+0xb0>
		__NOP();
 800529a:	bf00      	nop
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	200002bc 	.word	0x200002bc

080052a8 <convert_data_to_eeprom_data>:
struct eeprom_data ed;
struct eeprom_data read_back_data;


void convert_data_to_eeprom_data(struct data *d, struct eeprom_data *ed)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
    ed->scan_time = d->scan_time;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	701a      	strb	r2, [r3, #0]
    ed->seconds = d->seconds;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	705a      	strb	r2, [r3, #1]
    ed->minutes = d->minutes;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	785a      	ldrb	r2, [r3, #1]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	709a      	strb	r2, [r3, #2]
    ed->hour = d->hour;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	789a      	ldrb	r2, [r3, #2]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	70da      	strb	r2, [r3, #3]
    ed->dayofmonth = d->dayofmonth;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	791a      	ldrb	r2, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	711a      	strb	r2, [r3, #4]
    ed->month = d->month;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	795a      	ldrb	r2, [r3, #5]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	715a      	strb	r2, [r3, #5]
    ed->year = d->year;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	799a      	ldrb	r2, [r3, #6]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	719a      	strb	r2, [r3, #6]
    ed->adc1_value = d->adc1_value;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	609a      	str	r2, [r3, #8]
    ed->adc2_value = d->adc2_value;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1a      	ldr	r2, [r3, #32]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	60da      	str	r2, [r3, #12]
    ed->adc3_value = d->adc3_value;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	611a      	str	r2, [r3, #16]
    ed->adc4_value = d->adc4_value;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	615a      	str	r2, [r3, #20]
    strncpy(ed->Status1, d->Status1, sizeof(ed->Status1));
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f103 0018 	add.w	r0, r3, #24
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3331      	adds	r3, #49	; 0x31
 8005316:	2205      	movs	r2, #5
 8005318:	4619      	mov	r1, r3
 800531a:	f001 fc37 	bl	8006b8c <strncpy>
    strncpy(ed->Status2, d->Status2, sizeof(ed->Status2));
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f103 001d 	add.w	r0, r3, #29
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3336      	adds	r3, #54	; 0x36
 8005328:	2205      	movs	r2, #5
 800532a:	4619      	mov	r1, r3
 800532c:	f001 fc2e 	bl	8006b8c <strncpy>
    strncpy(ed->Status3, d->Status3, sizeof(ed->Status3));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	333b      	adds	r3, #59	; 0x3b
 800533a:	2205      	movs	r2, #5
 800533c:	4619      	mov	r1, r3
 800533e:	f001 fc25 	bl	8006b8c <strncpy>
    strncpy(ed->Status4, d->Status4, sizeof(ed->Status4));
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f103 0027 	add.w	r0, r3, #39	; 0x27
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3340      	adds	r3, #64	; 0x40
 800534c:	2205      	movs	r2, #5
 800534e:	4619      	mov	r1, r3
 8005350:	f001 fc1c 	bl	8006b8c <strncpy>
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <store_data_in_eeprom>:


// Store data in EEPROM
void store_data_in_eeprom(struct eeprom_data *ed)
{
 800535c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535e:	b08f      	sub	sp, #60	; 0x3c
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
    uint8_t eeprom_buffer[sizeof(struct eeprom_data)];
    memcpy(eeprom_buffer, ed, sizeof(struct eeprom_data));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	461c      	mov	r4, r3
 8005368:	f107 060c 	add.w	r6, r7, #12
 800536c:	f104 0c20 	add.w	ip, r4, #32
 8005370:	4635      	mov	r5, r6
 8005372:	4623      	mov	r3, r4
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800537e:	3410      	adds	r4, #16
 8005380:	3610      	adds	r6, #16
 8005382:	4564      	cmp	r4, ip
 8005384:	d1f4      	bne.n	8005370 <store_data_in_eeprom+0x14>
 8005386:	4633      	mov	r3, r6
 8005388:	4622      	mov	r2, r4
 800538a:	6810      	ldr	r0, [r2, #0]
 800538c:	6851      	ldr	r1, [r2, #4]
 800538e:	6892      	ldr	r2, [r2, #8]
 8005390:	c307      	stmia	r3!, {r0, r1, r2}

    // Write data to EEPROM
    if (eeprom_write(eeprom_address, eeprom_buffer, sizeof(eeprom_buffer)) == HAL_OK)
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <store_data_in_eeprom+0x78>)
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	f107 010c 	add.w	r1, r7, #12
 800539a:	222c      	movs	r2, #44	; 0x2c
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fa41 	bl	8006824 <eeprom_write>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10f      	bne.n	80053c8 <store_data_in_eeprom+0x6c>
    {
        eeprom_address += sizeof(eeprom_buffer);
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <store_data_in_eeprom+0x78>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	332c      	adds	r3, #44	; 0x2c
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <store_data_in_eeprom+0x78>)
 80053b2:	801a      	strh	r2, [r3, #0]

        // Wrap around if EEPROM address exceeds max size
        if (eeprom_address + sizeof(eeprom_buffer) > EEPROM_MAX_ADDRESS)
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <store_data_in_eeprom+0x78>)
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	332c      	adds	r3, #44	; 0x2c
 80053ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053be:	d305      	bcc.n	80053cc <store_data_in_eeprom+0x70>
        {
            eeprom_address = 0x0000;
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <store_data_in_eeprom+0x78>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	801a      	strh	r2, [r3, #0]
    }
        else
        {
        	 Error_Handler();
        }
    }
 80053c6:	e001      	b.n	80053cc <store_data_in_eeprom+0x70>
        	 Error_Handler();
 80053c8:	f7fb fc59 	bl	8000c7e <Error_Handler>
    }
 80053cc:	bf00      	nop
 80053ce:	373c      	adds	r7, #60	; 0x3c
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d4:	200001ba 	.word	0x200001ba

080053d8 <CheckAndStoreData>:
    }
}


void CheckAndStoreData(struct data *d)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08e      	sub	sp, #56	; 0x38
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
//   if ((d->minutes % d->scan_time == 0 && d->seconds == 0) && d->minutes != prev_minutes)
//    {
//    if (d->scan_time > 0 && (d->minutes % d->scan_time == 0) && d->seconds < 2 && d->minutes != prev_minutes)
//    {
        struct eeprom_data ed;
        convert_data_to_eeprom_data(d, &ed);
 80053e0:	f107 030c 	add.w	r3, r7, #12
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff ff5e 	bl	80052a8 <convert_data_to_eeprom_data>
        store_data_in_eeprom(&ed);
 80053ec:	f107 030c 	add.w	r3, r7, #12
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff ffb3 	bl	800535c <store_data_in_eeprom>
        prev_minutes = d->minutes;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	785a      	ldrb	r2, [r3, #1]
 80053fa:	4b03      	ldr	r3, [pc, #12]	; (8005408 <CheckAndStoreData+0x30>)
 80053fc:	701a      	strb	r2, [r3, #0]
  //  }
}
 80053fe:	bf00      	nop
 8005400:	3738      	adds	r7, #56	; 0x38
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	200001e8 	.word	0x200001e8

0800540c <EEPROM>:

void EEPROM(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
//    struct data d;
//    struct eeprom_data ed;


        ed.scan_time = d.scan_time; // Set scan time
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <EEPROM+0x18>)
 8005412:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005416:	4b04      	ldr	r3, [pc, #16]	; (8005428 <EEPROM+0x1c>)
 8005418:	701a      	strb	r2, [r3, #0]

        // Check GPIO pin status
        //read_pinstatus(&d);

        // Check and store data based on scan time
        CheckAndStoreData(&d);
 800541a:	4802      	ldr	r0, [pc, #8]	; (8005424 <EEPROM+0x18>)
 800541c:	f7ff ffdc 	bl	80053d8 <CheckAndStoreData>

        // Optional: Additional logic (e.g., GSM communication, etc.)

        // Delay to avoid rapid polling
        //HAL_Delay(100);
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000170 	.word	0x20000170
 8005428:	200001bc 	.word	0x200001bc

0800542c <DataToGsm>:
int count=0;

UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af06      	add	r7, sp, #24
 8005432:	6078      	str	r0, [r7, #4]
	uint8_t sec=d->seconds;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	73fb      	strb	r3, [r7, #15]
		//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf((char*)buffer_Time,"%02d:%02d:%02d",d->hour,d->minutes,d->seconds);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	789b      	ldrb	r3, [r3, #2]
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	4619      	mov	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	460b      	mov	r3, r1
 800544e:	4959      	ldr	r1, [pc, #356]	; (80055b4 <DataToGsm+0x188>)
 8005450:	4859      	ldr	r0, [pc, #356]	; (80055b8 <DataToGsm+0x18c>)
 8005452:	f001 fb73 	bl	8006b3c <siprintf>
	sprintf((char*)buffer_Date,"%02d/%02d/%02d",d->dayofmonth,d->month,d->year);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	795b      	ldrb	r3, [r3, #5]
 8005460:	4619      	mov	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	799b      	ldrb	r3, [r3, #6]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	460b      	mov	r3, r1
 800546a:	4954      	ldr	r1, [pc, #336]	; (80055bc <DataToGsm+0x190>)
 800546c:	4854      	ldr	r0, [pc, #336]	; (80055c0 <DataToGsm+0x194>)
 800546e:	f001 fb65 	bl	8006b3c <siprintf>

//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf((char*)CH1,"%f",d->adc1_value);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fb f9c0 	bl	80007fc <__aeabi_f2d>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4950      	ldr	r1, [pc, #320]	; (80055c4 <DataToGsm+0x198>)
 8005482:	4851      	ldr	r0, [pc, #324]	; (80055c8 <DataToGsm+0x19c>)
 8005484:	f001 fb5a 	bl	8006b3c <siprintf>
	sprintf((char*)CH2,"%f",d->adc2_value);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f9b5 	bl	80007fc <__aeabi_f2d>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	494b      	ldr	r1, [pc, #300]	; (80055c4 <DataToGsm+0x198>)
 8005498:	484c      	ldr	r0, [pc, #304]	; (80055cc <DataToGsm+0x1a0>)
 800549a:	f001 fb4f 	bl	8006b3c <siprintf>
	sprintf((char*)CH3,"%f",d->adc3_value);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fb f9aa 	bl	80007fc <__aeabi_f2d>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4945      	ldr	r1, [pc, #276]	; (80055c4 <DataToGsm+0x198>)
 80054ae:	4848      	ldr	r0, [pc, #288]	; (80055d0 <DataToGsm+0x1a4>)
 80054b0:	f001 fb44 	bl	8006b3c <siprintf>
	sprintf((char*)CH4,"%f",d->adc4_value);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fb f99f 	bl	80007fc <__aeabi_f2d>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4940      	ldr	r1, [pc, #256]	; (80055c4 <DataToGsm+0x198>)
 80054c4:	4843      	ldr	r0, [pc, #268]	; (80055d4 <DataToGsm+0x1a8>)
 80054c6:	f001 fb39 	bl	8006b3c <siprintf>

	if(d->GPIO[0]==1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <DataToGsm+0xb8>
	{
		strcpy(d->Status1, "High");
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3331      	adds	r3, #49	; 0x31
 80054d8:	4a3f      	ldr	r2, [pc, #252]	; (80055d8 <DataToGsm+0x1ac>)
 80054da:	6810      	ldr	r0, [r2, #0]
 80054dc:	6018      	str	r0, [r3, #0]
 80054de:	7912      	ldrb	r2, [r2, #4]
 80054e0:	711a      	strb	r2, [r3, #4]
 80054e2:	e004      	b.n	80054ee <DataToGsm+0xc2>
	}
	else
	{
		strcpy(d->Status1, "Low");
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3331      	adds	r3, #49	; 0x31
 80054e8:	4a3c      	ldr	r2, [pc, #240]	; (80055dc <DataToGsm+0x1b0>)
 80054ea:	6810      	ldr	r0, [r2, #0]
 80054ec:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <DataToGsm+0xdc>
	{
		strcpy(d->Status2, "High");
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3336      	adds	r3, #54	; 0x36
 80054fc:	4a36      	ldr	r2, [pc, #216]	; (80055d8 <DataToGsm+0x1ac>)
 80054fe:	6810      	ldr	r0, [r2, #0]
 8005500:	6018      	str	r0, [r3, #0]
 8005502:	7912      	ldrb	r2, [r2, #4]
 8005504:	711a      	strb	r2, [r3, #4]
 8005506:	e004      	b.n	8005512 <DataToGsm+0xe6>
	}
	else
	{
		strcpy(d->Status2, "Low");
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3336      	adds	r3, #54	; 0x36
 800550c:	4a33      	ldr	r2, [pc, #204]	; (80055dc <DataToGsm+0x1b0>)
 800550e:	6810      	ldr	r0, [r2, #0]
 8005510:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005518:	2b01      	cmp	r3, #1
 800551a:	d107      	bne.n	800552c <DataToGsm+0x100>
	{
		strcpy(d->Status3, "High");
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	333b      	adds	r3, #59	; 0x3b
 8005520:	4a2d      	ldr	r2, [pc, #180]	; (80055d8 <DataToGsm+0x1ac>)
 8005522:	6810      	ldr	r0, [r2, #0]
 8005524:	6018      	str	r0, [r3, #0]
 8005526:	7912      	ldrb	r2, [r2, #4]
 8005528:	711a      	strb	r2, [r3, #4]
 800552a:	e004      	b.n	8005536 <DataToGsm+0x10a>
	}
	else
	{
		strcpy(d->Status3, "Low");
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	333b      	adds	r3, #59	; 0x3b
 8005530:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <DataToGsm+0x1b0>)
 8005532:	6810      	ldr	r0, [r2, #0]
 8005534:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800553c:	2b01      	cmp	r3, #1
 800553e:	d107      	bne.n	8005550 <DataToGsm+0x124>
	{
		strcpy(d->Status4, "High");
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3340      	adds	r3, #64	; 0x40
 8005544:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <DataToGsm+0x1ac>)
 8005546:	6810      	ldr	r0, [r2, #0]
 8005548:	6018      	str	r0, [r3, #0]
 800554a:	7912      	ldrb	r2, [r2, #4]
 800554c:	711a      	strb	r2, [r3, #4]
 800554e:	e004      	b.n	800555a <DataToGsm+0x12e>
	}
	else
	{
		strcpy(d->Status4, "Low");
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3340      	adds	r3, #64	; 0x40
 8005554:	4a21      	ldr	r2, [pc, #132]	; (80055dc <DataToGsm+0x1b0>)
 8005556:	6810      	ldr	r0, [r2, #0]
 8005558:	6018      	str	r0, [r3, #0]


//	DataToCloud(buffer_Time,buffer_Date,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);


	if(sec>=59)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b3a      	cmp	r3, #58	; 0x3a
 800555e:	d904      	bls.n	800556a <DataToGsm+0x13e>
	{
		count=count+1;
 8005560:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <DataToGsm+0x1b4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <DataToGsm+0x1b4>)
 8005568:	6013      	str	r3, [r2, #0]

	}


	if(count==d->scan_time)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005570:	461a      	mov	r2, r3
 8005572:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <DataToGsm+0x1b4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d118      	bne.n	80055ac <DataToGsm+0x180>
	{
		DataToCloud(buffer_Time,buffer_Date,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3331      	adds	r3, #49	; 0x31
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	3236      	adds	r2, #54	; 0x36
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	313b      	adds	r1, #59	; 0x3b
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	3040      	adds	r0, #64	; 0x40
 800558a:	9005      	str	r0, [sp, #20]
 800558c:	9104      	str	r1, [sp, #16]
 800558e:	9203      	str	r2, [sp, #12]
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <DataToGsm+0x1a8>)
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <DataToGsm+0x1a4>)
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <DataToGsm+0x1a0>)
 800559c:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <DataToGsm+0x19c>)
 800559e:	4908      	ldr	r1, [pc, #32]	; (80055c0 <DataToGsm+0x194>)
 80055a0:	4805      	ldr	r0, [pc, #20]	; (80055b8 <DataToGsm+0x18c>)
 80055a2:	f000 fdff 	bl	80061a4 <DataToCloud>
		count=0;
 80055a6:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <DataToGsm+0x1b4>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
	}

//	count=0;
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	08007f18 	.word	0x08007f18
 80055b8:	200001ec 	.word	0x200001ec
 80055bc:	08007f28 	.word	0x08007f28
 80055c0:	200001fc 	.word	0x200001fc
 80055c4:	08007f38 	.word	0x08007f38
 80055c8:	2000020c 	.word	0x2000020c
 80055cc:	20000218 	.word	0x20000218
 80055d0:	20000224 	.word	0x20000224
 80055d4:	20000230 	.word	0x20000230
 80055d8:	08007f3c 	.word	0x08007f3c
 80055dc:	08007f44 	.word	0x08007f44
 80055e0:	2000023c 	.word	0x2000023c

080055e4 <dec_bcd>:
#define RTC_add 0xD0

//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a0f      	ldr	r2, [pc, #60]	; (800562c <dec_bcd+0x48>)
 80055f0:	fb82 1203 	smull	r1, r2, r2, r3
 80055f4:	1092      	asrs	r2, r2, #2
 80055f6:	17db      	asrs	r3, r3, #31
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	b2d8      	uxtb	r0, r3
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <dec_bcd+0x48>)
 8005604:	fb83 1302 	smull	r1, r3, r3, r2
 8005608:	1099      	asrs	r1, r3, #2
 800560a:	17d3      	asrs	r3, r2, #31
 800560c:	1ac9      	subs	r1, r1, r3
 800560e:	460b      	mov	r3, r1
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	1ad1      	subs	r1, r2, r3
 8005618:	b2cb      	uxtb	r3, r1
 800561a:	4403      	add	r3, r0
 800561c:	b2db      	uxtb	r3, r3
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	66666667 	.word	0x66666667

08005630 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4413      	add	r3, r2
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <set_time>:




void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b089      	sub	sp, #36	; 0x24
 8005664:	af04      	add	r7, sp, #16
 8005666:	4604      	mov	r4, r0
 8005668:	4608      	mov	r0, r1
 800566a:	4611      	mov	r1, r2
 800566c:	461a      	mov	r2, r3
 800566e:	4623      	mov	r3, r4
 8005670:	71fb      	strb	r3, [r7, #7]
 8005672:	4603      	mov	r3, r0
 8005674:	71bb      	strb	r3, [r7, #6]
 8005676:	460b      	mov	r3, r1
 8005678:	717b      	strb	r3, [r7, #5]
 800567a:	4613      	mov	r3, r2
 800567c:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff ffaf 	bl	80055e4 <dec_bcd>
 8005686:	4603      	mov	r3, r0
 8005688:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 800568a:	79bb      	ldrb	r3, [r7, #6]
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff ffa9 	bl	80055e4 <dec_bcd>
 8005692:	4603      	mov	r3, r0
 8005694:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8005696:	797b      	ldrb	r3, [r7, #5]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ffa3 	bl	80055e4 <dec_bcd>
 800569e:	4603      	mov	r3, r0
 80056a0:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 80056a2:	793b      	ldrb	r3, [r7, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff9d 	bl	80055e4 <dec_bcd>
 80056aa:	4603      	mov	r3, r0
 80056ac:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 80056ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ff96 	bl	80055e4 <dec_bcd>
 80056b8:	4603      	mov	r3, r0
 80056ba:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 80056bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff8f 	bl	80055e4 <dec_bcd>
 80056c6:	4603      	mov	r3, r0
 80056c8:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 80056ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff ff88 	bl	80055e4 <dec_bcd>
 80056d4:	4603      	mov	r3, r0
 80056d6:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295
 80056dc:	9302      	str	r3, [sp, #8]
 80056de:	2307      	movs	r3, #7
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2301      	movs	r3, #1
 80056ea:	2200      	movs	r2, #0
 80056ec:	21d0      	movs	r1, #208	; 0xd0
 80056ee:	4803      	ldr	r0, [pc, #12]	; (80056fc <set_time+0x9c>)
 80056f0:	f7fc ff74 	bl	80025dc <HAL_I2C_Mem_Write>
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd90      	pop	{r4, r7, pc}
 80056fc:	2000008c 	.word	0x2000008c

08005700 <get_time>:



void get_time(struct data *d)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af04      	add	r7, sp, #16
 8005706:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 8005708:	f04f 33ff 	mov.w	r3, #4294967295
 800570c:	9302      	str	r3, [sp, #8]
 800570e:	2307      	movs	r3, #7
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	f107 0308 	add.w	r3, r7, #8
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2301      	movs	r3, #1
 800571a:	2200      	movs	r2, #0
 800571c:	21d0      	movs	r1, #208	; 0xd0
 800571e:	481f      	ldr	r0, [pc, #124]	; (800579c <get_time+0x9c>)
 8005720:	f7fd f856 	bl	80027d0 <HAL_I2C_Mem_Read>
	d->seconds=bcd_dec(get_time[0]);
 8005724:	7a3b      	ldrb	r3, [r7, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ff82 	bl	8005630 <bcd_dec>
 800572c:	4603      	mov	r3, r0
 800572e:	b2da      	uxtb	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	701a      	strb	r2, [r3, #0]
	d->minutes=bcd_dec(get_time[1]);
 8005734:	7a7b      	ldrb	r3, [r7, #9]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ff7a 	bl	8005630 <bcd_dec>
 800573c:	4603      	mov	r3, r0
 800573e:	b2da      	uxtb	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	705a      	strb	r2, [r3, #1]
	d->hour=bcd_dec(get_time[2]);
 8005744:	7abb      	ldrb	r3, [r7, #10]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ff72 	bl	8005630 <bcd_dec>
 800574c:	4603      	mov	r3, r0
 800574e:	b2da      	uxtb	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	709a      	strb	r2, [r3, #2]
	d->dayofweek=bcd_dec(get_time[3]);
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff6a 	bl	8005630 <bcd_dec>
 800575c:	4603      	mov	r3, r0
 800575e:	b2da      	uxtb	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	70da      	strb	r2, [r3, #3]
	d->dayofmonth=bcd_dec(get_time[4]);
 8005764:	7b3b      	ldrb	r3, [r7, #12]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff ff62 	bl	8005630 <bcd_dec>
 800576c:	4603      	mov	r3, r0
 800576e:	b2da      	uxtb	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	711a      	strb	r2, [r3, #4]
	d->month=bcd_dec(get_time[5]);
 8005774:	7b7b      	ldrb	r3, [r7, #13]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ff5a 	bl	8005630 <bcd_dec>
 800577c:	4603      	mov	r3, r0
 800577e:	b2da      	uxtb	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	715a      	strb	r2, [r3, #5]
	d->year=bcd_dec(get_time[6]);
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff52 	bl	8005630 <bcd_dec>
 800578c:	4603      	mov	r3, r0
 800578e:	b2da      	uxtb	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	719a      	strb	r2, [r3, #6]
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	2000008c 	.word	0x2000008c

080057a0 <Configurator>:
uint8_t s[4];
extern struct data d;
uint8_t adcChnlChecker[4];

void Configurator()
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
	data_receive();
 80057a4:	f000 ff96 	bl	80066d4 <data_receive>

	if (tx_data[0] != '\0')
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <Configurator+0x48>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <Configurator+0x18>
	{
		flag = 1; // Set flag to indicate data has been received
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <Configurator+0x4c>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e002      	b.n	80057be <Configurator+0x1e>
	}
	else
	{
		flag=0;
 80057b8:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <Configurator+0x4c>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
	}

	if (flag)
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <Configurator+0x4c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <Configurator+0x32>
	{
		extract_data();
 80057c6:	f000 f8ef 	bl	80059a8 <extract_data>
		pin_config();
 80057ca:	f000 f931 	bl	8005a30 <pin_config>
		clear_buffer();
 80057ce:	f000 f811 	bl	80057f4 <clear_buffer>
	}
	reset_output(&d);
 80057d2:	4807      	ldr	r0, [pc, #28]	; (80057f0 <Configurator+0x50>)
 80057d4:	f000 f860 	bl	8005898 <reset_output>
	set_output(&d);
 80057d8:	4805      	ldr	r0, [pc, #20]	; (80057f0 <Configurator+0x50>)
 80057da:	f000 f817 	bl	800580c <set_output>

	//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

	read_pinstatus(&d);
 80057de:	4804      	ldr	r0, [pc, #16]	; (80057f0 <Configurator+0x50>)
 80057e0:	f000 f8a0 	bl	8005924 <read_pinstatus>
	// status_transmit();
	//DataTOgsm(d);


}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000244 	.word	0x20000244
 80057ec:	200002b4 	.word	0x200002b4
 80057f0:	20000170 	.word	0x20000170

080057f4 <clear_buffer>:

void clear_buffer()
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 80057f8:	220f      	movs	r2, #15
 80057fa:	2100      	movs	r1, #0
 80057fc:	4802      	ldr	r0, [pc, #8]	; (8005808 <clear_buffer+0x14>)
 80057fe:	f001 f871 	bl	80068e4 <memset>
}
 8005802:	bf00      	nop
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000244 	.word	0x20000244

0800580c <set_output>:
//
//   HAL_UART_Receive(&huart1, (uint8_t *)tx_data, 15,1000);
// }

void set_output(struct data *d)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <set_output+0x80>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <set_output+0x24>
	{
		d->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_SET);
 800581c:	2201      	movs	r2, #1
 800581e:	2104      	movs	r1, #4
 8005820:	481b      	ldr	r0, [pc, #108]	; (8005890 <set_output+0x84>)
 8005822:	f000 ff7b 	bl	800671c <write_gpio>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(config[1] == 0)
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <set_output+0x80>)
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <set_output+0x40>
	{
		d->GPIO[1] = write_gpio(GPIOC,GPIO_PIN_1, PIN_SET);
 8005838:	2201      	movs	r2, #1
 800583a:	2102      	movs	r1, #2
 800583c:	4815      	ldr	r0, [pc, #84]	; (8005894 <set_output+0x88>)
 800583e:	f000 ff6d 	bl	800671c <write_gpio>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	if(config[2] == 0)
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <set_output+0x80>)
 800584e:	789b      	ldrb	r3, [r3, #2]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <set_output+0x5c>
	{
		d->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 8005854:	2201      	movs	r2, #1
 8005856:	2110      	movs	r1, #16
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <set_output+0x84>)
 800585a:	f000 ff5f 	bl	800671c <write_gpio>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if(config[3] == 0)
 8005868:	4b08      	ldr	r3, [pc, #32]	; (800588c <set_output+0x80>)
 800586a:	78db      	ldrb	r3, [r3, #3]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <set_output+0x78>
	{
		d->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8005870:	2201      	movs	r2, #1
 8005872:	2120      	movs	r1, #32
 8005874:	4806      	ldr	r0, [pc, #24]	; (8005890 <set_output+0x84>)
 8005876:	f000 ff51 	bl	800671c <write_gpio>
 800587a:	4603      	mov	r3, r0
 800587c:	461a      	mov	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	200002b8 	.word	0x200002b8
 8005890:	40020400 	.word	0x40020400
 8005894:	40020800 	.word	0x40020800

08005898 <reset_output>:

void reset_output(struct data *d1)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 80058a0:	4b1d      	ldr	r3, [pc, #116]	; (8005918 <reset_output+0x80>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <reset_output+0x24>
	{
		d1->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_RESET);
 80058a8:	2200      	movs	r2, #0
 80058aa:	2104      	movs	r1, #4
 80058ac:	481b      	ldr	r0, [pc, #108]	; (800591c <reset_output+0x84>)
 80058ae:	f000 ff35 	bl	800671c <write_gpio>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(config[1] == 0)
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <reset_output+0x80>)
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <reset_output+0x40>
	{
		d1->GPIO[1]=write_gpio(GPIOC,GPIO_PIN_1, PIN_RESET);
 80058c4:	2200      	movs	r2, #0
 80058c6:	2102      	movs	r1, #2
 80058c8:	4815      	ldr	r0, [pc, #84]	; (8005920 <reset_output+0x88>)
 80058ca:	f000 ff27 	bl	800671c <write_gpio>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	if(config[2] == 0)
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <reset_output+0x80>)
 80058da:	789b      	ldrb	r3, [r3, #2]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <reset_output+0x5c>
	{
		d1->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 80058e0:	2200      	movs	r2, #0
 80058e2:	2110      	movs	r1, #16
 80058e4:	480d      	ldr	r0, [pc, #52]	; (800591c <reset_output+0x84>)
 80058e6:	f000 ff19 	bl	800671c <write_gpio>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if(config[3] == 0)
 80058f4:	4b08      	ldr	r3, [pc, #32]	; (8005918 <reset_output+0x80>)
 80058f6:	78db      	ldrb	r3, [r3, #3]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <reset_output+0x78>
	{
		d1->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 80058fc:	2200      	movs	r2, #0
 80058fe:	2120      	movs	r1, #32
 8005900:	4806      	ldr	r0, [pc, #24]	; (800591c <reset_output+0x84>)
 8005902:	f000 ff0b 	bl	800671c <write_gpio>
 8005906:	4603      	mov	r3, r0
 8005908:	461a      	mov	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	200002b8 	.word	0x200002b8
 800591c:	40020400 	.word	0x40020400
 8005920:	40020800 	.word	0x40020800

08005924 <read_pinstatus>:

void read_pinstatus(struct data *d2)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	if(config[0]==1)
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <read_pinstatus+0x78>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d108      	bne.n	8005946 <read_pinstatus+0x22>
	{
		d2->GPIO[0]=read_gpio( GPIOB,GPIO_PIN_2);
 8005934:	2104      	movs	r1, #4
 8005936:	481a      	ldr	r0, [pc, #104]	; (80059a0 <read_pinstatus+0x7c>)
 8005938:	f000 fee0 	bl	80066fc <read_gpio>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if(config[1]==1)
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <read_pinstatus+0x78>)
 8005948:	785b      	ldrb	r3, [r3, #1]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d108      	bne.n	8005960 <read_pinstatus+0x3c>
	{
		d2->GPIO[1]=read_gpio(GPIOC,GPIO_PIN_1);
 800594e:	2102      	movs	r1, #2
 8005950:	4814      	ldr	r0, [pc, #80]	; (80059a4 <read_pinstatus+0x80>)
 8005952:	f000 fed3 	bl	80066fc <read_gpio>
 8005956:	4603      	mov	r3, r0
 8005958:	461a      	mov	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	if(config[2]==1)
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <read_pinstatus+0x78>)
 8005962:	789b      	ldrb	r3, [r3, #2]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d108      	bne.n	800597a <read_pinstatus+0x56>
	{
		d2->GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 8005968:	2110      	movs	r1, #16
 800596a:	480d      	ldr	r0, [pc, #52]	; (80059a0 <read_pinstatus+0x7c>)
 800596c:	f000 fec6 	bl	80066fc <read_gpio>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	if(config[3]==1)
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <read_pinstatus+0x78>)
 800597c:	78db      	ldrb	r3, [r3, #3]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d108      	bne.n	8005994 <read_pinstatus+0x70>
	{
		d2->GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 8005982:	2120      	movs	r1, #32
 8005984:	4806      	ldr	r0, [pc, #24]	; (80059a0 <read_pinstatus+0x7c>)
 8005986:	f000 feb9 	bl	80066fc <read_gpio>
 800598a:	4603      	mov	r3, r0
 800598c:	461a      	mov	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	//	 return d->GPIO;
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200002b8 	.word	0x200002b8
 80059a0:	40020400 	.word	0x40020400
 80059a4:	40020800 	.word	0x40020800

080059a8 <extract_data>:


void extract_data()
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 80059ac:	4919      	ldr	r1, [pc, #100]	; (8005a14 <extract_data+0x6c>)
 80059ae:	481a      	ldr	r0, [pc, #104]	; (8005a18 <extract_data+0x70>)
 80059b0:	f001 f900 	bl	8006bb4 <strtok>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4a19      	ldr	r2, [pc, #100]	; (8005a1c <extract_data+0x74>)
 80059b8:	6013      	str	r3, [r2, #0]


	if (token != NULL)
 80059ba:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <extract_data+0x74>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d014      	beq.n	80059ec <extract_data+0x44>
	{
		strncpy(arr1, token, sizeof(arr1) - 1);
 80059c2:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <extract_data+0x74>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2209      	movs	r2, #9
 80059c8:	4619      	mov	r1, r3
 80059ca:	4815      	ldr	r0, [pc, #84]	; (8005a20 <extract_data+0x78>)
 80059cc:	f001 f8de 	bl	8006b8c <strncpy>

		arr1[sizeof(arr1) - 1] = '\0';// Ensure null-termination
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <extract_data+0x78>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr1,arr1);
 80059d6:	4912      	ldr	r1, [pc, #72]	; (8005a20 <extract_data+0x78>)
 80059d8:	4812      	ldr	r0, [pc, #72]	; (8005a24 <extract_data+0x7c>)
 80059da:	f001 f8cf 	bl	8006b7c <strcpy>


		token = strtok(NULL, ",");
 80059de:	490d      	ldr	r1, [pc, #52]	; (8005a14 <extract_data+0x6c>)
 80059e0:	2000      	movs	r0, #0
 80059e2:	f001 f8e7 	bl	8006bb4 <strtok>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <extract_data+0x74>)
 80059ea:	6013      	str	r3, [r2, #0]
	}

	// Get the second token and store it in arr2
	if (token != NULL)
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <extract_data+0x74>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <extract_data+0x68>
	{
		strncpy(arr2, token, sizeof(arr2) - 1);
 80059f4:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <extract_data+0x74>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2209      	movs	r2, #9
 80059fa:	4619      	mov	r1, r3
 80059fc:	480a      	ldr	r0, [pc, #40]	; (8005a28 <extract_data+0x80>)
 80059fe:	f001 f8c5 	bl	8006b8c <strncpy>

		arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <extract_data+0x80>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr2,arr2);
 8005a08:	4907      	ldr	r1, [pc, #28]	; (8005a28 <extract_data+0x80>)
 8005a0a:	4808      	ldr	r0, [pc, #32]	; (8005a2c <extract_data+0x84>)
 8005a0c:	f001 f8b6 	bl	8006b7c <strcpy>

		//token = strtok(NULL, ",");
	}


}
 8005a10:	bf00      	nop
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	08007f48 	.word	0x08007f48
 8005a18:	20000244 	.word	0x20000244
 8005a1c:	200002b0 	.word	0x200002b0
 8005a20:	20000298 	.word	0x20000298
 8005a24:	20000177 	.word	0x20000177
 8005a28:	200002a4 	.word	0x200002a4
 8005a2c:	20000181 	.word	0x20000181

08005a30 <pin_config>:


void pin_config()
{
 8005a30:	b5b0      	push	{r4, r5, r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af04      	add	r7, sp, #16

	if(strcmp(arr1,"B2")==0)
 8005a36:	499f      	ldr	r1, [pc, #636]	; (8005cb4 <pin_config+0x284>)
 8005a38:	489f      	ldr	r0, [pc, #636]	; (8005cb8 <pin_config+0x288>)
 8005a3a:	f7fa fbe9 	bl	8000210 <strcmp>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <pin_config+0x1c>
	{
		switch_val=1;
 8005a44:	4b9d      	ldr	r3, [pc, #628]	; (8005cbc <pin_config+0x28c>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e04b      	b.n	8005ae4 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"C1")==0)
 8005a4c:	499c      	ldr	r1, [pc, #624]	; (8005cc0 <pin_config+0x290>)
 8005a4e:	489a      	ldr	r0, [pc, #616]	; (8005cb8 <pin_config+0x288>)
 8005a50:	f7fa fbde 	bl	8000210 <strcmp>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <pin_config+0x32>
	{
		switch_val=2;
 8005a5a:	4b98      	ldr	r3, [pc, #608]	; (8005cbc <pin_config+0x28c>)
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e040      	b.n	8005ae4 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"B4")==0)
 8005a62:	4998      	ldr	r1, [pc, #608]	; (8005cc4 <pin_config+0x294>)
 8005a64:	4894      	ldr	r0, [pc, #592]	; (8005cb8 <pin_config+0x288>)
 8005a66:	f7fa fbd3 	bl	8000210 <strcmp>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <pin_config+0x48>
	{
		switch_val=3;
 8005a70:	4b92      	ldr	r3, [pc, #584]	; (8005cbc <pin_config+0x28c>)
 8005a72:	2203      	movs	r2, #3
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	e035      	b.n	8005ae4 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"B5")==0)
 8005a78:	4993      	ldr	r1, [pc, #588]	; (8005cc8 <pin_config+0x298>)
 8005a7a:	488f      	ldr	r0, [pc, #572]	; (8005cb8 <pin_config+0x288>)
 8005a7c:	f7fa fbc8 	bl	8000210 <strcmp>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <pin_config+0x5e>
	{
		switch_val=4;
 8005a86:	4b8d      	ldr	r3, [pc, #564]	; (8005cbc <pin_config+0x28c>)
 8005a88:	2204      	movs	r2, #4
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e02a      	b.n	8005ae4 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"ADC1")==0)
 8005a8e:	498f      	ldr	r1, [pc, #572]	; (8005ccc <pin_config+0x29c>)
 8005a90:	4889      	ldr	r0, [pc, #548]	; (8005cb8 <pin_config+0x288>)
 8005a92:	f7fa fbbd 	bl	8000210 <strcmp>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <pin_config+0x74>
	{
		switch_val=5;
 8005a9c:	4b87      	ldr	r3, [pc, #540]	; (8005cbc <pin_config+0x28c>)
 8005a9e:	2205      	movs	r2, #5
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e01f      	b.n	8005ae4 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"RTC")==0)
 8005aa4:	498a      	ldr	r1, [pc, #552]	; (8005cd0 <pin_config+0x2a0>)
 8005aa6:	4884      	ldr	r0, [pc, #528]	; (8005cb8 <pin_config+0x288>)
 8005aa8:	f7fa fbb2 	bl	8000210 <strcmp>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <pin_config+0x8a>
	{
		switch_val=6;
 8005ab2:	4b82      	ldr	r3, [pc, #520]	; (8005cbc <pin_config+0x28c>)
 8005ab4:	2206      	movs	r2, #6
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e014      	b.n	8005ae4 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"DATE")==0)
 8005aba:	4986      	ldr	r1, [pc, #536]	; (8005cd4 <pin_config+0x2a4>)
 8005abc:	487e      	ldr	r0, [pc, #504]	; (8005cb8 <pin_config+0x288>)
 8005abe:	f7fa fba7 	bl	8000210 <strcmp>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <pin_config+0xa0>
	{
		switch_val=7;
 8005ac8:	4b7c      	ldr	r3, [pc, #496]	; (8005cbc <pin_config+0x28c>)
 8005aca:	2207      	movs	r2, #7
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e009      	b.n	8005ae4 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"SCANTIME")==0)
 8005ad0:	4981      	ldr	r1, [pc, #516]	; (8005cd8 <pin_config+0x2a8>)
 8005ad2:	4879      	ldr	r0, [pc, #484]	; (8005cb8 <pin_config+0x288>)
 8005ad4:	f7fa fb9c 	bl	8000210 <strcmp>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <pin_config+0xb4>
	{
		switch_val=8;
 8005ade:	4b77      	ldr	r3, [pc, #476]	; (8005cbc <pin_config+0x28c>)
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	601a      	str	r2, [r3, #0]
	}


	switch(switch_val)
 8005ae4:	4b75      	ldr	r3, [pc, #468]	; (8005cbc <pin_config+0x28c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	f200 81ba 	bhi.w	8005e64 <pin_config+0x434>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <pin_config+0xc8>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b19 	.word	0x08005b19
 8005afc:	08005b5b 	.word	0x08005b5b
 8005b00:	08005b9d 	.word	0x08005b9d
 8005b04:	08005bdf 	.word	0x08005bdf
 8005b08:	08005c21 	.word	0x08005c21
 8005b0c:	08005d0d 	.word	0x08005d0d
 8005b10:	08005da5 	.word	0x08005da5
 8005b14:	08005e45 	.word	0x08005e45
	{

	case 1:
		if(strcmp(arr2,"OUTPUT")==0)
 8005b18:	4970      	ldr	r1, [pc, #448]	; (8005cdc <pin_config+0x2ac>)
 8005b1a:	4871      	ldr	r0, [pc, #452]	; (8005ce0 <pin_config+0x2b0>)
 8005b1c:	f7fa fb78 	bl	8000210 <strcmp>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d108      	bne.n	8005b38 <pin_config+0x108>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,OUTPUT);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2104      	movs	r1, #4
 8005b2a:	486e      	ldr	r0, [pc, #440]	; (8005ce4 <pin_config+0x2b4>)
 8005b2c:	f000 fd30 	bl	8006590 <user_GPIO_Init>
			config[0] = 0;
 8005b30:	4b6d      	ldr	r3, [pc, #436]	; (8005ce8 <pin_config+0x2b8>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
			config[0] = 1;
		}
		break;
 8005b36:	e18e      	b.n	8005e56 <pin_config+0x426>
		else if(strcmp(arr2,"INPUT")==0)
 8005b38:	496c      	ldr	r1, [pc, #432]	; (8005cec <pin_config+0x2bc>)
 8005b3a:	4869      	ldr	r0, [pc, #420]	; (8005ce0 <pin_config+0x2b0>)
 8005b3c:	f7fa fb68 	bl	8000210 <strcmp>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 8187 	bne.w	8005e56 <pin_config+0x426>
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
 8005b48:	2201      	movs	r2, #1
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	4865      	ldr	r0, [pc, #404]	; (8005ce4 <pin_config+0x2b4>)
 8005b4e:	f000 fd1f 	bl	8006590 <user_GPIO_Init>
			config[0] = 1;
 8005b52:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <pin_config+0x2b8>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
		break;
 8005b58:	e17d      	b.n	8005e56 <pin_config+0x426>

	case 2:
		if(strcmp(arr2,"OUTPUT")==0)
 8005b5a:	4960      	ldr	r1, [pc, #384]	; (8005cdc <pin_config+0x2ac>)
 8005b5c:	4860      	ldr	r0, [pc, #384]	; (8005ce0 <pin_config+0x2b0>)
 8005b5e:	f7fa fb57 	bl	8000210 <strcmp>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d108      	bne.n	8005b7a <pin_config+0x14a>
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,OUTPUT);
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	4860      	ldr	r0, [pc, #384]	; (8005cf0 <pin_config+0x2c0>)
 8005b6e:	f000 fd0f 	bl	8006590 <user_GPIO_Init>
			config[1]=0;
 8005b72:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <pin_config+0x2b8>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	705a      	strb	r2, [r3, #1]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
			config[1]=1;
		}
		break;
 8005b78:	e16f      	b.n	8005e5a <pin_config+0x42a>
		else if(strcmp(arr2,"INPUT")==0)
 8005b7a:	495c      	ldr	r1, [pc, #368]	; (8005cec <pin_config+0x2bc>)
 8005b7c:	4858      	ldr	r0, [pc, #352]	; (8005ce0 <pin_config+0x2b0>)
 8005b7e:	f7fa fb47 	bl	8000210 <strcmp>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8168 	bne.w	8005e5a <pin_config+0x42a>
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4858      	ldr	r0, [pc, #352]	; (8005cf0 <pin_config+0x2c0>)
 8005b90:	f000 fcfe 	bl	8006590 <user_GPIO_Init>
			config[1]=1;
 8005b94:	4b54      	ldr	r3, [pc, #336]	; (8005ce8 <pin_config+0x2b8>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	705a      	strb	r2, [r3, #1]
		break;
 8005b9a:	e15e      	b.n	8005e5a <pin_config+0x42a>

	case 3:
		if(strcmp(arr2,"OUTPUT")==0)
 8005b9c:	494f      	ldr	r1, [pc, #316]	; (8005cdc <pin_config+0x2ac>)
 8005b9e:	4850      	ldr	r0, [pc, #320]	; (8005ce0 <pin_config+0x2b0>)
 8005ba0:	f7fa fb36 	bl	8000210 <strcmp>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <pin_config+0x18c>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8005baa:	2200      	movs	r2, #0
 8005bac:	2110      	movs	r1, #16
 8005bae:	484d      	ldr	r0, [pc, #308]	; (8005ce4 <pin_config+0x2b4>)
 8005bb0:	f000 fcee 	bl	8006590 <user_GPIO_Init>
			config[2]=0;
 8005bb4:	4b4c      	ldr	r3, [pc, #304]	; (8005ce8 <pin_config+0x2b8>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	709a      	strb	r2, [r3, #2]
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			config[2]=1;
		}

		break;
 8005bba:	e150      	b.n	8005e5e <pin_config+0x42e>
		else if(strcmp(arr2,"INPUT")==0)
 8005bbc:	494b      	ldr	r1, [pc, #300]	; (8005cec <pin_config+0x2bc>)
 8005bbe:	4848      	ldr	r0, [pc, #288]	; (8005ce0 <pin_config+0x2b0>)
 8005bc0:	f7fa fb26 	bl	8000210 <strcmp>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 8149 	bne.w	8005e5e <pin_config+0x42e>
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8005bcc:	2201      	movs	r2, #1
 8005bce:	2110      	movs	r1, #16
 8005bd0:	4844      	ldr	r0, [pc, #272]	; (8005ce4 <pin_config+0x2b4>)
 8005bd2:	f000 fcdd 	bl	8006590 <user_GPIO_Init>
			config[2]=1;
 8005bd6:	4b44      	ldr	r3, [pc, #272]	; (8005ce8 <pin_config+0x2b8>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	709a      	strb	r2, [r3, #2]
		break;
 8005bdc:	e13f      	b.n	8005e5e <pin_config+0x42e>

	case 4:
		if(strcmp(arr2,"OUTPUT")==0)
 8005bde:	493f      	ldr	r1, [pc, #252]	; (8005cdc <pin_config+0x2ac>)
 8005be0:	483f      	ldr	r0, [pc, #252]	; (8005ce0 <pin_config+0x2b0>)
 8005be2:	f7fa fb15 	bl	8000210 <strcmp>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d108      	bne.n	8005bfe <pin_config+0x1ce>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8005bec:	2200      	movs	r2, #0
 8005bee:	2120      	movs	r1, #32
 8005bf0:	483c      	ldr	r0, [pc, #240]	; (8005ce4 <pin_config+0x2b4>)
 8005bf2:	f000 fccd 	bl	8006590 <user_GPIO_Init>
			config[3]=0;
 8005bf6:	4b3c      	ldr	r3, [pc, #240]	; (8005ce8 <pin_config+0x2b8>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	70da      	strb	r2, [r3, #3]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			config[3]=1;
		}
		break;
 8005bfc:	e131      	b.n	8005e62 <pin_config+0x432>
		else if(strcmp(arr2,"INPUT")==0)
 8005bfe:	493b      	ldr	r1, [pc, #236]	; (8005cec <pin_config+0x2bc>)
 8005c00:	4837      	ldr	r0, [pc, #220]	; (8005ce0 <pin_config+0x2b0>)
 8005c02:	f7fa fb05 	bl	8000210 <strcmp>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f040 812a 	bne.w	8005e62 <pin_config+0x432>
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8005c0e:	2201      	movs	r2, #1
 8005c10:	2120      	movs	r1, #32
 8005c12:	4834      	ldr	r0, [pc, #208]	; (8005ce4 <pin_config+0x2b4>)
 8005c14:	f000 fcbc 	bl	8006590 <user_GPIO_Init>
			config[3]=1;
 8005c18:	4b33      	ldr	r3, [pc, #204]	; (8005ce8 <pin_config+0x2b8>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	70da      	strb	r2, [r3, #3]
		break;
 8005c1e:	e120      	b.n	8005e62 <pin_config+0x432>

	case 5:
		if(strcmp(arr2,"CH1")==0)
 8005c20:	4934      	ldr	r1, [pc, #208]	; (8005cf4 <pin_config+0x2c4>)
 8005c22:	482f      	ldr	r0, [pc, #188]	; (8005ce0 <pin_config+0x2b0>)
 8005c24:	f7fa faf4 	bl	8000210 <strcmp>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <pin_config+0x20a>
		{
			ADC_select_CH1();
 8005c2e:	f000 f9dd 	bl	8005fec <ADC_select_CH1>
			adcChnlChecker[0] = 1;
 8005c32:	4b31      	ldr	r3, [pc, #196]	; (8005cf8 <pin_config+0x2c8>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			__NOP();
		}
		break;
 8005c38:	e114      	b.n	8005e64 <pin_config+0x434>
		else if(strcmp(arr2,"CH2")==0)
 8005c3a:	4930      	ldr	r1, [pc, #192]	; (8005cfc <pin_config+0x2cc>)
 8005c3c:	4828      	ldr	r0, [pc, #160]	; (8005ce0 <pin_config+0x2b0>)
 8005c3e:	f7fa fae7 	bl	8000210 <strcmp>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <pin_config+0x224>
			ADC_select_CH2();
 8005c48:	f000 f9ea 	bl	8006020 <ADC_select_CH2>
			adcChnlChecker[1] = 1;
 8005c4c:	4b2a      	ldr	r3, [pc, #168]	; (8005cf8 <pin_config+0x2c8>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	705a      	strb	r2, [r3, #1]
		break;
 8005c52:	e107      	b.n	8005e64 <pin_config+0x434>
		else if(strcmp(arr2,"CH3")==0)
 8005c54:	492a      	ldr	r1, [pc, #168]	; (8005d00 <pin_config+0x2d0>)
 8005c56:	4822      	ldr	r0, [pc, #136]	; (8005ce0 <pin_config+0x2b0>)
 8005c58:	f7fa fada 	bl	8000210 <strcmp>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <pin_config+0x23e>
			ADC_select_CH3();
 8005c62:	f000 f9f7 	bl	8006054 <ADC_select_CH3>
			adcChnlChecker[2] = 1;
 8005c66:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <pin_config+0x2c8>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	709a      	strb	r2, [r3, #2]
		break;
 8005c6c:	e0fa      	b.n	8005e64 <pin_config+0x434>
		else if(strcmp(arr2,"CH4")==0)
 8005c6e:	4925      	ldr	r1, [pc, #148]	; (8005d04 <pin_config+0x2d4>)
 8005c70:	481b      	ldr	r0, [pc, #108]	; (8005ce0 <pin_config+0x2b0>)
 8005c72:	f7fa facd 	bl	8000210 <strcmp>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <pin_config+0x258>
			ADC_select_CH4();
 8005c7c:	f000 fa04 	bl	8006088 <ADC_select_CH4>
			adcChnlChecker[3] = 1;
 8005c80:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <pin_config+0x2c8>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	70da      	strb	r2, [r3, #3]
		break;
 8005c86:	e0ed      	b.n	8005e64 <pin_config+0x434>
		else if(strcmp(arr2,"DB2")==0)
 8005c88:	491f      	ldr	r1, [pc, #124]	; (8005d08 <pin_config+0x2d8>)
 8005c8a:	4815      	ldr	r0, [pc, #84]	; (8005ce0 <pin_config+0x2b0>)
 8005c8c:	f7fa fac0 	bl	8000210 <strcmp>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10c      	bne.n	8005cb0 <pin_config+0x280>
			adcChnlChecker[0] = 0;
 8005c96:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <pin_config+0x2c8>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
			adcChnlChecker[1] = 0;
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <pin_config+0x2c8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	705a      	strb	r2, [r3, #1]
			adcChnlChecker[2] = 0;
 8005ca2:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <pin_config+0x2c8>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	709a      	strb	r2, [r3, #2]
			adcChnlChecker[3] = 0;
 8005ca8:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <pin_config+0x2c8>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	70da      	strb	r2, [r3, #3]
		break;
 8005cae:	e0d9      	b.n	8005e64 <pin_config+0x434>
			__NOP();
 8005cb0:	bf00      	nop
		break;
 8005cb2:	e0d7      	b.n	8005e64 <pin_config+0x434>
 8005cb4:	08007f4c 	.word	0x08007f4c
 8005cb8:	20000298 	.word	0x20000298
 8005cbc:	20000240 	.word	0x20000240
 8005cc0:	08007f50 	.word	0x08007f50
 8005cc4:	08007f54 	.word	0x08007f54
 8005cc8:	08007f58 	.word	0x08007f58
 8005ccc:	08007f5c 	.word	0x08007f5c
 8005cd0:	08007f64 	.word	0x08007f64
 8005cd4:	08007f68 	.word	0x08007f68
 8005cd8:	08007f70 	.word	0x08007f70
 8005cdc:	08007f7c 	.word	0x08007f7c
 8005ce0:	200002a4 	.word	0x200002a4
 8005ce4:	40020400 	.word	0x40020400
 8005ce8:	200002b8 	.word	0x200002b8
 8005cec:	08007f84 	.word	0x08007f84
 8005cf0:	40020800 	.word	0x40020800
 8005cf4:	08007f8c 	.word	0x08007f8c
 8005cf8:	200002bc 	.word	0x200002bc
 8005cfc:	08007f90 	.word	0x08007f90
 8005d00:	08007f94 	.word	0x08007f94
 8005d04:	08007f98 	.word	0x08007f98
 8005d08:	08007f9c 	.word	0x08007f9c

	case 6:

		token = strtok(arr2, ":");
 8005d0c:	4957      	ldr	r1, [pc, #348]	; (8005e6c <pin_config+0x43c>)
 8005d0e:	4858      	ldr	r0, [pc, #352]	; (8005e70 <pin_config+0x440>)
 8005d10:	f000 ff50 	bl	8006bb4 <strtok>
 8005d14:	4603      	mov	r3, r0
 8005d16:	4a57      	ldr	r2, [pc, #348]	; (8005e74 <pin_config+0x444>)
 8005d18:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8005d1a:	4b56      	ldr	r3, [pc, #344]	; (8005e74 <pin_config+0x444>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00f      	beq.n	8005d42 <pin_config+0x312>
		{
			d.hour = atoi(token);
 8005d22:	4b54      	ldr	r3, [pc, #336]	; (8005e74 <pin_config+0x444>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fd9e 	bl	8006868 <atoi>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b51      	ldr	r3, [pc, #324]	; (8005e78 <pin_config+0x448>)
 8005d32:	709a      	strb	r2, [r3, #2]
			token = strtok(NULL, ":");
 8005d34:	494d      	ldr	r1, [pc, #308]	; (8005e6c <pin_config+0x43c>)
 8005d36:	2000      	movs	r0, #0
 8005d38:	f000 ff3c 	bl	8006bb4 <strtok>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4a4d      	ldr	r2, [pc, #308]	; (8005e74 <pin_config+0x444>)
 8005d40:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8005d42:	4b4c      	ldr	r3, [pc, #304]	; (8005e74 <pin_config+0x444>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00f      	beq.n	8005d6a <pin_config+0x33a>
		{
			d.minutes = atoi(token);
 8005d4a:	4b4a      	ldr	r3, [pc, #296]	; (8005e74 <pin_config+0x444>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fd8a 	bl	8006868 <atoi>
 8005d54:	4603      	mov	r3, r0
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <pin_config+0x448>)
 8005d5a:	705a      	strb	r2, [r3, #1]
			token = strtok(NULL, ":");
 8005d5c:	4943      	ldr	r1, [pc, #268]	; (8005e6c <pin_config+0x43c>)
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f000 ff28 	bl	8006bb4 <strtok>
 8005d64:	4603      	mov	r3, r0
 8005d66:	4a43      	ldr	r2, [pc, #268]	; (8005e74 <pin_config+0x444>)
 8005d68:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8005d6a:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <pin_config+0x444>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <pin_config+0x354>
		{
			d.seconds = atoi(token);
 8005d72:	4b40      	ldr	r3, [pc, #256]	; (8005e74 <pin_config+0x444>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fd76 	bl	8006868 <atoi>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	4b3d      	ldr	r3, [pc, #244]	; (8005e78 <pin_config+0x448>)
 8005d82:	701a      	strb	r2, [r3, #0]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,0,0,0);
 8005d84:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <pin_config+0x448>)
 8005d86:	7818      	ldrb	r0, [r3, #0]
 8005d88:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <pin_config+0x448>)
 8005d8a:	7859      	ldrb	r1, [r3, #1]
 8005d8c:	4b3a      	ldr	r3, [pc, #232]	; (8005e78 <pin_config+0x448>)
 8005d8e:	789a      	ldrb	r2, [r3, #2]
 8005d90:	2300      	movs	r3, #0
 8005d92:	9302      	str	r3, [sp, #8]
 8005d94:	2300      	movs	r3, #0
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f7ff fc5f 	bl	8005660 <set_time>

		break;
 8005da2:	e05f      	b.n	8005e64 <pin_config+0x434>

	case 7:

		token = strtok(arr2, ":");
 8005da4:	4931      	ldr	r1, [pc, #196]	; (8005e6c <pin_config+0x43c>)
 8005da6:	4832      	ldr	r0, [pc, #200]	; (8005e70 <pin_config+0x440>)
 8005da8:	f000 ff04 	bl	8006bb4 <strtok>
 8005dac:	4603      	mov	r3, r0
 8005dae:	4a31      	ldr	r2, [pc, #196]	; (8005e74 <pin_config+0x444>)
 8005db0:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8005db2:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <pin_config+0x444>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00f      	beq.n	8005dda <pin_config+0x3aa>
		{
			d.dayofmonth = atoi(token);
 8005dba:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <pin_config+0x444>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fd52 	bl	8006868 <atoi>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <pin_config+0x448>)
 8005dca:	711a      	strb	r2, [r3, #4]
			token = strtok(NULL, ":");
 8005dcc:	4927      	ldr	r1, [pc, #156]	; (8005e6c <pin_config+0x43c>)
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f000 fef0 	bl	8006bb4 <strtok>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	4a27      	ldr	r2, [pc, #156]	; (8005e74 <pin_config+0x444>)
 8005dd8:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8005dda:	4b26      	ldr	r3, [pc, #152]	; (8005e74 <pin_config+0x444>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00f      	beq.n	8005e02 <pin_config+0x3d2>
		{
			d.month = atoi(token);
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <pin_config+0x444>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fd3e 	bl	8006868 <atoi>
 8005dec:	4603      	mov	r3, r0
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b21      	ldr	r3, [pc, #132]	; (8005e78 <pin_config+0x448>)
 8005df2:	715a      	strb	r2, [r3, #5]
			token = strtok(NULL, ":");
 8005df4:	491d      	ldr	r1, [pc, #116]	; (8005e6c <pin_config+0x43c>)
 8005df6:	2000      	movs	r0, #0
 8005df8:	f000 fedc 	bl	8006bb4 <strtok>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <pin_config+0x444>)
 8005e00:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <pin_config+0x444>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <pin_config+0x3ec>
		{
			d.year = atoi(token);
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <pin_config+0x444>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fd2a 	bl	8006868 <atoi>
 8005e14:	4603      	mov	r3, r0
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <pin_config+0x448>)
 8005e1a:	719a      	strb	r2, [r3, #6]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,d.dayofmonth,d.month,d.year);
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <pin_config+0x448>)
 8005e1e:	7818      	ldrb	r0, [r3, #0]
 8005e20:	4b15      	ldr	r3, [pc, #84]	; (8005e78 <pin_config+0x448>)
 8005e22:	785c      	ldrb	r4, [r3, #1]
 8005e24:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <pin_config+0x448>)
 8005e26:	789d      	ldrb	r5, [r3, #2]
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <pin_config+0x448>)
 8005e2a:	791b      	ldrb	r3, [r3, #4]
 8005e2c:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <pin_config+0x448>)
 8005e2e:	7952      	ldrb	r2, [r2, #5]
 8005e30:	4911      	ldr	r1, [pc, #68]	; (8005e78 <pin_config+0x448>)
 8005e32:	7989      	ldrb	r1, [r1, #6]
 8005e34:	9102      	str	r1, [sp, #8]
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	4621      	mov	r1, r4
 8005e40:	f7ff fc0e 	bl	8005660 <set_time>


	case 8:
		d.scan_time = (uint8_t)atoi(arr2);
 8005e44:	480a      	ldr	r0, [pc, #40]	; (8005e70 <pin_config+0x440>)
 8005e46:	f000 fd0f 	bl	8006868 <atoi>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <pin_config+0x448>)
 8005e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005e54:	e006      	b.n	8005e64 <pin_config+0x434>
		break;
 8005e56:	bf00      	nop
 8005e58:	e004      	b.n	8005e64 <pin_config+0x434>
		break;
 8005e5a:	bf00      	nop
 8005e5c:	e002      	b.n	8005e64 <pin_config+0x434>
		break;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <pin_config+0x434>
		break;
 8005e62:	bf00      	nop

	}
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bdb0      	pop	{r4, r5, r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	08007fa0 	.word	0x08007fa0
 8005e70:	200002a4 	.word	0x200002a4
 8005e74:	200002b0 	.word	0x200002b0
 8005e78:	20000170 	.word	0x20000170

08005e7c <terminal>:
extern char CH4[10];



void terminal(struct data *d)
{
 8005e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7e:	b08f      	sub	sp, #60	; 0x3c
 8005e80:	af0c      	add	r7, sp, #48	; 0x30
 8005e82:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"TIME:%02d:%02d:%02d DATE:%02d/%02d/%02d CH1:%s CH2:%s CH3:%s CH4:%s GPIO1:%s GPIO2:%s GPIO3:%s GPIO4:%s\r\n",d->hour,d->minutes,d->seconds,d->dayofmonth,d->month,d->year,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	789b      	ldrb	r3, [r3, #2]
 8005e88:	469c      	mov	ip, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	469e      	mov	lr, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	461c      	mov	r4, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	791b      	ldrb	r3, [r3, #4]
 8005e9a:	461d      	mov	r5, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	795b      	ldrb	r3, [r3, #5]
 8005ea0:	461e      	mov	r6, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	799b      	ldrb	r3, [r3, #6]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3331      	adds	r3, #49	; 0x31
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	3236      	adds	r2, #54	; 0x36
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	313b      	adds	r1, #59	; 0x3b
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	3040      	adds	r0, #64	; 0x40
 8005eb8:	900b      	str	r0, [sp, #44]	; 0x2c
 8005eba:	910a      	str	r1, [sp, #40]	; 0x28
 8005ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ebe:	9308      	str	r3, [sp, #32]
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <terminal+0x78>)
 8005ec2:	9307      	str	r3, [sp, #28]
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <terminal+0x7c>)
 8005ec6:	9306      	str	r3, [sp, #24]
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <terminal+0x80>)
 8005eca:	9305      	str	r3, [sp, #20]
 8005ecc:	4b0c      	ldr	r3, [pc, #48]	; (8005f00 <terminal+0x84>)
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	9602      	str	r6, [sp, #8]
 8005ed6:	9501      	str	r5, [sp, #4]
 8005ed8:	9400      	str	r4, [sp, #0]
 8005eda:	4673      	mov	r3, lr
 8005edc:	4662      	mov	r2, ip
 8005ede:	4909      	ldr	r1, [pc, #36]	; (8005f04 <terminal+0x88>)
 8005ee0:	4809      	ldr	r0, [pc, #36]	; (8005f08 <terminal+0x8c>)
 8005ee2:	f000 fe2b 	bl	8006b3c <siprintf>
//	sprintf((char*)buf2,"%02d:%02d:%02d\r\n",d->dayofmonth,d->month,d->year);
	uart3_tx(buf);
 8005ee6:	4808      	ldr	r0, [pc, #32]	; (8005f08 <terminal+0x8c>)
 8005ee8:	f000 fc2c 	bl	8006744 <uart3_tx>
//	HAL_Delay(100);

}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef4:	20000230 	.word	0x20000230
 8005ef8:	20000224 	.word	0x20000224
 8005efc:	20000218 	.word	0x20000218
 8005f00:	2000020c 	.word	0x2000020c
 8005f04:	08007fa4 	.word	0x08007fa4
 8005f08:	200002c0 	.word	0x200002c0

08005f0c <USER_ADC1_Init>:
//	 */
//	HAL_RCCEx_EnableMSIPLLMode();
//}

void USER_ADC1_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
	//
	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8005f10:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f12:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <USER_ADC1_Init+0x6c>)
 8005f14:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005f16:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f1c:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f1e:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f30:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f40:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <USER_ADC1_Init+0x70>)
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 4;
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005f50:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f5e:	4805      	ldr	r0, [pc, #20]	; (8005f74 <USER_ADC1_Init+0x68>)
 8005f60:	f7fb fa7e 	bl	8001460 <HAL_ADC_Init>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <USER_ADC1_Init+0x62>
	  {
	    Error_Handler();
 8005f6a:	f7fa fe88 	bl	8000c7e <Error_Handler>
//	  }
	  /* USER CODE BEGIN ADC1_Init 2 */
	//
	  /* USER CODE END ADC1_Init 2 */

	}
 8005f6e:	bf00      	nop
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000398 	.word	0x20000398
 8005f78:	40012000 	.word	0x40012000
 8005f7c:	0f000001 	.word	0x0f000001

08005f80 <USER_GPIO_Init>:


void USER_GPIO_Init(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	6313      	str	r3, [r2, #48]	; 0x30
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	4a0f      	ldr	r2, [pc, #60]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005fac:	f043 0301 	orr.w	r3, r3, #1
 8005fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <USER_GPIO_Init+0x68>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005fda:	bf00      	nop
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40023800 	.word	0x40023800

08005fec <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
//		Error_Handler();
//	}

//	  ADC_ChannelConfTypeDef sConfig = {0};

	sConfig.Channel = ADC_CHANNEL_5;
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <ADC_select_CH1+0x2c>)
 8005ff2:	2205      	movs	r2, #5
 8005ff4:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <ADC_select_CH1+0x2c>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <ADC_select_CH1+0x2c>)
 8005ffe:	2207      	movs	r2, #7
 8006000:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006002:	4905      	ldr	r1, [pc, #20]	; (8006018 <ADC_select_CH1+0x2c>)
 8006004:	4805      	ldr	r0, [pc, #20]	; (800601c <ADC_select_CH1+0x30>)
 8006006:	f7fb fc0d 	bl	8001824 <HAL_ADC_ConfigChannel>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <ADC_select_CH1+0x28>
		  {
		    Error_Handler();
 8006010:	f7fa fe35 	bl	8000c7e <Error_Handler>
		  }
}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000388 	.word	0x20000388
 800601c:	20000398 	.word	0x20000398

08006020 <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
//	sConfig.Offset = 0;
//	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}
	 sConfig.Channel = ADC_CHANNEL_6;
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <ADC_select_CH2+0x2c>)
 8006026:	2206      	movs	r2, #6
 8006028:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 2;
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <ADC_select_CH2+0x2c>)
 800602c:	2202      	movs	r2, #2
 800602e:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <ADC_select_CH2+0x2c>)
 8006032:	2207      	movs	r2, #7
 8006034:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006036:	4905      	ldr	r1, [pc, #20]	; (800604c <ADC_select_CH2+0x2c>)
 8006038:	4805      	ldr	r0, [pc, #20]	; (8006050 <ADC_select_CH2+0x30>)
 800603a:	f7fb fbf3 	bl	8001824 <HAL_ADC_ConfigChannel>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <ADC_select_CH2+0x28>
		  {
		    Error_Handler();
 8006044:	f7fa fe1b 	bl	8000c7e <Error_Handler>
		  }
}
 8006048:	bf00      	nop
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000388 	.word	0x20000388
 8006050:	20000398 	.word	0x20000398

08006054 <ADC_select_CH3>:

void ADC_select_CH3(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
//	{
//		Error_Handler();
//	}


	  sConfig.Channel = ADC_CHANNEL_9;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <ADC_select_CH3+0x2c>)
 800605a:	2209      	movs	r2, #9
 800605c:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 3;
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <ADC_select_CH3+0x2c>)
 8006060:	2203      	movs	r2, #3
 8006062:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <ADC_select_CH3+0x2c>)
 8006066:	2207      	movs	r2, #7
 8006068:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800606a:	4905      	ldr	r1, [pc, #20]	; (8006080 <ADC_select_CH3+0x2c>)
 800606c:	4805      	ldr	r0, [pc, #20]	; (8006084 <ADC_select_CH3+0x30>)
 800606e:	f7fb fbd9 	bl	8001824 <HAL_ADC_ConfigChannel>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <ADC_select_CH3+0x28>
		  {
		    Error_Handler();
 8006078:	f7fa fe01 	bl	8000c7e <Error_Handler>
		  }
}
 800607c:	bf00      	nop
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000388 	.word	0x20000388
 8006084:	20000398 	.word	0x20000398

08006088 <ADC_select_CH4>:

void ADC_select_CH4(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
//	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}

	sConfig.Channel = ADC_CHANNEL_10;
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <ADC_select_CH4+0x2c>)
 800608e:	220a      	movs	r2, #10
 8006090:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 4;
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <ADC_select_CH4+0x2c>)
 8006094:	2204      	movs	r2, #4
 8006096:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <ADC_select_CH4+0x2c>)
 800609a:	2207      	movs	r2, #7
 800609c:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800609e:	4905      	ldr	r1, [pc, #20]	; (80060b4 <ADC_select_CH4+0x2c>)
 80060a0:	4805      	ldr	r0, [pc, #20]	; (80060b8 <ADC_select_CH4+0x30>)
 80060a2:	f7fb fbbf 	bl	8001824 <HAL_ADC_ConfigChannel>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <ADC_select_CH4+0x28>
		  {
		    Error_Handler();
 80060ac:	f7fa fde7 	bl	8000c7e <Error_Handler>
		  }
}
 80060b0:	bf00      	nop
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000388 	.word	0x20000388
 80060b8:	20000398 	.word	0x20000398

080060bc <adc_start>:
//}



void adc_start(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80060c0:	4802      	ldr	r0, [pc, #8]	; (80060cc <adc_start+0x10>)
 80060c2:	f7fb fa11 	bl	80014e8 <HAL_ADC_Start>
}
 80060c6:	bf00      	nop
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000398 	.word	0x20000398

080060d0 <adc_conversion>:

void adc_conversion(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 80060d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80060d8:	4802      	ldr	r0, [pc, #8]	; (80060e4 <adc_conversion+0x14>)
 80060da:	f7fb fb0a 	bl	80016f2 <HAL_ADC_PollForConversion>
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000398 	.word	0x20000398

080060e8 <adc_value>:

uint16_t adc_value(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 80060ec:	4803      	ldr	r0, [pc, #12]	; (80060fc <adc_value+0x14>)
 80060ee:	f7fb fb8b 	bl	8001808 <HAL_ADC_GetValue>
 80060f2:	4603      	mov	r3, r0
 80060f4:	b29b      	uxth	r3, r3
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000398 	.word	0x20000398

08006100 <adc_stop>:

void adc_stop(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8006104:	4802      	ldr	r0, [pc, #8]	; (8006110 <adc_stop+0x10>)
 8006106:	f7fb fac1 	bl	800168c <HAL_ADC_Stop>
}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000398 	.word	0x20000398

08006114 <UART4_Init>:

extern UART_HandleTypeDef huart4;


void UART4_Init(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
	  /* USER CODE END UART4_Init 0 */

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  huart4.Instance = UART4;
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <UART4_Init+0x4c>)
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <UART4_Init+0x50>)
 800611c:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 115200;
 800611e:	4b10      	ldr	r3, [pc, #64]	; (8006160 <UART4_Init+0x4c>)
 8006120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006124:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <UART4_Init+0x4c>)
 8006128:	2200      	movs	r2, #0
 800612a:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 800612c:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <UART4_Init+0x4c>)
 800612e:	2200      	movs	r2, #0
 8006130:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8006132:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <UART4_Init+0x4c>)
 8006134:	2200      	movs	r2, #0
 8006136:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <UART4_Init+0x4c>)
 800613a:	220c      	movs	r2, #12
 800613c:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <UART4_Init+0x4c>)
 8006140:	2200      	movs	r2, #0
 8006142:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <UART4_Init+0x4c>)
 8006146:	2200      	movs	r2, #0
 8006148:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 800614a:	4805      	ldr	r0, [pc, #20]	; (8006160 <UART4_Init+0x4c>)
 800614c:	f7fd feaa 	bl	8003ea4 <HAL_UART_Init>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <UART4_Init+0x46>
	  {
	    Error_Handler();
 8006156:	f7fa fd92 	bl	8000c7e <Error_Handler>
	  }
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */

	}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200000e0 	.word	0x200000e0
 8006164:	40004c00 	.word	0x40004c00

08006168 <GsmCommands>:




void GsmCommands(uint8_t* cmd)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart4, cmd, strlen((char*)cmd));
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fa f857 	bl	8000224 <strlen>
 8006176:	4603      	mov	r3, r0
 8006178:	b29b      	uxth	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4807      	ldr	r0, [pc, #28]	; (800619c <GsmCommands+0x34>)
 8006180:	f7fe f811 	bl	80041a6 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart4, Reply, max_buf_len);
 8006184:	2264      	movs	r2, #100	; 0x64
 8006186:	4906      	ldr	r1, [pc, #24]	; (80061a0 <GsmCommands+0x38>)
 8006188:	4804      	ldr	r0, [pc, #16]	; (800619c <GsmCommands+0x34>)
 800618a:	f7fe f851 	bl	8004230 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 800618e:	2064      	movs	r0, #100	; 0x64
 8006190:	f7fb f942 	bl	8001418 <HAL_Delay>

}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200000e0 	.word	0x200000e0
 80061a0:	200003e0 	.word	0x200003e0

080061a4 <DataToCloud>:

}


void DataToCloud(char* Time,char* Date,char* Ch1,char* Ch2,char* Ch3,char* Ch4,char* D1,char* D2,char* D3,char* D4)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80061aa:	af0a      	add	r7, sp, #40	; 0x28
 80061ac:	f507 740c 	add.w	r4, r7, #560	; 0x230
 80061b0:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 80061b4:	6020      	str	r0, [r4, #0]
 80061b6:	f507 700c 	add.w	r0, r7, #560	; 0x230
 80061ba:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 80061be:	6001      	str	r1, [r0, #0]
 80061c0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80061c4:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 80061c8:	600a      	str	r2, [r1, #0]
 80061ca:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80061ce:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 80061d2:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 80061d4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80061d8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	f000 f8a9 	bl	8006334 <url_encode>
 80061e2:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	char* encoded_Date = url_encode(Date);
 80061e6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80061ea:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80061ee:	6818      	ldr	r0, [r3, #0]
 80061f0:	f000 f8a0 	bl	8006334 <url_encode>
 80061f4:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	char* encoded_Ch1 = url_encode(Ch1);
 80061f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80061fc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f000 f897 	bl	8006334 <url_encode>
 8006206:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch2 = url_encode(Ch2);
 800620a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800620e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	f000 f88e 	bl	8006334 <url_encode>
 8006218:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch3 = url_encode(Ch3);
 800621c:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8006220:	f000 f888 	bl	8006334 <url_encode>
 8006224:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch4 = url_encode(Ch4);
 8006228:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800622c:	f000 f882 	bl	8006334 <url_encode>
 8006230:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_D1 = url_encode(D1);
 8006234:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006238:	f000 f87c 	bl	8006334 <url_encode>
 800623c:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D2 = url_encode(D2);
 8006240:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8006244:	f000 f876 	bl	8006334 <url_encode>
 8006248:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D3 = url_encode(D3);
 800624c:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8006250:	f000 f870 	bl	8006334 <url_encode>
 8006254:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D4 = url_encode(D4);
 8006258:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 800625c:	f000 f86a 	bl	8006334 <url_encode>
 8006260:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8006264:	482f      	ldr	r0, [pc, #188]	; (8006324 <DataToCloud+0x180>)
 8006266:	f7ff ff7f 	bl	8006168 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800626a:	482f      	ldr	r0, [pc, #188]	; (8006328 <DataToCloud+0x184>)
 800626c:	f7ff ff7c 	bl	8006168 <GsmCommands>


	snprintf((char*)AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbz-U5OxlgcTFUr2G3_0L8nzjVQorKuKofxDdJdbM2PCGmTUH6f1J4gkkEfKxTKe0T7a/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s&field10=%s\"\r\n",encoded_Time, encoded_Date, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8006270:	f107 0014 	add.w	r0, r7, #20
 8006274:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8006278:	9308      	str	r3, [sp, #32]
 800627a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006284:	9306      	str	r3, [sp, #24]
 8006286:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8006296:	9303      	str	r3, [sp, #12]
 8006298:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800629c:	9302      	str	r3, [sp, #8]
 800629e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80062ae:	4a1f      	ldr	r2, [pc, #124]	; (800632c <DataToCloud+0x188>)
 80062b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062b4:	f000 fc0e 	bl	8006ad4 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff ff53 	bl	8006168 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 80062c2:	481b      	ldr	r0, [pc, #108]	; (8006330 <DataToCloud+0x18c>)
 80062c4:	f7ff ff50 	bl	8006168 <GsmCommands>

	free(encoded_Time);
 80062c8:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80062cc:	f000 fb02 	bl	80068d4 <free>
	free(encoded_Date);
 80062d0:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80062d4:	f000 fafe 	bl	80068d4 <free>
	free(encoded_Ch1);
 80062d8:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80062dc:	f000 fafa 	bl	80068d4 <free>
	free(encoded_Ch2);
 80062e0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80062e4:	f000 faf6 	bl	80068d4 <free>
	free(encoded_Ch3);
 80062e8:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80062ec:	f000 faf2 	bl	80068d4 <free>
	free(encoded_Ch4);
 80062f0:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80062f4:	f000 faee 	bl	80068d4 <free>
	free(encoded_D1);
 80062f8:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80062fc:	f000 faea 	bl	80068d4 <free>
	free(encoded_D2);
 8006300:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8006304:	f000 fae6 	bl	80068d4 <free>
	free(encoded_D3);
 8006308:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800630c:	f000 fae2 	bl	80068d4 <free>
	free(encoded_D4);
 8006310:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8006314:	f000 fade 	bl	80068d4 <free>

}
 8006318:	bf00      	nop
 800631a:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800631e:	46bd      	mov	sp, r7
 8006320:	bd90      	pop	{r4, r7, pc}
 8006322:	bf00      	nop
 8006324:	08008088 	.word	0x08008088
 8006328:	08008098 	.word	0x08008098
 800632c:	080080a8 	.word	0x080080a8
 8006330:	08008194 	.word	0x08008194

08006334 <url_encode>:



char* url_encode(const char* str)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 800633c:	4b2f      	ldr	r3, [pc, #188]	; (80063fc <url_encode+0xc8>)
 800633e:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7f9 ff6f 	bl	8000224 <strlen>
 8006346:	4602      	mov	r2, r0
 8006348:	4613      	mov	r3, r2
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	4413      	add	r3, r2
 800634e:	3301      	adds	r3, #1
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fab7 	bl	80068c4 <malloc>
 8006356:	4603      	mov	r3, r0
 8006358:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	617b      	str	r3, [r7, #20]

	while (*str) {
 800635e:	e040      	b.n	80063e2 <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a26      	ldr	r2, [pc, #152]	; (8006400 <url_encode+0xcc>)
 8006368:	4413      	add	r3, r2
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10f      	bne.n	8006394 <url_encode+0x60>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b2d      	cmp	r3, #45	; 0x2d
 800637a:	d00b      	beq.n	8006394 <url_encode+0x60>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b5f      	cmp	r3, #95	; 0x5f
 8006382:	d007      	beq.n	8006394 <url_encode+0x60>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b2e      	cmp	r3, #46	; 0x2e
 800638a:	d003      	beq.n	8006394 <url_encode+0x60>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b7e      	cmp	r3, #126	; 0x7e
 8006392:	d106      	bne.n	80063a2 <url_encode+0x6e>
			*ptr++ = *str;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	617a      	str	r2, [r7, #20]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	e01c      	b.n	80063dc <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	617a      	str	r2, [r7, #20]
 80063a8:	2225      	movs	r2, #37	; 0x25
 80063aa:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	441a      	add	r2, r3
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	6179      	str	r1, [r7, #20]
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	441a      	add	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	1c59      	adds	r1, r3, #1
 80063d6:	6179      	str	r1, [r7, #20]
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	701a      	strb	r2, [r3, #0]
		}
		str++;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3301      	adds	r3, #1
 80063e0:	607b      	str	r3, [r7, #4]
	while (*str) {
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1ba      	bne.n	8006360 <url_encode+0x2c>
	}
	*ptr = '\0';
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
	return encoded;
 80063f0:	68fb      	ldr	r3, [r7, #12]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	080081a8 	.word	0x080081a8
 8006400:	080081d4 	.word	0x080081d4

08006404 <USER_I2C1_Init>:




void USER_I2C1_Init()
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006408:	4b12      	ldr	r3, [pc, #72]	; (8006454 <USER_I2C1_Init+0x50>)
 800640a:	4a13      	ldr	r2, [pc, #76]	; (8006458 <USER_I2C1_Init+0x54>)
 800640c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <USER_I2C1_Init+0x50>)
 8006410:	4a12      	ldr	r2, [pc, #72]	; (800645c <USER_I2C1_Init+0x58>)
 8006412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006414:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <USER_I2C1_Init+0x50>)
 8006416:	2200      	movs	r2, #0
 8006418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800641a:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <USER_I2C1_Init+0x50>)
 800641c:	2200      	movs	r2, #0
 800641e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006420:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <USER_I2C1_Init+0x50>)
 8006422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006426:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006428:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <USER_I2C1_Init+0x50>)
 800642a:	2200      	movs	r2, #0
 800642c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <USER_I2C1_Init+0x50>)
 8006430:	2200      	movs	r2, #0
 8006432:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006434:	4b07      	ldr	r3, [pc, #28]	; (8006454 <USER_I2C1_Init+0x50>)
 8006436:	2200      	movs	r2, #0
 8006438:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <USER_I2C1_Init+0x50>)
 800643c:	2200      	movs	r2, #0
 800643e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006440:	4804      	ldr	r0, [pc, #16]	; (8006454 <USER_I2C1_Init+0x50>)
 8006442:	f7fb ff87 	bl	8002354 <HAL_I2C_Init>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <USER_I2C1_Init+0x4c>
  {
    Error_Handler();
 800644c:	f7fa fc17 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006450:	bf00      	nop
 8006452:	bd80      	pop	{r7, pc}
 8006454:	2000008c 	.word	0x2000008c
 8006458:	40005400 	.word	0x40005400
 800645c:	000186a0 	.word	0x000186a0

08006460 <SystemClock_Config>:
 extern UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t GPIO[4];

void SystemClock_Config(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b094      	sub	sp, #80	; 0x50
 8006464:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006466:	f107 031c 	add.w	r3, r7, #28
 800646a:	2234      	movs	r2, #52	; 0x34
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fa38 	bl	80068e4 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006474:	f107 0308 	add.w	r3, r7, #8
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8006484:	2300      	movs	r3, #0
 8006486:	607b      	str	r3, [r7, #4]
 8006488:	4b2a      	ldr	r3, [pc, #168]	; (8006534 <SystemClock_Config+0xd4>)
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	4a29      	ldr	r2, [pc, #164]	; (8006534 <SystemClock_Config+0xd4>)
 800648e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006492:	6413      	str	r3, [r2, #64]	; 0x40
 8006494:	4b27      	ldr	r3, [pc, #156]	; (8006534 <SystemClock_Config+0xd4>)
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80064a0:	2300      	movs	r3, #0
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4b24      	ldr	r3, [pc, #144]	; (8006538 <SystemClock_Config+0xd8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80064ac:	4a22      	ldr	r2, [pc, #136]	; (8006538 <SystemClock_Config+0xd8>)
 80064ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	4b20      	ldr	r3, [pc, #128]	; (8006538 <SystemClock_Config+0xd8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064bc:	603b      	str	r3, [r7, #0]
 80064be:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80064c0:	2302      	movs	r3, #2
 80064c2:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80064c4:	2301      	movs	r3, #1
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80064c8:	2310      	movs	r3, #16
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80064cc:	2302      	movs	r3, #2
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 80064d4:	2310      	movs	r3, #16
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 80064d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80064dc:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80064de:	2304      	movs	r3, #4
 80064e0:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 80064e2:	2302      	movs	r3, #2
 80064e4:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 80064e6:	2302      	movs	r3, #2
 80064e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80064ea:	f107 031c 	add.w	r3, r7, #28
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd fa3a 	bl	8003968 <HAL_RCC_OscConfig>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 80064fa:	f7fa fbc0 	bl	8000c7e <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80064fe:	230f      	movs	r3, #15
 8006500:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006502:	2302      	movs	r3, #2
 8006504:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800650a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800650e:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	2102      	movs	r1, #2
 800651a:	4618      	mov	r0, r3
 800651c:	f7fc feda 	bl	80032d4 <HAL_RCC_ClockConfig>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 8006526:	f7fa fbaa 	bl	8000c7e <Error_Handler>
	  }
	}
 800652a:	bf00      	nop
 800652c:	3750      	adds	r7, #80	; 0x50
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800
 8006538:	40007000 	.word	0x40007000

0800653c <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
	   /* USER CODE END USART1_Init 0 */

	   /* USER CODE BEGIN USART1_Init 1 */

	   /* USER CODE END USART1_Init 1 */
	   huart1.Instance = USART1;
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <user_USART1_UART_Init+0x4c>)
 8006542:	4a12      	ldr	r2, [pc, #72]	; (800658c <user_USART1_UART_Init+0x50>)
 8006544:	601a      	str	r2, [r3, #0]
	   huart1.Init.BaudRate = 115200;
 8006546:	4b10      	ldr	r3, [pc, #64]	; (8006588 <user_USART1_UART_Init+0x4c>)
 8006548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800654c:	605a      	str	r2, [r3, #4]
	   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800654e:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <user_USART1_UART_Init+0x4c>)
 8006550:	2200      	movs	r2, #0
 8006552:	609a      	str	r2, [r3, #8]
	   huart1.Init.StopBits = UART_STOPBITS_1;
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <user_USART1_UART_Init+0x4c>)
 8006556:	2200      	movs	r2, #0
 8006558:	60da      	str	r2, [r3, #12]
	   huart1.Init.Parity = UART_PARITY_NONE;
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <user_USART1_UART_Init+0x4c>)
 800655c:	2200      	movs	r2, #0
 800655e:	611a      	str	r2, [r3, #16]
	   huart1.Init.Mode = UART_MODE_TX_RX;
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <user_USART1_UART_Init+0x4c>)
 8006562:	220c      	movs	r2, #12
 8006564:	615a      	str	r2, [r3, #20]
	   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <user_USART1_UART_Init+0x4c>)
 8006568:	2200      	movs	r2, #0
 800656a:	619a      	str	r2, [r3, #24]
	   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <user_USART1_UART_Init+0x4c>)
 800656e:	2200      	movs	r2, #0
 8006570:	61da      	str	r2, [r3, #28]
	   if (HAL_UART_Init(&huart1) != HAL_OK)
 8006572:	4805      	ldr	r0, [pc, #20]	; (8006588 <user_USART1_UART_Init+0x4c>)
 8006574:	f7fd fc96 	bl	8003ea4 <HAL_UART_Init>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <user_USART1_UART_Init+0x46>
	   {
	     Error_Handler();
 800657e:	f7fa fb7e 	bl	8000c7e <Error_Handler>
	   }
	   /* USER CODE BEGIN USART1_Init 2 */

	   /* USER CODE END USART1_Init 2 */

	 }
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000254 	.word	0x20000254
 800658c:	40011000 	.word	0x40011000

08006590 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
 800659c:	4613      	mov	r3, r2
 800659e:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	4b28      	ldr	r3, [pc, #160]	; (8006648 <user_GPIO_Init+0xb8>)
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	4a27      	ldr	r2, [pc, #156]	; (8006648 <user_GPIO_Init+0xb8>)
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	6313      	str	r3, [r2, #48]	; 0x30
 80065b0:	4b25      	ldr	r3, [pc, #148]	; (8006648 <user_GPIO_Init+0xb8>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065bc:	2300      	movs	r3, #0
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	4b21      	ldr	r3, [pc, #132]	; (8006648 <user_GPIO_Init+0xb8>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	4a20      	ldr	r2, [pc, #128]	; (8006648 <user_GPIO_Init+0xb8>)
 80065c6:	f043 0304 	orr.w	r3, r3, #4
 80065ca:	6313      	str	r3, [r2, #48]	; 0x30
 80065cc:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <user_GPIO_Init+0xb8>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <user_GPIO_Init+0xb8>)
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	4a19      	ldr	r2, [pc, #100]	; (8006648 <user_GPIO_Init+0xb8>)
 80065e2:	f043 0302 	orr.w	r3, r3, #2
 80065e6:	6313      	str	r3, [r2, #48]	; 0x30
 80065e8:	4b17      	ldr	r3, [pc, #92]	; (8006648 <user_GPIO_Init+0xb8>)
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 80065f4:	787a      	ldrb	r2, [r7, #1]
 80065f6:	887b      	ldrh	r3, [r7, #2]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fb fe90 	bl	8002320 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8006600:	787b      	ldrb	r3, [r7, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <user_GPIO_Init+0x84>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8006606:	787a      	ldrb	r2, [r7, #1]
 8006608:	887b      	ldrh	r3, [r7, #2]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f81f 	bl	8006650 <gpio_output>
 8006612:	e008      	b.n	8006626 <user_GPIO_Init+0x96>
     }
     else if(PIN_mode == INPUT)
 8006614:	787b      	ldrb	r3, [r7, #1]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d105      	bne.n	8006626 <user_GPIO_Init+0x96>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 800661a:	787a      	ldrb	r2, [r7, #1]
 800661c:	887b      	ldrh	r3, [r7, #2]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f837 	bl	8006694 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <user_GPIO_Init+0xbc>)
 8006628:	2202      	movs	r2, #2
 800662a:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662c:	4b07      	ldr	r3, [pc, #28]	; (800664c <user_GPIO_Init+0xbc>)
 800662e:	2200      	movs	r2, #0
 8006630:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <user_GPIO_Init+0xbc>)
 8006634:	2203      	movs	r2, #3
 8006636:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <user_GPIO_Init+0xbc>)
 800663a:	2207      	movs	r2, #7
 800663c:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 800663e:	bf00      	nop
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40023800 	.word	0x40023800
 800664c:	20000444 	.word	0x20000444

08006650 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	807b      	strh	r3, [r7, #2]
 800665c:	4613      	mov	r3, r2
 800665e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 030c 	add.w	r3, r7, #12
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8006670:	887b      	ldrh	r3, [r7, #2]
 8006672:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006674:	2301      	movs	r3, #1
 8006676:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800667c:	2300      	movs	r3, #0
 800667e:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fb fc9e 	bl	8001fc8 <HAL_GPIO_Init>
 }
 800668c:	bf00      	nop
 800668e:	3720      	adds	r7, #32
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	807b      	strh	r3, [r7, #2]
 80066a0:	4613      	mov	r3, r2
 80066a2:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a4:	f107 030c 	add.w	r3, r7, #12
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 80066b4:	887b      	ldrh	r3, [r7, #2]
 80066b6:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b8:	2300      	movs	r3, #0
 80066ba:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fb fc7e 	bl	8001fc8 <HAL_GPIO_Init>
 }
 80066cc:	bf00      	nop
 80066ce:	3720      	adds	r7, #32
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <data_receive>:




void data_receive()
 {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 80066d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066dc:	2214      	movs	r2, #20
 80066de:	4905      	ldr	r1, [pc, #20]	; (80066f4 <data_receive+0x20>)
 80066e0:	4805      	ldr	r0, [pc, #20]	; (80066f8 <data_receive+0x24>)
 80066e2:	f7fd fcbe 	bl	8004062 <HAL_UART_Receive>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <data_receive+0x1c>
	 {
			 Error_Handler();
 80066ec:	f7fa fac7 	bl	8000c7e <Error_Handler>
	 }
 }
 80066f0:	bf00      	nop
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000244 	.word	0x20000244
 80066f8:	20000254 	.word	0x20000254

080066fc <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8006708:	887b      	ldrh	r3, [r7, #2]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fb fdef 	bl	80022f0 <HAL_GPIO_ReadPin>
 8006712:	4603      	mov	r3, r0

 }
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	807b      	strh	r3, [r7, #2]
 8006728:	4613      	mov	r3, r2
 800672a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 800672c:	787a      	ldrb	r2, [r7, #1]
 800672e:	887b      	ldrh	r3, [r7, #2]
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fb fdf4 	bl	8002320 <HAL_GPIO_WritePin>
    return PinState;
 8006738:	787b      	ldrb	r3, [r7, #1]
 }
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <uart3_tx>:


extern UART_HandleTypeDef huart3;

void uart3_tx(uint8_t* buf)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7f9 fd69 	bl	8000224 <strlen>
 8006752:	4603      	mov	r3, r0
 8006754:	b29a      	uxth	r2, r3
 8006756:	f04f 33ff 	mov.w	r3, #4294967295
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	4804      	ldr	r0, [pc, #16]	; (8006770 <uart3_tx+0x2c>)
 800675e:	f7fd fbee 	bl	8003f3e <HAL_UART_Transmit>
	 HAL_Delay(100);
 8006762:	2064      	movs	r0, #100	; 0x64
 8006764:	f7fa fe58 	bl	8001418 <HAL_Delay>
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000124 	.word	0x20000124

08006774 <USER_USART3_UART_Init>:


void USER_USART3_UART_Init()
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006778:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 800677a:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <USER_USART3_UART_Init+0x50>)
 800677c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800677e:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 8006780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006786:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 8006788:	2200      	movs	r2, #0
 800678a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800678c:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 800678e:	2200      	movs	r2, #0
 8006790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 8006794:	2200      	movs	r2, #0
 8006796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 800679a:	220c      	movs	r2, #12
 800679c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800679e:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80067aa:	4805      	ldr	r0, [pc, #20]	; (80067c0 <USER_USART3_UART_Init+0x4c>)
 80067ac:	f7fd fb7a 	bl	8003ea4 <HAL_UART_Init>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <USER_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80067b6:	f7fa fa62 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000124 	.word	0x20000124
 80067c4:	40004800 	.word	0x40004800

080067c8 <USER_I2C3_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void USER_I2C3_Init(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80067cc:	4b12      	ldr	r3, [pc, #72]	; (8006818 <USER_I2C3_Init+0x50>)
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <USER_I2C3_Init+0x54>)
 80067d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80067d2:	4b11      	ldr	r3, [pc, #68]	; (8006818 <USER_I2C3_Init+0x50>)
 80067d4:	4a12      	ldr	r2, [pc, #72]	; (8006820 <USER_I2C3_Init+0x58>)
 80067d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80067d8:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <USER_I2C3_Init+0x50>)
 80067da:	2200      	movs	r2, #0
 80067dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80067de:	4b0e      	ldr	r3, [pc, #56]	; (8006818 <USER_I2C3_Init+0x50>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <USER_I2C3_Init+0x50>)
 80067e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067ea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <USER_I2C3_Init+0x50>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80067f2:	4b09      	ldr	r3, [pc, #36]	; (8006818 <USER_I2C3_Init+0x50>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80067f8:	4b07      	ldr	r3, [pc, #28]	; (8006818 <USER_I2C3_Init+0x50>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80067fe:	4b06      	ldr	r3, [pc, #24]	; (8006818 <USER_I2C3_Init+0x50>)
 8006800:	2200      	movs	r2, #0
 8006802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006804:	4804      	ldr	r0, [pc, #16]	; (8006818 <USER_I2C3_Init+0x50>)
 8006806:	f7fb fda5 	bl	8002354 <HAL_I2C_Init>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <USER_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006810:	f7fa fa35 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006814:	bf00      	nop
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000458 	.word	0x20000458
 800681c:	40005c00 	.word	0x40005c00
 8006820:	00061a80 	.word	0x00061a80

08006824 <eeprom_write>:
  */


// EEPROM write function
HAL_StatusTypeDef eeprom_write(uint16_t mem_address, uint8_t *data, uint16_t size)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af04      	add	r7, sp, #16
 800682a:	4603      	mov	r3, r0
 800682c:	6039      	str	r1, [r7, #0]
 800682e:	80fb      	strh	r3, [r7, #6]
 8006830:	4613      	mov	r3, r2
 8006832:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDRESS, mem_address, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8006834:	88fa      	ldrh	r2, [r7, #6]
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	9302      	str	r3, [sp, #8]
 800683c:	88bb      	ldrh	r3, [r7, #4]
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	2310      	movs	r3, #16
 8006846:	21a0      	movs	r1, #160	; 0xa0
 8006848:	4806      	ldr	r0, [pc, #24]	; (8006864 <eeprom_write+0x40>)
 800684a:	f7fb fec7 	bl	80025dc <HAL_I2C_Mem_Write>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(5); // Ensure the write operation is complete
 8006852:	2005      	movs	r0, #5
 8006854:	f7fa fde0 	bl	8001418 <HAL_Delay>
    return status;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000458 	.word	0x20000458

08006868 <atoi>:
 8006868:	220a      	movs	r2, #10
 800686a:	2100      	movs	r1, #0
 800686c:	f000 ba80 	b.w	8006d70 <strtol>

08006870 <__errno>:
 8006870:	4b01      	ldr	r3, [pc, #4]	; (8006878 <__errno+0x8>)
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	2000000c 	.word	0x2000000c

0800687c <__libc_init_array>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	4d0d      	ldr	r5, [pc, #52]	; (80068b4 <__libc_init_array+0x38>)
 8006880:	4c0d      	ldr	r4, [pc, #52]	; (80068b8 <__libc_init_array+0x3c>)
 8006882:	1b64      	subs	r4, r4, r5
 8006884:	10a4      	asrs	r4, r4, #2
 8006886:	2600      	movs	r6, #0
 8006888:	42a6      	cmp	r6, r4
 800688a:	d109      	bne.n	80068a0 <__libc_init_array+0x24>
 800688c:	4d0b      	ldr	r5, [pc, #44]	; (80068bc <__libc_init_array+0x40>)
 800688e:	4c0c      	ldr	r4, [pc, #48]	; (80068c0 <__libc_init_array+0x44>)
 8006890:	f001 fb36 	bl	8007f00 <_init>
 8006894:	1b64      	subs	r4, r4, r5
 8006896:	10a4      	asrs	r4, r4, #2
 8006898:	2600      	movs	r6, #0
 800689a:	42a6      	cmp	r6, r4
 800689c:	d105      	bne.n	80068aa <__libc_init_array+0x2e>
 800689e:	bd70      	pop	{r4, r5, r6, pc}
 80068a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a4:	4798      	blx	r3
 80068a6:	3601      	adds	r6, #1
 80068a8:	e7ee      	b.n	8006888 <__libc_init_array+0xc>
 80068aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ae:	4798      	blx	r3
 80068b0:	3601      	adds	r6, #1
 80068b2:	e7f2      	b.n	800689a <__libc_init_array+0x1e>
 80068b4:	08008428 	.word	0x08008428
 80068b8:	08008428 	.word	0x08008428
 80068bc:	08008428 	.word	0x08008428
 80068c0:	0800842c 	.word	0x0800842c

080068c4 <malloc>:
 80068c4:	4b02      	ldr	r3, [pc, #8]	; (80068d0 <malloc+0xc>)
 80068c6:	4601      	mov	r1, r0
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f000 b87f 	b.w	80069cc <_malloc_r>
 80068ce:	bf00      	nop
 80068d0:	2000000c 	.word	0x2000000c

080068d4 <free>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <free+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f000 b80b 	b.w	80068f4 <_free_r>
 80068de:	bf00      	nop
 80068e0:	2000000c 	.word	0x2000000c

080068e4 <memset>:
 80068e4:	4402      	add	r2, r0
 80068e6:	4603      	mov	r3, r0
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d100      	bne.n	80068ee <memset+0xa>
 80068ec:	4770      	bx	lr
 80068ee:	f803 1b01 	strb.w	r1, [r3], #1
 80068f2:	e7f9      	b.n	80068e8 <memset+0x4>

080068f4 <_free_r>:
 80068f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068f6:	2900      	cmp	r1, #0
 80068f8:	d044      	beq.n	8006984 <_free_r+0x90>
 80068fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068fe:	9001      	str	r0, [sp, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f1a1 0404 	sub.w	r4, r1, #4
 8006906:	bfb8      	it	lt
 8006908:	18e4      	addlt	r4, r4, r3
 800690a:	f000 fa6b 	bl	8006de4 <__malloc_lock>
 800690e:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <_free_r+0x94>)
 8006910:	9801      	ldr	r0, [sp, #4]
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	b933      	cbnz	r3, 8006924 <_free_r+0x30>
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	6014      	str	r4, [r2, #0]
 800691a:	b003      	add	sp, #12
 800691c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006920:	f000 ba66 	b.w	8006df0 <__malloc_unlock>
 8006924:	42a3      	cmp	r3, r4
 8006926:	d908      	bls.n	800693a <_free_r+0x46>
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	1961      	adds	r1, r4, r5
 800692c:	428b      	cmp	r3, r1
 800692e:	bf01      	itttt	eq
 8006930:	6819      	ldreq	r1, [r3, #0]
 8006932:	685b      	ldreq	r3, [r3, #4]
 8006934:	1949      	addeq	r1, r1, r5
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	e7ed      	b.n	8006916 <_free_r+0x22>
 800693a:	461a      	mov	r2, r3
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	b10b      	cbz	r3, 8006944 <_free_r+0x50>
 8006940:	42a3      	cmp	r3, r4
 8006942:	d9fa      	bls.n	800693a <_free_r+0x46>
 8006944:	6811      	ldr	r1, [r2, #0]
 8006946:	1855      	adds	r5, r2, r1
 8006948:	42a5      	cmp	r5, r4
 800694a:	d10b      	bne.n	8006964 <_free_r+0x70>
 800694c:	6824      	ldr	r4, [r4, #0]
 800694e:	4421      	add	r1, r4
 8006950:	1854      	adds	r4, r2, r1
 8006952:	42a3      	cmp	r3, r4
 8006954:	6011      	str	r1, [r2, #0]
 8006956:	d1e0      	bne.n	800691a <_free_r+0x26>
 8006958:	681c      	ldr	r4, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	6053      	str	r3, [r2, #4]
 800695e:	4421      	add	r1, r4
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	e7da      	b.n	800691a <_free_r+0x26>
 8006964:	d902      	bls.n	800696c <_free_r+0x78>
 8006966:	230c      	movs	r3, #12
 8006968:	6003      	str	r3, [r0, #0]
 800696a:	e7d6      	b.n	800691a <_free_r+0x26>
 800696c:	6825      	ldr	r5, [r4, #0]
 800696e:	1961      	adds	r1, r4, r5
 8006970:	428b      	cmp	r3, r1
 8006972:	bf04      	itt	eq
 8006974:	6819      	ldreq	r1, [r3, #0]
 8006976:	685b      	ldreq	r3, [r3, #4]
 8006978:	6063      	str	r3, [r4, #4]
 800697a:	bf04      	itt	eq
 800697c:	1949      	addeq	r1, r1, r5
 800697e:	6021      	streq	r1, [r4, #0]
 8006980:	6054      	str	r4, [r2, #4]
 8006982:	e7ca      	b.n	800691a <_free_r+0x26>
 8006984:	b003      	add	sp, #12
 8006986:	bd30      	pop	{r4, r5, pc}
 8006988:	200004ac 	.word	0x200004ac

0800698c <sbrk_aligned>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4e0e      	ldr	r6, [pc, #56]	; (80069c8 <sbrk_aligned+0x3c>)
 8006990:	460c      	mov	r4, r1
 8006992:	6831      	ldr	r1, [r6, #0]
 8006994:	4605      	mov	r5, r0
 8006996:	b911      	cbnz	r1, 800699e <sbrk_aligned+0x12>
 8006998:	f000 f88c 	bl	8006ab4 <_sbrk_r>
 800699c:	6030      	str	r0, [r6, #0]
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 f887 	bl	8006ab4 <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d00a      	beq.n	80069c0 <sbrk_aligned+0x34>
 80069aa:	1cc4      	adds	r4, r0, #3
 80069ac:	f024 0403 	bic.w	r4, r4, #3
 80069b0:	42a0      	cmp	r0, r4
 80069b2:	d007      	beq.n	80069c4 <sbrk_aligned+0x38>
 80069b4:	1a21      	subs	r1, r4, r0
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 f87c 	bl	8006ab4 <_sbrk_r>
 80069bc:	3001      	adds	r0, #1
 80069be:	d101      	bne.n	80069c4 <sbrk_aligned+0x38>
 80069c0:	f04f 34ff 	mov.w	r4, #4294967295
 80069c4:	4620      	mov	r0, r4
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	200004b0 	.word	0x200004b0

080069cc <_malloc_r>:
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	1ccd      	adds	r5, r1, #3
 80069d2:	f025 0503 	bic.w	r5, r5, #3
 80069d6:	3508      	adds	r5, #8
 80069d8:	2d0c      	cmp	r5, #12
 80069da:	bf38      	it	cc
 80069dc:	250c      	movcc	r5, #12
 80069de:	2d00      	cmp	r5, #0
 80069e0:	4607      	mov	r7, r0
 80069e2:	db01      	blt.n	80069e8 <_malloc_r+0x1c>
 80069e4:	42a9      	cmp	r1, r5
 80069e6:	d905      	bls.n	80069f4 <_malloc_r+0x28>
 80069e8:	230c      	movs	r3, #12
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	2600      	movs	r6, #0
 80069ee:	4630      	mov	r0, r6
 80069f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f4:	4e2e      	ldr	r6, [pc, #184]	; (8006ab0 <_malloc_r+0xe4>)
 80069f6:	f000 f9f5 	bl	8006de4 <__malloc_lock>
 80069fa:	6833      	ldr	r3, [r6, #0]
 80069fc:	461c      	mov	r4, r3
 80069fe:	bb34      	cbnz	r4, 8006a4e <_malloc_r+0x82>
 8006a00:	4629      	mov	r1, r5
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7ff ffc2 	bl	800698c <sbrk_aligned>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	d14d      	bne.n	8006aaa <_malloc_r+0xde>
 8006a0e:	6834      	ldr	r4, [r6, #0]
 8006a10:	4626      	mov	r6, r4
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	d140      	bne.n	8006a98 <_malloc_r+0xcc>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	eb04 0803 	add.w	r8, r4, r3
 8006a20:	f000 f848 	bl	8006ab4 <_sbrk_r>
 8006a24:	4580      	cmp	r8, r0
 8006a26:	d13a      	bne.n	8006a9e <_malloc_r+0xd2>
 8006a28:	6821      	ldr	r1, [r4, #0]
 8006a2a:	3503      	adds	r5, #3
 8006a2c:	1a6d      	subs	r5, r5, r1
 8006a2e:	f025 0503 	bic.w	r5, r5, #3
 8006a32:	3508      	adds	r5, #8
 8006a34:	2d0c      	cmp	r5, #12
 8006a36:	bf38      	it	cc
 8006a38:	250c      	movcc	r5, #12
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff ffa5 	bl	800698c <sbrk_aligned>
 8006a42:	3001      	adds	r0, #1
 8006a44:	d02b      	beq.n	8006a9e <_malloc_r+0xd2>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	442b      	add	r3, r5
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	e00e      	b.n	8006a6c <_malloc_r+0xa0>
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	1b52      	subs	r2, r2, r5
 8006a52:	d41e      	bmi.n	8006a92 <_malloc_r+0xc6>
 8006a54:	2a0b      	cmp	r2, #11
 8006a56:	d916      	bls.n	8006a86 <_malloc_r+0xba>
 8006a58:	1961      	adds	r1, r4, r5
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	6025      	str	r5, [r4, #0]
 8006a5e:	bf18      	it	ne
 8006a60:	6059      	strne	r1, [r3, #4]
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	bf08      	it	eq
 8006a66:	6031      	streq	r1, [r6, #0]
 8006a68:	5162      	str	r2, [r4, r5]
 8006a6a:	604b      	str	r3, [r1, #4]
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f104 060b 	add.w	r6, r4, #11
 8006a72:	f000 f9bd 	bl	8006df0 <__malloc_unlock>
 8006a76:	f026 0607 	bic.w	r6, r6, #7
 8006a7a:	1d23      	adds	r3, r4, #4
 8006a7c:	1af2      	subs	r2, r6, r3
 8006a7e:	d0b6      	beq.n	80069ee <_malloc_r+0x22>
 8006a80:	1b9b      	subs	r3, r3, r6
 8006a82:	50a3      	str	r3, [r4, r2]
 8006a84:	e7b3      	b.n	80069ee <_malloc_r+0x22>
 8006a86:	6862      	ldr	r2, [r4, #4]
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	bf0c      	ite	eq
 8006a8c:	6032      	streq	r2, [r6, #0]
 8006a8e:	605a      	strne	r2, [r3, #4]
 8006a90:	e7ec      	b.n	8006a6c <_malloc_r+0xa0>
 8006a92:	4623      	mov	r3, r4
 8006a94:	6864      	ldr	r4, [r4, #4]
 8006a96:	e7b2      	b.n	80069fe <_malloc_r+0x32>
 8006a98:	4634      	mov	r4, r6
 8006a9a:	6876      	ldr	r6, [r6, #4]
 8006a9c:	e7b9      	b.n	8006a12 <_malloc_r+0x46>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f000 f9a4 	bl	8006df0 <__malloc_unlock>
 8006aa8:	e7a1      	b.n	80069ee <_malloc_r+0x22>
 8006aaa:	6025      	str	r5, [r4, #0]
 8006aac:	e7de      	b.n	8006a6c <_malloc_r+0xa0>
 8006aae:	bf00      	nop
 8006ab0:	200004ac 	.word	0x200004ac

08006ab4 <_sbrk_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d06      	ldr	r5, [pc, #24]	; (8006ad0 <_sbrk_r+0x1c>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	f7fa fbc6 	bl	8001250 <_sbrk>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d102      	bne.n	8006ace <_sbrk_r+0x1a>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	b103      	cbz	r3, 8006ace <_sbrk_r+0x1a>
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	200004b4 	.word	0x200004b4

08006ad4 <sniprintf>:
 8006ad4:	b40c      	push	{r2, r3}
 8006ad6:	b530      	push	{r4, r5, lr}
 8006ad8:	4b17      	ldr	r3, [pc, #92]	; (8006b38 <sniprintf+0x64>)
 8006ada:	1e0c      	subs	r4, r1, #0
 8006adc:	681d      	ldr	r5, [r3, #0]
 8006ade:	b09d      	sub	sp, #116	; 0x74
 8006ae0:	da08      	bge.n	8006af4 <sniprintf+0x20>
 8006ae2:	238b      	movs	r3, #139	; 0x8b
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aea:	b01d      	add	sp, #116	; 0x74
 8006aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006af0:	b002      	add	sp, #8
 8006af2:	4770      	bx	lr
 8006af4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006afc:	bf14      	ite	ne
 8006afe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006b02:	4623      	moveq	r3, r4
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	9307      	str	r3, [sp, #28]
 8006b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	9006      	str	r0, [sp, #24]
 8006b10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b16:	ab21      	add	r3, sp, #132	; 0x84
 8006b18:	a902      	add	r1, sp, #8
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	f000 f9c9 	bl	8006eb4 <_svfiprintf_r>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	bfbc      	itt	lt
 8006b26:	238b      	movlt	r3, #139	; 0x8b
 8006b28:	602b      	strlt	r3, [r5, #0]
 8006b2a:	2c00      	cmp	r4, #0
 8006b2c:	d0dd      	beq.n	8006aea <sniprintf+0x16>
 8006b2e:	9b02      	ldr	r3, [sp, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e7d9      	b.n	8006aea <sniprintf+0x16>
 8006b36:	bf00      	nop
 8006b38:	2000000c 	.word	0x2000000c

08006b3c <siprintf>:
 8006b3c:	b40e      	push	{r1, r2, r3}
 8006b3e:	b500      	push	{lr}
 8006b40:	b09c      	sub	sp, #112	; 0x70
 8006b42:	ab1d      	add	r3, sp, #116	; 0x74
 8006b44:	9002      	str	r0, [sp, #8]
 8006b46:	9006      	str	r0, [sp, #24]
 8006b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b4c:	4809      	ldr	r0, [pc, #36]	; (8006b74 <siprintf+0x38>)
 8006b4e:	9107      	str	r1, [sp, #28]
 8006b50:	9104      	str	r1, [sp, #16]
 8006b52:	4909      	ldr	r1, [pc, #36]	; (8006b78 <siprintf+0x3c>)
 8006b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b58:	9105      	str	r1, [sp, #20]
 8006b5a:	6800      	ldr	r0, [r0, #0]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	a902      	add	r1, sp, #8
 8006b60:	f000 f9a8 	bl	8006eb4 <_svfiprintf_r>
 8006b64:	9b02      	ldr	r3, [sp, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	b01c      	add	sp, #112	; 0x70
 8006b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b70:	b003      	add	sp, #12
 8006b72:	4770      	bx	lr
 8006b74:	2000000c 	.word	0x2000000c
 8006b78:	ffff0208 	.word	0xffff0208

08006b7c <strcpy>:
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b82:	f803 2b01 	strb.w	r2, [r3], #1
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	d1f9      	bne.n	8006b7e <strcpy+0x2>
 8006b8a:	4770      	bx	lr

08006b8c <strncpy>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	3901      	subs	r1, #1
 8006b90:	4603      	mov	r3, r0
 8006b92:	b132      	cbz	r2, 8006ba2 <strncpy+0x16>
 8006b94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b98:	f803 4b01 	strb.w	r4, [r3], #1
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	d1f7      	bne.n	8006b92 <strncpy+0x6>
 8006ba2:	441a      	add	r2, r3
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d100      	bne.n	8006bac <strncpy+0x20>
 8006baa:	bd10      	pop	{r4, pc}
 8006bac:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb0:	e7f9      	b.n	8006ba6 <strncpy+0x1a>
	...

08006bb4 <strtok>:
 8006bb4:	4b16      	ldr	r3, [pc, #88]	; (8006c10 <strtok+0x5c>)
 8006bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bb8:	681e      	ldr	r6, [r3, #0]
 8006bba:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	b9fc      	cbnz	r4, 8006c00 <strtok+0x4c>
 8006bc0:	2050      	movs	r0, #80	; 0x50
 8006bc2:	9101      	str	r1, [sp, #4]
 8006bc4:	f7ff fe7e 	bl	80068c4 <malloc>
 8006bc8:	9901      	ldr	r1, [sp, #4]
 8006bca:	65b0      	str	r0, [r6, #88]	; 0x58
 8006bcc:	4602      	mov	r2, r0
 8006bce:	b920      	cbnz	r0, 8006bda <strtok+0x26>
 8006bd0:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <strtok+0x60>)
 8006bd2:	4811      	ldr	r0, [pc, #68]	; (8006c18 <strtok+0x64>)
 8006bd4:	2157      	movs	r1, #87	; 0x57
 8006bd6:	f000 f8d5 	bl	8006d84 <__assert_func>
 8006bda:	e9c0 4400 	strd	r4, r4, [r0]
 8006bde:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006be2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006be6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006bea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006bee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006bf2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006bf6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006bfa:	6184      	str	r4, [r0, #24]
 8006bfc:	7704      	strb	r4, [r0, #28]
 8006bfe:	6244      	str	r4, [r0, #36]	; 0x24
 8006c00:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006c02:	2301      	movs	r3, #1
 8006c04:	4628      	mov	r0, r5
 8006c06:	b002      	add	sp, #8
 8006c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c0c:	f000 b806 	b.w	8006c1c <__strtok_r>
 8006c10:	2000000c 	.word	0x2000000c
 8006c14:	080082dc 	.word	0x080082dc
 8006c18:	080082f3 	.word	0x080082f3

08006c1c <__strtok_r>:
 8006c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1e:	b908      	cbnz	r0, 8006c24 <__strtok_r+0x8>
 8006c20:	6810      	ldr	r0, [r2, #0]
 8006c22:	b188      	cbz	r0, 8006c48 <__strtok_r+0x2c>
 8006c24:	4604      	mov	r4, r0
 8006c26:	4620      	mov	r0, r4
 8006c28:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006c2c:	460f      	mov	r7, r1
 8006c2e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006c32:	b91e      	cbnz	r6, 8006c3c <__strtok_r+0x20>
 8006c34:	b965      	cbnz	r5, 8006c50 <__strtok_r+0x34>
 8006c36:	6015      	str	r5, [r2, #0]
 8006c38:	4628      	mov	r0, r5
 8006c3a:	e005      	b.n	8006c48 <__strtok_r+0x2c>
 8006c3c:	42b5      	cmp	r5, r6
 8006c3e:	d1f6      	bne.n	8006c2e <__strtok_r+0x12>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1f0      	bne.n	8006c26 <__strtok_r+0xa>
 8006c44:	6014      	str	r4, [r2, #0]
 8006c46:	7003      	strb	r3, [r0, #0]
 8006c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c4a:	461c      	mov	r4, r3
 8006c4c:	e00c      	b.n	8006c68 <__strtok_r+0x4c>
 8006c4e:	b915      	cbnz	r5, 8006c56 <__strtok_r+0x3a>
 8006c50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c54:	460e      	mov	r6, r1
 8006c56:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006c5a:	42ab      	cmp	r3, r5
 8006c5c:	d1f7      	bne.n	8006c4e <__strtok_r+0x32>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f3      	beq.n	8006c4a <__strtok_r+0x2e>
 8006c62:	2300      	movs	r3, #0
 8006c64:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006c68:	6014      	str	r4, [r2, #0]
 8006c6a:	e7ed      	b.n	8006c48 <__strtok_r+0x2c>

08006c6c <_strtol_l.constprop.0>:
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c72:	d001      	beq.n	8006c78 <_strtol_l.constprop.0+0xc>
 8006c74:	2b24      	cmp	r3, #36	; 0x24
 8006c76:	d906      	bls.n	8006c86 <_strtol_l.constprop.0+0x1a>
 8006c78:	f7ff fdfa 	bl	8006870 <__errno>
 8006c7c:	2316      	movs	r3, #22
 8006c7e:	6003      	str	r3, [r0, #0]
 8006c80:	2000      	movs	r0, #0
 8006c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d6c <_strtol_l.constprop.0+0x100>
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	462e      	mov	r6, r5
 8006c8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c92:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006c96:	f017 0708 	ands.w	r7, r7, #8
 8006c9a:	d1f7      	bne.n	8006c8c <_strtol_l.constprop.0+0x20>
 8006c9c:	2c2d      	cmp	r4, #45	; 0x2d
 8006c9e:	d132      	bne.n	8006d06 <_strtol_l.constprop.0+0x9a>
 8006ca0:	782c      	ldrb	r4, [r5, #0]
 8006ca2:	2701      	movs	r7, #1
 8006ca4:	1cb5      	adds	r5, r6, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d05b      	beq.n	8006d62 <_strtol_l.constprop.0+0xf6>
 8006caa:	2b10      	cmp	r3, #16
 8006cac:	d109      	bne.n	8006cc2 <_strtol_l.constprop.0+0x56>
 8006cae:	2c30      	cmp	r4, #48	; 0x30
 8006cb0:	d107      	bne.n	8006cc2 <_strtol_l.constprop.0+0x56>
 8006cb2:	782c      	ldrb	r4, [r5, #0]
 8006cb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006cb8:	2c58      	cmp	r4, #88	; 0x58
 8006cba:	d14d      	bne.n	8006d58 <_strtol_l.constprop.0+0xec>
 8006cbc:	786c      	ldrb	r4, [r5, #1]
 8006cbe:	2310      	movs	r3, #16
 8006cc0:	3502      	adds	r5, #2
 8006cc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006cc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cca:	f04f 0c00 	mov.w	ip, #0
 8006cce:	fbb8 f9f3 	udiv	r9, r8, r3
 8006cd2:	4666      	mov	r6, ip
 8006cd4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006cd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006cdc:	f1be 0f09 	cmp.w	lr, #9
 8006ce0:	d816      	bhi.n	8006d10 <_strtol_l.constprop.0+0xa4>
 8006ce2:	4674      	mov	r4, lr
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	dd24      	ble.n	8006d32 <_strtol_l.constprop.0+0xc6>
 8006ce8:	f1bc 0f00 	cmp.w	ip, #0
 8006cec:	db1e      	blt.n	8006d2c <_strtol_l.constprop.0+0xc0>
 8006cee:	45b1      	cmp	r9, r6
 8006cf0:	d31c      	bcc.n	8006d2c <_strtol_l.constprop.0+0xc0>
 8006cf2:	d101      	bne.n	8006cf8 <_strtol_l.constprop.0+0x8c>
 8006cf4:	45a2      	cmp	sl, r4
 8006cf6:	db19      	blt.n	8006d2c <_strtol_l.constprop.0+0xc0>
 8006cf8:	fb06 4603 	mla	r6, r6, r3, r4
 8006cfc:	f04f 0c01 	mov.w	ip, #1
 8006d00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d04:	e7e8      	b.n	8006cd8 <_strtol_l.constprop.0+0x6c>
 8006d06:	2c2b      	cmp	r4, #43	; 0x2b
 8006d08:	bf04      	itt	eq
 8006d0a:	782c      	ldrbeq	r4, [r5, #0]
 8006d0c:	1cb5      	addeq	r5, r6, #2
 8006d0e:	e7ca      	b.n	8006ca6 <_strtol_l.constprop.0+0x3a>
 8006d10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006d14:	f1be 0f19 	cmp.w	lr, #25
 8006d18:	d801      	bhi.n	8006d1e <_strtol_l.constprop.0+0xb2>
 8006d1a:	3c37      	subs	r4, #55	; 0x37
 8006d1c:	e7e2      	b.n	8006ce4 <_strtol_l.constprop.0+0x78>
 8006d1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006d22:	f1be 0f19 	cmp.w	lr, #25
 8006d26:	d804      	bhi.n	8006d32 <_strtol_l.constprop.0+0xc6>
 8006d28:	3c57      	subs	r4, #87	; 0x57
 8006d2a:	e7db      	b.n	8006ce4 <_strtol_l.constprop.0+0x78>
 8006d2c:	f04f 3cff 	mov.w	ip, #4294967295
 8006d30:	e7e6      	b.n	8006d00 <_strtol_l.constprop.0+0x94>
 8006d32:	f1bc 0f00 	cmp.w	ip, #0
 8006d36:	da05      	bge.n	8006d44 <_strtol_l.constprop.0+0xd8>
 8006d38:	2322      	movs	r3, #34	; 0x22
 8006d3a:	6003      	str	r3, [r0, #0]
 8006d3c:	4646      	mov	r6, r8
 8006d3e:	b942      	cbnz	r2, 8006d52 <_strtol_l.constprop.0+0xe6>
 8006d40:	4630      	mov	r0, r6
 8006d42:	e79e      	b.n	8006c82 <_strtol_l.constprop.0+0x16>
 8006d44:	b107      	cbz	r7, 8006d48 <_strtol_l.constprop.0+0xdc>
 8006d46:	4276      	negs	r6, r6
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d0f9      	beq.n	8006d40 <_strtol_l.constprop.0+0xd4>
 8006d4c:	f1bc 0f00 	cmp.w	ip, #0
 8006d50:	d000      	beq.n	8006d54 <_strtol_l.constprop.0+0xe8>
 8006d52:	1e69      	subs	r1, r5, #1
 8006d54:	6011      	str	r1, [r2, #0]
 8006d56:	e7f3      	b.n	8006d40 <_strtol_l.constprop.0+0xd4>
 8006d58:	2430      	movs	r4, #48	; 0x30
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1b1      	bne.n	8006cc2 <_strtol_l.constprop.0+0x56>
 8006d5e:	2308      	movs	r3, #8
 8006d60:	e7af      	b.n	8006cc2 <_strtol_l.constprop.0+0x56>
 8006d62:	2c30      	cmp	r4, #48	; 0x30
 8006d64:	d0a5      	beq.n	8006cb2 <_strtol_l.constprop.0+0x46>
 8006d66:	230a      	movs	r3, #10
 8006d68:	e7ab      	b.n	8006cc2 <_strtol_l.constprop.0+0x56>
 8006d6a:	bf00      	nop
 8006d6c:	080081d5 	.word	0x080081d5

08006d70 <strtol>:
 8006d70:	4613      	mov	r3, r2
 8006d72:	460a      	mov	r2, r1
 8006d74:	4601      	mov	r1, r0
 8006d76:	4802      	ldr	r0, [pc, #8]	; (8006d80 <strtol+0x10>)
 8006d78:	6800      	ldr	r0, [r0, #0]
 8006d7a:	f7ff bf77 	b.w	8006c6c <_strtol_l.constprop.0>
 8006d7e:	bf00      	nop
 8006d80:	2000000c 	.word	0x2000000c

08006d84 <__assert_func>:
 8006d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d86:	4614      	mov	r4, r2
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <__assert_func+0x2c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	68d8      	ldr	r0, [r3, #12]
 8006d92:	b14c      	cbz	r4, 8006da8 <__assert_func+0x24>
 8006d94:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <__assert_func+0x30>)
 8006d96:	9100      	str	r1, [sp, #0]
 8006d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d9c:	4906      	ldr	r1, [pc, #24]	; (8006db8 <__assert_func+0x34>)
 8006d9e:	462b      	mov	r3, r5
 8006da0:	f000 f80e 	bl	8006dc0 <fiprintf>
 8006da4:	f000 fd34 	bl	8007810 <abort>
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <__assert_func+0x38>)
 8006daa:	461c      	mov	r4, r3
 8006dac:	e7f3      	b.n	8006d96 <__assert_func+0x12>
 8006dae:	bf00      	nop
 8006db0:	2000000c 	.word	0x2000000c
 8006db4:	08008350 	.word	0x08008350
 8006db8:	0800835d 	.word	0x0800835d
 8006dbc:	0800838b 	.word	0x0800838b

08006dc0 <fiprintf>:
 8006dc0:	b40e      	push	{r1, r2, r3}
 8006dc2:	b503      	push	{r0, r1, lr}
 8006dc4:	4601      	mov	r1, r0
 8006dc6:	ab03      	add	r3, sp, #12
 8006dc8:	4805      	ldr	r0, [pc, #20]	; (8006de0 <fiprintf+0x20>)
 8006dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dce:	6800      	ldr	r0, [r0, #0]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	f000 f999 	bl	8007108 <_vfiprintf_r>
 8006dd6:	b002      	add	sp, #8
 8006dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ddc:	b003      	add	sp, #12
 8006dde:	4770      	bx	lr
 8006de0:	2000000c 	.word	0x2000000c

08006de4 <__malloc_lock>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__malloc_lock+0x8>)
 8006de6:	f000 bed3 	b.w	8007b90 <__retarget_lock_acquire_recursive>
 8006dea:	bf00      	nop
 8006dec:	200004b8 	.word	0x200004b8

08006df0 <__malloc_unlock>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__malloc_unlock+0x8>)
 8006df2:	f000 bece 	b.w	8007b92 <__retarget_lock_release_recursive>
 8006df6:	bf00      	nop
 8006df8:	200004b8 	.word	0x200004b8

08006dfc <__ssputs_r>:
 8006dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	688e      	ldr	r6, [r1, #8]
 8006e02:	429e      	cmp	r6, r3
 8006e04:	4682      	mov	sl, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	4690      	mov	r8, r2
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	d838      	bhi.n	8006e80 <__ssputs_r+0x84>
 8006e0e:	898a      	ldrh	r2, [r1, #12]
 8006e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e14:	d032      	beq.n	8006e7c <__ssputs_r+0x80>
 8006e16:	6825      	ldr	r5, [r4, #0]
 8006e18:	6909      	ldr	r1, [r1, #16]
 8006e1a:	eba5 0901 	sub.w	r9, r5, r1
 8006e1e:	6965      	ldr	r5, [r4, #20]
 8006e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e28:	3301      	adds	r3, #1
 8006e2a:	444b      	add	r3, r9
 8006e2c:	106d      	asrs	r5, r5, #1
 8006e2e:	429d      	cmp	r5, r3
 8006e30:	bf38      	it	cc
 8006e32:	461d      	movcc	r5, r3
 8006e34:	0553      	lsls	r3, r2, #21
 8006e36:	d531      	bpl.n	8006e9c <__ssputs_r+0xa0>
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7ff fdc7 	bl	80069cc <_malloc_r>
 8006e3e:	4606      	mov	r6, r0
 8006e40:	b950      	cbnz	r0, 8006e58 <__ssputs_r+0x5c>
 8006e42:	230c      	movs	r3, #12
 8006e44:	f8ca 3000 	str.w	r3, [sl]
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e58:	6921      	ldr	r1, [r4, #16]
 8006e5a:	464a      	mov	r2, r9
 8006e5c:	f000 ff00 	bl	8007c60 <memcpy>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6a:	81a3      	strh	r3, [r4, #12]
 8006e6c:	6126      	str	r6, [r4, #16]
 8006e6e:	6165      	str	r5, [r4, #20]
 8006e70:	444e      	add	r6, r9
 8006e72:	eba5 0509 	sub.w	r5, r5, r9
 8006e76:	6026      	str	r6, [r4, #0]
 8006e78:	60a5      	str	r5, [r4, #8]
 8006e7a:	463e      	mov	r6, r7
 8006e7c:	42be      	cmp	r6, r7
 8006e7e:	d900      	bls.n	8006e82 <__ssputs_r+0x86>
 8006e80:	463e      	mov	r6, r7
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	4632      	mov	r2, r6
 8006e86:	4641      	mov	r1, r8
 8006e88:	f000 fef8 	bl	8007c7c <memmove>
 8006e8c:	68a3      	ldr	r3, [r4, #8]
 8006e8e:	1b9b      	subs	r3, r3, r6
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4433      	add	r3, r6
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7db      	b.n	8006e54 <__ssputs_r+0x58>
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	f000 ff07 	bl	8007cb0 <_realloc_r>
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1e1      	bne.n	8006e6c <__ssputs_r+0x70>
 8006ea8:	6921      	ldr	r1, [r4, #16]
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f7ff fd22 	bl	80068f4 <_free_r>
 8006eb0:	e7c7      	b.n	8006e42 <__ssputs_r+0x46>
	...

08006eb4 <_svfiprintf_r>:
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	4698      	mov	r8, r3
 8006eba:	898b      	ldrh	r3, [r1, #12]
 8006ebc:	061b      	lsls	r3, r3, #24
 8006ebe:	b09d      	sub	sp, #116	; 0x74
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	d50e      	bpl.n	8006ee6 <_svfiprintf_r+0x32>
 8006ec8:	690b      	ldr	r3, [r1, #16]
 8006eca:	b963      	cbnz	r3, 8006ee6 <_svfiprintf_r+0x32>
 8006ecc:	2140      	movs	r1, #64	; 0x40
 8006ece:	f7ff fd7d 	bl	80069cc <_malloc_r>
 8006ed2:	6028      	str	r0, [r5, #0]
 8006ed4:	6128      	str	r0, [r5, #16]
 8006ed6:	b920      	cbnz	r0, 8006ee2 <_svfiprintf_r+0x2e>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	e0d1      	b.n	8007086 <_svfiprintf_r+0x1d2>
 8006ee2:	2340      	movs	r3, #64	; 0x40
 8006ee4:	616b      	str	r3, [r5, #20]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eea:	2320      	movs	r3, #32
 8006eec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ef4:	2330      	movs	r3, #48	; 0x30
 8006ef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070a0 <_svfiprintf_r+0x1ec>
 8006efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006efe:	f04f 0901 	mov.w	r9, #1
 8006f02:	4623      	mov	r3, r4
 8006f04:	469a      	mov	sl, r3
 8006f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f0a:	b10a      	cbz	r2, 8006f10 <_svfiprintf_r+0x5c>
 8006f0c:	2a25      	cmp	r2, #37	; 0x25
 8006f0e:	d1f9      	bne.n	8006f04 <_svfiprintf_r+0x50>
 8006f10:	ebba 0b04 	subs.w	fp, sl, r4
 8006f14:	d00b      	beq.n	8006f2e <_svfiprintf_r+0x7a>
 8006f16:	465b      	mov	r3, fp
 8006f18:	4622      	mov	r2, r4
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff ff6d 	bl	8006dfc <__ssputs_r>
 8006f22:	3001      	adds	r0, #1
 8006f24:	f000 80aa 	beq.w	800707c <_svfiprintf_r+0x1c8>
 8006f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f2a:	445a      	add	r2, fp
 8006f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80a2 	beq.w	800707c <_svfiprintf_r+0x1c8>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f42:	f10a 0a01 	add.w	sl, sl, #1
 8006f46:	9304      	str	r3, [sp, #16]
 8006f48:	9307      	str	r3, [sp, #28]
 8006f4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f50:	4654      	mov	r4, sl
 8006f52:	2205      	movs	r2, #5
 8006f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f58:	4851      	ldr	r0, [pc, #324]	; (80070a0 <_svfiprintf_r+0x1ec>)
 8006f5a:	f7f9 f971 	bl	8000240 <memchr>
 8006f5e:	9a04      	ldr	r2, [sp, #16]
 8006f60:	b9d8      	cbnz	r0, 8006f9a <_svfiprintf_r+0xe6>
 8006f62:	06d0      	lsls	r0, r2, #27
 8006f64:	bf44      	itt	mi
 8006f66:	2320      	movmi	r3, #32
 8006f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f6c:	0711      	lsls	r1, r2, #28
 8006f6e:	bf44      	itt	mi
 8006f70:	232b      	movmi	r3, #43	; 0x2b
 8006f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f76:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f7c:	d015      	beq.n	8006faa <_svfiprintf_r+0xf6>
 8006f7e:	9a07      	ldr	r2, [sp, #28]
 8006f80:	4654      	mov	r4, sl
 8006f82:	2000      	movs	r0, #0
 8006f84:	f04f 0c0a 	mov.w	ip, #10
 8006f88:	4621      	mov	r1, r4
 8006f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f8e:	3b30      	subs	r3, #48	; 0x30
 8006f90:	2b09      	cmp	r3, #9
 8006f92:	d94e      	bls.n	8007032 <_svfiprintf_r+0x17e>
 8006f94:	b1b0      	cbz	r0, 8006fc4 <_svfiprintf_r+0x110>
 8006f96:	9207      	str	r2, [sp, #28]
 8006f98:	e014      	b.n	8006fc4 <_svfiprintf_r+0x110>
 8006f9a:	eba0 0308 	sub.w	r3, r0, r8
 8006f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	46a2      	mov	sl, r4
 8006fa8:	e7d2      	b.n	8006f50 <_svfiprintf_r+0x9c>
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	1d19      	adds	r1, r3, #4
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	9103      	str	r1, [sp, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bfbb      	ittet	lt
 8006fb6:	425b      	neglt	r3, r3
 8006fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006fbc:	9307      	strge	r3, [sp, #28]
 8006fbe:	9307      	strlt	r3, [sp, #28]
 8006fc0:	bfb8      	it	lt
 8006fc2:	9204      	strlt	r2, [sp, #16]
 8006fc4:	7823      	ldrb	r3, [r4, #0]
 8006fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc8:	d10c      	bne.n	8006fe4 <_svfiprintf_r+0x130>
 8006fca:	7863      	ldrb	r3, [r4, #1]
 8006fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fce:	d135      	bne.n	800703c <_svfiprintf_r+0x188>
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	1d1a      	adds	r2, r3, #4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	9203      	str	r2, [sp, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bfb8      	it	lt
 8006fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fe0:	3402      	adds	r4, #2
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070b0 <_svfiprintf_r+0x1fc>
 8006fe8:	7821      	ldrb	r1, [r4, #0]
 8006fea:	2203      	movs	r2, #3
 8006fec:	4650      	mov	r0, sl
 8006fee:	f7f9 f927 	bl	8000240 <memchr>
 8006ff2:	b140      	cbz	r0, 8007006 <_svfiprintf_r+0x152>
 8006ff4:	2340      	movs	r3, #64	; 0x40
 8006ff6:	eba0 000a 	sub.w	r0, r0, sl
 8006ffa:	fa03 f000 	lsl.w	r0, r3, r0
 8006ffe:	9b04      	ldr	r3, [sp, #16]
 8007000:	4303      	orrs	r3, r0
 8007002:	3401      	adds	r4, #1
 8007004:	9304      	str	r3, [sp, #16]
 8007006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800700a:	4826      	ldr	r0, [pc, #152]	; (80070a4 <_svfiprintf_r+0x1f0>)
 800700c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007010:	2206      	movs	r2, #6
 8007012:	f7f9 f915 	bl	8000240 <memchr>
 8007016:	2800      	cmp	r0, #0
 8007018:	d038      	beq.n	800708c <_svfiprintf_r+0x1d8>
 800701a:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <_svfiprintf_r+0x1f4>)
 800701c:	bb1b      	cbnz	r3, 8007066 <_svfiprintf_r+0x1b2>
 800701e:	9b03      	ldr	r3, [sp, #12]
 8007020:	3307      	adds	r3, #7
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	3308      	adds	r3, #8
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702c:	4433      	add	r3, r6
 800702e:	9309      	str	r3, [sp, #36]	; 0x24
 8007030:	e767      	b.n	8006f02 <_svfiprintf_r+0x4e>
 8007032:	fb0c 3202 	mla	r2, ip, r2, r3
 8007036:	460c      	mov	r4, r1
 8007038:	2001      	movs	r0, #1
 800703a:	e7a5      	b.n	8006f88 <_svfiprintf_r+0xd4>
 800703c:	2300      	movs	r3, #0
 800703e:	3401      	adds	r4, #1
 8007040:	9305      	str	r3, [sp, #20]
 8007042:	4619      	mov	r1, r3
 8007044:	f04f 0c0a 	mov.w	ip, #10
 8007048:	4620      	mov	r0, r4
 800704a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800704e:	3a30      	subs	r2, #48	; 0x30
 8007050:	2a09      	cmp	r2, #9
 8007052:	d903      	bls.n	800705c <_svfiprintf_r+0x1a8>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0c5      	beq.n	8006fe4 <_svfiprintf_r+0x130>
 8007058:	9105      	str	r1, [sp, #20]
 800705a:	e7c3      	b.n	8006fe4 <_svfiprintf_r+0x130>
 800705c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007060:	4604      	mov	r4, r0
 8007062:	2301      	movs	r3, #1
 8007064:	e7f0      	b.n	8007048 <_svfiprintf_r+0x194>
 8007066:	ab03      	add	r3, sp, #12
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	462a      	mov	r2, r5
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <_svfiprintf_r+0x1f8>)
 800706e:	a904      	add	r1, sp, #16
 8007070:	4638      	mov	r0, r7
 8007072:	f3af 8000 	nop.w
 8007076:	1c42      	adds	r2, r0, #1
 8007078:	4606      	mov	r6, r0
 800707a:	d1d6      	bne.n	800702a <_svfiprintf_r+0x176>
 800707c:	89ab      	ldrh	r3, [r5, #12]
 800707e:	065b      	lsls	r3, r3, #25
 8007080:	f53f af2c 	bmi.w	8006edc <_svfiprintf_r+0x28>
 8007084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007086:	b01d      	add	sp, #116	; 0x74
 8007088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708c:	ab03      	add	r3, sp, #12
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	462a      	mov	r2, r5
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <_svfiprintf_r+0x1f8>)
 8007094:	a904      	add	r1, sp, #16
 8007096:	4638      	mov	r0, r7
 8007098:	f000 f9d4 	bl	8007444 <_printf_i>
 800709c:	e7eb      	b.n	8007076 <_svfiprintf_r+0x1c2>
 800709e:	bf00      	nop
 80070a0:	0800838c 	.word	0x0800838c
 80070a4:	08008396 	.word	0x08008396
 80070a8:	00000000 	.word	0x00000000
 80070ac:	08006dfd 	.word	0x08006dfd
 80070b0:	08008392 	.word	0x08008392

080070b4 <__sfputc_r>:
 80070b4:	6893      	ldr	r3, [r2, #8]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	b410      	push	{r4}
 80070bc:	6093      	str	r3, [r2, #8]
 80070be:	da08      	bge.n	80070d2 <__sfputc_r+0x1e>
 80070c0:	6994      	ldr	r4, [r2, #24]
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	db01      	blt.n	80070ca <__sfputc_r+0x16>
 80070c6:	290a      	cmp	r1, #10
 80070c8:	d103      	bne.n	80070d2 <__sfputc_r+0x1e>
 80070ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ce:	f000 badf 	b.w	8007690 <__swbuf_r>
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	1c58      	adds	r0, r3, #1
 80070d6:	6010      	str	r0, [r2, #0]
 80070d8:	7019      	strb	r1, [r3, #0]
 80070da:	4608      	mov	r0, r1
 80070dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <__sfputs_r>:
 80070e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e4:	4606      	mov	r6, r0
 80070e6:	460f      	mov	r7, r1
 80070e8:	4614      	mov	r4, r2
 80070ea:	18d5      	adds	r5, r2, r3
 80070ec:	42ac      	cmp	r4, r5
 80070ee:	d101      	bne.n	80070f4 <__sfputs_r+0x12>
 80070f0:	2000      	movs	r0, #0
 80070f2:	e007      	b.n	8007104 <__sfputs_r+0x22>
 80070f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f8:	463a      	mov	r2, r7
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ffda 	bl	80070b4 <__sfputc_r>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d1f3      	bne.n	80070ec <__sfputs_r+0xa>
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007108 <_vfiprintf_r>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	460d      	mov	r5, r1
 800710e:	b09d      	sub	sp, #116	; 0x74
 8007110:	4614      	mov	r4, r2
 8007112:	4698      	mov	r8, r3
 8007114:	4606      	mov	r6, r0
 8007116:	b118      	cbz	r0, 8007120 <_vfiprintf_r+0x18>
 8007118:	6983      	ldr	r3, [r0, #24]
 800711a:	b90b      	cbnz	r3, 8007120 <_vfiprintf_r+0x18>
 800711c:	f000 fc9a 	bl	8007a54 <__sinit>
 8007120:	4b89      	ldr	r3, [pc, #548]	; (8007348 <_vfiprintf_r+0x240>)
 8007122:	429d      	cmp	r5, r3
 8007124:	d11b      	bne.n	800715e <_vfiprintf_r+0x56>
 8007126:	6875      	ldr	r5, [r6, #4]
 8007128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800712a:	07d9      	lsls	r1, r3, #31
 800712c:	d405      	bmi.n	800713a <_vfiprintf_r+0x32>
 800712e:	89ab      	ldrh	r3, [r5, #12]
 8007130:	059a      	lsls	r2, r3, #22
 8007132:	d402      	bmi.n	800713a <_vfiprintf_r+0x32>
 8007134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007136:	f000 fd2b 	bl	8007b90 <__retarget_lock_acquire_recursive>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	071b      	lsls	r3, r3, #28
 800713e:	d501      	bpl.n	8007144 <_vfiprintf_r+0x3c>
 8007140:	692b      	ldr	r3, [r5, #16]
 8007142:	b9eb      	cbnz	r3, 8007180 <_vfiprintf_r+0x78>
 8007144:	4629      	mov	r1, r5
 8007146:	4630      	mov	r0, r6
 8007148:	f000 faf4 	bl	8007734 <__swsetup_r>
 800714c:	b1c0      	cbz	r0, 8007180 <_vfiprintf_r+0x78>
 800714e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007150:	07dc      	lsls	r4, r3, #31
 8007152:	d50e      	bpl.n	8007172 <_vfiprintf_r+0x6a>
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	b01d      	add	sp, #116	; 0x74
 800715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715e:	4b7b      	ldr	r3, [pc, #492]	; (800734c <_vfiprintf_r+0x244>)
 8007160:	429d      	cmp	r5, r3
 8007162:	d101      	bne.n	8007168 <_vfiprintf_r+0x60>
 8007164:	68b5      	ldr	r5, [r6, #8]
 8007166:	e7df      	b.n	8007128 <_vfiprintf_r+0x20>
 8007168:	4b79      	ldr	r3, [pc, #484]	; (8007350 <_vfiprintf_r+0x248>)
 800716a:	429d      	cmp	r5, r3
 800716c:	bf08      	it	eq
 800716e:	68f5      	ldreq	r5, [r6, #12]
 8007170:	e7da      	b.n	8007128 <_vfiprintf_r+0x20>
 8007172:	89ab      	ldrh	r3, [r5, #12]
 8007174:	0598      	lsls	r0, r3, #22
 8007176:	d4ed      	bmi.n	8007154 <_vfiprintf_r+0x4c>
 8007178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800717a:	f000 fd0a 	bl	8007b92 <__retarget_lock_release_recursive>
 800717e:	e7e9      	b.n	8007154 <_vfiprintf_r+0x4c>
 8007180:	2300      	movs	r3, #0
 8007182:	9309      	str	r3, [sp, #36]	; 0x24
 8007184:	2320      	movs	r3, #32
 8007186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718a:	f8cd 800c 	str.w	r8, [sp, #12]
 800718e:	2330      	movs	r3, #48	; 0x30
 8007190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007354 <_vfiprintf_r+0x24c>
 8007194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007198:	f04f 0901 	mov.w	r9, #1
 800719c:	4623      	mov	r3, r4
 800719e:	469a      	mov	sl, r3
 80071a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a4:	b10a      	cbz	r2, 80071aa <_vfiprintf_r+0xa2>
 80071a6:	2a25      	cmp	r2, #37	; 0x25
 80071a8:	d1f9      	bne.n	800719e <_vfiprintf_r+0x96>
 80071aa:	ebba 0b04 	subs.w	fp, sl, r4
 80071ae:	d00b      	beq.n	80071c8 <_vfiprintf_r+0xc0>
 80071b0:	465b      	mov	r3, fp
 80071b2:	4622      	mov	r2, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ff93 	bl	80070e2 <__sfputs_r>
 80071bc:	3001      	adds	r0, #1
 80071be:	f000 80aa 	beq.w	8007316 <_vfiprintf_r+0x20e>
 80071c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071c4:	445a      	add	r2, fp
 80071c6:	9209      	str	r2, [sp, #36]	; 0x24
 80071c8:	f89a 3000 	ldrb.w	r3, [sl]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80a2 	beq.w	8007316 <_vfiprintf_r+0x20e>
 80071d2:	2300      	movs	r3, #0
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071dc:	f10a 0a01 	add.w	sl, sl, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	9307      	str	r3, [sp, #28]
 80071e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ea:	4654      	mov	r4, sl
 80071ec:	2205      	movs	r2, #5
 80071ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f2:	4858      	ldr	r0, [pc, #352]	; (8007354 <_vfiprintf_r+0x24c>)
 80071f4:	f7f9 f824 	bl	8000240 <memchr>
 80071f8:	9a04      	ldr	r2, [sp, #16]
 80071fa:	b9d8      	cbnz	r0, 8007234 <_vfiprintf_r+0x12c>
 80071fc:	06d1      	lsls	r1, r2, #27
 80071fe:	bf44      	itt	mi
 8007200:	2320      	movmi	r3, #32
 8007202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007206:	0713      	lsls	r3, r2, #28
 8007208:	bf44      	itt	mi
 800720a:	232b      	movmi	r3, #43	; 0x2b
 800720c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007210:	f89a 3000 	ldrb.w	r3, [sl]
 8007214:	2b2a      	cmp	r3, #42	; 0x2a
 8007216:	d015      	beq.n	8007244 <_vfiprintf_r+0x13c>
 8007218:	9a07      	ldr	r2, [sp, #28]
 800721a:	4654      	mov	r4, sl
 800721c:	2000      	movs	r0, #0
 800721e:	f04f 0c0a 	mov.w	ip, #10
 8007222:	4621      	mov	r1, r4
 8007224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007228:	3b30      	subs	r3, #48	; 0x30
 800722a:	2b09      	cmp	r3, #9
 800722c:	d94e      	bls.n	80072cc <_vfiprintf_r+0x1c4>
 800722e:	b1b0      	cbz	r0, 800725e <_vfiprintf_r+0x156>
 8007230:	9207      	str	r2, [sp, #28]
 8007232:	e014      	b.n	800725e <_vfiprintf_r+0x156>
 8007234:	eba0 0308 	sub.w	r3, r0, r8
 8007238:	fa09 f303 	lsl.w	r3, r9, r3
 800723c:	4313      	orrs	r3, r2
 800723e:	9304      	str	r3, [sp, #16]
 8007240:	46a2      	mov	sl, r4
 8007242:	e7d2      	b.n	80071ea <_vfiprintf_r+0xe2>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	1d19      	adds	r1, r3, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	9103      	str	r1, [sp, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	bfbb      	ittet	lt
 8007250:	425b      	neglt	r3, r3
 8007252:	f042 0202 	orrlt.w	r2, r2, #2
 8007256:	9307      	strge	r3, [sp, #28]
 8007258:	9307      	strlt	r3, [sp, #28]
 800725a:	bfb8      	it	lt
 800725c:	9204      	strlt	r2, [sp, #16]
 800725e:	7823      	ldrb	r3, [r4, #0]
 8007260:	2b2e      	cmp	r3, #46	; 0x2e
 8007262:	d10c      	bne.n	800727e <_vfiprintf_r+0x176>
 8007264:	7863      	ldrb	r3, [r4, #1]
 8007266:	2b2a      	cmp	r3, #42	; 0x2a
 8007268:	d135      	bne.n	80072d6 <_vfiprintf_r+0x1ce>
 800726a:	9b03      	ldr	r3, [sp, #12]
 800726c:	1d1a      	adds	r2, r3, #4
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	9203      	str	r2, [sp, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfb8      	it	lt
 8007276:	f04f 33ff 	movlt.w	r3, #4294967295
 800727a:	3402      	adds	r4, #2
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007364 <_vfiprintf_r+0x25c>
 8007282:	7821      	ldrb	r1, [r4, #0]
 8007284:	2203      	movs	r2, #3
 8007286:	4650      	mov	r0, sl
 8007288:	f7f8 ffda 	bl	8000240 <memchr>
 800728c:	b140      	cbz	r0, 80072a0 <_vfiprintf_r+0x198>
 800728e:	2340      	movs	r3, #64	; 0x40
 8007290:	eba0 000a 	sub.w	r0, r0, sl
 8007294:	fa03 f000 	lsl.w	r0, r3, r0
 8007298:	9b04      	ldr	r3, [sp, #16]
 800729a:	4303      	orrs	r3, r0
 800729c:	3401      	adds	r4, #1
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a4:	482c      	ldr	r0, [pc, #176]	; (8007358 <_vfiprintf_r+0x250>)
 80072a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072aa:	2206      	movs	r2, #6
 80072ac:	f7f8 ffc8 	bl	8000240 <memchr>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d03f      	beq.n	8007334 <_vfiprintf_r+0x22c>
 80072b4:	4b29      	ldr	r3, [pc, #164]	; (800735c <_vfiprintf_r+0x254>)
 80072b6:	bb1b      	cbnz	r3, 8007300 <_vfiprintf_r+0x1f8>
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	3307      	adds	r3, #7
 80072bc:	f023 0307 	bic.w	r3, r3, #7
 80072c0:	3308      	adds	r3, #8
 80072c2:	9303      	str	r3, [sp, #12]
 80072c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c6:	443b      	add	r3, r7
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	e767      	b.n	800719c <_vfiprintf_r+0x94>
 80072cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80072d0:	460c      	mov	r4, r1
 80072d2:	2001      	movs	r0, #1
 80072d4:	e7a5      	b.n	8007222 <_vfiprintf_r+0x11a>
 80072d6:	2300      	movs	r3, #0
 80072d8:	3401      	adds	r4, #1
 80072da:	9305      	str	r3, [sp, #20]
 80072dc:	4619      	mov	r1, r3
 80072de:	f04f 0c0a 	mov.w	ip, #10
 80072e2:	4620      	mov	r0, r4
 80072e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e8:	3a30      	subs	r2, #48	; 0x30
 80072ea:	2a09      	cmp	r2, #9
 80072ec:	d903      	bls.n	80072f6 <_vfiprintf_r+0x1ee>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0c5      	beq.n	800727e <_vfiprintf_r+0x176>
 80072f2:	9105      	str	r1, [sp, #20]
 80072f4:	e7c3      	b.n	800727e <_vfiprintf_r+0x176>
 80072f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072fa:	4604      	mov	r4, r0
 80072fc:	2301      	movs	r3, #1
 80072fe:	e7f0      	b.n	80072e2 <_vfiprintf_r+0x1da>
 8007300:	ab03      	add	r3, sp, #12
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	462a      	mov	r2, r5
 8007306:	4b16      	ldr	r3, [pc, #88]	; (8007360 <_vfiprintf_r+0x258>)
 8007308:	a904      	add	r1, sp, #16
 800730a:	4630      	mov	r0, r6
 800730c:	f3af 8000 	nop.w
 8007310:	4607      	mov	r7, r0
 8007312:	1c78      	adds	r0, r7, #1
 8007314:	d1d6      	bne.n	80072c4 <_vfiprintf_r+0x1bc>
 8007316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007318:	07d9      	lsls	r1, r3, #31
 800731a:	d405      	bmi.n	8007328 <_vfiprintf_r+0x220>
 800731c:	89ab      	ldrh	r3, [r5, #12]
 800731e:	059a      	lsls	r2, r3, #22
 8007320:	d402      	bmi.n	8007328 <_vfiprintf_r+0x220>
 8007322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007324:	f000 fc35 	bl	8007b92 <__retarget_lock_release_recursive>
 8007328:	89ab      	ldrh	r3, [r5, #12]
 800732a:	065b      	lsls	r3, r3, #25
 800732c:	f53f af12 	bmi.w	8007154 <_vfiprintf_r+0x4c>
 8007330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007332:	e711      	b.n	8007158 <_vfiprintf_r+0x50>
 8007334:	ab03      	add	r3, sp, #12
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	462a      	mov	r2, r5
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <_vfiprintf_r+0x258>)
 800733c:	a904      	add	r1, sp, #16
 800733e:	4630      	mov	r0, r6
 8007340:	f000 f880 	bl	8007444 <_printf_i>
 8007344:	e7e4      	b.n	8007310 <_vfiprintf_r+0x208>
 8007346:	bf00      	nop
 8007348:	080083e0 	.word	0x080083e0
 800734c:	08008400 	.word	0x08008400
 8007350:	080083c0 	.word	0x080083c0
 8007354:	0800838c 	.word	0x0800838c
 8007358:	08008396 	.word	0x08008396
 800735c:	00000000 	.word	0x00000000
 8007360:	080070e3 	.word	0x080070e3
 8007364:	08008392 	.word	0x08008392

08007368 <_printf_common>:
 8007368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800736c:	4616      	mov	r6, r2
 800736e:	4699      	mov	r9, r3
 8007370:	688a      	ldr	r2, [r1, #8]
 8007372:	690b      	ldr	r3, [r1, #16]
 8007374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007378:	4293      	cmp	r3, r2
 800737a:	bfb8      	it	lt
 800737c:	4613      	movlt	r3, r2
 800737e:	6033      	str	r3, [r6, #0]
 8007380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007384:	4607      	mov	r7, r0
 8007386:	460c      	mov	r4, r1
 8007388:	b10a      	cbz	r2, 800738e <_printf_common+0x26>
 800738a:	3301      	adds	r3, #1
 800738c:	6033      	str	r3, [r6, #0]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	0699      	lsls	r1, r3, #26
 8007392:	bf42      	ittt	mi
 8007394:	6833      	ldrmi	r3, [r6, #0]
 8007396:	3302      	addmi	r3, #2
 8007398:	6033      	strmi	r3, [r6, #0]
 800739a:	6825      	ldr	r5, [r4, #0]
 800739c:	f015 0506 	ands.w	r5, r5, #6
 80073a0:	d106      	bne.n	80073b0 <_printf_common+0x48>
 80073a2:	f104 0a19 	add.w	sl, r4, #25
 80073a6:	68e3      	ldr	r3, [r4, #12]
 80073a8:	6832      	ldr	r2, [r6, #0]
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	42ab      	cmp	r3, r5
 80073ae:	dc26      	bgt.n	80073fe <_printf_common+0x96>
 80073b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073b4:	1e13      	subs	r3, r2, #0
 80073b6:	6822      	ldr	r2, [r4, #0]
 80073b8:	bf18      	it	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	0692      	lsls	r2, r2, #26
 80073be:	d42b      	bmi.n	8007418 <_printf_common+0xb0>
 80073c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c4:	4649      	mov	r1, r9
 80073c6:	4638      	mov	r0, r7
 80073c8:	47c0      	blx	r8
 80073ca:	3001      	adds	r0, #1
 80073cc:	d01e      	beq.n	800740c <_printf_common+0xa4>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	68e5      	ldr	r5, [r4, #12]
 80073d2:	6832      	ldr	r2, [r6, #0]
 80073d4:	f003 0306 	and.w	r3, r3, #6
 80073d8:	2b04      	cmp	r3, #4
 80073da:	bf08      	it	eq
 80073dc:	1aad      	subeq	r5, r5, r2
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	6922      	ldr	r2, [r4, #16]
 80073e2:	bf0c      	ite	eq
 80073e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073e8:	2500      	movne	r5, #0
 80073ea:	4293      	cmp	r3, r2
 80073ec:	bfc4      	itt	gt
 80073ee:	1a9b      	subgt	r3, r3, r2
 80073f0:	18ed      	addgt	r5, r5, r3
 80073f2:	2600      	movs	r6, #0
 80073f4:	341a      	adds	r4, #26
 80073f6:	42b5      	cmp	r5, r6
 80073f8:	d11a      	bne.n	8007430 <_printf_common+0xc8>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e008      	b.n	8007410 <_printf_common+0xa8>
 80073fe:	2301      	movs	r3, #1
 8007400:	4652      	mov	r2, sl
 8007402:	4649      	mov	r1, r9
 8007404:	4638      	mov	r0, r7
 8007406:	47c0      	blx	r8
 8007408:	3001      	adds	r0, #1
 800740a:	d103      	bne.n	8007414 <_printf_common+0xac>
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007414:	3501      	adds	r5, #1
 8007416:	e7c6      	b.n	80073a6 <_printf_common+0x3e>
 8007418:	18e1      	adds	r1, r4, r3
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	2030      	movs	r0, #48	; 0x30
 800741e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007422:	4422      	add	r2, r4
 8007424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800742c:	3302      	adds	r3, #2
 800742e:	e7c7      	b.n	80073c0 <_printf_common+0x58>
 8007430:	2301      	movs	r3, #1
 8007432:	4622      	mov	r2, r4
 8007434:	4649      	mov	r1, r9
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	3001      	adds	r0, #1
 800743c:	d0e6      	beq.n	800740c <_printf_common+0xa4>
 800743e:	3601      	adds	r6, #1
 8007440:	e7d9      	b.n	80073f6 <_printf_common+0x8e>
	...

08007444 <_printf_i>:
 8007444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007448:	7e0f      	ldrb	r7, [r1, #24]
 800744a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800744c:	2f78      	cmp	r7, #120	; 0x78
 800744e:	4691      	mov	r9, r2
 8007450:	4680      	mov	r8, r0
 8007452:	460c      	mov	r4, r1
 8007454:	469a      	mov	sl, r3
 8007456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800745a:	d807      	bhi.n	800746c <_printf_i+0x28>
 800745c:	2f62      	cmp	r7, #98	; 0x62
 800745e:	d80a      	bhi.n	8007476 <_printf_i+0x32>
 8007460:	2f00      	cmp	r7, #0
 8007462:	f000 80d8 	beq.w	8007616 <_printf_i+0x1d2>
 8007466:	2f58      	cmp	r7, #88	; 0x58
 8007468:	f000 80a3 	beq.w	80075b2 <_printf_i+0x16e>
 800746c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007474:	e03a      	b.n	80074ec <_printf_i+0xa8>
 8007476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800747a:	2b15      	cmp	r3, #21
 800747c:	d8f6      	bhi.n	800746c <_printf_i+0x28>
 800747e:	a101      	add	r1, pc, #4	; (adr r1, 8007484 <_printf_i+0x40>)
 8007480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007484:	080074dd 	.word	0x080074dd
 8007488:	080074f1 	.word	0x080074f1
 800748c:	0800746d 	.word	0x0800746d
 8007490:	0800746d 	.word	0x0800746d
 8007494:	0800746d 	.word	0x0800746d
 8007498:	0800746d 	.word	0x0800746d
 800749c:	080074f1 	.word	0x080074f1
 80074a0:	0800746d 	.word	0x0800746d
 80074a4:	0800746d 	.word	0x0800746d
 80074a8:	0800746d 	.word	0x0800746d
 80074ac:	0800746d 	.word	0x0800746d
 80074b0:	080075fd 	.word	0x080075fd
 80074b4:	08007521 	.word	0x08007521
 80074b8:	080075df 	.word	0x080075df
 80074bc:	0800746d 	.word	0x0800746d
 80074c0:	0800746d 	.word	0x0800746d
 80074c4:	0800761f 	.word	0x0800761f
 80074c8:	0800746d 	.word	0x0800746d
 80074cc:	08007521 	.word	0x08007521
 80074d0:	0800746d 	.word	0x0800746d
 80074d4:	0800746d 	.word	0x0800746d
 80074d8:	080075e7 	.word	0x080075e7
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	1d1a      	adds	r2, r3, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	602a      	str	r2, [r5, #0]
 80074e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074ec:	2301      	movs	r3, #1
 80074ee:	e0a3      	b.n	8007638 <_printf_i+0x1f4>
 80074f0:	6820      	ldr	r0, [r4, #0]
 80074f2:	6829      	ldr	r1, [r5, #0]
 80074f4:	0606      	lsls	r6, r0, #24
 80074f6:	f101 0304 	add.w	r3, r1, #4
 80074fa:	d50a      	bpl.n	8007512 <_printf_i+0xce>
 80074fc:	680e      	ldr	r6, [r1, #0]
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	2e00      	cmp	r6, #0
 8007502:	da03      	bge.n	800750c <_printf_i+0xc8>
 8007504:	232d      	movs	r3, #45	; 0x2d
 8007506:	4276      	negs	r6, r6
 8007508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750c:	485e      	ldr	r0, [pc, #376]	; (8007688 <_printf_i+0x244>)
 800750e:	230a      	movs	r3, #10
 8007510:	e019      	b.n	8007546 <_printf_i+0x102>
 8007512:	680e      	ldr	r6, [r1, #0]
 8007514:	602b      	str	r3, [r5, #0]
 8007516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800751a:	bf18      	it	ne
 800751c:	b236      	sxthne	r6, r6
 800751e:	e7ef      	b.n	8007500 <_printf_i+0xbc>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	6820      	ldr	r0, [r4, #0]
 8007524:	1d19      	adds	r1, r3, #4
 8007526:	6029      	str	r1, [r5, #0]
 8007528:	0601      	lsls	r1, r0, #24
 800752a:	d501      	bpl.n	8007530 <_printf_i+0xec>
 800752c:	681e      	ldr	r6, [r3, #0]
 800752e:	e002      	b.n	8007536 <_printf_i+0xf2>
 8007530:	0646      	lsls	r6, r0, #25
 8007532:	d5fb      	bpl.n	800752c <_printf_i+0xe8>
 8007534:	881e      	ldrh	r6, [r3, #0]
 8007536:	4854      	ldr	r0, [pc, #336]	; (8007688 <_printf_i+0x244>)
 8007538:	2f6f      	cmp	r7, #111	; 0x6f
 800753a:	bf0c      	ite	eq
 800753c:	2308      	moveq	r3, #8
 800753e:	230a      	movne	r3, #10
 8007540:	2100      	movs	r1, #0
 8007542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007546:	6865      	ldr	r5, [r4, #4]
 8007548:	60a5      	str	r5, [r4, #8]
 800754a:	2d00      	cmp	r5, #0
 800754c:	bfa2      	ittt	ge
 800754e:	6821      	ldrge	r1, [r4, #0]
 8007550:	f021 0104 	bicge.w	r1, r1, #4
 8007554:	6021      	strge	r1, [r4, #0]
 8007556:	b90e      	cbnz	r6, 800755c <_printf_i+0x118>
 8007558:	2d00      	cmp	r5, #0
 800755a:	d04d      	beq.n	80075f8 <_printf_i+0x1b4>
 800755c:	4615      	mov	r5, r2
 800755e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007562:	fb03 6711 	mls	r7, r3, r1, r6
 8007566:	5dc7      	ldrb	r7, [r0, r7]
 8007568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800756c:	4637      	mov	r7, r6
 800756e:	42bb      	cmp	r3, r7
 8007570:	460e      	mov	r6, r1
 8007572:	d9f4      	bls.n	800755e <_printf_i+0x11a>
 8007574:	2b08      	cmp	r3, #8
 8007576:	d10b      	bne.n	8007590 <_printf_i+0x14c>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	07de      	lsls	r6, r3, #31
 800757c:	d508      	bpl.n	8007590 <_printf_i+0x14c>
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6861      	ldr	r1, [r4, #4]
 8007582:	4299      	cmp	r1, r3
 8007584:	bfde      	ittt	le
 8007586:	2330      	movle	r3, #48	; 0x30
 8007588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800758c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007590:	1b52      	subs	r2, r2, r5
 8007592:	6122      	str	r2, [r4, #16]
 8007594:	f8cd a000 	str.w	sl, [sp]
 8007598:	464b      	mov	r3, r9
 800759a:	aa03      	add	r2, sp, #12
 800759c:	4621      	mov	r1, r4
 800759e:	4640      	mov	r0, r8
 80075a0:	f7ff fee2 	bl	8007368 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	d14c      	bne.n	8007642 <_printf_i+0x1fe>
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	b004      	add	sp, #16
 80075ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b2:	4835      	ldr	r0, [pc, #212]	; (8007688 <_printf_i+0x244>)
 80075b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075b8:	6829      	ldr	r1, [r5, #0]
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80075c0:	6029      	str	r1, [r5, #0]
 80075c2:	061d      	lsls	r5, r3, #24
 80075c4:	d514      	bpl.n	80075f0 <_printf_i+0x1ac>
 80075c6:	07df      	lsls	r7, r3, #31
 80075c8:	bf44      	itt	mi
 80075ca:	f043 0320 	orrmi.w	r3, r3, #32
 80075ce:	6023      	strmi	r3, [r4, #0]
 80075d0:	b91e      	cbnz	r6, 80075da <_printf_i+0x196>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	f023 0320 	bic.w	r3, r3, #32
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	2310      	movs	r3, #16
 80075dc:	e7b0      	b.n	8007540 <_printf_i+0xfc>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f043 0320 	orr.w	r3, r3, #32
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	2378      	movs	r3, #120	; 0x78
 80075e8:	4828      	ldr	r0, [pc, #160]	; (800768c <_printf_i+0x248>)
 80075ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ee:	e7e3      	b.n	80075b8 <_printf_i+0x174>
 80075f0:	0659      	lsls	r1, r3, #25
 80075f2:	bf48      	it	mi
 80075f4:	b2b6      	uxthmi	r6, r6
 80075f6:	e7e6      	b.n	80075c6 <_printf_i+0x182>
 80075f8:	4615      	mov	r5, r2
 80075fa:	e7bb      	b.n	8007574 <_printf_i+0x130>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	6826      	ldr	r6, [r4, #0]
 8007600:	6961      	ldr	r1, [r4, #20]
 8007602:	1d18      	adds	r0, r3, #4
 8007604:	6028      	str	r0, [r5, #0]
 8007606:	0635      	lsls	r5, r6, #24
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	d501      	bpl.n	8007610 <_printf_i+0x1cc>
 800760c:	6019      	str	r1, [r3, #0]
 800760e:	e002      	b.n	8007616 <_printf_i+0x1d2>
 8007610:	0670      	lsls	r0, r6, #25
 8007612:	d5fb      	bpl.n	800760c <_printf_i+0x1c8>
 8007614:	8019      	strh	r1, [r3, #0]
 8007616:	2300      	movs	r3, #0
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	4615      	mov	r5, r2
 800761c:	e7ba      	b.n	8007594 <_printf_i+0x150>
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	1d1a      	adds	r2, r3, #4
 8007622:	602a      	str	r2, [r5, #0]
 8007624:	681d      	ldr	r5, [r3, #0]
 8007626:	6862      	ldr	r2, [r4, #4]
 8007628:	2100      	movs	r1, #0
 800762a:	4628      	mov	r0, r5
 800762c:	f7f8 fe08 	bl	8000240 <memchr>
 8007630:	b108      	cbz	r0, 8007636 <_printf_i+0x1f2>
 8007632:	1b40      	subs	r0, r0, r5
 8007634:	6060      	str	r0, [r4, #4]
 8007636:	6863      	ldr	r3, [r4, #4]
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	2300      	movs	r3, #0
 800763c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007640:	e7a8      	b.n	8007594 <_printf_i+0x150>
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	462a      	mov	r2, r5
 8007646:	4649      	mov	r1, r9
 8007648:	4640      	mov	r0, r8
 800764a:	47d0      	blx	sl
 800764c:	3001      	adds	r0, #1
 800764e:	d0ab      	beq.n	80075a8 <_printf_i+0x164>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	079b      	lsls	r3, r3, #30
 8007654:	d413      	bmi.n	800767e <_printf_i+0x23a>
 8007656:	68e0      	ldr	r0, [r4, #12]
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	4298      	cmp	r0, r3
 800765c:	bfb8      	it	lt
 800765e:	4618      	movlt	r0, r3
 8007660:	e7a4      	b.n	80075ac <_printf_i+0x168>
 8007662:	2301      	movs	r3, #1
 8007664:	4632      	mov	r2, r6
 8007666:	4649      	mov	r1, r9
 8007668:	4640      	mov	r0, r8
 800766a:	47d0      	blx	sl
 800766c:	3001      	adds	r0, #1
 800766e:	d09b      	beq.n	80075a8 <_printf_i+0x164>
 8007670:	3501      	adds	r5, #1
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	9903      	ldr	r1, [sp, #12]
 8007676:	1a5b      	subs	r3, r3, r1
 8007678:	42ab      	cmp	r3, r5
 800767a:	dcf2      	bgt.n	8007662 <_printf_i+0x21e>
 800767c:	e7eb      	b.n	8007656 <_printf_i+0x212>
 800767e:	2500      	movs	r5, #0
 8007680:	f104 0619 	add.w	r6, r4, #25
 8007684:	e7f5      	b.n	8007672 <_printf_i+0x22e>
 8007686:	bf00      	nop
 8007688:	0800839d 	.word	0x0800839d
 800768c:	080083ae 	.word	0x080083ae

08007690 <__swbuf_r>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	460e      	mov	r6, r1
 8007694:	4614      	mov	r4, r2
 8007696:	4605      	mov	r5, r0
 8007698:	b118      	cbz	r0, 80076a2 <__swbuf_r+0x12>
 800769a:	6983      	ldr	r3, [r0, #24]
 800769c:	b90b      	cbnz	r3, 80076a2 <__swbuf_r+0x12>
 800769e:	f000 f9d9 	bl	8007a54 <__sinit>
 80076a2:	4b21      	ldr	r3, [pc, #132]	; (8007728 <__swbuf_r+0x98>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	d12b      	bne.n	8007700 <__swbuf_r+0x70>
 80076a8:	686c      	ldr	r4, [r5, #4]
 80076aa:	69a3      	ldr	r3, [r4, #24]
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	071a      	lsls	r2, r3, #28
 80076b2:	d52f      	bpl.n	8007714 <__swbuf_r+0x84>
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	b36b      	cbz	r3, 8007714 <__swbuf_r+0x84>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	6820      	ldr	r0, [r4, #0]
 80076bc:	1ac0      	subs	r0, r0, r3
 80076be:	6963      	ldr	r3, [r4, #20]
 80076c0:	b2f6      	uxtb	r6, r6
 80076c2:	4283      	cmp	r3, r0
 80076c4:	4637      	mov	r7, r6
 80076c6:	dc04      	bgt.n	80076d2 <__swbuf_r+0x42>
 80076c8:	4621      	mov	r1, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f92e 	bl	800792c <_fflush_r>
 80076d0:	bb30      	cbnz	r0, 8007720 <__swbuf_r+0x90>
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	60a3      	str	r3, [r4, #8]
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	6022      	str	r2, [r4, #0]
 80076de:	701e      	strb	r6, [r3, #0]
 80076e0:	6963      	ldr	r3, [r4, #20]
 80076e2:	3001      	adds	r0, #1
 80076e4:	4283      	cmp	r3, r0
 80076e6:	d004      	beq.n	80076f2 <__swbuf_r+0x62>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	07db      	lsls	r3, r3, #31
 80076ec:	d506      	bpl.n	80076fc <__swbuf_r+0x6c>
 80076ee:	2e0a      	cmp	r6, #10
 80076f0:	d104      	bne.n	80076fc <__swbuf_r+0x6c>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 f919 	bl	800792c <_fflush_r>
 80076fa:	b988      	cbnz	r0, 8007720 <__swbuf_r+0x90>
 80076fc:	4638      	mov	r0, r7
 80076fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <__swbuf_r+0x9c>)
 8007702:	429c      	cmp	r4, r3
 8007704:	d101      	bne.n	800770a <__swbuf_r+0x7a>
 8007706:	68ac      	ldr	r4, [r5, #8]
 8007708:	e7cf      	b.n	80076aa <__swbuf_r+0x1a>
 800770a:	4b09      	ldr	r3, [pc, #36]	; (8007730 <__swbuf_r+0xa0>)
 800770c:	429c      	cmp	r4, r3
 800770e:	bf08      	it	eq
 8007710:	68ec      	ldreq	r4, [r5, #12]
 8007712:	e7ca      	b.n	80076aa <__swbuf_r+0x1a>
 8007714:	4621      	mov	r1, r4
 8007716:	4628      	mov	r0, r5
 8007718:	f000 f80c 	bl	8007734 <__swsetup_r>
 800771c:	2800      	cmp	r0, #0
 800771e:	d0cb      	beq.n	80076b8 <__swbuf_r+0x28>
 8007720:	f04f 37ff 	mov.w	r7, #4294967295
 8007724:	e7ea      	b.n	80076fc <__swbuf_r+0x6c>
 8007726:	bf00      	nop
 8007728:	080083e0 	.word	0x080083e0
 800772c:	08008400 	.word	0x08008400
 8007730:	080083c0 	.word	0x080083c0

08007734 <__swsetup_r>:
 8007734:	4b32      	ldr	r3, [pc, #200]	; (8007800 <__swsetup_r+0xcc>)
 8007736:	b570      	push	{r4, r5, r6, lr}
 8007738:	681d      	ldr	r5, [r3, #0]
 800773a:	4606      	mov	r6, r0
 800773c:	460c      	mov	r4, r1
 800773e:	b125      	cbz	r5, 800774a <__swsetup_r+0x16>
 8007740:	69ab      	ldr	r3, [r5, #24]
 8007742:	b913      	cbnz	r3, 800774a <__swsetup_r+0x16>
 8007744:	4628      	mov	r0, r5
 8007746:	f000 f985 	bl	8007a54 <__sinit>
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <__swsetup_r+0xd0>)
 800774c:	429c      	cmp	r4, r3
 800774e:	d10f      	bne.n	8007770 <__swsetup_r+0x3c>
 8007750:	686c      	ldr	r4, [r5, #4]
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007758:	0719      	lsls	r1, r3, #28
 800775a:	d42c      	bmi.n	80077b6 <__swsetup_r+0x82>
 800775c:	06dd      	lsls	r5, r3, #27
 800775e:	d411      	bmi.n	8007784 <__swsetup_r+0x50>
 8007760:	2309      	movs	r3, #9
 8007762:	6033      	str	r3, [r6, #0]
 8007764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007768:	81a3      	strh	r3, [r4, #12]
 800776a:	f04f 30ff 	mov.w	r0, #4294967295
 800776e:	e03e      	b.n	80077ee <__swsetup_r+0xba>
 8007770:	4b25      	ldr	r3, [pc, #148]	; (8007808 <__swsetup_r+0xd4>)
 8007772:	429c      	cmp	r4, r3
 8007774:	d101      	bne.n	800777a <__swsetup_r+0x46>
 8007776:	68ac      	ldr	r4, [r5, #8]
 8007778:	e7eb      	b.n	8007752 <__swsetup_r+0x1e>
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <__swsetup_r+0xd8>)
 800777c:	429c      	cmp	r4, r3
 800777e:	bf08      	it	eq
 8007780:	68ec      	ldreq	r4, [r5, #12]
 8007782:	e7e6      	b.n	8007752 <__swsetup_r+0x1e>
 8007784:	0758      	lsls	r0, r3, #29
 8007786:	d512      	bpl.n	80077ae <__swsetup_r+0x7a>
 8007788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800778a:	b141      	cbz	r1, 800779e <__swsetup_r+0x6a>
 800778c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007790:	4299      	cmp	r1, r3
 8007792:	d002      	beq.n	800779a <__swsetup_r+0x66>
 8007794:	4630      	mov	r0, r6
 8007796:	f7ff f8ad 	bl	80068f4 <_free_r>
 800779a:	2300      	movs	r3, #0
 800779c:	6363      	str	r3, [r4, #52]	; 0x34
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	2300      	movs	r3, #0
 80077a8:	6063      	str	r3, [r4, #4]
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f043 0308 	orr.w	r3, r3, #8
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	b94b      	cbnz	r3, 80077ce <__swsetup_r+0x9a>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c4:	d003      	beq.n	80077ce <__swsetup_r+0x9a>
 80077c6:	4621      	mov	r1, r4
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 fa09 	bl	8007be0 <__smakebuf_r>
 80077ce:	89a0      	ldrh	r0, [r4, #12]
 80077d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077d4:	f010 0301 	ands.w	r3, r0, #1
 80077d8:	d00a      	beq.n	80077f0 <__swsetup_r+0xbc>
 80077da:	2300      	movs	r3, #0
 80077dc:	60a3      	str	r3, [r4, #8]
 80077de:	6963      	ldr	r3, [r4, #20]
 80077e0:	425b      	negs	r3, r3
 80077e2:	61a3      	str	r3, [r4, #24]
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	b943      	cbnz	r3, 80077fa <__swsetup_r+0xc6>
 80077e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077ec:	d1ba      	bne.n	8007764 <__swsetup_r+0x30>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	0781      	lsls	r1, r0, #30
 80077f2:	bf58      	it	pl
 80077f4:	6963      	ldrpl	r3, [r4, #20]
 80077f6:	60a3      	str	r3, [r4, #8]
 80077f8:	e7f4      	b.n	80077e4 <__swsetup_r+0xb0>
 80077fa:	2000      	movs	r0, #0
 80077fc:	e7f7      	b.n	80077ee <__swsetup_r+0xba>
 80077fe:	bf00      	nop
 8007800:	2000000c 	.word	0x2000000c
 8007804:	080083e0 	.word	0x080083e0
 8007808:	08008400 	.word	0x08008400
 800780c:	080083c0 	.word	0x080083c0

08007810 <abort>:
 8007810:	b508      	push	{r3, lr}
 8007812:	2006      	movs	r0, #6
 8007814:	f000 faa4 	bl	8007d60 <raise>
 8007818:	2001      	movs	r0, #1
 800781a:	f7f9 fca1 	bl	8001160 <_exit>
	...

08007820 <__sflush_r>:
 8007820:	898a      	ldrh	r2, [r1, #12]
 8007822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	4605      	mov	r5, r0
 8007828:	0710      	lsls	r0, r2, #28
 800782a:	460c      	mov	r4, r1
 800782c:	d458      	bmi.n	80078e0 <__sflush_r+0xc0>
 800782e:	684b      	ldr	r3, [r1, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	dc05      	bgt.n	8007840 <__sflush_r+0x20>
 8007834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	dc02      	bgt.n	8007840 <__sflush_r+0x20>
 800783a:	2000      	movs	r0, #0
 800783c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007842:	2e00      	cmp	r6, #0
 8007844:	d0f9      	beq.n	800783a <__sflush_r+0x1a>
 8007846:	2300      	movs	r3, #0
 8007848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800784c:	682f      	ldr	r7, [r5, #0]
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	d032      	beq.n	80078b8 <__sflush_r+0x98>
 8007852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	075a      	lsls	r2, r3, #29
 8007858:	d505      	bpl.n	8007866 <__sflush_r+0x46>
 800785a:	6863      	ldr	r3, [r4, #4]
 800785c:	1ac0      	subs	r0, r0, r3
 800785e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007860:	b10b      	cbz	r3, 8007866 <__sflush_r+0x46>
 8007862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007864:	1ac0      	subs	r0, r0, r3
 8007866:	2300      	movs	r3, #0
 8007868:	4602      	mov	r2, r0
 800786a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786c:	6a21      	ldr	r1, [r4, #32]
 800786e:	4628      	mov	r0, r5
 8007870:	47b0      	blx	r6
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	d106      	bne.n	8007886 <__sflush_r+0x66>
 8007878:	6829      	ldr	r1, [r5, #0]
 800787a:	291d      	cmp	r1, #29
 800787c:	d82c      	bhi.n	80078d8 <__sflush_r+0xb8>
 800787e:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <__sflush_r+0x108>)
 8007880:	40ca      	lsrs	r2, r1
 8007882:	07d6      	lsls	r6, r2, #31
 8007884:	d528      	bpl.n	80078d8 <__sflush_r+0xb8>
 8007886:	2200      	movs	r2, #0
 8007888:	6062      	str	r2, [r4, #4]
 800788a:	04d9      	lsls	r1, r3, #19
 800788c:	6922      	ldr	r2, [r4, #16]
 800788e:	6022      	str	r2, [r4, #0]
 8007890:	d504      	bpl.n	800789c <__sflush_r+0x7c>
 8007892:	1c42      	adds	r2, r0, #1
 8007894:	d101      	bne.n	800789a <__sflush_r+0x7a>
 8007896:	682b      	ldr	r3, [r5, #0]
 8007898:	b903      	cbnz	r3, 800789c <__sflush_r+0x7c>
 800789a:	6560      	str	r0, [r4, #84]	; 0x54
 800789c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800789e:	602f      	str	r7, [r5, #0]
 80078a0:	2900      	cmp	r1, #0
 80078a2:	d0ca      	beq.n	800783a <__sflush_r+0x1a>
 80078a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d002      	beq.n	80078b2 <__sflush_r+0x92>
 80078ac:	4628      	mov	r0, r5
 80078ae:	f7ff f821 	bl	80068f4 <_free_r>
 80078b2:	2000      	movs	r0, #0
 80078b4:	6360      	str	r0, [r4, #52]	; 0x34
 80078b6:	e7c1      	b.n	800783c <__sflush_r+0x1c>
 80078b8:	6a21      	ldr	r1, [r4, #32]
 80078ba:	2301      	movs	r3, #1
 80078bc:	4628      	mov	r0, r5
 80078be:	47b0      	blx	r6
 80078c0:	1c41      	adds	r1, r0, #1
 80078c2:	d1c7      	bne.n	8007854 <__sflush_r+0x34>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0c4      	beq.n	8007854 <__sflush_r+0x34>
 80078ca:	2b1d      	cmp	r3, #29
 80078cc:	d001      	beq.n	80078d2 <__sflush_r+0xb2>
 80078ce:	2b16      	cmp	r3, #22
 80078d0:	d101      	bne.n	80078d6 <__sflush_r+0xb6>
 80078d2:	602f      	str	r7, [r5, #0]
 80078d4:	e7b1      	b.n	800783a <__sflush_r+0x1a>
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	e7ad      	b.n	800783c <__sflush_r+0x1c>
 80078e0:	690f      	ldr	r7, [r1, #16]
 80078e2:	2f00      	cmp	r7, #0
 80078e4:	d0a9      	beq.n	800783a <__sflush_r+0x1a>
 80078e6:	0793      	lsls	r3, r2, #30
 80078e8:	680e      	ldr	r6, [r1, #0]
 80078ea:	bf08      	it	eq
 80078ec:	694b      	ldreq	r3, [r1, #20]
 80078ee:	600f      	str	r7, [r1, #0]
 80078f0:	bf18      	it	ne
 80078f2:	2300      	movne	r3, #0
 80078f4:	eba6 0807 	sub.w	r8, r6, r7
 80078f8:	608b      	str	r3, [r1, #8]
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	dd9c      	ble.n	800783a <__sflush_r+0x1a>
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007904:	4643      	mov	r3, r8
 8007906:	463a      	mov	r2, r7
 8007908:	4628      	mov	r0, r5
 800790a:	47b0      	blx	r6
 800790c:	2800      	cmp	r0, #0
 800790e:	dc06      	bgt.n	800791e <__sflush_r+0xfe>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e78e      	b.n	800783c <__sflush_r+0x1c>
 800791e:	4407      	add	r7, r0
 8007920:	eba8 0800 	sub.w	r8, r8, r0
 8007924:	e7e9      	b.n	80078fa <__sflush_r+0xda>
 8007926:	bf00      	nop
 8007928:	20400001 	.word	0x20400001

0800792c <_fflush_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	690b      	ldr	r3, [r1, #16]
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	b913      	cbnz	r3, 800793c <_fflush_r+0x10>
 8007936:	2500      	movs	r5, #0
 8007938:	4628      	mov	r0, r5
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	b118      	cbz	r0, 8007946 <_fflush_r+0x1a>
 800793e:	6983      	ldr	r3, [r0, #24]
 8007940:	b90b      	cbnz	r3, 8007946 <_fflush_r+0x1a>
 8007942:	f000 f887 	bl	8007a54 <__sinit>
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <_fflush_r+0x6c>)
 8007948:	429c      	cmp	r4, r3
 800794a:	d11b      	bne.n	8007984 <_fflush_r+0x58>
 800794c:	686c      	ldr	r4, [r5, #4]
 800794e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0ef      	beq.n	8007936 <_fflush_r+0xa>
 8007956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007958:	07d0      	lsls	r0, r2, #31
 800795a:	d404      	bmi.n	8007966 <_fflush_r+0x3a>
 800795c:	0599      	lsls	r1, r3, #22
 800795e:	d402      	bmi.n	8007966 <_fflush_r+0x3a>
 8007960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007962:	f000 f915 	bl	8007b90 <__retarget_lock_acquire_recursive>
 8007966:	4628      	mov	r0, r5
 8007968:	4621      	mov	r1, r4
 800796a:	f7ff ff59 	bl	8007820 <__sflush_r>
 800796e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007970:	07da      	lsls	r2, r3, #31
 8007972:	4605      	mov	r5, r0
 8007974:	d4e0      	bmi.n	8007938 <_fflush_r+0xc>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	059b      	lsls	r3, r3, #22
 800797a:	d4dd      	bmi.n	8007938 <_fflush_r+0xc>
 800797c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800797e:	f000 f908 	bl	8007b92 <__retarget_lock_release_recursive>
 8007982:	e7d9      	b.n	8007938 <_fflush_r+0xc>
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <_fflush_r+0x70>)
 8007986:	429c      	cmp	r4, r3
 8007988:	d101      	bne.n	800798e <_fflush_r+0x62>
 800798a:	68ac      	ldr	r4, [r5, #8]
 800798c:	e7df      	b.n	800794e <_fflush_r+0x22>
 800798e:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <_fflush_r+0x74>)
 8007990:	429c      	cmp	r4, r3
 8007992:	bf08      	it	eq
 8007994:	68ec      	ldreq	r4, [r5, #12]
 8007996:	e7da      	b.n	800794e <_fflush_r+0x22>
 8007998:	080083e0 	.word	0x080083e0
 800799c:	08008400 	.word	0x08008400
 80079a0:	080083c0 	.word	0x080083c0

080079a4 <std>:
 80079a4:	2300      	movs	r3, #0
 80079a6:	b510      	push	{r4, lr}
 80079a8:	4604      	mov	r4, r0
 80079aa:	e9c0 3300 	strd	r3, r3, [r0]
 80079ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079b2:	6083      	str	r3, [r0, #8]
 80079b4:	8181      	strh	r1, [r0, #12]
 80079b6:	6643      	str	r3, [r0, #100]	; 0x64
 80079b8:	81c2      	strh	r2, [r0, #14]
 80079ba:	6183      	str	r3, [r0, #24]
 80079bc:	4619      	mov	r1, r3
 80079be:	2208      	movs	r2, #8
 80079c0:	305c      	adds	r0, #92	; 0x5c
 80079c2:	f7fe ff8f 	bl	80068e4 <memset>
 80079c6:	4b05      	ldr	r3, [pc, #20]	; (80079dc <std+0x38>)
 80079c8:	6263      	str	r3, [r4, #36]	; 0x24
 80079ca:	4b05      	ldr	r3, [pc, #20]	; (80079e0 <std+0x3c>)
 80079cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <std+0x40>)
 80079d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <std+0x44>)
 80079d4:	6224      	str	r4, [r4, #32]
 80079d6:	6323      	str	r3, [r4, #48]	; 0x30
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	bf00      	nop
 80079dc:	08007d99 	.word	0x08007d99
 80079e0:	08007dbb 	.word	0x08007dbb
 80079e4:	08007df3 	.word	0x08007df3
 80079e8:	08007e17 	.word	0x08007e17

080079ec <_cleanup_r>:
 80079ec:	4901      	ldr	r1, [pc, #4]	; (80079f4 <_cleanup_r+0x8>)
 80079ee:	f000 b8af 	b.w	8007b50 <_fwalk_reent>
 80079f2:	bf00      	nop
 80079f4:	0800792d 	.word	0x0800792d

080079f8 <__sfmoreglue>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	2268      	movs	r2, #104	; 0x68
 80079fc:	1e4d      	subs	r5, r1, #1
 80079fe:	4355      	muls	r5, r2
 8007a00:	460e      	mov	r6, r1
 8007a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a06:	f7fe ffe1 	bl	80069cc <_malloc_r>
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	b140      	cbz	r0, 8007a20 <__sfmoreglue+0x28>
 8007a0e:	2100      	movs	r1, #0
 8007a10:	e9c0 1600 	strd	r1, r6, [r0]
 8007a14:	300c      	adds	r0, #12
 8007a16:	60a0      	str	r0, [r4, #8]
 8007a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a1c:	f7fe ff62 	bl	80068e4 <memset>
 8007a20:	4620      	mov	r0, r4
 8007a22:	bd70      	pop	{r4, r5, r6, pc}

08007a24 <__sfp_lock_acquire>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__sfp_lock_acquire+0x8>)
 8007a26:	f000 b8b3 	b.w	8007b90 <__retarget_lock_acquire_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	200004b9 	.word	0x200004b9

08007a30 <__sfp_lock_release>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__sfp_lock_release+0x8>)
 8007a32:	f000 b8ae 	b.w	8007b92 <__retarget_lock_release_recursive>
 8007a36:	bf00      	nop
 8007a38:	200004b9 	.word	0x200004b9

08007a3c <__sinit_lock_acquire>:
 8007a3c:	4801      	ldr	r0, [pc, #4]	; (8007a44 <__sinit_lock_acquire+0x8>)
 8007a3e:	f000 b8a7 	b.w	8007b90 <__retarget_lock_acquire_recursive>
 8007a42:	bf00      	nop
 8007a44:	200004ba 	.word	0x200004ba

08007a48 <__sinit_lock_release>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__sinit_lock_release+0x8>)
 8007a4a:	f000 b8a2 	b.w	8007b92 <__retarget_lock_release_recursive>
 8007a4e:	bf00      	nop
 8007a50:	200004ba 	.word	0x200004ba

08007a54 <__sinit>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4604      	mov	r4, r0
 8007a58:	f7ff fff0 	bl	8007a3c <__sinit_lock_acquire>
 8007a5c:	69a3      	ldr	r3, [r4, #24]
 8007a5e:	b11b      	cbz	r3, 8007a68 <__sinit+0x14>
 8007a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a64:	f7ff bff0 	b.w	8007a48 <__sinit_lock_release>
 8007a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <__sinit+0x68>)
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <__sinit+0x6c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	bf04      	itt	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	61a3      	streq	r3, [r4, #24]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f820 	bl	8007ac4 <__sfp>
 8007a84:	6060      	str	r0, [r4, #4]
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 f81c 	bl	8007ac4 <__sfp>
 8007a8c:	60a0      	str	r0, [r4, #8]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f818 	bl	8007ac4 <__sfp>
 8007a94:	2200      	movs	r2, #0
 8007a96:	60e0      	str	r0, [r4, #12]
 8007a98:	2104      	movs	r1, #4
 8007a9a:	6860      	ldr	r0, [r4, #4]
 8007a9c:	f7ff ff82 	bl	80079a4 <std>
 8007aa0:	68a0      	ldr	r0, [r4, #8]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	2109      	movs	r1, #9
 8007aa6:	f7ff ff7d 	bl	80079a4 <std>
 8007aaa:	68e0      	ldr	r0, [r4, #12]
 8007aac:	2202      	movs	r2, #2
 8007aae:	2112      	movs	r1, #18
 8007ab0:	f7ff ff78 	bl	80079a4 <std>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	61a3      	str	r3, [r4, #24]
 8007ab8:	e7d2      	b.n	8007a60 <__sinit+0xc>
 8007aba:	bf00      	nop
 8007abc:	080082d8 	.word	0x080082d8
 8007ac0:	080079ed 	.word	0x080079ed

08007ac4 <__sfp>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	f7ff ffac 	bl	8007a24 <__sfp_lock_acquire>
 8007acc:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <__sfp+0x84>)
 8007ace:	681e      	ldr	r6, [r3, #0]
 8007ad0:	69b3      	ldr	r3, [r6, #24]
 8007ad2:	b913      	cbnz	r3, 8007ada <__sfp+0x16>
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff ffbd 	bl	8007a54 <__sinit>
 8007ada:	3648      	adds	r6, #72	; 0x48
 8007adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	d503      	bpl.n	8007aec <__sfp+0x28>
 8007ae4:	6833      	ldr	r3, [r6, #0]
 8007ae6:	b30b      	cbz	r3, 8007b2c <__sfp+0x68>
 8007ae8:	6836      	ldr	r6, [r6, #0]
 8007aea:	e7f7      	b.n	8007adc <__sfp+0x18>
 8007aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007af0:	b9d5      	cbnz	r5, 8007b28 <__sfp+0x64>
 8007af2:	4b16      	ldr	r3, [pc, #88]	; (8007b4c <__sfp+0x88>)
 8007af4:	60e3      	str	r3, [r4, #12]
 8007af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007afa:	6665      	str	r5, [r4, #100]	; 0x64
 8007afc:	f000 f847 	bl	8007b8e <__retarget_lock_init_recursive>
 8007b00:	f7ff ff96 	bl	8007a30 <__sfp_lock_release>
 8007b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b0c:	6025      	str	r5, [r4, #0]
 8007b0e:	61a5      	str	r5, [r4, #24]
 8007b10:	2208      	movs	r2, #8
 8007b12:	4629      	mov	r1, r5
 8007b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b18:	f7fe fee4 	bl	80068e4 <memset>
 8007b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b24:	4620      	mov	r0, r4
 8007b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b28:	3468      	adds	r4, #104	; 0x68
 8007b2a:	e7d9      	b.n	8007ae0 <__sfp+0x1c>
 8007b2c:	2104      	movs	r1, #4
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff ff62 	bl	80079f8 <__sfmoreglue>
 8007b34:	4604      	mov	r4, r0
 8007b36:	6030      	str	r0, [r6, #0]
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d1d5      	bne.n	8007ae8 <__sfp+0x24>
 8007b3c:	f7ff ff78 	bl	8007a30 <__sfp_lock_release>
 8007b40:	230c      	movs	r3, #12
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	e7ee      	b.n	8007b24 <__sfp+0x60>
 8007b46:	bf00      	nop
 8007b48:	080082d8 	.word	0x080082d8
 8007b4c:	ffff0001 	.word	0xffff0001

08007b50 <_fwalk_reent>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4606      	mov	r6, r0
 8007b56:	4688      	mov	r8, r1
 8007b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b5c:	2700      	movs	r7, #0
 8007b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b62:	f1b9 0901 	subs.w	r9, r9, #1
 8007b66:	d505      	bpl.n	8007b74 <_fwalk_reent+0x24>
 8007b68:	6824      	ldr	r4, [r4, #0]
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	d1f7      	bne.n	8007b5e <_fwalk_reent+0xe>
 8007b6e:	4638      	mov	r0, r7
 8007b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b74:	89ab      	ldrh	r3, [r5, #12]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d907      	bls.n	8007b8a <_fwalk_reent+0x3a>
 8007b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	d003      	beq.n	8007b8a <_fwalk_reent+0x3a>
 8007b82:	4629      	mov	r1, r5
 8007b84:	4630      	mov	r0, r6
 8007b86:	47c0      	blx	r8
 8007b88:	4307      	orrs	r7, r0
 8007b8a:	3568      	adds	r5, #104	; 0x68
 8007b8c:	e7e9      	b.n	8007b62 <_fwalk_reent+0x12>

08007b8e <__retarget_lock_init_recursive>:
 8007b8e:	4770      	bx	lr

08007b90 <__retarget_lock_acquire_recursive>:
 8007b90:	4770      	bx	lr

08007b92 <__retarget_lock_release_recursive>:
 8007b92:	4770      	bx	lr

08007b94 <__swhatbuf_r>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	b096      	sub	sp, #88	; 0x58
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	461d      	mov	r5, r3
 8007ba4:	da08      	bge.n	8007bb8 <__swhatbuf_r+0x24>
 8007ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	602a      	str	r2, [r5, #0]
 8007bae:	061a      	lsls	r2, r3, #24
 8007bb0:	d410      	bmi.n	8007bd4 <__swhatbuf_r+0x40>
 8007bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bb6:	e00e      	b.n	8007bd6 <__swhatbuf_r+0x42>
 8007bb8:	466a      	mov	r2, sp
 8007bba:	f000 f953 	bl	8007e64 <_fstat_r>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	dbf1      	blt.n	8007ba6 <__swhatbuf_r+0x12>
 8007bc2:	9a01      	ldr	r2, [sp, #4]
 8007bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bcc:	425a      	negs	r2, r3
 8007bce:	415a      	adcs	r2, r3
 8007bd0:	602a      	str	r2, [r5, #0]
 8007bd2:	e7ee      	b.n	8007bb2 <__swhatbuf_r+0x1e>
 8007bd4:	2340      	movs	r3, #64	; 0x40
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	b016      	add	sp, #88	; 0x58
 8007bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007be0 <__smakebuf_r>:
 8007be0:	898b      	ldrh	r3, [r1, #12]
 8007be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007be4:	079d      	lsls	r5, r3, #30
 8007be6:	4606      	mov	r6, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	d507      	bpl.n	8007bfc <__smakebuf_r+0x1c>
 8007bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	6163      	str	r3, [r4, #20]
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	ab01      	add	r3, sp, #4
 8007bfe:	466a      	mov	r2, sp
 8007c00:	f7ff ffc8 	bl	8007b94 <__swhatbuf_r>
 8007c04:	9900      	ldr	r1, [sp, #0]
 8007c06:	4605      	mov	r5, r0
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7fe fedf 	bl	80069cc <_malloc_r>
 8007c0e:	b948      	cbnz	r0, 8007c24 <__smakebuf_r+0x44>
 8007c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c14:	059a      	lsls	r2, r3, #22
 8007c16:	d4ef      	bmi.n	8007bf8 <__smakebuf_r+0x18>
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	f043 0302 	orr.w	r3, r3, #2
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	e7e3      	b.n	8007bec <__smakebuf_r+0xc>
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <__smakebuf_r+0x7c>)
 8007c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	6020      	str	r0, [r4, #0]
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	9b00      	ldr	r3, [sp, #0]
 8007c34:	6163      	str	r3, [r4, #20]
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	6120      	str	r0, [r4, #16]
 8007c3a:	b15b      	cbz	r3, 8007c54 <__smakebuf_r+0x74>
 8007c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c40:	4630      	mov	r0, r6
 8007c42:	f000 f921 	bl	8007e88 <_isatty_r>
 8007c46:	b128      	cbz	r0, 8007c54 <__smakebuf_r+0x74>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f023 0303 	bic.w	r3, r3, #3
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	89a0      	ldrh	r0, [r4, #12]
 8007c56:	4305      	orrs	r5, r0
 8007c58:	81a5      	strh	r5, [r4, #12]
 8007c5a:	e7cd      	b.n	8007bf8 <__smakebuf_r+0x18>
 8007c5c:	080079ed 	.word	0x080079ed

08007c60 <memcpy>:
 8007c60:	440a      	add	r2, r1
 8007c62:	4291      	cmp	r1, r2
 8007c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c68:	d100      	bne.n	8007c6c <memcpy+0xc>
 8007c6a:	4770      	bx	lr
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c76:	4291      	cmp	r1, r2
 8007c78:	d1f9      	bne.n	8007c6e <memcpy+0xe>
 8007c7a:	bd10      	pop	{r4, pc}

08007c7c <memmove>:
 8007c7c:	4288      	cmp	r0, r1
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	eb01 0402 	add.w	r4, r1, r2
 8007c84:	d902      	bls.n	8007c8c <memmove+0x10>
 8007c86:	4284      	cmp	r4, r0
 8007c88:	4623      	mov	r3, r4
 8007c8a:	d807      	bhi.n	8007c9c <memmove+0x20>
 8007c8c:	1e43      	subs	r3, r0, #1
 8007c8e:	42a1      	cmp	r1, r4
 8007c90:	d008      	beq.n	8007ca4 <memmove+0x28>
 8007c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c9a:	e7f8      	b.n	8007c8e <memmove+0x12>
 8007c9c:	4402      	add	r2, r0
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	428a      	cmp	r2, r1
 8007ca2:	d100      	bne.n	8007ca6 <memmove+0x2a>
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cae:	e7f7      	b.n	8007ca0 <memmove+0x24>

08007cb0 <_realloc_r>:
 8007cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	460e      	mov	r6, r1
 8007cba:	b921      	cbnz	r1, 8007cc6 <_realloc_r+0x16>
 8007cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	f7fe be83 	b.w	80069cc <_malloc_r>
 8007cc6:	b92a      	cbnz	r2, 8007cd4 <_realloc_r+0x24>
 8007cc8:	f7fe fe14 	bl	80068f4 <_free_r>
 8007ccc:	4625      	mov	r5, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd4:	f000 f8fa 	bl	8007ecc <_malloc_usable_size_r>
 8007cd8:	4284      	cmp	r4, r0
 8007cda:	4607      	mov	r7, r0
 8007cdc:	d802      	bhi.n	8007ce4 <_realloc_r+0x34>
 8007cde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ce2:	d812      	bhi.n	8007d0a <_realloc_r+0x5a>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	f7fe fe70 	bl	80069cc <_malloc_r>
 8007cec:	4605      	mov	r5, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d0ed      	beq.n	8007cce <_realloc_r+0x1e>
 8007cf2:	42bc      	cmp	r4, r7
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	bf28      	it	cs
 8007cfa:	463a      	movcs	r2, r7
 8007cfc:	f7ff ffb0 	bl	8007c60 <memcpy>
 8007d00:	4631      	mov	r1, r6
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7fe fdf6 	bl	80068f4 <_free_r>
 8007d08:	e7e1      	b.n	8007cce <_realloc_r+0x1e>
 8007d0a:	4635      	mov	r5, r6
 8007d0c:	e7df      	b.n	8007cce <_realloc_r+0x1e>

08007d0e <_raise_r>:
 8007d0e:	291f      	cmp	r1, #31
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4604      	mov	r4, r0
 8007d14:	460d      	mov	r5, r1
 8007d16:	d904      	bls.n	8007d22 <_raise_r+0x14>
 8007d18:	2316      	movs	r3, #22
 8007d1a:	6003      	str	r3, [r0, #0]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	bd38      	pop	{r3, r4, r5, pc}
 8007d22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d24:	b112      	cbz	r2, 8007d2c <_raise_r+0x1e>
 8007d26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d2a:	b94b      	cbnz	r3, 8007d40 <_raise_r+0x32>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 f831 	bl	8007d94 <_getpid_r>
 8007d32:	462a      	mov	r2, r5
 8007d34:	4601      	mov	r1, r0
 8007d36:	4620      	mov	r0, r4
 8007d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d3c:	f000 b818 	b.w	8007d70 <_kill_r>
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d00a      	beq.n	8007d5a <_raise_r+0x4c>
 8007d44:	1c59      	adds	r1, r3, #1
 8007d46:	d103      	bne.n	8007d50 <_raise_r+0x42>
 8007d48:	2316      	movs	r3, #22
 8007d4a:	6003      	str	r3, [r0, #0]
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	e7e7      	b.n	8007d20 <_raise_r+0x12>
 8007d50:	2400      	movs	r4, #0
 8007d52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d56:	4628      	mov	r0, r5
 8007d58:	4798      	blx	r3
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e7e0      	b.n	8007d20 <_raise_r+0x12>
	...

08007d60 <raise>:
 8007d60:	4b02      	ldr	r3, [pc, #8]	; (8007d6c <raise+0xc>)
 8007d62:	4601      	mov	r1, r0
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	f7ff bfd2 	b.w	8007d0e <_raise_r>
 8007d6a:	bf00      	nop
 8007d6c:	2000000c 	.word	0x2000000c

08007d70 <_kill_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d07      	ldr	r5, [pc, #28]	; (8007d90 <_kill_r+0x20>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	f7f9 f9df 	bl	8001140 <_kill>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	d102      	bne.n	8007d8c <_kill_r+0x1c>
 8007d86:	682b      	ldr	r3, [r5, #0]
 8007d88:	b103      	cbz	r3, 8007d8c <_kill_r+0x1c>
 8007d8a:	6023      	str	r3, [r4, #0]
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
 8007d8e:	bf00      	nop
 8007d90:	200004b4 	.word	0x200004b4

08007d94 <_getpid_r>:
 8007d94:	f7f9 b9cc 	b.w	8001130 <_getpid>

08007d98 <__sread>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	f000 f89c 	bl	8007edc <_read_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	bfab      	itete	ge
 8007da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007daa:	89a3      	ldrhlt	r3, [r4, #12]
 8007dac:	181b      	addge	r3, r3, r0
 8007dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007db2:	bfac      	ite	ge
 8007db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007db6:	81a3      	strhlt	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__swrite>:
 8007dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	898b      	ldrh	r3, [r1, #12]
 8007dc2:	05db      	lsls	r3, r3, #23
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4616      	mov	r6, r2
 8007dca:	d505      	bpl.n	8007dd8 <__swrite+0x1e>
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f000 f868 	bl	8007ea8 <_lseek_r>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	4628      	mov	r0, r5
 8007dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	f000 b817 	b.w	8007e20 <_write_r>

08007df2 <__sseek>:
 8007df2:	b510      	push	{r4, lr}
 8007df4:	460c      	mov	r4, r1
 8007df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfa:	f000 f855 	bl	8007ea8 <_lseek_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	bf15      	itete	ne
 8007e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e0e:	81a3      	strheq	r3, [r4, #12]
 8007e10:	bf18      	it	ne
 8007e12:	81a3      	strhne	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__sclose>:
 8007e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1a:	f000 b813 	b.w	8007e44 <_close_r>
	...

08007e20 <_write_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d07      	ldr	r5, [pc, #28]	; (8007e40 <_write_r+0x20>)
 8007e24:	4604      	mov	r4, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	602a      	str	r2, [r5, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f7f9 f9bd 	bl	80011ae <_write>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_write_r+0x1e>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_write_r+0x1e>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	200004b4 	.word	0x200004b4

08007e44 <_close_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d06      	ldr	r5, [pc, #24]	; (8007e60 <_close_r+0x1c>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	f7f9 f9c9 	bl	80011e6 <_close>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_close_r+0x1a>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_close_r+0x1a>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	200004b4 	.word	0x200004b4

08007e64 <_fstat_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_fstat_r+0x20>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7f9 f9c4 	bl	80011fe <_fstat>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_fstat_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_fstat_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	200004b4 	.word	0x200004b4

08007e88 <_isatty_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d06      	ldr	r5, [pc, #24]	; (8007ea4 <_isatty_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7f9 f9c3 	bl	800121e <_isatty>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_isatty_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_isatty_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	200004b4 	.word	0x200004b4

08007ea8 <_lseek_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d07      	ldr	r5, [pc, #28]	; (8007ec8 <_lseek_r+0x20>)
 8007eac:	4604      	mov	r4, r0
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	602a      	str	r2, [r5, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f7f9 f9bc 	bl	8001234 <_lseek>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_lseek_r+0x1e>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_lseek_r+0x1e>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	200004b4 	.word	0x200004b4

08007ecc <_malloc_usable_size_r>:
 8007ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ed0:	1f18      	subs	r0, r3, #4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bfbc      	itt	lt
 8007ed6:	580b      	ldrlt	r3, [r1, r0]
 8007ed8:	18c0      	addlt	r0, r0, r3
 8007eda:	4770      	bx	lr

08007edc <_read_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	; (8007efc <_read_r+0x20>)
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	602a      	str	r2, [r5, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7f9 f942 	bl	8001174 <_read>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_read_r+0x1e>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_read_r+0x1e>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	200004b4 	.word	0x200004b4

08007f00 <_init>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr

08007f0c <_fini>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr

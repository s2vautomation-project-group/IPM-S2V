
Config_with_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006290  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006600  08006600  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006608  08006608  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  08006680  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08006680  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f435  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235a  00000000  00000000  0002f4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00031830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00032540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023080  00000000  00000000  00033148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe3c  00000000  00000000  000561c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0e85  00000000  00000000  00066004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136e89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  00136edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006408 	.word	0x08006408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006408 	.word	0x08006408

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b974 	b.w	8000bfc <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	4604      	mov	r4, r0
 8000934:	468e      	mov	lr, r1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d14d      	bne.n	80009d6 <__udivmoddi4+0xaa>
 800093a:	428a      	cmp	r2, r1
 800093c:	4694      	mov	ip, r2
 800093e:	d969      	bls.n	8000a14 <__udivmoddi4+0xe8>
 8000940:	fab2 f282 	clz	r2, r2
 8000944:	b152      	cbz	r2, 800095c <__udivmoddi4+0x30>
 8000946:	fa01 f302 	lsl.w	r3, r1, r2
 800094a:	f1c2 0120 	rsb	r1, r2, #32
 800094e:	fa20 f101 	lsr.w	r1, r0, r1
 8000952:	fa0c fc02 	lsl.w	ip, ip, r2
 8000956:	ea41 0e03 	orr.w	lr, r1, r3
 800095a:	4094      	lsls	r4, r2
 800095c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000960:	0c21      	lsrs	r1, r4, #16
 8000962:	fbbe f6f8 	udiv	r6, lr, r8
 8000966:	fa1f f78c 	uxth.w	r7, ip
 800096a:	fb08 e316 	mls	r3, r8, r6, lr
 800096e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000972:	fb06 f107 	mul.w	r1, r6, r7
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000982:	f080 811f 	bcs.w	8000bc4 <__udivmoddi4+0x298>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 811c 	bls.w	8000bc4 <__udivmoddi4+0x298>
 800098c:	3e02      	subs	r6, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a5b      	subs	r3, r3, r1
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb3 f0f8 	udiv	r0, r3, r8
 8000998:	fb08 3310 	mls	r3, r8, r0, r3
 800099c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009a0:	fb00 f707 	mul.w	r7, r0, r7
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x92>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b0:	f080 810a 	bcs.w	8000bc8 <__udivmoddi4+0x29c>
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	f240 8107 	bls.w	8000bc8 <__udivmoddi4+0x29c>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c2:	1be4      	subs	r4, r4, r7
 80009c4:	2600      	movs	r6, #0
 80009c6:	b11d      	cbz	r5, 80009d0 <__udivmoddi4+0xa4>
 80009c8:	40d4      	lsrs	r4, r2
 80009ca:	2300      	movs	r3, #0
 80009cc:	e9c5 4300 	strd	r4, r3, [r5]
 80009d0:	4631      	mov	r1, r6
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d909      	bls.n	80009ee <__udivmoddi4+0xc2>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	f000 80ef 	beq.w	8000bbe <__udivmoddi4+0x292>
 80009e0:	2600      	movs	r6, #0
 80009e2:	e9c5 0100 	strd	r0, r1, [r5]
 80009e6:	4630      	mov	r0, r6
 80009e8:	4631      	mov	r1, r6
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	fab3 f683 	clz	r6, r3
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d14a      	bne.n	8000a8c <__udivmoddi4+0x160>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d302      	bcc.n	8000a00 <__udivmoddi4+0xd4>
 80009fa:	4282      	cmp	r2, r0
 80009fc:	f200 80f9 	bhi.w	8000bf2 <__udivmoddi4+0x2c6>
 8000a00:	1a84      	subs	r4, r0, r2
 8000a02:	eb61 0303 	sbc.w	r3, r1, r3
 8000a06:	2001      	movs	r0, #1
 8000a08:	469e      	mov	lr, r3
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d0e0      	beq.n	80009d0 <__udivmoddi4+0xa4>
 8000a0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a12:	e7dd      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000a14:	b902      	cbnz	r2, 8000a18 <__udivmoddi4+0xec>
 8000a16:	deff      	udf	#255	; 0xff
 8000a18:	fab2 f282 	clz	r2, r2
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	f040 8092 	bne.w	8000b46 <__udivmoddi4+0x21a>
 8000a22:	eba1 010c 	sub.w	r1, r1, ip
 8000a26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2a:	fa1f fe8c 	uxth.w	lr, ip
 8000a2e:	2601      	movs	r6, #1
 8000a30:	0c20      	lsrs	r0, r4, #16
 8000a32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a36:	fb07 1113 	mls	r1, r7, r3, r1
 8000a3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a3e:	fb0e f003 	mul.w	r0, lr, r3
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x12c>
 8000a46:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x12a>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f200 80cb 	bhi.w	8000bec <__udivmoddi4+0x2c0>
 8000a56:	4643      	mov	r3, r8
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a60:	fb07 1110 	mls	r1, r7, r0, r1
 8000a64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a68:	fb0e fe00 	mul.w	lr, lr, r0
 8000a6c:	45a6      	cmp	lr, r4
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x156>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a78:	d202      	bcs.n	8000a80 <__udivmoddi4+0x154>
 8000a7a:	45a6      	cmp	lr, r4
 8000a7c:	f200 80bb 	bhi.w	8000bf6 <__udivmoddi4+0x2ca>
 8000a80:	4608      	mov	r0, r1
 8000a82:	eba4 040e 	sub.w	r4, r4, lr
 8000a86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a8a:	e79c      	b.n	80009c6 <__udivmoddi4+0x9a>
 8000a8c:	f1c6 0720 	rsb	r7, r6, #32
 8000a90:	40b3      	lsls	r3, r6
 8000a92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	40f9      	lsrs	r1, r7
 8000aa6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aaa:	fa00 f306 	lsl.w	r3, r0, r6
 8000aae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ab2:	0c20      	lsrs	r0, r4, #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fb09 1118 	mls	r1, r9, r8, r1
 8000abc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ac4:	4288      	cmp	r0, r1
 8000ac6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aca:	d90b      	bls.n	8000ae4 <__udivmoddi4+0x1b8>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ad4:	f080 8088 	bcs.w	8000be8 <__udivmoddi4+0x2bc>
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f240 8085 	bls.w	8000be8 <__udivmoddi4+0x2bc>
 8000ade:	f1a8 0802 	sub.w	r8, r8, #2
 8000ae2:	4461      	add	r1, ip
 8000ae4:	1a09      	subs	r1, r1, r0
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aec:	fb09 1110 	mls	r1, r9, r0, r1
 8000af0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000af4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af8:	458e      	cmp	lr, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x1e2>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b04:	d26c      	bcs.n	8000be0 <__udivmoddi4+0x2b4>
 8000b06:	458e      	cmp	lr, r1
 8000b08:	d96a      	bls.n	8000be0 <__udivmoddi4+0x2b4>
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b12:	fba0 9402 	umull	r9, r4, r0, r2
 8000b16:	eba1 010e 	sub.w	r1, r1, lr
 8000b1a:	42a1      	cmp	r1, r4
 8000b1c:	46c8      	mov	r8, r9
 8000b1e:	46a6      	mov	lr, r4
 8000b20:	d356      	bcc.n	8000bd0 <__udivmoddi4+0x2a4>
 8000b22:	d053      	beq.n	8000bcc <__udivmoddi4+0x2a0>
 8000b24:	b15d      	cbz	r5, 8000b3e <__udivmoddi4+0x212>
 8000b26:	ebb3 0208 	subs.w	r2, r3, r8
 8000b2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b32:	fa22 f306 	lsr.w	r3, r2, r6
 8000b36:	40f1      	lsrs	r1, r6
 8000b38:	431f      	orrs	r7, r3
 8000b3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b3e:	2600      	movs	r6, #0
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	40d8      	lsrs	r0, r3
 8000b4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b50:	fa21 f303 	lsr.w	r3, r1, r3
 8000b54:	4091      	lsls	r1, r2
 8000b56:	4301      	orrs	r1, r0
 8000b58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b64:	fb07 3610 	mls	r6, r7, r0, r3
 8000b68:	0c0b      	lsrs	r3, r1, #16
 8000b6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b72:	429e      	cmp	r6, r3
 8000b74:	fa04 f402 	lsl.w	r4, r4, r2
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x260>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b82:	d22f      	bcs.n	8000be4 <__udivmoddi4+0x2b8>
 8000b84:	429e      	cmp	r6, r3
 8000b86:	d92d      	bls.n	8000be4 <__udivmoddi4+0x2b8>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1b9b      	subs	r3, r3, r6
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b94:	fb07 3316 	mls	r3, r7, r6, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x28a>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bac:	d216      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d914      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000bb2:	3e02      	subs	r6, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	1ac9      	subs	r1, r1, r3
 8000bb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bbc:	e738      	b.n	8000a30 <__udivmoddi4+0x104>
 8000bbe:	462e      	mov	r6, r5
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	e705      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000bc4:	4606      	mov	r6, r0
 8000bc6:	e6e3      	b.n	8000990 <__udivmoddi4+0x64>
 8000bc8:	4618      	mov	r0, r3
 8000bca:	e6f8      	b.n	80009be <__udivmoddi4+0x92>
 8000bcc:	454b      	cmp	r3, r9
 8000bce:	d2a9      	bcs.n	8000b24 <__udivmoddi4+0x1f8>
 8000bd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bd8:	3801      	subs	r0, #1
 8000bda:	e7a3      	b.n	8000b24 <__udivmoddi4+0x1f8>
 8000bdc:	4646      	mov	r6, r8
 8000bde:	e7ea      	b.n	8000bb6 <__udivmoddi4+0x28a>
 8000be0:	4620      	mov	r0, r4
 8000be2:	e794      	b.n	8000b0e <__udivmoddi4+0x1e2>
 8000be4:	4640      	mov	r0, r8
 8000be6:	e7d1      	b.n	8000b8c <__udivmoddi4+0x260>
 8000be8:	46d0      	mov	r8, sl
 8000bea:	e77b      	b.n	8000ae4 <__udivmoddi4+0x1b8>
 8000bec:	3b02      	subs	r3, #2
 8000bee:	4461      	add	r1, ip
 8000bf0:	e732      	b.n	8000a58 <__udivmoddi4+0x12c>
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	e709      	b.n	8000a0a <__udivmoddi4+0xde>
 8000bf6:	4464      	add	r4, ip
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	e742      	b.n	8000a82 <__udivmoddi4+0x156>

08000bfc <__aeabi_idiv0>:
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fa1d 	bl	8001042 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  user_SystemClock_Config();
 8000c08:	f004 f9fc 	bl	8005004 <user_SystemClock_Config>
  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_ADC1_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
    USER_ADC1_Init();
 8000c0c:	f004 f8c0 	bl	8004d90 <USER_ADC1_Init>
    USER_GPIO_Init();
 8000c10:	f004 f900 	bl	8004e14 <USER_GPIO_Init>
    user_USART1_UART_Init();
 8000c14:	f004 fa58 	bl	80050c8 <user_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      Configurator();
 8000c18:	f003 fe42 	bl	80048a0 <Configurator>
      ADC_handler();
 8000c1c:	f003 fdde 	bl	80047dc <ADC_handler>
      Configurator();
 8000c20:	e7fa      	b.n	8000c18 <main+0x18>

08000c22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c26:	b672      	cpsid	i
}
 8000c28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <Error_Handler+0x8>

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x44>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09e      	sub	sp, #120	; 0x78
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2254      	movs	r2, #84	; 0x54
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 fb45 	bl	8005324 <memset>
  if(hadc->Instance==ADC1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <HAL_ADC_MspInit+0xc0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d143      	bne.n	8000d2c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ca8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cae:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fd68 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000cde:	f7ff ffa0 	bl	8000c22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_ADC_MspInit+0xc4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <HAL_ADC_MspInit+0xc4>)
 8000ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_ADC_MspInit+0xc4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_ADC_MspInit+0xc4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_ADC_MspInit+0xc4>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_ADC_MspInit+0xc4>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2333      	movs	r3, #51	; 0x33
 8000d14:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d16:	230b      	movs	r3, #11
 8000d18:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f001 fcf8 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3778      	adds	r7, #120	; 0x78
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	50040000 	.word	0x50040000
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09e      	sub	sp, #120	; 0x78
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	2254      	movs	r2, #84	; 0x54
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 fae1 	bl	8005324 <memset>
  if(huart->Instance==USART1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <HAL_UART_MspInit+0xa8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d137      	bne.n	8000ddc <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fd15 	bl	80037a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff ff4d 	bl	8000c22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0xac>)
 8000d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8c:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <HAL_UART_MspInit+0xac>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	6613      	str	r3, [r2, #96]	; 0x60
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0xac>)
 8000d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0xac>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_UART_MspInit+0xac>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_UART_MspInit+0xac>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000db8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dbc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f001 fca0 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3778      	adds	r7, #120	; 0x78
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013800 	.word	0x40013800
 8000de8:	40021000 	.word	0x40021000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f958 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return 1;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_kill>:

int _kill(int pid, int sig)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e5a:	f004 fa39 	bl	80052d0 <__errno>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2216      	movs	r2, #22
 8000e62:	601a      	str	r2, [r3, #0]
  return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_exit>:

void _exit (int status)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffe7 	bl	8000e50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e82:	e7fe      	b.n	8000e82 <_exit+0x12>

08000e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	e00a      	b.n	8000eac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e96:	f3af 8000 	nop.w
 8000e9a:	4601      	mov	r1, r0
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	60ba      	str	r2, [r7, #8]
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf0      	blt.n	8000e96 <_read+0x12>
  }

  return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e009      	b.n	8000ee4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf1      	blt.n	8000ed0 <_write+0x12>
  }
  return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <_close>:

int _close(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_isatty>:

int _isatty(int file)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f004 f99e 	bl	80052d0 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20010000 	.word	0x20010000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	2000008c 	.word	0x2000008c
 8000fc8:	20000200 	.word	0x20000200

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff ffea 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopForever+0xe>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopForever+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f004 f95d 	bl	80052dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fded 	bl	8000c00 <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001028:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001034:	08006610 	.word	0x08006610
  ldr r2, =_sbss
 8001038:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800103c:	200001fc 	.word	0x200001fc

08001040 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_IRQHandler>

08001042 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f001 fb31 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f80e 	bl	8001074 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e001      	b.n	8001068 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001064:	f7ff fde2 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001068:	79fb      	ldrb	r3, [r7, #7]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_InitTick+0x6c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d023      	beq.n	80010d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_InitTick+0x70>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_InitTick+0x6c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fb2f 	bl	8002702 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10f      	bne.n	80010ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d809      	bhi.n	80010c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f001 fb07 	bl	80026ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_InitTick+0x74>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e007      	b.n	80010d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e004      	b.n	80010d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e001      	b.n	80010d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000004 	.word	0x20000004

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008
 8001110:	20000090 	.word	0x20000090

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000090 	.word	0x20000090

0800112c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	431a      	orrs	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	609a      	str	r2, [r3, #8]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3360      	adds	r3, #96	; 0x60
 80011a6:	461a      	mov	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <LL_ADC_SetOffset+0x44>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	4313      	orrs	r3, r2
 80011c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011cc:	bf00      	nop
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	03fff000 	.word	0x03fff000

080011dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3360      	adds	r3, #96	; 0x60
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3360      	adds	r3, #96	; 0x60
 8001218:	461a      	mov	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	431a      	orrs	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3330      	adds	r3, #48	; 0x30
 8001274:	461a      	mov	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	4413      	add	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	211f      	movs	r1, #31
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	0e9b      	lsrs	r3, r3, #26
 800129c:	f003 011f 	and.w	r1, r3, #31
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012b0:	bf00      	nop
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3314      	adds	r3, #20
 80012cc:	461a      	mov	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	0e5b      	lsrs	r3, r3, #25
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	4413      	add	r3, r2
 80012da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	0d1b      	lsrs	r3, r3, #20
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	2107      	movs	r1, #7
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	401a      	ands	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	0d1b      	lsrs	r3, r3, #20
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800132c:	43db      	mvns	r3, r3
 800132e:	401a      	ands	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0318 	and.w	r3, r3, #24
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001338:	40d9      	lsrs	r1, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	400b      	ands	r3, r1
 800133e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001342:	431a      	orrs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	0007ffff 	.word	0x0007ffff

0800135c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800136c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6093      	str	r3, [r2, #8]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001394:	d101      	bne.n	800139a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001434:	f043 0202 	orr.w	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <LL_ADC_IsEnabled+0x18>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_ADC_IsEnabled+0x1a>
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d101      	bne.n	8001486 <LL_ADC_IsDisableOngoing+0x18>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_IsDisableOngoing+0x1a>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a8:	f043 0204 	orr.w	r2, r3, #4
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d0:	f043 0210 	orr.w	r2, r3, #16
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d101      	bne.n	80014fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800151a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800151e:	f043 0220 	orr.w	r2, r3, #32
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b08      	cmp	r3, #8
 8001544:	d101      	bne.n	800154a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e12c      	b.n	80017cc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fb77 	bl	8000c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fef1 	bl	8001380 <LL_ADC_IsDeepPowerDownEnabled>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fed7 	bl	800135c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff0c 	bl	80013d0 <LL_ADC_IsInternalRegulatorEnabled>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d115      	bne.n	80015ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fef0 	bl	80013a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015c8:	4b82      	ldr	r3, [pc, #520]	; (80017d4 <HAL_ADC_Init+0x27c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	4a82      	ldr	r2, [pc, #520]	; (80017d8 <HAL_ADC_Init+0x280>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff feee 	bl	80013d0 <LL_ADC_IsInternalRegulatorEnabled>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f043 0210 	orr.w	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f043 0201 	orr.w	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff62 	bl	80014e4 <LL_ADC_REG_IsConversionOngoing>
 8001620:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 80c5 	bne.w	80017ba <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 80c1 	bne.w	80017ba <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001640:	f043 0202 	orr.w	r2, r3, #2
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fefb 	bl	8001448 <LL_ADC_IsEnabled>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10b      	bne.n	8001670 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001658:	4860      	ldr	r0, [pc, #384]	; (80017dc <HAL_ADC_Init+0x284>)
 800165a:	f7ff fef5 	bl	8001448 <LL_ADC_IsEnabled>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4619      	mov	r1, r3
 800166a:	485d      	ldr	r0, [pc, #372]	; (80017e0 <HAL_ADC_Init+0x288>)
 800166c:	f7ff fd5e 	bl	800112c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e5b      	ldrb	r3, [r3, #25]
 8001674:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800167a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001680:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001686:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d106      	bne.n	80016ac <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	3b01      	subs	r3, #1
 80016a4:	045b      	lsls	r3, r3, #17
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <HAL_ADC_Init+0x28c>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	430b      	orrs	r3, r1
 80016da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff feff 	bl	80014e4 <LL_ADC_REG_IsConversionOngoing>
 80016e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff20 	bl	8001532 <LL_ADC_INJ_IsConversionOngoing>
 80016f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d13d      	bne.n	8001776 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d13a      	bne.n	8001776 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001704:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800170c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800171c:	f023 0302 	bic.w	r3, r3, #2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	69b9      	ldr	r1, [r7, #24]
 8001726:	430b      	orrs	r3, r1
 8001728:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001730:	2b01      	cmp	r3, #1
 8001732:	d118      	bne.n	8001766 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001756:	430a      	orrs	r2, r1
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	e007      	b.n	8001776 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10c      	bne.n	8001798 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f023 010f 	bic.w	r1, r3, #15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	1e5a      	subs	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
 8001796:	e007      	b.n	80017a8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020f 	bic.w	r2, r2, #15
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f023 0303 	bic.w	r3, r3, #3
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
 80017b8:	e007      	b.n	80017ca <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f043 0210 	orr.w	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000000 	.word	0x20000000
 80017d8:	053e2d63 	.word	0x053e2d63
 80017dc:	50040000 	.word	0x50040000
 80017e0:	50040300 	.word	0x50040300
 80017e4:	fff0c007 	.word	0xfff0c007

080017e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe75 	bl	80014e4 <LL_ADC_REG_IsConversionOngoing>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d14f      	bne.n	80018a0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_ADC_Start+0x26>
 800180a:	2302      	movs	r3, #2
 800180c:	e04b      	b.n	80018a6 <HAL_ADC_Start+0xbe>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fdb4 	bl	8002384 <ADC_Enable>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d137      	bne.n	8001896 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001846:	d106      	bne.n	8001856 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f023 0206 	bic.w	r2, r3, #6
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	659a      	str	r2, [r3, #88]	; 0x58
 8001854:	e002      	b.n	800185c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	221c      	movs	r2, #28
 8001862:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe00 	bl	8001494 <LL_ADC_REG_StartConversion>
 8001894:	e006      	b.n	80018a4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800189e:	e001      	b.n	80018a4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018a0:	2302      	movs	r3, #2
 80018a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_Stop+0x16>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e023      	b.n	800190c <HAL_ADC_Stop+0x5e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80018cc:	2103      	movs	r1, #3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fc9c 	bl	800220c <ADC_ConversionStop>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d111      	bne.n	8001902 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fdd6 	bl	8002490 <ADC_Disable>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	2b08      	cmp	r3, #8
 8001924:	d102      	bne.n	800192c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001926:	2308      	movs	r3, #8
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e010      	b.n	800194e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	f043 0220 	orr.w	r2, r3, #32
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06f      	b.n	8001a2a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800194a:	2304      	movs	r3, #4
 800194c:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800194e:	f7ff fbe1 	bl	8001114 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001954:	e021      	b.n	800199a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d01d      	beq.n	800199a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800195e:	f7ff fbd9 	bl	8001114 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d302      	bcc.n	8001974 <HAL_ADC_PollForConversion+0x60>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d112      	bne.n	800199a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10b      	bne.n	800199a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f043 0204 	orr.w	r2, r3, #4
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e047      	b.n	8001a2a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0d6      	beq.n	8001956 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fc40 	bl	800123e <LL_ADC_REG_IsTriggerSourceSWStart>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e5b      	ldrb	r3, [r3, #25]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d118      	bne.n	80019fe <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d104      	bne.n	8001a16 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2208      	movs	r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e008      	b.n	8001a28 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d103      	bne.n	8001a28 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	220c      	movs	r2, #12
 8001a26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0b6      	sub	sp, #216	; 0xd8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x22>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e3b9      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x796>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fd32 	bl	80014e4 <LL_ADC_REG_IsConversionOngoing>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 839e 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d824      	bhi.n	8001ada <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	3b02      	subs	r3, #2
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d81b      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x86>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_ADC_ConfigChannel+0x54>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001ab9 	.word	0x08001ab9
 8001aa8:	08001ac1 	.word	0x08001ac1
 8001aac:	08001ac9 	.word	0x08001ac9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	605a      	str	r2, [r3, #4]
          break;
 8001ab6:	e011      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2212      	movs	r2, #18
 8001abc:	605a      	str	r2, [r3, #4]
          break;
 8001abe:	e00d      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2218      	movs	r2, #24
 8001ac4:	605a      	str	r2, [r3, #4]
          break;
 8001ac6:	e009      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ace:	605a      	str	r2, [r3, #4]
          break;
 8001ad0:	e004      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2206      	movs	r2, #6
 8001ad6:	605a      	str	r2, [r3, #4]
          break;
 8001ad8:	e000      	b.n	8001adc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ada:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f7ff fbbb 	bl	8001264 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fcf6 	bl	80014e4 <LL_ADC_REG_IsConversionOngoing>
 8001af8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fd16 	bl	8001532 <LL_ADC_INJ_IsConversionOngoing>
 8001b06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 81a6 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 81a1 	bne.w	8001e60 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f7ff fbc6 	bl	80012bc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d00a      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6919      	ldr	r1, [r3, #16]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b62:	f7ff fb17 	bl	8001194 <LL_ADC_SetOffset>
 8001b66:	e17b      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fb34 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x148>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb29 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	e01e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x186>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fb1e 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e004      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x19e>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	e018      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1d0>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e004      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d106      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff faed 	bl	8001208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2101      	movs	r1, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fad1 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fac6 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x24c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fabb 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	e004      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x264>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	e018      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x296>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	e004      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d106      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fa8a 	bl	8001208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fa6e 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10a      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x2d4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2102      	movs	r1, #2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fa63 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 021f 	and.w	r2, r3, #31
 8001d1e:	e01e      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x312>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fa58 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e004      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x32a>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	e016      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x358>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001d96:	2320      	movs	r3, #32
 8001d98:	e004      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fa29 	bl	8001208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2103      	movs	r1, #3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fa0d 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x396>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fa02 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	0e9b      	lsrs	r3, r3, #26
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	e017      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x3c6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2103      	movs	r1, #3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f9f7 	bl	80011dc <LL_ADC_GetOffsetChannel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dfc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x3de>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	e011      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x402>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e42:	2320      	movs	r3, #32
 8001e44:	e003      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f9d4 	bl	8001208 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff faef 	bl	8001448 <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 813f 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f7ff fa48 	bl	8001314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a8e      	ldr	r2, [pc, #568]	; (80020c4 <HAL_ADC_ConfigChannel+0x678>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	f040 8130 	bne.w	80020f0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x46c>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e019      	b.n	8001eec <HAL_ADC_ConfigChannel+0x4a0>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	bf94      	ite	ls
 8001ee6:	2301      	movls	r3, #1
 8001ee8:	2300      	movhi	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d079      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x4c0>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	069b      	lsls	r3, r3, #26
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0a:	e015      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x4ec>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x50c>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	e017      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x53c>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e003      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x562>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	051b      	lsls	r3, r3, #20
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x594>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	e080      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x5b4>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	069b      	lsls	r3, r3, #26
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffe:	e015      	b.n	800202c <HAL_ADC_ConfigChannel+0x5e0>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_ConfigChannel+0x600>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	e017      	b.n	800207c <HAL_ADC_ConfigChannel+0x630>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	61fb      	str	r3, [r7, #28]
  return result;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	ea42 0103 	orr.w	r1, r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x65c>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	3301      	adds	r3, #1
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	051b      	lsls	r3, r3, #20
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a6:	e01d      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x698>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	613b      	str	r3, [r7, #16]
  return result;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e005      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x684>
 80020c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 021f 	and.w	r2, r3, #31
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	3b1e      	subs	r3, #30
 80020de:	051b      	lsls	r3, r3, #20
 80020e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e4:	430b      	orrs	r3, r1
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	6892      	ldr	r2, [r2, #8]
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7ff f8e6 	bl	80012bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_ADC_ConfigChannel+0x7a0>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d06c      	beq.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020fc:	483c      	ldr	r0, [pc, #240]	; (80021f0 <HAL_ADC_ConfigChannel+0x7a4>)
 80020fe:	f7ff f83b 	bl	8001178 <LL_ADC_GetCommonPathInternalCh>
 8002102:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <HAL_ADC_ConfigChannel+0x7a8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d127      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d121      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a35      	ldr	r2, [pc, #212]	; (80021f8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d157      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800212a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800212e:	4619      	mov	r1, r3
 8002130:	482f      	ldr	r0, [pc, #188]	; (80021f0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002132:	f7ff f80e 	bl	8001152 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_ADC_ConfigChannel+0x7b0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	099b      	lsrs	r3, r3, #6
 800213c:	4a30      	ldr	r2, [pc, #192]	; (8002200 <HAL_ADC_ConfigChannel+0x7b4>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002150:	e002      	b.n	8002158 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3b01      	subs	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800215e:	e03a      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a27      	ldr	r2, [pc, #156]	; (8002204 <HAL_ADC_ConfigChannel+0x7b8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d113      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x746>
 800216a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800216e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_ADC_ConfigChannel+0x7ac>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12a      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002188:	4619      	mov	r1, r3
 800218a:	4819      	ldr	r0, [pc, #100]	; (80021f0 <HAL_ADC_ConfigChannel+0x7a4>)
 800218c:	f7fe ffe1 	bl	8001152 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002190:	e021      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_ADC_ConfigChannel+0x7bc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d11c      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800219c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d116      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <HAL_ADC_ConfigChannel+0x7ac>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d111      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021ba:	4619      	mov	r1, r3
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <HAL_ADC_ConfigChannel+0x7a4>)
 80021be:	f7fe ffc8 	bl	8001152 <LL_ADC_SetCommonPathInternalCh>
 80021c2:	e008      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	37d8      	adds	r7, #216	; 0xd8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	80080000 	.word	0x80080000
 80021f0:	50040300 	.word	0x50040300
 80021f4:	c7520000 	.word	0xc7520000
 80021f8:	50040000 	.word	0x50040000
 80021fc:	20000000 	.word	0x20000000
 8002200:	053e2d63 	.word	0x053e2d63
 8002204:	cb840000 	.word	0xcb840000
 8002208:	80000001 	.word	0x80000001

0800220c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f95e 	bl	80014e4 <LL_ADC_REG_IsConversionOngoing>
 8002228:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff f97f 	bl	8001532 <LL_ADC_INJ_IsConversionOngoing>
 8002234:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d103      	bne.n	8002244 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8098 	beq.w	8002374 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d02a      	beq.n	80022a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7e5b      	ldrb	r3, [r3, #25]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d126      	bne.n	80022a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7e1b      	ldrb	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d122      	bne.n	80022a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002262:	2301      	movs	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002266:	e014      	b.n	8002292 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	4a45      	ldr	r2, [pc, #276]	; (8002380 <ADC_ConversionStop+0x174>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d90d      	bls.n	800228c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0210 	orr.w	r2, r3, #16
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e074      	b.n	8002376 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3301      	adds	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d1e3      	bne.n	8002268 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d014      	beq.n	80022d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f916 	bl	80014e4 <LL_ADC_REG_IsConversionOngoing>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00c      	beq.n	80022d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f8d3 	bl	800146e <LL_ADC_IsDisableOngoing>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f8f2 	bl	80014bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d014      	beq.n	8002308 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f925 	bl	8001532 <LL_ADC_INJ_IsConversionOngoing>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00c      	beq.n	8002308 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f8bb 	bl	800146e <LL_ADC_IsDisableOngoing>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f901 	bl	800150a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d005      	beq.n	800231a <ADC_ConversionStop+0x10e>
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d105      	bne.n	8002320 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002314:	230c      	movs	r3, #12
 8002316:	617b      	str	r3, [r7, #20]
        break;
 8002318:	e005      	b.n	8002326 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800231a:	2308      	movs	r3, #8
 800231c:	617b      	str	r3, [r7, #20]
        break;
 800231e:	e002      	b.n	8002326 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002320:	2304      	movs	r3, #4
 8002322:	617b      	str	r3, [r7, #20]
        break;
 8002324:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002326:	f7fe fef5 	bl	8001114 <HAL_GetTick>
 800232a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800232c:	e01b      	b.n	8002366 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800232e:	f7fe fef1 	bl	8001114 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b05      	cmp	r3, #5
 800233a:	d914      	bls.n	8002366 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4013      	ands	r3, r2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e007      	b.n	8002376 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1dc      	bne.n	800232e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	a33fffff 	.word	0xa33fffff

08002384 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff f857 	bl	8001448 <LL_ADC_IsEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d169      	bne.n	8002474 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <ADC_Enable+0xfc>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f043 0210 	orr.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e055      	b.n	8002476 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f812 	bl	80013f8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023d4:	482b      	ldr	r0, [pc, #172]	; (8002484 <ADC_Enable+0x100>)
 80023d6:	f7fe fecf 	bl	8001178 <LL_ADC_GetCommonPathInternalCh>
 80023da:	4603      	mov	r3, r0
 80023dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <ADC_Enable+0x104>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <ADC_Enable+0x108>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80023fe:	e002      	b.n	8002406 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	3b01      	subs	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800240c:	f7fe fe82 	bl	8001114 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002412:	e028      	b.n	8002466 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff f815 	bl	8001448 <LL_ADC_IsEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe ffe5 	bl	80013f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800242e:	f7fe fe71 	bl	8001114 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d914      	bls.n	8002466 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d00d      	beq.n	8002466 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f043 0210 	orr.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e007      	b.n	8002476 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d1cf      	bne.n	8002414 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	8000003f 	.word	0x8000003f
 8002484:	50040300 	.word	0x50040300
 8002488:	20000000 	.word	0x20000000
 800248c:	053e2d63 	.word	0x053e2d63

08002490 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ffe6 	bl	800146e <LL_ADC_IsDisableOngoing>
 80024a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe ffcd 	bl	8001448 <LL_ADC_IsEnabled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d047      	beq.n	8002544 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d144      	bne.n	8002544 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030d 	and.w	r3, r3, #13
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10c      	bne.n	80024e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe ffa7 	bl	8001420 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2203      	movs	r2, #3
 80024d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024da:	f7fe fe1b 	bl	8001114 <HAL_GetTick>
 80024de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024e0:	e029      	b.n	8002536 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e023      	b.n	8002546 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024fe:	f7fe fe09 	bl	8001114 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d914      	bls.n	8002536 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e007      	b.n	8002546 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1dc      	bne.n	80024fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff47 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff5c 	bl	8002598 <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff8e 	bl	8002608 <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5d 	bl	80025b4 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffb0 	bl	8002670 <SysTick_Config>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272a:	e148      	b.n	80029be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	4013      	ands	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 813a 	beq.w	80029b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d005      	beq.n	800275c <HAL_GPIO_Init+0x40>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d130      	bne.n	80027be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002792:	2201      	movs	r2, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0201 	and.w	r2, r3, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d017      	beq.n	80027fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d123      	bne.n	800284e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	6939      	ldr	r1, [r7, #16]
 800284a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	2203      	movs	r2, #3
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8094 	beq.w	80029b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002890:	4b52      	ldr	r3, [pc, #328]	; (80029dc <HAL_GPIO_Init+0x2c0>)
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	4a51      	ldr	r2, [pc, #324]	; (80029dc <HAL_GPIO_Init+0x2c0>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6613      	str	r3, [r2, #96]	; 0x60
 800289c:	4b4f      	ldr	r3, [pc, #316]	; (80029dc <HAL_GPIO_Init+0x2c0>)
 800289e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028a8:	4a4d      	ldr	r2, [pc, #308]	; (80029e0 <HAL_GPIO_Init+0x2c4>)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	3302      	adds	r3, #2
 80028b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028d2:	d00d      	beq.n	80028f0 <HAL_GPIO_Init+0x1d4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a43      	ldr	r2, [pc, #268]	; (80029e4 <HAL_GPIO_Init+0x2c8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <HAL_GPIO_Init+0x1d0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a42      	ldr	r2, [pc, #264]	; (80029e8 <HAL_GPIO_Init+0x2cc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_GPIO_Init+0x1cc>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e004      	b.n	80028f2 <HAL_GPIO_Init+0x1d6>
 80028e8:	2307      	movs	r3, #7
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x1d6>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_GPIO_Init+0x1d6>
 80028f0:	2300      	movs	r3, #0
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	4093      	lsls	r3, r2
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002902:	4937      	ldr	r1, [pc, #220]	; (80029e0 <HAL_GPIO_Init+0x2c4>)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002910:	4b36      	ldr	r3, [pc, #216]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002934:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800293a:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800295e:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <HAL_GPIO_Init+0x2d0>)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	3301      	adds	r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f47f aeaf 	bne.w	800272c <HAL_GPIO_Init+0x10>
  }
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40010000 	.word	0x40010000
 80029e4:	48000400 	.word	0x48000400
 80029e8:	48000800 	.word	0x48000800
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	887b      	ldrh	r3, [r7, #2]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e001      	b.n	8002a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a30:	787b      	ldrb	r3, [r7, #1]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40007000 	.word	0x40007000

08002a70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40007000 	.word	0x40007000

08002a8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9a:	d130      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa8:	d038      	beq.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2232      	movs	r2, #50	; 0x32
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0c9b      	lsrs	r3, r3, #18
 8002acc:	3301      	adds	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad0:	e002      	b.n	8002ad8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae4:	d102      	bne.n	8002aec <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f2      	bne.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af8:	d110      	bne.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e00f      	b.n	8002b1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d007      	beq.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b14:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	20000000 	.word	0x20000000
 8002b34:	431bde83 	.word	0x431bde83

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f000 bc02 	b.w	8003350 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4c:	4b96      	ldr	r3, [pc, #600]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b56:	4b94      	ldr	r3, [pc, #592]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80e4 	beq.w	8002d36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4c>
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	f040 808b 	bne.w	8002c92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	f040 8087 	bne.w	8002c92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b84:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_OscConfig+0x64>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e3d9      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	4b81      	ldr	r3, [pc, #516]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x7e>
 8002bac:	4b7e      	ldr	r3, [pc, #504]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb4:	e005      	b.n	8002bc2 <HAL_RCC_OscConfig+0x8a>
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d223      	bcs.n	8002c0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fd8c 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e3ba      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bda:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a72      	ldr	r2, [pc, #456]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002be0:	f043 0308 	orr.w	r3, r3, #8
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b70      	ldr	r3, [pc, #448]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	496d      	ldr	r1, [pc, #436]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bf8:	4b6b      	ldr	r3, [pc, #428]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	4968      	ldr	r1, [pc, #416]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
 8002c0c:	e025      	b.n	8002c5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c0e:	4b66      	ldr	r3, [pc, #408]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a65      	ldr	r2, [pc, #404]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4960      	ldr	r1, [pc, #384]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c2c:	4b5e      	ldr	r3, [pc, #376]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	495b      	ldr	r1, [pc, #364]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fd4c 	bl	80036e8 <RCC_SetFlashLatencyFromMSIRange>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e37a      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c5a:	f000 fc81 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4b51      	ldr	r3, [pc, #324]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4950      	ldr	r1, [pc, #320]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002c6c:	5ccb      	ldrb	r3, [r1, r3]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a4e      	ldr	r2, [pc, #312]	; (8002db0 <HAL_RCC_OscConfig+0x278>)
 8002c78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c7a:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <HAL_RCC_OscConfig+0x27c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f9f8 	bl	8001074 <HAL_InitTick>
 8002c84:	4603      	mov	r3, r0
 8002c86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d052      	beq.n	8002d34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	e35e      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d032      	beq.n	8002d00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c9a:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a42      	ldr	r2, [pc, #264]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fa35 	bl	8001114 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cae:	f7fe fa31 	bl	8001114 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e347      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a35      	ldr	r2, [pc, #212]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cd2:	f043 0308 	orr.w	r3, r3, #8
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4930      	ldr	r1, [pc, #192]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	492b      	ldr	r1, [pc, #172]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
 8002cfe:	e01a      	b.n	8002d36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fa02 	bl	8001114 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d14:	f7fe f9fe 	bl	8001114 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e314      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1dc>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d073      	beq.n	8002e2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_OscConfig+0x21c>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d10e      	bne.n	8002d6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d063      	beq.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d15f      	bne.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e2f1      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d74:	d106      	bne.n	8002d84 <HAL_RCC_OscConfig+0x24c>
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e025      	b.n	8002dd0 <HAL_RCC_OscConfig+0x298>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d114      	bne.n	8002db8 <HAL_RCC_OscConfig+0x280>
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a02      	ldr	r2, [pc, #8]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e013      	b.n	8002dd0 <HAL_RCC_OscConfig+0x298>
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08006470 	.word	0x08006470
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004
 8002db8:	4ba0      	ldr	r3, [pc, #640]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a9f      	ldr	r2, [pc, #636]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b9d      	ldr	r3, [pc, #628]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a9c      	ldr	r2, [pc, #624]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f99c 	bl	8001114 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe f998 	bl	8001114 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e2ae      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df2:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x2a8>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe f988 	bl	8001114 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe f984 	bl	8001114 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e29a      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2d0>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d060      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_OscConfig+0x310>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d119      	bne.n	8002e76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d116      	bne.n	8002e76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e48:	4b7c      	ldr	r3, [pc, #496]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_OscConfig+0x328>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e277      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	4973      	ldr	r1, [pc, #460]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e74:	e040      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d023      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6e      	ldr	r2, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe f943 	bl	8001114 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe f93f 	bl	8001114 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e255      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea4:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b62      	ldr	r3, [pc, #392]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	495f      	ldr	r1, [pc, #380]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
 8002ec4:	e018      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a5c      	ldr	r2, [pc, #368]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe f91f 	bl	8001114 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe f91b 	bl	8001114 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e231      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d03c      	beq.n	8002f7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f12:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f8fa 	bl	8001114 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe f8f6 	bl	8001114 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e20c      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ef      	beq.n	8002f24 <HAL_RCC_OscConfig+0x3ec>
 8002f44:	e01b      	b.n	8002f7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f46:	4b3d      	ldr	r3, [pc, #244]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4c:	4a3b      	ldr	r2, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe f8dd 	bl	8001114 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7fe f8d9 	bl	8001114 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1ef      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f70:	4b32      	ldr	r3, [pc, #200]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ef      	bne.n	8002f5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80a6 	beq.w	80030d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	4a26      	ldr	r2, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_RCC_OscConfig+0x508>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d118      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <HAL_RCC_OscConfig+0x508>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <HAL_RCC_OscConfig+0x508>)
 8002fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd0:	f7fe f8a0 	bl	8001114 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd8:	f7fe f89c 	bl	8001114 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e1b2      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x508>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <HAL_RCC_OscConfig+0x4d8>
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300e:	e029      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b05      	cmp	r3, #5
 8003016:	d115      	bne.n	8003044 <HAL_RCC_OscConfig+0x50c>
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_RCC_OscConfig+0x504>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8003020:	f043 0304 	orr.w	r3, r3, #4
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_RCC_OscConfig+0x504>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	4a03      	ldr	r2, [pc, #12]	; (800303c <HAL_RCC_OscConfig+0x504>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003038:	e014      	b.n	8003064 <HAL_RCC_OscConfig+0x52c>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	40007000 	.word	0x40007000
 8003044:	4b9a      	ldr	r3, [pc, #616]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	4a99      	ldr	r2, [pc, #612]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003054:	4b96      	ldr	r3, [pc, #600]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	4a95      	ldr	r2, [pc, #596]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800305c:	f023 0304 	bic.w	r3, r3, #4
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d016      	beq.n	800309a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe f852 	bl	8001114 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe f84e 	bl	8001114 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e162      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308a:	4b89      	ldr	r3, [pc, #548]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ed      	beq.n	8003074 <HAL_RCC_OscConfig+0x53c>
 8003098:	e015      	b.n	80030c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe f83b 	bl	8001114 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe f837 	bl	8001114 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e14b      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b8:	4b7d      	ldr	r3, [pc, #500]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ed      	bne.n	80030a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030cc:	4b78      	ldr	r3, [pc, #480]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	4a77      	ldr	r2, [pc, #476]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80030d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d03c      	beq.n	800315e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01c      	beq.n	8003126 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80030ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f2:	4a6f      	ldr	r2, [pc, #444]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe f80a 	bl	8001114 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003104:	f7fe f806 	bl	8001114 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e11c      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003116:	4b66      	ldr	r3, [pc, #408]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ef      	beq.n	8003104 <HAL_RCC_OscConfig+0x5cc>
 8003124:	e01b      	b.n	800315e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003126:	4b62      	ldr	r3, [pc, #392]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312c:	4a60      	ldr	r2, [pc, #384]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fd ffed 	bl	8001114 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800313e:	f7fd ffe9 	bl	8001114 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0ff      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003150:	4b57      	ldr	r3, [pc, #348]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1ef      	bne.n	800313e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80f3 	beq.w	800334e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	2b02      	cmp	r3, #2
 800316e:	f040 80c9 	bne.w	8003304 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003172:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f003 0203 	and.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	429a      	cmp	r2, r3
 8003184:	d12c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	3b01      	subs	r3, #1
 8003192:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d123      	bne.n	80031e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d11b      	bne.n	80031e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d113      	bne.n	80031e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	3b01      	subs	r3, #1
 80031c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d109      	bne.n	80031e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	3b01      	subs	r3, #1
 80031da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d06b      	beq.n	80032b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d062      	beq.n	80032ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031e6:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0ac      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2d      	ldr	r2, [pc, #180]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80031fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003200:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003202:	f7fd ff87 	bl	8001114 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fd ff83 	bl	8001114 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e099      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <HAL_RCC_OscConfig+0x77c>)
 800322e:	4013      	ands	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003238:	3a01      	subs	r2, #1
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	4311      	orrs	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003242:	0212      	lsls	r2, r2, #8
 8003244:	4311      	orrs	r1, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800324a:	0852      	lsrs	r2, r2, #1
 800324c:	3a01      	subs	r2, #1
 800324e:	0552      	lsls	r2, r2, #21
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003256:	0852      	lsrs	r2, r2, #1
 8003258:	3a01      	subs	r2, #1
 800325a:	0652      	lsls	r2, r2, #25
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003262:	06d2      	lsls	r2, r2, #27
 8003264:	430a      	orrs	r2, r1
 8003266:	4912      	ldr	r1, [pc, #72]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003268:	4313      	orrs	r3, r2
 800326a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003284:	f7fd ff46 	bl	8001114 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd ff42 	bl	8001114 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e058      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_RCC_OscConfig+0x778>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032aa:	e050      	b.n	800334e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e04f      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
 80032b0:	40021000 	.word	0x40021000
 80032b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	4b27      	ldr	r3, [pc, #156]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d144      	bne.n	800334e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a23      	ldr	r2, [pc, #140]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032dc:	f7fd ff1a 	bl	8001114 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fd ff16 	bl	8001114 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e02c      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x7ac>
 8003302:	e024      	b.n	800334e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d01f      	beq.n	800334a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330a:	4b13      	ldr	r3, [pc, #76]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a12      	ldr	r2, [pc, #72]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 8003310:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fd fefd 	bl	8001114 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331e:	f7fd fef9 	bl	8001114 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	4905      	ldr	r1, [pc, #20]	; (8003358 <HAL_RCC_OscConfig+0x820>)
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_OscConfig+0x824>)
 8003344:	4013      	ands	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
 8003348:	e001      	b.n	800334e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	feeefffc 	.word	0xfeeefffc

08003360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0e7      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b75      	ldr	r3, [pc, #468]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d910      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b72      	ldr	r3, [pc, #456]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 0207 	bic.w	r2, r3, #7
 800338a:	4970      	ldr	r1, [pc, #448]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b6e      	ldr	r3, [pc, #440]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cf      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033bc:	429a      	cmp	r2, r3
 80033be:	d908      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c0:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4960      	ldr	r1, [pc, #384]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04c      	beq.n	8003478 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d121      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0a6      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	4b54      	ldr	r3, [pc, #336]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d115      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e09a      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003416:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e08e      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003426:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e086      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003436:	4b46      	ldr	r3, [pc, #280]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4943      	ldr	r1, [pc, #268]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fd fe64 	bl	8001114 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	e00a      	b.n	8003466 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fd fe60 	bl	8001114 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	; 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e06e      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 020c 	and.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d1eb      	bne.n	8003450 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003490:	429a      	cmp	r2, r3
 8003492:	d208      	bcs.n	80034a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	492b      	ldr	r1, [pc, #172]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d210      	bcs.n	80034d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	4923      	ldr	r1, [pc, #140]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c4:	4b21      	ldr	r3, [pc, #132]	; (800354c <HAL_RCC_ClockConfig+0x1ec>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e036      	b.n	8003544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4918      	ldr	r1, [pc, #96]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4910      	ldr	r1, [pc, #64]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003514:	f000 f824 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	490b      	ldr	r1, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x1f4>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1f8>)
 8003532:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1fc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd fd9b 	bl	8001074 <HAL_InitTick>
 800353e:	4603      	mov	r3, r0
 8003540:	72fb      	strb	r3, [r7, #11]

  return status;
 8003542:	7afb      	ldrb	r3, [r7, #11]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40022000 	.word	0x40022000
 8003550:	40021000 	.word	0x40021000
 8003554:	08006470 	.word	0x08006470
 8003558:	20000000 	.word	0x20000000
 800355c:	20000004 	.word	0x20000004

08003560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x34>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d121      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d11e      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003594:	4b34      	ldr	r3, [pc, #208]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035a0:	4b31      	ldr	r3, [pc, #196]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e005      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035bc:	4a2b      	ldr	r2, [pc, #172]	; (800366c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d102      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_GetSysClockFreq+0x110>)
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	e004      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_GetSysClockFreq+0x114>)
 80035e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d134      	bne.n	8003658 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0xa6>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d003      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0xac>
 8003604:	e005      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCC_GetSysClockFreq+0x110>)
 8003608:	617b      	str	r3, [r7, #20]
      break;
 800360a:	e005      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_GetSysClockFreq+0x114>)
 800360e:	617b      	str	r3, [r7, #20]
      break;
 8003610:	e002      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	3301      	adds	r3, #1
 8003624:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	fb03 f202 	mul.w	r2, r3, r2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_RCC_GetSysClockFreq+0x108>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	0e5b      	lsrs	r3, r3, #25
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	3301      	adds	r3, #1
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003658:	69bb      	ldr	r3, [r7, #24]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3724      	adds	r7, #36	; 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	08006488 	.word	0x08006488
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08006480 	.word	0x08006480

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036c0:	f7ff ffda 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0adb      	lsrs	r3, r3, #11
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4904      	ldr	r1, [pc, #16]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08006480 	.word	0x08006480

080036e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003700:	f7ff f9b6 	bl	8002a70 <HAL_PWREx_GetVoltageRange>
 8003704:	6178      	str	r0, [r7, #20]
 8003706:	e014      	b.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
 8003714:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003720:	f7ff f9a6 	bl	8002a70 <HAL_PWREx_GetVoltageRange>
 8003724:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d10b      	bne.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d919      	bls.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2ba0      	cmp	r3, #160	; 0xa0
 8003744:	d902      	bls.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003746:	2302      	movs	r3, #2
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e013      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800374c:	2301      	movs	r3, #1
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e010      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d902      	bls.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003758:	2303      	movs	r3, #3
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e00a      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d102      	bne.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003764:	2302      	movs	r3, #2
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e004      	b.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d101      	bne.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003770:	2301      	movs	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 0207 	bic.w	r2, r3, #7
 800377c:	4909      	ldr	r1, [pc, #36]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40022000 	.word	0x40022000

080037a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037b0:	2300      	movs	r3, #0
 80037b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037b4:	2300      	movs	r3, #0
 80037b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d031      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037cc:	d01a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d2:	d814      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037dc:	d10f      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037de:	4b5d      	ldr	r3, [pc, #372]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4a5c      	ldr	r2, [pc, #368]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ea:	e00c      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f9de 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	74fb      	strb	r3, [r7, #19]
      break;
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800380c:	4b51      	ldr	r3, [pc, #324]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	494e      	ldr	r1, [pc, #312]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003822:	e001      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 809e 	beq.w	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800383a:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b40      	ldr	r3, [pc, #256]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4a3f      	ldr	r2, [pc, #252]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	6593      	str	r3, [r2, #88]	; 0x58
 800385c:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800386c:	4b3a      	ldr	r3, [pc, #232]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a39      	ldr	r2, [pc, #228]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003878:	f7fd fc4c 	bl	8001114 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800387e:	e009      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fd fc48 	bl	8001114 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	74fb      	strb	r3, [r7, #19]
        break;
 8003892:	e005      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003894:	4b30      	ldr	r3, [pc, #192]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ef      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d15a      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038a6:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d019      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ee:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d016      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd fc08 	bl	8001114 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003906:	e00b      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f7fd fc04 	bl	8001114 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d902      	bls.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	74fb      	strb	r3, [r7, #19]
            break;
 800391e:	e006      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0ec      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800392e:	7cfb      	ldrb	r3, [r7, #19]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800394a:	e009      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
 8003950:	e006      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003960:	7c7b      	ldrb	r3, [r7, #17]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003966:	4b8a      	ldr	r3, [pc, #552]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	4a89      	ldr	r2, [pc, #548]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003970:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800397e:	4b84      	ldr	r3, [pc, #528]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f023 0203 	bic.w	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4980      	ldr	r1, [pc, #512]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039a0:	4b7b      	ldr	r3, [pc, #492]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f023 020c 	bic.w	r2, r3, #12
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	4978      	ldr	r1, [pc, #480]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c2:	4b73      	ldr	r3, [pc, #460]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	496f      	ldr	r1, [pc, #444]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e4:	4b6a      	ldr	r3, [pc, #424]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	4967      	ldr	r1, [pc, #412]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a06:	4b62      	ldr	r3, [pc, #392]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	495e      	ldr	r1, [pc, #376]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4956      	ldr	r1, [pc, #344]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a4a:	4b51      	ldr	r3, [pc, #324]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d028      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a6c:	4b48      	ldr	r3, [pc, #288]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4945      	ldr	r1, [pc, #276]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a8c:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a3f      	ldr	r2, [pc, #252]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a96:	60d3      	str	r3, [r2, #12]
 8003a98:	e011      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f882 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d028      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	492d      	ldr	r1, [pc, #180]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aea:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af4:	60d3      	str	r3, [r2, #12]
 8003af6:	e011      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f853 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01c      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b36:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f830 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b9e:	f043 0304 	orr.w	r3, r3, #4
 8003ba2:	6013      	str	r3, [r2, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc2:	4b74      	ldr	r3, [pc, #464]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bce:	4b71      	ldr	r3, [pc, #452]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0203 	and.w	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d10d      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
       ||
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003be6:	4b6b      	ldr	r3, [pc, #428]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d047      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e044      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d018      	beq.n	8003c3a <RCCEx_PLLSAI1_Config+0x86>
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d825      	bhi.n	8003c58 <RCCEx_PLLSAI1_Config+0xa4>
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d002      	beq.n	8003c16 <RCCEx_PLLSAI1_Config+0x62>
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d009      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x74>
 8003c14:	e020      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c16:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11d      	bne.n	8003c5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c26:	e01a      	b.n	8003c5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c28:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d116      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c38:	e013      	b.n	8003c62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c46:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c56:	e006      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e004      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c6e:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	430b      	orrs	r3, r1
 8003c84:	4943      	ldr	r1, [pc, #268]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d17c      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c90:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9c:	f7fd fa3a 	bl	8001114 <HAL_GetTick>
 8003ca0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca2:	e009      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca4:	f7fd fa36 	bl	8001114 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d902      	bls.n	8003cb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb6:	e005      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ef      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d15f      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d110      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cd0:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003cd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6892      	ldr	r2, [r2, #8]
 8003ce0:	0211      	lsls	r1, r2, #8
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	06d2      	lsls	r2, r2, #27
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	492a      	ldr	r1, [pc, #168]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	610b      	str	r3, [r1, #16]
 8003cf0:	e027      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d112      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	0211      	lsls	r1, r2, #8
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6912      	ldr	r2, [r2, #16]
 8003d0e:	0852      	lsrs	r2, r2, #1
 8003d10:	3a01      	subs	r2, #1
 8003d12:	0552      	lsls	r2, r2, #21
 8003d14:	430a      	orrs	r2, r1
 8003d16:	491f      	ldr	r1, [pc, #124]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	610b      	str	r3, [r1, #16]
 8003d1c:	e011      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	0211      	lsls	r1, r2, #8
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6952      	ldr	r2, [r2, #20]
 8003d34:	0852      	lsrs	r2, r2, #1
 8003d36:	3a01      	subs	r2, #1
 8003d38:	0652      	lsls	r2, r2, #25
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	4915      	ldr	r1, [pc, #84]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fd f9e1 	bl	8001114 <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d54:	e009      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d56:	f7fd f9dd 	bl	8001114 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d902      	bls.n	8003d6a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	73fb      	strb	r3, [r7, #15]
          break;
 8003d68:	e005      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ef      	beq.n	8003d56 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000

08003d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e040      	b.n	8003e2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc ffbe 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	; 0x24
 8003dc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8fe 	bl	8003fd8 <UART_SetConfig>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e022      	b.n	8003e2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fb1e 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fba5 	bl	8004574 <UART_CheckIdleState>
 8003e2a:	4603      	mov	r3, r0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	f040 80bf 	bne.w	8003fcc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_UART_Receive+0x26>
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0b7      	b.n	8003fce <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_UART_Receive+0x38>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0b0      	b.n	8003fce <HAL_UART_Receive+0x19a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2222      	movs	r2, #34	; 0x22
 8003e80:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e88:	f7fd f944 	bl	8001114 <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_UART_Receive+0x92>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_UART_Receive+0x88>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eba:	e02d      	b.n	8003f18 <HAL_UART_Receive+0xe4>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	22ff      	movs	r2, #255	; 0xff
 8003ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ec4:	e028      	b.n	8003f18 <HAL_UART_Receive+0xe4>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <HAL_UART_Receive+0xb6>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <HAL_UART_Receive+0xac>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22ff      	movs	r2, #255	; 0xff
 8003eda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ede:	e01b      	b.n	8003f18 <HAL_UART_Receive+0xe4>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	227f      	movs	r2, #127	; 0x7f
 8003ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee8:	e016      	b.n	8003f18 <HAL_UART_Receive+0xe4>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef2:	d10d      	bne.n	8003f10 <HAL_UART_Receive+0xdc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_UART_Receive+0xd2>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	227f      	movs	r2, #127	; 0x7f
 8003f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f04:	e008      	b.n	8003f18 <HAL_UART_Receive+0xe4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	223f      	movs	r2, #63	; 0x3f
 8003f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Receive+0xe4>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Receive+0x108>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f4c:	e033      	b.n	8003fb6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2120      	movs	r1, #32
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fb54 	bl	8004606 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e032      	b.n	8003fce <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10c      	bne.n	8003f88 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	8a7b      	ldrh	r3, [r7, #18]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	3302      	adds	r3, #2
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	e00d      	b.n	8003fa4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	8a7b      	ldrh	r3, [r7, #18]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4013      	ands	r3, r2
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1c5      	bne.n	8003f4e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b08a      	sub	sp, #40	; 0x28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4bb4      	ldr	r3, [pc, #720]	; (80042d8 <UART_SetConfig+0x300>)
 8004008:	4013      	ands	r3, r2
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004010:	430b      	orrs	r3, r1
 8004012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4aa9      	ldr	r2, [pc, #676]	; (80042dc <UART_SetConfig+0x304>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004040:	4313      	orrs	r3, r2
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4aa0      	ldr	r2, [pc, #640]	; (80042e0 <UART_SetConfig+0x308>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d126      	bne.n	80040b0 <UART_SetConfig+0xd8>
 8004062:	4ba0      	ldr	r3, [pc, #640]	; (80042e4 <UART_SetConfig+0x30c>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b03      	cmp	r3, #3
 800406e:	d81b      	bhi.n	80040a8 <UART_SetConfig+0xd0>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0xa0>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	08004089 	.word	0x08004089
 800407c:	08004099 	.word	0x08004099
 8004080:	08004091 	.word	0x08004091
 8004084:	080040a1 	.word	0x080040a1
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408e:	e080      	b.n	8004192 <UART_SetConfig+0x1ba>
 8004090:	2302      	movs	r3, #2
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004096:	e07c      	b.n	8004192 <UART_SetConfig+0x1ba>
 8004098:	2304      	movs	r3, #4
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409e:	e078      	b.n	8004192 <UART_SetConfig+0x1ba>
 80040a0:	2308      	movs	r3, #8
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a6:	e074      	b.n	8004192 <UART_SetConfig+0x1ba>
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ae:	e070      	b.n	8004192 <UART_SetConfig+0x1ba>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a8c      	ldr	r2, [pc, #560]	; (80042e8 <UART_SetConfig+0x310>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d138      	bne.n	800412c <UART_SetConfig+0x154>
 80040ba:	4b8a      	ldr	r3, [pc, #552]	; (80042e4 <UART_SetConfig+0x30c>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d82d      	bhi.n	8004124 <UART_SetConfig+0x14c>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <UART_SetConfig+0xf8>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	08004105 	.word	0x08004105
 80040d4:	08004125 	.word	0x08004125
 80040d8:	08004125 	.word	0x08004125
 80040dc:	08004125 	.word	0x08004125
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004125 	.word	0x08004125
 80040e8:	08004125 	.word	0x08004125
 80040ec:	08004125 	.word	0x08004125
 80040f0:	0800410d 	.word	0x0800410d
 80040f4:	08004125 	.word	0x08004125
 80040f8:	08004125 	.word	0x08004125
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800411d 	.word	0x0800411d
 8004104:	2300      	movs	r3, #0
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410a:	e042      	b.n	8004192 <UART_SetConfig+0x1ba>
 800410c:	2302      	movs	r3, #2
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	e03e      	b.n	8004192 <UART_SetConfig+0x1ba>
 8004114:	2304      	movs	r3, #4
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e03a      	b.n	8004192 <UART_SetConfig+0x1ba>
 800411c:	2308      	movs	r3, #8
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	e036      	b.n	8004192 <UART_SetConfig+0x1ba>
 8004124:	2310      	movs	r3, #16
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412a:	e032      	b.n	8004192 <UART_SetConfig+0x1ba>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a6a      	ldr	r2, [pc, #424]	; (80042dc <UART_SetConfig+0x304>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d12a      	bne.n	800418c <UART_SetConfig+0x1b4>
 8004136:	4b6b      	ldr	r3, [pc, #428]	; (80042e4 <UART_SetConfig+0x30c>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004144:	d01a      	beq.n	800417c <UART_SetConfig+0x1a4>
 8004146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800414a:	d81b      	bhi.n	8004184 <UART_SetConfig+0x1ac>
 800414c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004150:	d00c      	beq.n	800416c <UART_SetConfig+0x194>
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004156:	d815      	bhi.n	8004184 <UART_SetConfig+0x1ac>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <UART_SetConfig+0x18c>
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d008      	beq.n	8004174 <UART_SetConfig+0x19c>
 8004162:	e00f      	b.n	8004184 <UART_SetConfig+0x1ac>
 8004164:	2300      	movs	r3, #0
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416a:	e012      	b.n	8004192 <UART_SetConfig+0x1ba>
 800416c:	2302      	movs	r3, #2
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004172:	e00e      	b.n	8004192 <UART_SetConfig+0x1ba>
 8004174:	2304      	movs	r3, #4
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417a:	e00a      	b.n	8004192 <UART_SetConfig+0x1ba>
 800417c:	2308      	movs	r3, #8
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004182:	e006      	b.n	8004192 <UART_SetConfig+0x1ba>
 8004184:	2310      	movs	r3, #16
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418a:	e002      	b.n	8004192 <UART_SetConfig+0x1ba>
 800418c:	2310      	movs	r3, #16
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a51      	ldr	r2, [pc, #324]	; (80042dc <UART_SetConfig+0x304>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d17a      	bne.n	8004292 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800419c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d824      	bhi.n	80041ee <UART_SetConfig+0x216>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0x1d4>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041d1 	.word	0x080041d1
 80041b0:	080041ef 	.word	0x080041ef
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041df 	.word	0x080041df
 80041c0:	080041ef 	.word	0x080041ef
 80041c4:	080041ef 	.word	0x080041ef
 80041c8:	080041ef 	.word	0x080041ef
 80041cc:	080041e7 	.word	0x080041e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d0:	f7ff fa5e 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80041d4:	61f8      	str	r0, [r7, #28]
        break;
 80041d6:	e010      	b.n	80041fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b44      	ldr	r3, [pc, #272]	; (80042ec <UART_SetConfig+0x314>)
 80041da:	61fb      	str	r3, [r7, #28]
        break;
 80041dc:	e00d      	b.n	80041fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7ff f9bf 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80041e2:	61f8      	str	r0, [r7, #28]
        break;
 80041e4:	e009      	b.n	80041fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ea:	61fb      	str	r3, [r7, #28]
        break;
 80041ec:	e005      	b.n	80041fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8107 	beq.w	8004410 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d305      	bcc.n	800421e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004224:	e0f4      	b.n	8004410 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2200      	movs	r2, #0
 800422a:	461c      	mov	r4, r3
 800422c:	4615      	mov	r5, r2
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	022b      	lsls	r3, r5, #8
 8004238:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800423c:	0222      	lsls	r2, r4, #8
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	6849      	ldr	r1, [r1, #4]
 8004242:	0849      	lsrs	r1, r1, #1
 8004244:	2000      	movs	r0, #0
 8004246:	4688      	mov	r8, r1
 8004248:	4681      	mov	r9, r0
 800424a:	eb12 0a08 	adds.w	sl, r2, r8
 800424e:	eb43 0b09 	adc.w	fp, r3, r9
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004260:	4650      	mov	r0, sl
 8004262:	4659      	mov	r1, fp
 8004264:	f7fc fb4a 	bl	80008fc <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004276:	d308      	bcc.n	800428a <UART_SetConfig+0x2b2>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427e:	d204      	bcs.n	800428a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	e0c2      	b.n	8004410 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004290:	e0be      	b.n	8004410 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429a:	d16a      	bne.n	8004372 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800429c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d834      	bhi.n	800430e <UART_SetConfig+0x336>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x2d4>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	080042f9 	.word	0x080042f9
 80042b8:	0800430f 	.word	0x0800430f
 80042bc:	080042ff 	.word	0x080042ff
 80042c0:	0800430f 	.word	0x0800430f
 80042c4:	0800430f 	.word	0x0800430f
 80042c8:	0800430f 	.word	0x0800430f
 80042cc:	08004307 	.word	0x08004307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7ff f9de 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80042d4:	61f8      	str	r0, [r7, #28]
        break;
 80042d6:	e020      	b.n	800431a <UART_SetConfig+0x342>
 80042d8:	efff69f3 	.word	0xefff69f3
 80042dc:	40008000 	.word	0x40008000
 80042e0:	40013800 	.word	0x40013800
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40004400 	.word	0x40004400
 80042ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7ff f9e4 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 80042f4:	61f8      	str	r0, [r7, #28]
        break;
 80042f6:	e010      	b.n	800431a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f8:	4b4c      	ldr	r3, [pc, #304]	; (800442c <UART_SetConfig+0x454>)
 80042fa:	61fb      	str	r3, [r7, #28]
        break;
 80042fc:	e00d      	b.n	800431a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fe:	f7ff f92f 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 8004302:	61f8      	str	r0, [r7, #28]
        break;
 8004304:	e009      	b.n	800431a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430a:	61fb      	str	r3, [r7, #28]
        break;
 800430c:	e005      	b.n	800431a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d077      	beq.n	8004410 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005a      	lsls	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b0f      	cmp	r3, #15
 800433a:	d916      	bls.n	800436a <UART_SetConfig+0x392>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004342:	d212      	bcs.n	800436a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f023 030f 	bic.w	r3, r3, #15
 800434c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	b29a      	uxth	r2, r3
 800435a:	8afb      	ldrh	r3, [r7, #22]
 800435c:	4313      	orrs	r3, r2
 800435e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	8afa      	ldrh	r2, [r7, #22]
 8004366:	60da      	str	r2, [r3, #12]
 8004368:	e052      	b.n	8004410 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004370:	e04e      	b.n	8004410 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004376:	2b08      	cmp	r3, #8
 8004378:	d827      	bhi.n	80043ca <UART_SetConfig+0x3f2>
 800437a:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <UART_SetConfig+0x3a8>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043ad 	.word	0x080043ad
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043cb 	.word	0x080043cb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7ff f974 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61f8      	str	r0, [r7, #28]
        break;
 80043aa:	e014      	b.n	80043d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ac:	f7ff f986 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 80043b0:	61f8      	str	r0, [r7, #28]
        break;
 80043b2:	e010      	b.n	80043d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b1d      	ldr	r3, [pc, #116]	; (800442c <UART_SetConfig+0x454>)
 80043b6:	61fb      	str	r3, [r7, #28]
        break;
 80043b8:	e00d      	b.n	80043d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7ff f8d1 	bl	8003560 <HAL_RCC_GetSysClockFreq>
 80043be:	61f8      	str	r0, [r7, #28]
        break;
 80043c0:	e009      	b.n	80043d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e005      	b.n	80043d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043d4:	bf00      	nop
    }

    if (pclk != 0U)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d019      	beq.n	8004410 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	085a      	lsrs	r2, r3, #1
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	441a      	add	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	d909      	bls.n	800440a <UART_SetConfig+0x432>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d205      	bcs.n	800440a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
 8004408:	e002      	b.n	8004410 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800441c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004420:	4618      	mov	r0, r3
 8004422:	3728      	adds	r7, #40	; 0x28
 8004424:	46bd      	mov	sp, r7
 8004426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442a:	bf00      	nop
 800442c:	00f42400 	.word	0x00f42400

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d10a      	bne.n	8004546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004584:	f7fc fdc6 	bl	8001114 <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d10e      	bne.n	80045b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f82d 	bl	8004606 <UART_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e023      	b.n	80045fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d10e      	bne.n	80045e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f817 	bl	8004606 <UART_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e00d      	b.n	80045fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b09c      	sub	sp, #112	; 0x70
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	4613      	mov	r3, r2
 8004614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004616:	e0a5      	b.n	8004764 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	f000 80a1 	beq.w	8004764 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fc fd77 	bl	8001114 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <UART_WaitOnFlagUntilTimeout+0x32>
 8004632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004634:	2b00      	cmp	r3, #0
 8004636:	d13e      	bne.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800464c:	667b      	str	r3, [r7, #100]	; 0x64
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004658:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800465c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e6      	bne.n	8004638 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	663b      	str	r3, [r7, #96]	; 0x60
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800468a:	64ba      	str	r2, [r7, #72]	; 0x48
 800468c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e5      	bne.n	800466a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e067      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d04f      	beq.n	8004764 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d2:	d147      	bne.n	8004764 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
 80046fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e6      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	613b      	str	r3, [r7, #16]
   return(result);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	66bb      	str	r3, [r7, #104]	; 0x68
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004730:	623a      	str	r2, [r7, #32]
 8004732:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	69f9      	ldr	r1, [r7, #28]
 8004736:	6a3a      	ldr	r2, [r7, #32]
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	61bb      	str	r3, [r7, #24]
   return(result);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e5      	bne.n	8004710 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e010      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	429a      	cmp	r2, r3
 8004780:	f43f af4a 	beq.w	8004618 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3770      	adds	r7, #112	; 0x70
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <voltage_cal>:
uint16_t raw_value;

float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 8004794:	f000 fc20 	bl	8004fd8 <adc_value>
 8004798:	4603      	mov	r3, r0
 800479a:	461a      	mov	r2, r3
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <voltage_cal+0x48>)
 800479e:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <voltage_cal+0x48>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fb ffef 	bl	8000788 <__aeabi_i2d>
 80047aa:	a309      	add	r3, pc, #36	; (adr r3, 80047d0 <voltage_cal+0x40>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb fd6e 	bl	8000290 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f7fc f84e 	bl	800085c <__aeabi_d2f>
 80047c0:	4603      	mov	r3, r0
 80047c2:	ee07 3a90 	vmov	s15, r3
}
 80047c6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	f3af 8000 	nop.w
 80047d0:	e734d9b4 	.word	0xe734d9b4
 80047d4:	3f4a680c 	.word	0x3f4a680c
 80047d8:	20000094 	.word	0x20000094

080047dc <ADC_handler>:

void ADC_handler()
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
	if(adcChnlChecker[0] == 1)
 80047e0:	4b2a      	ldr	r3, [pc, #168]	; (800488c <ADC_handler+0xb0>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d10f      	bne.n	8004808 <ADC_handler+0x2c>
	{
		ADC_select_CH1();
 80047e8:	f000 fb38 	bl	8004e5c <ADC_select_CH1>
		adc_start();
 80047ec:	f000 fbde 	bl	8004fac <adc_start>
		adc_conversion();
 80047f0:	f000 fbe6 	bl	8004fc0 <adc_conversion>
		adc1_value = voltage_cal();
 80047f4:	f7ff ffcc 	bl	8004790 <voltage_cal>
 80047f8:	eef0 7a40 	vmov.f32	s15, s0
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <ADC_handler+0xb4>)
 80047fe:	edc3 7a00 	vstr	s15, [r3]
		adc_stop();
 8004802:	f000 fbf5 	bl	8004ff0 <adc_stop>
 8004806:	e000      	b.n	800480a <ADC_handler+0x2e>
	}
	else
	{
		__NOP();
 8004808:	bf00      	nop
	}
	if(adcChnlChecker[1] == 1)
 800480a:	4b20      	ldr	r3, [pc, #128]	; (800488c <ADC_handler+0xb0>)
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10f      	bne.n	8004832 <ADC_handler+0x56>
	{
		ADC_select_CH2();
 8004812:	f000 fb4d 	bl	8004eb0 <ADC_select_CH2>
		adc_start();
 8004816:	f000 fbc9 	bl	8004fac <adc_start>
		adc_conversion();
 800481a:	f000 fbd1 	bl	8004fc0 <adc_conversion>
		adc2_value = voltage_cal();
 800481e:	f7ff ffb7 	bl	8004790 <voltage_cal>
 8004822:	eef0 7a40 	vmov.f32	s15, s0
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <ADC_handler+0xb8>)
 8004828:	edc3 7a00 	vstr	s15, [r3]
		adc_stop();
 800482c:	f000 fbe0 	bl	8004ff0 <adc_stop>
 8004830:	e000      	b.n	8004834 <ADC_handler+0x58>
	}
	else
	{
		__NOP();
 8004832:	bf00      	nop
	}
	if(adcChnlChecker[2] == 1)
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <ADC_handler+0xb0>)
 8004836:	789b      	ldrb	r3, [r3, #2]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10f      	bne.n	800485c <ADC_handler+0x80>
	{
		ADC_select_CH3();
 800483c:	f000 fb62 	bl	8004f04 <ADC_select_CH3>
		adc_start();
 8004840:	f000 fbb4 	bl	8004fac <adc_start>
		adc_conversion();
 8004844:	f000 fbbc 	bl	8004fc0 <adc_conversion>
		adc3_value = voltage_cal();
 8004848:	f7ff ffa2 	bl	8004790 <voltage_cal>
 800484c:	eef0 7a40 	vmov.f32	s15, s0
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <ADC_handler+0xbc>)
 8004852:	edc3 7a00 	vstr	s15, [r3]
		adc_stop();
 8004856:	f000 fbcb 	bl	8004ff0 <adc_stop>
 800485a:	e000      	b.n	800485e <ADC_handler+0x82>
	}
	else
	{
		__NOP();
 800485c:	bf00      	nop
	}
	if(adcChnlChecker[3] == 1)
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <ADC_handler+0xb0>)
 8004860:	78db      	ldrb	r3, [r3, #3]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10f      	bne.n	8004886 <ADC_handler+0xaa>
	{
		ADC_select_CH4();
 8004866:	f000 fb77 	bl	8004f58 <ADC_select_CH4>
		adc_start();
 800486a:	f000 fb9f 	bl	8004fac <adc_start>
		adc_conversion();
 800486e:	f000 fba7 	bl	8004fc0 <adc_conversion>
		adc4_value = voltage_cal();
 8004872:	f7ff ff8d 	bl	8004790 <voltage_cal>
 8004876:	eef0 7a40 	vmov.f32	s15, s0
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <ADC_handler+0xc0>)
 800487c:	edc3 7a00 	vstr	s15, [r3]
		adc_stop();
 8004880:	f000 fbb6 	bl	8004ff0 <adc_stop>
	{
		__NOP();
	}
//	adc_stop();

}
 8004884:	e000      	b.n	8004888 <ADC_handler+0xac>
		__NOP();
 8004886:	bf00      	nop
}
 8004888:	bf00      	nop
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000168 	.word	0x20000168
 8004890:	20000098 	.word	0x20000098
 8004894:	2000009c 	.word	0x2000009c
 8004898:	200000a0 	.word	0x200000a0
 800489c:	200000a4 	.word	0x200000a4

080048a0 <Configurator>:
uint8_t s[4];
extern struct status d;
uint8_t adcChnlChecker[4];

void Configurator()
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
	data_receive();
 80048a4:	f000 fcdc 	bl	8005260 <data_receive>

	if (tx_data[0] != '\0')
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <Configurator+0x44>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <Configurator+0x18>
	{
		flag = 1; // Set flag to indicate data has been received
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <Configurator+0x48>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e002      	b.n	80048be <Configurator+0x1e>
	}
	else
	{
		flag=0;
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <Configurator+0x48>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
	}

	if (flag)
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <Configurator+0x48>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <Configurator+0x2e>
	{
		extract_data();
 80048c6:	f000 f8cb 	bl	8004a60 <extract_data>
		pin_config();
 80048ca:	f000 f901 	bl	8004ad0 <pin_config>
		//clear_buffer();
	}
	reset_output();
 80048ce:	f000 f84d 	bl	800496c <reset_output>
	set_output();
 80048d2:	f000 f80d 	bl	80048f0 <set_output>
	pin_status = read_pinstatus();
 80048d6:	f000 f887 	bl	80049e8 <read_pinstatus>
 80048da:	4603      	mov	r3, r0
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <Configurator+0x4c>)
 80048de:	6013      	str	r3, [r2, #0]
	//            status_transmit();
	//DataTOgsm(d);


}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	200000ac 	.word	0x200000ac
 80048e8:	2000015c 	.word	0x2000015c
 80048ec:	20000160 	.word	0x20000160

080048f0 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

void set_output()
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
	if(config[0] == 0)
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <set_output+0x70>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d108      	bne.n	800490e <set_output+0x1e>
	{
		d.gpio[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_SET);
 80048fc:	2201      	movs	r2, #1
 80048fe:	2101      	movs	r1, #1
 8004900:	4818      	ldr	r0, [pc, #96]	; (8004964 <set_output+0x74>)
 8004902:	f000 fcd1 	bl	80052a8 <write_gpio>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	4b17      	ldr	r3, [pc, #92]	; (8004968 <set_output+0x78>)
 800490c:	701a      	strb	r2, [r3, #0]
	}

	if(config[1] == 0)
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <set_output+0x70>)
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <set_output+0x38>
	{
		d.gpio[1] = write_gpio(GPIOB,GPIO_PIN_1, PIN_SET);
 8004916:	2201      	movs	r2, #1
 8004918:	2102      	movs	r1, #2
 800491a:	4812      	ldr	r0, [pc, #72]	; (8004964 <set_output+0x74>)
 800491c:	f000 fcc4 	bl	80052a8 <write_gpio>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <set_output+0x78>)
 8004926:	705a      	strb	r2, [r3, #1]
	}

	if(config[2] == 0)
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <set_output+0x70>)
 800492a:	789b      	ldrb	r3, [r3, #2]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d108      	bne.n	8004942 <set_output+0x52>
	{
		d.gpio[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 8004930:	2201      	movs	r2, #1
 8004932:	2110      	movs	r1, #16
 8004934:	480b      	ldr	r0, [pc, #44]	; (8004964 <set_output+0x74>)
 8004936:	f000 fcb7 	bl	80052a8 <write_gpio>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <set_output+0x78>)
 8004940:	709a      	strb	r2, [r3, #2]
	}

	if(config[3] == 0)
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <set_output+0x70>)
 8004944:	78db      	ldrb	r3, [r3, #3]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d108      	bne.n	800495c <set_output+0x6c>
	{
		d.gpio[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 800494a:	2201      	movs	r2, #1
 800494c:	2120      	movs	r1, #32
 800494e:	4805      	ldr	r0, [pc, #20]	; (8004964 <set_output+0x74>)
 8004950:	f000 fcaa 	bl	80052a8 <write_gpio>
 8004954:	4603      	mov	r3, r0
 8004956:	461a      	mov	r2, r3
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <set_output+0x78>)
 800495a:	70da      	strb	r2, [r3, #3]
	}
}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000164 	.word	0x20000164
 8004964:	48000400 	.word	0x48000400
 8004968:	200001e4 	.word	0x200001e4

0800496c <reset_output>:

void reset_output()
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
	if(config[0] == 0)
 8004970:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <reset_output+0x70>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <reset_output+0x1e>
	{
		d.gpio[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_RESET);
 8004978:	2200      	movs	r2, #0
 800497a:	2101      	movs	r1, #1
 800497c:	4818      	ldr	r0, [pc, #96]	; (80049e0 <reset_output+0x74>)
 800497e:	f000 fc93 	bl	80052a8 <write_gpio>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <reset_output+0x78>)
 8004988:	701a      	strb	r2, [r3, #0]
	}

	if(config[1] == 0)
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <reset_output+0x70>)
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <reset_output+0x38>
	{
		d.gpio[1]=write_gpio(GPIOB,GPIO_PIN_1, PIN_RESET);
 8004992:	2200      	movs	r2, #0
 8004994:	2102      	movs	r1, #2
 8004996:	4812      	ldr	r0, [pc, #72]	; (80049e0 <reset_output+0x74>)
 8004998:	f000 fc86 	bl	80052a8 <write_gpio>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <reset_output+0x78>)
 80049a2:	705a      	strb	r2, [r3, #1]
	}

	if(config[2] == 0)
 80049a4:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <reset_output+0x70>)
 80049a6:	789b      	ldrb	r3, [r3, #2]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d108      	bne.n	80049be <reset_output+0x52>
	{
		d.gpio[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 80049ac:	2200      	movs	r2, #0
 80049ae:	2110      	movs	r1, #16
 80049b0:	480b      	ldr	r0, [pc, #44]	; (80049e0 <reset_output+0x74>)
 80049b2:	f000 fc79 	bl	80052a8 <write_gpio>
 80049b6:	4603      	mov	r3, r0
 80049b8:	461a      	mov	r2, r3
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <reset_output+0x78>)
 80049bc:	709a      	strb	r2, [r3, #2]
	}

	if(config[3] == 0)
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <reset_output+0x70>)
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d108      	bne.n	80049d8 <reset_output+0x6c>
	{
		d.gpio[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2120      	movs	r1, #32
 80049ca:	4805      	ldr	r0, [pc, #20]	; (80049e0 <reset_output+0x74>)
 80049cc:	f000 fc6c 	bl	80052a8 <write_gpio>
 80049d0:	4603      	mov	r3, r0
 80049d2:	461a      	mov	r2, r3
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <reset_output+0x78>)
 80049d6:	70da      	strb	r2, [r3, #3]
	}
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000164 	.word	0x20000164
 80049e0:	48000400 	.word	0x48000400
 80049e4:	200001e4 	.word	0x200001e4

080049e8 <read_pinstatus>:

uint8_t* read_pinstatus()
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	if(config[0]==1)
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <read_pinstatus+0x6c>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <read_pinstatus+0x1c>
	{
		d.gpio[0]=read_gpio( GPIOB,GPIO_PIN_0);
 80049f4:	2101      	movs	r1, #1
 80049f6:	4818      	ldr	r0, [pc, #96]	; (8004a58 <read_pinstatus+0x70>)
 80049f8:	f000 fc46 	bl	8005288 <read_gpio>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <read_pinstatus+0x74>)
 8004a02:	701a      	strb	r2, [r3, #0]
	}
	if(config[1]==1)
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <read_pinstatus+0x6c>)
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d107      	bne.n	8004a1c <read_pinstatus+0x34>
	{
		d.gpio[1]=read_gpio( GPIOB,GPIO_PIN_1);
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	4812      	ldr	r0, [pc, #72]	; (8004a58 <read_pinstatus+0x70>)
 8004a10:	f000 fc3a 	bl	8005288 <read_gpio>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <read_pinstatus+0x74>)
 8004a1a:	705a      	strb	r2, [r3, #1]
	}
	if(config[2]==1)
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <read_pinstatus+0x6c>)
 8004a1e:	789b      	ldrb	r3, [r3, #2]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d107      	bne.n	8004a34 <read_pinstatus+0x4c>
	{
		d.gpio[2]=read_gpio( GPIOB,GPIO_PIN_4);
 8004a24:	2110      	movs	r1, #16
 8004a26:	480c      	ldr	r0, [pc, #48]	; (8004a58 <read_pinstatus+0x70>)
 8004a28:	f000 fc2e 	bl	8005288 <read_gpio>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <read_pinstatus+0x74>)
 8004a32:	709a      	strb	r2, [r3, #2]
	}
	if(config[3]==1)
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <read_pinstatus+0x6c>)
 8004a36:	78db      	ldrb	r3, [r3, #3]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <read_pinstatus+0x64>
	{
		d.gpio[3]=read_gpio( GPIOB,GPIO_PIN_5);
 8004a3c:	2120      	movs	r1, #32
 8004a3e:	4806      	ldr	r0, [pc, #24]	; (8004a58 <read_pinstatus+0x70>)
 8004a40:	f000 fc22 	bl	8005288 <read_gpio>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <read_pinstatus+0x74>)
 8004a4a:	70da      	strb	r2, [r3, #3]
	}
	return d.gpio;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <read_pinstatus+0x74>)
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000164 	.word	0x20000164
 8004a58:	48000400 	.word	0x48000400
 8004a5c:	200001e4 	.word	0x200001e4

08004a60 <extract_data>:


void extract_data()
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 8004a64:	4915      	ldr	r1, [pc, #84]	; (8004abc <extract_data+0x5c>)
 8004a66:	4816      	ldr	r0, [pc, #88]	; (8004ac0 <extract_data+0x60>)
 8004a68:	f000 fc78 	bl	800535c <strtok>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <extract_data+0x64>)
 8004a70:	6013      	str	r3, [r2, #0]


	if (token != NULL)
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <extract_data+0x64>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <extract_data+0x3c>
	{
		strncpy(arr1, token, sizeof(arr1) - 1);
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <extract_data+0x64>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2209      	movs	r2, #9
 8004a80:	4619      	mov	r1, r3
 8004a82:	4811      	ldr	r0, [pc, #68]	; (8004ac8 <extract_data+0x68>)
 8004a84:	f000 fc56 	bl	8005334 <strncpy>

		arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <extract_data+0x68>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	725a      	strb	r2, [r3, #9]
		token = strtok(NULL, ",");
 8004a8e:	490b      	ldr	r1, [pc, #44]	; (8004abc <extract_data+0x5c>)
 8004a90:	2000      	movs	r0, #0
 8004a92:	f000 fc63 	bl	800535c <strtok>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <extract_data+0x64>)
 8004a9a:	6013      	str	r3, [r2, #0]
	}

	// Get the second token and store it in arr2
	if (token != NULL)
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <extract_data+0x64>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <extract_data+0x58>
	{
		strncpy(arr2, token, sizeof(arr2) - 1);
 8004aa4:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <extract_data+0x64>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2209      	movs	r2, #9
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4807      	ldr	r0, [pc, #28]	; (8004acc <extract_data+0x6c>)
 8004aae:	f000 fc41 	bl	8005334 <strncpy>
		arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <extract_data+0x6c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	725a      	strb	r2, [r3, #9]
		//token = strtok(NULL, ",");
	}


}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	08006420 	.word	0x08006420
 8004ac0:	200000ac 	.word	0x200000ac
 8004ac4:	20000158 	.word	0x20000158
 8004ac8:	20000140 	.word	0x20000140
 8004acc:	2000014c 	.word	0x2000014c

08004ad0 <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0

	if(strcmp(arr1,"B0")==0)
 8004ad4:	499a      	ldr	r1, [pc, #616]	; (8004d40 <pin_config+0x270>)
 8004ad6:	489b      	ldr	r0, [pc, #620]	; (8004d44 <pin_config+0x274>)
 8004ad8:	f7fb fb7a 	bl	80001d0 <strcmp>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <pin_config+0x1a>
	{
		switch_val=1;
 8004ae2:	4b99      	ldr	r3, [pc, #612]	; (8004d48 <pin_config+0x278>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e040      	b.n	8004b6c <pin_config+0x9c>
	}

	else if(strcmp(arr1,"B1")==0)
 8004aea:	4998      	ldr	r1, [pc, #608]	; (8004d4c <pin_config+0x27c>)
 8004aec:	4895      	ldr	r0, [pc, #596]	; (8004d44 <pin_config+0x274>)
 8004aee:	f7fb fb6f 	bl	80001d0 <strcmp>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <pin_config+0x30>
	{
		switch_val=2;
 8004af8:	4b93      	ldr	r3, [pc, #588]	; (8004d48 <pin_config+0x278>)
 8004afa:	2202      	movs	r2, #2
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e035      	b.n	8004b6c <pin_config+0x9c>
	}

	else if(strcmp(arr1,"B4")==0)
 8004b00:	4993      	ldr	r1, [pc, #588]	; (8004d50 <pin_config+0x280>)
 8004b02:	4890      	ldr	r0, [pc, #576]	; (8004d44 <pin_config+0x274>)
 8004b04:	f7fb fb64 	bl	80001d0 <strcmp>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <pin_config+0x46>
	{
		switch_val=3;
 8004b0e:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <pin_config+0x278>)
 8004b10:	2203      	movs	r2, #3
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e02a      	b.n	8004b6c <pin_config+0x9c>
	}

	else if(strcmp(arr1,"B5")==0)
 8004b16:	498f      	ldr	r1, [pc, #572]	; (8004d54 <pin_config+0x284>)
 8004b18:	488a      	ldr	r0, [pc, #552]	; (8004d44 <pin_config+0x274>)
 8004b1a:	f7fb fb59 	bl	80001d0 <strcmp>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <pin_config+0x5c>
	{
		switch_val=4;
 8004b24:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <pin_config+0x278>)
 8004b26:	2204      	movs	r2, #4
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e01f      	b.n	8004b6c <pin_config+0x9c>
	}

	else if(strcmp(arr1,"ADC1")==0)
 8004b2c:	498a      	ldr	r1, [pc, #552]	; (8004d58 <pin_config+0x288>)
 8004b2e:	4885      	ldr	r0, [pc, #532]	; (8004d44 <pin_config+0x274>)
 8004b30:	f7fb fb4e 	bl	80001d0 <strcmp>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <pin_config+0x72>
	{
		switch_val=5;
 8004b3a:	4b83      	ldr	r3, [pc, #524]	; (8004d48 <pin_config+0x278>)
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e014      	b.n	8004b6c <pin_config+0x9c>
	}

	else if(strcmp(arr1,"RTC")==0)
 8004b42:	4986      	ldr	r1, [pc, #536]	; (8004d5c <pin_config+0x28c>)
 8004b44:	487f      	ldr	r0, [pc, #508]	; (8004d44 <pin_config+0x274>)
 8004b46:	f7fb fb43 	bl	80001d0 <strcmp>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <pin_config+0x88>
	{
		switch_val=6;
 8004b50:	4b7d      	ldr	r3, [pc, #500]	; (8004d48 <pin_config+0x278>)
 8004b52:	2206      	movs	r2, #6
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	e009      	b.n	8004b6c <pin_config+0x9c>
	}

	else if(strcmp(arr1,"SCANTIME")==0)
 8004b58:	4981      	ldr	r1, [pc, #516]	; (8004d60 <pin_config+0x290>)
 8004b5a:	487a      	ldr	r0, [pc, #488]	; (8004d44 <pin_config+0x274>)
 8004b5c:	f7fb fb38 	bl	80001d0 <strcmp>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <pin_config+0x9c>
	{
		switch_val=7;
 8004b66:	4b78      	ldr	r3, [pc, #480]	; (8004d48 <pin_config+0x278>)
 8004b68:	2207      	movs	r2, #7
 8004b6a:	601a      	str	r2, [r3, #0]
	}


	switch(switch_val)
 8004b6c:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <pin_config+0x278>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	f200 80e1 	bhi.w	8004d3a <pin_config+0x26a>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <pin_config+0xb0>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004b95 	.word	0x08004b95
 8004b84:	08004bd7 	.word	0x08004bd7
 8004b88:	08004c19 	.word	0x08004c19
 8004b8c:	08004c59 	.word	0x08004c59
 8004b90:	08004c99 	.word	0x08004c99
	{

	case 1:
		if(strcmp(arr2,"OUTPUT")==0)
 8004b94:	4973      	ldr	r1, [pc, #460]	; (8004d64 <pin_config+0x294>)
 8004b96:	4874      	ldr	r0, [pc, #464]	; (8004d68 <pin_config+0x298>)
 8004b98:	f7fb fb1a 	bl	80001d0 <strcmp>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <pin_config+0xe4>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_0,OUTPUT);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4871      	ldr	r0, [pc, #452]	; (8004d6c <pin_config+0x29c>)
 8004ba8:	f000 fabe 	bl	8005128 <user_GPIO_Init>
			config[0] = 0;
 8004bac:	4b70      	ldr	r3, [pc, #448]	; (8004d70 <pin_config+0x2a0>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
			config[0] = 1;
		}
		break;
 8004bb2:	e0bb      	b.n	8004d2c <pin_config+0x25c>
		else if(strcmp(arr2,"INPUT")==0)
 8004bb4:	496f      	ldr	r1, [pc, #444]	; (8004d74 <pin_config+0x2a4>)
 8004bb6:	486c      	ldr	r0, [pc, #432]	; (8004d68 <pin_config+0x298>)
 8004bb8:	f7fb fb0a 	bl	80001d0 <strcmp>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 80b4 	bne.w	8004d2c <pin_config+0x25c>
			user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	4868      	ldr	r0, [pc, #416]	; (8004d6c <pin_config+0x29c>)
 8004bca:	f000 faad 	bl	8005128 <user_GPIO_Init>
			config[0] = 1;
 8004bce:	4b68      	ldr	r3, [pc, #416]	; (8004d70 <pin_config+0x2a0>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
		break;
 8004bd4:	e0aa      	b.n	8004d2c <pin_config+0x25c>

	case 2:
		if(strcmp(arr2,"OUTPUT")==0)
 8004bd6:	4963      	ldr	r1, [pc, #396]	; (8004d64 <pin_config+0x294>)
 8004bd8:	4863      	ldr	r0, [pc, #396]	; (8004d68 <pin_config+0x298>)
 8004bda:	f7fb faf9 	bl	80001d0 <strcmp>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <pin_config+0x126>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_1,OUTPUT);
 8004be4:	2200      	movs	r2, #0
 8004be6:	2102      	movs	r1, #2
 8004be8:	4860      	ldr	r0, [pc, #384]	; (8004d6c <pin_config+0x29c>)
 8004bea:	f000 fa9d 	bl	8005128 <user_GPIO_Init>
			config[1]=0;
 8004bee:	4b60      	ldr	r3, [pc, #384]	; (8004d70 <pin_config+0x2a0>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	705a      	strb	r2, [r3, #1]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
			config[1]=1;
		}
		break;
 8004bf4:	e09c      	b.n	8004d30 <pin_config+0x260>
		else if(strcmp(arr2,"INPUT")==0)
 8004bf6:	495f      	ldr	r1, [pc, #380]	; (8004d74 <pin_config+0x2a4>)
 8004bf8:	485b      	ldr	r0, [pc, #364]	; (8004d68 <pin_config+0x298>)
 8004bfa:	f7fb fae9 	bl	80001d0 <strcmp>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f040 8095 	bne.w	8004d30 <pin_config+0x260>
			user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
 8004c06:	2201      	movs	r2, #1
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4858      	ldr	r0, [pc, #352]	; (8004d6c <pin_config+0x29c>)
 8004c0c:	f000 fa8c 	bl	8005128 <user_GPIO_Init>
			config[1]=1;
 8004c10:	4b57      	ldr	r3, [pc, #348]	; (8004d70 <pin_config+0x2a0>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	705a      	strb	r2, [r3, #1]
		break;
 8004c16:	e08b      	b.n	8004d30 <pin_config+0x260>

	case 3:
		if(strcmp(arr2,"OUTPUT")==0)
 8004c18:	4952      	ldr	r1, [pc, #328]	; (8004d64 <pin_config+0x294>)
 8004c1a:	4853      	ldr	r0, [pc, #332]	; (8004d68 <pin_config+0x298>)
 8004c1c:	f7fb fad8 	bl	80001d0 <strcmp>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d108      	bne.n	8004c38 <pin_config+0x168>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8004c26:	2200      	movs	r2, #0
 8004c28:	2110      	movs	r1, #16
 8004c2a:	4850      	ldr	r0, [pc, #320]	; (8004d6c <pin_config+0x29c>)
 8004c2c:	f000 fa7c 	bl	8005128 <user_GPIO_Init>
			config[2]=0;
 8004c30:	4b4f      	ldr	r3, [pc, #316]	; (8004d70 <pin_config+0x2a0>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	709a      	strb	r2, [r3, #2]
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			config[2]=1;
		}

		break;
 8004c36:	e07d      	b.n	8004d34 <pin_config+0x264>
		else if(strcmp(arr2,"INPUT")==0)
 8004c38:	494e      	ldr	r1, [pc, #312]	; (8004d74 <pin_config+0x2a4>)
 8004c3a:	484b      	ldr	r0, [pc, #300]	; (8004d68 <pin_config+0x298>)
 8004c3c:	f7fb fac8 	bl	80001d0 <strcmp>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d176      	bne.n	8004d34 <pin_config+0x264>
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8004c46:	2201      	movs	r2, #1
 8004c48:	2110      	movs	r1, #16
 8004c4a:	4848      	ldr	r0, [pc, #288]	; (8004d6c <pin_config+0x29c>)
 8004c4c:	f000 fa6c 	bl	8005128 <user_GPIO_Init>
			config[2]=1;
 8004c50:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <pin_config+0x2a0>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	709a      	strb	r2, [r3, #2]
		break;
 8004c56:	e06d      	b.n	8004d34 <pin_config+0x264>

	case 4:
		if(strcmp(arr2,"OUTPUT")==0)
 8004c58:	4942      	ldr	r1, [pc, #264]	; (8004d64 <pin_config+0x294>)
 8004c5a:	4843      	ldr	r0, [pc, #268]	; (8004d68 <pin_config+0x298>)
 8004c5c:	f7fb fab8 	bl	80001d0 <strcmp>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <pin_config+0x1a8>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2120      	movs	r1, #32
 8004c6a:	4840      	ldr	r0, [pc, #256]	; (8004d6c <pin_config+0x29c>)
 8004c6c:	f000 fa5c 	bl	8005128 <user_GPIO_Init>
			config[3]=0;
 8004c70:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <pin_config+0x2a0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	70da      	strb	r2, [r3, #3]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			config[3]=1;
		}
		break;
 8004c76:	e05f      	b.n	8004d38 <pin_config+0x268>
		else if(strcmp(arr2,"INPUT")==0)
 8004c78:	493e      	ldr	r1, [pc, #248]	; (8004d74 <pin_config+0x2a4>)
 8004c7a:	483b      	ldr	r0, [pc, #236]	; (8004d68 <pin_config+0x298>)
 8004c7c:	f7fb faa8 	bl	80001d0 <strcmp>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d158      	bne.n	8004d38 <pin_config+0x268>
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8004c86:	2201      	movs	r2, #1
 8004c88:	2120      	movs	r1, #32
 8004c8a:	4838      	ldr	r0, [pc, #224]	; (8004d6c <pin_config+0x29c>)
 8004c8c:	f000 fa4c 	bl	8005128 <user_GPIO_Init>
			config[3]=1;
 8004c90:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <pin_config+0x2a0>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	70da      	strb	r2, [r3, #3]
		break;
 8004c96:	e04f      	b.n	8004d38 <pin_config+0x268>

	case 5:
		if(strcmp(arr2,"CH1")==0)
 8004c98:	4937      	ldr	r1, [pc, #220]	; (8004d78 <pin_config+0x2a8>)
 8004c9a:	4833      	ldr	r0, [pc, #204]	; (8004d68 <pin_config+0x298>)
 8004c9c:	f7fb fa98 	bl	80001d0 <strcmp>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d105      	bne.n	8004cb2 <pin_config+0x1e2>
		{
			ADC_select_CH1();
 8004ca6:	f000 f8d9 	bl	8004e5c <ADC_select_CH1>
			adcChnlChecker[0] = 1;
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <pin_config+0x2ac>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			__NOP();
		}
		break;
 8004cb0:	e043      	b.n	8004d3a <pin_config+0x26a>
		else if(strcmp(arr2,"CH2")==0)
 8004cb2:	4933      	ldr	r1, [pc, #204]	; (8004d80 <pin_config+0x2b0>)
 8004cb4:	482c      	ldr	r0, [pc, #176]	; (8004d68 <pin_config+0x298>)
 8004cb6:	f7fb fa8b 	bl	80001d0 <strcmp>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <pin_config+0x1fc>
			ADC_select_CH2();
 8004cc0:	f000 f8f6 	bl	8004eb0 <ADC_select_CH2>
			adcChnlChecker[1] = 1;
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <pin_config+0x2ac>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	705a      	strb	r2, [r3, #1]
		break;
 8004cca:	e036      	b.n	8004d3a <pin_config+0x26a>
		else if(strcmp(arr2,"CH3")==0)
 8004ccc:	492d      	ldr	r1, [pc, #180]	; (8004d84 <pin_config+0x2b4>)
 8004cce:	4826      	ldr	r0, [pc, #152]	; (8004d68 <pin_config+0x298>)
 8004cd0:	f7fb fa7e 	bl	80001d0 <strcmp>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <pin_config+0x216>
			ADC_select_CH3();
 8004cda:	f000 f913 	bl	8004f04 <ADC_select_CH3>
			adcChnlChecker[2] = 1;
 8004cde:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <pin_config+0x2ac>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	709a      	strb	r2, [r3, #2]
		break;
 8004ce4:	e029      	b.n	8004d3a <pin_config+0x26a>
		else if(strcmp(arr2,"CH4")==0)
 8004ce6:	4928      	ldr	r1, [pc, #160]	; (8004d88 <pin_config+0x2b8>)
 8004ce8:	481f      	ldr	r0, [pc, #124]	; (8004d68 <pin_config+0x298>)
 8004cea:	f7fb fa71 	bl	80001d0 <strcmp>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <pin_config+0x230>
			ADC_select_CH4();
 8004cf4:	f000 f930 	bl	8004f58 <ADC_select_CH4>
			adcChnlChecker[3] = 1;
 8004cf8:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <pin_config+0x2ac>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	70da      	strb	r2, [r3, #3]
		break;
 8004cfe:	e01c      	b.n	8004d3a <pin_config+0x26a>
		else if(strcmp(arr2,"DB2")==0)
 8004d00:	4922      	ldr	r1, [pc, #136]	; (8004d8c <pin_config+0x2bc>)
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <pin_config+0x298>)
 8004d04:	f7fb fa64 	bl	80001d0 <strcmp>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10c      	bne.n	8004d28 <pin_config+0x258>
			adcChnlChecker[0] = 0;
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <pin_config+0x2ac>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
			adcChnlChecker[1] = 0;
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <pin_config+0x2ac>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	705a      	strb	r2, [r3, #1]
			adcChnlChecker[2] = 0;
 8004d1a:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <pin_config+0x2ac>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	709a      	strb	r2, [r3, #2]
			adcChnlChecker[3] = 0;
 8004d20:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <pin_config+0x2ac>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	70da      	strb	r2, [r3, #3]
		break;
 8004d26:	e008      	b.n	8004d3a <pin_config+0x26a>
			__NOP();
 8004d28:	bf00      	nop
		break;
 8004d2a:	e006      	b.n	8004d3a <pin_config+0x26a>
		break;
 8004d2c:	bf00      	nop
 8004d2e:	e004      	b.n	8004d3a <pin_config+0x26a>
		break;
 8004d30:	bf00      	nop
 8004d32:	e002      	b.n	8004d3a <pin_config+0x26a>
		break;
 8004d34:	bf00      	nop
 8004d36:	e000      	b.n	8004d3a <pin_config+0x26a>
		break;
 8004d38:	bf00      	nop
		//			 break;
		//			     case 7:
		//			    	 d.SCANTIME = (uint8_t)atoi(arr2);
		//			    	 DataTOgsm(d);
	}
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	08006424 	.word	0x08006424
 8004d44:	20000140 	.word	0x20000140
 8004d48:	200000a8 	.word	0x200000a8
 8004d4c:	08006428 	.word	0x08006428
 8004d50:	0800642c 	.word	0x0800642c
 8004d54:	08006430 	.word	0x08006430
 8004d58:	08006434 	.word	0x08006434
 8004d5c:	0800643c 	.word	0x0800643c
 8004d60:	08006440 	.word	0x08006440
 8004d64:	0800644c 	.word	0x0800644c
 8004d68:	2000014c 	.word	0x2000014c
 8004d6c:	48000400 	.word	0x48000400
 8004d70:	20000164 	.word	0x20000164
 8004d74:	08006454 	.word	0x08006454
 8004d78:	0800645c 	.word	0x0800645c
 8004d7c:	20000168 	.word	0x20000168
 8004d80:	08006460 	.word	0x08006460
 8004d84:	08006464 	.word	0x08006464
 8004d88:	08006468 	.word	0x08006468
 8004d8c:	0800646c 	.word	0x0800646c

08004d90 <USER_ADC1_Init>:
	 */
	HAL_RCCEx_EnableMSIPLLMode();
}

void USER_ADC1_Init(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <USER_ADC1_Init+0x80>)
 8004d98:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004d9a:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004d9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004da0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004da8:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004db6:	2208      	movs	r2, #8
 8004db8:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8004dc0:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004de8:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004df6:	4805      	ldr	r0, [pc, #20]	; (8004e0c <USER_ADC1_Init+0x7c>)
 8004df8:	f7fc fbae 	bl	8001558 <HAL_ADC_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <USER_ADC1_Init+0x76>
	{
		Error_Handler();
 8004e02:	f7fb ff0e 	bl	8000c22 <Error_Handler>
//	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2000016c 	.word	0x2000016c
 8004e10:	50040000 	.word	0x50040000

08004e14 <USER_GPIO_Init>:

void USER_GPIO_Init(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <USER_GPIO_Init+0x44>)
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <USER_GPIO_Init+0x44>)
 8004e20:	f043 0304 	orr.w	r3, r3, #4
 8004e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <USER_GPIO_Init+0x44>)
 8004e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	607b      	str	r3, [r7, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <USER_GPIO_Init+0x44>)
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	4a08      	ldr	r2, [pc, #32]	; (8004e58 <USER_GPIO_Init+0x44>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e3e:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <USER_GPIO_Init+0x44>)
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000

08004e5c <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004e62:	463b      	mov	r3, r7
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
 8004e70:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_5;
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <ADC_select_CH1+0x4c>)
 8004e74:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e76:	2306      	movs	r3, #6
 8004e78:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004e7e:	237f      	movs	r3, #127	; 0x7f
 8004e80:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004e82:	2304      	movs	r3, #4
 8004e84:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e8a:	463b      	mov	r3, r7
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4807      	ldr	r0, [pc, #28]	; (8004eac <ADC_select_CH1+0x50>)
 8004e90:	f7fc fddc 	bl	8001a4c <HAL_ADC_ConfigChannel>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <ADC_select_CH1+0x42>
	{
		Error_Handler();
 8004e9a:	f7fb fec2 	bl	8000c22 <Error_Handler>
	}
}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	14f00020 	.word	0x14f00020
 8004eac:	2000016c 	.word	0x2000016c

08004eb0 <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
 8004ec4:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_6;
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <ADC_select_CH2+0x4c>)
 8004ec8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004eca:	2306      	movs	r3, #6
 8004ecc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004ece:	2306      	movs	r3, #6
 8004ed0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004ed2:	237f      	movs	r3, #127	; 0x7f
 8004ed4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ede:	463b      	mov	r3, r7
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4807      	ldr	r0, [pc, #28]	; (8004f00 <ADC_select_CH2+0x50>)
 8004ee4:	f7fc fdb2 	bl	8001a4c <HAL_ADC_ConfigChannel>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <ADC_select_CH2+0x42>
	{
		Error_Handler();
 8004eee:	f7fb fe98 	bl	8000c22 <Error_Handler>
	}
}
 8004ef2:	bf00      	nop
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	19200040 	.word	0x19200040
 8004f00:	2000016c 	.word	0x2000016c

08004f04 <ADC_select_CH3>:

void ADC_select_CH3(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	611a      	str	r2, [r3, #16]
 8004f18:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_9;
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <ADC_select_CH3+0x4c>)
 8004f1c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f1e:	2306      	movs	r3, #6
 8004f20:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004f22:	2306      	movs	r3, #6
 8004f24:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f26:	237f      	movs	r3, #127	; 0x7f
 8004f28:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f32:	463b      	mov	r3, r7
 8004f34:	4619      	mov	r1, r3
 8004f36:	4807      	ldr	r0, [pc, #28]	; (8004f54 <ADC_select_CH3+0x50>)
 8004f38:	f7fc fd88 	bl	8001a4c <HAL_ADC_ConfigChannel>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <ADC_select_CH3+0x42>
	{
		Error_Handler();
 8004f42:	f7fb fe6e 	bl	8000c22 <Error_Handler>
	}
}
 8004f46:	bf00      	nop
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	25b00200 	.word	0x25b00200
 8004f54:	2000016c 	.word	0x2000016c

08004f58 <ADC_select_CH4>:

void ADC_select_CH4(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8004f5e:	463b      	mov	r3, r7
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	611a      	str	r2, [r3, #16]
 8004f6c:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_10;
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <ADC_select_CH4+0x4c>)
 8004f70:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f72:	2306      	movs	r3, #6
 8004f74:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004f76:	2306      	movs	r3, #6
 8004f78:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f7a:	237f      	movs	r3, #127	; 0x7f
 8004f7c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f7e:	2304      	movs	r3, #4
 8004f80:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f86:	463b      	mov	r3, r7
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4807      	ldr	r0, [pc, #28]	; (8004fa8 <ADC_select_CH4+0x50>)
 8004f8c:	f7fc fd5e 	bl	8001a4c <HAL_ADC_ConfigChannel>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <ADC_select_CH4+0x42>
	{
		Error_Handler();
 8004f96:	f7fb fe44 	bl	8000c22 <Error_Handler>
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	2a000400 	.word	0x2a000400
 8004fa8:	2000016c 	.word	0x2000016c

08004fac <adc_start>:
//}



void adc_start(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8004fb0:	4802      	ldr	r0, [pc, #8]	; (8004fbc <adc_start+0x10>)
 8004fb2:	f7fc fc19 	bl	80017e8 <HAL_ADC_Start>
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	2000016c 	.word	0x2000016c

08004fc0 <adc_conversion>:

void adc_conversion(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 8004fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004fc8:	4802      	ldr	r0, [pc, #8]	; (8004fd4 <adc_conversion+0x14>)
 8004fca:	f7fc fca3 	bl	8001914 <HAL_ADC_PollForConversion>
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000016c 	.word	0x2000016c

08004fd8 <adc_value>:

uint16_t adc_value(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8004fdc:	4803      	ldr	r0, [pc, #12]	; (8004fec <adc_value+0x14>)
 8004fde:	f7fc fd28 	bl	8001a32 <HAL_ADC_GetValue>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	b29b      	uxth	r3, r3
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	2000016c 	.word	0x2000016c

08004ff0 <adc_stop>:

void adc_stop(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8004ff4:	4802      	ldr	r0, [pc, #8]	; (8005000 <adc_stop+0x10>)
 8004ff6:	f7fc fc5a 	bl	80018ae <HAL_ADC_Stop>
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	2000016c 	.word	0x2000016c

08005004 <user_SystemClock_Config>:
GPIO_InitTypeDef GPIO_InitStruct = {0};
struct status d;

void user_SystemClock_Config(void)

{
 8005004:	b580      	push	{r7, lr}
 8005006:	b096      	sub	sp, #88	; 0x58
 8005008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	2244      	movs	r2, #68	; 0x44
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f986 	bl	8005324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005018:	463b      	mov	r3, r7
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	605a      	str	r2, [r3, #4]
 8005020:	609a      	str	r2, [r3, #8]
 8005022:	60da      	str	r2, [r3, #12]
 8005024:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005026:	f44f 7000 	mov.w	r0, #512	; 0x200
 800502a:	f7fd fd2f 	bl	8002a8c <HAL_PWREx_ControlVoltageScaling>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <user_SystemClock_Config+0x34>
  {
    Error_Handler();
 8005034:	f7fb fdf5 	bl	8000c22 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005038:	f7fd fd0a 	bl	8002a50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800503c:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <user_SystemClock_Config+0xc0>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <user_SystemClock_Config+0xc0>)
 8005044:	f023 0318 	bic.w	r3, r3, #24
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800504c:	2314      	movs	r3, #20
 800504e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005050:	2301      	movs	r3, #1
 8005052:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005054:	2301      	movs	r3, #1
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800505c:	2360      	movs	r3, #96	; 0x60
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005060:	2302      	movs	r3, #2
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005064:	2301      	movs	r3, #1
 8005066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005068:	2301      	movs	r3, #1
 800506a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800506c:	2310      	movs	r3, #16
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005070:	2307      	movs	r3, #7
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005074:	2302      	movs	r3, #2
 8005076:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005078:	2302      	movs	r3, #2
 800507a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f7fd fd59 	bl	8002b38 <HAL_RCC_OscConfig>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <user_SystemClock_Config+0x8c>
  {
    Error_Handler();
 800508c:	f7fb fdc9 	bl	8000c22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005090:	230f      	movs	r3, #15
 8005092:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005094:	2303      	movs	r3, #3
 8005096:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80050a4:	463b      	mov	r3, r7
 80050a6:	2101      	movs	r1, #1
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe f959 	bl	8003360 <HAL_RCC_ClockConfig>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <user_SystemClock_Config+0xb4>
  {
    Error_Handler();
 80050b4:	f7fb fdb5 	bl	8000c22 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80050b8:	f7fe fd6c 	bl	8003b94 <HAL_RCCEx_EnableMSIPLLMode>
}
 80050bc:	bf00      	nop
 80050be:	3758      	adds	r7, #88	; 0x58
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40021000 	.word	0x40021000

080050c8 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
 ////////////////////
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 80050cc:	4b14      	ldr	r3, [pc, #80]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050ce:	4a15      	ldr	r2, [pc, #84]	; (8005124 <user_USART1_UART_Init+0x5c>)
 80050d0:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050d8:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050dc:	2200      	movs	r2, #0
 80050de:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 80050e6:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050ee:	220c      	movs	r2, #12
 80050f0:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <user_USART1_UART_Init+0x58>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050fe:	4b08      	ldr	r3, [pc, #32]	; (8005120 <user_USART1_UART_Init+0x58>)
 8005100:	2200      	movs	r2, #0
 8005102:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <user_USART1_UART_Init+0x58>)
 8005106:	2200      	movs	r2, #0
 8005108:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 800510a:	4805      	ldr	r0, [pc, #20]	; (8005120 <user_USART1_UART_Init+0x58>)
 800510c:	f7fe fe44 	bl	8003d98 <HAL_UART_Init>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <user_USART1_UART_Init+0x52>
   {
     Error_Handler();
 8005116:	f7fb fd84 	bl	8000c22 <Error_Handler>
   }

 }
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	200000bc 	.word	0x200000bc
 8005124:	40013800 	.word	0x40013800

08005128 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
 8005134:	4613      	mov	r3, r2
 8005136:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8005138:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <user_GPIO_Init+0xac>)
 800513a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513c:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <user_GPIO_Init+0xac>)
 800513e:	f043 0304 	orr.w	r3, r3, #4
 8005142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <user_GPIO_Init+0xac>)
 8005146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8005150:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <user_GPIO_Init+0xac>)
 8005152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005154:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <user_GPIO_Init+0xac>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800515c:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <user_GPIO_Init+0xac>)
 800515e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <user_GPIO_Init+0xac>)
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <user_GPIO_Init+0xac>)
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <user_GPIO_Init+0xac>)
 8005176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8005180:	787a      	ldrb	r2, [r7, #1]
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd fc4a 	bl	8002a20 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 800518c:	787b      	ldrb	r3, [r7, #1]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <user_GPIO_Init+0x78>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8005192:	787a      	ldrb	r2, [r7, #1]
 8005194:	887b      	ldrh	r3, [r7, #2]
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f81f 	bl	80051dc <gpio_output>
 800519e:	e008      	b.n	80051b2 <user_GPIO_Init+0x8a>
     }
     else if(PIN_mode == INPUT)
 80051a0:	787b      	ldrb	r3, [r7, #1]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d105      	bne.n	80051b2 <user_GPIO_Init+0x8a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 80051a6:	787a      	ldrb	r2, [r7, #1]
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f837 	bl	8005220 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <user_GPIO_Init+0xb0>)
 80051b4:	2202      	movs	r2, #2
 80051b6:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <user_GPIO_Init+0xb0>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <user_GPIO_Init+0xb0>)
 80051c0:	2203      	movs	r2, #3
 80051c2:	60da      	str	r2, [r3, #12]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <user_GPIO_Init+0xb0>)
 80051c6:	2203      	movs	r2, #3
 80051c8:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 80051ca:	bf00      	nop
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000
 80051d8:	200001d0 	.word	0x200001d0

080051dc <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	807b      	strh	r3, [r7, #2]
 80051e8:	4613      	mov	r3, r2
 80051ea:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ec:	f107 030c 	add.w	r3, r7, #12
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005200:	2301      	movs	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800520c:	f107 030c 	add.w	r3, r7, #12
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fd fa82 	bl	800271c <HAL_GPIO_Init>
 }
 8005218:	bf00      	nop
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005230:	f107 030c 	add.w	r3, r7, #12
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	605a      	str	r2, [r3, #4]
 800523a:	609a      	str	r2, [r3, #8]
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005244:	2300      	movs	r3, #0
 8005246:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800524c:	f107 030c 	add.w	r3, r7, #12
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fd fa62 	bl	800271c <HAL_GPIO_Init>
 }
 8005258:	bf00      	nop
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <data_receive>:




void data_receive()
 {
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 8005264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005268:	2214      	movs	r2, #20
 800526a:	4905      	ldr	r1, [pc, #20]	; (8005280 <data_receive+0x20>)
 800526c:	4805      	ldr	r0, [pc, #20]	; (8005284 <data_receive+0x24>)
 800526e:	f7fe fde1 	bl	8003e34 <HAL_UART_Receive>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <data_receive+0x1c>
	 {
			 Error_Handler();
 8005278:	f7fb fcd3 	bl	8000c22 <Error_Handler>
	 }
 }
 800527c:	bf00      	nop
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200000ac 	.word	0x200000ac
 8005284:	200000bc 	.word	0x200000bc

08005288 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8005294:	887b      	ldrh	r3, [r7, #2]
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7fd fba9 	bl	80029f0 <HAL_GPIO_ReadPin>
 800529e:	4603      	mov	r3, r0

 }
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
 80052b4:	4613      	mov	r3, r2
 80052b6:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 80052b8:	787a      	ldrb	r2, [r7, #1]
 80052ba:	887b      	ldrh	r3, [r7, #2]
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fd fbae 	bl	8002a20 <HAL_GPIO_WritePin>
    return PinState;
 80052c4:	787b      	ldrb	r3, [r7, #1]
 }
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <__errno>:
 80052d0:	4b01      	ldr	r3, [pc, #4]	; (80052d8 <__errno+0x8>)
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	2000000c 	.word	0x2000000c

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	4d0d      	ldr	r5, [pc, #52]	; (8005314 <__libc_init_array+0x38>)
 80052e0:	4c0d      	ldr	r4, [pc, #52]	; (8005318 <__libc_init_array+0x3c>)
 80052e2:	1b64      	subs	r4, r4, r5
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	2600      	movs	r6, #0
 80052e8:	42a6      	cmp	r6, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	4d0b      	ldr	r5, [pc, #44]	; (800531c <__libc_init_array+0x40>)
 80052ee:	4c0c      	ldr	r4, [pc, #48]	; (8005320 <__libc_init_array+0x44>)
 80052f0:	f001 f88a 	bl	8006408 <_init>
 80052f4:	1b64      	subs	r4, r4, r5
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	2600      	movs	r6, #0
 80052fa:	42a6      	cmp	r6, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	f855 3b04 	ldr.w	r3, [r5], #4
 8005304:	4798      	blx	r3
 8005306:	3601      	adds	r6, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	f855 3b04 	ldr.w	r3, [r5], #4
 800530e:	4798      	blx	r3
 8005310:	3601      	adds	r6, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	08006608 	.word	0x08006608
 8005318:	08006608 	.word	0x08006608
 800531c:	08006608 	.word	0x08006608
 8005320:	0800660c 	.word	0x0800660c

08005324 <memset>:
 8005324:	4402      	add	r2, r0
 8005326:	4603      	mov	r3, r0
 8005328:	4293      	cmp	r3, r2
 800532a:	d100      	bne.n	800532e <memset+0xa>
 800532c:	4770      	bx	lr
 800532e:	f803 1b01 	strb.w	r1, [r3], #1
 8005332:	e7f9      	b.n	8005328 <memset+0x4>

08005334 <strncpy>:
 8005334:	b510      	push	{r4, lr}
 8005336:	3901      	subs	r1, #1
 8005338:	4603      	mov	r3, r0
 800533a:	b132      	cbz	r2, 800534a <strncpy+0x16>
 800533c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005340:	f803 4b01 	strb.w	r4, [r3], #1
 8005344:	3a01      	subs	r2, #1
 8005346:	2c00      	cmp	r4, #0
 8005348:	d1f7      	bne.n	800533a <strncpy+0x6>
 800534a:	441a      	add	r2, r3
 800534c:	2100      	movs	r1, #0
 800534e:	4293      	cmp	r3, r2
 8005350:	d100      	bne.n	8005354 <strncpy+0x20>
 8005352:	bd10      	pop	{r4, pc}
 8005354:	f803 1b01 	strb.w	r1, [r3], #1
 8005358:	e7f9      	b.n	800534e <strncpy+0x1a>
	...

0800535c <strtok>:
 800535c:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <strtok+0x5c>)
 800535e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005360:	681e      	ldr	r6, [r3, #0]
 8005362:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005364:	4605      	mov	r5, r0
 8005366:	b9fc      	cbnz	r4, 80053a8 <strtok+0x4c>
 8005368:	2050      	movs	r0, #80	; 0x50
 800536a:	9101      	str	r1, [sp, #4]
 800536c:	f000 f882 	bl	8005474 <malloc>
 8005370:	9901      	ldr	r1, [sp, #4]
 8005372:	65b0      	str	r0, [r6, #88]	; 0x58
 8005374:	4602      	mov	r2, r0
 8005376:	b920      	cbnz	r0, 8005382 <strtok+0x26>
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <strtok+0x60>)
 800537a:	4811      	ldr	r0, [pc, #68]	; (80053c0 <strtok+0x64>)
 800537c:	2157      	movs	r1, #87	; 0x57
 800537e:	f000 f849 	bl	8005414 <__assert_func>
 8005382:	e9c0 4400 	strd	r4, r4, [r0]
 8005386:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800538a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800538e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005392:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005396:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800539a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800539e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80053a2:	6184      	str	r4, [r0, #24]
 80053a4:	7704      	strb	r4, [r0, #28]
 80053a6:	6244      	str	r4, [r0, #36]	; 0x24
 80053a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80053aa:	2301      	movs	r3, #1
 80053ac:	4628      	mov	r0, r5
 80053ae:	b002      	add	sp, #8
 80053b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053b4:	f000 b806 	b.w	80053c4 <__strtok_r>
 80053b8:	2000000c 	.word	0x2000000c
 80053bc:	080064bc 	.word	0x080064bc
 80053c0:	080064d3 	.word	0x080064d3

080053c4 <__strtok_r>:
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b908      	cbnz	r0, 80053cc <__strtok_r+0x8>
 80053c8:	6810      	ldr	r0, [r2, #0]
 80053ca:	b188      	cbz	r0, 80053f0 <__strtok_r+0x2c>
 80053cc:	4604      	mov	r4, r0
 80053ce:	4620      	mov	r0, r4
 80053d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80053d4:	460f      	mov	r7, r1
 80053d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80053da:	b91e      	cbnz	r6, 80053e4 <__strtok_r+0x20>
 80053dc:	b965      	cbnz	r5, 80053f8 <__strtok_r+0x34>
 80053de:	6015      	str	r5, [r2, #0]
 80053e0:	4628      	mov	r0, r5
 80053e2:	e005      	b.n	80053f0 <__strtok_r+0x2c>
 80053e4:	42b5      	cmp	r5, r6
 80053e6:	d1f6      	bne.n	80053d6 <__strtok_r+0x12>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <__strtok_r+0xa>
 80053ec:	6014      	str	r4, [r2, #0]
 80053ee:	7003      	strb	r3, [r0, #0]
 80053f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f2:	461c      	mov	r4, r3
 80053f4:	e00c      	b.n	8005410 <__strtok_r+0x4c>
 80053f6:	b915      	cbnz	r5, 80053fe <__strtok_r+0x3a>
 80053f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80053fc:	460e      	mov	r6, r1
 80053fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005402:	42ab      	cmp	r3, r5
 8005404:	d1f7      	bne.n	80053f6 <__strtok_r+0x32>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f3      	beq.n	80053f2 <__strtok_r+0x2e>
 800540a:	2300      	movs	r3, #0
 800540c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005410:	6014      	str	r4, [r2, #0]
 8005412:	e7ed      	b.n	80053f0 <__strtok_r+0x2c>

08005414 <__assert_func>:
 8005414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005416:	4614      	mov	r4, r2
 8005418:	461a      	mov	r2, r3
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <__assert_func+0x2c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4605      	mov	r5, r0
 8005420:	68d8      	ldr	r0, [r3, #12]
 8005422:	b14c      	cbz	r4, 8005438 <__assert_func+0x24>
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <__assert_func+0x30>)
 8005426:	9100      	str	r1, [sp, #0]
 8005428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800542c:	4906      	ldr	r1, [pc, #24]	; (8005448 <__assert_func+0x34>)
 800542e:	462b      	mov	r3, r5
 8005430:	f000 f80e 	bl	8005450 <fiprintf>
 8005434:	f000 fcc4 	bl	8005dc0 <abort>
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <__assert_func+0x38>)
 800543a:	461c      	mov	r4, r3
 800543c:	e7f3      	b.n	8005426 <__assert_func+0x12>
 800543e:	bf00      	nop
 8005440:	2000000c 	.word	0x2000000c
 8005444:	08006530 	.word	0x08006530
 8005448:	0800653d 	.word	0x0800653d
 800544c:	0800656b 	.word	0x0800656b

08005450 <fiprintf>:
 8005450:	b40e      	push	{r1, r2, r3}
 8005452:	b503      	push	{r0, r1, lr}
 8005454:	4601      	mov	r1, r0
 8005456:	ab03      	add	r3, sp, #12
 8005458:	4805      	ldr	r0, [pc, #20]	; (8005470 <fiprintf+0x20>)
 800545a:	f853 2b04 	ldr.w	r2, [r3], #4
 800545e:	6800      	ldr	r0, [r0, #0]
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	f000 f919 	bl	8005698 <_vfiprintf_r>
 8005466:	b002      	add	sp, #8
 8005468:	f85d eb04 	ldr.w	lr, [sp], #4
 800546c:	b003      	add	sp, #12
 800546e:	4770      	bx	lr
 8005470:	2000000c 	.word	0x2000000c

08005474 <malloc>:
 8005474:	4b02      	ldr	r3, [pc, #8]	; (8005480 <malloc+0xc>)
 8005476:	4601      	mov	r1, r0
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	f000 b86f 	b.w	800555c <_malloc_r>
 800547e:	bf00      	nop
 8005480:	2000000c 	.word	0x2000000c

08005484 <_free_r>:
 8005484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005486:	2900      	cmp	r1, #0
 8005488:	d044      	beq.n	8005514 <_free_r+0x90>
 800548a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548e:	9001      	str	r0, [sp, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f1a1 0404 	sub.w	r4, r1, #4
 8005496:	bfb8      	it	lt
 8005498:	18e4      	addlt	r4, r4, r3
 800549a:	f000 feb9 	bl	8006210 <__malloc_lock>
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <_free_r+0x94>)
 80054a0:	9801      	ldr	r0, [sp, #4]
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	b933      	cbnz	r3, 80054b4 <_free_r+0x30>
 80054a6:	6063      	str	r3, [r4, #4]
 80054a8:	6014      	str	r4, [r2, #0]
 80054aa:	b003      	add	sp, #12
 80054ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054b0:	f000 beb4 	b.w	800621c <__malloc_unlock>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d908      	bls.n	80054ca <_free_r+0x46>
 80054b8:	6825      	ldr	r5, [r4, #0]
 80054ba:	1961      	adds	r1, r4, r5
 80054bc:	428b      	cmp	r3, r1
 80054be:	bf01      	itttt	eq
 80054c0:	6819      	ldreq	r1, [r3, #0]
 80054c2:	685b      	ldreq	r3, [r3, #4]
 80054c4:	1949      	addeq	r1, r1, r5
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	e7ed      	b.n	80054a6 <_free_r+0x22>
 80054ca:	461a      	mov	r2, r3
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b10b      	cbz	r3, 80054d4 <_free_r+0x50>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d9fa      	bls.n	80054ca <_free_r+0x46>
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	1855      	adds	r5, r2, r1
 80054d8:	42a5      	cmp	r5, r4
 80054da:	d10b      	bne.n	80054f4 <_free_r+0x70>
 80054dc:	6824      	ldr	r4, [r4, #0]
 80054de:	4421      	add	r1, r4
 80054e0:	1854      	adds	r4, r2, r1
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	6011      	str	r1, [r2, #0]
 80054e6:	d1e0      	bne.n	80054aa <_free_r+0x26>
 80054e8:	681c      	ldr	r4, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	6053      	str	r3, [r2, #4]
 80054ee:	4421      	add	r1, r4
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	e7da      	b.n	80054aa <_free_r+0x26>
 80054f4:	d902      	bls.n	80054fc <_free_r+0x78>
 80054f6:	230c      	movs	r3, #12
 80054f8:	6003      	str	r3, [r0, #0]
 80054fa:	e7d6      	b.n	80054aa <_free_r+0x26>
 80054fc:	6825      	ldr	r5, [r4, #0]
 80054fe:	1961      	adds	r1, r4, r5
 8005500:	428b      	cmp	r3, r1
 8005502:	bf04      	itt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	6063      	str	r3, [r4, #4]
 800550a:	bf04      	itt	eq
 800550c:	1949      	addeq	r1, r1, r5
 800550e:	6021      	streq	r1, [r4, #0]
 8005510:	6054      	str	r4, [r2, #4]
 8005512:	e7ca      	b.n	80054aa <_free_r+0x26>
 8005514:	b003      	add	sp, #12
 8005516:	bd30      	pop	{r4, r5, pc}
 8005518:	200001ec 	.word	0x200001ec

0800551c <sbrk_aligned>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4e0e      	ldr	r6, [pc, #56]	; (8005558 <sbrk_aligned+0x3c>)
 8005520:	460c      	mov	r4, r1
 8005522:	6831      	ldr	r1, [r6, #0]
 8005524:	4605      	mov	r5, r0
 8005526:	b911      	cbnz	r1, 800552e <sbrk_aligned+0x12>
 8005528:	f000 fb7a 	bl	8005c20 <_sbrk_r>
 800552c:	6030      	str	r0, [r6, #0]
 800552e:	4621      	mov	r1, r4
 8005530:	4628      	mov	r0, r5
 8005532:	f000 fb75 	bl	8005c20 <_sbrk_r>
 8005536:	1c43      	adds	r3, r0, #1
 8005538:	d00a      	beq.n	8005550 <sbrk_aligned+0x34>
 800553a:	1cc4      	adds	r4, r0, #3
 800553c:	f024 0403 	bic.w	r4, r4, #3
 8005540:	42a0      	cmp	r0, r4
 8005542:	d007      	beq.n	8005554 <sbrk_aligned+0x38>
 8005544:	1a21      	subs	r1, r4, r0
 8005546:	4628      	mov	r0, r5
 8005548:	f000 fb6a 	bl	8005c20 <_sbrk_r>
 800554c:	3001      	adds	r0, #1
 800554e:	d101      	bne.n	8005554 <sbrk_aligned+0x38>
 8005550:	f04f 34ff 	mov.w	r4, #4294967295
 8005554:	4620      	mov	r0, r4
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	200001f0 	.word	0x200001f0

0800555c <_malloc_r>:
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	1ccd      	adds	r5, r1, #3
 8005562:	f025 0503 	bic.w	r5, r5, #3
 8005566:	3508      	adds	r5, #8
 8005568:	2d0c      	cmp	r5, #12
 800556a:	bf38      	it	cc
 800556c:	250c      	movcc	r5, #12
 800556e:	2d00      	cmp	r5, #0
 8005570:	4607      	mov	r7, r0
 8005572:	db01      	blt.n	8005578 <_malloc_r+0x1c>
 8005574:	42a9      	cmp	r1, r5
 8005576:	d905      	bls.n	8005584 <_malloc_r+0x28>
 8005578:	230c      	movs	r3, #12
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	2600      	movs	r6, #0
 800557e:	4630      	mov	r0, r6
 8005580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005584:	4e2e      	ldr	r6, [pc, #184]	; (8005640 <_malloc_r+0xe4>)
 8005586:	f000 fe43 	bl	8006210 <__malloc_lock>
 800558a:	6833      	ldr	r3, [r6, #0]
 800558c:	461c      	mov	r4, r3
 800558e:	bb34      	cbnz	r4, 80055de <_malloc_r+0x82>
 8005590:	4629      	mov	r1, r5
 8005592:	4638      	mov	r0, r7
 8005594:	f7ff ffc2 	bl	800551c <sbrk_aligned>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	4604      	mov	r4, r0
 800559c:	d14d      	bne.n	800563a <_malloc_r+0xde>
 800559e:	6834      	ldr	r4, [r6, #0]
 80055a0:	4626      	mov	r6, r4
 80055a2:	2e00      	cmp	r6, #0
 80055a4:	d140      	bne.n	8005628 <_malloc_r+0xcc>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	4631      	mov	r1, r6
 80055aa:	4638      	mov	r0, r7
 80055ac:	eb04 0803 	add.w	r8, r4, r3
 80055b0:	f000 fb36 	bl	8005c20 <_sbrk_r>
 80055b4:	4580      	cmp	r8, r0
 80055b6:	d13a      	bne.n	800562e <_malloc_r+0xd2>
 80055b8:	6821      	ldr	r1, [r4, #0]
 80055ba:	3503      	adds	r5, #3
 80055bc:	1a6d      	subs	r5, r5, r1
 80055be:	f025 0503 	bic.w	r5, r5, #3
 80055c2:	3508      	adds	r5, #8
 80055c4:	2d0c      	cmp	r5, #12
 80055c6:	bf38      	it	cc
 80055c8:	250c      	movcc	r5, #12
 80055ca:	4629      	mov	r1, r5
 80055cc:	4638      	mov	r0, r7
 80055ce:	f7ff ffa5 	bl	800551c <sbrk_aligned>
 80055d2:	3001      	adds	r0, #1
 80055d4:	d02b      	beq.n	800562e <_malloc_r+0xd2>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	442b      	add	r3, r5
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	e00e      	b.n	80055fc <_malloc_r+0xa0>
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	1b52      	subs	r2, r2, r5
 80055e2:	d41e      	bmi.n	8005622 <_malloc_r+0xc6>
 80055e4:	2a0b      	cmp	r2, #11
 80055e6:	d916      	bls.n	8005616 <_malloc_r+0xba>
 80055e8:	1961      	adds	r1, r4, r5
 80055ea:	42a3      	cmp	r3, r4
 80055ec:	6025      	str	r5, [r4, #0]
 80055ee:	bf18      	it	ne
 80055f0:	6059      	strne	r1, [r3, #4]
 80055f2:	6863      	ldr	r3, [r4, #4]
 80055f4:	bf08      	it	eq
 80055f6:	6031      	streq	r1, [r6, #0]
 80055f8:	5162      	str	r2, [r4, r5]
 80055fa:	604b      	str	r3, [r1, #4]
 80055fc:	4638      	mov	r0, r7
 80055fe:	f104 060b 	add.w	r6, r4, #11
 8005602:	f000 fe0b 	bl	800621c <__malloc_unlock>
 8005606:	f026 0607 	bic.w	r6, r6, #7
 800560a:	1d23      	adds	r3, r4, #4
 800560c:	1af2      	subs	r2, r6, r3
 800560e:	d0b6      	beq.n	800557e <_malloc_r+0x22>
 8005610:	1b9b      	subs	r3, r3, r6
 8005612:	50a3      	str	r3, [r4, r2]
 8005614:	e7b3      	b.n	800557e <_malloc_r+0x22>
 8005616:	6862      	ldr	r2, [r4, #4]
 8005618:	42a3      	cmp	r3, r4
 800561a:	bf0c      	ite	eq
 800561c:	6032      	streq	r2, [r6, #0]
 800561e:	605a      	strne	r2, [r3, #4]
 8005620:	e7ec      	b.n	80055fc <_malloc_r+0xa0>
 8005622:	4623      	mov	r3, r4
 8005624:	6864      	ldr	r4, [r4, #4]
 8005626:	e7b2      	b.n	800558e <_malloc_r+0x32>
 8005628:	4634      	mov	r4, r6
 800562a:	6876      	ldr	r6, [r6, #4]
 800562c:	e7b9      	b.n	80055a2 <_malloc_r+0x46>
 800562e:	230c      	movs	r3, #12
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4638      	mov	r0, r7
 8005634:	f000 fdf2 	bl	800621c <__malloc_unlock>
 8005638:	e7a1      	b.n	800557e <_malloc_r+0x22>
 800563a:	6025      	str	r5, [r4, #0]
 800563c:	e7de      	b.n	80055fc <_malloc_r+0xa0>
 800563e:	bf00      	nop
 8005640:	200001ec 	.word	0x200001ec

08005644 <__sfputc_r>:
 8005644:	6893      	ldr	r3, [r2, #8]
 8005646:	3b01      	subs	r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	b410      	push	{r4}
 800564c:	6093      	str	r3, [r2, #8]
 800564e:	da08      	bge.n	8005662 <__sfputc_r+0x1e>
 8005650:	6994      	ldr	r4, [r2, #24]
 8005652:	42a3      	cmp	r3, r4
 8005654:	db01      	blt.n	800565a <__sfputc_r+0x16>
 8005656:	290a      	cmp	r1, #10
 8005658:	d103      	bne.n	8005662 <__sfputc_r+0x1e>
 800565a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800565e:	f000 baef 	b.w	8005c40 <__swbuf_r>
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	1c58      	adds	r0, r3, #1
 8005666:	6010      	str	r0, [r2, #0]
 8005668:	7019      	strb	r1, [r3, #0]
 800566a:	4608      	mov	r0, r1
 800566c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005670:	4770      	bx	lr

08005672 <__sfputs_r>:
 8005672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005674:	4606      	mov	r6, r0
 8005676:	460f      	mov	r7, r1
 8005678:	4614      	mov	r4, r2
 800567a:	18d5      	adds	r5, r2, r3
 800567c:	42ac      	cmp	r4, r5
 800567e:	d101      	bne.n	8005684 <__sfputs_r+0x12>
 8005680:	2000      	movs	r0, #0
 8005682:	e007      	b.n	8005694 <__sfputs_r+0x22>
 8005684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005688:	463a      	mov	r2, r7
 800568a:	4630      	mov	r0, r6
 800568c:	f7ff ffda 	bl	8005644 <__sfputc_r>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d1f3      	bne.n	800567c <__sfputs_r+0xa>
 8005694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005698 <_vfiprintf_r>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	460d      	mov	r5, r1
 800569e:	b09d      	sub	sp, #116	; 0x74
 80056a0:	4614      	mov	r4, r2
 80056a2:	4698      	mov	r8, r3
 80056a4:	4606      	mov	r6, r0
 80056a6:	b118      	cbz	r0, 80056b0 <_vfiprintf_r+0x18>
 80056a8:	6983      	ldr	r3, [r0, #24]
 80056aa:	b90b      	cbnz	r3, 80056b0 <_vfiprintf_r+0x18>
 80056ac:	f000 fcaa 	bl	8006004 <__sinit>
 80056b0:	4b89      	ldr	r3, [pc, #548]	; (80058d8 <_vfiprintf_r+0x240>)
 80056b2:	429d      	cmp	r5, r3
 80056b4:	d11b      	bne.n	80056ee <_vfiprintf_r+0x56>
 80056b6:	6875      	ldr	r5, [r6, #4]
 80056b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ba:	07d9      	lsls	r1, r3, #31
 80056bc:	d405      	bmi.n	80056ca <_vfiprintf_r+0x32>
 80056be:	89ab      	ldrh	r3, [r5, #12]
 80056c0:	059a      	lsls	r2, r3, #22
 80056c2:	d402      	bmi.n	80056ca <_vfiprintf_r+0x32>
 80056c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056c6:	f000 fd3b 	bl	8006140 <__retarget_lock_acquire_recursive>
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	071b      	lsls	r3, r3, #28
 80056ce:	d501      	bpl.n	80056d4 <_vfiprintf_r+0x3c>
 80056d0:	692b      	ldr	r3, [r5, #16]
 80056d2:	b9eb      	cbnz	r3, 8005710 <_vfiprintf_r+0x78>
 80056d4:	4629      	mov	r1, r5
 80056d6:	4630      	mov	r0, r6
 80056d8:	f000 fb04 	bl	8005ce4 <__swsetup_r>
 80056dc:	b1c0      	cbz	r0, 8005710 <_vfiprintf_r+0x78>
 80056de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e0:	07dc      	lsls	r4, r3, #31
 80056e2:	d50e      	bpl.n	8005702 <_vfiprintf_r+0x6a>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	b01d      	add	sp, #116	; 0x74
 80056ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ee:	4b7b      	ldr	r3, [pc, #492]	; (80058dc <_vfiprintf_r+0x244>)
 80056f0:	429d      	cmp	r5, r3
 80056f2:	d101      	bne.n	80056f8 <_vfiprintf_r+0x60>
 80056f4:	68b5      	ldr	r5, [r6, #8]
 80056f6:	e7df      	b.n	80056b8 <_vfiprintf_r+0x20>
 80056f8:	4b79      	ldr	r3, [pc, #484]	; (80058e0 <_vfiprintf_r+0x248>)
 80056fa:	429d      	cmp	r5, r3
 80056fc:	bf08      	it	eq
 80056fe:	68f5      	ldreq	r5, [r6, #12]
 8005700:	e7da      	b.n	80056b8 <_vfiprintf_r+0x20>
 8005702:	89ab      	ldrh	r3, [r5, #12]
 8005704:	0598      	lsls	r0, r3, #22
 8005706:	d4ed      	bmi.n	80056e4 <_vfiprintf_r+0x4c>
 8005708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800570a:	f000 fd1a 	bl	8006142 <__retarget_lock_release_recursive>
 800570e:	e7e9      	b.n	80056e4 <_vfiprintf_r+0x4c>
 8005710:	2300      	movs	r3, #0
 8005712:	9309      	str	r3, [sp, #36]	; 0x24
 8005714:	2320      	movs	r3, #32
 8005716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800571a:	f8cd 800c 	str.w	r8, [sp, #12]
 800571e:	2330      	movs	r3, #48	; 0x30
 8005720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80058e4 <_vfiprintf_r+0x24c>
 8005724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005728:	f04f 0901 	mov.w	r9, #1
 800572c:	4623      	mov	r3, r4
 800572e:	469a      	mov	sl, r3
 8005730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005734:	b10a      	cbz	r2, 800573a <_vfiprintf_r+0xa2>
 8005736:	2a25      	cmp	r2, #37	; 0x25
 8005738:	d1f9      	bne.n	800572e <_vfiprintf_r+0x96>
 800573a:	ebba 0b04 	subs.w	fp, sl, r4
 800573e:	d00b      	beq.n	8005758 <_vfiprintf_r+0xc0>
 8005740:	465b      	mov	r3, fp
 8005742:	4622      	mov	r2, r4
 8005744:	4629      	mov	r1, r5
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff ff93 	bl	8005672 <__sfputs_r>
 800574c:	3001      	adds	r0, #1
 800574e:	f000 80aa 	beq.w	80058a6 <_vfiprintf_r+0x20e>
 8005752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005754:	445a      	add	r2, fp
 8005756:	9209      	str	r2, [sp, #36]	; 0x24
 8005758:	f89a 3000 	ldrb.w	r3, [sl]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80a2 	beq.w	80058a6 <_vfiprintf_r+0x20e>
 8005762:	2300      	movs	r3, #0
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800576c:	f10a 0a01 	add.w	sl, sl, #1
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	9307      	str	r3, [sp, #28]
 8005774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005778:	931a      	str	r3, [sp, #104]	; 0x68
 800577a:	4654      	mov	r4, sl
 800577c:	2205      	movs	r2, #5
 800577e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005782:	4858      	ldr	r0, [pc, #352]	; (80058e4 <_vfiprintf_r+0x24c>)
 8005784:	f7fa fd34 	bl	80001f0 <memchr>
 8005788:	9a04      	ldr	r2, [sp, #16]
 800578a:	b9d8      	cbnz	r0, 80057c4 <_vfiprintf_r+0x12c>
 800578c:	06d1      	lsls	r1, r2, #27
 800578e:	bf44      	itt	mi
 8005790:	2320      	movmi	r3, #32
 8005792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005796:	0713      	lsls	r3, r2, #28
 8005798:	bf44      	itt	mi
 800579a:	232b      	movmi	r3, #43	; 0x2b
 800579c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057a0:	f89a 3000 	ldrb.w	r3, [sl]
 80057a4:	2b2a      	cmp	r3, #42	; 0x2a
 80057a6:	d015      	beq.n	80057d4 <_vfiprintf_r+0x13c>
 80057a8:	9a07      	ldr	r2, [sp, #28]
 80057aa:	4654      	mov	r4, sl
 80057ac:	2000      	movs	r0, #0
 80057ae:	f04f 0c0a 	mov.w	ip, #10
 80057b2:	4621      	mov	r1, r4
 80057b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057b8:	3b30      	subs	r3, #48	; 0x30
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d94e      	bls.n	800585c <_vfiprintf_r+0x1c4>
 80057be:	b1b0      	cbz	r0, 80057ee <_vfiprintf_r+0x156>
 80057c0:	9207      	str	r2, [sp, #28]
 80057c2:	e014      	b.n	80057ee <_vfiprintf_r+0x156>
 80057c4:	eba0 0308 	sub.w	r3, r0, r8
 80057c8:	fa09 f303 	lsl.w	r3, r9, r3
 80057cc:	4313      	orrs	r3, r2
 80057ce:	9304      	str	r3, [sp, #16]
 80057d0:	46a2      	mov	sl, r4
 80057d2:	e7d2      	b.n	800577a <_vfiprintf_r+0xe2>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	1d19      	adds	r1, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	9103      	str	r1, [sp, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfbb      	ittet	lt
 80057e0:	425b      	neglt	r3, r3
 80057e2:	f042 0202 	orrlt.w	r2, r2, #2
 80057e6:	9307      	strge	r3, [sp, #28]
 80057e8:	9307      	strlt	r3, [sp, #28]
 80057ea:	bfb8      	it	lt
 80057ec:	9204      	strlt	r2, [sp, #16]
 80057ee:	7823      	ldrb	r3, [r4, #0]
 80057f0:	2b2e      	cmp	r3, #46	; 0x2e
 80057f2:	d10c      	bne.n	800580e <_vfiprintf_r+0x176>
 80057f4:	7863      	ldrb	r3, [r4, #1]
 80057f6:	2b2a      	cmp	r3, #42	; 0x2a
 80057f8:	d135      	bne.n	8005866 <_vfiprintf_r+0x1ce>
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	1d1a      	adds	r2, r3, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	9203      	str	r2, [sp, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	bfb8      	it	lt
 8005806:	f04f 33ff 	movlt.w	r3, #4294967295
 800580a:	3402      	adds	r4, #2
 800580c:	9305      	str	r3, [sp, #20]
 800580e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80058f4 <_vfiprintf_r+0x25c>
 8005812:	7821      	ldrb	r1, [r4, #0]
 8005814:	2203      	movs	r2, #3
 8005816:	4650      	mov	r0, sl
 8005818:	f7fa fcea 	bl	80001f0 <memchr>
 800581c:	b140      	cbz	r0, 8005830 <_vfiprintf_r+0x198>
 800581e:	2340      	movs	r3, #64	; 0x40
 8005820:	eba0 000a 	sub.w	r0, r0, sl
 8005824:	fa03 f000 	lsl.w	r0, r3, r0
 8005828:	9b04      	ldr	r3, [sp, #16]
 800582a:	4303      	orrs	r3, r0
 800582c:	3401      	adds	r4, #1
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005834:	482c      	ldr	r0, [pc, #176]	; (80058e8 <_vfiprintf_r+0x250>)
 8005836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800583a:	2206      	movs	r2, #6
 800583c:	f7fa fcd8 	bl	80001f0 <memchr>
 8005840:	2800      	cmp	r0, #0
 8005842:	d03f      	beq.n	80058c4 <_vfiprintf_r+0x22c>
 8005844:	4b29      	ldr	r3, [pc, #164]	; (80058ec <_vfiprintf_r+0x254>)
 8005846:	bb1b      	cbnz	r3, 8005890 <_vfiprintf_r+0x1f8>
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	3307      	adds	r3, #7
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	3308      	adds	r3, #8
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	443b      	add	r3, r7
 8005858:	9309      	str	r3, [sp, #36]	; 0x24
 800585a:	e767      	b.n	800572c <_vfiprintf_r+0x94>
 800585c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005860:	460c      	mov	r4, r1
 8005862:	2001      	movs	r0, #1
 8005864:	e7a5      	b.n	80057b2 <_vfiprintf_r+0x11a>
 8005866:	2300      	movs	r3, #0
 8005868:	3401      	adds	r4, #1
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	4619      	mov	r1, r3
 800586e:	f04f 0c0a 	mov.w	ip, #10
 8005872:	4620      	mov	r0, r4
 8005874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005878:	3a30      	subs	r2, #48	; 0x30
 800587a:	2a09      	cmp	r2, #9
 800587c:	d903      	bls.n	8005886 <_vfiprintf_r+0x1ee>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0c5      	beq.n	800580e <_vfiprintf_r+0x176>
 8005882:	9105      	str	r1, [sp, #20]
 8005884:	e7c3      	b.n	800580e <_vfiprintf_r+0x176>
 8005886:	fb0c 2101 	mla	r1, ip, r1, r2
 800588a:	4604      	mov	r4, r0
 800588c:	2301      	movs	r3, #1
 800588e:	e7f0      	b.n	8005872 <_vfiprintf_r+0x1da>
 8005890:	ab03      	add	r3, sp, #12
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	462a      	mov	r2, r5
 8005896:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <_vfiprintf_r+0x258>)
 8005898:	a904      	add	r1, sp, #16
 800589a:	4630      	mov	r0, r6
 800589c:	f3af 8000 	nop.w
 80058a0:	4607      	mov	r7, r0
 80058a2:	1c78      	adds	r0, r7, #1
 80058a4:	d1d6      	bne.n	8005854 <_vfiprintf_r+0x1bc>
 80058a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a8:	07d9      	lsls	r1, r3, #31
 80058aa:	d405      	bmi.n	80058b8 <_vfiprintf_r+0x220>
 80058ac:	89ab      	ldrh	r3, [r5, #12]
 80058ae:	059a      	lsls	r2, r3, #22
 80058b0:	d402      	bmi.n	80058b8 <_vfiprintf_r+0x220>
 80058b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058b4:	f000 fc45 	bl	8006142 <__retarget_lock_release_recursive>
 80058b8:	89ab      	ldrh	r3, [r5, #12]
 80058ba:	065b      	lsls	r3, r3, #25
 80058bc:	f53f af12 	bmi.w	80056e4 <_vfiprintf_r+0x4c>
 80058c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058c2:	e711      	b.n	80056e8 <_vfiprintf_r+0x50>
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <_vfiprintf_r+0x258>)
 80058cc:	a904      	add	r1, sp, #16
 80058ce:	4630      	mov	r0, r6
 80058d0:	f000 f880 	bl	80059d4 <_printf_i>
 80058d4:	e7e4      	b.n	80058a0 <_vfiprintf_r+0x208>
 80058d6:	bf00      	nop
 80058d8:	080065c0 	.word	0x080065c0
 80058dc:	080065e0 	.word	0x080065e0
 80058e0:	080065a0 	.word	0x080065a0
 80058e4:	0800656c 	.word	0x0800656c
 80058e8:	08006576 	.word	0x08006576
 80058ec:	00000000 	.word	0x00000000
 80058f0:	08005673 	.word	0x08005673
 80058f4:	08006572 	.word	0x08006572

080058f8 <_printf_common>:
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	4616      	mov	r6, r2
 80058fe:	4699      	mov	r9, r3
 8005900:	688a      	ldr	r2, [r1, #8]
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005908:	4293      	cmp	r3, r2
 800590a:	bfb8      	it	lt
 800590c:	4613      	movlt	r3, r2
 800590e:	6033      	str	r3, [r6, #0]
 8005910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005914:	4607      	mov	r7, r0
 8005916:	460c      	mov	r4, r1
 8005918:	b10a      	cbz	r2, 800591e <_printf_common+0x26>
 800591a:	3301      	adds	r3, #1
 800591c:	6033      	str	r3, [r6, #0]
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	0699      	lsls	r1, r3, #26
 8005922:	bf42      	ittt	mi
 8005924:	6833      	ldrmi	r3, [r6, #0]
 8005926:	3302      	addmi	r3, #2
 8005928:	6033      	strmi	r3, [r6, #0]
 800592a:	6825      	ldr	r5, [r4, #0]
 800592c:	f015 0506 	ands.w	r5, r5, #6
 8005930:	d106      	bne.n	8005940 <_printf_common+0x48>
 8005932:	f104 0a19 	add.w	sl, r4, #25
 8005936:	68e3      	ldr	r3, [r4, #12]
 8005938:	6832      	ldr	r2, [r6, #0]
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	42ab      	cmp	r3, r5
 800593e:	dc26      	bgt.n	800598e <_printf_common+0x96>
 8005940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005944:	1e13      	subs	r3, r2, #0
 8005946:	6822      	ldr	r2, [r4, #0]
 8005948:	bf18      	it	ne
 800594a:	2301      	movne	r3, #1
 800594c:	0692      	lsls	r2, r2, #26
 800594e:	d42b      	bmi.n	80059a8 <_printf_common+0xb0>
 8005950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005954:	4649      	mov	r1, r9
 8005956:	4638      	mov	r0, r7
 8005958:	47c0      	blx	r8
 800595a:	3001      	adds	r0, #1
 800595c:	d01e      	beq.n	800599c <_printf_common+0xa4>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	68e5      	ldr	r5, [r4, #12]
 8005962:	6832      	ldr	r2, [r6, #0]
 8005964:	f003 0306 	and.w	r3, r3, #6
 8005968:	2b04      	cmp	r3, #4
 800596a:	bf08      	it	eq
 800596c:	1aad      	subeq	r5, r5, r2
 800596e:	68a3      	ldr	r3, [r4, #8]
 8005970:	6922      	ldr	r2, [r4, #16]
 8005972:	bf0c      	ite	eq
 8005974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005978:	2500      	movne	r5, #0
 800597a:	4293      	cmp	r3, r2
 800597c:	bfc4      	itt	gt
 800597e:	1a9b      	subgt	r3, r3, r2
 8005980:	18ed      	addgt	r5, r5, r3
 8005982:	2600      	movs	r6, #0
 8005984:	341a      	adds	r4, #26
 8005986:	42b5      	cmp	r5, r6
 8005988:	d11a      	bne.n	80059c0 <_printf_common+0xc8>
 800598a:	2000      	movs	r0, #0
 800598c:	e008      	b.n	80059a0 <_printf_common+0xa8>
 800598e:	2301      	movs	r3, #1
 8005990:	4652      	mov	r2, sl
 8005992:	4649      	mov	r1, r9
 8005994:	4638      	mov	r0, r7
 8005996:	47c0      	blx	r8
 8005998:	3001      	adds	r0, #1
 800599a:	d103      	bne.n	80059a4 <_printf_common+0xac>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a4:	3501      	adds	r5, #1
 80059a6:	e7c6      	b.n	8005936 <_printf_common+0x3e>
 80059a8:	18e1      	adds	r1, r4, r3
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	2030      	movs	r0, #48	; 0x30
 80059ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b2:	4422      	add	r2, r4
 80059b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059bc:	3302      	adds	r3, #2
 80059be:	e7c7      	b.n	8005950 <_printf_common+0x58>
 80059c0:	2301      	movs	r3, #1
 80059c2:	4622      	mov	r2, r4
 80059c4:	4649      	mov	r1, r9
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c0      	blx	r8
 80059ca:	3001      	adds	r0, #1
 80059cc:	d0e6      	beq.n	800599c <_printf_common+0xa4>
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7d9      	b.n	8005986 <_printf_common+0x8e>
	...

080059d4 <_printf_i>:
 80059d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	7e0f      	ldrb	r7, [r1, #24]
 80059da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059dc:	2f78      	cmp	r7, #120	; 0x78
 80059de:	4691      	mov	r9, r2
 80059e0:	4680      	mov	r8, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	469a      	mov	sl, r3
 80059e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ea:	d807      	bhi.n	80059fc <_printf_i+0x28>
 80059ec:	2f62      	cmp	r7, #98	; 0x62
 80059ee:	d80a      	bhi.n	8005a06 <_printf_i+0x32>
 80059f0:	2f00      	cmp	r7, #0
 80059f2:	f000 80d8 	beq.w	8005ba6 <_printf_i+0x1d2>
 80059f6:	2f58      	cmp	r7, #88	; 0x58
 80059f8:	f000 80a3 	beq.w	8005b42 <_printf_i+0x16e>
 80059fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a04:	e03a      	b.n	8005a7c <_printf_i+0xa8>
 8005a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a0a:	2b15      	cmp	r3, #21
 8005a0c:	d8f6      	bhi.n	80059fc <_printf_i+0x28>
 8005a0e:	a101      	add	r1, pc, #4	; (adr r1, 8005a14 <_printf_i+0x40>)
 8005a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	080059fd 	.word	0x080059fd
 8005a20:	080059fd 	.word	0x080059fd
 8005a24:	080059fd 	.word	0x080059fd
 8005a28:	080059fd 	.word	0x080059fd
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	080059fd 	.word	0x080059fd
 8005a34:	080059fd 	.word	0x080059fd
 8005a38:	080059fd 	.word	0x080059fd
 8005a3c:	080059fd 	.word	0x080059fd
 8005a40:	08005b8d 	.word	0x08005b8d
 8005a44:	08005ab1 	.word	0x08005ab1
 8005a48:	08005b6f 	.word	0x08005b6f
 8005a4c:	080059fd 	.word	0x080059fd
 8005a50:	080059fd 	.word	0x080059fd
 8005a54:	08005baf 	.word	0x08005baf
 8005a58:	080059fd 	.word	0x080059fd
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	080059fd 	.word	0x080059fd
 8005a64:	080059fd 	.word	0x080059fd
 8005a68:	08005b77 	.word	0x08005b77
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	602a      	str	r2, [r5, #0]
 8005a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0a3      	b.n	8005bc8 <_printf_i+0x1f4>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	6829      	ldr	r1, [r5, #0]
 8005a84:	0606      	lsls	r6, r0, #24
 8005a86:	f101 0304 	add.w	r3, r1, #4
 8005a8a:	d50a      	bpl.n	8005aa2 <_printf_i+0xce>
 8005a8c:	680e      	ldr	r6, [r1, #0]
 8005a8e:	602b      	str	r3, [r5, #0]
 8005a90:	2e00      	cmp	r6, #0
 8005a92:	da03      	bge.n	8005a9c <_printf_i+0xc8>
 8005a94:	232d      	movs	r3, #45	; 0x2d
 8005a96:	4276      	negs	r6, r6
 8005a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9c:	485e      	ldr	r0, [pc, #376]	; (8005c18 <_printf_i+0x244>)
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	e019      	b.n	8005ad6 <_printf_i+0x102>
 8005aa2:	680e      	ldr	r6, [r1, #0]
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005aaa:	bf18      	it	ne
 8005aac:	b236      	sxthne	r6, r6
 8005aae:	e7ef      	b.n	8005a90 <_printf_i+0xbc>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	6820      	ldr	r0, [r4, #0]
 8005ab4:	1d19      	adds	r1, r3, #4
 8005ab6:	6029      	str	r1, [r5, #0]
 8005ab8:	0601      	lsls	r1, r0, #24
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0xec>
 8005abc:	681e      	ldr	r6, [r3, #0]
 8005abe:	e002      	b.n	8005ac6 <_printf_i+0xf2>
 8005ac0:	0646      	lsls	r6, r0, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0xe8>
 8005ac4:	881e      	ldrh	r6, [r3, #0]
 8005ac6:	4854      	ldr	r0, [pc, #336]	; (8005c18 <_printf_i+0x244>)
 8005ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8005aca:	bf0c      	ite	eq
 8005acc:	2308      	moveq	r3, #8
 8005ace:	230a      	movne	r3, #10
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ad6:	6865      	ldr	r5, [r4, #4]
 8005ad8:	60a5      	str	r5, [r4, #8]
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	bfa2      	ittt	ge
 8005ade:	6821      	ldrge	r1, [r4, #0]
 8005ae0:	f021 0104 	bicge.w	r1, r1, #4
 8005ae4:	6021      	strge	r1, [r4, #0]
 8005ae6:	b90e      	cbnz	r6, 8005aec <_printf_i+0x118>
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	d04d      	beq.n	8005b88 <_printf_i+0x1b4>
 8005aec:	4615      	mov	r5, r2
 8005aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8005af2:	fb03 6711 	mls	r7, r3, r1, r6
 8005af6:	5dc7      	ldrb	r7, [r0, r7]
 8005af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005afc:	4637      	mov	r7, r6
 8005afe:	42bb      	cmp	r3, r7
 8005b00:	460e      	mov	r6, r1
 8005b02:	d9f4      	bls.n	8005aee <_printf_i+0x11a>
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d10b      	bne.n	8005b20 <_printf_i+0x14c>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	07de      	lsls	r6, r3, #31
 8005b0c:	d508      	bpl.n	8005b20 <_printf_i+0x14c>
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	6861      	ldr	r1, [r4, #4]
 8005b12:	4299      	cmp	r1, r3
 8005b14:	bfde      	ittt	le
 8005b16:	2330      	movle	r3, #48	; 0x30
 8005b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b20:	1b52      	subs	r2, r2, r5
 8005b22:	6122      	str	r2, [r4, #16]
 8005b24:	f8cd a000 	str.w	sl, [sp]
 8005b28:	464b      	mov	r3, r9
 8005b2a:	aa03      	add	r2, sp, #12
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7ff fee2 	bl	80058f8 <_printf_common>
 8005b34:	3001      	adds	r0, #1
 8005b36:	d14c      	bne.n	8005bd2 <_printf_i+0x1fe>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	b004      	add	sp, #16
 8005b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b42:	4835      	ldr	r0, [pc, #212]	; (8005c18 <_printf_i+0x244>)
 8005b44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b48:	6829      	ldr	r1, [r5, #0]
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b50:	6029      	str	r1, [r5, #0]
 8005b52:	061d      	lsls	r5, r3, #24
 8005b54:	d514      	bpl.n	8005b80 <_printf_i+0x1ac>
 8005b56:	07df      	lsls	r7, r3, #31
 8005b58:	bf44      	itt	mi
 8005b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b5e:	6023      	strmi	r3, [r4, #0]
 8005b60:	b91e      	cbnz	r6, 8005b6a <_printf_i+0x196>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f023 0320 	bic.w	r3, r3, #32
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	2310      	movs	r3, #16
 8005b6c:	e7b0      	b.n	8005ad0 <_printf_i+0xfc>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	f043 0320 	orr.w	r3, r3, #32
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	2378      	movs	r3, #120	; 0x78
 8005b78:	4828      	ldr	r0, [pc, #160]	; (8005c1c <_printf_i+0x248>)
 8005b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b7e:	e7e3      	b.n	8005b48 <_printf_i+0x174>
 8005b80:	0659      	lsls	r1, r3, #25
 8005b82:	bf48      	it	mi
 8005b84:	b2b6      	uxthmi	r6, r6
 8005b86:	e7e6      	b.n	8005b56 <_printf_i+0x182>
 8005b88:	4615      	mov	r5, r2
 8005b8a:	e7bb      	b.n	8005b04 <_printf_i+0x130>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	6826      	ldr	r6, [r4, #0]
 8005b90:	6961      	ldr	r1, [r4, #20]
 8005b92:	1d18      	adds	r0, r3, #4
 8005b94:	6028      	str	r0, [r5, #0]
 8005b96:	0635      	lsls	r5, r6, #24
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	d501      	bpl.n	8005ba0 <_printf_i+0x1cc>
 8005b9c:	6019      	str	r1, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <_printf_i+0x1d2>
 8005ba0:	0670      	lsls	r0, r6, #25
 8005ba2:	d5fb      	bpl.n	8005b9c <_printf_i+0x1c8>
 8005ba4:	8019      	strh	r1, [r3, #0]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	4615      	mov	r5, r2
 8005bac:	e7ba      	b.n	8005b24 <_printf_i+0x150>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	1d1a      	adds	r2, r3, #4
 8005bb2:	602a      	str	r2, [r5, #0]
 8005bb4:	681d      	ldr	r5, [r3, #0]
 8005bb6:	6862      	ldr	r2, [r4, #4]
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f7fa fb18 	bl	80001f0 <memchr>
 8005bc0:	b108      	cbz	r0, 8005bc6 <_printf_i+0x1f2>
 8005bc2:	1b40      	subs	r0, r0, r5
 8005bc4:	6060      	str	r0, [r4, #4]
 8005bc6:	6863      	ldr	r3, [r4, #4]
 8005bc8:	6123      	str	r3, [r4, #16]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd0:	e7a8      	b.n	8005b24 <_printf_i+0x150>
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	462a      	mov	r2, r5
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	4640      	mov	r0, r8
 8005bda:	47d0      	blx	sl
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d0ab      	beq.n	8005b38 <_printf_i+0x164>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	079b      	lsls	r3, r3, #30
 8005be4:	d413      	bmi.n	8005c0e <_printf_i+0x23a>
 8005be6:	68e0      	ldr	r0, [r4, #12]
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	4298      	cmp	r0, r3
 8005bec:	bfb8      	it	lt
 8005bee:	4618      	movlt	r0, r3
 8005bf0:	e7a4      	b.n	8005b3c <_printf_i+0x168>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	47d0      	blx	sl
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d09b      	beq.n	8005b38 <_printf_i+0x164>
 8005c00:	3501      	adds	r5, #1
 8005c02:	68e3      	ldr	r3, [r4, #12]
 8005c04:	9903      	ldr	r1, [sp, #12]
 8005c06:	1a5b      	subs	r3, r3, r1
 8005c08:	42ab      	cmp	r3, r5
 8005c0a:	dcf2      	bgt.n	8005bf2 <_printf_i+0x21e>
 8005c0c:	e7eb      	b.n	8005be6 <_printf_i+0x212>
 8005c0e:	2500      	movs	r5, #0
 8005c10:	f104 0619 	add.w	r6, r4, #25
 8005c14:	e7f5      	b.n	8005c02 <_printf_i+0x22e>
 8005c16:	bf00      	nop
 8005c18:	0800657d 	.word	0x0800657d
 8005c1c:	0800658e 	.word	0x0800658e

08005c20 <_sbrk_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d06      	ldr	r5, [pc, #24]	; (8005c3c <_sbrk_r+0x1c>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	f7fb f998 	bl	8000f60 <_sbrk>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_sbrk_r+0x1a>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_sbrk_r+0x1a>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	200001f8 	.word	0x200001f8

08005c40 <__swbuf_r>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	460e      	mov	r6, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	4605      	mov	r5, r0
 8005c48:	b118      	cbz	r0, 8005c52 <__swbuf_r+0x12>
 8005c4a:	6983      	ldr	r3, [r0, #24]
 8005c4c:	b90b      	cbnz	r3, 8005c52 <__swbuf_r+0x12>
 8005c4e:	f000 f9d9 	bl	8006004 <__sinit>
 8005c52:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <__swbuf_r+0x98>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d12b      	bne.n	8005cb0 <__swbuf_r+0x70>
 8005c58:	686c      	ldr	r4, [r5, #4]
 8005c5a:	69a3      	ldr	r3, [r4, #24]
 8005c5c:	60a3      	str	r3, [r4, #8]
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	071a      	lsls	r2, r3, #28
 8005c62:	d52f      	bpl.n	8005cc4 <__swbuf_r+0x84>
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	b36b      	cbz	r3, 8005cc4 <__swbuf_r+0x84>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	1ac0      	subs	r0, r0, r3
 8005c6e:	6963      	ldr	r3, [r4, #20]
 8005c70:	b2f6      	uxtb	r6, r6
 8005c72:	4283      	cmp	r3, r0
 8005c74:	4637      	mov	r7, r6
 8005c76:	dc04      	bgt.n	8005c82 <__swbuf_r+0x42>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f92e 	bl	8005edc <_fflush_r>
 8005c80:	bb30      	cbnz	r0, 8005cd0 <__swbuf_r+0x90>
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	701e      	strb	r6, [r3, #0]
 8005c90:	6963      	ldr	r3, [r4, #20]
 8005c92:	3001      	adds	r0, #1
 8005c94:	4283      	cmp	r3, r0
 8005c96:	d004      	beq.n	8005ca2 <__swbuf_r+0x62>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	07db      	lsls	r3, r3, #31
 8005c9c:	d506      	bpl.n	8005cac <__swbuf_r+0x6c>
 8005c9e:	2e0a      	cmp	r6, #10
 8005ca0:	d104      	bne.n	8005cac <__swbuf_r+0x6c>
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 f919 	bl	8005edc <_fflush_r>
 8005caa:	b988      	cbnz	r0, 8005cd0 <__swbuf_r+0x90>
 8005cac:	4638      	mov	r0, r7
 8005cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <__swbuf_r+0x9c>)
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	d101      	bne.n	8005cba <__swbuf_r+0x7a>
 8005cb6:	68ac      	ldr	r4, [r5, #8]
 8005cb8:	e7cf      	b.n	8005c5a <__swbuf_r+0x1a>
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <__swbuf_r+0xa0>)
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	bf08      	it	eq
 8005cc0:	68ec      	ldreq	r4, [r5, #12]
 8005cc2:	e7ca      	b.n	8005c5a <__swbuf_r+0x1a>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 f80c 	bl	8005ce4 <__swsetup_r>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d0cb      	beq.n	8005c68 <__swbuf_r+0x28>
 8005cd0:	f04f 37ff 	mov.w	r7, #4294967295
 8005cd4:	e7ea      	b.n	8005cac <__swbuf_r+0x6c>
 8005cd6:	bf00      	nop
 8005cd8:	080065c0 	.word	0x080065c0
 8005cdc:	080065e0 	.word	0x080065e0
 8005ce0:	080065a0 	.word	0x080065a0

08005ce4 <__swsetup_r>:
 8005ce4:	4b32      	ldr	r3, [pc, #200]	; (8005db0 <__swsetup_r+0xcc>)
 8005ce6:	b570      	push	{r4, r5, r6, lr}
 8005ce8:	681d      	ldr	r5, [r3, #0]
 8005cea:	4606      	mov	r6, r0
 8005cec:	460c      	mov	r4, r1
 8005cee:	b125      	cbz	r5, 8005cfa <__swsetup_r+0x16>
 8005cf0:	69ab      	ldr	r3, [r5, #24]
 8005cf2:	b913      	cbnz	r3, 8005cfa <__swsetup_r+0x16>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 f985 	bl	8006004 <__sinit>
 8005cfa:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <__swsetup_r+0xd0>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	d10f      	bne.n	8005d20 <__swsetup_r+0x3c>
 8005d00:	686c      	ldr	r4, [r5, #4]
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d08:	0719      	lsls	r1, r3, #28
 8005d0a:	d42c      	bmi.n	8005d66 <__swsetup_r+0x82>
 8005d0c:	06dd      	lsls	r5, r3, #27
 8005d0e:	d411      	bmi.n	8005d34 <__swsetup_r+0x50>
 8005d10:	2309      	movs	r3, #9
 8005d12:	6033      	str	r3, [r6, #0]
 8005d14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	e03e      	b.n	8005d9e <__swsetup_r+0xba>
 8005d20:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <__swsetup_r+0xd4>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	d101      	bne.n	8005d2a <__swsetup_r+0x46>
 8005d26:	68ac      	ldr	r4, [r5, #8]
 8005d28:	e7eb      	b.n	8005d02 <__swsetup_r+0x1e>
 8005d2a:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <__swsetup_r+0xd8>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	bf08      	it	eq
 8005d30:	68ec      	ldreq	r4, [r5, #12]
 8005d32:	e7e6      	b.n	8005d02 <__swsetup_r+0x1e>
 8005d34:	0758      	lsls	r0, r3, #29
 8005d36:	d512      	bpl.n	8005d5e <__swsetup_r+0x7a>
 8005d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d3a:	b141      	cbz	r1, 8005d4e <__swsetup_r+0x6a>
 8005d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d40:	4299      	cmp	r1, r3
 8005d42:	d002      	beq.n	8005d4a <__swsetup_r+0x66>
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff fb9d 	bl	8005484 <_free_r>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	2300      	movs	r3, #0
 8005d58:	6063      	str	r3, [r4, #4]
 8005d5a:	6923      	ldr	r3, [r4, #16]
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	f043 0308 	orr.w	r3, r3, #8
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	b94b      	cbnz	r3, 8005d7e <__swsetup_r+0x9a>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d74:	d003      	beq.n	8005d7e <__swsetup_r+0x9a>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 fa09 	bl	8006190 <__smakebuf_r>
 8005d7e:	89a0      	ldrh	r0, [r4, #12]
 8005d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d84:	f010 0301 	ands.w	r3, r0, #1
 8005d88:	d00a      	beq.n	8005da0 <__swsetup_r+0xbc>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60a3      	str	r3, [r4, #8]
 8005d8e:	6963      	ldr	r3, [r4, #20]
 8005d90:	425b      	negs	r3, r3
 8005d92:	61a3      	str	r3, [r4, #24]
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	b943      	cbnz	r3, 8005daa <__swsetup_r+0xc6>
 8005d98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d9c:	d1ba      	bne.n	8005d14 <__swsetup_r+0x30>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	0781      	lsls	r1, r0, #30
 8005da2:	bf58      	it	pl
 8005da4:	6963      	ldrpl	r3, [r4, #20]
 8005da6:	60a3      	str	r3, [r4, #8]
 8005da8:	e7f4      	b.n	8005d94 <__swsetup_r+0xb0>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e7f7      	b.n	8005d9e <__swsetup_r+0xba>
 8005dae:	bf00      	nop
 8005db0:	2000000c 	.word	0x2000000c
 8005db4:	080065c0 	.word	0x080065c0
 8005db8:	080065e0 	.word	0x080065e0
 8005dbc:	080065a0 	.word	0x080065a0

08005dc0 <abort>:
 8005dc0:	b508      	push	{r3, lr}
 8005dc2:	2006      	movs	r0, #6
 8005dc4:	f000 fa58 	bl	8006278 <raise>
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fb f851 	bl	8000e70 <_exit>
	...

08005dd0 <__sflush_r>:
 8005dd0:	898a      	ldrh	r2, [r1, #12]
 8005dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	0710      	lsls	r0, r2, #28
 8005dda:	460c      	mov	r4, r1
 8005ddc:	d458      	bmi.n	8005e90 <__sflush_r+0xc0>
 8005dde:	684b      	ldr	r3, [r1, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc05      	bgt.n	8005df0 <__sflush_r+0x20>
 8005de4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	dc02      	bgt.n	8005df0 <__sflush_r+0x20>
 8005dea:	2000      	movs	r0, #0
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005df2:	2e00      	cmp	r6, #0
 8005df4:	d0f9      	beq.n	8005dea <__sflush_r+0x1a>
 8005df6:	2300      	movs	r3, #0
 8005df8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dfc:	682f      	ldr	r7, [r5, #0]
 8005dfe:	602b      	str	r3, [r5, #0]
 8005e00:	d032      	beq.n	8005e68 <__sflush_r+0x98>
 8005e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	075a      	lsls	r2, r3, #29
 8005e08:	d505      	bpl.n	8005e16 <__sflush_r+0x46>
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	1ac0      	subs	r0, r0, r3
 8005e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e10:	b10b      	cbz	r3, 8005e16 <__sflush_r+0x46>
 8005e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e14:	1ac0      	subs	r0, r0, r3
 8005e16:	2300      	movs	r3, #0
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e1c:	6a21      	ldr	r1, [r4, #32]
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b0      	blx	r6
 8005e22:	1c43      	adds	r3, r0, #1
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	d106      	bne.n	8005e36 <__sflush_r+0x66>
 8005e28:	6829      	ldr	r1, [r5, #0]
 8005e2a:	291d      	cmp	r1, #29
 8005e2c:	d82c      	bhi.n	8005e88 <__sflush_r+0xb8>
 8005e2e:	4a2a      	ldr	r2, [pc, #168]	; (8005ed8 <__sflush_r+0x108>)
 8005e30:	40ca      	lsrs	r2, r1
 8005e32:	07d6      	lsls	r6, r2, #31
 8005e34:	d528      	bpl.n	8005e88 <__sflush_r+0xb8>
 8005e36:	2200      	movs	r2, #0
 8005e38:	6062      	str	r2, [r4, #4]
 8005e3a:	04d9      	lsls	r1, r3, #19
 8005e3c:	6922      	ldr	r2, [r4, #16]
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	d504      	bpl.n	8005e4c <__sflush_r+0x7c>
 8005e42:	1c42      	adds	r2, r0, #1
 8005e44:	d101      	bne.n	8005e4a <__sflush_r+0x7a>
 8005e46:	682b      	ldr	r3, [r5, #0]
 8005e48:	b903      	cbnz	r3, 8005e4c <__sflush_r+0x7c>
 8005e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e4e:	602f      	str	r7, [r5, #0]
 8005e50:	2900      	cmp	r1, #0
 8005e52:	d0ca      	beq.n	8005dea <__sflush_r+0x1a>
 8005e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d002      	beq.n	8005e62 <__sflush_r+0x92>
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f7ff fb11 	bl	8005484 <_free_r>
 8005e62:	2000      	movs	r0, #0
 8005e64:	6360      	str	r0, [r4, #52]	; 0x34
 8005e66:	e7c1      	b.n	8005dec <__sflush_r+0x1c>
 8005e68:	6a21      	ldr	r1, [r4, #32]
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b0      	blx	r6
 8005e70:	1c41      	adds	r1, r0, #1
 8005e72:	d1c7      	bne.n	8005e04 <__sflush_r+0x34>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0c4      	beq.n	8005e04 <__sflush_r+0x34>
 8005e7a:	2b1d      	cmp	r3, #29
 8005e7c:	d001      	beq.n	8005e82 <__sflush_r+0xb2>
 8005e7e:	2b16      	cmp	r3, #22
 8005e80:	d101      	bne.n	8005e86 <__sflush_r+0xb6>
 8005e82:	602f      	str	r7, [r5, #0]
 8005e84:	e7b1      	b.n	8005dea <__sflush_r+0x1a>
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8c:	81a3      	strh	r3, [r4, #12]
 8005e8e:	e7ad      	b.n	8005dec <__sflush_r+0x1c>
 8005e90:	690f      	ldr	r7, [r1, #16]
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	d0a9      	beq.n	8005dea <__sflush_r+0x1a>
 8005e96:	0793      	lsls	r3, r2, #30
 8005e98:	680e      	ldr	r6, [r1, #0]
 8005e9a:	bf08      	it	eq
 8005e9c:	694b      	ldreq	r3, [r1, #20]
 8005e9e:	600f      	str	r7, [r1, #0]
 8005ea0:	bf18      	it	ne
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	eba6 0807 	sub.w	r8, r6, r7
 8005ea8:	608b      	str	r3, [r1, #8]
 8005eaa:	f1b8 0f00 	cmp.w	r8, #0
 8005eae:	dd9c      	ble.n	8005dea <__sflush_r+0x1a>
 8005eb0:	6a21      	ldr	r1, [r4, #32]
 8005eb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005eb4:	4643      	mov	r3, r8
 8005eb6:	463a      	mov	r2, r7
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b0      	blx	r6
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	dc06      	bgt.n	8005ece <__sflush_r+0xfe>
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	e78e      	b.n	8005dec <__sflush_r+0x1c>
 8005ece:	4407      	add	r7, r0
 8005ed0:	eba8 0800 	sub.w	r8, r8, r0
 8005ed4:	e7e9      	b.n	8005eaa <__sflush_r+0xda>
 8005ed6:	bf00      	nop
 8005ed8:	20400001 	.word	0x20400001

08005edc <_fflush_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	690b      	ldr	r3, [r1, #16]
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	b913      	cbnz	r3, 8005eec <_fflush_r+0x10>
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	4628      	mov	r0, r5
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	b118      	cbz	r0, 8005ef6 <_fflush_r+0x1a>
 8005eee:	6983      	ldr	r3, [r0, #24]
 8005ef0:	b90b      	cbnz	r3, 8005ef6 <_fflush_r+0x1a>
 8005ef2:	f000 f887 	bl	8006004 <__sinit>
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <_fflush_r+0x6c>)
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	d11b      	bne.n	8005f34 <_fflush_r+0x58>
 8005efc:	686c      	ldr	r4, [r5, #4]
 8005efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0ef      	beq.n	8005ee6 <_fflush_r+0xa>
 8005f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f08:	07d0      	lsls	r0, r2, #31
 8005f0a:	d404      	bmi.n	8005f16 <_fflush_r+0x3a>
 8005f0c:	0599      	lsls	r1, r3, #22
 8005f0e:	d402      	bmi.n	8005f16 <_fflush_r+0x3a>
 8005f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f12:	f000 f915 	bl	8006140 <__retarget_lock_acquire_recursive>
 8005f16:	4628      	mov	r0, r5
 8005f18:	4621      	mov	r1, r4
 8005f1a:	f7ff ff59 	bl	8005dd0 <__sflush_r>
 8005f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f20:	07da      	lsls	r2, r3, #31
 8005f22:	4605      	mov	r5, r0
 8005f24:	d4e0      	bmi.n	8005ee8 <_fflush_r+0xc>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	059b      	lsls	r3, r3, #22
 8005f2a:	d4dd      	bmi.n	8005ee8 <_fflush_r+0xc>
 8005f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f2e:	f000 f908 	bl	8006142 <__retarget_lock_release_recursive>
 8005f32:	e7d9      	b.n	8005ee8 <_fflush_r+0xc>
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <_fflush_r+0x70>)
 8005f36:	429c      	cmp	r4, r3
 8005f38:	d101      	bne.n	8005f3e <_fflush_r+0x62>
 8005f3a:	68ac      	ldr	r4, [r5, #8]
 8005f3c:	e7df      	b.n	8005efe <_fflush_r+0x22>
 8005f3e:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <_fflush_r+0x74>)
 8005f40:	429c      	cmp	r4, r3
 8005f42:	bf08      	it	eq
 8005f44:	68ec      	ldreq	r4, [r5, #12]
 8005f46:	e7da      	b.n	8005efe <_fflush_r+0x22>
 8005f48:	080065c0 	.word	0x080065c0
 8005f4c:	080065e0 	.word	0x080065e0
 8005f50:	080065a0 	.word	0x080065a0

08005f54 <std>:
 8005f54:	2300      	movs	r3, #0
 8005f56:	b510      	push	{r4, lr}
 8005f58:	4604      	mov	r4, r0
 8005f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f62:	6083      	str	r3, [r0, #8]
 8005f64:	8181      	strh	r1, [r0, #12]
 8005f66:	6643      	str	r3, [r0, #100]	; 0x64
 8005f68:	81c2      	strh	r2, [r0, #14]
 8005f6a:	6183      	str	r3, [r0, #24]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	2208      	movs	r2, #8
 8005f70:	305c      	adds	r0, #92	; 0x5c
 8005f72:	f7ff f9d7 	bl	8005324 <memset>
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <std+0x38>)
 8005f78:	6263      	str	r3, [r4, #36]	; 0x24
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <std+0x3c>)
 8005f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <std+0x40>)
 8005f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <std+0x44>)
 8005f84:	6224      	str	r4, [r4, #32]
 8005f86:	6323      	str	r3, [r4, #48]	; 0x30
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	bf00      	nop
 8005f8c:	080062b1 	.word	0x080062b1
 8005f90:	080062d3 	.word	0x080062d3
 8005f94:	0800630b 	.word	0x0800630b
 8005f98:	0800632f 	.word	0x0800632f

08005f9c <_cleanup_r>:
 8005f9c:	4901      	ldr	r1, [pc, #4]	; (8005fa4 <_cleanup_r+0x8>)
 8005f9e:	f000 b8af 	b.w	8006100 <_fwalk_reent>
 8005fa2:	bf00      	nop
 8005fa4:	08005edd 	.word	0x08005edd

08005fa8 <__sfmoreglue>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	2268      	movs	r2, #104	; 0x68
 8005fac:	1e4d      	subs	r5, r1, #1
 8005fae:	4355      	muls	r5, r2
 8005fb0:	460e      	mov	r6, r1
 8005fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fb6:	f7ff fad1 	bl	800555c <_malloc_r>
 8005fba:	4604      	mov	r4, r0
 8005fbc:	b140      	cbz	r0, 8005fd0 <__sfmoreglue+0x28>
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8005fc4:	300c      	adds	r0, #12
 8005fc6:	60a0      	str	r0, [r4, #8]
 8005fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fcc:	f7ff f9aa 	bl	8005324 <memset>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}

08005fd4 <__sfp_lock_acquire>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	; (8005fdc <__sfp_lock_acquire+0x8>)
 8005fd6:	f000 b8b3 	b.w	8006140 <__retarget_lock_acquire_recursive>
 8005fda:	bf00      	nop
 8005fdc:	200001f5 	.word	0x200001f5

08005fe0 <__sfp_lock_release>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <__sfp_lock_release+0x8>)
 8005fe2:	f000 b8ae 	b.w	8006142 <__retarget_lock_release_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	200001f5 	.word	0x200001f5

08005fec <__sinit_lock_acquire>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__sinit_lock_acquire+0x8>)
 8005fee:	f000 b8a7 	b.w	8006140 <__retarget_lock_acquire_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	200001f6 	.word	0x200001f6

08005ff8 <__sinit_lock_release>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__sinit_lock_release+0x8>)
 8005ffa:	f000 b8a2 	b.w	8006142 <__retarget_lock_release_recursive>
 8005ffe:	bf00      	nop
 8006000:	200001f6 	.word	0x200001f6

08006004 <__sinit>:
 8006004:	b510      	push	{r4, lr}
 8006006:	4604      	mov	r4, r0
 8006008:	f7ff fff0 	bl	8005fec <__sinit_lock_acquire>
 800600c:	69a3      	ldr	r3, [r4, #24]
 800600e:	b11b      	cbz	r3, 8006018 <__sinit+0x14>
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	f7ff bff0 	b.w	8005ff8 <__sinit_lock_release>
 8006018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800601c:	6523      	str	r3, [r4, #80]	; 0x50
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <__sinit+0x68>)
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <__sinit+0x6c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	62a2      	str	r2, [r4, #40]	; 0x28
 8006026:	42a3      	cmp	r3, r4
 8006028:	bf04      	itt	eq
 800602a:	2301      	moveq	r3, #1
 800602c:	61a3      	streq	r3, [r4, #24]
 800602e:	4620      	mov	r0, r4
 8006030:	f000 f820 	bl	8006074 <__sfp>
 8006034:	6060      	str	r0, [r4, #4]
 8006036:	4620      	mov	r0, r4
 8006038:	f000 f81c 	bl	8006074 <__sfp>
 800603c:	60a0      	str	r0, [r4, #8]
 800603e:	4620      	mov	r0, r4
 8006040:	f000 f818 	bl	8006074 <__sfp>
 8006044:	2200      	movs	r2, #0
 8006046:	60e0      	str	r0, [r4, #12]
 8006048:	2104      	movs	r1, #4
 800604a:	6860      	ldr	r0, [r4, #4]
 800604c:	f7ff ff82 	bl	8005f54 <std>
 8006050:	68a0      	ldr	r0, [r4, #8]
 8006052:	2201      	movs	r2, #1
 8006054:	2109      	movs	r1, #9
 8006056:	f7ff ff7d 	bl	8005f54 <std>
 800605a:	68e0      	ldr	r0, [r4, #12]
 800605c:	2202      	movs	r2, #2
 800605e:	2112      	movs	r1, #18
 8006060:	f7ff ff78 	bl	8005f54 <std>
 8006064:	2301      	movs	r3, #1
 8006066:	61a3      	str	r3, [r4, #24]
 8006068:	e7d2      	b.n	8006010 <__sinit+0xc>
 800606a:	bf00      	nop
 800606c:	080064b8 	.word	0x080064b8
 8006070:	08005f9d 	.word	0x08005f9d

08006074 <__sfp>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	4607      	mov	r7, r0
 8006078:	f7ff ffac 	bl	8005fd4 <__sfp_lock_acquire>
 800607c:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <__sfp+0x84>)
 800607e:	681e      	ldr	r6, [r3, #0]
 8006080:	69b3      	ldr	r3, [r6, #24]
 8006082:	b913      	cbnz	r3, 800608a <__sfp+0x16>
 8006084:	4630      	mov	r0, r6
 8006086:	f7ff ffbd 	bl	8006004 <__sinit>
 800608a:	3648      	adds	r6, #72	; 0x48
 800608c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006090:	3b01      	subs	r3, #1
 8006092:	d503      	bpl.n	800609c <__sfp+0x28>
 8006094:	6833      	ldr	r3, [r6, #0]
 8006096:	b30b      	cbz	r3, 80060dc <__sfp+0x68>
 8006098:	6836      	ldr	r6, [r6, #0]
 800609a:	e7f7      	b.n	800608c <__sfp+0x18>
 800609c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060a0:	b9d5      	cbnz	r5, 80060d8 <__sfp+0x64>
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <__sfp+0x88>)
 80060a4:	60e3      	str	r3, [r4, #12]
 80060a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060aa:	6665      	str	r5, [r4, #100]	; 0x64
 80060ac:	f000 f847 	bl	800613e <__retarget_lock_init_recursive>
 80060b0:	f7ff ff96 	bl	8005fe0 <__sfp_lock_release>
 80060b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060bc:	6025      	str	r5, [r4, #0]
 80060be:	61a5      	str	r5, [r4, #24]
 80060c0:	2208      	movs	r2, #8
 80060c2:	4629      	mov	r1, r5
 80060c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060c8:	f7ff f92c 	bl	8005324 <memset>
 80060cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060d4:	4620      	mov	r0, r4
 80060d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d8:	3468      	adds	r4, #104	; 0x68
 80060da:	e7d9      	b.n	8006090 <__sfp+0x1c>
 80060dc:	2104      	movs	r1, #4
 80060de:	4638      	mov	r0, r7
 80060e0:	f7ff ff62 	bl	8005fa8 <__sfmoreglue>
 80060e4:	4604      	mov	r4, r0
 80060e6:	6030      	str	r0, [r6, #0]
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d1d5      	bne.n	8006098 <__sfp+0x24>
 80060ec:	f7ff ff78 	bl	8005fe0 <__sfp_lock_release>
 80060f0:	230c      	movs	r3, #12
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	e7ee      	b.n	80060d4 <__sfp+0x60>
 80060f6:	bf00      	nop
 80060f8:	080064b8 	.word	0x080064b8
 80060fc:	ffff0001 	.word	0xffff0001

08006100 <_fwalk_reent>:
 8006100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006104:	4606      	mov	r6, r0
 8006106:	4688      	mov	r8, r1
 8006108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800610c:	2700      	movs	r7, #0
 800610e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006112:	f1b9 0901 	subs.w	r9, r9, #1
 8006116:	d505      	bpl.n	8006124 <_fwalk_reent+0x24>
 8006118:	6824      	ldr	r4, [r4, #0]
 800611a:	2c00      	cmp	r4, #0
 800611c:	d1f7      	bne.n	800610e <_fwalk_reent+0xe>
 800611e:	4638      	mov	r0, r7
 8006120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006124:	89ab      	ldrh	r3, [r5, #12]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d907      	bls.n	800613a <_fwalk_reent+0x3a>
 800612a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800612e:	3301      	adds	r3, #1
 8006130:	d003      	beq.n	800613a <_fwalk_reent+0x3a>
 8006132:	4629      	mov	r1, r5
 8006134:	4630      	mov	r0, r6
 8006136:	47c0      	blx	r8
 8006138:	4307      	orrs	r7, r0
 800613a:	3568      	adds	r5, #104	; 0x68
 800613c:	e7e9      	b.n	8006112 <_fwalk_reent+0x12>

0800613e <__retarget_lock_init_recursive>:
 800613e:	4770      	bx	lr

08006140 <__retarget_lock_acquire_recursive>:
 8006140:	4770      	bx	lr

08006142 <__retarget_lock_release_recursive>:
 8006142:	4770      	bx	lr

08006144 <__swhatbuf_r>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	460e      	mov	r6, r1
 8006148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614c:	2900      	cmp	r1, #0
 800614e:	b096      	sub	sp, #88	; 0x58
 8006150:	4614      	mov	r4, r2
 8006152:	461d      	mov	r5, r3
 8006154:	da08      	bge.n	8006168 <__swhatbuf_r+0x24>
 8006156:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	061a      	lsls	r2, r3, #24
 8006160:	d410      	bmi.n	8006184 <__swhatbuf_r+0x40>
 8006162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006166:	e00e      	b.n	8006186 <__swhatbuf_r+0x42>
 8006168:	466a      	mov	r2, sp
 800616a:	f000 f907 	bl	800637c <_fstat_r>
 800616e:	2800      	cmp	r0, #0
 8006170:	dbf1      	blt.n	8006156 <__swhatbuf_r+0x12>
 8006172:	9a01      	ldr	r2, [sp, #4]
 8006174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800617c:	425a      	negs	r2, r3
 800617e:	415a      	adcs	r2, r3
 8006180:	602a      	str	r2, [r5, #0]
 8006182:	e7ee      	b.n	8006162 <__swhatbuf_r+0x1e>
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	2000      	movs	r0, #0
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	b016      	add	sp, #88	; 0x58
 800618c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006190 <__smakebuf_r>:
 8006190:	898b      	ldrh	r3, [r1, #12]
 8006192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006194:	079d      	lsls	r5, r3, #30
 8006196:	4606      	mov	r6, r0
 8006198:	460c      	mov	r4, r1
 800619a:	d507      	bpl.n	80061ac <__smakebuf_r+0x1c>
 800619c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	2301      	movs	r3, #1
 80061a6:	6163      	str	r3, [r4, #20]
 80061a8:	b002      	add	sp, #8
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	ab01      	add	r3, sp, #4
 80061ae:	466a      	mov	r2, sp
 80061b0:	f7ff ffc8 	bl	8006144 <__swhatbuf_r>
 80061b4:	9900      	ldr	r1, [sp, #0]
 80061b6:	4605      	mov	r5, r0
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7ff f9cf 	bl	800555c <_malloc_r>
 80061be:	b948      	cbnz	r0, 80061d4 <__smakebuf_r+0x44>
 80061c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c4:	059a      	lsls	r2, r3, #22
 80061c6:	d4ef      	bmi.n	80061a8 <__smakebuf_r+0x18>
 80061c8:	f023 0303 	bic.w	r3, r3, #3
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	e7e3      	b.n	800619c <__smakebuf_r+0xc>
 80061d4:	4b0d      	ldr	r3, [pc, #52]	; (800620c <__smakebuf_r+0x7c>)
 80061d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	6020      	str	r0, [r4, #0]
 80061dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	9b00      	ldr	r3, [sp, #0]
 80061e4:	6163      	str	r3, [r4, #20]
 80061e6:	9b01      	ldr	r3, [sp, #4]
 80061e8:	6120      	str	r0, [r4, #16]
 80061ea:	b15b      	cbz	r3, 8006204 <__smakebuf_r+0x74>
 80061ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061f0:	4630      	mov	r0, r6
 80061f2:	f000 f8d5 	bl	80063a0 <_isatty_r>
 80061f6:	b128      	cbz	r0, 8006204 <__smakebuf_r+0x74>
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	f043 0301 	orr.w	r3, r3, #1
 8006202:	81a3      	strh	r3, [r4, #12]
 8006204:	89a0      	ldrh	r0, [r4, #12]
 8006206:	4305      	orrs	r5, r0
 8006208:	81a5      	strh	r5, [r4, #12]
 800620a:	e7cd      	b.n	80061a8 <__smakebuf_r+0x18>
 800620c:	08005f9d 	.word	0x08005f9d

08006210 <__malloc_lock>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__malloc_lock+0x8>)
 8006212:	f7ff bf95 	b.w	8006140 <__retarget_lock_acquire_recursive>
 8006216:	bf00      	nop
 8006218:	200001f4 	.word	0x200001f4

0800621c <__malloc_unlock>:
 800621c:	4801      	ldr	r0, [pc, #4]	; (8006224 <__malloc_unlock+0x8>)
 800621e:	f7ff bf90 	b.w	8006142 <__retarget_lock_release_recursive>
 8006222:	bf00      	nop
 8006224:	200001f4 	.word	0x200001f4

08006228 <_raise_r>:
 8006228:	291f      	cmp	r1, #31
 800622a:	b538      	push	{r3, r4, r5, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	d904      	bls.n	800623c <_raise_r+0x14>
 8006232:	2316      	movs	r3, #22
 8006234:	6003      	str	r3, [r0, #0]
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800623e:	b112      	cbz	r2, 8006246 <_raise_r+0x1e>
 8006240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006244:	b94b      	cbnz	r3, 800625a <_raise_r+0x32>
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f830 	bl	80062ac <_getpid_r>
 800624c:	462a      	mov	r2, r5
 800624e:	4601      	mov	r1, r0
 8006250:	4620      	mov	r0, r4
 8006252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006256:	f000 b817 	b.w	8006288 <_kill_r>
 800625a:	2b01      	cmp	r3, #1
 800625c:	d00a      	beq.n	8006274 <_raise_r+0x4c>
 800625e:	1c59      	adds	r1, r3, #1
 8006260:	d103      	bne.n	800626a <_raise_r+0x42>
 8006262:	2316      	movs	r3, #22
 8006264:	6003      	str	r3, [r0, #0]
 8006266:	2001      	movs	r0, #1
 8006268:	e7e7      	b.n	800623a <_raise_r+0x12>
 800626a:	2400      	movs	r4, #0
 800626c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006270:	4628      	mov	r0, r5
 8006272:	4798      	blx	r3
 8006274:	2000      	movs	r0, #0
 8006276:	e7e0      	b.n	800623a <_raise_r+0x12>

08006278 <raise>:
 8006278:	4b02      	ldr	r3, [pc, #8]	; (8006284 <raise+0xc>)
 800627a:	4601      	mov	r1, r0
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	f7ff bfd3 	b.w	8006228 <_raise_r>
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c

08006288 <_kill_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4d07      	ldr	r5, [pc, #28]	; (80062a8 <_kill_r+0x20>)
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	f7fa fddb 	bl	8000e50 <_kill>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	d102      	bne.n	80062a4 <_kill_r+0x1c>
 800629e:	682b      	ldr	r3, [r5, #0]
 80062a0:	b103      	cbz	r3, 80062a4 <_kill_r+0x1c>
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	bd38      	pop	{r3, r4, r5, pc}
 80062a6:	bf00      	nop
 80062a8:	200001f8 	.word	0x200001f8

080062ac <_getpid_r>:
 80062ac:	f7fa bdc8 	b.w	8000e40 <_getpid>

080062b0 <__sread>:
 80062b0:	b510      	push	{r4, lr}
 80062b2:	460c      	mov	r4, r1
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	f000 f894 	bl	80063e4 <_read_r>
 80062bc:	2800      	cmp	r0, #0
 80062be:	bfab      	itete	ge
 80062c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062c2:	89a3      	ldrhlt	r3, [r4, #12]
 80062c4:	181b      	addge	r3, r3, r0
 80062c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062ca:	bfac      	ite	ge
 80062cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80062ce:	81a3      	strhlt	r3, [r4, #12]
 80062d0:	bd10      	pop	{r4, pc}

080062d2 <__swrite>:
 80062d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d6:	461f      	mov	r7, r3
 80062d8:	898b      	ldrh	r3, [r1, #12]
 80062da:	05db      	lsls	r3, r3, #23
 80062dc:	4605      	mov	r5, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	4616      	mov	r6, r2
 80062e2:	d505      	bpl.n	80062f0 <__swrite+0x1e>
 80062e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e8:	2302      	movs	r3, #2
 80062ea:	2200      	movs	r2, #0
 80062ec:	f000 f868 	bl	80063c0 <_lseek_r>
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	4632      	mov	r2, r6
 80062fe:	463b      	mov	r3, r7
 8006300:	4628      	mov	r0, r5
 8006302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006306:	f000 b817 	b.w	8006338 <_write_r>

0800630a <__sseek>:
 800630a:	b510      	push	{r4, lr}
 800630c:	460c      	mov	r4, r1
 800630e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006312:	f000 f855 	bl	80063c0 <_lseek_r>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	bf15      	itete	ne
 800631c:	6560      	strne	r0, [r4, #84]	; 0x54
 800631e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006326:	81a3      	strheq	r3, [r4, #12]
 8006328:	bf18      	it	ne
 800632a:	81a3      	strhne	r3, [r4, #12]
 800632c:	bd10      	pop	{r4, pc}

0800632e <__sclose>:
 800632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006332:	f000 b813 	b.w	800635c <_close_r>
	...

08006338 <_write_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d07      	ldr	r5, [pc, #28]	; (8006358 <_write_r+0x20>)
 800633c:	4604      	mov	r4, r0
 800633e:	4608      	mov	r0, r1
 8006340:	4611      	mov	r1, r2
 8006342:	2200      	movs	r2, #0
 8006344:	602a      	str	r2, [r5, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	f7fa fdb9 	bl	8000ebe <_write>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_write_r+0x1e>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_write_r+0x1e>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	200001f8 	.word	0x200001f8

0800635c <_close_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d06      	ldr	r5, [pc, #24]	; (8006378 <_close_r+0x1c>)
 8006360:	2300      	movs	r3, #0
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	f7fa fdc5 	bl	8000ef6 <_close>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_close_r+0x1a>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_close_r+0x1a>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	200001f8 	.word	0x200001f8

0800637c <_fstat_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d07      	ldr	r5, [pc, #28]	; (800639c <_fstat_r+0x20>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	4611      	mov	r1, r2
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	f7fa fdc0 	bl	8000f0e <_fstat>
 800638e:	1c43      	adds	r3, r0, #1
 8006390:	d102      	bne.n	8006398 <_fstat_r+0x1c>
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	b103      	cbz	r3, 8006398 <_fstat_r+0x1c>
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	bd38      	pop	{r3, r4, r5, pc}
 800639a:	bf00      	nop
 800639c:	200001f8 	.word	0x200001f8

080063a0 <_isatty_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_isatty_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fa fdbf 	bl	8000f2e <_isatty>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_isatty_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_isatty_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	200001f8 	.word	0x200001f8

080063c0 <_lseek_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	; (80063e0 <_lseek_r+0x20>)
 80063c4:	4604      	mov	r4, r0
 80063c6:	4608      	mov	r0, r1
 80063c8:	4611      	mov	r1, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	602a      	str	r2, [r5, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	f7fa fdb8 	bl	8000f44 <_lseek>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_lseek_r+0x1e>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_lseek_r+0x1e>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	200001f8 	.word	0x200001f8

080063e4 <_read_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d07      	ldr	r5, [pc, #28]	; (8006404 <_read_r+0x20>)
 80063e8:	4604      	mov	r4, r0
 80063ea:	4608      	mov	r0, r1
 80063ec:	4611      	mov	r1, r2
 80063ee:	2200      	movs	r2, #0
 80063f0:	602a      	str	r2, [r5, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f7fa fd46 	bl	8000e84 <_read>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_read_r+0x1e>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_read_r+0x1e>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	200001f8 	.word	0x200001f8

08006408 <_init>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	bf00      	nop
 800640c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640e:	bc08      	pop	{r3}
 8006410:	469e      	mov	lr, r3
 8006412:	4770      	bx	lr

08006414 <_fini>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr


IPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200000cc  08004ddc  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004ddc  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1d4  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221a  00000000  00000000  0002d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002078c  00000000  00000000  00030908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8a9  00000000  00000000  00051094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c00f4  00000000  00000000  0005e93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ea31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  0011ea84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049c0 	.word	0x080049c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	080049c0 	.word	0x080049c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DataToGsm>:
#include <stdlib.h>

int count=0;

void DataToGsm(struct data *d1)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af06      	add	r7, sp, #24
 800058a:	6078      	str	r0, [r7, #4]
	uint8_t seconds=d1->sec;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000592:	73fb      	strb	r3, [r7, #15]
	if(seconds==59)
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2b3b      	cmp	r3, #59	; 0x3b
 8000598:	d104      	bne.n	80005a4 <DataToGsm+0x20>
	{
		count=count+1;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <DataToGsm+0x74>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <DataToGsm+0x74>)
 80005a2:	6013      	str	r3, [r2, #0]
	}


	if(count==3)
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <DataToGsm+0x74>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d121      	bne.n	80005f0 <DataToGsm+0x6c>
	{
		DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
 80005ac:	687d      	ldr	r5, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f103 060a 	add.w	r6, r3, #10
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f103 0c14 	add.w	ip, r3, #20
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f103 0e1e 	add.w	lr, r3, #30
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3328      	adds	r3, #40	; 0x28
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	3232      	adds	r2, #50	; 0x32
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	313c      	adds	r1, #60	; 0x3c
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	3046      	adds	r0, #70	; 0x46
 80005d0:	687c      	ldr	r4, [r7, #4]
 80005d2:	3450      	adds	r4, #80	; 0x50
 80005d4:	9404      	str	r4, [sp, #16]
 80005d6:	9003      	str	r0, [sp, #12]
 80005d8:	9102      	str	r1, [sp, #8]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4673      	mov	r3, lr
 80005e0:	4662      	mov	r2, ip
 80005e2:	4631      	mov	r1, r6
 80005e4:	4628      	mov	r0, r5
 80005e6:	f000 f8bd 	bl	8000764 <DataToCloud>
		count=0;
 80005ea:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <DataToGsm+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
	}


}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	200000e8 	.word	0x200000e8

080005fc <UART2_Init>:
uint8_t buf[50];

UART_HandleTypeDef huart2;

void UART2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <UART2_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <UART2_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <UART2_Init+0x58>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <UART2_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <UART2_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <UART2_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <UART2_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <UART2_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <UART2_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <UART2_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <UART2_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <UART2_Init+0x58>)
 8000640:	f002 f8b0 	bl	80027a4 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <UART2_Init+0x52>
	{
		Error_Handler();
 800064a:	f000 fa45 	bl	8000ad8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000184 	.word	0x20000184
 8000658:	40004400 	.word	0x40004400

0800065c <DataToUart>:

void DataToUart(struct data *d)
{
 800065c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065e:	b08b      	sub	sp, #44	; 0x2c
 8000660:	af08      	add	r7, sp, #32
 8000662:	6078      	str	r0, [r7, #4]
	sprintf(buf,"%s,%s,%s,%s,%s,%s,%s,%s,%s\r\n",d->time,d->CH1,d->CH2,d->CH3,d->CH4,d->D1,d->D2,d->D3,d->D4);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f103 0c0a 	add.w	ip, r3, #10
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3314      	adds	r3, #20
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	321e      	adds	r2, #30
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	3128      	adds	r1, #40	; 0x28
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	3032      	adds	r0, #50	; 0x32
 800067e:	687c      	ldr	r4, [r7, #4]
 8000680:	343c      	adds	r4, #60	; 0x3c
 8000682:	687d      	ldr	r5, [r7, #4]
 8000684:	3546      	adds	r5, #70	; 0x46
 8000686:	687e      	ldr	r6, [r7, #4]
 8000688:	3650      	adds	r6, #80	; 0x50
 800068a:	9606      	str	r6, [sp, #24]
 800068c:	9505      	str	r5, [sp, #20]
 800068e:	9404      	str	r4, [sp, #16]
 8000690:	9003      	str	r0, [sp, #12]
 8000692:	9102      	str	r1, [sp, #8]
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	4663      	mov	r3, ip
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	490b      	ldr	r1, [pc, #44]	; (80006cc <DataToUart+0x70>)
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <DataToUart+0x74>)
 80006a0:	f003 fe10 	bl	80042c4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <DataToUart+0x74>)
 80006a6:	f7ff fd93 	bl	80001d0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	4907      	ldr	r1, [pc, #28]	; (80006d0 <DataToUart+0x74>)
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <DataToUart+0x78>)
 80006b6:	f002 f8c3 	bl	8002840 <HAL_UART_Transmit>
	HAL_Delay(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006be:	f000 fbaf 	bl	8000e20 <HAL_Delay>

}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	080049d8 	.word	0x080049d8
 80006d0:	20000150 	.word	0x20000150
 80006d4:	20000184 	.word	0x20000184

080006d8 <GsmCommands>:

void GsmCommands(uint8_t* cmd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fd75 	bl	80001d0 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <GsmCommands+0x38>)
 80006f0:	f002 f93a 	bl	8002968 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 80006f4:	2264      	movs	r2, #100	; 0x64
 80006f6:	4907      	ldr	r1, [pc, #28]	; (8000714 <GsmCommands+0x3c>)
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <GsmCommands+0x38>)
 80006fa:	f002 f9a3 	bl	8002a44 <HAL_UART_Receive_IT>
	HAL_Delay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000702:	f000 fb8d 	bl	8000e20 <HAL_Delay>

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000184 	.word	0x20000184
 8000714:	200000ec 	.word	0x200000ec

08000718 <Gsm_Init>:

void Gsm_Init()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 800071c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000720:	f000 fb7e 	bl	8000e20 <HAL_Delay>


	GsmCommands((uint8_t*)"AT\r\n");
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <Gsm_Init+0x34>)
 8000726:	f7ff ffd7 	bl	80006d8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <Gsm_Init+0x38>)
 800072c:	f7ff ffd4 	bl	80006d8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8000730:	4808      	ldr	r0, [pc, #32]	; (8000754 <Gsm_Init+0x3c>)
 8000732:	f7ff ffd1 	bl	80006d8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <Gsm_Init+0x40>)
 8000738:	f7ff ffce 	bl	80006d8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <Gsm_Init+0x44>)
 800073e:	f7ff ffcb 	bl	80006d8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <Gsm_Init+0x48>)
 8000744:	f7ff ffc8 	bl	80006d8 <GsmCommands>

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	080049f8 	.word	0x080049f8
 8000750:	08004a00 	.word	0x08004a00
 8000754:	08004a0c 	.word	0x08004a0c
 8000758:	08004a18 	.word	0x08004a18
 800075c:	08004a28 	.word	0x08004a28
 8000760:	08004a48 	.word	0x08004a48

08000764 <DataToCloud>:


void DataToCloud(uint8_t* Time,uint8_t* Ch1,uint8_t* Ch2,uint8_t* Ch3,uint8_t* Ch4,uint8_t* D1,uint8_t* D2,uint8_t* D3,uint8_t* D4)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800076a:	af08      	add	r7, sp, #32
 800076c:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8000770:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8000774:	6020      	str	r0, [r4, #0]
 8000776:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800077a:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800077e:	6001      	str	r1, [r0, #0]
 8000780:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000784:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8000788:	600a      	str	r2, [r1, #0]
 800078a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800078e:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000792:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 8000794:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000798:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	f000 f89b 	bl	80008d8 <url_encode>
 80007a2:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch1 = url_encode(Ch1);
 80007a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80007aa:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	f000 f892 	bl	80008d8 <url_encode>
 80007b4:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch2 = url_encode(Ch2);
 80007b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80007bc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f000 f889 	bl	80008d8 <url_encode>
 80007c6:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch3 = url_encode(Ch3);
 80007ca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80007ce:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	f000 f880 	bl	80008d8 <url_encode>
 80007d8:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_Ch4 = url_encode(Ch4);
 80007dc:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 80007e0:	f000 f87a 	bl	80008d8 <url_encode>
 80007e4:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D1 = url_encode(D1);
 80007e8:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 80007ec:	f000 f874 	bl	80008d8 <url_encode>
 80007f0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D2 = url_encode(D2);
 80007f4:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 80007f8:	f000 f86e 	bl	80008d8 <url_encode>
 80007fc:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D3 = url_encode(D3);
 8000800:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8000804:	f000 f868 	bl	80008d8 <url_encode>
 8000808:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	char* encoded_D4 = url_encode(D4);
 800080c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8000810:	f000 f862 	bl	80008d8 <url_encode>
 8000814:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8000818:	482b      	ldr	r0, [pc, #172]	; (80008c8 <DataToCloud+0x164>)
 800081a:	f7ff ff5d 	bl	80006d8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800081e:	482b      	ldr	r0, [pc, #172]	; (80008cc <DataToCloud+0x168>)
 8000820:	f7ff ff5a 	bl	80006d8 <GsmCommands>


	snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbwaEr2bwPZ4lsp0eJuNW61im6PEJ0zI5yxW0n7_kDA9N-wocsdiVT38l-30--cFvb_H/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s\"\r\n",encoded_Time, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8000824:	f107 0010 	add.w	r0, r7, #16
 8000828:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800082c:	9307      	str	r3, [sp, #28]
 800082e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000832:	9306      	str	r3, [sp, #24]
 8000834:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000838:	9305      	str	r3, [sp, #20]
 800083a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800083e:	9304      	str	r3, [sp, #16]
 8000840:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000844:	9303      	str	r3, [sp, #12]
 8000846:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800084a:	9302      	str	r3, [sp, #8]
 800084c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <DataToCloud+0x16c>)
 800085e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000862:	f003 fcfb 	bl	800425c <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff34 	bl	80006d8 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8000870:	4818      	ldr	r0, [pc, #96]	; (80008d4 <DataToCloud+0x170>)
 8000872:	f7ff ff31 	bl	80006d8 <GsmCommands>

	free(encoded_Time);
 8000876:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 800087a:	f003 fbef 	bl	800405c <free>
	free(encoded_Ch1);
 800087e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8000882:	f003 fbeb 	bl	800405c <free>
	free(encoded_Ch2);
 8000886:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800088a:	f003 fbe7 	bl	800405c <free>
	free(encoded_Ch3);
 800088e:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000892:	f003 fbe3 	bl	800405c <free>
	free(encoded_Ch4);
 8000896:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800089a:	f003 fbdf 	bl	800405c <free>
	free(encoded_D1);
 800089e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80008a2:	f003 fbdb 	bl	800405c <free>
	free(encoded_D2);
 80008a6:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80008aa:	f003 fbd7 	bl	800405c <free>
	free(encoded_D3);
 80008ae:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80008b2:	f003 fbd3 	bl	800405c <free>
	free(encoded_D4);
 80008b6:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 80008ba:	f003 fbcf 	bl	800405c <free>

}
 80008be:	bf00      	nop
 80008c0:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	08004a58 	.word	0x08004a58
 80008cc:	08004a68 	.word	0x08004a68
 80008d0:	08004a78 	.word	0x08004a78
 80008d4:	08004b5c 	.word	0x08004b5c

080008d8 <url_encode>:



char* url_encode(const char* str)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 80008e0:	4b2e      	ldr	r3, [pc, #184]	; (800099c <url_encode+0xc4>)
 80008e2:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff fc73 	bl	80001d0 <strlen>
 80008ea:	4602      	mov	r2, r0
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	3301      	adds	r3, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fba9 	bl	800404c <malloc>
 80008fa:	4603      	mov	r3, r0
 80008fc:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	617b      	str	r3, [r7, #20]

	while (*str) {
 8000902:	e03e      	b.n	8000982 <url_encode+0xaa>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f003 fb97 	bl	800403c <isalnum>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10f      	bne.n	8000934 <url_encode+0x5c>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b2d      	cmp	r3, #45	; 0x2d
 800091a:	d00b      	beq.n	8000934 <url_encode+0x5c>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b5f      	cmp	r3, #95	; 0x5f
 8000922:	d007      	beq.n	8000934 <url_encode+0x5c>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b2e      	cmp	r3, #46	; 0x2e
 800092a:	d003      	beq.n	8000934 <url_encode+0x5c>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b7e      	cmp	r3, #126	; 0x7e
 8000932:	d106      	bne.n	8000942 <url_encode+0x6a>
			*ptr++ = *str;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	617a      	str	r2, [r7, #20]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	e01c      	b.n	800097c <url_encode+0xa4>
		} else {
			*ptr++ = '%';
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	617a      	str	r2, [r7, #20]
 8000948:	2225      	movs	r2, #37	; 0x25
 800094a:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	091b      	lsrs	r3, r3, #4
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 030f 	and.w	r3, r3, #15
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	441a      	add	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	1c59      	adds	r1, r3, #1
 8000960:	6179      	str	r1, [r7, #20]
 8000962:	7812      	ldrb	r2, [r2, #0]
 8000964:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	441a      	add	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	1c59      	adds	r1, r3, #1
 8000976:	6179      	str	r1, [r7, #20]
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	701a      	strb	r2, [r3, #0]
		}
		str++;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3301      	adds	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1bc      	bne.n	8000904 <url_encode+0x2c>
	}
	*ptr = '\0';
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
	return encoded;
 8000990:	68fb      	ldr	r3, [r7, #12]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	08004b70 	.word	0x08004b70

080009a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009a4:	f000 f9c7 	bl	8000d36 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009a8:	f000 f810 	bl	80009cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009ac:	f000 f870 	bl	8000a90 <MX_GPIO_Init>
	//  MX_USART2_UART_Init();
	/* USER CODE BEGIN 2 */
	UART2_Init();
 80009b0:	f7ff fe24 	bl	80005fc <UART2_Init>
	Gsm_Init();
 80009b4:	f7ff feb0 	bl	8000718 <Gsm_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	DataToGsm(&d);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <main+0x28>)
 80009ba:	f7ff fde3 	bl	8000584 <DataToGsm>
	DataToUart(&d);
 80009be:	4802      	ldr	r0, [pc, #8]	; (80009c8 <main+0x28>)
 80009c0:	f7ff fe4c 	bl	800065c <DataToUart>
	while (1)
 80009c4:	e7fe      	b.n	80009c4 <main+0x24>
 80009c6:	bf00      	nop
 80009c8:	20000000 	.word	0x20000000

080009cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2244      	movs	r2, #68	; 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fb46 	bl	800406c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009f2:	f000 fd51 	bl	8001498 <HAL_PWREx_ControlVoltageScaling>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80009fc:	f000 f86c 	bl	8000ad8 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a00:	f000 fd2c 	bl	800145c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <SystemClock_Config+0xc0>)
 8000a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a0a:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <SystemClock_Config+0xc0>)
 8000a0c:	f023 0318 	bic.w	r3, r3, #24
 8000a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a14:	2314      	movs	r3, #20
 8000a16:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fd7b 	bl	8001544 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000a54:	f000 f840 	bl	8000ad8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f97b 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000a7c:	f000 f82c 	bl	8000ad8 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000a80:	f001 fd8e 	bl	80025a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a84:	bf00      	nop
 8000a86:	3758      	adds	r7, #88	; 0x58
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_GPIO_Init+0x44>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <MX_GPIO_Init+0x44>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_GPIO_Init+0x44>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_GPIO_Init+0x44>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0x44>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_GPIO_Init+0x44>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6613      	str	r3, [r2, #96]	; 0x60
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09e      	sub	sp, #120	; 0x78
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	2254      	movs	r2, #84	; 0x54
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 fa8d 	bl	800406c <memset>
  if(huart->Instance==USART2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_UART_MspInit+0xb8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d13e      	bne.n	8000bda <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fb23 	bl	80021b4 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b74:	f7ff ffb0 	bl	8000ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	6593      	str	r3, [r2, #88]	; 0x58
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_UART_MspInit+0xbc>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fadf 	bl	8001188 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2026      	movs	r0, #38	; 0x26
 8000bd0:	f000 fa25 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd4:	2026      	movs	r0, #38	; 0x26
 8000bd6:	f000 fa3e 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3778      	adds	r7, #120	; 0x78
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40021000 	.word	0x40021000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f8d2 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART2_IRQHandler+0x10>)
 8000c46:	f001 ff53 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000184 	.word	0x20000184

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f003 f9b0 	bl	8003fe8 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20010000 	.word	0x20010000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20000208 	.word	0x20000208
 8000cbc:	20000220 	.word	0x20000220

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f003 f96f 	bl	8003ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fe43 	bl	80009a0 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000d28:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 8000d2c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000d30:	20000220 	.word	0x20000220

08000d34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_IRQHandler>

08000d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f961 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f80e 	bl	8000d68 <HAL_InitTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e001      	b.n	8000d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d58:	f7ff fec4 	bl	8000ae4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d023      	beq.n	8000dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_InitTick+0x70>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f96d 	bl	8001072 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10f      	bne.n	8000dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d809      	bhi.n	8000db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f937 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_InitTick+0x74>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e004      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e001      	b.n	8000dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000064 	.word	0x20000064
 8000dd8:	2000005c 	.word	0x2000005c
 8000ddc:	20000060 	.word	0x20000060

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000064 	.word	0x20000064
 8000e04:	2000020c 	.word	0x2000020c

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000020c 	.word	0x2000020c

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000064 	.word	0x20000064

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d008      	beq.n	80010b4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2204      	movs	r2, #4
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e022      	b.n	80010fa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020e 	bic.w	r2, r2, #14
 80010c2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d8:	f003 021c 	and.w	r2, r3, #28
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d005      	beq.n	800112a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e029      	b.n	800117e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 020e 	bic.w	r2, r2, #14
 8001138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 0201 	bic.w	r2, r2, #1
 8001148:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f003 021c 	and.w	r2, r3, #28
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f202 	lsl.w	r2, r1, r2
 800115c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	4798      	blx	r3
    }
  }
  return status;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e148      	b.n	800142a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 813a 	beq.w	8001424 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x40>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8094 	beq.w	8001424 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x2c0>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x2c0>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6613      	str	r3, [r2, #96]	; 0x60
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x2c0>)
 800130a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x2c4>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133e:	d00d      	beq.n	800135c <HAL_GPIO_Init+0x1d4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a43      	ldr	r2, [pc, #268]	; (8001450 <HAL_GPIO_Init+0x2c8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0x1d0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a42      	ldr	r2, [pc, #264]	; (8001454 <HAL_GPIO_Init+0x2cc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_GPIO_Init+0x1cc>
 8001350:	2302      	movs	r3, #2
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 8001354:	2307      	movs	r3, #7
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1d6>
 800135c:	2300      	movs	r3, #0
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800136e:	4937      	ldr	r1, [pc, #220]	; (800144c <HAL_GPIO_Init+0x2c4>)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a0:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f4:	4a18      	ldr	r2, [pc, #96]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f aeaf 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007000 	.word	0x40007000

0800147c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <HAL_PWREx_GetVoltageRange+0x18>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40007000 	.word	0x40007000

08001498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014a6:	d130      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b4:	d038      	beq.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014be:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2232      	movs	r2, #50	; 0x32
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9b      	lsrs	r3, r3, #18
 80014d8:	3301      	adds	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014dc:	e002      	b.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f0:	d102      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f2      	bne.n	80014de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001504:	d110      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e00f      	b.n	800152a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001516:	d007      	beq.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001526:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40007000 	.word	0x40007000
 800153c:	2000005c 	.word	0x2000005c
 8001540:	431bde83 	.word	0x431bde83

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	f000 bc02 	b.w	8001d5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001558:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001562:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80e4 	beq.w	8001742 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_RCC_OscConfig+0x4c>
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b0c      	cmp	r3, #12
 8001584:	f040 808b 	bne.w	800169e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2b01      	cmp	r3, #1
 800158c:	f040 8087 	bne.w	800169e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001590:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_OscConfig+0x64>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e3d9      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1a      	ldr	r2, [r3, #32]
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d004      	beq.n	80015c2 <HAL_RCC_OscConfig+0x7e>
 80015b8:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c0:	e005      	b.n	80015ce <HAL_RCC_OscConfig+0x8a>
 80015c2:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80015c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d223      	bcs.n	800161a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fd8c 	bl	80020f4 <RCC_SetFlashLatencyFromMSIRange>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e3ba      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e6:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	496d      	ldr	r1, [pc, #436]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001604:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	4968      	ldr	r1, [pc, #416]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e025      	b.n	8001666 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161a:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a65      	ldr	r2, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4960      	ldr	r1, [pc, #384]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001638:	4b5e      	ldr	r3, [pc, #376]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	495b      	ldr	r1, [pc, #364]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd4c 	bl	80020f4 <RCC_SetFlashLatencyFromMSIRange>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e37a      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001666:	f000 fc81 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 800166a:	4602      	mov	r2, r0
 800166c:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	4950      	ldr	r1, [pc, #320]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001678:	5ccb      	ldrb	r3, [r1, r3]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <HAL_RCC_OscConfig+0x278>)
 8001684:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001686:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fb6c 	bl	8000d68 <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d052      	beq.n	8001740 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	e35e      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d032      	beq.n	800170c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a42      	ldr	r2, [pc, #264]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fba9 	bl	8000e08 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ba:	f7ff fba5 	bl	8000e08 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e347      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a35      	ldr	r2, [pc, #212]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4930      	ldr	r1, [pc, #192]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	492b      	ldr	r1, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
 800170a:	e01a      	b.n	8001742 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001718:	f7ff fb76 	bl	8000e08 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001720:	f7ff fb72 	bl	8000e08 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e314      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1dc>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d073      	beq.n	8001836 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b08      	cmp	r3, #8
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x21c>
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d10e      	bne.n	8001778 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d10b      	bne.n	8001778 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d063      	beq.n	8001834 <HAL_RCC_OscConfig+0x2f0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d15f      	bne.n	8001834 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e2f1      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x24c>
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e025      	b.n	80017dc <HAL_RCC_OscConfig+0x298>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001798:	d114      	bne.n	80017c4 <HAL_RCC_OscConfig+0x280>
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a02      	ldr	r2, [pc, #8]	; (80017b4 <HAL_RCC_OscConfig+0x270>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e013      	b.n	80017dc <HAL_RCC_OscConfig+0x298>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	08004b84 	.word	0x08004b84
 80017bc:	2000005c 	.word	0x2000005c
 80017c0:	20000060 	.word	0x20000060
 80017c4:	4ba0      	ldr	r3, [pc, #640]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a9f      	ldr	r2, [pc, #636]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b9d      	ldr	r3, [pc, #628]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a9c      	ldr	r2, [pc, #624]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb10 	bl	8000e08 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fb0c 	bl	8000e08 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e2ae      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x2a8>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fafc 	bl	8000e08 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff faf8 	bl	8000e08 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	; 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e29a      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x2d0>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d060      	beq.n	8001904 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x310>
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d119      	bne.n	8001882 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d116      	bne.n	8001882 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001854:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x328>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e277      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	4973      	ldr	r1, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001880:	e040      	b.n	8001904 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d023      	beq.n	80018d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188a:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fab7 	bl	8000e08 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fab3 	bl	8000e08 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e255      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b0:	4b65      	ldr	r3, [pc, #404]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	495f      	ldr	r1, [pc, #380]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
 80018d0:	e018      	b.n	8001904 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a5c      	ldr	r2, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80018d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fa93 	bl	8000e08 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa8f 	bl	8000e08 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e231      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d03c      	beq.n	800198a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01c      	beq.n	8001952 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001918:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff fa6e 	bl	8000e08 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fa6a 	bl	8000e08 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e20c      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ef      	beq.n	8001930 <HAL_RCC_OscConfig+0x3ec>
 8001950:	e01b      	b.n	800198a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001958:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7ff fa51 	bl	8000e08 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196a:	f7ff fa4d 	bl	8000e08 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e1ef      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ef      	bne.n	800196a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80a6 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10d      	bne.n	80019c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6593      	str	r3, [r2, #88]	; 0x58
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c0:	2301      	movs	r3, #1
 80019c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x508>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d118      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HAL_RCC_OscConfig+0x508>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_RCC_OscConfig+0x508>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fa14 	bl	8000e08 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e4:	f7ff fa10 	bl	8000e08 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1b2      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_RCC_OscConfig+0x508>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4d8>
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1a:	e029      	b.n	8001a70 <HAL_RCC_OscConfig+0x52c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d115      	bne.n	8001a50 <HAL_RCC_OscConfig+0x50c>
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a44:	e014      	b.n	8001a70 <HAL_RCC_OscConfig+0x52c>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	4b9a      	ldr	r3, [pc, #616]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	4a99      	ldr	r2, [pc, #612]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a60:	4b96      	ldr	r3, [pc, #600]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	4a95      	ldr	r2, [pc, #596]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d016      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f9c6 	bl	8000e08 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff f9c2 	bl	8000e08 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e162      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ed      	beq.n	8001a80 <HAL_RCC_OscConfig+0x53c>
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f9af 	bl	8000e08 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff f9ab 	bl	8000e08 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e14b      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac4:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ed      	bne.n	8001aae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ad2:	7ffb      	ldrb	r3, [r7, #31]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad8:	4b78      	ldr	r3, [pc, #480]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0320 	and.w	r3, r3, #32
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d03c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001af8:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001afe:	4a6f      	ldr	r2, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f97e 	bl	8000e08 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b10:	f7ff f97a 	bl	8000e08 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e11c      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b22:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ef      	beq.n	8001b10 <HAL_RCC_OscConfig+0x5cc>
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b32:	4b62      	ldr	r3, [pc, #392]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b38:	4a60      	ldr	r2, [pc, #384]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001b3a:	f023 0301 	bic.w	r3, r3, #1
 8001b3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff f961 	bl	8000e08 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4a:	f7ff f95d 	bl	8000e08 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0ff      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b5c:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1ef      	bne.n	8001b4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80f3 	beq.w	8001d5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	f040 80c9 	bne.w	8001d10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b7e:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0203 	and.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d12c      	bne.n	8001bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d123      	bne.n	8001bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d11b      	bne.n	8001bec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d113      	bne.n	8001bec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d06b      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d062      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0ac      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c0e:	f7ff f8fb 	bl	8000e08 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff f8f7 	bl	8000e08 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e099      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f0      	bne.n	8001c16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x77c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c4e:	0212      	lsls	r2, r2, #8
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c56:	0852      	lsrs	r2, r2, #1
 8001c58:	3a01      	subs	r2, #1
 8001c5a:	0552      	lsls	r2, r2, #21
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c62:	0852      	lsrs	r2, r2, #1
 8001c64:	3a01      	subs	r2, #1
 8001c66:	0652      	lsls	r2, r2, #25
 8001c68:	4311      	orrs	r1, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c6e:	06d2      	lsls	r2, r2, #27
 8001c70:	430a      	orrs	r2, r1
 8001c72:	4912      	ldr	r1, [pc, #72]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c90:	f7ff f8ba 	bl	8000e08 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff f8b6 	bl	8000e08 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e058      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_RCC_OscConfig+0x778>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb6:	e050      	b.n	8001d5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e04f      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d144      	bne.n	8001d5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce8:	f7ff f88e 	bl	8000e08 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f88a 	bl	8000e08 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e02c      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x7ac>
 8001d0e:	e024      	b.n	8001d5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d01f      	beq.n	8001d56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff f871 	bl	8000e08 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f86d 	bl	8000e08 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e00f      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	4905      	ldr	r1, [pc, #20]	; (8001d64 <HAL_RCC_OscConfig+0x820>)
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x824>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
 8001d54:	e001      	b.n	8001d5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	feeefffc 	.word	0xfeeefffc

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0e7      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b72      	ldr	r3, [pc, #456]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4970      	ldr	r1, [pc, #448]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b6e      	ldr	r3, [pc, #440]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0cf      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d908      	bls.n	8001dde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4960      	ldr	r1, [pc, #384]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d04c      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df2:	4b5a      	ldr	r3, [pc, #360]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0a6      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0a:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e09a      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e22:	4b4e      	ldr	r3, [pc, #312]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e08e      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e32:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e086      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f023 0203 	bic.w	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4943      	ldr	r1, [pc, #268]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e54:	f7fe ffd8 	bl	8000e08 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7fe ffd4 	bl	8000e08 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e06e      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 020c 	and.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1eb      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d208      	bcs.n	8001eb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	492b      	ldr	r1, [pc, #172]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d210      	bcs.n	8001ee2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 0207 	bic.w	r2, r3, #7
 8001ec8:	4923      	ldr	r1, [pc, #140]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e036      	b.n	8001f50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	4918      	ldr	r1, [pc, #96]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d009      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4910      	ldr	r1, [pc, #64]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f20:	f000 f824 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	490b      	ldr	r1, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x1f4>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1fc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe ff0f 	bl	8000d68 <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08004b84 	.word	0x08004b84
 8001f64:	2000005c 	.word	0x2000005c
 8001f68:	20000060 	.word	0x20000060

08001f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d121      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d11e      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa0:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e005      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fc8:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	e004      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d134      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0xa6>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d003      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0xac>
 8002010:	e005      	b.n	800201e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_RCC_GetSysClockFreq+0x110>)
 8002014:	617b      	str	r3, [r7, #20]
      break;
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_GetSysClockFreq+0x114>)
 800201a:	617b      	str	r3, [r7, #20]
      break;
 800201c:	e002      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	617b      	str	r3, [r7, #20]
      break;
 8002022:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_GetSysClockFreq+0x108>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	0e5b      	lsrs	r3, r3, #25
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	3301      	adds	r3, #1
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002064:	69bb      	ldr	r3, [r7, #24]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	08004b9c 	.word	0x08004b9c
 800207c:	00f42400 	.word	0x00f42400
 8002080:	007a1200 	.word	0x007a1200

08002084 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_RCC_GetHCLKFreq+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2000005c 	.word	0x2000005c

0800209c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a0:	f7ff fff0 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4904      	ldr	r1, [pc, #16]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08004b94 	.word	0x08004b94

080020c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020cc:	f7ff ffda 	bl	8002084 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0adb      	lsrs	r3, r3, #11
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4904      	ldr	r1, [pc, #16]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08004b94 	.word	0x08004b94

080020f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800210c:	f7ff f9b6 	bl	800147c <HAL_PWREx_GetVoltageRange>
 8002110:	6178      	str	r0, [r7, #20]
 8002112:	e014      	b.n	800213e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	4a24      	ldr	r2, [pc, #144]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211e:	6593      	str	r3, [r2, #88]	; 0x58
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800212c:	f7ff f9a6 	bl	800147c <HAL_PWREx_GetVoltageRange>
 8002130:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002144:	d10b      	bne.n	800215e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d919      	bls.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2ba0      	cmp	r3, #160	; 0xa0
 8002150:	d902      	bls.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002152:	2302      	movs	r3, #2
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	e013      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002158:	2301      	movs	r3, #1
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e010      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b80      	cmp	r3, #128	; 0x80
 8002162:	d902      	bls.n	800216a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002164:	2303      	movs	r3, #3
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e00a      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d102      	bne.n	8002176 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002170:	2302      	movs	r3, #2
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	e004      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b70      	cmp	r3, #112	; 0x70
 800217a:	d101      	bne.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 0207 	bic.w	r2, r3, #7
 8002188:	4909      	ldr	r1, [pc, #36]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021bc:	2300      	movs	r3, #0
 80021be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c0:	2300      	movs	r3, #0
 80021c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d031      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021d8:	d01a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021de:	d814      	bhi.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021e8:	d10f      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021ea:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a5c      	ldr	r2, [pc, #368]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f6:	e00c      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3304      	adds	r3, #4
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f9de 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002208:	e003      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	74fb      	strb	r3, [r7, #19]
      break;
 800220e:	e000      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002218:	4b51      	ldr	r3, [pc, #324]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	494e      	ldr	r1, [pc, #312]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800222e:	e001      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 809e 	beq.w	800237e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002256:	2300      	movs	r3, #0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	4b40      	ldr	r3, [pc, #256]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	4a3f      	ldr	r2, [pc, #252]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002266:	6593      	str	r3, [r2, #88]	; 0x58
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002274:	2301      	movs	r3, #1
 8002276:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002278:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a39      	ldr	r2, [pc, #228]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002284:	f7fe fdc0 	bl	8000e08 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800228a:	e009      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7fe fdbc 	bl	8000e08 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d902      	bls.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	74fb      	strb	r3, [r7, #19]
        break;
 800229e:	e005      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022a0:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ef      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d15a      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01e      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d019      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022fa:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d016      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fd7c 	bl	8000e08 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002312:	e00b      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7fe fd78 	bl	8000e08 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d902      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	74fb      	strb	r3, [r7, #19]
            break;
 800232a:	e006      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ec      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002356:	e009      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
 800235c:	e006      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236c:	7c7b      	ldrb	r3, [r7, #17]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002372:	4b8a      	ldr	r3, [pc, #552]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	4a89      	ldr	r2, [pc, #548]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4980      	ldr	r1, [pc, #512]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ac:	4b7b      	ldr	r3, [pc, #492]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 020c 	bic.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	4978      	ldr	r1, [pc, #480]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	496f      	ldr	r1, [pc, #444]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fe:	4967      	ldr	r1, [pc, #412]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002412:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	495e      	ldr	r1, [pc, #376]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	4956      	ldr	r1, [pc, #344]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	494d      	ldr	r1, [pc, #308]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d028      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002478:	4b48      	ldr	r3, [pc, #288]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4945      	ldr	r1, [pc, #276]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002496:	d106      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002498:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a3f      	ldr	r2, [pc, #252]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a2:	60d3      	str	r3, [r2, #12]
 80024a4:	e011      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ae:	d10c      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f882 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d028      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024d6:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	492d      	ldr	r1, [pc, #180]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f4:	d106      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4a28      	ldr	r2, [pc, #160]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002500:	60d3      	str	r3, [r2, #12]
 8002502:	e011      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800250c:	d10c      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f853 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251e:	7cfb      	ldrb	r3, [r7, #19]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01c      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	4916      	ldr	r1, [pc, #88]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002552:	d10c      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	2102      	movs	r1, #2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f830 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002590:	7cbb      	ldrb	r3, [r7, #18]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6013      	str	r3, [r2, #0]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ce:	4b74      	ldr	r3, [pc, #464]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d018      	beq.n	800260c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025da:	4b71      	ldr	r3, [pc, #452]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d10d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
       ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025f2:	4b6b      	ldr	r3, [pc, #428]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
       ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d047      	beq.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e044      	b.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d018      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0x86>
 8002614:	2b03      	cmp	r3, #3
 8002616:	d825      	bhi.n	8002664 <RCCEx_PLLSAI1_Config+0xa4>
 8002618:	2b01      	cmp	r3, #1
 800261a:	d002      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x62>
 800261c:	2b02      	cmp	r3, #2
 800261e:	d009      	beq.n	8002634 <RCCEx_PLLSAI1_Config+0x74>
 8002620:	e020      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002622:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11d      	bne.n	800266a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002632:	e01a      	b.n	800266a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002634:	4b5a      	ldr	r3, [pc, #360]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002644:	e013      	b.n	800266e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002646:	4b56      	ldr	r3, [pc, #344]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002652:	4b53      	ldr	r3, [pc, #332]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002662:	e006      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e004      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002672:	bf00      	nop
    }

    if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800267a:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	430b      	orrs	r3, r1
 8002690:	4943      	ldr	r1, [pc, #268]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d17c      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800269c:	4b40      	ldr	r3, [pc, #256]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3f      	ldr	r2, [pc, #252]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a8:	f7fe fbae 	bl	8000e08 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ae:	e009      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b0:	f7fe fbaa 	bl	8000e08 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	73fb      	strb	r3, [r7, #15]
        break;
 80026c2:	e005      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ef      	bne.n	80026b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d15f      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d110      	bne.n	80026fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026dc:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80026e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	0211      	lsls	r1, r2, #8
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68d2      	ldr	r2, [r2, #12]
 80026f2:	06d2      	lsls	r2, r2, #27
 80026f4:	430a      	orrs	r2, r1
 80026f6:	492a      	ldr	r1, [pc, #168]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	610b      	str	r3, [r1, #16]
 80026fc:	e027      	b.n	800274e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d112      	bne.n	800272a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800270c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6892      	ldr	r2, [r2, #8]
 8002714:	0211      	lsls	r1, r2, #8
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6912      	ldr	r2, [r2, #16]
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	0552      	lsls	r2, r2, #21
 8002720:	430a      	orrs	r2, r1
 8002722:	491f      	ldr	r1, [pc, #124]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	610b      	str	r3, [r1, #16]
 8002728:	e011      	b.n	800274e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002732:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6892      	ldr	r2, [r2, #8]
 800273a:	0211      	lsls	r1, r2, #8
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6952      	ldr	r2, [r2, #20]
 8002740:	0852      	lsrs	r2, r2, #1
 8002742:	3a01      	subs	r2, #1
 8002744:	0652      	lsls	r2, r2, #25
 8002746:	430a      	orrs	r2, r1
 8002748:	4915      	ldr	r1, [pc, #84]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002758:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7fe fb55 	bl	8000e08 <HAL_GetTick>
 800275e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002760:	e009      	b.n	8002776 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002762:	f7fe fb51 	bl	8000e08 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d902      	bls.n	8002776 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	73fb      	strb	r3, [r7, #15]
          break;
 8002774:	e005      	b.n	8002782 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ef      	beq.n	8002762 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e040      	b.n	8002838 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe f9b0 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fc90 	bl	8003108 <UART_SetConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e022      	b.n	8002838 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 feb0 	bl	8003560 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800280e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800281e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 ff37 	bl	80036a4 <UART_CheckIdleState>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002854:	2b20      	cmp	r3, #32
 8002856:	f040 8082 	bne.w	800295e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_UART_Transmit+0x26>
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07a      	b.n	8002960 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_UART_Transmit+0x38>
 8002874:	2302      	movs	r3, #2
 8002876:	e073      	b.n	8002960 <HAL_UART_Transmit+0x120>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2221      	movs	r2, #33	; 0x21
 800288c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800288e:	f7fe fabb 	bl	8000e08 <HAL_GetTick>
 8002892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	88fa      	ldrh	r2, [r7, #6]
 80028a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ac:	d108      	bne.n	80028c0 <HAL_UART_Transmit+0x80>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d104      	bne.n	80028c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	e003      	b.n	80028c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80028d0:	e02d      	b.n	800292e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2200      	movs	r2, #0
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 ff2a 	bl	8003736 <UART_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e039      	b.n	8002960 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	881a      	ldrh	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028fe:	b292      	uxth	r2, r2
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	3302      	adds	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e008      	b.n	800291c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b292      	uxth	r2, r2
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1cb      	bne.n	80028d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	2140      	movs	r1, #64	; 0x40
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fef6 	bl	8003736 <UART_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e005      	b.n	8002960 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002968:	b480      	push	{r7}
 800296a:	b08b      	sub	sp, #44	; 0x2c
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297a:	2b20      	cmp	r3, #32
 800297c:	d156      	bne.n	8002a2c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_UART_Transmit_IT+0x22>
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e04f      	b.n	8002a2e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_UART_Transmit_IT+0x34>
 8002998:	2302      	movs	r3, #2
 800299a:	e048      	b.n	8002a2e <HAL_UART_Transmit_IT+0xc6>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88fa      	ldrh	r2, [r7, #6]
 80029ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2221      	movs	r2, #33	; 0x21
 80029cc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d107      	bne.n	80029e8 <HAL_UART_Transmit_IT+0x80>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <HAL_UART_Transmit_IT+0xd4>)
 80029e4:	669a      	str	r2, [r3, #104]	; 0x68
 80029e6:	e002      	b.n	80029ee <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_UART_Transmit_IT+0xd8>)
 80029ec:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	e853 3f00 	ldrex	r3, [r3]
 8002a02:	613b      	str	r3, [r7, #16]
   return(result);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	623b      	str	r3, [r7, #32]
 8002a16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	69f9      	ldr	r1, [r7, #28]
 8002a1a:	6a3a      	ldr	r2, [r7, #32]
 8002a1c:	e841 2300 	strex	r3, r2, [r1]
 8002a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e6      	bne.n	80029f6 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	372c      	adds	r7, #44	; 0x2c
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	08003bff 	.word	0x08003bff
 8002a40:	08003b47 	.word	0x08003b47

08002a44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d142      	bne.n	8002ae0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_UART_Receive_IT+0x22>
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e03b      	b.n	8002ae2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Receive_IT+0x34>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e034      	b.n	8002ae2 <HAL_UART_Receive_IT+0x9e>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_UART_Receive_IT+0xa8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d01f      	beq.n	8002ad0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	69f9      	ldr	r1, [r7, #28]
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e6      	bne.n	8002a9e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fef2 	bl	80038c0 <UART_Start_Receive_IT>
 8002adc:	4603      	mov	r3, r0
 8002ade:	e000      	b.n	8002ae2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40008000 	.word	0x40008000

08002af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0ba      	sub	sp, #232	; 0xe8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b1e:	4013      	ands	r3, r2
 8002b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d115      	bne.n	8002b58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00f      	beq.n	8002b58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 82a6 	beq.w	800309a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	4798      	blx	r3
      }
      return;
 8002b56:	e2a0      	b.n	800309a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002b58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8117 	beq.w	8002d90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b72:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <HAL_UART_IRQHandler+0x298>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 810a 	beq.w	8002d90 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d011      	beq.n	8002bac <HAL_UART_IRQHandler+0xbc>
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d011      	beq.n	8002bdc <HAL_UART_IRQHandler+0xec>
 8002bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d011      	beq.n	8002c0c <HAL_UART_IRQHandler+0x11c>
 8002be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c02:	f043 0202 	orr.w	r2, r3, #2
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2208      	movs	r2, #8
 8002c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3e:	f043 0208 	orr.w	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <HAL_UART_IRQHandler+0x18a>
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 820c 	beq.w	800309e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04f      	beq.n	8002d72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 febe 	bl	8003a54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d141      	bne.n	8002d6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3308      	adds	r3, #8
 8002cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d22:	e841 2300 	strex	r3, r2, [r1]
 8002d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1d9      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d013      	beq.n	8002d62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_UART_IRQHandler+0x29c>)
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f9dd 	bl	8001106 <HAL_DMA_Abort_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d017      	beq.n	8002d82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	e00f      	b.n	8002d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f9ba 	bl	80030dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d68:	e00b      	b.n	8002d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f9b6 	bl	80030dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d70:	e007      	b.n	8002d82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9b2 	bl	80030dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002d80:	e18d      	b.n	800309e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	bf00      	nop
    return;
 8002d84:	e18b      	b.n	800309e <HAL_UART_IRQHandler+0x5ae>
 8002d86:	bf00      	nop
 8002d88:	04000120 	.word	0x04000120
 8002d8c:	08003b1b 	.word	0x08003b1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f040 8146 	bne.w	8003026 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 813f 	beq.w	8003026 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8138 	beq.w	8003026 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2210      	movs	r2, #16
 8002dbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	f040 80b4 	bne.w	8002f36 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 815f 	beq.w	80030a2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f080 8157 	bcs.w	80030a2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 8085 	bne.w	8002f1a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1da      	bne.n	8002e10 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3308      	adds	r3, #8
 8002e60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3308      	adds	r3, #8
 8002e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e1      	bne.n	8002e5a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ec0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e3      	bne.n	8002e96 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eea:	f023 0310 	bic.w	r3, r3, #16
 8002eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002efc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002efe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e4      	bne.n	8002eda <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe f8b8 	bl	800108a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8de 	bl	80030f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f34:	e0b5      	b.n	80030a2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80a7 	beq.w	80030a6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80a2 	beq.w	80030a6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44
 8002f86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e4      	bne.n	8002f62 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3308      	adds	r3, #8
 8002fb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fbc:	633a      	str	r2, [r7, #48]	; 0x30
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc4:	e841 2300 	strex	r3, r2, [r1]
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e3      	bne.n	8002f98 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	617b      	str	r3, [r7, #20]
   return(result);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e4      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f866 	bl	80030f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003024:	e03f      	b.n	80030a6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00e      	beq.n	8003050 <HAL_UART_IRQHandler+0x560>
 8003032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003046:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 ffc2 	bl	8003fd2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800304e:	e02d      	b.n	80030ac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800305c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
    }
    return;
 8003078:	e017      	b.n	80030aa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800307a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d012      	beq.n	80030ac <HAL_UART_IRQHandler+0x5bc>
 8003086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fe13 	bl	8003cbe <UART_EndTransmit_IT>
    return;
 8003098:	e008      	b.n	80030ac <HAL_UART_IRQHandler+0x5bc>
      return;
 800309a:	bf00      	nop
 800309c:	e006      	b.n	80030ac <HAL_UART_IRQHandler+0x5bc>
    return;
 800309e:	bf00      	nop
 80030a0:	e004      	b.n	80030ac <HAL_UART_IRQHandler+0x5bc>
      return;
 80030a2:	bf00      	nop
 80030a4:	e002      	b.n	80030ac <HAL_UART_IRQHandler+0x5bc>
      return;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <HAL_UART_IRQHandler+0x5bc>
    return;
 80030aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80030ac:	37e8      	adds	r7, #232	; 0xe8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b08a      	sub	sp, #40	; 0x28
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4bb4      	ldr	r3, [pc, #720]	; (8003408 <UART_SetConfig+0x300>)
 8003138:	4013      	ands	r3, r2
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003140:	430b      	orrs	r3, r1
 8003142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4aa9      	ldr	r2, [pc, #676]	; (800340c <UART_SetConfig+0x304>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	4313      	orrs	r3, r2
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4aa0      	ldr	r2, [pc, #640]	; (8003410 <UART_SetConfig+0x308>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d126      	bne.n	80031e0 <UART_SetConfig+0xd8>
 8003192:	4ba0      	ldr	r3, [pc, #640]	; (8003414 <UART_SetConfig+0x30c>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d81b      	bhi.n	80031d8 <UART_SetConfig+0xd0>
 80031a0:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0xa0>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031c9 	.word	0x080031c9
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031d1 	.word	0x080031d1
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031be:	e080      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80031c0:	2302      	movs	r3, #2
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c6:	e07c      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80031c8:	2304      	movs	r3, #4
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ce:	e078      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80031d0:	2308      	movs	r3, #8
 80031d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d6:	e074      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80031d8:	2310      	movs	r3, #16
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031de:	e070      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a8c      	ldr	r2, [pc, #560]	; (8003418 <UART_SetConfig+0x310>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d138      	bne.n	800325c <UART_SetConfig+0x154>
 80031ea:	4b8a      	ldr	r3, [pc, #552]	; (8003414 <UART_SetConfig+0x30c>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d82d      	bhi.n	8003254 <UART_SetConfig+0x14c>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0xf8>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003235 	.word	0x08003235
 8003204:	08003255 	.word	0x08003255
 8003208:	08003255 	.word	0x08003255
 800320c:	08003255 	.word	0x08003255
 8003210:	08003245 	.word	0x08003245
 8003214:	08003255 	.word	0x08003255
 8003218:	08003255 	.word	0x08003255
 800321c:	08003255 	.word	0x08003255
 8003220:	0800323d 	.word	0x0800323d
 8003224:	08003255 	.word	0x08003255
 8003228:	08003255 	.word	0x08003255
 800322c:	08003255 	.word	0x08003255
 8003230:	0800324d 	.word	0x0800324d
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e042      	b.n	80032c2 <UART_SetConfig+0x1ba>
 800323c:	2302      	movs	r3, #2
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e03e      	b.n	80032c2 <UART_SetConfig+0x1ba>
 8003244:	2304      	movs	r3, #4
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e03a      	b.n	80032c2 <UART_SetConfig+0x1ba>
 800324c:	2308      	movs	r3, #8
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003252:	e036      	b.n	80032c2 <UART_SetConfig+0x1ba>
 8003254:	2310      	movs	r3, #16
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325a:	e032      	b.n	80032c2 <UART_SetConfig+0x1ba>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a6a      	ldr	r2, [pc, #424]	; (800340c <UART_SetConfig+0x304>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d12a      	bne.n	80032bc <UART_SetConfig+0x1b4>
 8003266:	4b6b      	ldr	r3, [pc, #428]	; (8003414 <UART_SetConfig+0x30c>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003270:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003274:	d01a      	beq.n	80032ac <UART_SetConfig+0x1a4>
 8003276:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800327a:	d81b      	bhi.n	80032b4 <UART_SetConfig+0x1ac>
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003280:	d00c      	beq.n	800329c <UART_SetConfig+0x194>
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d815      	bhi.n	80032b4 <UART_SetConfig+0x1ac>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <UART_SetConfig+0x18c>
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003290:	d008      	beq.n	80032a4 <UART_SetConfig+0x19c>
 8003292:	e00f      	b.n	80032b4 <UART_SetConfig+0x1ac>
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e012      	b.n	80032c2 <UART_SetConfig+0x1ba>
 800329c:	2302      	movs	r3, #2
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e00e      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80032a4:	2304      	movs	r3, #4
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e00a      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80032ac:	2308      	movs	r3, #8
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b2:	e006      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80032b4:	2310      	movs	r3, #16
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e002      	b.n	80032c2 <UART_SetConfig+0x1ba>
 80032bc:	2310      	movs	r3, #16
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a51      	ldr	r2, [pc, #324]	; (800340c <UART_SetConfig+0x304>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d17a      	bne.n	80033c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d824      	bhi.n	800331e <UART_SetConfig+0x216>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <UART_SetConfig+0x1d4>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003301 	.word	0x08003301
 80032e0:	0800331f 	.word	0x0800331f
 80032e4:	08003309 	.word	0x08003309
 80032e8:	0800331f 	.word	0x0800331f
 80032ec:	0800330f 	.word	0x0800330f
 80032f0:	0800331f 	.word	0x0800331f
 80032f4:	0800331f 	.word	0x0800331f
 80032f8:	0800331f 	.word	0x0800331f
 80032fc:	08003317 	.word	0x08003317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7fe fecc 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003304:	61f8      	str	r0, [r7, #28]
        break;
 8003306:	e010      	b.n	800332a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003308:	4b44      	ldr	r3, [pc, #272]	; (800341c <UART_SetConfig+0x314>)
 800330a:	61fb      	str	r3, [r7, #28]
        break;
 800330c:	e00d      	b.n	800332a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330e:	f7fe fe2d 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003312:	61f8      	str	r0, [r7, #28]
        break;
 8003314:	e009      	b.n	800332a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	61fb      	str	r3, [r7, #28]
        break;
 800331c:	e005      	b.n	800332a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8107 	beq.w	8003540 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	429a      	cmp	r2, r3
 8003340:	d305      	bcc.n	800334e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	429a      	cmp	r2, r3
 800334c:	d903      	bls.n	8003356 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003354:	e0f4      	b.n	8003540 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2200      	movs	r2, #0
 800335a:	461c      	mov	r4, r3
 800335c:	4615      	mov	r5, r2
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	022b      	lsls	r3, r5, #8
 8003368:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800336c:	0222      	lsls	r2, r4, #8
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	6849      	ldr	r1, [r1, #4]
 8003372:	0849      	lsrs	r1, r1, #1
 8003374:	2000      	movs	r0, #0
 8003376:	4688      	mov	r8, r1
 8003378:	4681      	mov	r9, r0
 800337a:	eb12 0a08 	adds.w	sl, r2, r8
 800337e:	eb43 0b09 	adc.w	fp, r3, r9
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003390:	4650      	mov	r0, sl
 8003392:	4659      	mov	r1, fp
 8003394:	f7fc ff74 	bl	8000280 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a6:	d308      	bcc.n	80033ba <UART_SetConfig+0x2b2>
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ae:	d204      	bcs.n	80033ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	e0c2      	b.n	8003540 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033c0:	e0be      	b.n	8003540 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ca:	d16a      	bne.n	80034a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80033cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d834      	bhi.n	800343e <UART_SetConfig+0x336>
 80033d4:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <UART_SetConfig+0x2d4>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	08003401 	.word	0x08003401
 80033e0:	08003421 	.word	0x08003421
 80033e4:	08003429 	.word	0x08003429
 80033e8:	0800343f 	.word	0x0800343f
 80033ec:	0800342f 	.word	0x0800342f
 80033f0:	0800343f 	.word	0x0800343f
 80033f4:	0800343f 	.word	0x0800343f
 80033f8:	0800343f 	.word	0x0800343f
 80033fc:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003400:	f7fe fe4c 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 8003404:	61f8      	str	r0, [r7, #28]
        break;
 8003406:	e020      	b.n	800344a <UART_SetConfig+0x342>
 8003408:	efff69f3 	.word	0xefff69f3
 800340c:	40008000 	.word	0x40008000
 8003410:	40013800 	.word	0x40013800
 8003414:	40021000 	.word	0x40021000
 8003418:	40004400 	.word	0x40004400
 800341c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fe52 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e010      	b.n	800344a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b4c      	ldr	r3, [pc, #304]	; (800355c <UART_SetConfig+0x454>)
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e00d      	b.n	800344a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fd9d 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 8003432:	61f8      	str	r0, [r7, #28]
        break;
 8003434:	e009      	b.n	800344a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	61fb      	str	r3, [r7, #28]
        break;
 800343c:	e005      	b.n	800344a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d077      	beq.n	8003540 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005a      	lsls	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	441a      	add	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d916      	bls.n	800349a <UART_SetConfig+0x392>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d212      	bcs.n	800349a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	b29a      	uxth	r2, r3
 800348a:	8afb      	ldrh	r3, [r7, #22]
 800348c:	4313      	orrs	r3, r2
 800348e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	8afa      	ldrh	r2, [r7, #22]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e052      	b.n	8003540 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034a0:	e04e      	b.n	8003540 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d827      	bhi.n	80034fa <UART_SetConfig+0x3f2>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <UART_SetConfig+0x3a8>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fb 	.word	0x080034fb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
 80034d0:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7fe fde2 	bl	800209c <HAL_RCC_GetPCLK1Freq>
 80034d8:	61f8      	str	r0, [r7, #28]
        break;
 80034da:	e014      	b.n	8003506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7fe fdf4 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 80034e0:	61f8      	str	r0, [r7, #28]
        break;
 80034e2:	e010      	b.n	8003506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <UART_SetConfig+0x454>)
 80034e6:	61fb      	str	r3, [r7, #28]
        break;
 80034e8:	e00d      	b.n	8003506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7fe fd3f 	bl	8001f6c <HAL_RCC_GetSysClockFreq>
 80034ee:	61f8      	str	r0, [r7, #28]
        break;
 80034f0:	e009      	b.n	8003506 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	61fb      	str	r3, [r7, #28]
        break;
 80034f8:	e005      	b.n	8003506 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003504:	bf00      	nop
    }

    if (pclk != 0U)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d019      	beq.n	8003540 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085a      	lsrs	r2, r3, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	441a      	add	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d909      	bls.n	800353a <UART_SetConfig+0x432>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d205      	bcs.n	800353a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e002      	b.n	8003540 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800354c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003550:	4618      	mov	r0, r3
 8003552:	3728      	adds	r7, #40	; 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	00f42400 	.word	0x00f42400

08003560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01a      	beq.n	8003676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365e:	d10a      	bne.n	8003676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036b4:	f7fd fba8 	bl	8000e08 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d10e      	bne.n	80036e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f82d 	bl	8003736 <UART_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e023      	b.n	800372e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d10e      	bne.n	8003712 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f817 	bl	8003736 <UART_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e00d      	b.n	800372e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b09c      	sub	sp, #112	; 0x70
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003746:	e0a5      	b.n	8003894 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	f000 80a1 	beq.w	8003894 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fd fb59 	bl	8000e08 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <UART_WaitOnFlagUntilTimeout+0x32>
 8003762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003764:	2b00      	cmp	r3, #0
 8003766:	d13e      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800377c:	667b      	str	r3, [r7, #100]	; 0x64
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003788:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800378c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1e6      	bne.n	8003768 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3308      	adds	r3, #8
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	663b      	str	r3, [r7, #96]	; 0x60
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3308      	adds	r3, #8
 80037b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80037bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e5      	bne.n	800379a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e067      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d04f      	beq.n	8003894 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003802:	d147      	bne.n	8003894 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800380c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
 800382e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e6      	bne.n	800380e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3308      	adds	r3, #8
 8003846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	613b      	str	r3, [r7, #16]
   return(result);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	66bb      	str	r3, [r7, #104]	; 0x68
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3308      	adds	r3, #8
 800385e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003860:	623a      	str	r2, [r7, #32]
 8003862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	69f9      	ldr	r1, [r7, #28]
 8003866:	6a3a      	ldr	r2, [r7, #32]
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	61bb      	str	r3, [r7, #24]
   return(result);
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e5      	bne.n	8003840 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e010      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	f43f af4a 	beq.w	8003748 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3770      	adds	r7, #112	; 0x70
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b097      	sub	sp, #92	; 0x5c
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	88fa      	ldrh	r2, [r7, #6]
 80038d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f2:	d10e      	bne.n	8003912 <UART_Start_Receive_IT+0x52>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <UART_Start_Receive_IT+0x48>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003902:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003906:	e02d      	b.n	8003964 <UART_Start_Receive_IT+0xa4>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	22ff      	movs	r2, #255	; 0xff
 800390c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003910:	e028      	b.n	8003964 <UART_Start_Receive_IT+0xa4>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <UART_Start_Receive_IT+0x76>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <UART_Start_Receive_IT+0x6c>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800392a:	e01b      	b.n	8003964 <UART_Start_Receive_IT+0xa4>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	227f      	movs	r2, #127	; 0x7f
 8003930:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003934:	e016      	b.n	8003964 <UART_Start_Receive_IT+0xa4>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393e:	d10d      	bne.n	800395c <UART_Start_Receive_IT+0x9c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <UART_Start_Receive_IT+0x92>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	227f      	movs	r2, #127	; 0x7f
 800394c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003950:	e008      	b.n	8003964 <UART_Start_Receive_IT+0xa4>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	223f      	movs	r2, #63	; 0x3f
 8003956:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800395a:	e003      	b.n	8003964 <UART_Start_Receive_IT+0xa4>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2222      	movs	r2, #34	; 0x22
 8003970:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3308      	adds	r3, #8
 8003978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	657b      	str	r3, [r7, #84]	; 0x54
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3308      	adds	r3, #8
 8003990:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003992:	64ba      	str	r2, [r7, #72]	; 0x48
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e5      	bne.n	8003972 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d107      	bne.n	80039c0 <UART_Start_Receive_IT+0x100>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d103      	bne.n	80039c0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <UART_Start_Receive_IT+0x18c>)
 80039bc:	665a      	str	r2, [r3, #100]	; 0x64
 80039be:	e002      	b.n	80039c6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <UART_Start_Receive_IT+0x190>)
 80039c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d019      	beq.n	8003a0a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	e853 3f00 	ldrex	r3, [r3]
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34
 80039f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e6      	bne.n	80039d6 <UART_Start_Receive_IT+0x116>
 8003a08:	e018      	b.n	8003a3c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	613b      	str	r3, [r7, #16]
   return(result);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f043 0320 	orr.w	r3, r3, #32
 8003a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	69f9      	ldr	r1, [r7, #28]
 8003a2e:	6a3a      	ldr	r2, [r7, #32]
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e6      	bne.n	8003a0a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	375c      	adds	r7, #92	; 0x5c
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	08003e73 	.word	0x08003e73
 8003a50:	08003d13 	.word	0x08003d13

08003a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b095      	sub	sp, #84	; 0x54
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e6      	bne.n	8003a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e5      	bne.n	8003a8e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d118      	bne.n	8003afc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f023 0310 	bic.w	r3, r3, #16
 8003ade:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6979      	ldr	r1, [r7, #20]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	613b      	str	r3, [r7, #16]
   return(result);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b0e:	bf00      	nop
 8003b10:	3754      	adds	r7, #84	; 0x54
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff facf 	bl	80030dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b08f      	sub	sp, #60	; 0x3c
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b52:	2b21      	cmp	r3, #33	; 0x21
 8003b54:	d14d      	bne.n	8003bf2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d132      	bne.n	8003bc8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b82:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e6      	bne.n	8003b62 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003bc6:	e014      	b.n	8003bf2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003bf2:	bf00      	nop
 8003bf4:	373c      	adds	r7, #60	; 0x3c
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b091      	sub	sp, #68	; 0x44
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	2b21      	cmp	r3, #33	; 0x21
 8003c0c:	d151      	bne.n	8003cb2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d132      	bne.n	8003c80 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	623b      	str	r3, [r7, #32]
   return(result);
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e6      	bne.n	8003c1a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	617b      	str	r3, [r7, #20]
   return(result);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e6      	bne.n	8003c4c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003c7e:	e018      	b.n	8003cb2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c92:	b292      	uxth	r2, r2
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003cb2:	bf00      	nop
 8003cb4:	3744      	adds	r7, #68	; 0x44
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b088      	sub	sp, #32
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6979      	ldr	r1, [r7, #20]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e6      	bne.n	8003cc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff f9d5 	bl	80030b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0a:	bf00      	nop
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b096      	sub	sp, #88	; 0x58
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d28:	2b22      	cmp	r3, #34	; 0x22
 8003d2a:	f040 8094 	bne.w	8003e56 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d3c:	b2d9      	uxtb	r1, r3
 8003d3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	400a      	ands	r2, r1
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d179      	bne.n	8003e6a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
 8003d96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	623b      	str	r3, [r7, #32]
   return(result);
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dc8:	633a      	str	r2, [r7, #48]	; 0x30
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d12e      	bne.n	8003e4e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0310 	bic.w	r3, r3, #16
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	617b      	str	r3, [r7, #20]
   return(result);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e6      	bne.n	8003df6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d103      	bne.n	8003e3e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff f952 	bl	80030f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e4c:	e00d      	b.n	8003e6a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff f93a 	bl	80030c8 <HAL_UART_RxCpltCallback>
}
 8003e54:	e009      	b.n	8003e6a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	8b1b      	ldrh	r3, [r3, #24]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0208 	orr.w	r2, r2, #8
 8003e66:	b292      	uxth	r2, r2
 8003e68:	831a      	strh	r2, [r3, #24]
}
 8003e6a:	bf00      	nop
 8003e6c:	3758      	adds	r7, #88	; 0x58
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b096      	sub	sp, #88	; 0x58
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e88:	2b22      	cmp	r3, #34	; 0x22
 8003e8a:	f040 8094 	bne.w	8003fb6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e94:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e9e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ea2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d179      	bne.n	8003fca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e6      	bne.n	8003ed6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d12e      	bne.n	8003fae <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 0310 	bic.w	r3, r3, #16
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6979      	ldr	r1, [r7, #20]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e6      	bne.n	8003f56 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d103      	bne.n	8003f9e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff f8a2 	bl	80030f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fac:	e00d      	b.n	8003fca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff f88a 	bl	80030c8 <HAL_UART_RxCpltCallback>
}
 8003fb4:	e009      	b.n	8003fca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	8b1b      	ldrh	r3, [r3, #24]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0208 	orr.w	r2, r2, #8
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	831a      	strh	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	3758      	adds	r7, #88	; 0x58
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <__errno>:
 8003fe8:	4b01      	ldr	r3, [pc, #4]	; (8003ff0 <__errno+0x8>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000068 	.word	0x20000068

08003ff4 <__libc_init_array>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	4d0d      	ldr	r5, [pc, #52]	; (800402c <__libc_init_array+0x38>)
 8003ff8:	4c0d      	ldr	r4, [pc, #52]	; (8004030 <__libc_init_array+0x3c>)
 8003ffa:	1b64      	subs	r4, r4, r5
 8003ffc:	10a4      	asrs	r4, r4, #2
 8003ffe:	2600      	movs	r6, #0
 8004000:	42a6      	cmp	r6, r4
 8004002:	d109      	bne.n	8004018 <__libc_init_array+0x24>
 8004004:	4d0b      	ldr	r5, [pc, #44]	; (8004034 <__libc_init_array+0x40>)
 8004006:	4c0c      	ldr	r4, [pc, #48]	; (8004038 <__libc_init_array+0x44>)
 8004008:	f000 fcda 	bl	80049c0 <_init>
 800400c:	1b64      	subs	r4, r4, r5
 800400e:	10a4      	asrs	r4, r4, #2
 8004010:	2600      	movs	r6, #0
 8004012:	42a6      	cmp	r6, r4
 8004014:	d105      	bne.n	8004022 <__libc_init_array+0x2e>
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	f855 3b04 	ldr.w	r3, [r5], #4
 800401c:	4798      	blx	r3
 800401e:	3601      	adds	r6, #1
 8004020:	e7ee      	b.n	8004000 <__libc_init_array+0xc>
 8004022:	f855 3b04 	ldr.w	r3, [r5], #4
 8004026:	4798      	blx	r3
 8004028:	3601      	adds	r6, #1
 800402a:	e7f2      	b.n	8004012 <__libc_init_array+0x1e>
 800402c:	08004d08 	.word	0x08004d08
 8004030:	08004d08 	.word	0x08004d08
 8004034:	08004d08 	.word	0x08004d08
 8004038:	08004d0c 	.word	0x08004d0c

0800403c <isalnum>:
 800403c:	4b02      	ldr	r3, [pc, #8]	; (8004048 <isalnum+0xc>)
 800403e:	4418      	add	r0, r3
 8004040:	7840      	ldrb	r0, [r0, #1]
 8004042:	f000 0007 	and.w	r0, r0, #7
 8004046:	4770      	bx	lr
 8004048:	08004bcc 	.word	0x08004bcc

0800404c <malloc>:
 800404c:	4b02      	ldr	r3, [pc, #8]	; (8004058 <malloc+0xc>)
 800404e:	4601      	mov	r1, r0
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	f000 b87f 	b.w	8004154 <_malloc_r>
 8004056:	bf00      	nop
 8004058:	20000068 	.word	0x20000068

0800405c <free>:
 800405c:	4b02      	ldr	r3, [pc, #8]	; (8004068 <free+0xc>)
 800405e:	4601      	mov	r1, r0
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	f000 b80b 	b.w	800407c <_free_r>
 8004066:	bf00      	nop
 8004068:	20000068 	.word	0x20000068

0800406c <memset>:
 800406c:	4402      	add	r2, r0
 800406e:	4603      	mov	r3, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <_free_r>:
 800407c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800407e:	2900      	cmp	r1, #0
 8004080:	d044      	beq.n	800410c <_free_r+0x90>
 8004082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004086:	9001      	str	r0, [sp, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f1a1 0404 	sub.w	r4, r1, #4
 800408e:	bfb8      	it	lt
 8004090:	18e4      	addlt	r4, r4, r3
 8004092:	f000 f937 	bl	8004304 <__malloc_lock>
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <_free_r+0x94>)
 8004098:	9801      	ldr	r0, [sp, #4]
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	b933      	cbnz	r3, 80040ac <_free_r+0x30>
 800409e:	6063      	str	r3, [r4, #4]
 80040a0:	6014      	str	r4, [r2, #0]
 80040a2:	b003      	add	sp, #12
 80040a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040a8:	f000 b932 	b.w	8004310 <__malloc_unlock>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d908      	bls.n	80040c2 <_free_r+0x46>
 80040b0:	6825      	ldr	r5, [r4, #0]
 80040b2:	1961      	adds	r1, r4, r5
 80040b4:	428b      	cmp	r3, r1
 80040b6:	bf01      	itttt	eq
 80040b8:	6819      	ldreq	r1, [r3, #0]
 80040ba:	685b      	ldreq	r3, [r3, #4]
 80040bc:	1949      	addeq	r1, r1, r5
 80040be:	6021      	streq	r1, [r4, #0]
 80040c0:	e7ed      	b.n	800409e <_free_r+0x22>
 80040c2:	461a      	mov	r2, r3
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b10b      	cbz	r3, 80040cc <_free_r+0x50>
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	d9fa      	bls.n	80040c2 <_free_r+0x46>
 80040cc:	6811      	ldr	r1, [r2, #0]
 80040ce:	1855      	adds	r5, r2, r1
 80040d0:	42a5      	cmp	r5, r4
 80040d2:	d10b      	bne.n	80040ec <_free_r+0x70>
 80040d4:	6824      	ldr	r4, [r4, #0]
 80040d6:	4421      	add	r1, r4
 80040d8:	1854      	adds	r4, r2, r1
 80040da:	42a3      	cmp	r3, r4
 80040dc:	6011      	str	r1, [r2, #0]
 80040de:	d1e0      	bne.n	80040a2 <_free_r+0x26>
 80040e0:	681c      	ldr	r4, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	6053      	str	r3, [r2, #4]
 80040e6:	4421      	add	r1, r4
 80040e8:	6011      	str	r1, [r2, #0]
 80040ea:	e7da      	b.n	80040a2 <_free_r+0x26>
 80040ec:	d902      	bls.n	80040f4 <_free_r+0x78>
 80040ee:	230c      	movs	r3, #12
 80040f0:	6003      	str	r3, [r0, #0]
 80040f2:	e7d6      	b.n	80040a2 <_free_r+0x26>
 80040f4:	6825      	ldr	r5, [r4, #0]
 80040f6:	1961      	adds	r1, r4, r5
 80040f8:	428b      	cmp	r3, r1
 80040fa:	bf04      	itt	eq
 80040fc:	6819      	ldreq	r1, [r3, #0]
 80040fe:	685b      	ldreq	r3, [r3, #4]
 8004100:	6063      	str	r3, [r4, #4]
 8004102:	bf04      	itt	eq
 8004104:	1949      	addeq	r1, r1, r5
 8004106:	6021      	streq	r1, [r4, #0]
 8004108:	6054      	str	r4, [r2, #4]
 800410a:	e7ca      	b.n	80040a2 <_free_r+0x26>
 800410c:	b003      	add	sp, #12
 800410e:	bd30      	pop	{r4, r5, pc}
 8004110:	20000210 	.word	0x20000210

08004114 <sbrk_aligned>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	4e0e      	ldr	r6, [pc, #56]	; (8004150 <sbrk_aligned+0x3c>)
 8004118:	460c      	mov	r4, r1
 800411a:	6831      	ldr	r1, [r6, #0]
 800411c:	4605      	mov	r5, r0
 800411e:	b911      	cbnz	r1, 8004126 <sbrk_aligned+0x12>
 8004120:	f000 f88c 	bl	800423c <_sbrk_r>
 8004124:	6030      	str	r0, [r6, #0]
 8004126:	4621      	mov	r1, r4
 8004128:	4628      	mov	r0, r5
 800412a:	f000 f887 	bl	800423c <_sbrk_r>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d00a      	beq.n	8004148 <sbrk_aligned+0x34>
 8004132:	1cc4      	adds	r4, r0, #3
 8004134:	f024 0403 	bic.w	r4, r4, #3
 8004138:	42a0      	cmp	r0, r4
 800413a:	d007      	beq.n	800414c <sbrk_aligned+0x38>
 800413c:	1a21      	subs	r1, r4, r0
 800413e:	4628      	mov	r0, r5
 8004140:	f000 f87c 	bl	800423c <_sbrk_r>
 8004144:	3001      	adds	r0, #1
 8004146:	d101      	bne.n	800414c <sbrk_aligned+0x38>
 8004148:	f04f 34ff 	mov.w	r4, #4294967295
 800414c:	4620      	mov	r0, r4
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	20000214 	.word	0x20000214

08004154 <_malloc_r>:
 8004154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004158:	1ccd      	adds	r5, r1, #3
 800415a:	f025 0503 	bic.w	r5, r5, #3
 800415e:	3508      	adds	r5, #8
 8004160:	2d0c      	cmp	r5, #12
 8004162:	bf38      	it	cc
 8004164:	250c      	movcc	r5, #12
 8004166:	2d00      	cmp	r5, #0
 8004168:	4607      	mov	r7, r0
 800416a:	db01      	blt.n	8004170 <_malloc_r+0x1c>
 800416c:	42a9      	cmp	r1, r5
 800416e:	d905      	bls.n	800417c <_malloc_r+0x28>
 8004170:	230c      	movs	r3, #12
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	2600      	movs	r6, #0
 8004176:	4630      	mov	r0, r6
 8004178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800417c:	4e2e      	ldr	r6, [pc, #184]	; (8004238 <_malloc_r+0xe4>)
 800417e:	f000 f8c1 	bl	8004304 <__malloc_lock>
 8004182:	6833      	ldr	r3, [r6, #0]
 8004184:	461c      	mov	r4, r3
 8004186:	bb34      	cbnz	r4, 80041d6 <_malloc_r+0x82>
 8004188:	4629      	mov	r1, r5
 800418a:	4638      	mov	r0, r7
 800418c:	f7ff ffc2 	bl	8004114 <sbrk_aligned>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	4604      	mov	r4, r0
 8004194:	d14d      	bne.n	8004232 <_malloc_r+0xde>
 8004196:	6834      	ldr	r4, [r6, #0]
 8004198:	4626      	mov	r6, r4
 800419a:	2e00      	cmp	r6, #0
 800419c:	d140      	bne.n	8004220 <_malloc_r+0xcc>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	4631      	mov	r1, r6
 80041a2:	4638      	mov	r0, r7
 80041a4:	eb04 0803 	add.w	r8, r4, r3
 80041a8:	f000 f848 	bl	800423c <_sbrk_r>
 80041ac:	4580      	cmp	r8, r0
 80041ae:	d13a      	bne.n	8004226 <_malloc_r+0xd2>
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	3503      	adds	r5, #3
 80041b4:	1a6d      	subs	r5, r5, r1
 80041b6:	f025 0503 	bic.w	r5, r5, #3
 80041ba:	3508      	adds	r5, #8
 80041bc:	2d0c      	cmp	r5, #12
 80041be:	bf38      	it	cc
 80041c0:	250c      	movcc	r5, #12
 80041c2:	4629      	mov	r1, r5
 80041c4:	4638      	mov	r0, r7
 80041c6:	f7ff ffa5 	bl	8004114 <sbrk_aligned>
 80041ca:	3001      	adds	r0, #1
 80041cc:	d02b      	beq.n	8004226 <_malloc_r+0xd2>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	442b      	add	r3, r5
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	e00e      	b.n	80041f4 <_malloc_r+0xa0>
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	1b52      	subs	r2, r2, r5
 80041da:	d41e      	bmi.n	800421a <_malloc_r+0xc6>
 80041dc:	2a0b      	cmp	r2, #11
 80041de:	d916      	bls.n	800420e <_malloc_r+0xba>
 80041e0:	1961      	adds	r1, r4, r5
 80041e2:	42a3      	cmp	r3, r4
 80041e4:	6025      	str	r5, [r4, #0]
 80041e6:	bf18      	it	ne
 80041e8:	6059      	strne	r1, [r3, #4]
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	bf08      	it	eq
 80041ee:	6031      	streq	r1, [r6, #0]
 80041f0:	5162      	str	r2, [r4, r5]
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	4638      	mov	r0, r7
 80041f6:	f104 060b 	add.w	r6, r4, #11
 80041fa:	f000 f889 	bl	8004310 <__malloc_unlock>
 80041fe:	f026 0607 	bic.w	r6, r6, #7
 8004202:	1d23      	adds	r3, r4, #4
 8004204:	1af2      	subs	r2, r6, r3
 8004206:	d0b6      	beq.n	8004176 <_malloc_r+0x22>
 8004208:	1b9b      	subs	r3, r3, r6
 800420a:	50a3      	str	r3, [r4, r2]
 800420c:	e7b3      	b.n	8004176 <_malloc_r+0x22>
 800420e:	6862      	ldr	r2, [r4, #4]
 8004210:	42a3      	cmp	r3, r4
 8004212:	bf0c      	ite	eq
 8004214:	6032      	streq	r2, [r6, #0]
 8004216:	605a      	strne	r2, [r3, #4]
 8004218:	e7ec      	b.n	80041f4 <_malloc_r+0xa0>
 800421a:	4623      	mov	r3, r4
 800421c:	6864      	ldr	r4, [r4, #4]
 800421e:	e7b2      	b.n	8004186 <_malloc_r+0x32>
 8004220:	4634      	mov	r4, r6
 8004222:	6876      	ldr	r6, [r6, #4]
 8004224:	e7b9      	b.n	800419a <_malloc_r+0x46>
 8004226:	230c      	movs	r3, #12
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	4638      	mov	r0, r7
 800422c:	f000 f870 	bl	8004310 <__malloc_unlock>
 8004230:	e7a1      	b.n	8004176 <_malloc_r+0x22>
 8004232:	6025      	str	r5, [r4, #0]
 8004234:	e7de      	b.n	80041f4 <_malloc_r+0xa0>
 8004236:	bf00      	nop
 8004238:	20000210 	.word	0x20000210

0800423c <_sbrk_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4d06      	ldr	r5, [pc, #24]	; (8004258 <_sbrk_r+0x1c>)
 8004240:	2300      	movs	r3, #0
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	f7fc fd04 	bl	8000c54 <_sbrk>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_sbrk_r+0x1a>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_sbrk_r+0x1a>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	20000218 	.word	0x20000218

0800425c <sniprintf>:
 800425c:	b40c      	push	{r2, r3}
 800425e:	b530      	push	{r4, r5, lr}
 8004260:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <sniprintf+0x64>)
 8004262:	1e0c      	subs	r4, r1, #0
 8004264:	681d      	ldr	r5, [r3, #0]
 8004266:	b09d      	sub	sp, #116	; 0x74
 8004268:	da08      	bge.n	800427c <sniprintf+0x20>
 800426a:	238b      	movs	r3, #139	; 0x8b
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	f04f 30ff 	mov.w	r0, #4294967295
 8004272:	b01d      	add	sp, #116	; 0x74
 8004274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004278:	b002      	add	sp, #8
 800427a:	4770      	bx	lr
 800427c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004280:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004284:	bf14      	ite	ne
 8004286:	f104 33ff 	addne.w	r3, r4, #4294967295
 800428a:	4623      	moveq	r3, r4
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	9307      	str	r3, [sp, #28]
 8004290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004294:	9002      	str	r0, [sp, #8]
 8004296:	9006      	str	r0, [sp, #24]
 8004298:	f8ad 3016 	strh.w	r3, [sp, #22]
 800429c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800429e:	ab21      	add	r3, sp, #132	; 0x84
 80042a0:	a902      	add	r1, sp, #8
 80042a2:	4628      	mov	r0, r5
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	f000 f895 	bl	80043d4 <_svfiprintf_r>
 80042aa:	1c43      	adds	r3, r0, #1
 80042ac:	bfbc      	itt	lt
 80042ae:	238b      	movlt	r3, #139	; 0x8b
 80042b0:	602b      	strlt	r3, [r5, #0]
 80042b2:	2c00      	cmp	r4, #0
 80042b4:	d0dd      	beq.n	8004272 <sniprintf+0x16>
 80042b6:	9b02      	ldr	r3, [sp, #8]
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e7d9      	b.n	8004272 <sniprintf+0x16>
 80042be:	bf00      	nop
 80042c0:	20000068 	.word	0x20000068

080042c4 <siprintf>:
 80042c4:	b40e      	push	{r1, r2, r3}
 80042c6:	b500      	push	{lr}
 80042c8:	b09c      	sub	sp, #112	; 0x70
 80042ca:	ab1d      	add	r3, sp, #116	; 0x74
 80042cc:	9002      	str	r0, [sp, #8]
 80042ce:	9006      	str	r0, [sp, #24]
 80042d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042d4:	4809      	ldr	r0, [pc, #36]	; (80042fc <siprintf+0x38>)
 80042d6:	9107      	str	r1, [sp, #28]
 80042d8:	9104      	str	r1, [sp, #16]
 80042da:	4909      	ldr	r1, [pc, #36]	; (8004300 <siprintf+0x3c>)
 80042dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042e0:	9105      	str	r1, [sp, #20]
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	a902      	add	r1, sp, #8
 80042e8:	f000 f874 	bl	80043d4 <_svfiprintf_r>
 80042ec:	9b02      	ldr	r3, [sp, #8]
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	b01c      	add	sp, #112	; 0x70
 80042f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042f8:	b003      	add	sp, #12
 80042fa:	4770      	bx	lr
 80042fc:	20000068 	.word	0x20000068
 8004300:	ffff0208 	.word	0xffff0208

08004304 <__malloc_lock>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__malloc_lock+0x8>)
 8004306:	f000 baf9 	b.w	80048fc <__retarget_lock_acquire_recursive>
 800430a:	bf00      	nop
 800430c:	2000021c 	.word	0x2000021c

08004310 <__malloc_unlock>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__malloc_unlock+0x8>)
 8004312:	f000 baf4 	b.w	80048fe <__retarget_lock_release_recursive>
 8004316:	bf00      	nop
 8004318:	2000021c 	.word	0x2000021c

0800431c <__ssputs_r>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	688e      	ldr	r6, [r1, #8]
 8004322:	429e      	cmp	r6, r3
 8004324:	4682      	mov	sl, r0
 8004326:	460c      	mov	r4, r1
 8004328:	4690      	mov	r8, r2
 800432a:	461f      	mov	r7, r3
 800432c:	d838      	bhi.n	80043a0 <__ssputs_r+0x84>
 800432e:	898a      	ldrh	r2, [r1, #12]
 8004330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004334:	d032      	beq.n	800439c <__ssputs_r+0x80>
 8004336:	6825      	ldr	r5, [r4, #0]
 8004338:	6909      	ldr	r1, [r1, #16]
 800433a:	eba5 0901 	sub.w	r9, r5, r1
 800433e:	6965      	ldr	r5, [r4, #20]
 8004340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004348:	3301      	adds	r3, #1
 800434a:	444b      	add	r3, r9
 800434c:	106d      	asrs	r5, r5, #1
 800434e:	429d      	cmp	r5, r3
 8004350:	bf38      	it	cc
 8004352:	461d      	movcc	r5, r3
 8004354:	0553      	lsls	r3, r2, #21
 8004356:	d531      	bpl.n	80043bc <__ssputs_r+0xa0>
 8004358:	4629      	mov	r1, r5
 800435a:	f7ff fefb 	bl	8004154 <_malloc_r>
 800435e:	4606      	mov	r6, r0
 8004360:	b950      	cbnz	r0, 8004378 <__ssputs_r+0x5c>
 8004362:	230c      	movs	r3, #12
 8004364:	f8ca 3000 	str.w	r3, [sl]
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800436e:	81a3      	strh	r3, [r4, #12]
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	6921      	ldr	r1, [r4, #16]
 800437a:	464a      	mov	r2, r9
 800437c:	f000 fac0 	bl	8004900 <memcpy>
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	6126      	str	r6, [r4, #16]
 800438e:	6165      	str	r5, [r4, #20]
 8004390:	444e      	add	r6, r9
 8004392:	eba5 0509 	sub.w	r5, r5, r9
 8004396:	6026      	str	r6, [r4, #0]
 8004398:	60a5      	str	r5, [r4, #8]
 800439a:	463e      	mov	r6, r7
 800439c:	42be      	cmp	r6, r7
 800439e:	d900      	bls.n	80043a2 <__ssputs_r+0x86>
 80043a0:	463e      	mov	r6, r7
 80043a2:	6820      	ldr	r0, [r4, #0]
 80043a4:	4632      	mov	r2, r6
 80043a6:	4641      	mov	r1, r8
 80043a8:	f000 fab8 	bl	800491c <memmove>
 80043ac:	68a3      	ldr	r3, [r4, #8]
 80043ae:	1b9b      	subs	r3, r3, r6
 80043b0:	60a3      	str	r3, [r4, #8]
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	4433      	add	r3, r6
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	2000      	movs	r0, #0
 80043ba:	e7db      	b.n	8004374 <__ssputs_r+0x58>
 80043bc:	462a      	mov	r2, r5
 80043be:	f000 fac7 	bl	8004950 <_realloc_r>
 80043c2:	4606      	mov	r6, r0
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d1e1      	bne.n	800438c <__ssputs_r+0x70>
 80043c8:	6921      	ldr	r1, [r4, #16]
 80043ca:	4650      	mov	r0, sl
 80043cc:	f7ff fe56 	bl	800407c <_free_r>
 80043d0:	e7c7      	b.n	8004362 <__ssputs_r+0x46>
	...

080043d4 <_svfiprintf_r>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	4698      	mov	r8, r3
 80043da:	898b      	ldrh	r3, [r1, #12]
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	b09d      	sub	sp, #116	; 0x74
 80043e0:	4607      	mov	r7, r0
 80043e2:	460d      	mov	r5, r1
 80043e4:	4614      	mov	r4, r2
 80043e6:	d50e      	bpl.n	8004406 <_svfiprintf_r+0x32>
 80043e8:	690b      	ldr	r3, [r1, #16]
 80043ea:	b963      	cbnz	r3, 8004406 <_svfiprintf_r+0x32>
 80043ec:	2140      	movs	r1, #64	; 0x40
 80043ee:	f7ff feb1 	bl	8004154 <_malloc_r>
 80043f2:	6028      	str	r0, [r5, #0]
 80043f4:	6128      	str	r0, [r5, #16]
 80043f6:	b920      	cbnz	r0, 8004402 <_svfiprintf_r+0x2e>
 80043f8:	230c      	movs	r3, #12
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	e0d1      	b.n	80045a6 <_svfiprintf_r+0x1d2>
 8004402:	2340      	movs	r3, #64	; 0x40
 8004404:	616b      	str	r3, [r5, #20]
 8004406:	2300      	movs	r3, #0
 8004408:	9309      	str	r3, [sp, #36]	; 0x24
 800440a:	2320      	movs	r3, #32
 800440c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004410:	f8cd 800c 	str.w	r8, [sp, #12]
 8004414:	2330      	movs	r3, #48	; 0x30
 8004416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80045c0 <_svfiprintf_r+0x1ec>
 800441a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800441e:	f04f 0901 	mov.w	r9, #1
 8004422:	4623      	mov	r3, r4
 8004424:	469a      	mov	sl, r3
 8004426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800442a:	b10a      	cbz	r2, 8004430 <_svfiprintf_r+0x5c>
 800442c:	2a25      	cmp	r2, #37	; 0x25
 800442e:	d1f9      	bne.n	8004424 <_svfiprintf_r+0x50>
 8004430:	ebba 0b04 	subs.w	fp, sl, r4
 8004434:	d00b      	beq.n	800444e <_svfiprintf_r+0x7a>
 8004436:	465b      	mov	r3, fp
 8004438:	4622      	mov	r2, r4
 800443a:	4629      	mov	r1, r5
 800443c:	4638      	mov	r0, r7
 800443e:	f7ff ff6d 	bl	800431c <__ssputs_r>
 8004442:	3001      	adds	r0, #1
 8004444:	f000 80aa 	beq.w	800459c <_svfiprintf_r+0x1c8>
 8004448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800444a:	445a      	add	r2, fp
 800444c:	9209      	str	r2, [sp, #36]	; 0x24
 800444e:	f89a 3000 	ldrb.w	r3, [sl]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80a2 	beq.w	800459c <_svfiprintf_r+0x1c8>
 8004458:	2300      	movs	r3, #0
 800445a:	f04f 32ff 	mov.w	r2, #4294967295
 800445e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004462:	f10a 0a01 	add.w	sl, sl, #1
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	9307      	str	r3, [sp, #28]
 800446a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800446e:	931a      	str	r3, [sp, #104]	; 0x68
 8004470:	4654      	mov	r4, sl
 8004472:	2205      	movs	r2, #5
 8004474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004478:	4851      	ldr	r0, [pc, #324]	; (80045c0 <_svfiprintf_r+0x1ec>)
 800447a:	f7fb feb1 	bl	80001e0 <memchr>
 800447e:	9a04      	ldr	r2, [sp, #16]
 8004480:	b9d8      	cbnz	r0, 80044ba <_svfiprintf_r+0xe6>
 8004482:	06d0      	lsls	r0, r2, #27
 8004484:	bf44      	itt	mi
 8004486:	2320      	movmi	r3, #32
 8004488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800448c:	0711      	lsls	r1, r2, #28
 800448e:	bf44      	itt	mi
 8004490:	232b      	movmi	r3, #43	; 0x2b
 8004492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004496:	f89a 3000 	ldrb.w	r3, [sl]
 800449a:	2b2a      	cmp	r3, #42	; 0x2a
 800449c:	d015      	beq.n	80044ca <_svfiprintf_r+0xf6>
 800449e:	9a07      	ldr	r2, [sp, #28]
 80044a0:	4654      	mov	r4, sl
 80044a2:	2000      	movs	r0, #0
 80044a4:	f04f 0c0a 	mov.w	ip, #10
 80044a8:	4621      	mov	r1, r4
 80044aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ae:	3b30      	subs	r3, #48	; 0x30
 80044b0:	2b09      	cmp	r3, #9
 80044b2:	d94e      	bls.n	8004552 <_svfiprintf_r+0x17e>
 80044b4:	b1b0      	cbz	r0, 80044e4 <_svfiprintf_r+0x110>
 80044b6:	9207      	str	r2, [sp, #28]
 80044b8:	e014      	b.n	80044e4 <_svfiprintf_r+0x110>
 80044ba:	eba0 0308 	sub.w	r3, r0, r8
 80044be:	fa09 f303 	lsl.w	r3, r9, r3
 80044c2:	4313      	orrs	r3, r2
 80044c4:	9304      	str	r3, [sp, #16]
 80044c6:	46a2      	mov	sl, r4
 80044c8:	e7d2      	b.n	8004470 <_svfiprintf_r+0x9c>
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	1d19      	adds	r1, r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	9103      	str	r1, [sp, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bfbb      	ittet	lt
 80044d6:	425b      	neglt	r3, r3
 80044d8:	f042 0202 	orrlt.w	r2, r2, #2
 80044dc:	9307      	strge	r3, [sp, #28]
 80044de:	9307      	strlt	r3, [sp, #28]
 80044e0:	bfb8      	it	lt
 80044e2:	9204      	strlt	r2, [sp, #16]
 80044e4:	7823      	ldrb	r3, [r4, #0]
 80044e6:	2b2e      	cmp	r3, #46	; 0x2e
 80044e8:	d10c      	bne.n	8004504 <_svfiprintf_r+0x130>
 80044ea:	7863      	ldrb	r3, [r4, #1]
 80044ec:	2b2a      	cmp	r3, #42	; 0x2a
 80044ee:	d135      	bne.n	800455c <_svfiprintf_r+0x188>
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	1d1a      	adds	r2, r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	9203      	str	r2, [sp, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bfb8      	it	lt
 80044fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004500:	3402      	adds	r4, #2
 8004502:	9305      	str	r3, [sp, #20]
 8004504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045d0 <_svfiprintf_r+0x1fc>
 8004508:	7821      	ldrb	r1, [r4, #0]
 800450a:	2203      	movs	r2, #3
 800450c:	4650      	mov	r0, sl
 800450e:	f7fb fe67 	bl	80001e0 <memchr>
 8004512:	b140      	cbz	r0, 8004526 <_svfiprintf_r+0x152>
 8004514:	2340      	movs	r3, #64	; 0x40
 8004516:	eba0 000a 	sub.w	r0, r0, sl
 800451a:	fa03 f000 	lsl.w	r0, r3, r0
 800451e:	9b04      	ldr	r3, [sp, #16]
 8004520:	4303      	orrs	r3, r0
 8004522:	3401      	adds	r4, #1
 8004524:	9304      	str	r3, [sp, #16]
 8004526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452a:	4826      	ldr	r0, [pc, #152]	; (80045c4 <_svfiprintf_r+0x1f0>)
 800452c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004530:	2206      	movs	r2, #6
 8004532:	f7fb fe55 	bl	80001e0 <memchr>
 8004536:	2800      	cmp	r0, #0
 8004538:	d038      	beq.n	80045ac <_svfiprintf_r+0x1d8>
 800453a:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <_svfiprintf_r+0x1f4>)
 800453c:	bb1b      	cbnz	r3, 8004586 <_svfiprintf_r+0x1b2>
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	3307      	adds	r3, #7
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	3308      	adds	r3, #8
 8004548:	9303      	str	r3, [sp, #12]
 800454a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800454c:	4433      	add	r3, r6
 800454e:	9309      	str	r3, [sp, #36]	; 0x24
 8004550:	e767      	b.n	8004422 <_svfiprintf_r+0x4e>
 8004552:	fb0c 3202 	mla	r2, ip, r2, r3
 8004556:	460c      	mov	r4, r1
 8004558:	2001      	movs	r0, #1
 800455a:	e7a5      	b.n	80044a8 <_svfiprintf_r+0xd4>
 800455c:	2300      	movs	r3, #0
 800455e:	3401      	adds	r4, #1
 8004560:	9305      	str	r3, [sp, #20]
 8004562:	4619      	mov	r1, r3
 8004564:	f04f 0c0a 	mov.w	ip, #10
 8004568:	4620      	mov	r0, r4
 800456a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800456e:	3a30      	subs	r2, #48	; 0x30
 8004570:	2a09      	cmp	r2, #9
 8004572:	d903      	bls.n	800457c <_svfiprintf_r+0x1a8>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0c5      	beq.n	8004504 <_svfiprintf_r+0x130>
 8004578:	9105      	str	r1, [sp, #20]
 800457a:	e7c3      	b.n	8004504 <_svfiprintf_r+0x130>
 800457c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004580:	4604      	mov	r4, r0
 8004582:	2301      	movs	r3, #1
 8004584:	e7f0      	b.n	8004568 <_svfiprintf_r+0x194>
 8004586:	ab03      	add	r3, sp, #12
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	462a      	mov	r2, r5
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <_svfiprintf_r+0x1f8>)
 800458e:	a904      	add	r1, sp, #16
 8004590:	4638      	mov	r0, r7
 8004592:	f3af 8000 	nop.w
 8004596:	1c42      	adds	r2, r0, #1
 8004598:	4606      	mov	r6, r0
 800459a:	d1d6      	bne.n	800454a <_svfiprintf_r+0x176>
 800459c:	89ab      	ldrh	r3, [r5, #12]
 800459e:	065b      	lsls	r3, r3, #25
 80045a0:	f53f af2c 	bmi.w	80043fc <_svfiprintf_r+0x28>
 80045a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045a6:	b01d      	add	sp, #116	; 0x74
 80045a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ac:	ab03      	add	r3, sp, #12
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	462a      	mov	r2, r5
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <_svfiprintf_r+0x1f8>)
 80045b4:	a904      	add	r1, sp, #16
 80045b6:	4638      	mov	r0, r7
 80045b8:	f000 f87a 	bl	80046b0 <_printf_i>
 80045bc:	e7eb      	b.n	8004596 <_svfiprintf_r+0x1c2>
 80045be:	bf00      	nop
 80045c0:	08004ccd 	.word	0x08004ccd
 80045c4:	08004cd7 	.word	0x08004cd7
 80045c8:	00000000 	.word	0x00000000
 80045cc:	0800431d 	.word	0x0800431d
 80045d0:	08004cd3 	.word	0x08004cd3

080045d4 <_printf_common>:
 80045d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d8:	4616      	mov	r6, r2
 80045da:	4699      	mov	r9, r3
 80045dc:	688a      	ldr	r2, [r1, #8]
 80045de:	690b      	ldr	r3, [r1, #16]
 80045e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	bfb8      	it	lt
 80045e8:	4613      	movlt	r3, r2
 80045ea:	6033      	str	r3, [r6, #0]
 80045ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045f0:	4607      	mov	r7, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	b10a      	cbz	r2, 80045fa <_printf_common+0x26>
 80045f6:	3301      	adds	r3, #1
 80045f8:	6033      	str	r3, [r6, #0]
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	0699      	lsls	r1, r3, #26
 80045fe:	bf42      	ittt	mi
 8004600:	6833      	ldrmi	r3, [r6, #0]
 8004602:	3302      	addmi	r3, #2
 8004604:	6033      	strmi	r3, [r6, #0]
 8004606:	6825      	ldr	r5, [r4, #0]
 8004608:	f015 0506 	ands.w	r5, r5, #6
 800460c:	d106      	bne.n	800461c <_printf_common+0x48>
 800460e:	f104 0a19 	add.w	sl, r4, #25
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	6832      	ldr	r2, [r6, #0]
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	42ab      	cmp	r3, r5
 800461a:	dc26      	bgt.n	800466a <_printf_common+0x96>
 800461c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004620:	1e13      	subs	r3, r2, #0
 8004622:	6822      	ldr	r2, [r4, #0]
 8004624:	bf18      	it	ne
 8004626:	2301      	movne	r3, #1
 8004628:	0692      	lsls	r2, r2, #26
 800462a:	d42b      	bmi.n	8004684 <_printf_common+0xb0>
 800462c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004630:	4649      	mov	r1, r9
 8004632:	4638      	mov	r0, r7
 8004634:	47c0      	blx	r8
 8004636:	3001      	adds	r0, #1
 8004638:	d01e      	beq.n	8004678 <_printf_common+0xa4>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	68e5      	ldr	r5, [r4, #12]
 800463e:	6832      	ldr	r2, [r6, #0]
 8004640:	f003 0306 	and.w	r3, r3, #6
 8004644:	2b04      	cmp	r3, #4
 8004646:	bf08      	it	eq
 8004648:	1aad      	subeq	r5, r5, r2
 800464a:	68a3      	ldr	r3, [r4, #8]
 800464c:	6922      	ldr	r2, [r4, #16]
 800464e:	bf0c      	ite	eq
 8004650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004654:	2500      	movne	r5, #0
 8004656:	4293      	cmp	r3, r2
 8004658:	bfc4      	itt	gt
 800465a:	1a9b      	subgt	r3, r3, r2
 800465c:	18ed      	addgt	r5, r5, r3
 800465e:	2600      	movs	r6, #0
 8004660:	341a      	adds	r4, #26
 8004662:	42b5      	cmp	r5, r6
 8004664:	d11a      	bne.n	800469c <_printf_common+0xc8>
 8004666:	2000      	movs	r0, #0
 8004668:	e008      	b.n	800467c <_printf_common+0xa8>
 800466a:	2301      	movs	r3, #1
 800466c:	4652      	mov	r2, sl
 800466e:	4649      	mov	r1, r9
 8004670:	4638      	mov	r0, r7
 8004672:	47c0      	blx	r8
 8004674:	3001      	adds	r0, #1
 8004676:	d103      	bne.n	8004680 <_printf_common+0xac>
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004680:	3501      	adds	r5, #1
 8004682:	e7c6      	b.n	8004612 <_printf_common+0x3e>
 8004684:	18e1      	adds	r1, r4, r3
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	2030      	movs	r0, #48	; 0x30
 800468a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800468e:	4422      	add	r2, r4
 8004690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004698:	3302      	adds	r3, #2
 800469a:	e7c7      	b.n	800462c <_printf_common+0x58>
 800469c:	2301      	movs	r3, #1
 800469e:	4622      	mov	r2, r4
 80046a0:	4649      	mov	r1, r9
 80046a2:	4638      	mov	r0, r7
 80046a4:	47c0      	blx	r8
 80046a6:	3001      	adds	r0, #1
 80046a8:	d0e6      	beq.n	8004678 <_printf_common+0xa4>
 80046aa:	3601      	adds	r6, #1
 80046ac:	e7d9      	b.n	8004662 <_printf_common+0x8e>
	...

080046b0 <_printf_i>:
 80046b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b4:	7e0f      	ldrb	r7, [r1, #24]
 80046b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046b8:	2f78      	cmp	r7, #120	; 0x78
 80046ba:	4691      	mov	r9, r2
 80046bc:	4680      	mov	r8, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	469a      	mov	sl, r3
 80046c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046c6:	d807      	bhi.n	80046d8 <_printf_i+0x28>
 80046c8:	2f62      	cmp	r7, #98	; 0x62
 80046ca:	d80a      	bhi.n	80046e2 <_printf_i+0x32>
 80046cc:	2f00      	cmp	r7, #0
 80046ce:	f000 80d8 	beq.w	8004882 <_printf_i+0x1d2>
 80046d2:	2f58      	cmp	r7, #88	; 0x58
 80046d4:	f000 80a3 	beq.w	800481e <_printf_i+0x16e>
 80046d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046e0:	e03a      	b.n	8004758 <_printf_i+0xa8>
 80046e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046e6:	2b15      	cmp	r3, #21
 80046e8:	d8f6      	bhi.n	80046d8 <_printf_i+0x28>
 80046ea:	a101      	add	r1, pc, #4	; (adr r1, 80046f0 <_printf_i+0x40>)
 80046ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046f0:	08004749 	.word	0x08004749
 80046f4:	0800475d 	.word	0x0800475d
 80046f8:	080046d9 	.word	0x080046d9
 80046fc:	080046d9 	.word	0x080046d9
 8004700:	080046d9 	.word	0x080046d9
 8004704:	080046d9 	.word	0x080046d9
 8004708:	0800475d 	.word	0x0800475d
 800470c:	080046d9 	.word	0x080046d9
 8004710:	080046d9 	.word	0x080046d9
 8004714:	080046d9 	.word	0x080046d9
 8004718:	080046d9 	.word	0x080046d9
 800471c:	08004869 	.word	0x08004869
 8004720:	0800478d 	.word	0x0800478d
 8004724:	0800484b 	.word	0x0800484b
 8004728:	080046d9 	.word	0x080046d9
 800472c:	080046d9 	.word	0x080046d9
 8004730:	0800488b 	.word	0x0800488b
 8004734:	080046d9 	.word	0x080046d9
 8004738:	0800478d 	.word	0x0800478d
 800473c:	080046d9 	.word	0x080046d9
 8004740:	080046d9 	.word	0x080046d9
 8004744:	08004853 	.word	0x08004853
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	1d1a      	adds	r2, r3, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	602a      	str	r2, [r5, #0]
 8004750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004758:	2301      	movs	r3, #1
 800475a:	e0a3      	b.n	80048a4 <_printf_i+0x1f4>
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	6829      	ldr	r1, [r5, #0]
 8004760:	0606      	lsls	r6, r0, #24
 8004762:	f101 0304 	add.w	r3, r1, #4
 8004766:	d50a      	bpl.n	800477e <_printf_i+0xce>
 8004768:	680e      	ldr	r6, [r1, #0]
 800476a:	602b      	str	r3, [r5, #0]
 800476c:	2e00      	cmp	r6, #0
 800476e:	da03      	bge.n	8004778 <_printf_i+0xc8>
 8004770:	232d      	movs	r3, #45	; 0x2d
 8004772:	4276      	negs	r6, r6
 8004774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004778:	485e      	ldr	r0, [pc, #376]	; (80048f4 <_printf_i+0x244>)
 800477a:	230a      	movs	r3, #10
 800477c:	e019      	b.n	80047b2 <_printf_i+0x102>
 800477e:	680e      	ldr	r6, [r1, #0]
 8004780:	602b      	str	r3, [r5, #0]
 8004782:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004786:	bf18      	it	ne
 8004788:	b236      	sxthne	r6, r6
 800478a:	e7ef      	b.n	800476c <_printf_i+0xbc>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	6029      	str	r1, [r5, #0]
 8004794:	0601      	lsls	r1, r0, #24
 8004796:	d501      	bpl.n	800479c <_printf_i+0xec>
 8004798:	681e      	ldr	r6, [r3, #0]
 800479a:	e002      	b.n	80047a2 <_printf_i+0xf2>
 800479c:	0646      	lsls	r6, r0, #25
 800479e:	d5fb      	bpl.n	8004798 <_printf_i+0xe8>
 80047a0:	881e      	ldrh	r6, [r3, #0]
 80047a2:	4854      	ldr	r0, [pc, #336]	; (80048f4 <_printf_i+0x244>)
 80047a4:	2f6f      	cmp	r7, #111	; 0x6f
 80047a6:	bf0c      	ite	eq
 80047a8:	2308      	moveq	r3, #8
 80047aa:	230a      	movne	r3, #10
 80047ac:	2100      	movs	r1, #0
 80047ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047b2:	6865      	ldr	r5, [r4, #4]
 80047b4:	60a5      	str	r5, [r4, #8]
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	bfa2      	ittt	ge
 80047ba:	6821      	ldrge	r1, [r4, #0]
 80047bc:	f021 0104 	bicge.w	r1, r1, #4
 80047c0:	6021      	strge	r1, [r4, #0]
 80047c2:	b90e      	cbnz	r6, 80047c8 <_printf_i+0x118>
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	d04d      	beq.n	8004864 <_printf_i+0x1b4>
 80047c8:	4615      	mov	r5, r2
 80047ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80047ce:	fb03 6711 	mls	r7, r3, r1, r6
 80047d2:	5dc7      	ldrb	r7, [r0, r7]
 80047d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047d8:	4637      	mov	r7, r6
 80047da:	42bb      	cmp	r3, r7
 80047dc:	460e      	mov	r6, r1
 80047de:	d9f4      	bls.n	80047ca <_printf_i+0x11a>
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d10b      	bne.n	80047fc <_printf_i+0x14c>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07de      	lsls	r6, r3, #31
 80047e8:	d508      	bpl.n	80047fc <_printf_i+0x14c>
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	6861      	ldr	r1, [r4, #4]
 80047ee:	4299      	cmp	r1, r3
 80047f0:	bfde      	ittt	le
 80047f2:	2330      	movle	r3, #48	; 0x30
 80047f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047fc:	1b52      	subs	r2, r2, r5
 80047fe:	6122      	str	r2, [r4, #16]
 8004800:	f8cd a000 	str.w	sl, [sp]
 8004804:	464b      	mov	r3, r9
 8004806:	aa03      	add	r2, sp, #12
 8004808:	4621      	mov	r1, r4
 800480a:	4640      	mov	r0, r8
 800480c:	f7ff fee2 	bl	80045d4 <_printf_common>
 8004810:	3001      	adds	r0, #1
 8004812:	d14c      	bne.n	80048ae <_printf_i+0x1fe>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	b004      	add	sp, #16
 800481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800481e:	4835      	ldr	r0, [pc, #212]	; (80048f4 <_printf_i+0x244>)
 8004820:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004824:	6829      	ldr	r1, [r5, #0]
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	f851 6b04 	ldr.w	r6, [r1], #4
 800482c:	6029      	str	r1, [r5, #0]
 800482e:	061d      	lsls	r5, r3, #24
 8004830:	d514      	bpl.n	800485c <_printf_i+0x1ac>
 8004832:	07df      	lsls	r7, r3, #31
 8004834:	bf44      	itt	mi
 8004836:	f043 0320 	orrmi.w	r3, r3, #32
 800483a:	6023      	strmi	r3, [r4, #0]
 800483c:	b91e      	cbnz	r6, 8004846 <_printf_i+0x196>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	f023 0320 	bic.w	r3, r3, #32
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	2310      	movs	r3, #16
 8004848:	e7b0      	b.n	80047ac <_printf_i+0xfc>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	f043 0320 	orr.w	r3, r3, #32
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	2378      	movs	r3, #120	; 0x78
 8004854:	4828      	ldr	r0, [pc, #160]	; (80048f8 <_printf_i+0x248>)
 8004856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800485a:	e7e3      	b.n	8004824 <_printf_i+0x174>
 800485c:	0659      	lsls	r1, r3, #25
 800485e:	bf48      	it	mi
 8004860:	b2b6      	uxthmi	r6, r6
 8004862:	e7e6      	b.n	8004832 <_printf_i+0x182>
 8004864:	4615      	mov	r5, r2
 8004866:	e7bb      	b.n	80047e0 <_printf_i+0x130>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	6826      	ldr	r6, [r4, #0]
 800486c:	6961      	ldr	r1, [r4, #20]
 800486e:	1d18      	adds	r0, r3, #4
 8004870:	6028      	str	r0, [r5, #0]
 8004872:	0635      	lsls	r5, r6, #24
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	d501      	bpl.n	800487c <_printf_i+0x1cc>
 8004878:	6019      	str	r1, [r3, #0]
 800487a:	e002      	b.n	8004882 <_printf_i+0x1d2>
 800487c:	0670      	lsls	r0, r6, #25
 800487e:	d5fb      	bpl.n	8004878 <_printf_i+0x1c8>
 8004880:	8019      	strh	r1, [r3, #0]
 8004882:	2300      	movs	r3, #0
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	4615      	mov	r5, r2
 8004888:	e7ba      	b.n	8004800 <_printf_i+0x150>
 800488a:	682b      	ldr	r3, [r5, #0]
 800488c:	1d1a      	adds	r2, r3, #4
 800488e:	602a      	str	r2, [r5, #0]
 8004890:	681d      	ldr	r5, [r3, #0]
 8004892:	6862      	ldr	r2, [r4, #4]
 8004894:	2100      	movs	r1, #0
 8004896:	4628      	mov	r0, r5
 8004898:	f7fb fca2 	bl	80001e0 <memchr>
 800489c:	b108      	cbz	r0, 80048a2 <_printf_i+0x1f2>
 800489e:	1b40      	subs	r0, r0, r5
 80048a0:	6060      	str	r0, [r4, #4]
 80048a2:	6863      	ldr	r3, [r4, #4]
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	2300      	movs	r3, #0
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ac:	e7a8      	b.n	8004800 <_printf_i+0x150>
 80048ae:	6923      	ldr	r3, [r4, #16]
 80048b0:	462a      	mov	r2, r5
 80048b2:	4649      	mov	r1, r9
 80048b4:	4640      	mov	r0, r8
 80048b6:	47d0      	blx	sl
 80048b8:	3001      	adds	r0, #1
 80048ba:	d0ab      	beq.n	8004814 <_printf_i+0x164>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	079b      	lsls	r3, r3, #30
 80048c0:	d413      	bmi.n	80048ea <_printf_i+0x23a>
 80048c2:	68e0      	ldr	r0, [r4, #12]
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	4298      	cmp	r0, r3
 80048c8:	bfb8      	it	lt
 80048ca:	4618      	movlt	r0, r3
 80048cc:	e7a4      	b.n	8004818 <_printf_i+0x168>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4632      	mov	r2, r6
 80048d2:	4649      	mov	r1, r9
 80048d4:	4640      	mov	r0, r8
 80048d6:	47d0      	blx	sl
 80048d8:	3001      	adds	r0, #1
 80048da:	d09b      	beq.n	8004814 <_printf_i+0x164>
 80048dc:	3501      	adds	r5, #1
 80048de:	68e3      	ldr	r3, [r4, #12]
 80048e0:	9903      	ldr	r1, [sp, #12]
 80048e2:	1a5b      	subs	r3, r3, r1
 80048e4:	42ab      	cmp	r3, r5
 80048e6:	dcf2      	bgt.n	80048ce <_printf_i+0x21e>
 80048e8:	e7eb      	b.n	80048c2 <_printf_i+0x212>
 80048ea:	2500      	movs	r5, #0
 80048ec:	f104 0619 	add.w	r6, r4, #25
 80048f0:	e7f5      	b.n	80048de <_printf_i+0x22e>
 80048f2:	bf00      	nop
 80048f4:	08004cde 	.word	0x08004cde
 80048f8:	08004cef 	.word	0x08004cef

080048fc <__retarget_lock_acquire_recursive>:
 80048fc:	4770      	bx	lr

080048fe <__retarget_lock_release_recursive>:
 80048fe:	4770      	bx	lr

08004900 <memcpy>:
 8004900:	440a      	add	r2, r1
 8004902:	4291      	cmp	r1, r2
 8004904:	f100 33ff 	add.w	r3, r0, #4294967295
 8004908:	d100      	bne.n	800490c <memcpy+0xc>
 800490a:	4770      	bx	lr
 800490c:	b510      	push	{r4, lr}
 800490e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004916:	4291      	cmp	r1, r2
 8004918:	d1f9      	bne.n	800490e <memcpy+0xe>
 800491a:	bd10      	pop	{r4, pc}

0800491c <memmove>:
 800491c:	4288      	cmp	r0, r1
 800491e:	b510      	push	{r4, lr}
 8004920:	eb01 0402 	add.w	r4, r1, r2
 8004924:	d902      	bls.n	800492c <memmove+0x10>
 8004926:	4284      	cmp	r4, r0
 8004928:	4623      	mov	r3, r4
 800492a:	d807      	bhi.n	800493c <memmove+0x20>
 800492c:	1e43      	subs	r3, r0, #1
 800492e:	42a1      	cmp	r1, r4
 8004930:	d008      	beq.n	8004944 <memmove+0x28>
 8004932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800493a:	e7f8      	b.n	800492e <memmove+0x12>
 800493c:	4402      	add	r2, r0
 800493e:	4601      	mov	r1, r0
 8004940:	428a      	cmp	r2, r1
 8004942:	d100      	bne.n	8004946 <memmove+0x2a>
 8004944:	bd10      	pop	{r4, pc}
 8004946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800494a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800494e:	e7f7      	b.n	8004940 <memmove+0x24>

08004950 <_realloc_r>:
 8004950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004954:	4680      	mov	r8, r0
 8004956:	4614      	mov	r4, r2
 8004958:	460e      	mov	r6, r1
 800495a:	b921      	cbnz	r1, 8004966 <_realloc_r+0x16>
 800495c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004960:	4611      	mov	r1, r2
 8004962:	f7ff bbf7 	b.w	8004154 <_malloc_r>
 8004966:	b92a      	cbnz	r2, 8004974 <_realloc_r+0x24>
 8004968:	f7ff fb88 	bl	800407c <_free_r>
 800496c:	4625      	mov	r5, r4
 800496e:	4628      	mov	r0, r5
 8004970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004974:	f000 f81b 	bl	80049ae <_malloc_usable_size_r>
 8004978:	4284      	cmp	r4, r0
 800497a:	4607      	mov	r7, r0
 800497c:	d802      	bhi.n	8004984 <_realloc_r+0x34>
 800497e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004982:	d812      	bhi.n	80049aa <_realloc_r+0x5a>
 8004984:	4621      	mov	r1, r4
 8004986:	4640      	mov	r0, r8
 8004988:	f7ff fbe4 	bl	8004154 <_malloc_r>
 800498c:	4605      	mov	r5, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d0ed      	beq.n	800496e <_realloc_r+0x1e>
 8004992:	42bc      	cmp	r4, r7
 8004994:	4622      	mov	r2, r4
 8004996:	4631      	mov	r1, r6
 8004998:	bf28      	it	cs
 800499a:	463a      	movcs	r2, r7
 800499c:	f7ff ffb0 	bl	8004900 <memcpy>
 80049a0:	4631      	mov	r1, r6
 80049a2:	4640      	mov	r0, r8
 80049a4:	f7ff fb6a 	bl	800407c <_free_r>
 80049a8:	e7e1      	b.n	800496e <_realloc_r+0x1e>
 80049aa:	4635      	mov	r5, r6
 80049ac:	e7df      	b.n	800496e <_realloc_r+0x1e>

080049ae <_malloc_usable_size_r>:
 80049ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b2:	1f18      	subs	r0, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bfbc      	itt	lt
 80049b8:	580b      	ldrlt	r3, [r1, r0]
 80049ba:	18c0      	addlt	r0, r0, r3
 80049bc:	4770      	bx	lr
	...

080049c0 <_init>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr

080049cc <_fini>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr

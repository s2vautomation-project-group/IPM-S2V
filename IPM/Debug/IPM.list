
IPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004634  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad4  08004ad4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000cc  08004ba8  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004ba8  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d044  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d2  00000000  00000000  0002d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002078c  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d861  00000000  00000000  00050eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c00d4  00000000  00000000  0005e70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e7e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  0011e834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047ac 	.word	0x080047ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	080047ac 	.word	0x080047ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DataTosend>:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void DataTosend(struct data *d)
{
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af06      	add	r7, sp, #24
 800058a:	6078      	str	r0, [r7, #4]

	DataToCloud(d->time,d->CH1,d->CH2,d->CH3,d->CH4,d->D1,d->D2,d->D3,d->D4);
 800058c:	687d      	ldr	r5, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f103 060a 	add.w	r6, r3, #10
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f103 0c14 	add.w	ip, r3, #20
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f103 0e1e 	add.w	lr, r3, #30
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3328      	adds	r3, #40	; 0x28
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	3232      	adds	r2, #50	; 0x32
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	313c      	adds	r1, #60	; 0x3c
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	3046      	adds	r0, #70	; 0x46
 80005b0:	687c      	ldr	r4, [r7, #4]
 80005b2:	3450      	adds	r4, #80	; 0x50
 80005b4:	9404      	str	r4, [sp, #16]
 80005b6:	9003      	str	r0, [sp, #12]
 80005b8:	9102      	str	r1, [sp, #8]
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4673      	mov	r3, lr
 80005c0:	4662      	mov	r2, ip
 80005c2:	4631      	mov	r1, r6
 80005c4:	4628      	mov	r0, r5
 80005c6:	f000 f87b 	bl	80006c0 <DataToCloud>


}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080005d4 <UART2_Init>:


UART_HandleTypeDef huart2;

void UART2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <UART2_Init+0x58>)
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <UART2_Init+0x5c>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <UART2_Init+0x58>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <UART2_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <UART2_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <UART2_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <UART2_Init+0x58>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <UART2_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <UART2_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <UART2_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <UART2_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <UART2_Init+0x58>)
 8000618:	f002 f86e 	bl	80026f8 <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <UART2_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 fa03 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000014c 	.word	0x2000014c
 8000630:	40004400 	.word	0x40004400

08000634 <GsmCommands>:


void GsmCommands(uint8_t* cmd)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fdc7 	bl	80001d0 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29b      	uxth	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <GsmCommands+0x38>)
 800064c:	f002 f8a2 	bl	8002794 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 8000650:	2264      	movs	r2, #100	; 0x64
 8000652:	4907      	ldr	r1, [pc, #28]	; (8000670 <GsmCommands+0x3c>)
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <GsmCommands+0x38>)
 8000656:	f002 f90b 	bl	8002870 <HAL_UART_Receive_IT>
	 HAL_Delay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065e:	f000 fb89 	bl	8000d74 <HAL_Delay>

}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000014c 	.word	0x2000014c
 8000670:	200000e8 	.word	0x200000e8

08000674 <Gsm_Init>:

void Gsm_Init()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 8000678:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800067c:	f000 fb7a 	bl	8000d74 <HAL_Delay>


	                    GsmCommands((uint8_t*)"AT\r\n");
 8000680:	4809      	ldr	r0, [pc, #36]	; (80006a8 <Gsm_Init+0x34>)
 8000682:	f7ff ffd7 	bl	8000634 <GsmCommands>
                        GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <Gsm_Init+0x38>)
 8000688:	f7ff ffd4 	bl	8000634 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CSQ\r\n");
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <Gsm_Init+0x3c>)
 800068e:	f7ff ffd1 	bl	8000634 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8000692:	4808      	ldr	r0, [pc, #32]	; (80006b4 <Gsm_Init+0x40>)
 8000694:	f7ff ffce 	bl	8000634 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <Gsm_Init+0x44>)
 800069a:	f7ff ffcb 	bl	8000634 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <Gsm_Init+0x48>)
 80006a0:	f7ff ffc8 	bl	8000634 <GsmCommands>

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	080047c4 	.word	0x080047c4
 80006ac:	080047cc 	.word	0x080047cc
 80006b0:	080047d8 	.word	0x080047d8
 80006b4:	080047e4 	.word	0x080047e4
 80006b8:	080047f4 	.word	0x080047f4
 80006bc:	08004814 	.word	0x08004814

080006c0 <DataToCloud>:


void DataToCloud(uint8_t* Time,uint8_t* Ch1,uint8_t* Ch2,uint8_t* Ch3,uint8_t* Ch4,uint8_t* D1,uint8_t* D2,uint8_t* D3,uint8_t* D4)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80006c6:	af08      	add	r7, sp, #32
 80006c8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80006cc:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 80006d0:	6020      	str	r0, [r4, #0]
 80006d2:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80006d6:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80006e0:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 80006e4:	600a      	str	r2, [r1, #0]
 80006e6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80006ea:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80006ee:	6013      	str	r3, [r2, #0]

			uint8_t AT_RTCcloud_data[500];

			char* encoded_Time = url_encode(Time);
 80006f0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006f4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f000 f89b 	bl	8000834 <url_encode>
 80006fe:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
			char* encoded_Ch1 = url_encode(Ch1);
 8000702:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000706:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	f000 f892 	bl	8000834 <url_encode>
 8000710:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
			char* encoded_Ch2 = url_encode(Ch2);
 8000714:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000718:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	f000 f889 	bl	8000834 <url_encode>
 8000722:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
			char* encoded_Ch3 = url_encode(Ch3);
 8000726:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800072a:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	f000 f880 	bl	8000834 <url_encode>
 8000734:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
			char* encoded_Ch4 = url_encode(Ch4);
 8000738:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 800073c:	f000 f87a 	bl	8000834 <url_encode>
 8000740:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
			char* encoded_D1 = url_encode(D1);
 8000744:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000748:	f000 f874 	bl	8000834 <url_encode>
 800074c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
			char* encoded_D2 = url_encode(D2);
 8000750:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8000754:	f000 f86e 	bl	8000834 <url_encode>
 8000758:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
			char* encoded_D3 = url_encode(D3);
 800075c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8000760:	f000 f868 	bl	8000834 <url_encode>
 8000764:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
			char* encoded_D4 = url_encode(D4);
 8000768:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800076c:	f000 f862 	bl	8000834 <url_encode>
 8000770:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204


				//	RTCdata_to_cloud

				 GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8000774:	482b      	ldr	r0, [pc, #172]	; (8000824 <DataToCloud+0x164>)
 8000776:	f7ff ff5d 	bl	8000634 <GsmCommands>
				 GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800077a:	482b      	ldr	r0, [pc, #172]	; (8000828 <DataToCloud+0x168>)
 800077c:	f7ff ff5a 	bl	8000634 <GsmCommands>


				 snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbwaEr2bwPZ4lsp0eJuNW61im6PEJ0zI5yxW0n7_kDA9N-wocsdiVT38l-30--cFvb_H/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s\"\r\n",encoded_Time, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8000780:	f107 0010 	add.w	r0, r7, #16
 8000784:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000788:	9307      	str	r3, [sp, #28]
 800078a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800078e:	9306      	str	r3, [sp, #24]
 8000790:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000794:	9305      	str	r3, [sp, #20]
 8000796:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800079a:	9304      	str	r3, [sp, #16]
 800079c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80007a0:	9303      	str	r3, [sp, #12]
 80007a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007b8:	4a1c      	ldr	r2, [pc, #112]	; (800082c <DataToCloud+0x16c>)
 80007ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007be:	f003 fc63 	bl	8004088 <sniprintf>


					GsmCommands((uint8_t*)AT_RTCcloud_data);
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff34 	bl	8000634 <GsmCommands>
					 GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 80007cc:	4818      	ldr	r0, [pc, #96]	; (8000830 <DataToCloud+0x170>)
 80007ce:	f7ff ff31 	bl	8000634 <GsmCommands>

					 free(encoded_Time);
 80007d2:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80007d6:	f003 fb57 	bl	8003e88 <free>
					free(encoded_Ch1);
 80007da:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80007de:	f003 fb53 	bl	8003e88 <free>
					free(encoded_Ch2);
 80007e2:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80007e6:	f003 fb4f 	bl	8003e88 <free>
					free(encoded_Ch3);
 80007ea:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80007ee:	f003 fb4b 	bl	8003e88 <free>
					free(encoded_Ch4);
 80007f2:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80007f6:	f003 fb47 	bl	8003e88 <free>
					free(encoded_D1);
 80007fa:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80007fe:	f003 fb43 	bl	8003e88 <free>
					free(encoded_D2);
 8000802:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000806:	f003 fb3f 	bl	8003e88 <free>
					free(encoded_D3);
 800080a:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 800080e:	f003 fb3b 	bl	8003e88 <free>
					free(encoded_D4);
 8000812:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8000816:	f003 fb37 	bl	8003e88 <free>

}
 800081a:	bf00      	nop
 800081c:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	08004824 	.word	0x08004824
 8000828:	08004834 	.word	0x08004834
 800082c:	08004844 	.word	0x08004844
 8000830:	08004928 	.word	0x08004928

08000834 <url_encode>:



char* url_encode(const char* str)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    const char* hex = "0123456789ABCDEF";
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <url_encode+0xc4>)
 800083e:	613b      	str	r3, [r7, #16]
    char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fcc5 	bl	80001d0 <strlen>
 8000846:	4602      	mov	r2, r0
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	3301      	adds	r3, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f003 fb11 	bl	8003e78 <malloc>
 8000856:	4603      	mov	r3, r0
 8000858:	60fb      	str	r3, [r7, #12]
    char* ptr = encoded;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	617b      	str	r3, [r7, #20]

    while (*str) {
 800085e:	e03e      	b.n	80008de <url_encode+0xaa>
        if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f003 faff 	bl	8003e68 <isalnum>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10f      	bne.n	8000890 <url_encode+0x5c>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b2d      	cmp	r3, #45	; 0x2d
 8000876:	d00b      	beq.n	8000890 <url_encode+0x5c>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b5f      	cmp	r3, #95	; 0x5f
 800087e:	d007      	beq.n	8000890 <url_encode+0x5c>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b2e      	cmp	r3, #46	; 0x2e
 8000886:	d003      	beq.n	8000890 <url_encode+0x5c>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b7e      	cmp	r3, #126	; 0x7e
 800088e:	d106      	bne.n	800089e <url_encode+0x6a>
            *ptr++ = *str;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	617a      	str	r2, [r7, #20]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	7812      	ldrb	r2, [r2, #0]
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e01c      	b.n	80008d8 <url_encode+0xa4>
        } else {
            *ptr++ = '%';
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	617a      	str	r2, [r7, #20]
 80008a4:	2225      	movs	r2, #37	; 0x25
 80008a6:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[(*str >> 4) & 0xF];
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	091b      	lsrs	r3, r3, #4
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	441a      	add	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	1c59      	adds	r1, r3, #1
 80008bc:	6179      	str	r1, [r7, #20]
 80008be:	7812      	ldrb	r2, [r2, #0]
 80008c0:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[*str & 0xF];
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	441a      	add	r2, r3
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	1c59      	adds	r1, r3, #1
 80008d2:	6179      	str	r1, [r7, #20]
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	701a      	strb	r2, [r3, #0]
        }
        str++;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
    while (*str) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1bc      	bne.n	8000860 <url_encode+0x2c>
    }
    *ptr = '\0';
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
    return encoded;
 80008ec:	68fb      	ldr	r3, [r7, #12]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	0800493c 	.word	0x0800493c

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 f9c3 	bl	8000c8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f80c 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 f86c 	bl	80009e4 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  UART2_Init();
 800090c:	f7ff fe62 	bl	80005d4 <UART2_Init>
  Gsm_Init();
 8000910:	f7ff feb0 	bl	8000674 <Gsm_Init>
    /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  DataTosend(&d);
 8000914:	4801      	ldr	r0, [pc, #4]	; (800091c <main+0x20>)
 8000916:	f7ff fe35 	bl	8000584 <DataTosend>
  while (1)
 800091a:	e7fe      	b.n	800091a <main+0x1e>
 800091c:	20000000 	.word	0x20000000

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b096      	sub	sp, #88	; 0x58
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2244      	movs	r2, #68	; 0x44
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fab2 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000942:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000946:	f000 fd51 	bl	80013ec <HAL_PWREx_ControlVoltageScaling>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000950:	f000 f86c 	bl	8000a2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000954:	f000 fd2c 	bl	80013b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <SystemClock_Config+0xc0>)
 800095a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800095e:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <SystemClock_Config+0xc0>)
 8000960:	f023 0318 	bic.w	r3, r3, #24
 8000964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000968:	2314      	movs	r3, #20
 800096a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800096c:	2301      	movs	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000978:	2360      	movs	r3, #96	; 0x60
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000980:	2301      	movs	r3, #1
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000988:	2310      	movs	r3, #16
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800098c:	2307      	movs	r3, #7
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fd7b 	bl	8001498 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f840 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2303      	movs	r3, #3
 80009b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	2101      	movs	r1, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f97b 	bl	8001cc0 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009d0:	f000 f82c 	bl	8000a2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009d4:	f001 fd8e 	bl	80024f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009d8:	bf00      	nop
 80009da:	3758      	adds	r7, #88	; 0x58
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_GPIO_Init+0x44>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <MX_GPIO_Init+0x44>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_GPIO_Init+0x44>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_GPIO_Init+0x44>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <MX_GPIO_Init+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_GPIO_Init+0x44>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6593      	str	r3, [r2, #88]	; 0x58
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09e      	sub	sp, #120	; 0x78
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	2254      	movs	r2, #84	; 0x54
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 f9f9 	bl	8003e98 <memset>
  if(huart->Instance==USART2)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_UART_MspInit+0xb8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d13e      	bne.n	8000b2e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fb23 	bl	8002108 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac8:	f7ff ffb0 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad0:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_UART_MspInit+0xbc>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000afc:	230c      	movs	r3, #12
 8000afe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 fadf 	bl	80010dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2026      	movs	r0, #38	; 0x26
 8000b24:	f000 fa25 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b28:	2026      	movs	r0, #38	; 0x26
 8000b2a:	f000 fa3e 	bl	8000faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3778      	adds	r7, #120	; 0x78
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8d2 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USART2_IRQHandler+0x10>)
 8000b9a:	f001 febf 	bl	800291c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000014c 	.word	0x2000014c

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f003 f91c 	bl	8003e14 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20010000 	.word	0x20010000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	200001d0 	.word	0x200001d0
 8000c10:	200001e8 	.word	0x200001e8

08000c14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3c:	f7ff ffea 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	; (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	; (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f003 f8db 	bl	8003e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6a:	f7ff fe47 	bl	80008fc <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000c7c:	08004adc 	.word	0x08004adc
  ldr r2, =_sbss
 8000c80:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000c84:	200001e8 	.word	0x200001e8

08000c88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_IRQHandler>

08000c8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f961 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f80e 	bl	8000cbc <HAL_InitTick>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	e001      	b.n	8000cb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cac:	f7ff fec4 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <HAL_InitTick+0x6c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d023      	beq.n	8000d18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_InitTick+0x70>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <HAL_InitTick+0x6c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f96d 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10f      	bne.n	8000d12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d809      	bhi.n	8000d0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f937 	bl	8000f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_InitTick+0x74>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e007      	b.n	8000d1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	e004      	b.n	8000d1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e001      	b.n	8000d1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000064 	.word	0x20000064
 8000d2c:	2000005c 	.word	0x2000005c
 8000d30:	20000060 	.word	0x20000060

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000064 	.word	0x20000064
 8000d58:	200001d4 	.word	0x200001d4

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200001d4 	.word	0x200001d4

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000064 	.word	0x20000064

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d008      	beq.n	8001008 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e022      	b.n	800104e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 020e 	bic.w	r2, r2, #14
 8001016:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 021c 	and.w	r2, r3, #28
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d005      	beq.n	800107e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2204      	movs	r2, #4
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e029      	b.n	80010d2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 020e 	bic.w	r2, r2, #14
 800108c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f003 021c 	and.w	r2, r3, #28
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	2101      	movs	r1, #1
 80010ac:	fa01 f202 	lsl.w	r2, r1, r2
 80010b0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	4798      	blx	r3
    }
  }
  return status;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e148      	b.n	800137e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 813a 	beq.w	8001378 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b01      	cmp	r3, #1
 800110e:	d005      	beq.n	800111c <HAL_GPIO_Init+0x40>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d130      	bne.n	800117e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001152:	2201      	movs	r2, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	f003 0201 	and.w	r2, r3, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b03      	cmp	r3, #3
 8001188:	d017      	beq.n	80011ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d123      	bne.n	800120e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	6939      	ldr	r1, [r7, #16]
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8094 	beq.w	8001378 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_GPIO_Init+0x2c0>)
 8001252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001254:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_GPIO_Init+0x2c0>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6613      	str	r3, [r2, #96]	; 0x60
 800125c:	4b4f      	ldr	r3, [pc, #316]	; (800139c <HAL_GPIO_Init+0x2c0>)
 800125e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001268:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <HAL_GPIO_Init+0x2c4>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001292:	d00d      	beq.n	80012b0 <HAL_GPIO_Init+0x1d4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <HAL_GPIO_Init+0x2c8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x1d0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <HAL_GPIO_Init+0x2cc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_GPIO_Init+0x1cc>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1d6>
 80012a8:	2307      	movs	r3, #7
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1d6>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1d6>
 80012b0:	2300      	movs	r3, #0
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c2:	4937      	ldr	r1, [pc, #220]	; (80013a0 <HAL_GPIO_Init+0x2c4>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800131e:	4a23      	ldr	r2, [pc, #140]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001348:	4a18      	ldr	r2, [pc, #96]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f aeaf 	bne.w	80010ec <HAL_GPIO_Init+0x10>
  }
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40007000 	.word	0x40007000

080013d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40007000 	.word	0x40007000

080013ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013fa:	d130      	bne.n	800145e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001408:	d038      	beq.n	800147c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2232      	movs	r2, #50	; 0x32
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0c9b      	lsrs	r3, r3, #18
 800142c:	3301      	adds	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001430:	e002      	b.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3b01      	subs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001444:	d102      	bne.n	800144c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f2      	bne.n	8001432 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001458:	d110      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e00f      	b.n	800147e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146a:	d007      	beq.n	800147c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40007000 	.word	0x40007000
 8001490:	2000005c 	.word	0x2000005c
 8001494:	431bde83 	.word	0x431bde83

08001498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f000 bc02 	b.w	8001cb0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ac:	4b96      	ldr	r3, [pc, #600]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b6:	4b94      	ldr	r3, [pc, #592]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80e4 	beq.w	8001696 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4c>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	f040 808b 	bne.w	80015f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	f040 8087 	bne.w	80015f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e4:	4b88      	ldr	r3, [pc, #544]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x64>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e3d9      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	4b81      	ldr	r3, [pc, #516]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_RCC_OscConfig+0x7e>
 800150c:	4b7e      	ldr	r3, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001514:	e005      	b.n	8001522 <HAL_RCC_OscConfig+0x8a>
 8001516:	4b7c      	ldr	r3, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001522:	4293      	cmp	r3, r2
 8001524:	d223      	bcs.n	800156e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fd8c 	bl	8002048 <RCC_SetFlashLatencyFromMSIRange>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e3ba      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	496d      	ldr	r1, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001558:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	4968      	ldr	r1, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
 800156c:	e025      	b.n	80015ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156e:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a65      	ldr	r2, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4960      	ldr	r1, [pc, #384]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	495b      	ldr	r1, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fd4c 	bl	8002048 <RCC_SetFlashLatencyFromMSIRange>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e37a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ba:	f000 fc81 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4950      	ldr	r1, [pc, #320]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80015cc:	5ccb      	ldrb	r3, [r1, r3]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	fa22 f303 	lsr.w	r3, r2, r3
 80015d6:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_RCC_OscConfig+0x278>)
 80015d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015da:	4b4e      	ldr	r3, [pc, #312]	; (8001714 <HAL_RCC_OscConfig+0x27c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fb6c 	bl	8000cbc <HAL_InitTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d052      	beq.n	8001694 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	e35e      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d032      	beq.n	8001660 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a42      	ldr	r2, [pc, #264]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001606:	f7ff fba9 	bl	8000d5c <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800160e:	f7ff fba5 	bl	8000d5c <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e347      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4930      	ldr	r1, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	492b      	ldr	r1, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e01a      	b.n	8001696 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb76 	bl	8000d5c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001674:	f7ff fb72 	bl	8000d5c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e314      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1dc>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d073      	beq.n	800178a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x21c>
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d10e      	bne.n	80016cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d10b      	bne.n	80016cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d063      	beq.n	8001788 <HAL_RCC_OscConfig+0x2f0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d15f      	bne.n	8001788 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e2f1      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x24c>
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e025      	b.n	8001730 <HAL_RCC_OscConfig+0x298>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ec:	d114      	bne.n	8001718 <HAL_RCC_OscConfig+0x280>
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a02      	ldr	r2, [pc, #8]	; (8001708 <HAL_RCC_OscConfig+0x270>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e013      	b.n	8001730 <HAL_RCC_OscConfig+0x298>
 8001708:	40021000 	.word	0x40021000
 800170c:	08004950 	.word	0x08004950
 8001710:	2000005c 	.word	0x2000005c
 8001714:	20000060 	.word	0x20000060
 8001718:	4ba0      	ldr	r3, [pc, #640]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a9f      	ldr	r2, [pc, #636]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b9d      	ldr	r3, [pc, #628]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a9c      	ldr	r2, [pc, #624]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fb10 	bl	8000d5c <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fb0c 	bl	8000d5c <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e2ae      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001752:	4b92      	ldr	r3, [pc, #584]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x2a8>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fafc 	bl	8000d5c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff faf8 	bl	8000d5c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e29a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800177a:	4b88      	ldr	r3, [pc, #544]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x2d0>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d060      	beq.n	8001858 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_OscConfig+0x310>
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d119      	bne.n	80017d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d116      	bne.n	80017d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a8:	4b7c      	ldr	r3, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_OscConfig+0x328>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e277      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b76      	ldr	r3, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	4973      	ldr	r1, [pc, #460]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	e040      	b.n	8001858 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d023      	beq.n	8001826 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017de:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6e      	ldr	r2, [pc, #440]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fab7 	bl	8000d5c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fab3 	bl	8000d5c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e255      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001804:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b62      	ldr	r3, [pc, #392]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	495f      	ldr	r1, [pc, #380]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e018      	b.n	8001858 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b5d      	ldr	r3, [pc, #372]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a5c      	ldr	r2, [pc, #368]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800182c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fa93 	bl	8000d5c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff fa8f 	bl	8000d5c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e231      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d03c      	beq.n	80018de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186c:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	4a4a      	ldr	r2, [pc, #296]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fa6e 	bl	8000d5c <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fa6a 	bl	8000d5c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e20c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001896:	4b41      	ldr	r3, [pc, #260]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ef      	beq.n	8001884 <HAL_RCC_OscConfig+0x3ec>
 80018a4:	e01b      	b.n	80018de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80018a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ac:	4a3b      	ldr	r2, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff fa51 	bl	8000d5c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018be:	f7ff fa4d 	bl	8000d5c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1ef      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ef      	bne.n	80018be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80a6 	beq.w	8001a38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10d      	bne.n	8001918 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x504>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	4a26      	ldr	r2, [pc, #152]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001906:	6593      	str	r3, [r2, #88]	; 0x58
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001914:	2301      	movs	r3, #1
 8001916:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x508>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d118      	bne.n	8001956 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_RCC_OscConfig+0x508>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_RCC_OscConfig+0x508>)
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001930:	f7ff fa14 	bl	8000d5c <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001938:	f7ff fa10 	bl	8000d5c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1b2      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_RCC_OscConfig+0x508>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d108      	bne.n	8001970 <HAL_RCC_OscConfig+0x4d8>
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800196e:	e029      	b.n	80019c4 <HAL_RCC_OscConfig+0x52c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d115      	bne.n	80019a4 <HAL_RCC_OscConfig+0x50c>
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_RCC_OscConfig+0x504>)
 800198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198e:	4a03      	ldr	r2, [pc, #12]	; (800199c <HAL_RCC_OscConfig+0x504>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x52c>
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
 80019a4:	4b9a      	ldr	r3, [pc, #616]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	4a99      	ldr	r2, [pc, #612]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b4:	4b96      	ldr	r3, [pc, #600]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	4a95      	ldr	r2, [pc, #596]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d016      	beq.n	80019fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f9c6 	bl	8000d5c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff f9c2 	bl	8000d5c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e162      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 80019ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ed      	beq.n	80019d4 <HAL_RCC_OscConfig+0x53c>
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f9af 	bl	8000d5c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff f9ab 	bl	8000d5c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e14b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a18:	4b7d      	ldr	r3, [pc, #500]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ed      	bne.n	8001a02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d03c      	beq.n	8001abe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a4c:	4b70      	ldr	r3, [pc, #448]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a52:	4a6f      	ldr	r2, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f97e 	bl	8000d5c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a64:	f7ff f97a 	bl	8000d5c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e11c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a76:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ef      	beq.n	8001a64 <HAL_RCC_OscConfig+0x5cc>
 8001a84:	e01b      	b.n	8001abe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a86:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a8c:	4a60      	ldr	r2, [pc, #384]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff f961 	bl	8000d5c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9e:	f7ff f95d 	bl	8000d5c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0ff      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab0:	4b57      	ldr	r3, [pc, #348]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ef      	bne.n	8001a9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80f3 	beq.w	8001cae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 80c9 	bne.w	8001c64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0203 	and.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d12c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	3b01      	subs	r3, #1
 8001af2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d123      	bne.n	8001b40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d11b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d113      	bne.n	8001b40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d109      	bne.n	8001b40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d06b      	beq.n	8001c18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d062      	beq.n	8001c0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0ac      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b56:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2d      	ldr	r2, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b62:	f7ff f8fb 	bl	8000d5c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff f8f7 	bl	8000d5c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e099      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_RCC_OscConfig+0x77c>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b98:	3a01      	subs	r2, #1
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	4311      	orrs	r1, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ba2:	0212      	lsls	r2, r2, #8
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001baa:	0852      	lsrs	r2, r2, #1
 8001bac:	3a01      	subs	r2, #1
 8001bae:	0552      	lsls	r2, r2, #21
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb6:	0852      	lsrs	r2, r2, #1
 8001bb8:	3a01      	subs	r2, #1
 8001bba:	0652      	lsls	r2, r2, #25
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bc2:	06d2      	lsls	r2, r2, #27
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	4912      	ldr	r1, [pc, #72]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be4:	f7ff f8ba 	bl	8000d5c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f8b6 	bl	8000d5c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e058      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_RCC_OscConfig+0x778>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0a:	e050      	b.n	8001cae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e04f      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d144      	bne.n	8001cae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c3c:	f7ff f88e 	bl	8000d5c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f88a 	bl	8000d5c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e02c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x7ac>
 8001c62:	e024      	b.n	8001cae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d01f      	beq.n	8001caa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff f871 	bl	8000d5c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff f86d 	bl	8000d5c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e00f      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4905      	ldr	r1, [pc, #20]	; (8001cb8 <HAL_RCC_OscConfig+0x820>)
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_OscConfig+0x824>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
 8001ca8:	e001      	b.n	8001cae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	feeefffc 	.word	0xfeeefffc

08001cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0e7      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b75      	ldr	r3, [pc, #468]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b72      	ldr	r3, [pc, #456]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4970      	ldr	r1, [pc, #448]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b6e      	ldr	r3, [pc, #440]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0cf      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d010      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b66      	ldr	r3, [pc, #408]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d908      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4960      	ldr	r1, [pc, #384]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d04c      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d121      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0a6      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d115      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e09a      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e08e      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e086      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4943      	ldr	r1, [pc, #268]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da8:	f7fe ffd8 	bl	8000d5c <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe ffd4 	bl	8000d5c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e06e      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d208      	bcs.n	8001e06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	492b      	ldr	r1, [pc, #172]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d210      	bcs.n	8001e36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 0207 	bic.w	r2, r3, #7
 8001e1c:	4923      	ldr	r1, [pc, #140]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_RCC_ClockConfig+0x1ec>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e036      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e42:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4918      	ldr	r1, [pc, #96]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4910      	ldr	r1, [pc, #64]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e74:	f000 f824 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	490b      	ldr	r1, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1fc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe ff0f 	bl	8000cbc <HAL_InitTick>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08004950 	.word	0x08004950
 8001eb8:	2000005c 	.word	0x2000005c
 8001ebc:	20000060 	.word	0x20000060

08001ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d121      	bne.n	8001f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d11e      	bne.n	8001f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e005      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d102      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	e004      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d134      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d003      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0xac>
 8001f64:	e005      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f68:	617b      	str	r3, [r7, #20]
      break;
 8001f6a:	e005      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f6e:	617b      	str	r3, [r7, #20]
      break;
 8001f70:	e002      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	617b      	str	r3, [r7, #20]
      break;
 8001f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	3301      	adds	r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	fb03 f202 	mul.w	r2, r3, r2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	0e5b      	lsrs	r3, r3, #25
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08004968 	.word	0x08004968
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	007a1200 	.word	0x007a1200

08001fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_RCC_GetHCLKFreq+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	2000005c 	.word	0x2000005c

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ff4:	f7ff fff0 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08004960 	.word	0x08004960

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002020:	f7ff ffda 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0adb      	lsrs	r3, r3, #11
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4904      	ldr	r1, [pc, #16]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08004960 	.word	0x08004960

08002048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002060:	f7ff f9b6 	bl	80013d0 <HAL_PWREx_GetVoltageRange>
 8002064:	6178      	str	r0, [r7, #20]
 8002066:	e014      	b.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	4a24      	ldr	r2, [pc, #144]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002072:	6593      	str	r3, [r2, #88]	; 0x58
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002080:	f7ff f9a6 	bl	80013d0 <HAL_PWREx_GetVoltageRange>
 8002084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002098:	d10b      	bne.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	d919      	bls.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2ba0      	cmp	r3, #160	; 0xa0
 80020a4:	d902      	bls.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a6:	2302      	movs	r3, #2
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e013      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ac:	2301      	movs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	e010      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d902      	bls.n	80020be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020b8:	2303      	movs	r3, #3
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	e00a      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d102      	bne.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e004      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b70      	cmp	r3, #112	; 0x70
 80020ce:	d101      	bne.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 0207 	bic.w	r2, r3, #7
 80020dc:	4909      	ldr	r1, [pc, #36]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	40022000 	.word	0x40022000

08002108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002110:	2300      	movs	r3, #0
 8002112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002114:	2300      	movs	r3, #0
 8002116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800212c:	d01a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800212e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002132:	d814      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800213c:	d10f      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800214a:	e00c      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f9de 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800215c:	e003      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	74fb      	strb	r3, [r7, #19]
      break;
 8002162:	e000      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800216c:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	494e      	ldr	r1, [pc, #312]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002182:	e001      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 809e 	beq.w	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800219a:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021cc:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fdc0 	bl	8000d5c <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021de:	e009      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7fe fdbc 	bl	8000d5c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d902      	bls.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	74fb      	strb	r3, [r7, #19]
        break;
 80021f2:	e005      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d15a      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002210:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01e      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	429a      	cmp	r2, r3
 8002220:	d019      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002234:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800224e:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d016      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fd7c 	bl	8000d5c <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002266:	e00b      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fd78 	bl	8000d5c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d902      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	74fb      	strb	r3, [r7, #19]
            break;
 800227e:	e006      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ec      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a2:	4904      	ldr	r1, [pc, #16]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022aa:	e009      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
 80022b0:	e006      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c0:	7c7b      	ldrb	r3, [r7, #17]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a89      	ldr	r2, [pc, #548]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022de:	4b84      	ldr	r3, [pc, #528]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 0203 	bic.w	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4980      	ldr	r1, [pc, #512]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002300:	4b7b      	ldr	r3, [pc, #492]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 020c 	bic.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	4978      	ldr	r1, [pc, #480]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	496f      	ldr	r1, [pc, #444]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	4967      	ldr	r1, [pc, #412]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	495e      	ldr	r1, [pc, #376]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	4956      	ldr	r1, [pc, #344]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023aa:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d028      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023cc:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4945      	ldr	r1, [pc, #276]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ea:	d106      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a3f      	ldr	r2, [pc, #252]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]
 80023f8:	e011      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002402:	d10c      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	2101      	movs	r1, #1
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f882 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d028      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	492d      	ldr	r1, [pc, #180]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002448:	d106      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002454:	60d3      	str	r3, [r2, #12]
 8002456:	e011      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f853 	bl	8002514 <RCCEx_PLLSAI1_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01c      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f830 	bl	8002514 <RCCEx_PLLSAI1_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002522:	4b74      	ldr	r3, [pc, #464]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d018      	beq.n	8002560 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800252e:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d10d      	bne.n	800255a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
       ||
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002546:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
       ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d047      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e044      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d018      	beq.n	800259a <RCCEx_PLLSAI1_Config+0x86>
 8002568:	2b03      	cmp	r3, #3
 800256a:	d825      	bhi.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
 800256c:	2b01      	cmp	r3, #1
 800256e:	d002      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x62>
 8002570:	2b02      	cmp	r3, #2
 8002572:	d009      	beq.n	8002588 <RCCEx_PLLSAI1_Config+0x74>
 8002574:	e020      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002576:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11d      	bne.n	80025be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002586:	e01a      	b.n	80025be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002588:	4b5a      	ldr	r3, [pc, #360]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d116      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e013      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800259a:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a6:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b6:	e006      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e004      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ce:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	430b      	orrs	r3, r1
 80025e4:	4943      	ldr	r1, [pc, #268]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d17c      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025f0:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a3f      	ldr	r2, [pc, #252]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fc:	f7fe fbae 	bl	8000d5c <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002602:	e009      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002604:	f7fe fbaa 	bl	8000d5c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d902      	bls.n	8002618 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	73fb      	strb	r3, [r7, #15]
        break;
 8002616:	e005      	b.n	8002624 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d15f      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d110      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002630:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002638:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6892      	ldr	r2, [r2, #8]
 8002640:	0211      	lsls	r1, r2, #8
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	06d2      	lsls	r2, r2, #27
 8002648:	430a      	orrs	r2, r1
 800264a:	492a      	ldr	r1, [pc, #168]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264c:	4313      	orrs	r3, r2
 800264e:	610b      	str	r3, [r1, #16]
 8002650:	e027      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d112      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002660:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6892      	ldr	r2, [r2, #8]
 8002668:	0211      	lsls	r1, r2, #8
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6912      	ldr	r2, [r2, #16]
 800266e:	0852      	lsrs	r2, r2, #1
 8002670:	3a01      	subs	r2, #1
 8002672:	0552      	lsls	r2, r2, #21
 8002674:	430a      	orrs	r2, r1
 8002676:	491f      	ldr	r1, [pc, #124]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	610b      	str	r3, [r1, #16]
 800267c:	e011      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002686:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	0211      	lsls	r1, r2, #8
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6952      	ldr	r2, [r2, #20]
 8002694:	0852      	lsrs	r2, r2, #1
 8002696:	3a01      	subs	r2, #1
 8002698:	0652      	lsls	r2, r2, #25
 800269a:	430a      	orrs	r2, r1
 800269c:	4915      	ldr	r1, [pc, #84]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fb55 	bl	8000d5c <HAL_GetTick>
 80026b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b4:	e009      	b.n	80026ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b6:	f7fe fb51 	bl	8000d5c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d902      	bls.n	80026ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	73fb      	strb	r3, [r7, #15]
          break;
 80026c8:	e005      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ef      	beq.n	80026b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000

080026f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e040      	b.n	800278c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe f9b0 	bl	8000a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fbfc 	bl	8002f34 <UART_SetConfig>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e022      	b.n	800278c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fe1c 	bl	800338c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fea3 	bl	80034d0 <UART_CheckIdleState>
 800278a:	4603      	mov	r3, r0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002794:	b480      	push	{r7}
 8002796:	b08b      	sub	sp, #44	; 0x2c
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d156      	bne.n	8002858 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_UART_Transmit_IT+0x22>
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e04f      	b.n	800285a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Transmit_IT+0x34>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e048      	b.n	800285a <HAL_UART_Transmit_IT+0xc6>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2221      	movs	r2, #33	; 0x21
 80027f8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d107      	bne.n	8002814 <HAL_UART_Transmit_IT+0x80>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a16      	ldr	r2, [pc, #88]	; (8002868 <HAL_UART_Transmit_IT+0xd4>)
 8002810:	669a      	str	r2, [r3, #104]	; 0x68
 8002812:	e002      	b.n	800281a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a15      	ldr	r2, [pc, #84]	; (800286c <HAL_UART_Transmit_IT+0xd8>)
 8002818:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	e853 3f00 	ldrex	r3, [r3]
 800282e:	613b      	str	r3, [r7, #16]
   return(result);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	69f9      	ldr	r1, [r7, #28]
 8002846:	6a3a      	ldr	r2, [r7, #32]
 8002848:	e841 2300 	strex	r3, r2, [r1]
 800284c:	61bb      	str	r3, [r7, #24]
   return(result);
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e6      	bne.n	8002822 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	e000      	b.n	800285a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002858:	2302      	movs	r3, #2
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	372c      	adds	r7, #44	; 0x2c
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	08003a2b 	.word	0x08003a2b
 800286c:	08003973 	.word	0x08003973

08002870 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002882:	2b20      	cmp	r3, #32
 8002884:	d142      	bne.n	800290c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_Receive_IT+0x22>
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e03b      	b.n	800290e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Receive_IT+0x34>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e034      	b.n	800290e <HAL_UART_Receive_IT+0x9e>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a18      	ldr	r2, [pc, #96]	; (8002918 <HAL_UART_Receive_IT+0xa8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d01f      	beq.n	80028fc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d018      	beq.n	80028fc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	613b      	str	r3, [r7, #16]
   return(result);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	69f9      	ldr	r1, [r7, #28]
 80028ee:	6a3a      	ldr	r2, [r7, #32]
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e6      	bne.n	80028ca <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	461a      	mov	r2, r3
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fef2 	bl	80036ec <UART_Start_Receive_IT>
 8002908:	4603      	mov	r3, r0
 800290a:	e000      	b.n	800290e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40008000 	.word	0x40008000

0800291c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b0ba      	sub	sp, #232	; 0xe8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002942:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002946:	f640 030f 	movw	r3, #2063	; 0x80f
 800294a:	4013      	ands	r3, r2
 800294c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d115      	bne.n	8002984 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00f      	beq.n	8002984 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 82a6 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
      }
      return;
 8002982:	e2a0      	b.n	8002ec6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8117 	beq.w	8002bbc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800298e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800299a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800299e:	4b85      	ldr	r3, [pc, #532]	; (8002bb4 <HAL_UART_IRQHandler+0x298>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 810a 	beq.w	8002bbc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d011      	beq.n	80029d8 <HAL_UART_IRQHandler+0xbc>
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d011      	beq.n	8002a08 <HAL_UART_IRQHandler+0xec>
 80029e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2202      	movs	r2, #2
 80029f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fe:	f043 0204 	orr.w	r2, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <HAL_UART_IRQHandler+0x11c>
 8002a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2204      	movs	r2, #4
 8002a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2208      	movs	r2, #8
 8002a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6a:	f043 0208 	orr.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x18a>
 8002a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 820c 	beq.w	8002eca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d005      	beq.n	8002afe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002af6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04f      	beq.n	8002b9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 febe 	bl	8003880 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d141      	bne.n	8002b96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3308      	adds	r3, #8
 8002b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b20:	e853 3f00 	ldrex	r3, [r3]
 8002b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b4e:	e841 2300 	strex	r3, r2, [r1]
 8002b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1d9      	bne.n	8002b12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d013      	beq.n	8002b8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_UART_IRQHandler+0x29c>)
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fa71 	bl	800105a <HAL_DMA_Abort_IT>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d017      	beq.n	8002bae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8c:	e00f      	b.n	8002bae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9ba 	bl	8002f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	e00b      	b.n	8002bae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9b6 	bl	8002f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	e007      	b.n	8002bae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f9b2 	bl	8002f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002bac:	e18d      	b.n	8002eca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bae:	bf00      	nop
    return;
 8002bb0:	e18b      	b.n	8002eca <HAL_UART_IRQHandler+0x5ae>
 8002bb2:	bf00      	nop
 8002bb4:	04000120 	.word	0x04000120
 8002bb8:	08003947 	.word	0x08003947

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 8146 	bne.w	8002e52 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 813f 	beq.w	8002e52 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8138 	beq.w	8002e52 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	f040 80b4 	bne.w	8002d62 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 815f 	beq.w	8002ece <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	f080 8157 	bcs.w	8002ece <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8085 	bne.w	8002d46 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c48:	e853 3f00 	ldrex	r3, [r3]
 8002c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1da      	bne.n	8002c3c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1e1      	bne.n	8002c86 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e3      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	f023 0310 	bic.w	r3, r3, #16
 8002d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e4      	bne.n	8002d06 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe f94c 	bl	8000fde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8de 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d60:	e0b5      	b.n	8002ece <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80a7 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80a2 	beq.w	8002ed2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
 8002db2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e4      	bne.n	8002d8e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3308      	adds	r3, #8
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3308      	adds	r3, #8
 8002de4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002de8:	633a      	str	r2, [r7, #48]	; 0x30
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e3      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0310 	bic.w	r3, r3, #16
 8002e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	69b9      	ldr	r1, [r7, #24]
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	e841 2300 	strex	r3, r2, [r1]
 8002e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e4      	bne.n	8002e0e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f866 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e50:	e03f      	b.n	8002ed2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <HAL_UART_IRQHandler+0x560>
 8002e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 ffc2 	bl	8003dfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e7a:	e02d      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01c      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
    }
    return;
 8002ea4:	e017      	b.n	8002ed6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
 8002eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fe13 	bl	8003aea <UART_EndTransmit_IT>
    return;
 8002ec4:	e008      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002ec6:	bf00      	nop
 8002ec8:	e006      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002eca:	bf00      	nop
 8002ecc:	e004      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002ece:	bf00      	nop
 8002ed0:	e002      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002ed2:	bf00      	nop
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002ed6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002ed8:	37e8      	adds	r7, #232	; 0xe8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop

08002ee0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f38:	b08a      	sub	sp, #40	; 0x28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4bb4      	ldr	r3, [pc, #720]	; (8003234 <UART_SetConfig+0x300>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4aa9      	ldr	r2, [pc, #676]	; (8003238 <UART_SetConfig+0x304>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4aa0      	ldr	r2, [pc, #640]	; (800323c <UART_SetConfig+0x308>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d126      	bne.n	800300c <UART_SetConfig+0xd8>
 8002fbe:	4ba0      	ldr	r3, [pc, #640]	; (8003240 <UART_SetConfig+0x30c>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d81b      	bhi.n	8003004 <UART_SetConfig+0xd0>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <UART_SetConfig+0xa0>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08002fe5 	.word	0x08002fe5
 8002fd8:	08002ff5 	.word	0x08002ff5
 8002fdc:	08002fed 	.word	0x08002fed
 8002fe0:	08002ffd 	.word	0x08002ffd
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fea:	e080      	b.n	80030ee <UART_SetConfig+0x1ba>
 8002fec:	2302      	movs	r3, #2
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff2:	e07c      	b.n	80030ee <UART_SetConfig+0x1ba>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffa:	e078      	b.n	80030ee <UART_SetConfig+0x1ba>
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003002:	e074      	b.n	80030ee <UART_SetConfig+0x1ba>
 8003004:	2310      	movs	r3, #16
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	e070      	b.n	80030ee <UART_SetConfig+0x1ba>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a8c      	ldr	r2, [pc, #560]	; (8003244 <UART_SetConfig+0x310>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d138      	bne.n	8003088 <UART_SetConfig+0x154>
 8003016:	4b8a      	ldr	r3, [pc, #552]	; (8003240 <UART_SetConfig+0x30c>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d82d      	bhi.n	8003080 <UART_SetConfig+0x14c>
 8003024:	a201      	add	r2, pc, #4	; (adr r2, 800302c <UART_SetConfig+0xf8>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	08003061 	.word	0x08003061
 8003030:	08003081 	.word	0x08003081
 8003034:	08003081 	.word	0x08003081
 8003038:	08003081 	.word	0x08003081
 800303c:	08003071 	.word	0x08003071
 8003040:	08003081 	.word	0x08003081
 8003044:	08003081 	.word	0x08003081
 8003048:	08003081 	.word	0x08003081
 800304c:	08003069 	.word	0x08003069
 8003050:	08003081 	.word	0x08003081
 8003054:	08003081 	.word	0x08003081
 8003058:	08003081 	.word	0x08003081
 800305c:	08003079 	.word	0x08003079
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e042      	b.n	80030ee <UART_SetConfig+0x1ba>
 8003068:	2302      	movs	r3, #2
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e03e      	b.n	80030ee <UART_SetConfig+0x1ba>
 8003070:	2304      	movs	r3, #4
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e03a      	b.n	80030ee <UART_SetConfig+0x1ba>
 8003078:	2308      	movs	r3, #8
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307e:	e036      	b.n	80030ee <UART_SetConfig+0x1ba>
 8003080:	2310      	movs	r3, #16
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003086:	e032      	b.n	80030ee <UART_SetConfig+0x1ba>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6a      	ldr	r2, [pc, #424]	; (8003238 <UART_SetConfig+0x304>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d12a      	bne.n	80030e8 <UART_SetConfig+0x1b4>
 8003092:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <UART_SetConfig+0x30c>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800309c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030a0:	d01a      	beq.n	80030d8 <UART_SetConfig+0x1a4>
 80030a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030a6:	d81b      	bhi.n	80030e0 <UART_SetConfig+0x1ac>
 80030a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ac:	d00c      	beq.n	80030c8 <UART_SetConfig+0x194>
 80030ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b2:	d815      	bhi.n	80030e0 <UART_SetConfig+0x1ac>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <UART_SetConfig+0x18c>
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030bc:	d008      	beq.n	80030d0 <UART_SetConfig+0x19c>
 80030be:	e00f      	b.n	80030e0 <UART_SetConfig+0x1ac>
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e012      	b.n	80030ee <UART_SetConfig+0x1ba>
 80030c8:	2302      	movs	r3, #2
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e00e      	b.n	80030ee <UART_SetConfig+0x1ba>
 80030d0:	2304      	movs	r3, #4
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e00a      	b.n	80030ee <UART_SetConfig+0x1ba>
 80030d8:	2308      	movs	r3, #8
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e006      	b.n	80030ee <UART_SetConfig+0x1ba>
 80030e0:	2310      	movs	r3, #16
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e002      	b.n	80030ee <UART_SetConfig+0x1ba>
 80030e8:	2310      	movs	r3, #16
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a51      	ldr	r2, [pc, #324]	; (8003238 <UART_SetConfig+0x304>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d17a      	bne.n	80031ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d824      	bhi.n	800314a <UART_SetConfig+0x216>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0x1d4>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800312d 	.word	0x0800312d
 800310c:	0800314b 	.word	0x0800314b
 8003110:	08003135 	.word	0x08003135
 8003114:	0800314b 	.word	0x0800314b
 8003118:	0800313b 	.word	0x0800313b
 800311c:	0800314b 	.word	0x0800314b
 8003120:	0800314b 	.word	0x0800314b
 8003124:	0800314b 	.word	0x0800314b
 8003128:	08003143 	.word	0x08003143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7fe ff60 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8003130:	61f8      	str	r0, [r7, #28]
        break;
 8003132:	e010      	b.n	8003156 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b44      	ldr	r3, [pc, #272]	; (8003248 <UART_SetConfig+0x314>)
 8003136:	61fb      	str	r3, [r7, #28]
        break;
 8003138:	e00d      	b.n	8003156 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7fe fec1 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 800313e:	61f8      	str	r0, [r7, #28]
        break;
 8003140:	e009      	b.n	8003156 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	61fb      	str	r3, [r7, #28]
        break;
 8003148:	e005      	b.n	8003156 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003154:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8107 	beq.w	800336c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	429a      	cmp	r2, r3
 800316c:	d305      	bcc.n	800317a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	429a      	cmp	r2, r3
 8003178:	d903      	bls.n	8003182 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003180:	e0f4      	b.n	800336c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2200      	movs	r2, #0
 8003186:	461c      	mov	r4, r3
 8003188:	4615      	mov	r5, r2
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	022b      	lsls	r3, r5, #8
 8003194:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003198:	0222      	lsls	r2, r4, #8
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	6849      	ldr	r1, [r1, #4]
 800319e:	0849      	lsrs	r1, r1, #1
 80031a0:	2000      	movs	r0, #0
 80031a2:	4688      	mov	r8, r1
 80031a4:	4681      	mov	r9, r0
 80031a6:	eb12 0a08 	adds.w	sl, r2, r8
 80031aa:	eb43 0b09 	adc.w	fp, r3, r9
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031bc:	4650      	mov	r0, sl
 80031be:	4659      	mov	r1, fp
 80031c0:	f7fd f85e 	bl	8000280 <__aeabi_uldivmod>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4613      	mov	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031d2:	d308      	bcc.n	80031e6 <UART_SetConfig+0x2b2>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031da:	d204      	bcs.n	80031e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	e0c2      	b.n	800336c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031ec:	e0be      	b.n	800336c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f6:	d16a      	bne.n	80032ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80031f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d834      	bhi.n	800326a <UART_SetConfig+0x336>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <UART_SetConfig+0x2d4>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800322d 	.word	0x0800322d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003255 	.word	0x08003255
 8003214:	0800326b 	.word	0x0800326b
 8003218:	0800325b 	.word	0x0800325b
 800321c:	0800326b 	.word	0x0800326b
 8003220:	0800326b 	.word	0x0800326b
 8003224:	0800326b 	.word	0x0800326b
 8003228:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7fe fee0 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8003230:	61f8      	str	r0, [r7, #28]
        break;
 8003232:	e020      	b.n	8003276 <UART_SetConfig+0x342>
 8003234:	efff69f3 	.word	0xefff69f3
 8003238:	40008000 	.word	0x40008000
 800323c:	40013800 	.word	0x40013800
 8003240:	40021000 	.word	0x40021000
 8003244:	40004400 	.word	0x40004400
 8003248:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7fe fee6 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8003250:	61f8      	str	r0, [r7, #28]
        break;
 8003252:	e010      	b.n	8003276 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <UART_SetConfig+0x454>)
 8003256:	61fb      	str	r3, [r7, #28]
        break;
 8003258:	e00d      	b.n	8003276 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7fe fe31 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 800325e:	61f8      	str	r0, [r7, #28]
        break;
 8003260:	e009      	b.n	8003276 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	61fb      	str	r3, [r7, #28]
        break;
 8003268:	e005      	b.n	8003276 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d077      	beq.n	800336c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005a      	lsls	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	441a      	add	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d916      	bls.n	80032c6 <UART_SetConfig+0x392>
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329e:	d212      	bcs.n	80032c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f023 030f 	bic.w	r3, r3, #15
 80032a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	8afa      	ldrh	r2, [r7, #22]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e052      	b.n	800336c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032cc:	e04e      	b.n	800336c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d827      	bhi.n	8003326 <UART_SetConfig+0x3f2>
 80032d6:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <UART_SetConfig+0x3a8>)
 80032d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032dc:	08003301 	.word	0x08003301
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003311 	.word	0x08003311
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003317 	.word	0x08003317
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003327 	.word	0x08003327
 80032f8:	08003327 	.word	0x08003327
 80032fc:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7fe fe76 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8003304:	61f8      	str	r0, [r7, #28]
        break;
 8003306:	e014      	b.n	8003332 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7fe fe88 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 800330c:	61f8      	str	r0, [r7, #28]
        break;
 800330e:	e010      	b.n	8003332 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <UART_SetConfig+0x454>)
 8003312:	61fb      	str	r3, [r7, #28]
        break;
 8003314:	e00d      	b.n	8003332 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7fe fdd3 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 800331a:	61f8      	str	r0, [r7, #28]
        break;
 800331c:	e009      	b.n	8003332 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	61fb      	str	r3, [r7, #28]
        break;
 8003324:	e005      	b.n	8003332 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003330:	bf00      	nop
    }

    if (pclk != 0U)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d019      	beq.n	800336c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	085a      	lsrs	r2, r3, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	441a      	add	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d909      	bls.n	8003366 <UART_SetConfig+0x432>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d205      	bcs.n	8003366 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e002      	b.n	800336c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003378:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800337c:	4618      	mov	r0, r3
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	00f42400 	.word	0x00f42400

0800338c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01a      	beq.n	80034a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348a:	d10a      	bne.n	80034a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034e0:	f7fd fc3c 	bl	8000d5c <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d10e      	bne.n	8003512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f82d 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e023      	b.n	800355a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d10e      	bne.n	800353e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f817 	bl	8003562 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e00d      	b.n	800355a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b09c      	sub	sp, #112	; 0x70
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003572:	e0a5      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	f000 80a1 	beq.w	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fd fbed 	bl	8000d5c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <UART_WaitOnFlagUntilTimeout+0x32>
 800358e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003590:	2b00      	cmp	r3, #0
 8003592:	d13e      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035a8:	667b      	str	r3, [r7, #100]	; 0x64
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e6      	bne.n	8003594 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3308      	adds	r3, #8
 80035cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	663b      	str	r3, [r7, #96]	; 0x60
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3308      	adds	r3, #8
 80035e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e067      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d04f      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d147      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003638:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800364e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
 800365a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800365e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e6      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	613b      	str	r3, [r7, #16]
   return(result);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	66bb      	str	r3, [r7, #104]	; 0x68
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800368c:	623a      	str	r2, [r7, #32]
 800368e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	61bb      	str	r3, [r7, #24]
   return(result);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e010      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	429a      	cmp	r2, r3
 80036dc:	f43f af4a 	beq.w	8003574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3770      	adds	r7, #112	; 0x70
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b097      	sub	sp, #92	; 0x5c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	d10e      	bne.n	800373e <UART_Start_Receive_IT+0x52>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <UART_Start_Receive_IT+0x48>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800372e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003732:	e02d      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	22ff      	movs	r2, #255	; 0xff
 8003738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373c:	e028      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <UART_Start_Receive_IT+0x76>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <UART_Start_Receive_IT+0x6c>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	22ff      	movs	r2, #255	; 0xff
 8003752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003756:	e01b      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	227f      	movs	r2, #127	; 0x7f
 800375c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003760:	e016      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800376a:	d10d      	bne.n	8003788 <UART_Start_Receive_IT+0x9c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <UART_Start_Receive_IT+0x92>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	227f      	movs	r2, #127	; 0x7f
 8003778:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377c:	e008      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	223f      	movs	r2, #63	; 0x3f
 8003782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003786:	e003      	b.n	8003790 <UART_Start_Receive_IT+0xa4>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2222      	movs	r2, #34	; 0x22
 800379c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	657b      	str	r3, [r7, #84]	; 0x54
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3308      	adds	r3, #8
 80037bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037be:	64ba      	str	r2, [r7, #72]	; 0x48
 80037c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e5      	bne.n	800379e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037da:	d107      	bne.n	80037ec <UART_Start_Receive_IT+0x100>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a24      	ldr	r2, [pc, #144]	; (8003878 <UART_Start_Receive_IT+0x18c>)
 80037e8:	665a      	str	r2, [r3, #100]	; 0x64
 80037ea:	e002      	b.n	80037f2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <UART_Start_Receive_IT+0x190>)
 80037f0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d019      	beq.n	8003836 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003820:	637b      	str	r3, [r7, #52]	; 0x34
 8003822:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <UART_Start_Receive_IT+0x116>
 8003834:	e018      	b.n	8003868 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	613b      	str	r3, [r7, #16]
   return(result);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f043 0320 	orr.w	r3, r3, #32
 800384a:	653b      	str	r3, [r7, #80]	; 0x50
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	69f9      	ldr	r1, [r7, #28]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	61bb      	str	r3, [r7, #24]
   return(result);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e6      	bne.n	8003836 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	375c      	adds	r7, #92	; 0x5c
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	08003c9f 	.word	0x08003c9f
 800387c:	08003b3f 	.word	0x08003b3f

08003880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b095      	sub	sp, #84	; 0x54
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800389c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a6:	643b      	str	r3, [r7, #64]	; 0x40
 80038a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e6      	bne.n	8003888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3308      	adds	r3, #8
 80038d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e5      	bne.n	80038ba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d118      	bne.n	8003928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	60bb      	str	r3, [r7, #8]
   return(result);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f023 0310 	bic.w	r3, r3, #16
 800390a:	647b      	str	r3, [r7, #68]	; 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	613b      	str	r3, [r7, #16]
   return(result);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	665a      	str	r2, [r3, #100]	; 0x64
}
 800393a:	bf00      	nop
 800393c:	3754      	adds	r7, #84	; 0x54
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff facf 	bl	8002f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003972:	b480      	push	{r7}
 8003974:	b08f      	sub	sp, #60	; 0x3c
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800397e:	2b21      	cmp	r3, #33	; 0x21
 8003980:	d14d      	bne.n	8003a1e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d132      	bne.n	80039f4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	61fb      	str	r3, [r7, #28]
   return(result);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e6      	bne.n	800398e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	613b      	str	r3, [r7, #16]
   return(result);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e6      	bne.n	80039c0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80039f2:	e014      	b.n	8003a1e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b292      	uxth	r2, r2
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003a1e:	bf00      	nop
 8003a20:	373c      	adds	r7, #60	; 0x3c
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b091      	sub	sp, #68	; 0x44
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a36:	2b21      	cmp	r3, #33	; 0x21
 8003a38:	d151      	bne.n	8003ade <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d132      	bne.n	8003aac <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	623b      	str	r3, [r7, #32]
   return(result);
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
 8003a66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e6      	bne.n	8003a46 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e6      	bne.n	8003a78 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003aaa:	e018      	b.n	8003ade <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	1c9a      	adds	r2, r3, #2
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003ade:	bf00      	nop
 8003ae0:	3744      	adds	r7, #68	; 0x44
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b088      	sub	sp, #32
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e6      	bne.n	8003af2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff f9d5 	bl	8002ee0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b096      	sub	sp, #88	; 0x58
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b54:	2b22      	cmp	r3, #34	; 0x22
 8003b56:	f040 8094 	bne.w	8003c82 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003b68:	b2d9      	uxtb	r1, r3
 8003b6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	400a      	ands	r2, r1
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d179      	bne.n	8003c96 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	e853 3f00 	ldrex	r3, [r3]
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e6      	bne.n	8003ba2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	623b      	str	r3, [r7, #32]
   return(result);
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bf4:	633a      	str	r2, [r7, #48]	; 0x30
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e5      	bne.n	8003bd4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d12e      	bne.n	8003c7a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0310 	bic.w	r3, r3, #16
 8003c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e6      	bne.n	8003c22 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d103      	bne.n	8003c6a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2210      	movs	r2, #16
 8003c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff f952 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c78:	e00d      	b.n	8003c96 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff f93a 	bl	8002ef4 <HAL_UART_RxCpltCallback>
}
 8003c80:	e009      	b.n	8003c96 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	8b1b      	ldrh	r3, [r3, #24]
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	b292      	uxth	r2, r2
 8003c94:	831a      	strh	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	3758      	adds	r7, #88	; 0x58
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b096      	sub	sp, #88	; 0x58
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb4:	2b22      	cmp	r3, #34	; 0x22
 8003cb6:	f040 8094 	bne.w	8003de2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cc0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cca:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003cce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d179      	bne.n	8003df6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	e853 3f00 	ldrex	r3, [r3]
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d20:	643b      	str	r3, [r7, #64]	; 0x40
 8003d22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d28:	e841 2300 	strex	r3, r2, [r1]
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1e6      	bne.n	8003d02 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3308      	adds	r3, #8
 8003d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d12e      	bne.n	8003dda <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f023 0310 	bic.w	r3, r3, #16
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6979      	ldr	r1, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	613b      	str	r3, [r7, #16]
   return(result);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d103      	bne.n	8003dca <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2210      	movs	r2, #16
 8003dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff f8a2 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dd8:	e00d      	b.n	8003df6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff f88a 	bl	8002ef4 <HAL_UART_RxCpltCallback>
}
 8003de0:	e009      	b.n	8003df6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	8b1b      	ldrh	r3, [r3, #24]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0208 	orr.w	r2, r2, #8
 8003df2:	b292      	uxth	r2, r2
 8003df4:	831a      	strh	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	3758      	adds	r7, #88	; 0x58
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <__errno>:
 8003e14:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <__errno+0x8>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000068 	.word	0x20000068

08003e20 <__libc_init_array>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4d0d      	ldr	r5, [pc, #52]	; (8003e58 <__libc_init_array+0x38>)
 8003e24:	4c0d      	ldr	r4, [pc, #52]	; (8003e5c <__libc_init_array+0x3c>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	42a6      	cmp	r6, r4
 8003e2e:	d109      	bne.n	8003e44 <__libc_init_array+0x24>
 8003e30:	4d0b      	ldr	r5, [pc, #44]	; (8003e60 <__libc_init_array+0x40>)
 8003e32:	4c0c      	ldr	r4, [pc, #48]	; (8003e64 <__libc_init_array+0x44>)
 8003e34:	f000 fcba 	bl	80047ac <_init>
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	42a6      	cmp	r6, r4
 8003e40:	d105      	bne.n	8003e4e <__libc_init_array+0x2e>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e48:	4798      	blx	r3
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7ee      	b.n	8003e2c <__libc_init_array+0xc>
 8003e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e52:	4798      	blx	r3
 8003e54:	3601      	adds	r6, #1
 8003e56:	e7f2      	b.n	8003e3e <__libc_init_array+0x1e>
 8003e58:	08004ad4 	.word	0x08004ad4
 8003e5c:	08004ad4 	.word	0x08004ad4
 8003e60:	08004ad4 	.word	0x08004ad4
 8003e64:	08004ad8 	.word	0x08004ad8

08003e68 <isalnum>:
 8003e68:	4b02      	ldr	r3, [pc, #8]	; (8003e74 <isalnum+0xc>)
 8003e6a:	4418      	add	r0, r3
 8003e6c:	7840      	ldrb	r0, [r0, #1]
 8003e6e:	f000 0007 	and.w	r0, r0, #7
 8003e72:	4770      	bx	lr
 8003e74:	08004998 	.word	0x08004998

08003e78 <malloc>:
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <malloc+0xc>)
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	f000 b87f 	b.w	8003f80 <_malloc_r>
 8003e82:	bf00      	nop
 8003e84:	20000068 	.word	0x20000068

08003e88 <free>:
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <free+0xc>)
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f000 b80b 	b.w	8003ea8 <_free_r>
 8003e92:	bf00      	nop
 8003e94:	20000068 	.word	0x20000068

08003e98 <memset>:
 8003e98:	4402      	add	r2, r0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <_free_r>:
 8003ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003eaa:	2900      	cmp	r1, #0
 8003eac:	d044      	beq.n	8003f38 <_free_r+0x90>
 8003eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb2:	9001      	str	r0, [sp, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8003eba:	bfb8      	it	lt
 8003ebc:	18e4      	addlt	r4, r4, r3
 8003ebe:	f000 f917 	bl	80040f0 <__malloc_lock>
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <_free_r+0x94>)
 8003ec4:	9801      	ldr	r0, [sp, #4]
 8003ec6:	6813      	ldr	r3, [r2, #0]
 8003ec8:	b933      	cbnz	r3, 8003ed8 <_free_r+0x30>
 8003eca:	6063      	str	r3, [r4, #4]
 8003ecc:	6014      	str	r4, [r2, #0]
 8003ece:	b003      	add	sp, #12
 8003ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ed4:	f000 b912 	b.w	80040fc <__malloc_unlock>
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	d908      	bls.n	8003eee <_free_r+0x46>
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1961      	adds	r1, r4, r5
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	bf01      	itttt	eq
 8003ee4:	6819      	ldreq	r1, [r3, #0]
 8003ee6:	685b      	ldreq	r3, [r3, #4]
 8003ee8:	1949      	addeq	r1, r1, r5
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	e7ed      	b.n	8003eca <_free_r+0x22>
 8003eee:	461a      	mov	r2, r3
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b10b      	cbz	r3, 8003ef8 <_free_r+0x50>
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d9fa      	bls.n	8003eee <_free_r+0x46>
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	1855      	adds	r5, r2, r1
 8003efc:	42a5      	cmp	r5, r4
 8003efe:	d10b      	bne.n	8003f18 <_free_r+0x70>
 8003f00:	6824      	ldr	r4, [r4, #0]
 8003f02:	4421      	add	r1, r4
 8003f04:	1854      	adds	r4, r2, r1
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	d1e0      	bne.n	8003ece <_free_r+0x26>
 8003f0c:	681c      	ldr	r4, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	6053      	str	r3, [r2, #4]
 8003f12:	4421      	add	r1, r4
 8003f14:	6011      	str	r1, [r2, #0]
 8003f16:	e7da      	b.n	8003ece <_free_r+0x26>
 8003f18:	d902      	bls.n	8003f20 <_free_r+0x78>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	6003      	str	r3, [r0, #0]
 8003f1e:	e7d6      	b.n	8003ece <_free_r+0x26>
 8003f20:	6825      	ldr	r5, [r4, #0]
 8003f22:	1961      	adds	r1, r4, r5
 8003f24:	428b      	cmp	r3, r1
 8003f26:	bf04      	itt	eq
 8003f28:	6819      	ldreq	r1, [r3, #0]
 8003f2a:	685b      	ldreq	r3, [r3, #4]
 8003f2c:	6063      	str	r3, [r4, #4]
 8003f2e:	bf04      	itt	eq
 8003f30:	1949      	addeq	r1, r1, r5
 8003f32:	6021      	streq	r1, [r4, #0]
 8003f34:	6054      	str	r4, [r2, #4]
 8003f36:	e7ca      	b.n	8003ece <_free_r+0x26>
 8003f38:	b003      	add	sp, #12
 8003f3a:	bd30      	pop	{r4, r5, pc}
 8003f3c:	200001d8 	.word	0x200001d8

08003f40 <sbrk_aligned>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4e0e      	ldr	r6, [pc, #56]	; (8003f7c <sbrk_aligned+0x3c>)
 8003f44:	460c      	mov	r4, r1
 8003f46:	6831      	ldr	r1, [r6, #0]
 8003f48:	4605      	mov	r5, r0
 8003f4a:	b911      	cbnz	r1, 8003f52 <sbrk_aligned+0x12>
 8003f4c:	f000 f88c 	bl	8004068 <_sbrk_r>
 8003f50:	6030      	str	r0, [r6, #0]
 8003f52:	4621      	mov	r1, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	f000 f887 	bl	8004068 <_sbrk_r>
 8003f5a:	1c43      	adds	r3, r0, #1
 8003f5c:	d00a      	beq.n	8003f74 <sbrk_aligned+0x34>
 8003f5e:	1cc4      	adds	r4, r0, #3
 8003f60:	f024 0403 	bic.w	r4, r4, #3
 8003f64:	42a0      	cmp	r0, r4
 8003f66:	d007      	beq.n	8003f78 <sbrk_aligned+0x38>
 8003f68:	1a21      	subs	r1, r4, r0
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 f87c 	bl	8004068 <_sbrk_r>
 8003f70:	3001      	adds	r0, #1
 8003f72:	d101      	bne.n	8003f78 <sbrk_aligned+0x38>
 8003f74:	f04f 34ff 	mov.w	r4, #4294967295
 8003f78:	4620      	mov	r0, r4
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	200001dc 	.word	0x200001dc

08003f80 <_malloc_r>:
 8003f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f84:	1ccd      	adds	r5, r1, #3
 8003f86:	f025 0503 	bic.w	r5, r5, #3
 8003f8a:	3508      	adds	r5, #8
 8003f8c:	2d0c      	cmp	r5, #12
 8003f8e:	bf38      	it	cc
 8003f90:	250c      	movcc	r5, #12
 8003f92:	2d00      	cmp	r5, #0
 8003f94:	4607      	mov	r7, r0
 8003f96:	db01      	blt.n	8003f9c <_malloc_r+0x1c>
 8003f98:	42a9      	cmp	r1, r5
 8003f9a:	d905      	bls.n	8003fa8 <_malloc_r+0x28>
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	2600      	movs	r6, #0
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa8:	4e2e      	ldr	r6, [pc, #184]	; (8004064 <_malloc_r+0xe4>)
 8003faa:	f000 f8a1 	bl	80040f0 <__malloc_lock>
 8003fae:	6833      	ldr	r3, [r6, #0]
 8003fb0:	461c      	mov	r4, r3
 8003fb2:	bb34      	cbnz	r4, 8004002 <_malloc_r+0x82>
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	f7ff ffc2 	bl	8003f40 <sbrk_aligned>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	d14d      	bne.n	800405e <_malloc_r+0xde>
 8003fc2:	6834      	ldr	r4, [r6, #0]
 8003fc4:	4626      	mov	r6, r4
 8003fc6:	2e00      	cmp	r6, #0
 8003fc8:	d140      	bne.n	800404c <_malloc_r+0xcc>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	4631      	mov	r1, r6
 8003fce:	4638      	mov	r0, r7
 8003fd0:	eb04 0803 	add.w	r8, r4, r3
 8003fd4:	f000 f848 	bl	8004068 <_sbrk_r>
 8003fd8:	4580      	cmp	r8, r0
 8003fda:	d13a      	bne.n	8004052 <_malloc_r+0xd2>
 8003fdc:	6821      	ldr	r1, [r4, #0]
 8003fde:	3503      	adds	r5, #3
 8003fe0:	1a6d      	subs	r5, r5, r1
 8003fe2:	f025 0503 	bic.w	r5, r5, #3
 8003fe6:	3508      	adds	r5, #8
 8003fe8:	2d0c      	cmp	r5, #12
 8003fea:	bf38      	it	cc
 8003fec:	250c      	movcc	r5, #12
 8003fee:	4629      	mov	r1, r5
 8003ff0:	4638      	mov	r0, r7
 8003ff2:	f7ff ffa5 	bl	8003f40 <sbrk_aligned>
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d02b      	beq.n	8004052 <_malloc_r+0xd2>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	442b      	add	r3, r5
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	e00e      	b.n	8004020 <_malloc_r+0xa0>
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	1b52      	subs	r2, r2, r5
 8004006:	d41e      	bmi.n	8004046 <_malloc_r+0xc6>
 8004008:	2a0b      	cmp	r2, #11
 800400a:	d916      	bls.n	800403a <_malloc_r+0xba>
 800400c:	1961      	adds	r1, r4, r5
 800400e:	42a3      	cmp	r3, r4
 8004010:	6025      	str	r5, [r4, #0]
 8004012:	bf18      	it	ne
 8004014:	6059      	strne	r1, [r3, #4]
 8004016:	6863      	ldr	r3, [r4, #4]
 8004018:	bf08      	it	eq
 800401a:	6031      	streq	r1, [r6, #0]
 800401c:	5162      	str	r2, [r4, r5]
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	4638      	mov	r0, r7
 8004022:	f104 060b 	add.w	r6, r4, #11
 8004026:	f000 f869 	bl	80040fc <__malloc_unlock>
 800402a:	f026 0607 	bic.w	r6, r6, #7
 800402e:	1d23      	adds	r3, r4, #4
 8004030:	1af2      	subs	r2, r6, r3
 8004032:	d0b6      	beq.n	8003fa2 <_malloc_r+0x22>
 8004034:	1b9b      	subs	r3, r3, r6
 8004036:	50a3      	str	r3, [r4, r2]
 8004038:	e7b3      	b.n	8003fa2 <_malloc_r+0x22>
 800403a:	6862      	ldr	r2, [r4, #4]
 800403c:	42a3      	cmp	r3, r4
 800403e:	bf0c      	ite	eq
 8004040:	6032      	streq	r2, [r6, #0]
 8004042:	605a      	strne	r2, [r3, #4]
 8004044:	e7ec      	b.n	8004020 <_malloc_r+0xa0>
 8004046:	4623      	mov	r3, r4
 8004048:	6864      	ldr	r4, [r4, #4]
 800404a:	e7b2      	b.n	8003fb2 <_malloc_r+0x32>
 800404c:	4634      	mov	r4, r6
 800404e:	6876      	ldr	r6, [r6, #4]
 8004050:	e7b9      	b.n	8003fc6 <_malloc_r+0x46>
 8004052:	230c      	movs	r3, #12
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4638      	mov	r0, r7
 8004058:	f000 f850 	bl	80040fc <__malloc_unlock>
 800405c:	e7a1      	b.n	8003fa2 <_malloc_r+0x22>
 800405e:	6025      	str	r5, [r4, #0]
 8004060:	e7de      	b.n	8004020 <_malloc_r+0xa0>
 8004062:	bf00      	nop
 8004064:	200001d8 	.word	0x200001d8

08004068 <_sbrk_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4d06      	ldr	r5, [pc, #24]	; (8004084 <_sbrk_r+0x1c>)
 800406c:	2300      	movs	r3, #0
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc fd98 	bl	8000ba8 <_sbrk>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_sbrk_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_sbrk_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200001e0 	.word	0x200001e0

08004088 <sniprintf>:
 8004088:	b40c      	push	{r2, r3}
 800408a:	b530      	push	{r4, r5, lr}
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <sniprintf+0x64>)
 800408e:	1e0c      	subs	r4, r1, #0
 8004090:	681d      	ldr	r5, [r3, #0]
 8004092:	b09d      	sub	sp, #116	; 0x74
 8004094:	da08      	bge.n	80040a8 <sniprintf+0x20>
 8004096:	238b      	movs	r3, #139	; 0x8b
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	f04f 30ff 	mov.w	r0, #4294967295
 800409e:	b01d      	add	sp, #116	; 0x74
 80040a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040a4:	b002      	add	sp, #8
 80040a6:	4770      	bx	lr
 80040a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80040ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040b0:	bf14      	ite	ne
 80040b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040b6:	4623      	moveq	r3, r4
 80040b8:	9304      	str	r3, [sp, #16]
 80040ba:	9307      	str	r3, [sp, #28]
 80040bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040c0:	9002      	str	r0, [sp, #8]
 80040c2:	9006      	str	r0, [sp, #24]
 80040c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80040c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040ca:	ab21      	add	r3, sp, #132	; 0x84
 80040cc:	a902      	add	r1, sp, #8
 80040ce:	4628      	mov	r0, r5
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	f000 f875 	bl	80041c0 <_svfiprintf_r>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	bfbc      	itt	lt
 80040da:	238b      	movlt	r3, #139	; 0x8b
 80040dc:	602b      	strlt	r3, [r5, #0]
 80040de:	2c00      	cmp	r4, #0
 80040e0:	d0dd      	beq.n	800409e <sniprintf+0x16>
 80040e2:	9b02      	ldr	r3, [sp, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	e7d9      	b.n	800409e <sniprintf+0x16>
 80040ea:	bf00      	nop
 80040ec:	20000068 	.word	0x20000068

080040f0 <__malloc_lock>:
 80040f0:	4801      	ldr	r0, [pc, #4]	; (80040f8 <__malloc_lock+0x8>)
 80040f2:	f000 baf9 	b.w	80046e8 <__retarget_lock_acquire_recursive>
 80040f6:	bf00      	nop
 80040f8:	200001e4 	.word	0x200001e4

080040fc <__malloc_unlock>:
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <__malloc_unlock+0x8>)
 80040fe:	f000 baf4 	b.w	80046ea <__retarget_lock_release_recursive>
 8004102:	bf00      	nop
 8004104:	200001e4 	.word	0x200001e4

08004108 <__ssputs_r>:
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	688e      	ldr	r6, [r1, #8]
 800410e:	429e      	cmp	r6, r3
 8004110:	4682      	mov	sl, r0
 8004112:	460c      	mov	r4, r1
 8004114:	4690      	mov	r8, r2
 8004116:	461f      	mov	r7, r3
 8004118:	d838      	bhi.n	800418c <__ssputs_r+0x84>
 800411a:	898a      	ldrh	r2, [r1, #12]
 800411c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004120:	d032      	beq.n	8004188 <__ssputs_r+0x80>
 8004122:	6825      	ldr	r5, [r4, #0]
 8004124:	6909      	ldr	r1, [r1, #16]
 8004126:	eba5 0901 	sub.w	r9, r5, r1
 800412a:	6965      	ldr	r5, [r4, #20]
 800412c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004134:	3301      	adds	r3, #1
 8004136:	444b      	add	r3, r9
 8004138:	106d      	asrs	r5, r5, #1
 800413a:	429d      	cmp	r5, r3
 800413c:	bf38      	it	cc
 800413e:	461d      	movcc	r5, r3
 8004140:	0553      	lsls	r3, r2, #21
 8004142:	d531      	bpl.n	80041a8 <__ssputs_r+0xa0>
 8004144:	4629      	mov	r1, r5
 8004146:	f7ff ff1b 	bl	8003f80 <_malloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	b950      	cbnz	r0, 8004164 <__ssputs_r+0x5c>
 800414e:	230c      	movs	r3, #12
 8004150:	f8ca 3000 	str.w	r3, [sl]
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	6921      	ldr	r1, [r4, #16]
 8004166:	464a      	mov	r2, r9
 8004168:	f000 fac0 	bl	80046ec <memcpy>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	6126      	str	r6, [r4, #16]
 800417a:	6165      	str	r5, [r4, #20]
 800417c:	444e      	add	r6, r9
 800417e:	eba5 0509 	sub.w	r5, r5, r9
 8004182:	6026      	str	r6, [r4, #0]
 8004184:	60a5      	str	r5, [r4, #8]
 8004186:	463e      	mov	r6, r7
 8004188:	42be      	cmp	r6, r7
 800418a:	d900      	bls.n	800418e <__ssputs_r+0x86>
 800418c:	463e      	mov	r6, r7
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	4632      	mov	r2, r6
 8004192:	4641      	mov	r1, r8
 8004194:	f000 fab8 	bl	8004708 <memmove>
 8004198:	68a3      	ldr	r3, [r4, #8]
 800419a:	1b9b      	subs	r3, r3, r6
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	4433      	add	r3, r6
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	2000      	movs	r0, #0
 80041a6:	e7db      	b.n	8004160 <__ssputs_r+0x58>
 80041a8:	462a      	mov	r2, r5
 80041aa:	f000 fac7 	bl	800473c <_realloc_r>
 80041ae:	4606      	mov	r6, r0
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d1e1      	bne.n	8004178 <__ssputs_r+0x70>
 80041b4:	6921      	ldr	r1, [r4, #16]
 80041b6:	4650      	mov	r0, sl
 80041b8:	f7ff fe76 	bl	8003ea8 <_free_r>
 80041bc:	e7c7      	b.n	800414e <__ssputs_r+0x46>
	...

080041c0 <_svfiprintf_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4698      	mov	r8, r3
 80041c6:	898b      	ldrh	r3, [r1, #12]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	b09d      	sub	sp, #116	; 0x74
 80041cc:	4607      	mov	r7, r0
 80041ce:	460d      	mov	r5, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	d50e      	bpl.n	80041f2 <_svfiprintf_r+0x32>
 80041d4:	690b      	ldr	r3, [r1, #16]
 80041d6:	b963      	cbnz	r3, 80041f2 <_svfiprintf_r+0x32>
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	f7ff fed1 	bl	8003f80 <_malloc_r>
 80041de:	6028      	str	r0, [r5, #0]
 80041e0:	6128      	str	r0, [r5, #16]
 80041e2:	b920      	cbnz	r0, 80041ee <_svfiprintf_r+0x2e>
 80041e4:	230c      	movs	r3, #12
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	e0d1      	b.n	8004392 <_svfiprintf_r+0x1d2>
 80041ee:	2340      	movs	r3, #64	; 0x40
 80041f0:	616b      	str	r3, [r5, #20]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9309      	str	r3, [sp, #36]	; 0x24
 80041f6:	2320      	movs	r3, #32
 80041f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004200:	2330      	movs	r3, #48	; 0x30
 8004202:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043ac <_svfiprintf_r+0x1ec>
 8004206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800420a:	f04f 0901 	mov.w	r9, #1
 800420e:	4623      	mov	r3, r4
 8004210:	469a      	mov	sl, r3
 8004212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004216:	b10a      	cbz	r2, 800421c <_svfiprintf_r+0x5c>
 8004218:	2a25      	cmp	r2, #37	; 0x25
 800421a:	d1f9      	bne.n	8004210 <_svfiprintf_r+0x50>
 800421c:	ebba 0b04 	subs.w	fp, sl, r4
 8004220:	d00b      	beq.n	800423a <_svfiprintf_r+0x7a>
 8004222:	465b      	mov	r3, fp
 8004224:	4622      	mov	r2, r4
 8004226:	4629      	mov	r1, r5
 8004228:	4638      	mov	r0, r7
 800422a:	f7ff ff6d 	bl	8004108 <__ssputs_r>
 800422e:	3001      	adds	r0, #1
 8004230:	f000 80aa 	beq.w	8004388 <_svfiprintf_r+0x1c8>
 8004234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004236:	445a      	add	r2, fp
 8004238:	9209      	str	r2, [sp, #36]	; 0x24
 800423a:	f89a 3000 	ldrb.w	r3, [sl]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a2 	beq.w	8004388 <_svfiprintf_r+0x1c8>
 8004244:	2300      	movs	r3, #0
 8004246:	f04f 32ff 	mov.w	r2, #4294967295
 800424a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800424e:	f10a 0a01 	add.w	sl, sl, #1
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	9307      	str	r3, [sp, #28]
 8004256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800425a:	931a      	str	r3, [sp, #104]	; 0x68
 800425c:	4654      	mov	r4, sl
 800425e:	2205      	movs	r2, #5
 8004260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004264:	4851      	ldr	r0, [pc, #324]	; (80043ac <_svfiprintf_r+0x1ec>)
 8004266:	f7fb ffbb 	bl	80001e0 <memchr>
 800426a:	9a04      	ldr	r2, [sp, #16]
 800426c:	b9d8      	cbnz	r0, 80042a6 <_svfiprintf_r+0xe6>
 800426e:	06d0      	lsls	r0, r2, #27
 8004270:	bf44      	itt	mi
 8004272:	2320      	movmi	r3, #32
 8004274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004278:	0711      	lsls	r1, r2, #28
 800427a:	bf44      	itt	mi
 800427c:	232b      	movmi	r3, #43	; 0x2b
 800427e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004282:	f89a 3000 	ldrb.w	r3, [sl]
 8004286:	2b2a      	cmp	r3, #42	; 0x2a
 8004288:	d015      	beq.n	80042b6 <_svfiprintf_r+0xf6>
 800428a:	9a07      	ldr	r2, [sp, #28]
 800428c:	4654      	mov	r4, sl
 800428e:	2000      	movs	r0, #0
 8004290:	f04f 0c0a 	mov.w	ip, #10
 8004294:	4621      	mov	r1, r4
 8004296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800429a:	3b30      	subs	r3, #48	; 0x30
 800429c:	2b09      	cmp	r3, #9
 800429e:	d94e      	bls.n	800433e <_svfiprintf_r+0x17e>
 80042a0:	b1b0      	cbz	r0, 80042d0 <_svfiprintf_r+0x110>
 80042a2:	9207      	str	r2, [sp, #28]
 80042a4:	e014      	b.n	80042d0 <_svfiprintf_r+0x110>
 80042a6:	eba0 0308 	sub.w	r3, r0, r8
 80042aa:	fa09 f303 	lsl.w	r3, r9, r3
 80042ae:	4313      	orrs	r3, r2
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	46a2      	mov	sl, r4
 80042b4:	e7d2      	b.n	800425c <_svfiprintf_r+0x9c>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	1d19      	adds	r1, r3, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	9103      	str	r1, [sp, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfbb      	ittet	lt
 80042c2:	425b      	neglt	r3, r3
 80042c4:	f042 0202 	orrlt.w	r2, r2, #2
 80042c8:	9307      	strge	r3, [sp, #28]
 80042ca:	9307      	strlt	r3, [sp, #28]
 80042cc:	bfb8      	it	lt
 80042ce:	9204      	strlt	r2, [sp, #16]
 80042d0:	7823      	ldrb	r3, [r4, #0]
 80042d2:	2b2e      	cmp	r3, #46	; 0x2e
 80042d4:	d10c      	bne.n	80042f0 <_svfiprintf_r+0x130>
 80042d6:	7863      	ldrb	r3, [r4, #1]
 80042d8:	2b2a      	cmp	r3, #42	; 0x2a
 80042da:	d135      	bne.n	8004348 <_svfiprintf_r+0x188>
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	9203      	str	r2, [sp, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bfb8      	it	lt
 80042e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ec:	3402      	adds	r4, #2
 80042ee:	9305      	str	r3, [sp, #20]
 80042f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043bc <_svfiprintf_r+0x1fc>
 80042f4:	7821      	ldrb	r1, [r4, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	4650      	mov	r0, sl
 80042fa:	f7fb ff71 	bl	80001e0 <memchr>
 80042fe:	b140      	cbz	r0, 8004312 <_svfiprintf_r+0x152>
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	eba0 000a 	sub.w	r0, r0, sl
 8004306:	fa03 f000 	lsl.w	r0, r3, r0
 800430a:	9b04      	ldr	r3, [sp, #16]
 800430c:	4303      	orrs	r3, r0
 800430e:	3401      	adds	r4, #1
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004316:	4826      	ldr	r0, [pc, #152]	; (80043b0 <_svfiprintf_r+0x1f0>)
 8004318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800431c:	2206      	movs	r2, #6
 800431e:	f7fb ff5f 	bl	80001e0 <memchr>
 8004322:	2800      	cmp	r0, #0
 8004324:	d038      	beq.n	8004398 <_svfiprintf_r+0x1d8>
 8004326:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <_svfiprintf_r+0x1f4>)
 8004328:	bb1b      	cbnz	r3, 8004372 <_svfiprintf_r+0x1b2>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	3307      	adds	r3, #7
 800432e:	f023 0307 	bic.w	r3, r3, #7
 8004332:	3308      	adds	r3, #8
 8004334:	9303      	str	r3, [sp, #12]
 8004336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004338:	4433      	add	r3, r6
 800433a:	9309      	str	r3, [sp, #36]	; 0x24
 800433c:	e767      	b.n	800420e <_svfiprintf_r+0x4e>
 800433e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004342:	460c      	mov	r4, r1
 8004344:	2001      	movs	r0, #1
 8004346:	e7a5      	b.n	8004294 <_svfiprintf_r+0xd4>
 8004348:	2300      	movs	r3, #0
 800434a:	3401      	adds	r4, #1
 800434c:	9305      	str	r3, [sp, #20]
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 0c0a 	mov.w	ip, #10
 8004354:	4620      	mov	r0, r4
 8004356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800435a:	3a30      	subs	r2, #48	; 0x30
 800435c:	2a09      	cmp	r2, #9
 800435e:	d903      	bls.n	8004368 <_svfiprintf_r+0x1a8>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0c5      	beq.n	80042f0 <_svfiprintf_r+0x130>
 8004364:	9105      	str	r1, [sp, #20]
 8004366:	e7c3      	b.n	80042f0 <_svfiprintf_r+0x130>
 8004368:	fb0c 2101 	mla	r1, ip, r1, r2
 800436c:	4604      	mov	r4, r0
 800436e:	2301      	movs	r3, #1
 8004370:	e7f0      	b.n	8004354 <_svfiprintf_r+0x194>
 8004372:	ab03      	add	r3, sp, #12
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	462a      	mov	r2, r5
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <_svfiprintf_r+0x1f8>)
 800437a:	a904      	add	r1, sp, #16
 800437c:	4638      	mov	r0, r7
 800437e:	f3af 8000 	nop.w
 8004382:	1c42      	adds	r2, r0, #1
 8004384:	4606      	mov	r6, r0
 8004386:	d1d6      	bne.n	8004336 <_svfiprintf_r+0x176>
 8004388:	89ab      	ldrh	r3, [r5, #12]
 800438a:	065b      	lsls	r3, r3, #25
 800438c:	f53f af2c 	bmi.w	80041e8 <_svfiprintf_r+0x28>
 8004390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004392:	b01d      	add	sp, #116	; 0x74
 8004394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004398:	ab03      	add	r3, sp, #12
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	462a      	mov	r2, r5
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <_svfiprintf_r+0x1f8>)
 80043a0:	a904      	add	r1, sp, #16
 80043a2:	4638      	mov	r0, r7
 80043a4:	f000 f87a 	bl	800449c <_printf_i>
 80043a8:	e7eb      	b.n	8004382 <_svfiprintf_r+0x1c2>
 80043aa:	bf00      	nop
 80043ac:	08004a99 	.word	0x08004a99
 80043b0:	08004aa3 	.word	0x08004aa3
 80043b4:	00000000 	.word	0x00000000
 80043b8:	08004109 	.word	0x08004109
 80043bc:	08004a9f 	.word	0x08004a9f

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4699      	mov	r9, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043dc:	4607      	mov	r7, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc26      	bgt.n	8004456 <_printf_common+0x96>
 8004408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800440c:	1e13      	subs	r3, r2, #0
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d42b      	bmi.n	8004470 <_printf_common+0xb0>
 8004418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d01e      	beq.n	8004464 <_printf_common+0xa4>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	68e5      	ldr	r5, [r4, #12]
 800442a:	6832      	ldr	r2, [r6, #0]
 800442c:	f003 0306 	and.w	r3, r3, #6
 8004430:	2b04      	cmp	r3, #4
 8004432:	bf08      	it	eq
 8004434:	1aad      	subeq	r5, r5, r2
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	bf0c      	ite	eq
 800443c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004440:	2500      	movne	r5, #0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfc4      	itt	gt
 8004446:	1a9b      	subgt	r3, r3, r2
 8004448:	18ed      	addgt	r5, r5, r3
 800444a:	2600      	movs	r6, #0
 800444c:	341a      	adds	r4, #26
 800444e:	42b5      	cmp	r5, r6
 8004450:	d11a      	bne.n	8004488 <_printf_common+0xc8>
 8004452:	2000      	movs	r0, #0
 8004454:	e008      	b.n	8004468 <_printf_common+0xa8>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4649      	mov	r1, r9
 800445c:	4638      	mov	r0, r7
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d103      	bne.n	800446c <_printf_common+0xac>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	3501      	adds	r5, #1
 800446e:	e7c6      	b.n	80043fe <_printf_common+0x3e>
 8004470:	18e1      	adds	r1, r4, r3
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	2030      	movs	r0, #48	; 0x30
 8004476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447a:	4422      	add	r2, r4
 800447c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004484:	3302      	adds	r3, #2
 8004486:	e7c7      	b.n	8004418 <_printf_common+0x58>
 8004488:	2301      	movs	r3, #1
 800448a:	4622      	mov	r2, r4
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	47c0      	blx	r8
 8004492:	3001      	adds	r0, #1
 8004494:	d0e6      	beq.n	8004464 <_printf_common+0xa4>
 8004496:	3601      	adds	r6, #1
 8004498:	e7d9      	b.n	800444e <_printf_common+0x8e>
	...

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	7e0f      	ldrb	r7, [r1, #24]
 80044a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044a4:	2f78      	cmp	r7, #120	; 0x78
 80044a6:	4691      	mov	r9, r2
 80044a8:	4680      	mov	r8, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	469a      	mov	sl, r3
 80044ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	; 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d8 	beq.w	800466e <_printf_i+0x1d2>
 80044be:	2f58      	cmp	r7, #88	; 0x58
 80044c0:	f000 80a3 	beq.w	800460a <_printf_i+0x16e>
 80044c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a101      	add	r1, pc, #4	; (adr r1, 80044dc <_printf_i+0x40>)
 80044d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	08004655 	.word	0x08004655
 800450c:	08004579 	.word	0x08004579
 8004510:	08004637 	.word	0x08004637
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	08004677 	.word	0x08004677
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	0800463f 	.word	0x0800463f
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	602a      	str	r2, [r5, #0]
 800453c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e0a3      	b.n	8004690 <_printf_i+0x1f4>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	6829      	ldr	r1, [r5, #0]
 800454c:	0606      	lsls	r6, r0, #24
 800454e:	f101 0304 	add.w	r3, r1, #4
 8004552:	d50a      	bpl.n	800456a <_printf_i+0xce>
 8004554:	680e      	ldr	r6, [r1, #0]
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	2e00      	cmp	r6, #0
 800455a:	da03      	bge.n	8004564 <_printf_i+0xc8>
 800455c:	232d      	movs	r3, #45	; 0x2d
 800455e:	4276      	negs	r6, r6
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004564:	485e      	ldr	r0, [pc, #376]	; (80046e0 <_printf_i+0x244>)
 8004566:	230a      	movs	r3, #10
 8004568:	e019      	b.n	800459e <_printf_i+0x102>
 800456a:	680e      	ldr	r6, [r1, #0]
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004572:	bf18      	it	ne
 8004574:	b236      	sxthne	r6, r6
 8004576:	e7ef      	b.n	8004558 <_printf_i+0xbc>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	6029      	str	r1, [r5, #0]
 8004580:	0601      	lsls	r1, r0, #24
 8004582:	d501      	bpl.n	8004588 <_printf_i+0xec>
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	e002      	b.n	800458e <_printf_i+0xf2>
 8004588:	0646      	lsls	r6, r0, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0xe8>
 800458c:	881e      	ldrh	r6, [r3, #0]
 800458e:	4854      	ldr	r0, [pc, #336]	; (80046e0 <_printf_i+0x244>)
 8004590:	2f6f      	cmp	r7, #111	; 0x6f
 8004592:	bf0c      	ite	eq
 8004594:	2308      	moveq	r3, #8
 8004596:	230a      	movne	r3, #10
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459e:	6865      	ldr	r5, [r4, #4]
 80045a0:	60a5      	str	r5, [r4, #8]
 80045a2:	2d00      	cmp	r5, #0
 80045a4:	bfa2      	ittt	ge
 80045a6:	6821      	ldrge	r1, [r4, #0]
 80045a8:	f021 0104 	bicge.w	r1, r1, #4
 80045ac:	6021      	strge	r1, [r4, #0]
 80045ae:	b90e      	cbnz	r6, 80045b4 <_printf_i+0x118>
 80045b0:	2d00      	cmp	r5, #0
 80045b2:	d04d      	beq.n	8004650 <_printf_i+0x1b4>
 80045b4:	4615      	mov	r5, r2
 80045b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80045ba:	fb03 6711 	mls	r7, r3, r1, r6
 80045be:	5dc7      	ldrb	r7, [r0, r7]
 80045c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045c4:	4637      	mov	r7, r6
 80045c6:	42bb      	cmp	r3, r7
 80045c8:	460e      	mov	r6, r1
 80045ca:	d9f4      	bls.n	80045b6 <_printf_i+0x11a>
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d10b      	bne.n	80045e8 <_printf_i+0x14c>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	07de      	lsls	r6, r3, #31
 80045d4:	d508      	bpl.n	80045e8 <_printf_i+0x14c>
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	6861      	ldr	r1, [r4, #4]
 80045da:	4299      	cmp	r1, r3
 80045dc:	bfde      	ittt	le
 80045de:	2330      	movle	r3, #48	; 0x30
 80045e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045e8:	1b52      	subs	r2, r2, r5
 80045ea:	6122      	str	r2, [r4, #16]
 80045ec:	f8cd a000 	str.w	sl, [sp]
 80045f0:	464b      	mov	r3, r9
 80045f2:	aa03      	add	r2, sp, #12
 80045f4:	4621      	mov	r1, r4
 80045f6:	4640      	mov	r0, r8
 80045f8:	f7ff fee2 	bl	80043c0 <_printf_common>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d14c      	bne.n	800469a <_printf_i+0x1fe>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	b004      	add	sp, #16
 8004606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460a:	4835      	ldr	r0, [pc, #212]	; (80046e0 <_printf_i+0x244>)
 800460c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004610:	6829      	ldr	r1, [r5, #0]
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	f851 6b04 	ldr.w	r6, [r1], #4
 8004618:	6029      	str	r1, [r5, #0]
 800461a:	061d      	lsls	r5, r3, #24
 800461c:	d514      	bpl.n	8004648 <_printf_i+0x1ac>
 800461e:	07df      	lsls	r7, r3, #31
 8004620:	bf44      	itt	mi
 8004622:	f043 0320 	orrmi.w	r3, r3, #32
 8004626:	6023      	strmi	r3, [r4, #0]
 8004628:	b91e      	cbnz	r6, 8004632 <_printf_i+0x196>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	f023 0320 	bic.w	r3, r3, #32
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	2310      	movs	r3, #16
 8004634:	e7b0      	b.n	8004598 <_printf_i+0xfc>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	2378      	movs	r3, #120	; 0x78
 8004640:	4828      	ldr	r0, [pc, #160]	; (80046e4 <_printf_i+0x248>)
 8004642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004646:	e7e3      	b.n	8004610 <_printf_i+0x174>
 8004648:	0659      	lsls	r1, r3, #25
 800464a:	bf48      	it	mi
 800464c:	b2b6      	uxthmi	r6, r6
 800464e:	e7e6      	b.n	800461e <_printf_i+0x182>
 8004650:	4615      	mov	r5, r2
 8004652:	e7bb      	b.n	80045cc <_printf_i+0x130>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	6826      	ldr	r6, [r4, #0]
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6028      	str	r0, [r5, #0]
 800465e:	0635      	lsls	r5, r6, #24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	d501      	bpl.n	8004668 <_printf_i+0x1cc>
 8004664:	6019      	str	r1, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0x1d2>
 8004668:	0670      	lsls	r0, r6, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0x1c8>
 800466c:	8019      	strh	r1, [r3, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	4615      	mov	r5, r2
 8004674:	e7ba      	b.n	80045ec <_printf_i+0x150>
 8004676:	682b      	ldr	r3, [r5, #0]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	602a      	str	r2, [r5, #0]
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	2100      	movs	r1, #0
 8004682:	4628      	mov	r0, r5
 8004684:	f7fb fdac 	bl	80001e0 <memchr>
 8004688:	b108      	cbz	r0, 800468e <_printf_i+0x1f2>
 800468a:	1b40      	subs	r0, r0, r5
 800468c:	6060      	str	r0, [r4, #4]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004698:	e7a8      	b.n	80045ec <_printf_i+0x150>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	462a      	mov	r2, r5
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	47d0      	blx	sl
 80046a4:	3001      	adds	r0, #1
 80046a6:	d0ab      	beq.n	8004600 <_printf_i+0x164>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d413      	bmi.n	80046d6 <_printf_i+0x23a>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e7a4      	b.n	8004604 <_printf_i+0x168>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d09b      	beq.n	8004600 <_printf_i+0x164>
 80046c8:	3501      	adds	r5, #1
 80046ca:	68e3      	ldr	r3, [r4, #12]
 80046cc:	9903      	ldr	r1, [sp, #12]
 80046ce:	1a5b      	subs	r3, r3, r1
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dcf2      	bgt.n	80046ba <_printf_i+0x21e>
 80046d4:	e7eb      	b.n	80046ae <_printf_i+0x212>
 80046d6:	2500      	movs	r5, #0
 80046d8:	f104 0619 	add.w	r6, r4, #25
 80046dc:	e7f5      	b.n	80046ca <_printf_i+0x22e>
 80046de:	bf00      	nop
 80046e0:	08004aaa 	.word	0x08004aaa
 80046e4:	08004abb 	.word	0x08004abb

080046e8 <__retarget_lock_acquire_recursive>:
 80046e8:	4770      	bx	lr

080046ea <__retarget_lock_release_recursive>:
 80046ea:	4770      	bx	lr

080046ec <memcpy>:
 80046ec:	440a      	add	r2, r1
 80046ee:	4291      	cmp	r1, r2
 80046f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f4:	d100      	bne.n	80046f8 <memcpy+0xc>
 80046f6:	4770      	bx	lr
 80046f8:	b510      	push	{r4, lr}
 80046fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004702:	4291      	cmp	r1, r2
 8004704:	d1f9      	bne.n	80046fa <memcpy+0xe>
 8004706:	bd10      	pop	{r4, pc}

08004708 <memmove>:
 8004708:	4288      	cmp	r0, r1
 800470a:	b510      	push	{r4, lr}
 800470c:	eb01 0402 	add.w	r4, r1, r2
 8004710:	d902      	bls.n	8004718 <memmove+0x10>
 8004712:	4284      	cmp	r4, r0
 8004714:	4623      	mov	r3, r4
 8004716:	d807      	bhi.n	8004728 <memmove+0x20>
 8004718:	1e43      	subs	r3, r0, #1
 800471a:	42a1      	cmp	r1, r4
 800471c:	d008      	beq.n	8004730 <memmove+0x28>
 800471e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004726:	e7f8      	b.n	800471a <memmove+0x12>
 8004728:	4402      	add	r2, r0
 800472a:	4601      	mov	r1, r0
 800472c:	428a      	cmp	r2, r1
 800472e:	d100      	bne.n	8004732 <memmove+0x2a>
 8004730:	bd10      	pop	{r4, pc}
 8004732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800473a:	e7f7      	b.n	800472c <memmove+0x24>

0800473c <_realloc_r>:
 800473c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004740:	4680      	mov	r8, r0
 8004742:	4614      	mov	r4, r2
 8004744:	460e      	mov	r6, r1
 8004746:	b921      	cbnz	r1, 8004752 <_realloc_r+0x16>
 8004748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474c:	4611      	mov	r1, r2
 800474e:	f7ff bc17 	b.w	8003f80 <_malloc_r>
 8004752:	b92a      	cbnz	r2, 8004760 <_realloc_r+0x24>
 8004754:	f7ff fba8 	bl	8003ea8 <_free_r>
 8004758:	4625      	mov	r5, r4
 800475a:	4628      	mov	r0, r5
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004760:	f000 f81b 	bl	800479a <_malloc_usable_size_r>
 8004764:	4284      	cmp	r4, r0
 8004766:	4607      	mov	r7, r0
 8004768:	d802      	bhi.n	8004770 <_realloc_r+0x34>
 800476a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800476e:	d812      	bhi.n	8004796 <_realloc_r+0x5a>
 8004770:	4621      	mov	r1, r4
 8004772:	4640      	mov	r0, r8
 8004774:	f7ff fc04 	bl	8003f80 <_malloc_r>
 8004778:	4605      	mov	r5, r0
 800477a:	2800      	cmp	r0, #0
 800477c:	d0ed      	beq.n	800475a <_realloc_r+0x1e>
 800477e:	42bc      	cmp	r4, r7
 8004780:	4622      	mov	r2, r4
 8004782:	4631      	mov	r1, r6
 8004784:	bf28      	it	cs
 8004786:	463a      	movcs	r2, r7
 8004788:	f7ff ffb0 	bl	80046ec <memcpy>
 800478c:	4631      	mov	r1, r6
 800478e:	4640      	mov	r0, r8
 8004790:	f7ff fb8a 	bl	8003ea8 <_free_r>
 8004794:	e7e1      	b.n	800475a <_realloc_r+0x1e>
 8004796:	4635      	mov	r5, r6
 8004798:	e7df      	b.n	800475a <_realloc_r+0x1e>

0800479a <_malloc_usable_size_r>:
 800479a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800479e:	1f18      	subs	r0, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bfbc      	itt	lt
 80047a4:	580b      	ldrlt	r3, [r1, r0]
 80047a6:	18c0      	addlt	r0, r0, r3
 80047a8:	4770      	bx	lr
	...

080047ac <_init>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr

080047b8 <_fini>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr

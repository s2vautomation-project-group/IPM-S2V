
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b08  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800344c  0800344c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800344c  0800344c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800344c  0800344c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000001c  08003470  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003470  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b333  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  0002b37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002de58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020544  00000000  00000000  0002e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d849  00000000  00000000  0004ed24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be022  00000000  00000000  0005c56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a58f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002924  00000000  00000000  0011a5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002c7c 	.word	0x08002c7c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08002c7c 	.word	0x08002c7c

080001cc <app>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void app(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 3 */
//	  Get_Time();
//	  	  sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);


	  	  ssd1306_SetCursor(5, 5);
 80001d2:	2105      	movs	r1, #5
 80001d4:	2005      	movs	r0, #5
 80001d6:	f000 fad1 	bl	800077c <ssd1306_SetCursor>
	  	  ssd1306_WriteString(buffer, Font_7x10, White);
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <app+0x48>)
 80001dc:	2201      	movs	r2, #1
 80001de:	9200      	str	r2, [sp, #0]
 80001e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <app+0x4c>)
 80001e4:	f000 faa4 	bl	8000730 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80001e8:	f000 f994 	bl	8000514 <ssd1306_UpdateScreen>


	  	 //sprintf(buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);

	  	  ssd1306_SetCursor(7, 20);
 80001ec:	2114      	movs	r1, #20
 80001ee:	2007      	movs	r0, #7
 80001f0:	f000 fac4 	bl	800077c <ssd1306_SetCursor>
	  	  ssd1306_WriteString(buffer, Font_7x10, White);
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <app+0x48>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	9200      	str	r2, [sp, #0]
 80001fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80001fc:	4806      	ldr	r0, [pc, #24]	; (8000218 <app+0x4c>)
 80001fe:	f000 fa97 	bl	8000730 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000202:	f000 f987 	bl	8000514 <ssd1306_UpdateScreen>

	  	  HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f000 fc9d 	bl	8000b48 <HAL_Delay>
  }
 800020e:	bf00      	nop
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	08003400 	.word	0x08003400
 8000218:	20000000 	.word	0x20000000

0800021c <User_SystemClock_Config>:
#include <main.h>
#include "ssd1306.h"
extern I2C_HandleTypeDef hi2c1;

void User_SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b096      	sub	sp, #88	; 0x58
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0314 	add.w	r3, r7, #20
 8000226:	2244      	movs	r2, #68	; 0x44
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fd1e 	bl	8002c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000242:	f001 fba1 	bl	8001988 <HAL_PWREx_ControlVoltageScaling>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <User_SystemClock_Config+0x34>
  {
    Error_Handler();
 800024c:	f000 fb20 	bl	8000890 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000250:	f001 fb7c 	bl	800194c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <User_SystemClock_Config+0xc0>)
 8000256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800025a:	4a20      	ldr	r2, [pc, #128]	; (80002dc <User_SystemClock_Config+0xc0>)
 800025c:	f023 0318 	bic.w	r3, r3, #24
 8000260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000264:	2314      	movs	r3, #20
 8000266:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000274:	2360      	movs	r3, #96	; 0x60
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800027c:	2301      	movs	r3, #1
 800027e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000280:	2301      	movs	r3, #1
 8000282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000284:	2310      	movs	r3, #16
 8000286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000288:	2307      	movs	r3, #7
 800028a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800028c:	2302      	movs	r3, #2
 800028e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000290:	2302      	movs	r3, #2
 8000292:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0314 	add.w	r3, r7, #20
 8000298:	4618      	mov	r0, r3
 800029a:	f001 fbcb 	bl	8001a34 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <User_SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002a4:	f000 faf4 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2303      	movs	r3, #3
 80002ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	2101      	movs	r1, #1
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 ffcb 	bl	800225c <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <User_SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002cc:	f000 fae0 	bl	8000890 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002d0:	f002 fba6 	bl	8002a20 <HAL_RCCEx_EnableMSIPLLMode>
}
 80002d4:	bf00      	nop
 80002d6:	3758      	adds	r7, #88	; 0x58
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40021000 	.word	0x40021000

080002e0 <USER_I2C1_Init>:


void USER_I2C1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <USER_I2C1_Init+0x74>)
 80002e6:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <USER_I2C1_Init+0x78>)
 80002e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <USER_I2C1_Init+0x74>)
 80002ec:	4a1b      	ldr	r2, [pc, #108]	; (800035c <USER_I2C1_Init+0x7c>)
 80002ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <USER_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <USER_I2C1_Init+0x74>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <USER_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <USER_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <USER_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <USER_I2C1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <USER_I2C1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <USER_I2C1_Init+0x74>)
 800031c:	f000 fe88 	bl	8001030 <HAL_I2C_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <USER_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000326:	f000 fab3 	bl	8000890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800032a:	2100      	movs	r1, #0
 800032c:	4809      	ldr	r0, [pc, #36]	; (8000354 <USER_I2C1_Init+0x74>)
 800032e:	f001 fa75 	bl	800181c <HAL_I2CEx_ConfigAnalogFilter>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <USER_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000338:	f000 faaa 	bl	8000890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800033c:	2100      	movs	r1, #0
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <USER_I2C1_Init+0x74>)
 8000340:	f001 fab7 	bl	80018b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <USER_I2C1_Init+0x6e>
  {
    Error_Handler();
 800034a:	f000 faa1 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000240 	.word	0x20000240
 8000358:	40005400 	.word	0x40005400
 800035c:	00707cbb 	.word	0x00707cbb

08000360 <I2C_Write>:


// Generic I2C write function
void I2C_Write(I2C_HandleTypeDef *hi2c, uint16_t device_address, uint16_t mem_address, uint8_t mem_address_size, uint8_t *data, size_t data_size, uint32_t timeout)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af04      	add	r7, sp, #16
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	4608      	mov	r0, r1
 800036a:	4611      	mov	r1, r2
 800036c:	461a      	mov	r2, r3
 800036e:	4603      	mov	r3, r0
 8000370:	817b      	strh	r3, [r7, #10]
 8000372:	460b      	mov	r3, r1
 8000374:	813b      	strh	r3, [r7, #8]
 8000376:	4613      	mov	r3, r2
 8000378:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(hi2c, device_address, mem_address, mem_address_size, data, data_size, timeout);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	b29c      	uxth	r4, r3
 800037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000380:	b29b      	uxth	r3, r3
 8000382:	8938      	ldrh	r0, [r7, #8]
 8000384:	8979      	ldrh	r1, [r7, #10]
 8000386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000388:	9202      	str	r2, [sp, #8]
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	6a3b      	ldr	r3, [r7, #32]
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	4623      	mov	r3, r4
 8000392:	4602      	mov	r2, r0
 8000394:	68f8      	ldr	r0, [r7, #12]
 8000396:	f000 fedb 	bl	8001150 <HAL_I2C_Mem_Write>
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd90      	pop	{r4, r7, pc}

080003a2 <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <ssd1306_WriteCommand>:

 //Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af04      	add	r7, sp, #16
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80003ba:	f04f 33ff 	mov.w	r3, #4294967295
 80003be:	9302      	str	r3, [sp, #8]
 80003c0:	2301      	movs	r3, #1
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2301      	movs	r3, #1
 80003ca:	2200      	movs	r2, #0
 80003cc:	2178      	movs	r1, #120	; 0x78
 80003ce:	4803      	ldr	r0, [pc, #12]	; (80003dc <ssd1306_WriteCommand+0x2c>)
 80003d0:	f7ff ffc6 	bl	8000360 <I2C_Write>
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000240 	.word	0x20000240

080003e0 <ssd1306_WriteData>:


// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af04      	add	r7, sp, #16
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
 80003ee:	9302      	str	r3, [sp, #8]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2301      	movs	r3, #1
 80003fa:	2240      	movs	r2, #64	; 0x40
 80003fc:	2178      	movs	r1, #120	; 0x78
 80003fe:	4803      	ldr	r0, [pc, #12]	; (800040c <ssd1306_WriteData+0x2c>)
 8000400:	f7ff ffae 	bl	8000360 <I2C_Write>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000240 	.word	0x20000240

08000410 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000414:	f7ff ffc5 	bl	80003a2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000418:	2064      	movs	r0, #100	; 0x64
 800041a:	f000 fb95 	bl	8000b48 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800041e:	2000      	movs	r0, #0
 8000420:	f000 f9d8 	bl	80007d4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000424:	2020      	movs	r0, #32
 8000426:	f7ff ffc3 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800042a:	2000      	movs	r0, #0
 800042c:	f7ff ffc0 	bl	80003b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000430:	20b0      	movs	r0, #176	; 0xb0
 8000432:	f7ff ffbd 	bl	80003b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000436:	20c8      	movs	r0, #200	; 0xc8
 8000438:	f7ff ffba 	bl	80003b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ffb7 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000442:	2010      	movs	r0, #16
 8000444:	f7ff ffb4 	bl	80003b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000448:	2040      	movs	r0, #64	; 0x40
 800044a:	f7ff ffb1 	bl	80003b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800044e:	20ff      	movs	r0, #255	; 0xff
 8000450:	f000 f9ac 	bl	80007ac <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000454:	20a1      	movs	r0, #161	; 0xa1
 8000456:	f7ff ffab 	bl	80003b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800045a:	20a6      	movs	r0, #166	; 0xa6
 800045c:	f7ff ffa8 	bl	80003b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000460:	20a8      	movs	r0, #168	; 0xa8
 8000462:	f7ff ffa5 	bl	80003b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000466:	201f      	movs	r0, #31
 8000468:	f7ff ffa2 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800046c:	20a4      	movs	r0, #164	; 0xa4
 800046e:	f7ff ff9f 	bl	80003b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000472:	20d3      	movs	r0, #211	; 0xd3
 8000474:	f7ff ff9c 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff99 	bl	80003b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800047e:	20d5      	movs	r0, #213	; 0xd5
 8000480:	f7ff ff96 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000484:	20f0      	movs	r0, #240	; 0xf0
 8000486:	f7ff ff93 	bl	80003b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800048a:	20d9      	movs	r0, #217	; 0xd9
 800048c:	f7ff ff90 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000490:	2022      	movs	r0, #34	; 0x22
 8000492:	f7ff ff8d 	bl	80003b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000496:	20da      	movs	r0, #218	; 0xda
 8000498:	f7ff ff8a 	bl	80003b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800049c:	2002      	movs	r0, #2
 800049e:	f7ff ff87 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80004a2:	20db      	movs	r0, #219	; 0xdb
 80004a4:	f7ff ff84 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80004a8:	2020      	movs	r0, #32
 80004aa:	f7ff ff81 	bl	80003b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80004ae:	208d      	movs	r0, #141	; 0x8d
 80004b0:	f7ff ff7e 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80004b4:	2014      	movs	r0, #20
 80004b6:	f7ff ff7b 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 f98a 	bl	80007d4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 f80f 	bl	80004e4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80004c6:	f000 f825 	bl	8000514 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <ssd1306_Init+0xd0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <ssd1306_Init+0xd0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <ssd1306_Init+0xd0>)
 80004d8:	2201      	movs	r2, #1
 80004da:	711a      	strb	r2, [r3, #4]
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000238 	.word	0x20000238

080004e4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d101      	bne.n	80004f8 <ssd1306_Fill+0x14>
 80004f4:	2300      	movs	r3, #0
 80004f6:	e000      	b.n	80004fa <ssd1306_Fill+0x16>
 80004f8:	23ff      	movs	r3, #255	; 0xff
 80004fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004fe:	4619      	mov	r1, r3
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <ssd1306_Fill+0x2c>)
 8000502:	f002 fbb3 	bl	8002c6c <memset>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000038 	.word	0x20000038

08000514 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
 800051e:	e016      	b.n	800054e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	3b50      	subs	r3, #80	; 0x50
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff42 	bl	80003b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff ff3f 	bl	80003b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000532:	2010      	movs	r0, #16
 8000534:	f7ff ff3c 	bl	80003b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	01db      	lsls	r3, r3, #7
 800053c:	4a08      	ldr	r2, [pc, #32]	; (8000560 <ssd1306_UpdateScreen+0x4c>)
 800053e:	4413      	add	r3, r2
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ff4c 	bl	80003e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	3301      	adds	r3, #1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b03      	cmp	r3, #3
 8000552:	d9e5      	bls.n	8000520 <ssd1306_UpdateScreen+0xc>
    }
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000038 	.word	0x20000038

08000564 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	460b      	mov	r3, r1
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	4613      	mov	r3, r2
 8000574:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057a:	2b00      	cmp	r3, #0
 800057c:	db3d      	blt.n	80005fa <ssd1306_DrawPixel+0x96>
 800057e:	79bb      	ldrb	r3, [r7, #6]
 8000580:	2b1f      	cmp	r3, #31
 8000582:	d83a      	bhi.n	80005fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8000584:	797b      	ldrb	r3, [r7, #5]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d11a      	bne.n	80005c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	08db      	lsrs	r3, r3, #3
 8000590:	b2d8      	uxtb	r0, r3
 8000592:	4603      	mov	r3, r0
 8000594:	01db      	lsls	r3, r3, #7
 8000596:	4413      	add	r3, r2
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <ssd1306_DrawPixel+0xa4>)
 800059a:	5cd3      	ldrb	r3, [r2, r3]
 800059c:	b25a      	sxtb	r2, r3
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	f003 0307 	and.w	r3, r3, #7
 80005a4:	2101      	movs	r1, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b259      	sxtb	r1, r3
 80005b0:	79fa      	ldrb	r2, [r7, #7]
 80005b2:	4603      	mov	r3, r0
 80005b4:	01db      	lsls	r3, r3, #7
 80005b6:	4413      	add	r3, r2
 80005b8:	b2c9      	uxtb	r1, r1
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <ssd1306_DrawPixel+0xa4>)
 80005bc:	54d1      	strb	r1, [r2, r3]
 80005be:	e01d      	b.n	80005fc <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	08db      	lsrs	r3, r3, #3
 80005c6:	b2d8      	uxtb	r0, r3
 80005c8:	4603      	mov	r3, r0
 80005ca:	01db      	lsls	r3, r3, #7
 80005cc:	4413      	add	r3, r2
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <ssd1306_DrawPixel+0xa4>)
 80005d0:	5cd3      	ldrb	r3, [r2, r3]
 80005d2:	b25a      	sxtb	r2, r3
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	4013      	ands	r3, r2
 80005e8:	b259      	sxtb	r1, r3
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	4603      	mov	r3, r0
 80005ee:	01db      	lsls	r3, r3, #7
 80005f0:	4413      	add	r3, r2
 80005f2:	b2c9      	uxtb	r1, r1
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <ssd1306_DrawPixel+0xa4>)
 80005f6:	54d1      	strb	r1, [r2, r3]
 80005f8:	e000      	b.n	80005fc <ssd1306_DrawPixel+0x98>
        return;
 80005fa:	bf00      	nop
    }
}
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000038 	.word	0x20000038

0800060c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4604      	mov	r4, r0
 8000614:	4638      	mov	r0, r7
 8000616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800061a:	4623      	mov	r3, r4
 800061c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b1f      	cmp	r3, #31
 8000622:	d902      	bls.n	800062a <ssd1306_WriteChar+0x1e>
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b7e      	cmp	r3, #126	; 0x7e
 8000628:	d901      	bls.n	800062e <ssd1306_WriteChar+0x22>
        return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e079      	b.n	8000722 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800062e:	4b3f      	ldr	r3, [pc, #252]	; (800072c <ssd1306_WriteChar+0x120>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	783b      	ldrb	r3, [r7, #0]
 8000636:	4413      	add	r3, r2
 8000638:	2b80      	cmp	r3, #128	; 0x80
 800063a:	dc06      	bgt.n	800064a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800063c:	4b3b      	ldr	r3, [pc, #236]	; (800072c <ssd1306_WriteChar+0x120>)
 800063e:	885b      	ldrh	r3, [r3, #2]
 8000640:	461a      	mov	r2, r3
 8000642:	787b      	ldrb	r3, [r7, #1]
 8000644:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000646:	2b20      	cmp	r3, #32
 8000648:	dd01      	ble.n	800064e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e069      	b.n	8000722 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
 8000652:	e04e      	b.n	80006f2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3b20      	subs	r3, #32
 800065a:	7879      	ldrb	r1, [r7, #1]
 800065c:	fb01 f303 	mul.w	r3, r1, r3
 8000660:	4619      	mov	r1, r3
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	440b      	add	r3, r1
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	4413      	add	r3, r2
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	e036      	b.n	80006e2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d013      	beq.n	80006ac <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <ssd1306_WriteChar+0x120>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2d8      	uxtb	r0, r3
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <ssd1306_WriteChar+0x120>)
 8000694:	885b      	ldrh	r3, [r3, #2]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4413      	add	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80006a4:	4619      	mov	r1, r3
 80006a6:	f7ff ff5d 	bl	8000564 <ssd1306_DrawPixel>
 80006aa:	e017      	b.n	80006dc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <ssd1306_WriteChar+0x120>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	b2d8      	uxtb	r0, r3
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <ssd1306_WriteChar+0x120>)
 80006bc:	885b      	ldrh	r3, [r3, #2]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	b2d9      	uxtb	r1, r3
 80006c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf0c      	ite	eq
 80006d0:	2301      	moveq	r3, #1
 80006d2:	2300      	movne	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	f7ff ff44 	bl	8000564 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	3301      	adds	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
 80006e2:	783b      	ldrb	r3, [r7, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d3c3      	bcc.n	8000674 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	3301      	adds	r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	787b      	ldrb	r3, [r7, #1]
 80006f4:	461a      	mov	r2, r3
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d3ab      	bcc.n	8000654 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <ssd1306_WriteChar+0x120>)
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <ssd1306_WriteChar+0x108>
 8000706:	68b9      	ldr	r1, [r7, #8]
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3b20      	subs	r3, #32
 800070c:	440b      	add	r3, r1
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	e001      	b.n	8000718 <ssd1306_WriteChar+0x10c>
 8000714:	783b      	ldrb	r3, [r7, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	4413      	add	r3, r2
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <ssd1306_WriteChar+0x120>)
 800071e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3724      	adds	r7, #36	; 0x24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	bf00      	nop
 800072c:	20000238 	.word	0x20000238

08000730 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	4638      	mov	r0, r7
 800073a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800073e:	e013      	b.n	8000768 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	7818      	ldrb	r0, [r3, #0]
 8000744:	7e3b      	ldrb	r3, [r7, #24]
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	463b      	mov	r3, r7
 800074a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800074c:	f7ff ff5e 	bl	800060c <ssd1306_WriteChar>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d002      	beq.n	8000762 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	e008      	b.n	8000774 <ssd1306_WriteString+0x44>
        }
        str++;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1e7      	bne.n	8000740 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	781b      	ldrb	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <ssd1306_SetCursor+0x2c>)
 8000792:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <ssd1306_SetCursor+0x2c>)
 800079a:	805a      	strh	r2, [r3, #2]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	20000238 	.word	0x20000238

080007ac <ssd1306_SetContrast>:
//        }
//    }
//    return;
//}

void ssd1306_SetContrast(const uint8_t value) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80007b6:	2381      	movs	r3, #129	; 0x81
 80007b8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fdf7 	bl	80003b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fdf3 	bl	80003b0 <ssd1306_WriteCommand>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d005      	beq.n	80007f0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80007e4:	23af      	movs	r3, #175	; 0xaf
 80007e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <ssd1306_SetDisplayOn+0x38>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	715a      	strb	r2, [r3, #5]
 80007ee:	e004      	b.n	80007fa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80007f0:	23ae      	movs	r3, #174	; 0xae
 80007f2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <ssd1306_SetDisplayOn+0x38>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fdd7 	bl	80003b0 <ssd1306_WriteCommand>
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000238 	.word	0x20000238

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 f923 	bl	8000a5e <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f000 f80a 	bl	8000830 <MX_GPIO_Init>
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  USER_I2C1_Init();
 800081c:	f7ff fd60 	bl	80002e0 <USER_I2C1_Init>
  ssd1306_Init();
 8000820:	f7ff fdf6 	bl	8000410 <ssd1306_Init>
  User_SystemClock_Config();
 8000824:	f7ff fcfa 	bl	800021c <User_SystemClock_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app();
 8000828:	f7ff fcd0 	bl	80001cc <app>
 800082c:	e7fc      	b.n	8000828 <main+0x18>
	...

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0x5c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_GPIO_Init+0x5c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_GPIO_Init+0x5c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_GPIO_Init+0x5c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_GPIO_Init+0x5c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_GPIO_Init+0x5c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_GPIO_Init+0x5c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <MX_GPIO_Init+0x5c>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_GPIO_Init+0x5c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x44>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b09e      	sub	sp, #120	; 0x78
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2254      	movs	r2, #84	; 0x54
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f9b1 	bl	8002c6c <memset>
  if(hi2c->Instance==I2C1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <HAL_I2C_MspInit+0xa4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d135      	bne.n	8000980 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fe87 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800092c:	f7ff ffb0 	bl	8000890 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <HAL_I2C_MspInit+0xa8>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <HAL_I2C_MspInit+0xa8>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_I2C_MspInit+0xa8>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000948:	23c0      	movs	r3, #192	; 0xc0
 800094a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094c:	2312      	movs	r3, #18
 800094e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000958:	2304      	movs	r3, #4
 800095a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000960:	4619      	mov	r1, r3
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <HAL_I2C_MspInit+0xac>)
 8000964:	f000 f9fa 	bl	8000d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_I2C_MspInit+0xa8>)
 800096a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_I2C_MspInit+0xa8>)
 800096e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000972:	6593      	str	r3, [r2, #88]	; 0x58
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_I2C_MspInit+0xa8>)
 8000976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3778      	adds	r7, #120	; 0x78
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40005400 	.word	0x40005400
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f892 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ffea 	bl	80009e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 f8f3 	bl	8002c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fee7 	bl	8000810 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a50:	08003454 	.word	0x08003454
  ldr r2, =_sbss
 8000a54:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a58:	20000298 	.word	0x20000298

08000a5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_IRQHandler>

08000a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f943 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f80e 	bl	8000a90 <HAL_InitTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e001      	b.n	8000a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a80:	f7ff ff0c 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_InitTick+0x6c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d023      	beq.n	8000aec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_InitTick+0x70>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_InitTick+0x6c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f941 	bl	8000d42 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10f      	bne.n	8000ae6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d809      	bhi.n	8000ae0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 f919 	bl	8000d0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_InitTick+0x74>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e007      	b.n	8000af0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e004      	b.n	8000af0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
 8000aea:	e001      	b.n	8000af0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000018 	.word	0x20000018
 8000b00:	20000010 	.word	0x20000010
 8000b04:	20000014 	.word	0x20000014

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000018 	.word	0x20000018
 8000b2c:	20000294 	.word	0x20000294

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000294 	.word	0x20000294

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000018 	.word	0x20000018

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff47 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff5c 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffb0 	bl	8000cb0 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	e148      	b.n	8000ffe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 813a 	beq.w	8000ff8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 0201 	and.w	r2, r3, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d017      	beq.n	8000e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d123      	bne.n	8000e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0203 	and.w	r2, r3, #3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8094 	beq.w	8000ff8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed0:	4b52      	ldr	r3, [pc, #328]	; (800101c <HAL_GPIO_Init+0x2c0>)
 8000ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed4:	4a51      	ldr	r2, [pc, #324]	; (800101c <HAL_GPIO_Init+0x2c0>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6613      	str	r3, [r2, #96]	; 0x60
 8000edc:	4b4f      	ldr	r3, [pc, #316]	; (800101c <HAL_GPIO_Init+0x2c0>)
 8000ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee8:	4a4d      	ldr	r2, [pc, #308]	; (8001020 <HAL_GPIO_Init+0x2c4>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1d4>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a43      	ldr	r2, [pc, #268]	; (8001024 <HAL_GPIO_Init+0x2c8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1d0>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a42      	ldr	r2, [pc, #264]	; (8001028 <HAL_GPIO_Init+0x2cc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1cc>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x1d6>
 8000f28:	2307      	movs	r3, #7
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x1d6>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x1d6>
 8000f30:	2300      	movs	r3, #0
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f42:	4937      	ldr	r1, [pc, #220]	; (8001020 <HAL_GPIO_Init+0x2c4>)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f74:	4a2d      	ldr	r2, [pc, #180]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc8:	4a18      	ldr	r2, [pc, #96]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	f47f aeaf 	bne.w	8000d6c <HAL_GPIO_Init+0x10>
  }
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	48000400 	.word	0x48000400
 8001028:	48000800 	.word	0x48000800
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e081      	b.n	8001146 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fc44 	bl	80008e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d107      	bne.n	80010aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	e006      	b.n	80010b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d104      	bne.n	80010ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69d9      	ldr	r1, [r3, #28]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	817b      	strh	r3, [r7, #10]
 8001162:	460b      	mov	r3, r1
 8001164:	813b      	strh	r3, [r7, #8]
 8001166:	4613      	mov	r3, r2
 8001168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b20      	cmp	r3, #32
 8001174:	f040 80f9 	bne.w	800136a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_I2C_Mem_Write+0x34>
 800117e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0ed      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_I2C_Mem_Write+0x4e>
 800119a:	2302      	movs	r3, #2
 800119c:	e0e6      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011a6:	f7ff fcc3 	bl	8000b30 <HAL_GetTick>
 80011aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2319      	movs	r3, #25
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f000 f955 	bl	8001468 <I2C_WaitOnFlagUntilTimeout>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0d1      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2221      	movs	r2, #33	; 0x21
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2240      	movs	r2, #64	; 0x40
 80011d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6a3a      	ldr	r2, [r7, #32]
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011f0:	88f8      	ldrh	r0, [r7, #6]
 80011f2:	893a      	ldrh	r2, [r7, #8]
 80011f4:	8979      	ldrh	r1, [r7, #10]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4603      	mov	r3, r0
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 f8b9 	bl	8001378 <I2C_RequestMemoryWrite>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0a9      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121c:	b29b      	uxth	r3, r3
 800121e:	2bff      	cmp	r3, #255	; 0xff
 8001220:	d90e      	bls.n	8001240 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	22ff      	movs	r2, #255	; 0xff
 8001226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	8979      	ldrh	r1, [r7, #10]
 8001230:	2300      	movs	r3, #0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 fabd 	bl	80017b8 <I2C_TransferConfig>
 800123e:	e00f      	b.n	8001260 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001244:	b29a      	uxth	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800124e:	b2da      	uxtb	r2, r3
 8001250:	8979      	ldrh	r1, [r7, #10]
 8001252:	2300      	movs	r3, #0
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 faac 	bl	80017b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f93f 	bl	80014e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e07b      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	781a      	ldrb	r2, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128e:	b29b      	uxth	r3, r3
 8001290:	3b01      	subs	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129c:	3b01      	subs	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d034      	beq.n	8001318 <HAL_I2C_Mem_Write+0x1c8>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d130      	bne.n	8001318 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	2200      	movs	r2, #0
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f8d1 	bl	8001468 <I2C_WaitOnFlagUntilTimeout>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e04d      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	d90e      	bls.n	80012f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	8979      	ldrh	r1, [r7, #10]
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fa61 	bl	80017b8 <I2C_TransferConfig>
 80012f6:	e00f      	b.n	8001318 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001306:	b2da      	uxtb	r2, r3
 8001308:	8979      	ldrh	r1, [r7, #10]
 800130a:	2300      	movs	r3, #0
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 fa50 	bl	80017b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131c:	b29b      	uxth	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d19e      	bne.n	8001260 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f91e 	bl	8001568 <I2C_WaitOnSTOPFlagUntilTimeout>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e01a      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2220      	movs	r2, #32
 800133c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_I2C_Mem_Write+0x224>)
 800134a:	400b      	ands	r3, r1
 800134c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800136a:	2302      	movs	r3, #2
  }
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	fe00e800 	.word	0xfe00e800

08001378 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4603      	mov	r3, r0
 8001388:	817b      	strh	r3, [r7, #10]
 800138a:	460b      	mov	r3, r1
 800138c:	813b      	strh	r3, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	8979      	ldrh	r1, [r7, #10]
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <I2C_RequestMemoryWrite+0xa4>)
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 fa09 	bl	80017b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	69b9      	ldr	r1, [r7, #24]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f89c 	bl	80014e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e02c      	b.n	8001414 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013c0:	893b      	ldrh	r3, [r7, #8]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
 80013ca:	e015      	b.n	80013f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013cc:	893b      	ldrh	r3, [r7, #8]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	69b9      	ldr	r1, [r7, #24]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 f882 	bl	80014e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e012      	b.n	8001414 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013ee:	893b      	ldrh	r3, [r7, #8]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2200      	movs	r2, #0
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 f830 	bl	8001468 <I2C_WaitOnFlagUntilTimeout>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	80002000 	.word	0x80002000

08001420 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b02      	cmp	r3, #2
 8001434:	d103      	bne.n	800143e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d007      	beq.n	800145c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	619a      	str	r2, [r3, #24]
  }
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001478:	e022      	b.n	80014c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d01e      	beq.n	80014c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001482:	f7ff fb55 	bl	8000b30 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d302      	bcc.n	8001498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d113      	bne.n	80014c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f043 0220 	orr.w	r2, r3, #32
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2220      	movs	r2, #32
 80014a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e00f      	b.n	80014e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4013      	ands	r3, r2
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d0cd      	beq.n	800147a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014f4:	e02c      	b.n	8001550 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f870 	bl	80015e0 <I2C_IsErrorOccurred>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e02a      	b.n	8001560 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d01e      	beq.n	8001550 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001512:	f7ff fb0d 	bl	8000b30 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	429a      	cmp	r2, r3
 8001520:	d302      	bcc.n	8001528 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d113      	bne.n	8001550 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	f043 0220 	orr.w	r2, r3, #32
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2220      	movs	r2, #32
 8001538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e007      	b.n	8001560 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b02      	cmp	r3, #2
 800155c:	d1cb      	bne.n	80014f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001574:	e028      	b.n	80015c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 f830 	bl	80015e0 <I2C_IsErrorOccurred>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e026      	b.n	80015d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800158a:	f7ff fad1 	bl	8000b30 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	429a      	cmp	r2, r3
 8001598:	d302      	bcc.n	80015a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d113      	bne.n	80015c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f043 0220 	orr.w	r2, r3, #32
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e007      	b.n	80015d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d1cf      	bne.n	8001576 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d075      	beq.n	80016f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2210      	movs	r2, #16
 8001612:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001614:	e056      	b.n	80016c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d052      	beq.n	80016c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800161e:	f7ff fa87 	bl	8000b30 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	429a      	cmp	r2, r3
 800162c:	d302      	bcc.n	8001634 <I2C_IsErrorOccurred+0x54>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d147      	bne.n	80016c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001646:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001656:	d12e      	bne.n	80016b6 <I2C_IsErrorOccurred+0xd6>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800165e:	d02a      	beq.n	80016b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001660:	7cfb      	ldrb	r3, [r7, #19]
 8001662:	2b20      	cmp	r3, #32
 8001664:	d027      	beq.n	80016b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001674:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001676:	f7ff fa5b 	bl	8000b30 <HAL_GetTick>
 800167a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800167c:	e01b      	b.n	80016b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800167e:	f7ff fa57 	bl	8000b30 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b19      	cmp	r3, #25
 800168a:	d914      	bls.n	80016b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f043 0220 	orr.w	r2, r3, #32
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d1dc      	bne.n	800167e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d003      	beq.n	80016da <I2C_IsErrorOccurred+0xfa>
 80016d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d09d      	beq.n	8001616 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00b      	beq.n	8001744 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800176a:	2b00      	cmp	r3, #0
 800176c:	d01c      	beq.n	80017a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f7ff fe56 	bl	8001420 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6859      	ldr	r1, [r3, #4]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <I2C_IsErrorOccurred+0x1d4>)
 8001780:	400b      	ands	r3, r1
 8001782:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	431a      	orrs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2220      	movs	r2, #32
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80017a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	fe00e800 	.word	0xfe00e800

080017b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	817b      	strh	r3, [r7, #10]
 80017c6:	4613      	mov	r3, r2
 80017c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017ca:	897b      	ldrh	r3, [r7, #10]
 80017cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017d0:	7a7b      	ldrb	r3, [r7, #9]
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	0d5b      	lsrs	r3, r3, #21
 80017f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <I2C_TransferConfig+0x60>)
 80017f8:	430b      	orrs	r3, r1
 80017fa:	43db      	mvns	r3, r3
 80017fc:	ea02 0103 	and.w	r1, r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	03ff63ff 	.word	0x03ff63ff

0800181c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b20      	cmp	r3, #32
 8001830:	d138      	bne.n	80018a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800183c:	2302      	movs	r3, #2
 800183e:	e032      	b.n	80018a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2224      	movs	r2, #36	; 0x24
 800184c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800186e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018a4:	2302      	movs	r3, #2
  }
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d139      	bne.n	800193c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e033      	b.n	800193e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2224      	movs	r2, #36	; 0x24
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001904:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e000      	b.n	800193e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800193c:	2302      	movs	r3, #2
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40007000 	.word	0x40007000

0800196c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_PWREx_GetVoltageRange+0x18>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001996:	d130      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a4:	d038      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2232      	movs	r2, #50	; 0x32
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019cc:	e002      	b.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e0:	d102      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f2      	bne.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f4:	d110      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e00f      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a06:	d007      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a10:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	20000010 	.word	0x20000010
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f000 bc02 	b.w	800224c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a48:	4b96      	ldr	r3, [pc, #600]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a52:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80e4 	beq.w	8001c32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4c>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	f040 808b 	bne.w	8001b8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	f040 8087 	bne.w	8001b8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a80:	4b88      	ldr	r3, [pc, #544]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_OscConfig+0x64>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e3d9      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x7e>
 8001aa8:	4b7e      	ldr	r3, [pc, #504]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab0:	e005      	b.n	8001abe <HAL_RCC_OscConfig+0x8a>
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d223      	bcs.n	8001b0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fd54 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e3ba      	b.n	800224c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad6:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a72      	ldr	r2, [pc, #456]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	496d      	ldr	r1, [pc, #436]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af4:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	4968      	ldr	r1, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e025      	b.n	8001b56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4960      	ldr	r1, [pc, #384]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b28:	4b5e      	ldr	r3, [pc, #376]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	495b      	ldr	r1, [pc, #364]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fd14 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e37a      	b.n	800224c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b56:	f000 fc81 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b51      	ldr	r3, [pc, #324]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	4950      	ldr	r1, [pc, #320]	; (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <HAL_RCC_OscConfig+0x278>)
 8001b74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b76:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <HAL_RCC_OscConfig+0x27c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe ff88 	bl	8000a90 <HAL_InitTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d052      	beq.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	e35e      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d032      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a42      	ldr	r2, [pc, #264]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba2:	f7fe ffc5 	bl	8000b30 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001baa:	f7fe ffc1 	bl	8000b30 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e347      	b.n	800224c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a35      	ldr	r2, [pc, #212]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4930      	ldr	r1, [pc, #192]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be6:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	492b      	ldr	r1, [pc, #172]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
 8001bfa:	e01a      	b.n	8001c32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c08:	f7fe ff92 	bl	8000b30 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c10:	f7fe ff8e 	bl	8000b30 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e314      	b.n	800224c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x1dc>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d073      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_OscConfig+0x21c>
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d10e      	bne.n	8001c68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d10b      	bne.n	8001c68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d063      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d15f      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e2f1      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d106      	bne.n	8001c80 <HAL_RCC_OscConfig+0x24c>
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e025      	b.n	8001ccc <HAL_RCC_OscConfig+0x298>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c88:	d114      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x280>
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a02      	ldr	r2, [pc, #8]	; (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e013      	b.n	8001ccc <HAL_RCC_OscConfig+0x298>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	0800340c 	.word	0x0800340c
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	20000014 	.word	0x20000014
 8001cb4:	4ba0      	ldr	r3, [pc, #640]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a9f      	ldr	r2, [pc, #636]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b9d      	ldr	r3, [pc, #628]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a9c      	ldr	r2, [pc, #624]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ff2c 	bl	8000b30 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7fe ff28 	bl	8000b30 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e2ae      	b.n	800224c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cee:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2a8>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe ff18 	bl	8000b30 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7fe ff14 	bl	8000b30 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e29a      	b.n	800224c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d16:	4b88      	ldr	r3, [pc, #544]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2d0>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d060      	beq.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x310>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d116      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	4b7c      	ldr	r3, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x328>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e277      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4973      	ldr	r1, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	e040      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d023      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7a:	4b6f      	ldr	r3, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7fe fed3 	bl	8000b30 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7fe fecf 	bl	8000b30 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e255      	b.n	800224c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b62      	ldr	r3, [pc, #392]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	495f      	ldr	r1, [pc, #380]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e018      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a5c      	ldr	r2, [pc, #368]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7fe feaf 	bl	8000b30 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7fe feab 	bl	8000b30 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e231      	b.n	800224c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e08:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	4a4a      	ldr	r2, [pc, #296]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7fe fe8a 	bl	8000b30 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7fe fe86 	bl	8000b30 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e20c      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ef      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3ec>
 8001e40:	e01b      	b.n	8001e7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7fe fe6d 	bl	8000b30 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7fe fe69 	bl	8000b30 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1ef      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6c:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ef      	bne.n	8001e5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a6 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d118      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fe30 	bl	8000b30 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7fe fe2c 	bl	8000b30 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e1b2      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4d8>
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0a:	e029      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d115      	bne.n	8001f40 <HAL_RCC_OscConfig+0x50c>
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	4b9a      	ldr	r3, [pc, #616]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	4a99      	ldr	r2, [pc, #612]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f50:	4b96      	ldr	r3, [pc, #600]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a95      	ldr	r2, [pc, #596]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d016      	beq.n	8001f96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe fde2 	bl	8000b30 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe fdde 	bl	8000b30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e162      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f86:	4b89      	ldr	r3, [pc, #548]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ed      	beq.n	8001f70 <HAL_RCC_OscConfig+0x53c>
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7fe fdcb 	bl	8000b30 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fdc7 	bl	8000b30 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e14b      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb4:	4b7d      	ldr	r3, [pc, #500]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ed      	bne.n	8001f9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a77      	ldr	r2, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d03c      	beq.n	800205a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01c      	beq.n	8002022 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fe8:	4b70      	ldr	r3, [pc, #448]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fee:	4a6f      	ldr	r2, [pc, #444]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fd9a 	bl	8000b30 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002000:	f7fe fd96 	bl	8000b30 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e11c      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002012:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8002014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ef      	beq.n	8002000 <HAL_RCC_OscConfig+0x5cc>
 8002020:	e01b      	b.n	800205a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002022:	4b62      	ldr	r3, [pc, #392]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8002024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002028:	4a60      	ldr	r2, [pc, #384]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe fd7d 	bl	8000b30 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203a:	f7fe fd79 	bl	8000b30 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0ff      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800204c:	4b57      	ldr	r3, [pc, #348]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 800204e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ef      	bne.n	800203a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80f3 	beq.w	800224a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	2b02      	cmp	r3, #2
 800206a:	f040 80c9 	bne.w	8002200 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800206e:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0203 	and.w	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	429a      	cmp	r2, r3
 8002080:	d12c      	bne.n	80020dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	3b01      	subs	r3, #1
 800208e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d123      	bne.n	80020dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d11b      	bne.n	80020dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d113      	bne.n	80020dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d109      	bne.n	80020dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	3b01      	subs	r3, #1
 80020d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d06b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d062      	beq.n	80021a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020e2:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0ac      	b.n	800224c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020fe:	f7fe fd17 	bl	8000b30 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fd13 	bl	8000b30 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e099      	b.n	800224c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x77c>)
 800212a:	4013      	ands	r3, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002134:	3a01      	subs	r2, #1
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800213e:	0212      	lsls	r2, r2, #8
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002146:	0852      	lsrs	r2, r2, #1
 8002148:	3a01      	subs	r2, #1
 800214a:	0552      	lsls	r2, r2, #21
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002152:	0852      	lsrs	r2, r2, #1
 8002154:	3a01      	subs	r2, #1
 8002156:	0652      	lsls	r2, r2, #25
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800215e:	06d2      	lsls	r2, r2, #27
 8002160:	430a      	orrs	r2, r1
 8002162:	4912      	ldr	r1, [pc, #72]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002172:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002180:	f7fe fcd6 	bl	8000b30 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe fcd2 	bl	8000b30 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e058      	b.n	800224c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_RCC_OscConfig+0x778>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a6:	e050      	b.n	800224a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e04f      	b.n	800224c <HAL_RCC_OscConfig+0x818>
 80021ac:	40021000 	.word	0x40021000
 80021b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d144      	bne.n	800224a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d8:	f7fe fcaa 	bl	8000b30 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fca6 	bl	8000b30 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e02c      	b.n	800224c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x7ac>
 80021fe:	e024      	b.n	800224a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d01f      	beq.n	8002246 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 800220c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe fc8d 	bl	8000b30 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fc89 	bl	8000b30 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e00f      	b.n	800224c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	4905      	ldr	r1, [pc, #20]	; (8002254 <HAL_RCC_OscConfig+0x820>)
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_OscConfig+0x824>)
 8002240:	4013      	ands	r3, r2
 8002242:	60cb      	str	r3, [r1, #12]
 8002244:	e001      	b.n	800224a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	feeefffc 	.word	0xfeeefffc

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0e7      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b75      	ldr	r3, [pc, #468]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b72      	ldr	r3, [pc, #456]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4970      	ldr	r1, [pc, #448]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cf      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d010      	beq.n	80022ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4b66      	ldr	r3, [pc, #408]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d908      	bls.n	80022ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4960      	ldr	r1, [pc, #384]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d04c      	beq.n	8002374 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e2:	4b5a      	ldr	r3, [pc, #360]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d121      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0a6      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fa:	4b54      	ldr	r3, [pc, #336]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d115      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e09a      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002312:	4b4e      	ldr	r3, [pc, #312]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e08e      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002322:	4b4a      	ldr	r3, [pc, #296]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e086      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002332:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4943      	ldr	r1, [pc, #268]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe fbf4 	bl	8000b30 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	e00a      	b.n	8002362 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe fbf0 	bl	8000b30 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e06e      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 020c 	and.w	r2, r3, #12
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	429a      	cmp	r2, r3
 8002372:	d1eb      	bne.n	800234c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238c:	429a      	cmp	r2, r3
 800238e:	d208      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	492b      	ldr	r1, [pc, #172]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a2:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d210      	bcs.n	80023d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 0207 	bic.w	r2, r3, #7
 80023b8:	4923      	ldr	r1, [pc, #140]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_RCC_ClockConfig+0x1ec>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e036      	b.n	8002440 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4918      	ldr	r1, [pc, #96]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d009      	beq.n	8002410 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4910      	ldr	r1, [pc, #64]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002410:	f000 f824 	bl	800245c <HAL_RCC_GetSysClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	490b      	ldr	r1, [pc, #44]	; (8002450 <HAL_RCC_ClockConfig+0x1f4>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	4a09      	ldr	r2, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1fc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fb2b 	bl	8000a90 <HAL_InitTick>
 800243a:	4603      	mov	r3, r0
 800243c:	72fb      	strb	r3, [r7, #11]

  return status;
 800243e:	7afb      	ldrb	r3, [r7, #11]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40022000 	.word	0x40022000
 800244c:	40021000 	.word	0x40021000
 8002450:	0800340c 	.word	0x0800340c
 8002454:	20000010 	.word	0x20000010
 8002458:	20000014 	.word	0x20000014

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002474:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x34>
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d121      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d11e      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800249c:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e005      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d102      	bne.n	80024da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e004      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_RCC_GetSysClockFreq+0x114>)
 80024e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d134      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0xa6>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d003      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xac>
 8002500:	e005      	b.n	800250e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_GetSysClockFreq+0x110>)
 8002504:	617b      	str	r3, [r7, #20]
      break;
 8002506:	e005      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_GetSysClockFreq+0x114>)
 800250a:	617b      	str	r3, [r7, #20]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	617b      	str	r3, [r7, #20]
      break;
 8002512:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	3301      	adds	r3, #1
 8002520:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	fb03 f202 	mul.w	r2, r3, r2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_GetSysClockFreq+0x108>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	0e5b      	lsrs	r3, r3, #25
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	3301      	adds	r3, #1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002554:	69bb      	ldr	r3, [r7, #24]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	; 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	0800341c 	.word	0x0800341c
 800256c:	00f42400 	.word	0x00f42400
 8002570:	007a1200 	.word	0x007a1200

08002574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800258c:	f7ff f9ee 	bl	800196c <HAL_PWREx_GetVoltageRange>
 8002590:	6178      	str	r0, [r7, #20]
 8002592:	e014      	b.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	4a24      	ldr	r2, [pc, #144]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6593      	str	r3, [r2, #88]	; 0x58
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025ac:	f7ff f9de 	bl	800196c <HAL_PWREx_GetVoltageRange>
 80025b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c4:	d10b      	bne.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d919      	bls.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2ba0      	cmp	r3, #160	; 0xa0
 80025d0:	d902      	bls.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d2:	2302      	movs	r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e013      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e010      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d902      	bls.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e4:	2303      	movs	r3, #3
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	e00a      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d102      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f0:	2302      	movs	r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e004      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b70      	cmp	r3, #112	; 0x70
 80025fa:	d101      	bne.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 0207 	bic.w	r2, r3, #7
 8002608:	4909      	ldr	r1, [pc, #36]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	40022000 	.word	0x40022000

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800263c:	2300      	movs	r3, #0
 800263e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002640:	2300      	movs	r3, #0
 8002642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264c:	2b00      	cmp	r3, #0
 800264e:	d031      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002658:	d01a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800265a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800265e:	d814      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002668:	d10f      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800266a:	4b5d      	ldr	r3, [pc, #372]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4a5c      	ldr	r2, [pc, #368]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002676:	e00c      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f9de 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002688:	e003      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	74fb      	strb	r3, [r7, #19]
      break;
 800268e:	e000      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002698:	4b51      	ldr	r3, [pc, #324]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	494e      	ldr	r1, [pc, #312]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026ae:	e001      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 809e 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026c6:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	4a3f      	ldr	r2, [pc, #252]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a39      	ldr	r2, [pc, #228]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002704:	f7fe fa14 	bl	8000b30 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800270a:	e009      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7fe fa10 	bl	8000b30 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d902      	bls.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	74fb      	strb	r3, [r7, #19]
        break;
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d15a      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01e      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	429a      	cmp	r2, r3
 800274c:	d019      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002758:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe f9d0 	bl	8000b30 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002792:	e00b      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe f9cc 	bl	8000b30 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d902      	bls.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	74fb      	strb	r3, [r7, #19]
            break;
 80027aa:	e006      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ec      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027d6:	e009      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ec:	7c7b      	ldrb	r3, [r7, #17]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b8a      	ldr	r3, [pc, #552]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	4a89      	ldr	r2, [pc, #548]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280a:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f023 0203 	bic.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4980      	ldr	r1, [pc, #512]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800282c:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f023 020c 	bic.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	4978      	ldr	r1, [pc, #480]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800284e:	4b73      	ldr	r3, [pc, #460]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	496f      	ldr	r1, [pc, #444]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002870:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	4967      	ldr	r1, [pc, #412]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002892:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	495e      	ldr	r1, [pc, #376]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	4956      	ldr	r1, [pc, #344]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	494d      	ldr	r1, [pc, #308]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d028      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f8:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4945      	ldr	r1, [pc, #276]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002916:	d106      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
 8002924:	e011      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800292e:	d10c      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f882 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	492d      	ldr	r1, [pc, #180]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002974:	d106      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002980:	60d3      	str	r3, [r2, #12]
 8002982:	e011      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2101      	movs	r1, #1
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f853 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01c      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c2:	4916      	ldr	r1, [pc, #88]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d2:	d10c      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f830 	bl	8002a40 <RCCEx_PLLSAI1_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80029ea:	7cfb      	ldrb	r3, [r7, #19]
 80029ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	4904      	ldr	r1, [pc, #16]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000

08002a40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a4e:	4b74      	ldr	r3, [pc, #464]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a5a:	4b71      	ldr	r3, [pc, #452]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10d      	bne.n	8002a86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a72:	4b6b      	ldr	r3, [pc, #428]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
       ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d047      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e044      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d018      	beq.n	8002ac6 <RCCEx_PLLSAI1_Config+0x86>
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d825      	bhi.n	8002ae4 <RCCEx_PLLSAI1_Config+0xa4>
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d002      	beq.n	8002aa2 <RCCEx_PLLSAI1_Config+0x62>
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d009      	beq.n	8002ab4 <RCCEx_PLLSAI1_Config+0x74>
 8002aa0:	e020      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa2:	4b5f      	ldr	r3, [pc, #380]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11d      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e01a      	b.n	8002aea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab4:	4b5a      	ldr	r3, [pc, #360]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d116      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac4:	e013      	b.n	8002aee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac6:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad2:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ae2:	e006      	b.n	8002af2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e004      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002afa:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	430b      	orrs	r3, r1
 8002b10:	4943      	ldr	r1, [pc, #268]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d17c      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3f      	ldr	r2, [pc, #252]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b28:	f7fe f802 	bl	8000b30 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b2e:	e009      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b30:	f7fd fffe 	bl	8000b30 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	73fb      	strb	r3, [r7, #15]
        break;
 8002b42:	e005      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b44:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ef      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d15f      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d110      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5c:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	0211      	lsls	r1, r2, #8
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	06d2      	lsls	r2, r2, #27
 8002b74:	430a      	orrs	r2, r1
 8002b76:	492a      	ldr	r1, [pc, #168]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	610b      	str	r3, [r1, #16]
 8002b7c:	e027      	b.n	8002bce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d112      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b84:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6892      	ldr	r2, [r2, #8]
 8002b94:	0211      	lsls	r1, r2, #8
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6912      	ldr	r2, [r2, #16]
 8002b9a:	0852      	lsrs	r2, r2, #1
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0552      	lsls	r2, r2, #21
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	491f      	ldr	r1, [pc, #124]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	610b      	str	r3, [r1, #16]
 8002ba8:	e011      	b.n	8002bce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6892      	ldr	r2, [r2, #8]
 8002bba:	0211      	lsls	r1, r2, #8
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6952      	ldr	r2, [r2, #20]
 8002bc0:	0852      	lsrs	r2, r2, #1
 8002bc2:	3a01      	subs	r2, #1
 8002bc4:	0652      	lsls	r2, r2, #25
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	4915      	ldr	r1, [pc, #84]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bda:	f7fd ffa9 	bl	8000b30 <HAL_GetTick>
 8002bde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be0:	e009      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be2:	f7fd ffa5 	bl	8000b30 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d902      	bls.n	8002bf6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	73fb      	strb	r3, [r7, #15]
          break;
 8002bf4:	e005      	b.n	8002c02 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ef      	beq.n	8002be2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000

08002c24 <__libc_init_array>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4d0d      	ldr	r5, [pc, #52]	; (8002c5c <__libc_init_array+0x38>)
 8002c28:	4c0d      	ldr	r4, [pc, #52]	; (8002c60 <__libc_init_array+0x3c>)
 8002c2a:	1b64      	subs	r4, r4, r5
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	2600      	movs	r6, #0
 8002c30:	42a6      	cmp	r6, r4
 8002c32:	d109      	bne.n	8002c48 <__libc_init_array+0x24>
 8002c34:	4d0b      	ldr	r5, [pc, #44]	; (8002c64 <__libc_init_array+0x40>)
 8002c36:	4c0c      	ldr	r4, [pc, #48]	; (8002c68 <__libc_init_array+0x44>)
 8002c38:	f000 f820 	bl	8002c7c <_init>
 8002c3c:	1b64      	subs	r4, r4, r5
 8002c3e:	10a4      	asrs	r4, r4, #2
 8002c40:	2600      	movs	r6, #0
 8002c42:	42a6      	cmp	r6, r4
 8002c44:	d105      	bne.n	8002c52 <__libc_init_array+0x2e>
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4c:	4798      	blx	r3
 8002c4e:	3601      	adds	r6, #1
 8002c50:	e7ee      	b.n	8002c30 <__libc_init_array+0xc>
 8002c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c56:	4798      	blx	r3
 8002c58:	3601      	adds	r6, #1
 8002c5a:	e7f2      	b.n	8002c42 <__libc_init_array+0x1e>
 8002c5c:	0800344c 	.word	0x0800344c
 8002c60:	0800344c 	.word	0x0800344c
 8002c64:	0800344c 	.word	0x0800344c
 8002c68:	08003450 	.word	0x08003450

08002c6c <memset>:
 8002c6c:	4402      	add	r2, r0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d100      	bne.n	8002c76 <memset+0xa>
 8002c74:	4770      	bx	lr
 8002c76:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7a:	e7f9      	b.n	8002c70 <memset+0x4>

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr

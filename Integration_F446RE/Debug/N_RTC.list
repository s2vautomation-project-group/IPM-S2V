
N_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d018  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800d1e8  0800d1e8  0001d1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9a0  0800d9a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9a0  0800d9a0  0001d9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9a8  0800d9a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9ac  0800d9ac  0001d9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  200001e0  0800db90  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0800db90  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013764  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a5  00000000  00000000  00033974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00036c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00037ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264ac  00000000  00000000  000387d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001793f  00000000  00000000  0005ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9c37  00000000  00000000  000765bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001501f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  00150244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d1d0 	.word	0x0800d1d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d1d0 	.word	0x0800d1d0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <application>:
#include "app_config.h"
#include "com_config.h"
struct data d;

void application(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	Configurator();
 800105c:	f000 fa52 	bl	8001504 <Configurator>
//	strcpy(d.CH4, "ADC4");
//	strcpy(d.Status1, "GPIO1");
//	strcpy(d.Status2, "GPIO2");
//	strcpy(d.Status3, "GPIO3");
//	strcpy(d.Status4, "GPIO4");
	get_time(&d);
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <application+0x24>)
 8001062:	f000 f9ff 	bl	8001464 <get_time>
    ADC_handler(&d);
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <application+0x24>)
 8001068:	f000 f830 	bl	80010cc <ADC_handler>
	DataToGsm(&d);
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <application+0x24>)
 800106e:	f000 f88b 	bl	8001188 <DataToGsm>
	terminal(&d);
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <application+0x24>)
 8001074:	f000 fdc8 	bl	8001c08 <terminal>


}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001fc 	.word	0x200001fc

08001080 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 8001084:	f000 fef6 	bl	8001e74 <adc_value>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <voltage_cal+0x48>)
 800108e:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <voltage_cal+0x48>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa75 	bl	8000584 <__aeabi_i2d>
 800109a:	a309      	add	r3, pc, #36	; (adr r3, 80010c0 <voltage_cal+0x40>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fada 	bl	8000658 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fdcc 	bl	8000c48 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	ee07 3a90 	vmov	s15, r3
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	f3af 8000 	nop.w
 80010c0:	e734d9b4 	.word	0xe734d9b4
 80010c4:	3f4a680c 	.word	0x3f4a680c
 80010c8:	20000258 	.word	0x20000258

080010cc <ADC_handler>:

void ADC_handler(struct data *d)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <ADC_handler+0xb8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10f      	bne.n	80010fc <ADC_handler+0x30>
	{
		ADC_select_CH1();
 80010dc:	f000 fe4c 	bl	8001d78 <ADC_select_CH1>
		adc_start();
 80010e0:	f000 feb2 	bl	8001e48 <adc_start>
		adc_conversion();
 80010e4:	f000 feba 	bl	8001e5c <adc_conversion>
		d->adc1_value = voltage_cal();
 80010e8:	f7ff ffca 	bl	8001080 <voltage_cal>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	edc3 7a07 	vstr	s15, [r3, #28]
		adc_stop();
 80010f6:	f000 fec9 	bl	8001e8c <adc_stop>
 80010fa:	e000      	b.n	80010fe <ADC_handler+0x32>
	}
	else
	{
		__NOP();
 80010fc:	bf00      	nop
	}
	if(adcChnlChecker[1] == 1)
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <ADC_handler+0xb8>)
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d10f      	bne.n	8001126 <ADC_handler+0x5a>
	{
		ADC_select_CH2();
 8001106:	f000 fe51 	bl	8001dac <ADC_select_CH2>
		adc_start();
 800110a:	f000 fe9d 	bl	8001e48 <adc_start>
		adc_conversion();
 800110e:	f000 fea5 	bl	8001e5c <adc_conversion>
		d->adc2_value = voltage_cal();
 8001112:	f7ff ffb5 	bl	8001080 <voltage_cal>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edc3 7a08 	vstr	s15, [r3, #32]
		adc_stop();
 8001120:	f000 feb4 	bl	8001e8c <adc_stop>
 8001124:	e000      	b.n	8001128 <ADC_handler+0x5c>
	}
	else
	{
		__NOP();
 8001126:	bf00      	nop
	}
	if(adcChnlChecker[2] == 1)
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <ADC_handler+0xb8>)
 800112a:	789b      	ldrb	r3, [r3, #2]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10f      	bne.n	8001150 <ADC_handler+0x84>
	{
		ADC_select_CH3();
 8001130:	f000 fe56 	bl	8001de0 <ADC_select_CH3>
		adc_start();
 8001134:	f000 fe88 	bl	8001e48 <adc_start>
		adc_conversion();
 8001138:	f000 fe90 	bl	8001e5c <adc_conversion>
		d->adc3_value = voltage_cal();
 800113c:	f7ff ffa0 	bl	8001080 <voltage_cal>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		adc_stop();
 800114a:	f000 fe9f 	bl	8001e8c <adc_stop>
 800114e:	e000      	b.n	8001152 <ADC_handler+0x86>
	}
	else
	{
		__NOP();
 8001150:	bf00      	nop
	}
	if(adcChnlChecker[3] == 1)
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <ADC_handler+0xb8>)
 8001154:	78db      	ldrb	r3, [r3, #3]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d10f      	bne.n	800117a <ADC_handler+0xae>
	{
		ADC_select_CH4();
 800115a:	f000 fe5b 	bl	8001e14 <ADC_select_CH4>
		adc_start();
 800115e:	f000 fe73 	bl	8001e48 <adc_start>
		adc_conversion();
 8001162:	f000 fe7b 	bl	8001e5c <adc_conversion>
		d->adc4_value = voltage_cal();
 8001166:	f7ff ff8b 	bl	8001080 <voltage_cal>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		adc_stop();
 8001174:	f000 fe8a 	bl	8001e8c <adc_stop>
	{
		__NOP();
	}
//	adc_stop();

}
 8001178:	e000      	b.n	800117c <ADC_handler+0xb0>
		__NOP();
 800117a:	bf00      	nop
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000032c 	.word	0x2000032c

08001188 <DataToGsm>:
int count=0;

UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af06      	add	r7, sp, #24
 800118e:	6078      	str	r0, [r7, #4]
	uint8_t sec=d->seconds;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
		//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf((char*)buffer_Time,"%02d:%02d:%02d",d->hour,d->minutes,d->seconds);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	789b      	ldrb	r3, [r3, #2]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	4619      	mov	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	495b      	ldr	r1, [pc, #364]	; (8001318 <DataToGsm+0x190>)
 80011ac:	485b      	ldr	r0, [pc, #364]	; (800131c <DataToGsm+0x194>)
 80011ae:	f008 fa97 	bl	80096e0 <siprintf>
	sprintf((char*)buffer_Date,"%02d/%02d/%02d",d->dayofmonth,d->month,d->year);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	4619      	mov	r1, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	460b      	mov	r3, r1
 80011c6:	4956      	ldr	r1, [pc, #344]	; (8001320 <DataToGsm+0x198>)
 80011c8:	4856      	ldr	r0, [pc, #344]	; (8001324 <DataToGsm+0x19c>)
 80011ca:	f008 fa89 	bl	80096e0 <siprintf>

//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf((char*)CH1,"%f",d->adc1_value);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9e8 	bl	80005a8 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4952      	ldr	r1, [pc, #328]	; (8001328 <DataToGsm+0x1a0>)
 80011de:	4853      	ldr	r0, [pc, #332]	; (800132c <DataToGsm+0x1a4>)
 80011e0:	f008 fa7e 	bl	80096e0 <siprintf>
	sprintf((char*)CH2,"%f",d->adc2_value);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9dd 	bl	80005a8 <__aeabi_f2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	494d      	ldr	r1, [pc, #308]	; (8001328 <DataToGsm+0x1a0>)
 80011f4:	484e      	ldr	r0, [pc, #312]	; (8001330 <DataToGsm+0x1a8>)
 80011f6:	f008 fa73 	bl	80096e0 <siprintf>
	sprintf((char*)CH3,"%f",d->adc3_value);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9d2 	bl	80005a8 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4947      	ldr	r1, [pc, #284]	; (8001328 <DataToGsm+0x1a0>)
 800120a:	484a      	ldr	r0, [pc, #296]	; (8001334 <DataToGsm+0x1ac>)
 800120c:	f008 fa68 	bl	80096e0 <siprintf>
	sprintf((char*)CH4,"%f",d->adc4_value);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f9c7 	bl	80005a8 <__aeabi_f2d>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4942      	ldr	r1, [pc, #264]	; (8001328 <DataToGsm+0x1a0>)
 8001220:	4845      	ldr	r0, [pc, #276]	; (8001338 <DataToGsm+0x1b0>)
 8001222:	f008 fa5d 	bl	80096e0 <siprintf>

	if(d->GPIO[0]==1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800122c:	2b01      	cmp	r3, #1
 800122e:	d107      	bne.n	8001240 <DataToGsm+0xb8>
	{
		strcpy(d->Status1, "High");
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3331      	adds	r3, #49	; 0x31
 8001234:	4a41      	ldr	r2, [pc, #260]	; (800133c <DataToGsm+0x1b4>)
 8001236:	6810      	ldr	r0, [r2, #0]
 8001238:	6018      	str	r0, [r3, #0]
 800123a:	7912      	ldrb	r2, [r2, #4]
 800123c:	711a      	strb	r2, [r3, #4]
 800123e:	e004      	b.n	800124a <DataToGsm+0xc2>
	}
	else
	{
		strcpy(d->Status1, "Low");
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3331      	adds	r3, #49	; 0x31
 8001244:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <DataToGsm+0x1b8>)
 8001246:	6810      	ldr	r0, [r2, #0]
 8001248:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001250:	2b01      	cmp	r3, #1
 8001252:	d107      	bne.n	8001264 <DataToGsm+0xdc>
	{
		strcpy(d->Status2, "High");
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	333b      	adds	r3, #59	; 0x3b
 8001258:	4a38      	ldr	r2, [pc, #224]	; (800133c <DataToGsm+0x1b4>)
 800125a:	6810      	ldr	r0, [r2, #0]
 800125c:	6018      	str	r0, [r3, #0]
 800125e:	7912      	ldrb	r2, [r2, #4]
 8001260:	711a      	strb	r2, [r3, #4]
 8001262:	e004      	b.n	800126e <DataToGsm+0xe6>
	}
	else
	{
		strcpy(d->Status2, "Low");
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	333b      	adds	r3, #59	; 0x3b
 8001268:	4a35      	ldr	r2, [pc, #212]	; (8001340 <DataToGsm+0x1b8>)
 800126a:	6810      	ldr	r0, [r2, #0]
 800126c:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <DataToGsm+0x100>
	{
		strcpy(d->Status3, "High");
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3345      	adds	r3, #69	; 0x45
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <DataToGsm+0x1b4>)
 800127e:	6810      	ldr	r0, [r2, #0]
 8001280:	6018      	str	r0, [r3, #0]
 8001282:	7912      	ldrb	r2, [r2, #4]
 8001284:	711a      	strb	r2, [r3, #4]
 8001286:	e004      	b.n	8001292 <DataToGsm+0x10a>
	}
	else
	{
		strcpy(d->Status3, "Low");
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3345      	adds	r3, #69	; 0x45
 800128c:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <DataToGsm+0x1b8>)
 800128e:	6810      	ldr	r0, [r2, #0]
 8001290:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <DataToGsm+0x124>
	{
		strcpy(d->Status4, "High");
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	334f      	adds	r3, #79	; 0x4f
 80012a0:	4a26      	ldr	r2, [pc, #152]	; (800133c <DataToGsm+0x1b4>)
 80012a2:	6810      	ldr	r0, [r2, #0]
 80012a4:	6018      	str	r0, [r3, #0]
 80012a6:	7912      	ldrb	r2, [r2, #4]
 80012a8:	711a      	strb	r2, [r3, #4]
 80012aa:	e004      	b.n	80012b6 <DataToGsm+0x12e>
	}
	else
	{
		strcpy(d->Status4, "Low");
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	334f      	adds	r3, #79	; 0x4f
 80012b0:	4a23      	ldr	r2, [pc, #140]	; (8001340 <DataToGsm+0x1b8>)
 80012b2:	6810      	ldr	r0, [r2, #0]
 80012b4:	6018      	str	r0, [r3, #0]


//	DataToCloud(buffer_Time,buffer_Date,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);


	if(sec==59||sec==58)
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	2b3b      	cmp	r3, #59	; 0x3b
 80012ba:	d002      	beq.n	80012c2 <DataToGsm+0x13a>
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b3a      	cmp	r3, #58	; 0x3a
 80012c0:	d104      	bne.n	80012cc <DataToGsm+0x144>
	{
		count=count+1;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <DataToGsm+0x1bc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <DataToGsm+0x1bc>)
 80012ca:	6013      	str	r3, [r2, #0]

	}


	if(count==d->scan_time)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <DataToGsm+0x1bc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d118      	bne.n	800130e <DataToGsm+0x186>
	{
		DataToCloud(buffer_Time,buffer_Date,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3331      	adds	r3, #49	; 0x31
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	323b      	adds	r2, #59	; 0x3b
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	3145      	adds	r1, #69	; 0x45
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	304f      	adds	r0, #79	; 0x4f
 80012ec:	9005      	str	r0, [sp, #20]
 80012ee:	9104      	str	r1, [sp, #16]
 80012f0:	9203      	str	r2, [sp, #12]
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <DataToGsm+0x1b0>)
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <DataToGsm+0x1ac>)
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <DataToGsm+0x1a8>)
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <DataToGsm+0x1a4>)
 8001300:	4908      	ldr	r1, [pc, #32]	; (8001324 <DataToGsm+0x19c>)
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <DataToGsm+0x194>)
 8001304:	f000 fe3c 	bl	8001f80 <DataToCloud>
		count=0;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <DataToGsm+0x1bc>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
	}

//	count=0;
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	0800d1e8 	.word	0x0800d1e8
 800131c:	2000025c 	.word	0x2000025c
 8001320:	0800d1f8 	.word	0x0800d1f8
 8001324:	2000026c 	.word	0x2000026c
 8001328:	0800d208 	.word	0x0800d208
 800132c:	2000027c 	.word	0x2000027c
 8001330:	20000288 	.word	0x20000288
 8001334:	20000294 	.word	0x20000294
 8001338:	200002a0 	.word	0x200002a0
 800133c:	0800d20c 	.word	0x0800d20c
 8001340:	0800d214 	.word	0x0800d214
 8001344:	200002ac 	.word	0x200002ac

08001348 <dec_bcd>:
#define RTC_add 0xD0

//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <dec_bcd+0x48>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1092      	asrs	r2, r2, #2
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	b2d8      	uxtb	r0, r3
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <dec_bcd+0x48>)
 8001368:	fb83 1302 	smull	r1, r3, r3, r2
 800136c:	1099      	asrs	r1, r3, #2
 800136e:	17d3      	asrs	r3, r2, #31
 8001370:	1ac9      	subs	r1, r1, r3
 8001372:	460b      	mov	r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	1ad1      	subs	r1, r2, r3
 800137c:	b2cb      	uxtb	r3, r1
 800137e:	4403      	add	r3, r0
 8001380:	b2db      	uxtb	r3, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	66666667 	.word	0x66666667

08001394 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	461a      	mov	r2, r3
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4413      	add	r3, r2
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <set_time>:




void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	4604      	mov	r4, r0
 80013cc:	4608      	mov	r0, r1
 80013ce:	4611      	mov	r1, r2
 80013d0:	461a      	mov	r2, r3
 80013d2:	4623      	mov	r3, r4
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	4603      	mov	r3, r0
 80013d8:	71bb      	strb	r3, [r7, #6]
 80013da:	460b      	mov	r3, r1
 80013dc:	717b      	strb	r3, [r7, #5]
 80013de:	4613      	mov	r3, r2
 80013e0:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffaf 	bl	8001348 <dec_bcd>
 80013ea:	4603      	mov	r3, r0
 80013ec:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ffa9 	bl	8001348 <dec_bcd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ffa3 	bl	8001348 <dec_bcd>
 8001402:	4603      	mov	r3, r0
 8001404:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 8001406:	793b      	ldrb	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff9d 	bl	8001348 <dec_bcd>
 800140e:	4603      	mov	r3, r0
 8001410:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 8001412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff96 	bl	8001348 <dec_bcd>
 800141c:	4603      	mov	r3, r0
 800141e:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8001420:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff8f 	bl	8001348 <dec_bcd>
 800142a:	4603      	mov	r3, r0
 800142c:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 800142e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ff88 	bl	8001348 <dec_bcd>
 8001438:	4603      	mov	r3, r0
 800143a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2307      	movs	r3, #7
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2200      	movs	r2, #0
 8001450:	21d0      	movs	r1, #208	; 0xd0
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <set_time+0x9c>)
 8001454:	f002 feb4 	bl	80041c0 <HAL_I2C_Mem_Write>
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	200004c8 	.word	0x200004c8

08001464 <get_time>:



void get_time(struct data *d)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af04      	add	r7, sp, #16
 800146a:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2307      	movs	r3, #7
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	2200      	movs	r2, #0
 8001480:	21d0      	movs	r1, #208	; 0xd0
 8001482:	481f      	ldr	r0, [pc, #124]	; (8001500 <get_time+0x9c>)
 8001484:	f002 ff96 	bl	80043b4 <HAL_I2C_Mem_Read>
	d->seconds=bcd_dec(get_time[0]);
 8001488:	7a3b      	ldrb	r3, [r7, #8]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff82 	bl	8001394 <bcd_dec>
 8001490:	4603      	mov	r3, r0
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	701a      	strb	r2, [r3, #0]
	d->minutes=bcd_dec(get_time[1]);
 8001498:	7a7b      	ldrb	r3, [r7, #9]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff7a 	bl	8001394 <bcd_dec>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	705a      	strb	r2, [r3, #1]
	d->hour=bcd_dec(get_time[2]);
 80014a8:	7abb      	ldrb	r3, [r7, #10]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff72 	bl	8001394 <bcd_dec>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	709a      	strb	r2, [r3, #2]
	d->dayofweek=bcd_dec(get_time[3]);
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff6a 	bl	8001394 <bcd_dec>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	70da      	strb	r2, [r3, #3]
	d->dayofmonth=bcd_dec(get_time[4]);
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff62 	bl	8001394 <bcd_dec>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	711a      	strb	r2, [r3, #4]
	d->month=bcd_dec(get_time[5]);
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff5a 	bl	8001394 <bcd_dec>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	715a      	strb	r2, [r3, #5]
	d->year=bcd_dec(get_time[6]);
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff52 	bl	8001394 <bcd_dec>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	719a      	strb	r2, [r3, #6]
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200004c8 	.word	0x200004c8

08001504 <Configurator>:
uint8_t s[4];
extern struct data d;
uint8_t adcChnlChecker[4];

void Configurator()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	data_receive();
 8001508:	f000 ffd2 	bl	80024b0 <data_receive>

	if (tx_data[0] != '\0')
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <Configurator+0x48>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <Configurator+0x18>
	{
		flag = 1; // Set flag to indicate data has been received
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <Configurator+0x4c>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e002      	b.n	8001522 <Configurator+0x1e>
	}
	else
	{
		flag=0;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <Configurator+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
	}

	if (flag)
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <Configurator+0x4c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <Configurator+0x32>
	{
		extract_data();
 800152a:	f000 f8fb 	bl	8001724 <extract_data>
		pin_config();
 800152e:	f000 f93d 	bl	80017ac <pin_config>
		clear_buffer();
 8001532:	f000 f811 	bl	8001558 <clear_buffer>
	}
	reset_output(&d);
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <Configurator+0x50>)
 8001538:	f000 f864 	bl	8001604 <reset_output>
	set_output(&d);
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <Configurator+0x50>)
 800153e:	f000 f817 	bl	8001570 <set_output>
	//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

	read_pinstatus(&d);
 8001542:	4804      	ldr	r0, [pc, #16]	; (8001554 <Configurator+0x50>)
 8001544:	f000 f8a8 	bl	8001698 <read_pinstatus>
	//status_transmit();
	//DataTOgsm(d);


}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200002b4 	.word	0x200002b4
 8001550:	20000324 	.word	0x20000324
 8001554:	200001fc 	.word	0x200001fc

08001558 <clear_buffer>:

void clear_buffer()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 800155c:	220f      	movs	r2, #15
 800155e:	2100      	movs	r1, #0
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <clear_buffer+0x14>)
 8001562:	f007 f911 	bl	8008788 <memset>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002b4 	.word	0x200002b4

08001570 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

void set_output(struct data *d)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <set_output+0x88>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10a      	bne.n	8001596 <set_output+0x26>
	{
		d->GPIO[0] = write_gpio(GPIOA,GPIO_PIN_13, PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001586:	481d      	ldr	r0, [pc, #116]	; (80015fc <set_output+0x8c>)
 8001588:	f000 ffb6 	bl	80024f8 <write_gpio>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(config[1] == 0)
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <set_output+0x88>)
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10a      	bne.n	80015b4 <set_output+0x44>
	{
		d->GPIO[1] = write_gpio(GPIOA,GPIO_PIN_14, PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a4:	4815      	ldr	r0, [pc, #84]	; (80015fc <set_output+0x8c>)
 80015a6:	f000 ffa7 	bl	80024f8 <write_gpio>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	if(config[2] == 0)
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <set_output+0x88>)
 80015b6:	789b      	ldrb	r3, [r3, #2]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10a      	bne.n	80015d2 <set_output+0x62>
	{
		d->GPIO[2] = write_gpio(GPIOC,GPIO_PIN_13, PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c2:	480f      	ldr	r0, [pc, #60]	; (8001600 <set_output+0x90>)
 80015c4:	f000 ff98 	bl	80024f8 <write_gpio>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if(config[3] == 0)
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <set_output+0x88>)
 80015d4:	78db      	ldrb	r3, [r3, #3]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10a      	bne.n	80015f0 <set_output+0x80>
	{
		d->GPIO[3] = write_gpio(GPIOC,GPIO_PIN_14, PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <set_output+0x90>)
 80015e2:	f000 ff89 	bl	80024f8 <write_gpio>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000328 	.word	0x20000328
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020800 	.word	0x40020800

08001604 <reset_output>:

void reset_output(struct data *d1)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <reset_output+0x88>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10a      	bne.n	800162a <reset_output+0x26>
	{
		d1->GPIO[0] = write_gpio(GPIOA,GPIO_PIN_13, PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161a:	481d      	ldr	r0, [pc, #116]	; (8001690 <reset_output+0x8c>)
 800161c:	f000 ff6c 	bl	80024f8 <write_gpio>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(config[1] == 0)
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <reset_output+0x88>)
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10a      	bne.n	8001648 <reset_output+0x44>
	{
		d1->GPIO[1]=write_gpio(GPIOA,GPIO_PIN_14, PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001638:	4815      	ldr	r0, [pc, #84]	; (8001690 <reset_output+0x8c>)
 800163a:	f000 ff5d 	bl	80024f8 <write_gpio>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	if(config[2] == 0)
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <reset_output+0x88>)
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <reset_output+0x62>
	{
		d1->GPIO[2] = write_gpio(GPIOC,GPIO_PIN_13, PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001656:	480f      	ldr	r0, [pc, #60]	; (8001694 <reset_output+0x90>)
 8001658:	f000 ff4e 	bl	80024f8 <write_gpio>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if(config[3] == 0)
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <reset_output+0x88>)
 8001668:	78db      	ldrb	r3, [r3, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10a      	bne.n	8001684 <reset_output+0x80>
	{
		d1->GPIO[3] = write_gpio(GPIOC,GPIO_PIN_14, PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <reset_output+0x90>)
 8001676:	f000 ff3f 	bl	80024f8 <write_gpio>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000328 	.word	0x20000328
 8001690:	40020000 	.word	0x40020000
 8001694:	40020800 	.word	0x40020800

08001698 <read_pinstatus>:

void read_pinstatus(struct data *d2)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if(config[0]==1)
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <read_pinstatus+0x80>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d109      	bne.n	80016bc <read_pinstatus+0x24>
	{
		d2->GPIO[0]=read_gpio( GPIOA,GPIO_PIN_13);
 80016a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <read_pinstatus+0x84>)
 80016ae:	f000 ff13 	bl	80024d8 <read_gpio>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if(config[1]==1)
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <read_pinstatus+0x80>)
 80016be:	785b      	ldrb	r3, [r3, #1]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d109      	bne.n	80016d8 <read_pinstatus+0x40>
	{
		d2->GPIO[1]=read_gpio( GPIOA,GPIO_PIN_14);
 80016c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <read_pinstatus+0x84>)
 80016ca:	f000 ff05 	bl	80024d8 <read_gpio>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	if(config[2]==1)
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <read_pinstatus+0x80>)
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d109      	bne.n	80016f4 <read_pinstatus+0x5c>
	{
		d2->GPIO[2]=read_gpio( GPIOC,GPIO_PIN_13);
 80016e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e4:	480e      	ldr	r0, [pc, #56]	; (8001720 <read_pinstatus+0x88>)
 80016e6:	f000 fef7 	bl	80024d8 <read_gpio>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	if(config[3]==1)
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <read_pinstatus+0x80>)
 80016f6:	78db      	ldrb	r3, [r3, #3]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d109      	bne.n	8001710 <read_pinstatus+0x78>
	{
		d2->GPIO[3]=read_gpio( GPIOC,GPIO_PIN_14);
 80016fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001700:	4807      	ldr	r0, [pc, #28]	; (8001720 <read_pinstatus+0x88>)
 8001702:	f000 fee9 	bl	80024d8 <read_gpio>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	//	 return d->GPIO;
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000328 	.word	0x20000328
 800171c:	40020000 	.word	0x40020000
 8001720:	40020800 	.word	0x40020800

08001724 <extract_data>:


void extract_data()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 8001728:	4919      	ldr	r1, [pc, #100]	; (8001790 <extract_data+0x6c>)
 800172a:	481a      	ldr	r0, [pc, #104]	; (8001794 <extract_data+0x70>)
 800172c:	f008 fe3c 	bl	800a3a8 <strtok>
 8001730:	4603      	mov	r3, r0
 8001732:	4a19      	ldr	r2, [pc, #100]	; (8001798 <extract_data+0x74>)
 8001734:	6013      	str	r3, [r2, #0]


	if (token != NULL)
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <extract_data+0x74>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d014      	beq.n	8001768 <extract_data+0x44>
	{
		strncpy(arr1, token, sizeof(arr1) - 1);
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <extract_data+0x74>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2209      	movs	r2, #9
 8001744:	4619      	mov	r1, r3
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <extract_data+0x78>)
 8001748:	f007 fff2 	bl	8009730 <strncpy>

		arr1[sizeof(arr1) - 1] = '\0';// Ensure null-termination
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <extract_data+0x78>)
 800174e:	2200      	movs	r2, #0
 8001750:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr1,arr1);
 8001752:	4912      	ldr	r1, [pc, #72]	; (800179c <extract_data+0x78>)
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <extract_data+0x7c>)
 8001756:	f007 ffe3 	bl	8009720 <strcpy>


		token = strtok(NULL, ",");
 800175a:	490d      	ldr	r1, [pc, #52]	; (8001790 <extract_data+0x6c>)
 800175c:	2000      	movs	r0, #0
 800175e:	f008 fe23 	bl	800a3a8 <strtok>
 8001762:	4603      	mov	r3, r0
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <extract_data+0x74>)
 8001766:	6013      	str	r3, [r2, #0]
	}

	// Get the second token and store it in arr2
	if (token != NULL)
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <extract_data+0x74>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00d      	beq.n	800178c <extract_data+0x68>
	{
		strncpy(arr2, token, sizeof(arr2) - 1);
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <extract_data+0x74>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2209      	movs	r2, #9
 8001776:	4619      	mov	r1, r3
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <extract_data+0x80>)
 800177a:	f007 ffd9 	bl	8009730 <strncpy>

		arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <extract_data+0x80>)
 8001780:	2200      	movs	r2, #0
 8001782:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr2,arr2);
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <extract_data+0x80>)
 8001786:	4808      	ldr	r0, [pc, #32]	; (80017a8 <extract_data+0x84>)
 8001788:	f007 ffca 	bl	8009720 <strcpy>

		//token = strtok(NULL, ",");
	}


}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	0800d218 	.word	0x0800d218
 8001794:	200002b4 	.word	0x200002b4
 8001798:	20000320 	.word	0x20000320
 800179c:	20000308 	.word	0x20000308
 80017a0:	20000203 	.word	0x20000203
 80017a4:	20000314 	.word	0x20000314
 80017a8:	2000020d 	.word	0x2000020d

080017ac <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af04      	add	r7, sp, #16

	if(strcmp(arr1,"A13")==0)
 80017b2:	49a3      	ldr	r1, [pc, #652]	; (8001a40 <pin_config+0x294>)
 80017b4:	48a3      	ldr	r0, [pc, #652]	; (8001a44 <pin_config+0x298>)
 80017b6:	f7fe fd2b 	bl	8000210 <strcmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <pin_config+0x1c>
	{
		switch_val=1;
 80017c0:	4ba1      	ldr	r3, [pc, #644]	; (8001a48 <pin_config+0x29c>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e04b      	b.n	8001860 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"A14")==0)
 80017c8:	49a0      	ldr	r1, [pc, #640]	; (8001a4c <pin_config+0x2a0>)
 80017ca:	489e      	ldr	r0, [pc, #632]	; (8001a44 <pin_config+0x298>)
 80017cc:	f7fe fd20 	bl	8000210 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <pin_config+0x32>
	{
		switch_val=2;
 80017d6:	4b9c      	ldr	r3, [pc, #624]	; (8001a48 <pin_config+0x29c>)
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e040      	b.n	8001860 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"C13")==0)
 80017de:	499c      	ldr	r1, [pc, #624]	; (8001a50 <pin_config+0x2a4>)
 80017e0:	4898      	ldr	r0, [pc, #608]	; (8001a44 <pin_config+0x298>)
 80017e2:	f7fe fd15 	bl	8000210 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <pin_config+0x48>
	{
		switch_val=3;
 80017ec:	4b96      	ldr	r3, [pc, #600]	; (8001a48 <pin_config+0x29c>)
 80017ee:	2203      	movs	r2, #3
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e035      	b.n	8001860 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"C14")==0)
 80017f4:	4997      	ldr	r1, [pc, #604]	; (8001a54 <pin_config+0x2a8>)
 80017f6:	4893      	ldr	r0, [pc, #588]	; (8001a44 <pin_config+0x298>)
 80017f8:	f7fe fd0a 	bl	8000210 <strcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <pin_config+0x5e>
	{
		switch_val=4;
 8001802:	4b91      	ldr	r3, [pc, #580]	; (8001a48 <pin_config+0x29c>)
 8001804:	2204      	movs	r2, #4
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e02a      	b.n	8001860 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"ADC1")==0)
 800180a:	4993      	ldr	r1, [pc, #588]	; (8001a58 <pin_config+0x2ac>)
 800180c:	488d      	ldr	r0, [pc, #564]	; (8001a44 <pin_config+0x298>)
 800180e:	f7fe fcff 	bl	8000210 <strcmp>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d103      	bne.n	8001820 <pin_config+0x74>
	{
		switch_val=5;
 8001818:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <pin_config+0x29c>)
 800181a:	2205      	movs	r2, #5
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e01f      	b.n	8001860 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"RTC")==0)
 8001820:	498e      	ldr	r1, [pc, #568]	; (8001a5c <pin_config+0x2b0>)
 8001822:	4888      	ldr	r0, [pc, #544]	; (8001a44 <pin_config+0x298>)
 8001824:	f7fe fcf4 	bl	8000210 <strcmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d103      	bne.n	8001836 <pin_config+0x8a>
	{
		switch_val=6;
 800182e:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <pin_config+0x29c>)
 8001830:	2206      	movs	r2, #6
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e014      	b.n	8001860 <pin_config+0xb4>
	}

	else if(strcmp(arr1,"DATE")==0)
 8001836:	498a      	ldr	r1, [pc, #552]	; (8001a60 <pin_config+0x2b4>)
 8001838:	4882      	ldr	r0, [pc, #520]	; (8001a44 <pin_config+0x298>)
 800183a:	f7fe fce9 	bl	8000210 <strcmp>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d103      	bne.n	800184c <pin_config+0xa0>
	{
		switch_val=7;
 8001844:	4b80      	ldr	r3, [pc, #512]	; (8001a48 <pin_config+0x29c>)
 8001846:	2207      	movs	r2, #7
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e009      	b.n	8001860 <pin_config+0xb4>
	}
	else if(strcmp(arr1,"SCANTIME")==0)
 800184c:	4985      	ldr	r1, [pc, #532]	; (8001a64 <pin_config+0x2b8>)
 800184e:	487d      	ldr	r0, [pc, #500]	; (8001a44 <pin_config+0x298>)
 8001850:	f7fe fcde 	bl	8000210 <strcmp>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <pin_config+0xb4>
	{
		switch_val=8;
 800185a:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <pin_config+0x29c>)
 800185c:	2208      	movs	r2, #8
 800185e:	601a      	str	r2, [r3, #0]
	}


	switch(switch_val)
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <pin_config+0x29c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	2b07      	cmp	r3, #7
 8001868:	f200 81c3 	bhi.w	8001bf2 <pin_config+0x446>
 800186c:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <pin_config+0xc8>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	08001895 	.word	0x08001895
 8001878:	080018db 	.word	0x080018db
 800187c:	08001921 	.word	0x08001921
 8001880:	08001967 	.word	0x08001967
 8001884:	080019ad 	.word	0x080019ad
 8001888:	08001a99 	.word	0x08001a99
 800188c:	08001b31 	.word	0x08001b31
 8001890:	08001bd3 	.word	0x08001bd3
	{

	case 1:
		if(strcmp(arr2,"OUTPUT")==0)
 8001894:	4974      	ldr	r1, [pc, #464]	; (8001a68 <pin_config+0x2bc>)
 8001896:	4875      	ldr	r0, [pc, #468]	; (8001a6c <pin_config+0x2c0>)
 8001898:	f7fe fcba 	bl	8000210 <strcmp>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <pin_config+0x10a>
		{
			user_GPIO_Init(GPIOA,GPIO_PIN_13,OUTPUT);
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a8:	4871      	ldr	r0, [pc, #452]	; (8001a70 <pin_config+0x2c4>)
 80018aa:	f000 fd5f 	bl	800236c <user_GPIO_Init>
			config[0] = 0;
 80018ae:	4b71      	ldr	r3, [pc, #452]	; (8001a74 <pin_config+0x2c8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOA,GPIO_PIN_13,INPUT);
			config[0] = 1;
		}
		break;
 80018b4:	e196      	b.n	8001be4 <pin_config+0x438>
		else if(strcmp(arr2,"INPUT")==0)
 80018b6:	4970      	ldr	r1, [pc, #448]	; (8001a78 <pin_config+0x2cc>)
 80018b8:	486c      	ldr	r0, [pc, #432]	; (8001a6c <pin_config+0x2c0>)
 80018ba:	f7fe fca9 	bl	8000210 <strcmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 818f 	bne.w	8001be4 <pin_config+0x438>
			user_GPIO_Init(GPIOA,GPIO_PIN_13,INPUT);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	4868      	ldr	r0, [pc, #416]	; (8001a70 <pin_config+0x2c4>)
 80018ce:	f000 fd4d 	bl	800236c <user_GPIO_Init>
			config[0] = 1;
 80018d2:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <pin_config+0x2c8>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
		break;
 80018d8:	e184      	b.n	8001be4 <pin_config+0x438>

	case 2:
		if(strcmp(arr2,"OUTPUT")==0)
 80018da:	4963      	ldr	r1, [pc, #396]	; (8001a68 <pin_config+0x2bc>)
 80018dc:	4863      	ldr	r0, [pc, #396]	; (8001a6c <pin_config+0x2c0>)
 80018de:	f7fe fc97 	bl	8000210 <strcmp>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <pin_config+0x150>
		{
			user_GPIO_Init(GPIOA,GPIO_PIN_14,OUTPUT);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ee:	4860      	ldr	r0, [pc, #384]	; (8001a70 <pin_config+0x2c4>)
 80018f0:	f000 fd3c 	bl	800236c <user_GPIO_Init>
			config[1]=0;
 80018f4:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <pin_config+0x2c8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	705a      	strb	r2, [r3, #1]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOA,GPIO_PIN_14,INPUT);
			config[1]=1;
		}
		break;
 80018fa:	e175      	b.n	8001be8 <pin_config+0x43c>
		else if(strcmp(arr2,"INPUT")==0)
 80018fc:	495e      	ldr	r1, [pc, #376]	; (8001a78 <pin_config+0x2cc>)
 80018fe:	485b      	ldr	r0, [pc, #364]	; (8001a6c <pin_config+0x2c0>)
 8001900:	f7fe fc86 	bl	8000210 <strcmp>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 816e 	bne.w	8001be8 <pin_config+0x43c>
			user_GPIO_Init(GPIOA,GPIO_PIN_14,INPUT);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001912:	4857      	ldr	r0, [pc, #348]	; (8001a70 <pin_config+0x2c4>)
 8001914:	f000 fd2a 	bl	800236c <user_GPIO_Init>
			config[1]=1;
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <pin_config+0x2c8>)
 800191a:	2201      	movs	r2, #1
 800191c:	705a      	strb	r2, [r3, #1]
		break;
 800191e:	e163      	b.n	8001be8 <pin_config+0x43c>

	case 3:
		if(strcmp(arr2,"OUTPUT")==0)
 8001920:	4951      	ldr	r1, [pc, #324]	; (8001a68 <pin_config+0x2bc>)
 8001922:	4852      	ldr	r0, [pc, #328]	; (8001a6c <pin_config+0x2c0>)
 8001924:	f7fe fc74 	bl	8000210 <strcmp>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <pin_config+0x196>
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_13,OUTPUT);
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001934:	4851      	ldr	r0, [pc, #324]	; (8001a7c <pin_config+0x2d0>)
 8001936:	f000 fd19 	bl	800236c <user_GPIO_Init>
			config[2]=0;
 800193a:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <pin_config+0x2c8>)
 800193c:	2200      	movs	r2, #0
 800193e:	709a      	strb	r2, [r3, #2]
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_13,INPUT);
			config[2]=1;
		}

		break;
 8001940:	e154      	b.n	8001bec <pin_config+0x440>
		else if(strcmp(arr2,"INPUT")==0)
 8001942:	494d      	ldr	r1, [pc, #308]	; (8001a78 <pin_config+0x2cc>)
 8001944:	4849      	ldr	r0, [pc, #292]	; (8001a6c <pin_config+0x2c0>)
 8001946:	f7fe fc63 	bl	8000210 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 814d 	bne.w	8001bec <pin_config+0x440>
			user_GPIO_Init(GPIOC,GPIO_PIN_13,INPUT);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	4848      	ldr	r0, [pc, #288]	; (8001a7c <pin_config+0x2d0>)
 800195a:	f000 fd07 	bl	800236c <user_GPIO_Init>
			config[2]=1;
 800195e:	4b45      	ldr	r3, [pc, #276]	; (8001a74 <pin_config+0x2c8>)
 8001960:	2201      	movs	r2, #1
 8001962:	709a      	strb	r2, [r3, #2]
		break;
 8001964:	e142      	b.n	8001bec <pin_config+0x440>

	case 4:
		if(strcmp(arr2,"OUTPUT")==0)
 8001966:	4940      	ldr	r1, [pc, #256]	; (8001a68 <pin_config+0x2bc>)
 8001968:	4840      	ldr	r0, [pc, #256]	; (8001a6c <pin_config+0x2c0>)
 800196a:	f7fe fc51 	bl	8000210 <strcmp>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <pin_config+0x1dc>
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_14,OUTPUT);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197a:	4840      	ldr	r0, [pc, #256]	; (8001a7c <pin_config+0x2d0>)
 800197c:	f000 fcf6 	bl	800236c <user_GPIO_Init>
			config[3]=0;
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <pin_config+0x2c8>)
 8001982:	2200      	movs	r2, #0
 8001984:	70da      	strb	r2, [r3, #3]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_14,INPUT);
			config[3]=1;
		}
		break;
 8001986:	e133      	b.n	8001bf0 <pin_config+0x444>
		else if(strcmp(arr2,"INPUT")==0)
 8001988:	493b      	ldr	r1, [pc, #236]	; (8001a78 <pin_config+0x2cc>)
 800198a:	4838      	ldr	r0, [pc, #224]	; (8001a6c <pin_config+0x2c0>)
 800198c:	f7fe fc40 	bl	8000210 <strcmp>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 812c 	bne.w	8001bf0 <pin_config+0x444>
			user_GPIO_Init(GPIOC,GPIO_PIN_14,INPUT);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	4837      	ldr	r0, [pc, #220]	; (8001a7c <pin_config+0x2d0>)
 80019a0:	f000 fce4 	bl	800236c <user_GPIO_Init>
			config[3]=1;
 80019a4:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <pin_config+0x2c8>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	70da      	strb	r2, [r3, #3]
		break;
 80019aa:	e121      	b.n	8001bf0 <pin_config+0x444>

	case 5:
		if(strcmp(arr2,"CH1")==0)
 80019ac:	4934      	ldr	r1, [pc, #208]	; (8001a80 <pin_config+0x2d4>)
 80019ae:	482f      	ldr	r0, [pc, #188]	; (8001a6c <pin_config+0x2c0>)
 80019b0:	f7fe fc2e 	bl	8000210 <strcmp>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <pin_config+0x21a>
		{
			ADC_select_CH1();
 80019ba:	f000 f9dd 	bl	8001d78 <ADC_select_CH1>
			adcChnlChecker[0] = 1;
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <pin_config+0x2d8>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			__NOP();
		}
		break;
 80019c4:	e115      	b.n	8001bf2 <pin_config+0x446>
		else if(strcmp(arr2,"CH2")==0)
 80019c6:	4930      	ldr	r1, [pc, #192]	; (8001a88 <pin_config+0x2dc>)
 80019c8:	4828      	ldr	r0, [pc, #160]	; (8001a6c <pin_config+0x2c0>)
 80019ca:	f7fe fc21 	bl	8000210 <strcmp>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <pin_config+0x234>
			ADC_select_CH2();
 80019d4:	f000 f9ea 	bl	8001dac <ADC_select_CH2>
			adcChnlChecker[1] = 1;
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <pin_config+0x2d8>)
 80019da:	2201      	movs	r2, #1
 80019dc:	705a      	strb	r2, [r3, #1]
		break;
 80019de:	e108      	b.n	8001bf2 <pin_config+0x446>
		else if(strcmp(arr2,"CH3")==0)
 80019e0:	492a      	ldr	r1, [pc, #168]	; (8001a8c <pin_config+0x2e0>)
 80019e2:	4822      	ldr	r0, [pc, #136]	; (8001a6c <pin_config+0x2c0>)
 80019e4:	f7fe fc14 	bl	8000210 <strcmp>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <pin_config+0x24e>
			ADC_select_CH3();
 80019ee:	f000 f9f7 	bl	8001de0 <ADC_select_CH3>
			adcChnlChecker[2] = 1;
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <pin_config+0x2d8>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	709a      	strb	r2, [r3, #2]
		break;
 80019f8:	e0fb      	b.n	8001bf2 <pin_config+0x446>
		else if(strcmp(arr2,"CH4")==0)
 80019fa:	4925      	ldr	r1, [pc, #148]	; (8001a90 <pin_config+0x2e4>)
 80019fc:	481b      	ldr	r0, [pc, #108]	; (8001a6c <pin_config+0x2c0>)
 80019fe:	f7fe fc07 	bl	8000210 <strcmp>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <pin_config+0x268>
			ADC_select_CH4();
 8001a08:	f000 fa04 	bl	8001e14 <ADC_select_CH4>
			adcChnlChecker[3] = 1;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <pin_config+0x2d8>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	70da      	strb	r2, [r3, #3]
		break;
 8001a12:	e0ee      	b.n	8001bf2 <pin_config+0x446>
		else if(strcmp(arr2,"DB2")==0)
 8001a14:	491f      	ldr	r1, [pc, #124]	; (8001a94 <pin_config+0x2e8>)
 8001a16:	4815      	ldr	r0, [pc, #84]	; (8001a6c <pin_config+0x2c0>)
 8001a18:	f7fe fbfa 	bl	8000210 <strcmp>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <pin_config+0x290>
			adcChnlChecker[0] = 0;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <pin_config+0x2d8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
			adcChnlChecker[1] = 0;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <pin_config+0x2d8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	705a      	strb	r2, [r3, #1]
			adcChnlChecker[2] = 0;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <pin_config+0x2d8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	709a      	strb	r2, [r3, #2]
			adcChnlChecker[3] = 0;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <pin_config+0x2d8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	70da      	strb	r2, [r3, #3]
		break;
 8001a3a:	e0da      	b.n	8001bf2 <pin_config+0x446>
			__NOP();
 8001a3c:	bf00      	nop
		break;
 8001a3e:	e0d8      	b.n	8001bf2 <pin_config+0x446>
 8001a40:	0800d21c 	.word	0x0800d21c
 8001a44:	20000308 	.word	0x20000308
 8001a48:	200002b0 	.word	0x200002b0
 8001a4c:	0800d220 	.word	0x0800d220
 8001a50:	0800d224 	.word	0x0800d224
 8001a54:	0800d228 	.word	0x0800d228
 8001a58:	0800d22c 	.word	0x0800d22c
 8001a5c:	0800d234 	.word	0x0800d234
 8001a60:	0800d238 	.word	0x0800d238
 8001a64:	0800d240 	.word	0x0800d240
 8001a68:	0800d24c 	.word	0x0800d24c
 8001a6c:	20000314 	.word	0x20000314
 8001a70:	40020000 	.word	0x40020000
 8001a74:	20000328 	.word	0x20000328
 8001a78:	0800d254 	.word	0x0800d254
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	0800d25c 	.word	0x0800d25c
 8001a84:	2000032c 	.word	0x2000032c
 8001a88:	0800d260 	.word	0x0800d260
 8001a8c:	0800d264 	.word	0x0800d264
 8001a90:	0800d268 	.word	0x0800d268
 8001a94:	0800d26c 	.word	0x0800d26c

	case 6:

		token = strtok(arr2, ":");
 8001a98:	4957      	ldr	r1, [pc, #348]	; (8001bf8 <pin_config+0x44c>)
 8001a9a:	4858      	ldr	r0, [pc, #352]	; (8001bfc <pin_config+0x450>)
 8001a9c:	f008 fc84 	bl	800a3a8 <strtok>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <pin_config+0x454>)
 8001aa4:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <pin_config+0x454>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00f      	beq.n	8001ace <pin_config+0x322>
		{
			d.hour = atoi(token);
 8001aae:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <pin_config+0x454>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f006 fe2a 	bl	800870c <atoi>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <pin_config+0x458>)
 8001abe:	709a      	strb	r2, [r3, #2]
			token = strtok(NULL, ":");
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <pin_config+0x44c>)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f008 fc70 	bl	800a3a8 <strtok>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a4d      	ldr	r2, [pc, #308]	; (8001c00 <pin_config+0x454>)
 8001acc:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <pin_config+0x454>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00f      	beq.n	8001af6 <pin_config+0x34a>
		{
			d.minutes = atoi(token);
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <pin_config+0x454>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 fe16 	bl	800870c <atoi>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <pin_config+0x458>)
 8001ae6:	705a      	strb	r2, [r3, #1]
			token = strtok(NULL, ":");
 8001ae8:	4943      	ldr	r1, [pc, #268]	; (8001bf8 <pin_config+0x44c>)
 8001aea:	2000      	movs	r0, #0
 8001aec:	f008 fc5c 	bl	800a3a8 <strtok>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a43      	ldr	r2, [pc, #268]	; (8001c00 <pin_config+0x454>)
 8001af4:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <pin_config+0x454>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <pin_config+0x364>
		{

			d.seconds = atoi(token);
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <pin_config+0x454>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f006 fe02 	bl	800870c <atoi>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <pin_config+0x458>)
 8001b0e:	701a      	strb	r2, [r3, #0]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,3,0,0,0);
 8001b10:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <pin_config+0x458>)
 8001b12:	7818      	ldrb	r0, [r3, #0]
 8001b14:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <pin_config+0x458>)
 8001b16:	7859      	ldrb	r1, [r3, #1]
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <pin_config+0x458>)
 8001b1a:	789a      	ldrb	r2, [r3, #2]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2303      	movs	r3, #3
 8001b2a:	f7ff fc4b 	bl	80013c4 <set_time>

		break;
 8001b2e:	e060      	b.n	8001bf2 <pin_config+0x446>
	case 7:

		token = strtok(arr2, ":");
 8001b30:	4931      	ldr	r1, [pc, #196]	; (8001bf8 <pin_config+0x44c>)
 8001b32:	4832      	ldr	r0, [pc, #200]	; (8001bfc <pin_config+0x450>)
 8001b34:	f008 fc38 	bl	800a3a8 <strtok>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <pin_config+0x454>)
 8001b3c:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8001b3e:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <pin_config+0x454>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00f      	beq.n	8001b66 <pin_config+0x3ba>
		{
			d.dayofmonth = atoi(token);
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <pin_config+0x454>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f006 fdde 	bl	800870c <atoi>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <pin_config+0x458>)
 8001b56:	711a      	strb	r2, [r3, #4]
			token = strtok(NULL, ":");
 8001b58:	4927      	ldr	r1, [pc, #156]	; (8001bf8 <pin_config+0x44c>)
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f008 fc24 	bl	800a3a8 <strtok>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <pin_config+0x454>)
 8001b64:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <pin_config+0x454>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00f      	beq.n	8001b8e <pin_config+0x3e2>
		{
			d.month = atoi(token);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <pin_config+0x454>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f006 fdca 	bl	800870c <atoi>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <pin_config+0x458>)
 8001b7e:	715a      	strb	r2, [r3, #5]
			token = strtok(NULL, ":");
 8001b80:	491d      	ldr	r1, [pc, #116]	; (8001bf8 <pin_config+0x44c>)
 8001b82:	2000      	movs	r0, #0
 8001b84:	f008 fc10 	bl	800a3a8 <strtok>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <pin_config+0x454>)
 8001b8c:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <pin_config+0x454>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <pin_config+0x3fc>
		{
			d.year = atoi(token);
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <pin_config+0x454>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f006 fdb6 	bl	800870c <atoi>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <pin_config+0x458>)
 8001ba6:	719a      	strb	r2, [r3, #6]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,d.dayofmonth,d.month,d.year);
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <pin_config+0x458>)
 8001baa:	7818      	ldrb	r0, [r3, #0]
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <pin_config+0x458>)
 8001bae:	785c      	ldrb	r4, [r3, #1]
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <pin_config+0x458>)
 8001bb2:	789d      	ldrb	r5, [r3, #2]
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <pin_config+0x458>)
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <pin_config+0x458>)
 8001bba:	7952      	ldrb	r2, [r2, #5]
 8001bbc:	4911      	ldr	r1, [pc, #68]	; (8001c04 <pin_config+0x458>)
 8001bbe:	7989      	ldrb	r1, [r1, #6]
 8001bc0:	9102      	str	r1, [sp, #8]
 8001bc2:	9201      	str	r2, [sp, #4]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	462a      	mov	r2, r5
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f7ff fbfa 	bl	80013c4 <set_time>
		break;
 8001bd0:	e00f      	b.n	8001bf2 <pin_config+0x446>

	case 8:
		d.scan_time = (uint8_t)atoi(arr2);
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <pin_config+0x450>)
 8001bd4:	f006 fd9a 	bl	800870c <atoi>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <pin_config+0x458>)
 8001bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8001be2:	e006      	b.n	8001bf2 <pin_config+0x446>
		break;
 8001be4:	bf00      	nop
 8001be6:	e004      	b.n	8001bf2 <pin_config+0x446>
		break;
 8001be8:	bf00      	nop
 8001bea:	e002      	b.n	8001bf2 <pin_config+0x446>
		break;
 8001bec:	bf00      	nop
 8001bee:	e000      	b.n	8001bf2 <pin_config+0x446>
		break;
 8001bf0:	bf00      	nop

	}
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf8:	0800d270 	.word	0x0800d270
 8001bfc:	20000314 	.word	0x20000314
 8001c00:	20000320 	.word	0x20000320
 8001c04:	200001fc 	.word	0x200001fc

08001c08 <terminal>:
extern char CH4[10];



void terminal(struct data *d)
{
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	b08f      	sub	sp, #60	; 0x3c
 8001c0c:	af0c      	add	r7, sp, #48	; 0x30
 8001c0e:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"TIME:%02d:%02d:%02d DATE:%02d/%02d/%02d CH1:%s CH2:%s CH3:%s CH4:%s GPIO1:%s GPIO2:%s GPIO3:%s GPIO4:%s\r\n",d->hour,d->minutes,d->seconds,d->dayofmonth,d->month,d->year,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	789b      	ldrb	r3, [r3, #2]
 8001c14:	469c      	mov	ip, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	469e      	mov	lr, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461c      	mov	r4, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	791b      	ldrb	r3, [r3, #4]
 8001c26:	461d      	mov	r5, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	795b      	ldrb	r3, [r3, #5]
 8001c2c:	461e      	mov	r6, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	799b      	ldrb	r3, [r3, #6]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3331      	adds	r3, #49	; 0x31
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	323b      	adds	r2, #59	; 0x3b
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	3145      	adds	r1, #69	; 0x45
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	304f      	adds	r0, #79	; 0x4f
 8001c44:	900b      	str	r0, [sp, #44]	; 0x2c
 8001c46:	910a      	str	r1, [sp, #40]	; 0x28
 8001c48:	9209      	str	r2, [sp, #36]	; 0x24
 8001c4a:	9308      	str	r3, [sp, #32]
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <terminal+0x78>)
 8001c4e:	9307      	str	r3, [sp, #28]
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <terminal+0x7c>)
 8001c52:	9306      	str	r3, [sp, #24]
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <terminal+0x80>)
 8001c56:	9305      	str	r3, [sp, #20]
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <terminal+0x84>)
 8001c5a:	9304      	str	r3, [sp, #16]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	9602      	str	r6, [sp, #8]
 8001c62:	9501      	str	r5, [sp, #4]
 8001c64:	9400      	str	r4, [sp, #0]
 8001c66:	4673      	mov	r3, lr
 8001c68:	4662      	mov	r2, ip
 8001c6a:	4909      	ldr	r1, [pc, #36]	; (8001c90 <terminal+0x88>)
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <terminal+0x8c>)
 8001c6e:	f007 fd37 	bl	80096e0 <siprintf>
//	sprintf((char*)buf2,"%02d:%02d:%02d\r\n",d->dayofmonth,d->month,d->year);
	uart3_tx(buf);
 8001c72:	4808      	ldr	r0, [pc, #32]	; (8001c94 <terminal+0x8c>)
 8001c74:	f000 fc54 	bl	8002520 <uart3_tx>
//	HAL_Delay(100);

}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c80:	200002a0 	.word	0x200002a0
 8001c84:	20000294 	.word	0x20000294
 8001c88:	20000288 	.word	0x20000288
 8001c8c:	2000027c 	.word	0x2000027c
 8001c90:	0800d274 	.word	0x0800d274
 8001c94:	20000330 	.word	0x20000330

08001c98 <USER_ADC1_Init>:
//	 */
//	HAL_RCCEx_EnableMSIPLLMode();
//}

void USER_ADC1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	//
	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <USER_ADC1_Init+0x6c>)
 8001ca0:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001ca4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ca8:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <USER_ADC1_Init+0x70>)
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 4;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cd8:	2204      	movs	r2, #4
 8001cda:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <USER_ADC1_Init+0x68>)
 8001cec:	f001 f864 	bl	8002db8 <HAL_ADC_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <USER_ADC1_Init+0x62>
	  {
	    Error_Handler();
 8001cf6:	f000 fc6c 	bl	80025d2 <Error_Handler>
//	  }
	  /* USER CODE BEGIN ADC1_Init 2 */
	//
	  /* USER CODE END ADC1_Init 2 */

	}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000408 	.word	0x20000408
 8001d04:	40012000 	.word	0x40012000
 8001d08:	0f000001 	.word	0x0f000001

08001d0c <USER_GPIO_Init>:


void USER_GPIO_Init(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <USER_GPIO_Init+0x68>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
//		Error_Handler();
//	}

//	  ADC_ChannelConfTypeDef sConfig = {0};

	sConfig.Channel = ADC_CHANNEL_5;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <ADC_select_CH1+0x2c>)
 8001d7e:	2205      	movs	r2, #5
 8001d80:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <ADC_select_CH1+0x2c>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <ADC_select_CH1+0x2c>)
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8e:	4905      	ldr	r1, [pc, #20]	; (8001da4 <ADC_select_CH1+0x2c>)
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <ADC_select_CH1+0x30>)
 8001d92:	f001 fb21 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <ADC_select_CH1+0x28>
		  {
		    Error_Handler();
 8001d9c:	f000 fc19 	bl	80025d2 <Error_Handler>
		  }
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200003f8 	.word	0x200003f8
 8001da8:	20000408 	.word	0x20000408

08001dac <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
//	sConfig.Offset = 0;
//	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}
	 sConfig.Channel = ADC_CHANNEL_6;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <ADC_select_CH2+0x2c>)
 8001db2:	2206      	movs	r2, #6
 8001db4:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 2;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <ADC_select_CH2+0x2c>)
 8001db8:	2202      	movs	r2, #2
 8001dba:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <ADC_select_CH2+0x2c>)
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc2:	4905      	ldr	r1, [pc, #20]	; (8001dd8 <ADC_select_CH2+0x2c>)
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <ADC_select_CH2+0x30>)
 8001dc6:	f001 fb07 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <ADC_select_CH2+0x28>
		  {
		    Error_Handler();
 8001dd0:	f000 fbff 	bl	80025d2 <Error_Handler>
		  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200003f8 	.word	0x200003f8
 8001ddc:	20000408 	.word	0x20000408

08001de0 <ADC_select_CH3>:

void ADC_select_CH3(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
//	{
//		Error_Handler();
//	}


	  sConfig.Channel = ADC_CHANNEL_9;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <ADC_select_CH3+0x2c>)
 8001de6:	2209      	movs	r2, #9
 8001de8:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 3;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <ADC_select_CH3+0x2c>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <ADC_select_CH3+0x2c>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df6:	4905      	ldr	r1, [pc, #20]	; (8001e0c <ADC_select_CH3+0x2c>)
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <ADC_select_CH3+0x30>)
 8001dfa:	f001 faed 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <ADC_select_CH3+0x28>
		  {
		    Error_Handler();
 8001e04:	f000 fbe5 	bl	80025d2 <Error_Handler>
		  }
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200003f8 	.word	0x200003f8
 8001e10:	20000408 	.word	0x20000408

08001e14 <ADC_select_CH4>:

void ADC_select_CH4(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
//	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//	{
//		Error_Handler();
//	}

	sConfig.Channel = ADC_CHANNEL_10;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <ADC_select_CH4+0x2c>)
 8001e1a:	220a      	movs	r2, #10
 8001e1c:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 4;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <ADC_select_CH4+0x2c>)
 8001e20:	2204      	movs	r2, #4
 8001e22:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <ADC_select_CH4+0x2c>)
 8001e26:	2207      	movs	r2, #7
 8001e28:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2a:	4905      	ldr	r1, [pc, #20]	; (8001e40 <ADC_select_CH4+0x2c>)
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <ADC_select_CH4+0x30>)
 8001e2e:	f001 fad3 	bl	80033d8 <HAL_ADC_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <ADC_select_CH4+0x28>
		  {
		    Error_Handler();
 8001e38:	f000 fbcb 	bl	80025d2 <Error_Handler>
		  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200003f8 	.word	0x200003f8
 8001e44:	20000408 	.word	0x20000408

08001e48 <adc_start>:
//}



void adc_start(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <adc_start+0x10>)
 8001e4e:	f000 fff7 	bl	8002e40 <HAL_ADC_Start>
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000408 	.word	0x20000408

08001e5c <adc_conversion>:

void adc_conversion(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 8001e60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <adc_conversion+0x14>)
 8001e66:	f001 f8f0 	bl	800304a <HAL_ADC_PollForConversion>
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000408 	.word	0x20000408

08001e74 <adc_value>:

uint16_t adc_value(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <adc_value+0x14>)
 8001e7a:	f001 fa81 	bl	8003380 <HAL_ADC_GetValue>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29b      	uxth	r3, r3
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000408 	.word	0x20000408

08001e8c <adc_stop>:

void adc_stop(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <adc_stop+0x10>)
 8001e92:	f001 f8a7 	bl	8002fe4 <HAL_ADC_Stop>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000408 	.word	0x20000408

08001ea0 <UART4_Init>:

extern UART_HandleTypeDef huart4;


void UART4_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	  /* USER CODE END UART4_Init 0 */

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  huart4.Instance = UART4;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <UART4_Init+0x4c>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <UART4_Init+0x50>)
 8001ea8:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 115200;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <UART4_Init+0x4c>)
 8001eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb0:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <UART4_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <UART4_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <UART4_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <UART4_Init+0x4c>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <UART4_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <UART4_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <UART4_Init+0x4c>)
 8001ed8:	f005 fab0 	bl	800743c <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <UART4_Init+0x46>
	  {
	    Error_Handler();
 8001ee2:	f000 fb76 	bl	80025d2 <Error_Handler>
	  }
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */

	}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000051c 	.word	0x2000051c
 8001ef0:	40004c00 	.word	0x40004c00

08001ef4 <GsmCommands>:




void GsmCommands(uint8_t* cmd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart4, cmd, strlen((char*)cmd));
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe f991 	bl	8000224 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4807      	ldr	r0, [pc, #28]	; (8001f28 <GsmCommands+0x34>)
 8001f0c:	f005 fc17 	bl	800773e <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart4, Reply, max_buf_len);
 8001f10:	2264      	movs	r2, #100	; 0x64
 8001f12:	4906      	ldr	r1, [pc, #24]	; (8001f2c <GsmCommands+0x38>)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <GsmCommands+0x34>)
 8001f16:	f005 fc57 	bl	80077c8 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 8001f1a:	2064      	movs	r0, #100	; 0x64
 8001f1c:	f000 ff28 	bl	8002d70 <HAL_Delay>

}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2000051c 	.word	0x2000051c
 8001f2c:	20000450 	.word	0x20000450

08001f30 <Gsm_Init>:



void Gsm_Init()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

//	HAL_Delay(2000);


	GsmCommands((uint8_t*)"AT\r\n");
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <Gsm_Init+0x34>)
 8001f36:	f7ff ffdd 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8001f3a:	480b      	ldr	r0, [pc, #44]	; (8001f68 <Gsm_Init+0x38>)
 8001f3c:	f7ff ffda 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8001f40:	480a      	ldr	r0, [pc, #40]	; (8001f6c <Gsm_Init+0x3c>)
 8001f42:	f7ff ffd7 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8001f46:	480a      	ldr	r0, [pc, #40]	; (8001f70 <Gsm_Init+0x40>)
 8001f48:	f7ff ffd4 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=0,1\r\n");
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <Gsm_Init+0x44>)
 8001f4e:	f7ff ffd1 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <Gsm_Init+0x48>)
 8001f54:	f7ff ffce 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 8001f58:	4808      	ldr	r0, [pc, #32]	; (8001f7c <Gsm_Init+0x4c>)
 8001f5a:	f7ff ffcb 	bl	8001ef4 <GsmCommands>

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	0800d2e0 	.word	0x0800d2e0
 8001f68:	0800d2e8 	.word	0x0800d2e8
 8001f6c:	0800d2f4 	.word	0x0800d2f4
 8001f70:	0800d300 	.word	0x0800d300
 8001f74:	0800d310 	.word	0x0800d310
 8001f78:	0800d320 	.word	0x0800d320
 8001f7c:	0800d340 	.word	0x0800d340

08001f80 <DataToCloud>:


void DataToCloud(char* Time,char* Date,char* Ch1,char* Ch2,char* Ch3,char* Ch4,char* D1,char* D2,char* D3,char* D4)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8001f86:	af0a      	add	r7, sp, #40	; 0x28
 8001f88:	f507 740c 	add.w	r4, r7, #560	; 0x230
 8001f8c:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 8001f90:	6020      	str	r0, [r4, #0]
 8001f92:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8001f96:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 8001f9a:	6001      	str	r1, [r0, #0]
 8001f9c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8001fa0:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8001fa4:	600a      	str	r2, [r1, #0]
 8001fa6:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001faa:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 8001fae:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 8001fb0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001fb4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	f000 f8a9 	bl	8002110 <url_encode>
 8001fbe:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	char* encoded_Date = url_encode(Date);
 8001fc2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001fc6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	f000 f8a0 	bl	8002110 <url_encode>
 8001fd0:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	char* encoded_Ch1 = url_encode(Ch1);
 8001fd4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001fd8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f000 f897 	bl	8002110 <url_encode>
 8001fe2:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch2 = url_encode(Ch2);
 8001fe6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001fea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f000 f88e 	bl	8002110 <url_encode>
 8001ff4:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch3 = url_encode(Ch3);
 8001ff8:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8001ffc:	f000 f888 	bl	8002110 <url_encode>
 8002000:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch4 = url_encode(Ch4);
 8002004:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002008:	f000 f882 	bl	8002110 <url_encode>
 800200c:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_D1 = url_encode(D1);
 8002010:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8002014:	f000 f87c 	bl	8002110 <url_encode>
 8002018:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D2 = url_encode(D2);
 800201c:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002020:	f000 f876 	bl	8002110 <url_encode>
 8002024:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D3 = url_encode(D3);
 8002028:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800202c:	f000 f870 	bl	8002110 <url_encode>
 8002030:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D4 = url_encode(D4);
 8002034:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8002038:	f000 f86a 	bl	8002110 <url_encode>
 800203c:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8002040:	482f      	ldr	r0, [pc, #188]	; (8002100 <DataToCloud+0x180>)
 8002042:	f7ff ff57 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 8002046:	482f      	ldr	r0, [pc, #188]	; (8002104 <DataToCloud+0x184>)
 8002048:	f7ff ff54 	bl	8001ef4 <GsmCommands>


	snprintf((char*)AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbz-U5OxlgcTFUr2G3_0L8nzjVQorKuKofxDdJdbM2PCGmTUH6f1J4gkkEfKxTKe0T7a/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s&field10=%s\"\r\n",encoded_Time, encoded_Date, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 800204c:	f107 0014 	add.w	r0, r7, #20
 8002050:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002054:	9308      	str	r3, [sp, #32]
 8002056:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800205a:	9307      	str	r3, [sp, #28]
 800205c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002060:	9306      	str	r3, [sp, #24]
 8002062:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002066:	9305      	str	r3, [sp, #20]
 8002068:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800206c:	9304      	str	r3, [sp, #16]
 800206e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002072:	9303      	str	r3, [sp, #12]
 8002074:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <DataToCloud+0x188>)
 800208c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002090:	f007 faf2 	bl	8009678 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff2b 	bl	8001ef4 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 800209e:	481b      	ldr	r0, [pc, #108]	; (800210c <DataToCloud+0x18c>)
 80020a0:	f7ff ff28 	bl	8001ef4 <GsmCommands>

	free(encoded_Time);
 80020a4:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80020a8:	f006 fb66 	bl	8008778 <free>
	free(encoded_Date);
 80020ac:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80020b0:	f006 fb62 	bl	8008778 <free>
	free(encoded_Ch1);
 80020b4:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80020b8:	f006 fb5e 	bl	8008778 <free>
	free(encoded_Ch2);
 80020bc:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80020c0:	f006 fb5a 	bl	8008778 <free>
	free(encoded_Ch3);
 80020c4:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80020c8:	f006 fb56 	bl	8008778 <free>
	free(encoded_Ch4);
 80020cc:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80020d0:	f006 fb52 	bl	8008778 <free>
	free(encoded_D1);
 80020d4:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80020d8:	f006 fb4e 	bl	8008778 <free>
	free(encoded_D2);
 80020dc:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80020e0:	f006 fb4a 	bl	8008778 <free>
	free(encoded_D3);
 80020e4:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80020e8:	f006 fb46 	bl	8008778 <free>
	free(encoded_D4);
 80020ec:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 80020f0:	f006 fb42 	bl	8008778 <free>

}
 80020f4:	bf00      	nop
 80020f6:	f507 770d 	add.w	r7, r7, #564	; 0x234
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	0800d350 	.word	0x0800d350
 8002104:	0800d360 	.word	0x0800d360
 8002108:	0800d370 	.word	0x0800d370
 800210c:	0800d45c 	.word	0x0800d45c

08002110 <url_encode>:



char* url_encode(const char* str)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <url_encode+0xc8>)
 800211a:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe f881 	bl	8000224 <strlen>
 8002122:	4602      	mov	r2, r0
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	3301      	adds	r3, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f006 fb1b 	bl	8008768 <malloc>
 8002132:	4603      	mov	r3, r0
 8002134:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	617b      	str	r3, [r7, #20]

	while (*str) {
 800213a:	e040      	b.n	80021be <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a26      	ldr	r2, [pc, #152]	; (80021dc <url_encode+0xcc>)
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10f      	bne.n	8002170 <url_encode+0x60>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b2d      	cmp	r3, #45	; 0x2d
 8002156:	d00b      	beq.n	8002170 <url_encode+0x60>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b5f      	cmp	r3, #95	; 0x5f
 800215e:	d007      	beq.n	8002170 <url_encode+0x60>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b2e      	cmp	r3, #46	; 0x2e
 8002166:	d003      	beq.n	8002170 <url_encode+0x60>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b7e      	cmp	r3, #126	; 0x7e
 800216e:	d106      	bne.n	800217e <url_encode+0x6e>
			*ptr++ = *str;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	617a      	str	r2, [r7, #20]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e01c      	b.n	80021b8 <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	617a      	str	r2, [r7, #20]
 8002184:	2225      	movs	r2, #37	; 0x25
 8002186:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	441a      	add	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	6179      	str	r1, [r7, #20]
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	441a      	add	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	1c59      	adds	r1, r3, #1
 80021b2:	6179      	str	r1, [r7, #20]
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	701a      	strb	r2, [r3, #0]
		}
		str++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
	while (*str) {
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ba      	bne.n	800213c <url_encode+0x2c>
	}
	*ptr = '\0';
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
	return encoded;
 80021cc:	68fb      	ldr	r3, [r7, #12]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	0800d470 	.word	0x0800d470
 80021dc:	0800d49c 	.word	0x0800d49c

080021e0 <USER_I2C1_Init>:




void USER_I2C1_Init()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <USER_I2C1_Init+0x50>)
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <USER_I2C1_Init+0x54>)
 80021e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <USER_I2C1_Init+0x50>)
 80021ec:	4a12      	ldr	r2, [pc, #72]	; (8002238 <USER_I2C1_Init+0x58>)
 80021ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <USER_I2C1_Init+0x50>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <USER_I2C1_Init+0x50>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <USER_I2C1_Init+0x50>)
 80021fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002202:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <USER_I2C1_Init+0x50>)
 8002206:	2200      	movs	r2, #0
 8002208:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <USER_I2C1_Init+0x50>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <USER_I2C1_Init+0x50>)
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <USER_I2C1_Init+0x50>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <USER_I2C1_Init+0x50>)
 800221e:	f001 fe8b 	bl	8003f38 <HAL_I2C_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <USER_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002228:	f000 f9d3 	bl	80025d2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200004c8 	.word	0x200004c8
 8002234:	40005400 	.word	0x40005400
 8002238:	000186a0 	.word	0x000186a0

0800223c <SystemClock_Config>:
 extern UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t GPIO[4];

void SystemClock_Config(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b094      	sub	sp, #80	; 0x50
 8002240:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	2234      	movs	r2, #52	; 0x34
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f006 fa9c 	bl	8008788 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <SystemClock_Config+0xd4>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4a29      	ldr	r2, [pc, #164]	; (8002310 <SystemClock_Config+0xd4>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6413      	str	r3, [r2, #64]	; 0x40
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <SystemClock_Config+0xd4>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800227c:	2300      	movs	r3, #0
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <SystemClock_Config+0xd8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <SystemClock_Config+0xd8>)
 800228a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <SystemClock_Config+0xd8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800229c:	2302      	movs	r3, #2
 800229e:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a4:	2310      	movs	r3, #16
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a8:	2302      	movs	r3, #2
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 80022b0:	2310      	movs	r3, #16
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 80022b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022b8:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022ba:	2304      	movs	r3, #4
 80022bc:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022be:	2302      	movs	r3, #2
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 80022c2:	2302      	movs	r3, #2
 80022c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c6:	f107 031c 	add.w	r3, r7, #28
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 fe18 	bl	8006f00 <HAL_RCC_OscConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 80022d6:	f000 f97c 	bl	80025d2 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022da:	230f      	movs	r3, #15
 80022dc:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022de:	2302      	movs	r3, #2
 80022e0:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ea:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 fab8 	bl	800686c <HAL_RCC_ClockConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 8002302:	f000 f966 	bl	80025d2 <Error_Handler>
	  }
	}
 8002306:	bf00      	nop
 8002308:	3750      	adds	r7, #80	; 0x50
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000

08002318 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	   /* USER CODE END USART1_Init 0 */

	   /* USER CODE BEGIN USART1_Init 1 */

	   /* USER CODE END USART1_Init 1 */
	   huart1.Instance = USART1;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <user_USART1_UART_Init+0x4c>)
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <user_USART1_UART_Init+0x50>)
 8002320:	601a      	str	r2, [r3, #0]
	   huart1.Init.BaudRate = 115200;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <user_USART1_UART_Init+0x4c>)
 8002324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002328:	605a      	str	r2, [r3, #4]
	   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <user_USART1_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
	   huart1.Init.StopBits = UART_STOPBITS_1;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <user_USART1_UART_Init+0x4c>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
	   huart1.Init.Parity = UART_PARITY_NONE;
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <user_USART1_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
	   huart1.Init.Mode = UART_MODE_TX_RX;
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <user_USART1_UART_Init+0x4c>)
 800233e:	220c      	movs	r2, #12
 8002340:	615a      	str	r2, [r3, #20]
	   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <user_USART1_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
	   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <user_USART1_UART_Init+0x4c>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
	   if (HAL_UART_Init(&huart1) != HAL_OK)
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <user_USART1_UART_Init+0x4c>)
 8002350:	f005 f874 	bl	800743c <HAL_UART_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <user_USART1_UART_Init+0x46>
	   {
	     Error_Handler();
 800235a:	f000 f93a 	bl	80025d2 <Error_Handler>
	   }
	   /* USER CODE BEGIN USART1_Init 2 */

	   /* USER CODE END USART1_Init 2 */

	 }
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200002c4 	.word	0x200002c4
 8002368:	40011000 	.word	0x40011000

0800236c <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <user_GPIO_Init+0xb8>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a27      	ldr	r2, [pc, #156]	; (8002424 <user_GPIO_Init+0xb8>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <user_GPIO_Init+0xb8>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <user_GPIO_Init+0xb8>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	4a20      	ldr	r2, [pc, #128]	; (8002424 <user_GPIO_Init+0xb8>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6313      	str	r3, [r2, #48]	; 0x30
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <user_GPIO_Init+0xb8>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <user_GPIO_Init+0xb8>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <user_GPIO_Init+0xb8>)
 80023be:	f043 0302 	orr.w	r3, r3, #2
 80023c2:	6313      	str	r3, [r2, #48]	; 0x30
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <user_GPIO_Init+0xb8>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 80023d0:	787a      	ldrb	r2, [r7, #1]
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f001 fd94 	bl	8003f04 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <user_GPIO_Init+0x84>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 80023e2:	787a      	ldrb	r2, [r7, #1]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f81f 	bl	800242c <gpio_output>
 80023ee:	e008      	b.n	8002402 <user_GPIO_Init+0x96>
     }
     else if(PIN_mode == INPUT)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d105      	bne.n	8002402 <user_GPIO_Init+0x96>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 80023f6:	787a      	ldrb	r2, [r7, #1]
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f837 	bl	8002470 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <user_GPIO_Init+0xbc>)
 8002404:	2202      	movs	r2, #2
 8002406:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <user_GPIO_Init+0xbc>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <user_GPIO_Init+0xbc>)
 8002410:	2203      	movs	r2, #3
 8002412:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <user_GPIO_Init+0xbc>)
 8002416:	2207      	movs	r2, #7
 8002418:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	200004b4 	.word	0x200004b4

0800242c <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	2301      	movs	r3, #1
 8002452:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f001 fba2 	bl	8003bac <HAL_GPIO_Init>
 }
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f001 fb82 	bl	8003bac <HAL_GPIO_Init>
 }
 80024a8:	bf00      	nop
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <data_receive>:




void data_receive()
 {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 80024b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b8:	2214      	movs	r2, #20
 80024ba:	4905      	ldr	r1, [pc, #20]	; (80024d0 <data_receive+0x20>)
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <data_receive+0x24>)
 80024be:	f005 f89c 	bl	80075fa <HAL_UART_Receive>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <data_receive+0x1c>
	 {
			 Error_Handler();
 80024c8:	f000 f883 	bl	80025d2 <Error_Handler>
	 }
 }
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200002b4 	.word	0x200002b4
 80024d4:	200002c4 	.word	0x200002c4

080024d8 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	4619      	mov	r1, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 fcf3 	bl	8003ed4 <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0

 }
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8002508:	787a      	ldrb	r2, [r7, #1]
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f001 fcf8 	bl	8003f04 <HAL_GPIO_WritePin>
    return PinState;
 8002514:	787b      	ldrb	r3, [r7, #1]
 }
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <uart3_tx>:


extern UART_HandleTypeDef huart3;

void uart3_tx(uint8_t* buf)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fd fe7b 	bl	8000224 <strlen>
 800252e:	4603      	mov	r3, r0
 8002530:	b29a      	uxth	r2, r3
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <uart3_tx+0x2c>)
 800253a:	f004 ffcc 	bl	80074d6 <HAL_UART_Transmit>
	 HAL_Delay(100);
 800253e:	2064      	movs	r0, #100	; 0x64
 8002540:	f000 fc16 	bl	8002d70 <HAL_Delay>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000560 	.word	0x20000560

08002550 <USER_USART3_UART_Init>:


void USER_USART3_UART_Init()
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <USER_USART3_UART_Init+0x4c>)
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <USER_USART3_UART_Init+0x50>)
 8002558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <USER_USART3_UART_Init+0x4c>)
 800255c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <USER_USART3_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <USER_USART3_UART_Init+0x4c>)
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <USER_USART3_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <USER_USART3_UART_Init+0x4c>)
 8002576:	220c      	movs	r2, #12
 8002578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <USER_USART3_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <USER_USART3_UART_Init+0x4c>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <USER_USART3_UART_Init+0x4c>)
 8002588:	f004 ff58 	bl	800743c <HAL_UART_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <USER_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002592:	f000 f81e 	bl	80025d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000560 	.word	0x20000560
 80025a0:	40004800 	.word	0x40004800

080025a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a8:	f000 fb70 	bl	8002c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ac:	f7ff fe46 	bl	800223c <SystemClock_Config>
//  MX_UART4_Init();
//  MX_USART1_UART_Init();
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
//  MX_GPIO_Init();
    USER_GPIO_Init();
 80025b0:	f7ff fbac 	bl	8001d0c <USER_GPIO_Init>
    USER_I2C1_Init();
 80025b4:	f7ff fe14 	bl	80021e0 <USER_I2C1_Init>
    USER_USART3_UART_Init();
 80025b8:	f7ff ffca 	bl	8002550 <USER_USART3_UART_Init>
    user_USART1_UART_Init();
 80025bc:	f7ff feac 	bl	8002318 <user_USART1_UART_Init>
    UART4_Init();
 80025c0:	f7ff fc6e 	bl	8001ea0 <UART4_Init>
    USER_ADC1_Init();
 80025c4:	f7ff fb68 	bl	8001c98 <USER_ADC1_Init>

    Gsm_Init();
 80025c8:	f7ff fcb2 	bl	8001f30 <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  application();
 80025cc:	f7fe fd44 	bl	8001058 <application>
 80025d0:	e7fc      	b.n	80025cc <main+0x28>

080025d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d6:	b672      	cpsid	i
}
 80025d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025da:	e7fe      	b.n	80025da <Error_Handler+0x8>

080025dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_MspInit+0x4c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_MspInit+0x4c>)
 80025ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_MspInit+0x4c>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800261a:	2007      	movs	r0, #7
 800261c:	f001 f9e4 	bl	80039e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a35      	ldr	r2, [pc, #212]	; (8002720 <HAL_ADC_MspInit+0xf4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d163      	bne.n	8002716 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a33      	ldr	r2, [pc, #204]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b31      	ldr	r3, [pc, #196]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a2c      	ldr	r2, [pc, #176]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_ADC_MspInit+0xf8>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c2:	2303      	movs	r3, #3
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	4619      	mov	r1, r3
 80026d0:	4815      	ldr	r0, [pc, #84]	; (8002728 <HAL_ADC_MspInit+0xfc>)
 80026d2:	f001 fa6b 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026d6:	2360      	movs	r3, #96	; 0x60
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026da:	2303      	movs	r3, #3
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	4810      	ldr	r0, [pc, #64]	; (800272c <HAL_ADC_MspInit+0x100>)
 80026ea:	f001 fa5f 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f2:	2303      	movs	r3, #3
 80026f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	4619      	mov	r1, r3
 8002700:	480b      	ldr	r0, [pc, #44]	; (8002730 <HAL_ADC_MspInit+0x104>)
 8002702:	f001 fa53 	bl	8003bac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2012      	movs	r0, #18
 800270c:	f001 f977 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002710:	2012      	movs	r0, #18
 8002712:	f001 f990 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3730      	adds	r7, #48	; 0x30
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40012000 	.word	0x40012000
 8002724:	40023800 	.word	0x40023800
 8002728:	40020800 	.word	0x40020800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400

08002734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <HAL_I2C_MspInit+0xa4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d13c      	bne.n	80027d0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_I2C_MspInit+0xa8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <HAL_I2C_MspInit+0xa8>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_I2C_MspInit+0xa8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002778:	2312      	movs	r3, #18
 800277a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002784:	2304      	movs	r3, #4
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	4814      	ldr	r0, [pc, #80]	; (80027e0 <HAL_I2C_MspInit+0xac>)
 8002790:	f001 fa0c 	bl	8003bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_I2C_MspInit+0xa8>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_I2C_MspInit+0xa8>)
 800279e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a2:	6413      	str	r3, [r2, #64]	; 0x40
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_I2C_MspInit+0xa8>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	201f      	movs	r0, #31
 80027b6:	f001 f922 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027ba:	201f      	movs	r0, #31
 80027bc:	f001 f93b 	bl	8003a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	2020      	movs	r0, #32
 80027c6:	f001 f91a 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027ca:	2020      	movs	r0, #32
 80027cc:	f001 f933 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40005400 	.word	0x40005400
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020400 	.word	0x40020400

080027e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	; 0x38
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a67      	ldr	r2, [pc, #412]	; (80029a0 <HAL_UART_MspInit+0x1bc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d134      	bne.n	8002870 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a5e      	ldr	r2, [pc, #376]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800283e:	2303      	movs	r3, #3
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800284e:	2308      	movs	r3, #8
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002856:	4619      	mov	r1, r3
 8002858:	4853      	ldr	r0, [pc, #332]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 800285a:	f001 f9a7 	bl	8003bac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	2034      	movs	r0, #52	; 0x34
 8002864:	f001 f8cb 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002868:	2034      	movs	r0, #52	; 0x34
 800286a:	f001 f8e4 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800286e:	e092      	b.n	8002996 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a4d      	ldr	r2, [pc, #308]	; (80029ac <HAL_UART_MspInit+0x1c8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d135      	bne.n	80028e6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a48      	ldr	r2, [pc, #288]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002884:	f043 0310 	orr.w	r3, r3, #16
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c0:	2303      	movs	r3, #3
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028c4:	2307      	movs	r3, #7
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028cc:	4619      	mov	r1, r3
 80028ce:	4836      	ldr	r0, [pc, #216]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028d0:	f001 f96c 	bl	8003bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2025      	movs	r0, #37	; 0x25
 80028da:	f001 f890 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028de:	2025      	movs	r0, #37	; 0x25
 80028e0:	f001 f8a9 	bl	8003a36 <HAL_NVIC_EnableIRQ>
}
 80028e4:	e057      	b.n	8002996 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d152      	bne.n	8002996 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 80028fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6313      	str	r3, [r2, #48]	; 0x30
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002944:	2320      	movs	r3, #32
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002954:	2307      	movs	r3, #7
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	4815      	ldr	r0, [pc, #84]	; (80029b4 <HAL_UART_MspInit+0x1d0>)
 8002960:	f001 f924 	bl	8003bac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002976:	2307      	movs	r3, #7
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <HAL_UART_MspInit+0x1d4>)
 8002982:	f001 f913 	bl	8003bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2027      	movs	r0, #39	; 0x27
 800298c:	f001 f837 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002990:	2027      	movs	r0, #39	; 0x27
 8002992:	f001 f850 	bl	8003a36 <HAL_NVIC_EnableIRQ>
}
 8002996:	bf00      	nop
 8002998:	3738      	adds	r7, #56	; 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40004c00 	.word	0x40004c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40011000 	.word	0x40011000
 80029b0:	40004800 	.word	0x40004800
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020400 	.word	0x40020400

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <NMI_Handler+0x4>

080029c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <HardFault_Handler+0x4>

080029c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <MemManage_Handler+0x4>

080029ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <UsageFault_Handler+0x4>

080029da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 f992 	bl	8002d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <ADC_IRQHandler+0x10>)
 8002a16:	f000 fba3 	bl	8003160 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000408 	.word	0x20000408

08002a24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <I2C1_EV_IRQHandler+0x10>)
 8002a2a:	f001 fee9 	bl	8004800 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200004c8 	.word	0x200004c8

08002a38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <I2C1_ER_IRQHandler+0x10>)
 8002a3e:	f002 f850 	bl	8004ae2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200004c8 	.word	0x200004c8

08002a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <USART1_IRQHandler+0x10>)
 8002a52:	f004 fee9 	bl	8007828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200002c4 	.word	0x200002c4

08002a60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <USART3_IRQHandler+0x10>)
 8002a66:	f004 fedf 	bl	8007828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000560 	.word	0x20000560

08002a74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a78:	4802      	ldr	r0, [pc, #8]	; (8002a84 <UART4_IRQHandler+0x10>)
 8002a7a:	f004 fed5 	bl	8007828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000051c 	.word	0x2000051c

08002a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return 1;
 8002a8c:	2301      	movs	r3, #1
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <_kill>:

int _kill(int pid, int sig)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa2:	f005 fe37 	bl	8008714 <__errno>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2216      	movs	r2, #22
 8002aaa:	601a      	str	r2, [r3, #0]
  return -1;
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_exit>:

void _exit (int status)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ffe7 	bl	8002a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aca:	e7fe      	b.n	8002aca <_exit+0x12>

08002acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e00a      	b.n	8002af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ade:	f3af 8000 	nop.w
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	60ba      	str	r2, [r7, #8]
 8002aea:	b2ca      	uxtb	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dbf0      	blt.n	8002ade <_read+0x12>
  }

  return len;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e009      	b.n	8002b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	60ba      	str	r2, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dbf1      	blt.n	8002b18 <_write+0x12>
  }
  return len;
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_close>:

int _close(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b66:	605a      	str	r2, [r3, #4]
  return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_isatty>:

int _isatty(int file)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <_sbrk+0x5c>)
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <_sbrk+0x60>)
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <_sbrk+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <_sbrk+0x64>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <_sbrk+0x68>)
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bca:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d207      	bcs.n	8002be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd8:	f005 fd9c 	bl	8008714 <__errno>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	220c      	movs	r2, #12
 8002be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	e009      	b.n	8002bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <_sbrk+0x64>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <_sbrk+0x64>)
 8002bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20020000 	.word	0x20020000
 8002c08:	00000400 	.word	0x00000400
 8002c0c:	200005a4 	.word	0x200005a4
 8002c10:	200005c0 	.word	0x200005c0

08002c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <SystemInit+0x20>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <SystemInit+0x20>)
 8002c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c3c:	480d      	ldr	r0, [pc, #52]	; (8002c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c3e:	490e      	ldr	r1, [pc, #56]	; (8002c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c40:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c44:	e002      	b.n	8002c4c <LoopCopyDataInit>

08002c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4a:	3304      	adds	r3, #4

08002c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c50:	d3f9      	bcc.n	8002c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c52:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c54:	4c0b      	ldr	r4, [pc, #44]	; (8002c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c58:	e001      	b.n	8002c5e <LoopFillZerobss>

08002c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c5c:	3204      	adds	r2, #4

08002c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c60:	d3fb      	bcc.n	8002c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c62:	f7ff ffd7 	bl	8002c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c66:	f005 fd5b 	bl	8008720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6a:	f7ff fc9b 	bl	80025a4 <main>
  bx  lr    
 8002c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c78:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c7c:	0800d9b0 	.word	0x0800d9b0
  ldr r2, =_sbss
 8002c80:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c84:	200005bc 	.word	0x200005bc

08002c88 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c88:	e7fe      	b.n	8002c88 <CAN1_RX0_IRQHandler>
	...

08002c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_Init+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_Init+0x40>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_Init+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <HAL_Init+0x40>)
 8002ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_Init+0x40>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <HAL_Init+0x40>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f000 fe97 	bl	80039e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f000 f808 	bl	8002cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc0:	f7ff fc8c 	bl	80025dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023c00 	.word	0x40023c00

08002cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_InitTick+0x54>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_InitTick+0x58>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 feaf 	bl	8003a52 <HAL_SYSTICK_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00e      	b.n	8002d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d80a      	bhi.n	8002d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d04:	2200      	movs	r2, #0
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f000 fe77 	bl	80039fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <HAL_InitTick+0x5c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000008 	.word	0x20000008
 8002d54:	200005a8 	.word	0x200005a8

08002d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200005a8 	.word	0x200005a8

08002d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff ffee 	bl	8002d58 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d005      	beq.n	8002d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_Delay+0x44>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d96:	bf00      	nop
 8002d98:	f7ff ffde 	bl	8002d58 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d8f7      	bhi.n	8002d98 <HAL_Delay+0x28>
  {
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000008 	.word	0x20000008

08002db8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e033      	b.n	8002e36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fc28 	bl	800262c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d118      	bne.n	8002e28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dfe:	f023 0302 	bic.w	r3, r3, #2
 8002e02:	f043 0202 	orr.w	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fc16 	bl	800363c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
 8002e26:	e001      	b.n	8002e2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_Start+0x1a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e0b2      	b.n	8002fc0 <HAL_ADC_Start+0x180>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d018      	beq.n	8002ea2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e80:	4b52      	ldr	r3, [pc, #328]	; (8002fcc <HAL_ADC_Start+0x18c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_ADC_Start+0x190>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	0c9a      	lsrs	r2, r3, #18
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f9      	bne.n	8002e96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d17a      	bne.n	8002fa6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	d106      	bne.n	8002efe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f023 0206 	bic.w	r2, r3, #6
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
 8002efc:	e002      	b.n	8002f04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_ADC_Start+0x194>)
 8002f0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f18:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d12a      	bne.n	8002f7c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <HAL_ADC_Start+0x198>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d015      	beq.n	8002f5c <HAL_ADC_Start+0x11c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <HAL_ADC_Start+0x19c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d105      	bne.n	8002f46 <HAL_ADC_Start+0x106>
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <HAL_ADC_Start+0x194>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_ADC_Start+0x1a0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d136      	bne.n	8002fbe <HAL_ADC_Start+0x17e>
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_ADC_Start+0x194>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d130      	bne.n	8002fbe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d129      	bne.n	8002fbe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	e020      	b.n	8002fbe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <HAL_ADC_Start+0x198>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d11b      	bne.n	8002fbe <HAL_ADC_Start+0x17e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d114      	bne.n	8002fbe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	e00b      	b.n	8002fbe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0210 	orr.w	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	40012300 	.word	0x40012300
 8002fd8:	40012000 	.word	0x40012000
 8002fdc:	40012100 	.word	0x40012100
 8002fe0:	40012200 	.word	0x40012200

08002fe4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_Stop+0x16>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e021      	b.n	800303e <HAL_ADC_Stop+0x5a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d113      	bne.n	8003090 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003076:	d10b      	bne.n	8003090 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e063      	b.n	8003158 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003090:	f7ff fe62 	bl	8002d58 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003096:	e021      	b.n	80030dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d01d      	beq.n	80030dc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_ADC_PollForConversion+0x6c>
 80030a6:	f7ff fe57 	bl	8002d58 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d212      	bcs.n	80030dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d00b      	beq.n	80030dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	f043 0204 	orr.w	r2, r3, #4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e03d      	b.n	8003158 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d1d6      	bne.n	8003098 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0212 	mvn.w	r2, #18
 80030f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d123      	bne.n	8003156 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11f      	bne.n	8003156 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800312e:	2b00      	cmp	r3, #0
 8003130:	d111      	bne.n	8003156 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d049      	beq.n	800322a <HAL_ADC_IRQHandler+0xca>
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d046      	beq.n	800322a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12b      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d127      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d119      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0220 	bic.w	r2, r2, #32
 80031f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8bd 	bl	800339a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0212 	mvn.w	r2, #18
 8003228:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d057      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x190>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d054      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d139      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12b      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003292:	2b00      	cmp	r3, #0
 8003294:	d124      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11d      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d119      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 faa7 	bl	8003834 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 020c 	mvn.w	r2, #12
 80032ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_ADC_IRQHandler+0x1d6>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d014      	beq.n	8003336 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d10d      	bne.n	8003336 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f841 	bl	80033ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0201 	mvn.w	r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003344:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_ADC_IRQHandler+0x218>
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f06f 0220 	mvn.w	r2, #32
 8003366:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f82a 	bl	80033c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0220 	mvn.w	r2, #32
 8003376:	601a      	str	r2, [r3, #0]
  }
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e113      	b.n	800361c <HAL_ADC_ConfigChannel+0x244>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d925      	bls.n	8003450 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	3b1e      	subs	r3, #30
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43da      	mvns	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	400a      	ands	r2, r1
 8003428:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68d9      	ldr	r1, [r3, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	4618      	mov	r0, r3
 800343c:	4603      	mov	r3, r0
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4403      	add	r3, r0
 8003442:	3b1e      	subs	r3, #30
 8003444:	409a      	lsls	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e022      	b.n	8003496 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6919      	ldr	r1, [r3, #16]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	4613      	mov	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	2207      	movs	r2, #7
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	400a      	ands	r2, r1
 8003472:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	4603      	mov	r3, r0
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4403      	add	r3, r0
 800348c:	409a      	lsls	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b06      	cmp	r3, #6
 800349c:	d824      	bhi.n	80034e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	3b05      	subs	r3, #5
 80034b0:	221f      	movs	r2, #31
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	400a      	ands	r2, r1
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4618      	mov	r0, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b05      	subs	r3, #5
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34
 80034e6:	e04c      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	d824      	bhi.n	800353a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b23      	subs	r3, #35	; 0x23
 8003502:	221f      	movs	r2, #31
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43da      	mvns	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	400a      	ands	r2, r1
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b23      	subs	r3, #35	; 0x23
 800352c:	fa00 f203 	lsl.w	r2, r0, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
 8003538:	e023      	b.n	8003582 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	3b41      	subs	r3, #65	; 0x41
 800354c:	221f      	movs	r2, #31
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	400a      	ands	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b41      	subs	r3, #65	; 0x41
 8003576:	fa00 f203 	lsl.w	r2, r0, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_ADC_ConfigChannel+0x250>)
 8003584:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a28      	ldr	r2, [pc, #160]	; (800362c <HAL_ADC_ConfigChannel+0x254>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10f      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b12      	cmp	r3, #18
 8003596:	d10b      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_ADC_ConfigChannel+0x254>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d12b      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x23a>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x1f4>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b11      	cmp	r3, #17
 80035ca:	d122      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_ADC_ConfigChannel+0x25c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a11      	ldr	r2, [pc, #68]	; (8003638 <HAL_ADC_ConfigChannel+0x260>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	0c9a      	lsrs	r2, r3, #18
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003604:	e002      	b.n	800360c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3b01      	subs	r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f9      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40012300 	.word	0x40012300
 800362c:	40012000 	.word	0x40012000
 8003630:	10000012 	.word	0x10000012
 8003634:	20000000 	.word	0x20000000
 8003638:	431bde83 	.word	0x431bde83

0800363c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003644:	4b79      	ldr	r3, [pc, #484]	; (800382c <ADC_Init+0x1f0>)
 8003646:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	431a      	orrs	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6899      	ldr	r1, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	4a58      	ldr	r2, [pc, #352]	; (8003830 <ADC_Init+0x1f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6899      	ldr	r1, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e00f      	b.n	800373a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003738:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0202 	bic.w	r2, r2, #2
 8003748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7e1b      	ldrb	r3, [r3, #24]
 8003754:	005a      	lsls	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01b      	beq.n	80037a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003776:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003786:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	3b01      	subs	r3, #1
 8003794:	035a      	lsls	r2, r3, #13
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e007      	b.n	80037b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	051a      	lsls	r2, r3, #20
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6899      	ldr	r1, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037f2:	025a      	lsls	r2, r3, #9
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	029a      	lsls	r2, r3, #10
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40012300 	.word	0x40012300
 8003830:	0f000001 	.word	0x0f000001

08003834 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	60d3      	str	r3, [r2, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0307 	and.w	r3, r3, #7
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db0b      	blt.n	80038d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4907      	ldr	r1, [pc, #28]	; (80038e4 <__NVIC_EnableIRQ+0x38>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2001      	movs	r0, #1
 80038ce:	fa00 f202 	lsl.w	r2, r0, r2
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	; (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	; (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1c3 0307 	rsb	r3, r3, #7
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf28      	it	cs
 800395a:	2304      	movcs	r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3304      	adds	r3, #4
 8003962:	2b06      	cmp	r3, #6
 8003964:	d902      	bls.n	800396c <NVIC_EncodePriority+0x30>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b03      	subs	r3, #3
 800396a:	e000      	b.n	800396e <NVIC_EncodePriority+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003984:	f04f 31ff 	mov.w	r1, #4294967295
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43d9      	mvns	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	4313      	orrs	r3, r2
         );
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b4:	d301      	bcc.n	80039ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00f      	b.n	80039da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ba:	4a0a      	ldr	r2, [pc, #40]	; (80039e4 <SysTick_Config+0x40>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c2:	210f      	movs	r1, #15
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	f7ff ff8e 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <SysTick_Config+0x40>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <SysTick_Config+0x40>)
 80039d4:	2207      	movs	r2, #7
 80039d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	e000e010 	.word	0xe000e010

080039e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff29 	bl	8003848 <__NVIC_SetPriorityGrouping>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a10:	f7ff ff3e 	bl	8003890 <__NVIC_GetPriorityGrouping>
 8003a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7ff ff8e 	bl	800393c <NVIC_EncodePriority>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff5d 	bl	80038e8 <__NVIC_SetPriority>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff31 	bl	80038ac <__NVIC_EnableIRQ>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffa2 	bl	80039a4 <SysTick_Config>
 8003a60:	4603      	mov	r3, r0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff f96e 	bl	8002d58 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2280      	movs	r2, #128	; 0x80
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e052      	b.n	8003b42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0216 	bic.w	r2, r2, #22
 8003aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <HAL_DMA_Abort+0x62>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0208 	bic.w	r2, r2, #8
 8003ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aec:	e013      	b.n	8003b16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aee:	f7ff f933 	bl	8002d58 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d90c      	bls.n	8003b16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e015      	b.n	8003b42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e4      	bne.n	8003aee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b28:	223f      	movs	r2, #63	; 0x3f
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d004      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e00c      	b.n	8003b82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9c:	b2db      	uxtb	r3, r3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e165      	b.n	8003e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc8:	2201      	movs	r2, #1
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	f040 8154 	bne.w	8003e8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d005      	beq.n	8003bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d130      	bne.n	8003c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c34:	2201      	movs	r2, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 0201 	and.w	r2, r3, #1
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d017      	beq.n	8003c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d123      	bne.n	8003cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	08da      	lsrs	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3208      	adds	r2, #8
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0203 	and.w	r2, r3, #3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80ae 	beq.w	8003e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_GPIO_Init+0x300>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	4a5c      	ldr	r2, [pc, #368]	; (8003eac <HAL_GPIO_Init+0x300>)
 8003d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d40:	6453      	str	r3, [r2, #68]	; 0x44
 8003d42:	4b5a      	ldr	r3, [pc, #360]	; (8003eac <HAL_GPIO_Init+0x300>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d4e:	4a58      	ldr	r2, [pc, #352]	; (8003eb0 <HAL_GPIO_Init+0x304>)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	3302      	adds	r3, #2
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	220f      	movs	r2, #15
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	; (8003eb4 <HAL_GPIO_Init+0x308>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d025      	beq.n	8003dc6 <HAL_GPIO_Init+0x21a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <HAL_GPIO_Init+0x30c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01f      	beq.n	8003dc2 <HAL_GPIO_Init+0x216>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4d      	ldr	r2, [pc, #308]	; (8003ebc <HAL_GPIO_Init+0x310>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d019      	beq.n	8003dbe <HAL_GPIO_Init+0x212>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4c      	ldr	r2, [pc, #304]	; (8003ec0 <HAL_GPIO_Init+0x314>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_GPIO_Init+0x20e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4b      	ldr	r2, [pc, #300]	; (8003ec4 <HAL_GPIO_Init+0x318>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00d      	beq.n	8003db6 <HAL_GPIO_Init+0x20a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <HAL_GPIO_Init+0x31c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <HAL_GPIO_Init+0x206>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a49      	ldr	r2, [pc, #292]	; (8003ecc <HAL_GPIO_Init+0x320>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_GPIO_Init+0x202>
 8003daa:	2306      	movs	r3, #6
 8003dac:	e00c      	b.n	8003dc8 <HAL_GPIO_Init+0x21c>
 8003dae:	2307      	movs	r3, #7
 8003db0:	e00a      	b.n	8003dc8 <HAL_GPIO_Init+0x21c>
 8003db2:	2305      	movs	r3, #5
 8003db4:	e008      	b.n	8003dc8 <HAL_GPIO_Init+0x21c>
 8003db6:	2304      	movs	r3, #4
 8003db8:	e006      	b.n	8003dc8 <HAL_GPIO_Init+0x21c>
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e004      	b.n	8003dc8 <HAL_GPIO_Init+0x21c>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e002      	b.n	8003dc8 <HAL_GPIO_Init+0x21c>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_GPIO_Init+0x21c>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	69fa      	ldr	r2, [r7, #28]
 8003dca:	f002 0203 	and.w	r2, r2, #3
 8003dce:	0092      	lsls	r2, r2, #2
 8003dd0:	4093      	lsls	r3, r2
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd8:	4935      	ldr	r1, [pc, #212]	; (8003eb0 <HAL_GPIO_Init+0x304>)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de6:	4b3a      	ldr	r3, [pc, #232]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e0a:	4a31      	ldr	r2, [pc, #196]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e10:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e3a:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b0f      	cmp	r3, #15
 8003e98:	f67f ae96 	bls.w	8003bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40020800 	.word	0x40020800
 8003ec0:	40020c00 	.word	0x40020c00
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40021400 	.word	0x40021400
 8003ecc:	40021800 	.word	0x40021800
 8003ed0:	40013c00 	.word	0x40013c00

08003ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	887b      	ldrh	r3, [r7, #2]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
 8003ef0:	e001      	b.n	8003ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
 8003f10:	4613      	mov	r3, r2
 8003f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f14:	787b      	ldrb	r3, [r7, #1]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f1a:	887a      	ldrh	r2, [r7, #2]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f20:	e003      	b.n	8003f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f22:	887b      	ldrh	r3, [r7, #2]
 8003f24:	041a      	lsls	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	619a      	str	r2, [r3, #24]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e12b      	b.n	80041a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fe fbe8 	bl	8002734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2224      	movs	r2, #36	; 0x24
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f002 fd58 	bl	8006a50 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a81      	ldr	r2, [pc, #516]	; (80041ac <HAL_I2C_Init+0x274>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d807      	bhi.n	8003fbc <HAL_I2C_Init+0x84>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a80      	ldr	r2, [pc, #512]	; (80041b0 <HAL_I2C_Init+0x278>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	bf94      	ite	ls
 8003fb4:	2301      	movls	r3, #1
 8003fb6:	2300      	movhi	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e006      	b.n	8003fca <HAL_I2C_Init+0x92>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a7d      	ldr	r2, [pc, #500]	; (80041b4 <HAL_I2C_Init+0x27c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	bf94      	ite	ls
 8003fc4:	2301      	movls	r3, #1
 8003fc6:	2300      	movhi	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0e7      	b.n	80041a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a78      	ldr	r2, [pc, #480]	; (80041b8 <HAL_I2C_Init+0x280>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0c9b      	lsrs	r3, r3, #18
 8003fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a6a      	ldr	r2, [pc, #424]	; (80041ac <HAL_I2C_Init+0x274>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d802      	bhi.n	800400c <HAL_I2C_Init+0xd4>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3301      	adds	r3, #1
 800400a:	e009      	b.n	8004020 <HAL_I2C_Init+0xe8>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	4a69      	ldr	r2, [pc, #420]	; (80041bc <HAL_I2C_Init+0x284>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	3301      	adds	r3, #1
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	430b      	orrs	r3, r1
 8004026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	495c      	ldr	r1, [pc, #368]	; (80041ac <HAL_I2C_Init+0x274>)
 800403c:	428b      	cmp	r3, r1
 800403e:	d819      	bhi.n	8004074 <HAL_I2C_Init+0x13c>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e59      	subs	r1, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fbb1 f3f3 	udiv	r3, r1, r3
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004054:	400b      	ands	r3, r1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_I2C_Init+0x138>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1e59      	subs	r1, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fbb1 f3f3 	udiv	r3, r1, r3
 8004068:	3301      	adds	r3, #1
 800406a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406e:	e051      	b.n	8004114 <HAL_I2C_Init+0x1dc>
 8004070:	2304      	movs	r3, #4
 8004072:	e04f      	b.n	8004114 <HAL_I2C_Init+0x1dc>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d111      	bne.n	80040a0 <HAL_I2C_Init+0x168>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e58      	subs	r0, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	440b      	add	r3, r1
 800408a:	fbb0 f3f3 	udiv	r3, r0, r3
 800408e:	3301      	adds	r3, #1
 8004090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e012      	b.n	80040c6 <HAL_I2C_Init+0x18e>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1e58      	subs	r0, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	0099      	lsls	r1, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b6:	3301      	adds	r3, #1
 80040b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_I2C_Init+0x196>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e022      	b.n	8004114 <HAL_I2C_Init+0x1dc>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10e      	bne.n	80040f4 <HAL_I2C_Init+0x1bc>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1e58      	subs	r0, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	440b      	add	r3, r1
 80040e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f2:	e00f      	b.n	8004114 <HAL_I2C_Init+0x1dc>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1e58      	subs	r0, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	0099      	lsls	r1, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	6809      	ldr	r1, [r1, #0]
 8004118:	4313      	orrs	r3, r2
 800411a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6911      	ldr	r1, [r2, #16]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	4311      	orrs	r1, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	430b      	orrs	r3, r1
 8004156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	000186a0 	.word	0x000186a0
 80041b0:	001e847f 	.word	0x001e847f
 80041b4:	003d08ff 	.word	0x003d08ff
 80041b8:	431bde83 	.word	0x431bde83
 80041bc:	10624dd3 	.word	0x10624dd3

080041c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	4608      	mov	r0, r1
 80041ca:	4611      	mov	r1, r2
 80041cc:	461a      	mov	r2, r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	817b      	strh	r3, [r7, #10]
 80041d2:	460b      	mov	r3, r1
 80041d4:	813b      	strh	r3, [r7, #8]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041da:	f7fe fdbd 	bl	8002d58 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	f040 80d9 	bne.w	80043a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2319      	movs	r3, #25
 80041f4:	2201      	movs	r2, #1
 80041f6:	496d      	ldr	r1, [pc, #436]	; (80043ac <HAL_I2C_Mem_Write+0x1ec>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f002 f90d 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
 8004206:	e0cc      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_I2C_Mem_Write+0x56>
 8004212:	2302      	movs	r3, #2
 8004214:	e0c5      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d007      	beq.n	800423c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2221      	movs	r2, #33	; 0x21
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a4d      	ldr	r2, [pc, #308]	; (80043b0 <HAL_I2C_Mem_Write+0x1f0>)
 800427c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800427e:	88f8      	ldrh	r0, [r7, #6]
 8004280:	893a      	ldrh	r2, [r7, #8]
 8004282:	8979      	ldrh	r1, [r7, #10]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4603      	mov	r3, r0
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f001 fe9c 	bl	8005fcc <I2C_RequestMemoryWrite>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d052      	beq.n	8004340 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e081      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f002 f98e 	bl	80065c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d107      	bne.n	80042c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d11b      	bne.n	8004340 <HAL_I2C_Mem_Write+0x180>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d017      	beq.n	8004340 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1aa      	bne.n	800429e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f002 f97a 	bl	8006646 <I2C_WaitOnBTFFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b04      	cmp	r3, #4
 800435e:	d107      	bne.n	8004370 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e016      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	00100002 	.word	0x00100002
 80043b0:	ffff0000 	.word	0xffff0000

080043b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	4608      	mov	r0, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	461a      	mov	r2, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	817b      	strh	r3, [r7, #10]
 80043c6:	460b      	mov	r3, r1
 80043c8:	813b      	strh	r3, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ce:	f7fe fcc3 	bl	8002d58 <HAL_GetTick>
 80043d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b20      	cmp	r3, #32
 80043de:	f040 8208 	bne.w	80047f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	2319      	movs	r3, #25
 80043e8:	2201      	movs	r2, #1
 80043ea:	497b      	ldr	r1, [pc, #492]	; (80045d8 <HAL_I2C_Mem_Read+0x224>)
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f002 f813 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
 80043fa:	e1fb      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_I2C_Mem_Read+0x56>
 8004406:	2302      	movs	r3, #2
 8004408:	e1f4      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d007      	beq.n	8004430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2222      	movs	r2, #34	; 0x22
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2240      	movs	r2, #64	; 0x40
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a5b      	ldr	r2, [pc, #364]	; (80045dc <HAL_I2C_Mem_Read+0x228>)
 8004470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004472:	88f8      	ldrh	r0, [r7, #6]
 8004474:	893a      	ldrh	r2, [r7, #8]
 8004476:	8979      	ldrh	r1, [r7, #10]
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	4603      	mov	r3, r0
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f001 fe38 	bl	80060f8 <I2C_RequestMemoryRead>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1b0      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e184      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d11b      	bne.n	8004502 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e164      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b02      	cmp	r3, #2
 8004508:	d11b      	bne.n	8004542 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004518:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	e144      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004558:	e138      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b03      	cmp	r3, #3
 8004560:	f200 80f1 	bhi.w	8004746 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	2b01      	cmp	r3, #1
 800456a:	d123      	bne.n	80045b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f002 f8db 	bl	800672c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e139      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b2:	e10b      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d14e      	bne.n	800465a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	2200      	movs	r2, #0
 80045c4:	4906      	ldr	r1, [pc, #24]	; (80045e0 <HAL_I2C_Mem_Read+0x22c>)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f001 ff26 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e10e      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
 80045d6:	bf00      	nop
 80045d8:	00100002 	.word	0x00100002
 80045dc:	ffff0000 	.word	0xffff0000
 80045e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004658:	e0b8      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004660:	2200      	movs	r2, #0
 8004662:	4966      	ldr	r1, [pc, #408]	; (80047fc <HAL_I2C_Mem_Read+0x448>)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f001 fed7 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0bf      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2200      	movs	r2, #0
 80046be:	494f      	ldr	r1, [pc, #316]	; (80047fc <HAL_I2C_Mem_Read+0x448>)
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f001 fea9 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e091      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004744:	e042      	b.n	80047cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f001 ffee 	bl	800672c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e04c      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d118      	bne.n	80047cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f47f aec2 	bne.w	800455a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3728      	adds	r7, #40	; 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010004 	.word	0x00010004

08004800 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004820:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b10      	cmp	r3, #16
 800482e:	d003      	beq.n	8004838 <HAL_I2C_EV_IRQHandler+0x38>
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	f040 80c1 	bne.w	80049ba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10d      	bne.n	800486e <HAL_I2C_EV_IRQHandler+0x6e>
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004858:	d003      	beq.n	8004862 <HAL_I2C_EV_IRQHandler+0x62>
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004860:	d101      	bne.n	8004866 <HAL_I2C_EV_IRQHandler+0x66>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_I2C_EV_IRQHandler+0x68>
 8004866:	2300      	movs	r3, #0
 8004868:	2b01      	cmp	r3, #1
 800486a:	f000 8132 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00c      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x92>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	0a5b      	lsrs	r3, r3, #9
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f001 ffd6 	bl	8006836 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fd83 	bl	8005396 <I2C_Master_SB>
 8004890:	e092      	b.n	80049b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	08db      	lsrs	r3, r3, #3
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	0a5b      	lsrs	r3, r3, #9
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fdf9 	bl	80054a2 <I2C_Master_ADD10>
 80048b0:	e082      	b.n	80049b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fe13 	bl	80054f6 <I2C_Master_ADDR>
 80048d0:	e072      	b.n	80049b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03b      	beq.n	8004956 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ec:	f000 80f3 	beq.w	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	09db      	lsrs	r3, r3, #7
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00f      	beq.n	800491c <HAL_I2C_EV_IRQHandler+0x11c>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	0a9b      	lsrs	r3, r3, #10
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d009      	beq.n	800491c <HAL_I2C_EV_IRQHandler+0x11c>
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d103      	bne.n	800491c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f9f3 	bl	8004d00 <I2C_MasterTransmit_TXE>
 800491a:	e04d      	b.n	80049b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80d6 	beq.w	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80cf 	beq.w	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004938:	7bbb      	ldrb	r3, [r7, #14]
 800493a:	2b21      	cmp	r3, #33	; 0x21
 800493c:	d103      	bne.n	8004946 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa7a 	bl	8004e38 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004944:	e0c7      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	f040 80c4 	bne.w	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fae8 	bl	8004f24 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004954:	e0bf      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004964:	f000 80b7 	beq.w	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00f      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0x194>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	0a9b      	lsrs	r3, r3, #10
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0x194>
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	089b      	lsrs	r3, r3, #2
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fb5d 	bl	800504c <I2C_MasterReceive_RXNE>
 8004992:	e011      	b.n	80049b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 809a 	beq.w	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	0a5b      	lsrs	r3, r3, #9
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8093 	beq.w	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fc06 	bl	80051c2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b6:	e08e      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049b8:	e08d      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	e007      	b.n	80049dc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_I2C_EV_IRQHandler+0x20e>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	0a5b      	lsrs	r3, r3, #9
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a04:	69b9      	ldr	r1, [r7, #24]
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 ffc4 	bl	8005994 <I2C_Slave_ADDR>
 8004a0c:	e066      	b.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <HAL_I2C_EV_IRQHandler+0x22e>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	0a5b      	lsrs	r3, r3, #9
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fffe 	bl	8005a28 <I2C_Slave_STOPF>
 8004a2c:	e056      	b.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	2b21      	cmp	r3, #33	; 0x21
 8004a32:	d002      	beq.n	8004a3a <HAL_I2C_EV_IRQHandler+0x23a>
 8004a34:	7bbb      	ldrb	r3, [r7, #14]
 8004a36:	2b29      	cmp	r3, #41	; 0x29
 8004a38:	d125      	bne.n	8004a86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	09db      	lsrs	r3, r3, #7
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00f      	beq.n	8004a66 <HAL_I2C_EV_IRQHandler+0x266>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	0a9b      	lsrs	r3, r3, #10
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_I2C_EV_IRQHandler+0x266>
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	089b      	lsrs	r3, r3, #2
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 feda 	bl	8005818 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a64:	e039      	b.n	8004ada <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	089b      	lsrs	r3, r3, #2
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d033      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x2da>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	0a5b      	lsrs	r3, r3, #9
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d02d      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 ff07 	bl	8005892 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a84:	e029      	b.n	8004ada <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	099b      	lsrs	r3, r3, #6
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00f      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	0a9b      	lsrs	r3, r3, #10
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 ff12 	bl	80058d4 <I2C_SlaveReceive_RXNE>
 8004ab0:	e014      	b.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00e      	beq.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 ff40 	bl	8005950 <I2C_SlaveReceive_BTF>
 8004ad0:	e004      	b.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004ad2:	bf00      	nop
 8004ad4:	e002      	b.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ada:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b08a      	sub	sp, #40	; 0x28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b04:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00e      	beq.n	8004b30 <HAL_I2C_ER_IRQHandler+0x4e>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b2e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	0a5b      	lsrs	r3, r3, #9
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <HAL_I2C_ER_IRQHandler+0x78>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004b58:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	0a9b      	lsrs	r3, r3, #10
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d03f      	beq.n	8004be6 <HAL_I2C_ER_IRQHandler+0x104>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d039      	beq.n	8004be6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004b72:	7efb      	ldrb	r3, [r7, #27]
 8004b74:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b8c:	7ebb      	ldrb	r3, [r7, #26]
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d112      	bne.n	8004bb8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	2b21      	cmp	r3, #33	; 0x21
 8004b9c:	d008      	beq.n	8004bb0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b29      	cmp	r3, #41	; 0x29
 8004ba2:	d005      	beq.n	8004bb0 <HAL_I2C_ER_IRQHandler+0xce>
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	2b28      	cmp	r3, #40	; 0x28
 8004ba8:	d106      	bne.n	8004bb8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b21      	cmp	r3, #33	; 0x21
 8004bae:	d103      	bne.n	8004bb8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f001 f869 	bl	8005c88 <I2C_Slave_AF>
 8004bb6:	e016      	b.n	8004be6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004bca:	7efb      	ldrb	r3, [r7, #27]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d002      	beq.n	8004bd6 <HAL_I2C_ER_IRQHandler+0xf4>
 8004bd0:	7efb      	ldrb	r3, [r7, #27]
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d107      	bne.n	8004be6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	0adb      	lsrs	r3, r3, #11
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00e      	beq.n	8004c10 <HAL_I2C_ER_IRQHandler+0x12e>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f043 0308 	orr.w	r3, r3, #8
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004c0e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f001 f8a0 	bl	8005d68 <I2C_ITError>
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d150      	bne.n	8004dc8 <I2C_MasterTransmit_TXE+0xc8>
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b21      	cmp	r3, #33	; 0x21
 8004d2a:	d14d      	bne.n	8004dc8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d01d      	beq.n	8004d6e <I2C_MasterTransmit_TXE+0x6e>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d01a      	beq.n	8004d6e <I2C_MasterTransmit_TXE+0x6e>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3e:	d016      	beq.n	8004d6e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2211      	movs	r2, #17
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ff62 	bl	8004c30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d6c:	e060      	b.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d7c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d107      	bne.n	8004db8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff7d 	bl	8004cb0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004db6:	e03b      	b.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ff35 	bl	8004c30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dc6:	e033      	b.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b21      	cmp	r3, #33	; 0x21
 8004dcc:	d005      	beq.n	8004dda <I2C_MasterTransmit_TXE+0xda>
 8004dce:	7bbb      	ldrb	r3, [r7, #14]
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	d12d      	bne.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	2b22      	cmp	r3, #34	; 0x22
 8004dd8:	d12a      	bne.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d108      	bne.n	8004df6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004df4:	e01c      	b.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d103      	bne.n	8004e0a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f88e 	bl	8004f24 <I2C_MemoryTransmit_TXE_BTF>
}
 8004e08:	e012      	b.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e2e:	e7ff      	b.n	8004e30 <I2C_MasterTransmit_TXE+0x130>
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b21      	cmp	r3, #33	; 0x21
 8004e50:	d164      	bne.n	8004f1c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d012      	beq.n	8004e82 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e80:	e04c      	b.n	8004f1c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d01d      	beq.n	8004ec4 <I2C_MasterTransmit_BTF+0x8c>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d01a      	beq.n	8004ec4 <I2C_MasterTransmit_BTF+0x8c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e94:	d016      	beq.n	8004ec4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ea4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2211      	movs	r2, #17
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7ff feb7 	bl	8004c30 <HAL_I2C_MasterTxCpltCallback>
}
 8004ec2:	e02b      	b.n	8004f1c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ed2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d107      	bne.n	8004f0e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fed2 	bl	8004cb0 <HAL_I2C_MemTxCpltCallback>
}
 8004f0c:	e006      	b.n	8004f1c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fe8a 	bl	8004c30 <HAL_I2C_MasterTxCpltCallback>
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d11d      	bne.n	8004f78 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d10b      	bne.n	8004f5c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004f5a:	e073      	b.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	121b      	asrs	r3, r3, #8
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f76:	e065      	b.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10b      	bne.n	8004f98 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f96:	e055      	b.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d151      	bne.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b22      	cmp	r3, #34	; 0x22
 8004fa4:	d10d      	bne.n	8004fc2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004fc0:	e040      	b.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	2b21      	cmp	r3, #33	; 0x21
 8004fd0:	d112      	bne.n	8004ff8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	781a      	ldrb	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ff6:	e025      	b.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d120      	bne.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b21      	cmp	r3, #33	; 0x21
 8005006:	d11d      	bne.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005016:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fe36 	bl	8004cb0 <HAL_I2C_MemTxCpltCallback>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b22      	cmp	r3, #34	; 0x22
 800505e:	f040 80ac 	bne.w	80051ba <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d921      	bls.n	80050b4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b03      	cmp	r3, #3
 800509e:	f040 808c 	bne.w	80051ba <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80050b2:	e082      	b.n	80051ba <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d075      	beq.n	80051a8 <I2C_MasterReceive_RXNE+0x15c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d002      	beq.n	80050c8 <I2C_MasterReceive_RXNE+0x7c>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d16f      	bne.n	80051a8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 fafd 	bl	80066c8 <I2C_WaitOnSTOPRequestThroughIT>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d142      	bne.n	800515a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b40      	cmp	r3, #64	; 0x40
 800512c:	d10a      	bne.n	8005144 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fdc1 	bl	8004cc4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005142:	e03a      	b.n	80051ba <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2212      	movs	r2, #18
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fd76 	bl	8004c44 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005158:	e02f      	b.n	80051ba <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005168:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fd99 	bl	8004cd8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051a6:	e008      	b.n	80051ba <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b6:	605a      	str	r2, [r3, #4]
}
 80051b8:	e7ff      	b.n	80051ba <I2C_MasterReceive_RXNE+0x16e>
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d11b      	bne.n	8005212 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005210:	e0bd      	b.n	800538e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b03      	cmp	r3, #3
 800521a:	d129      	bne.n	8005270 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d00a      	beq.n	8005248 <I2C_MasterReceive_BTF+0x86>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d007      	beq.n	8005248 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005246:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800526e:	e08e      	b.n	800538e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d176      	bne.n	8005368 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d002      	beq.n	8005286 <I2C_MasterReceive_BTF+0xc4>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b10      	cmp	r3, #16
 8005284:	d108      	bne.n	8005298 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e019      	b.n	80052cc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d002      	beq.n	80052a4 <I2C_MasterReceive_BTF+0xe2>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d108      	bne.n	80052b6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e00a      	b.n	80052cc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d007      	beq.n	80052cc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005326:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d10a      	bne.n	8005352 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fcba 	bl	8004cc4 <HAL_I2C_MemRxCpltCallback>
}
 8005350:	e01d      	b.n	800538e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2212      	movs	r2, #18
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fc6f 	bl	8004c44 <HAL_I2C_MasterRxCpltCallback>
}
 8005366:	e012      	b.n	800538e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d117      	bne.n	80053da <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053c2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80053c4:	e067      	b.n	8005496 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	611a      	str	r2, [r3, #16]
}
 80053d8:	e05d      	b.n	8005496 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e2:	d133      	bne.n	800544c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b21      	cmp	r3, #33	; 0x21
 80053ee:	d109      	bne.n	8005404 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005400:	611a      	str	r2, [r3, #16]
 8005402:	e008      	b.n	8005416 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	b2db      	uxtb	r3, r3
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	b2da      	uxtb	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <I2C_Master_SB+0x92>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d108      	bne.n	800543a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d032      	beq.n	8005496 <I2C_Master_SB+0x100>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d02d      	beq.n	8005496 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005448:	605a      	str	r2, [r3, #4]
}
 800544a:	e024      	b.n	8005496 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10e      	bne.n	8005472 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	b29b      	uxth	r3, r3
 800545a:	11db      	asrs	r3, r3, #7
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0306 	and.w	r3, r3, #6
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f063 030f 	orn	r3, r3, #15
 8005468:	b2da      	uxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]
}
 8005470:	e011      	b.n	8005496 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	2b01      	cmp	r3, #1
 8005478:	d10d      	bne.n	8005496 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	b29b      	uxth	r3, r3
 8005480:	11db      	asrs	r3, r3, #7
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f003 0306 	and.w	r3, r3, #6
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f063 030e 	orn	r3, r3, #14
 800548e:	b2da      	uxtb	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	611a      	str	r2, [r3, #16]
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <I2C_Master_ADD10+0x26>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d108      	bne.n	80054da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00c      	beq.n	80054ea <I2C_Master_ADD10+0x48>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e8:	605a      	str	r2, [r3, #4]
  }
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b091      	sub	sp, #68	; 0x44
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005504:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b22      	cmp	r3, #34	; 0x22
 800551e:	f040 8169 	bne.w	80057f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <I2C_Master_ADDR+0x54>
 800552a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d10b      	bne.n	800554a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005532:	2300      	movs	r3, #0
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	633b      	str	r3, [r7, #48]	; 0x30
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	e160      	b.n	800580c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11d      	bne.n	800558e <I2C_Master_ADDR+0x98>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800555a:	d118      	bne.n	800558e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555c:	2300      	movs	r3, #0
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005580:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	651a      	str	r2, [r3, #80]	; 0x50
 800558c:	e13e      	b.n	800580c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d113      	bne.n	80055c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005598:	2300      	movs	r3, #0
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e115      	b.n	80057ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	f040 808a 	bne.w	80056e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055d2:	d137      	bne.n	8005644 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f2:	d113      	bne.n	800561c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005602:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	e0e7      	b.n	80057ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	623b      	str	r3, [r7, #32]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e0d3      	b.n	80057ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	2b08      	cmp	r3, #8
 8005648:	d02e      	beq.n	80056a8 <I2C_Master_ADDR+0x1b2>
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	2b20      	cmp	r3, #32
 800564e:	d02b      	beq.n	80056a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	2b12      	cmp	r3, #18
 8005654:	d102      	bne.n	800565c <I2C_Master_ADDR+0x166>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b01      	cmp	r3, #1
 800565a:	d125      	bne.n	80056a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2b04      	cmp	r3, #4
 8005660:	d00e      	beq.n	8005680 <I2C_Master_ADDR+0x18a>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b02      	cmp	r3, #2
 8005666:	d00b      	beq.n	8005680 <I2C_Master_ADDR+0x18a>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b10      	cmp	r3, #16
 800566c:	d008      	beq.n	8005680 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e007      	b.n	8005690 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800568e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	e0a1      	b.n	80057ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b8:	2300      	movs	r3, #0
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e085      	b.n	80057ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d14d      	bne.n	8005786 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d016      	beq.n	800571e <I2C_Master_ADDR+0x228>
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d013      	beq.n	800571e <I2C_Master_ADDR+0x228>
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d010      	beq.n	800571e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e007      	b.n	800572e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800572c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800573c:	d117      	bne.n	800576e <I2C_Master_ADDR+0x278>
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005744:	d00b      	beq.n	800575e <I2C_Master_ADDR+0x268>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	2b01      	cmp	r3, #1
 800574a:	d008      	beq.n	800575e <I2C_Master_ADDR+0x268>
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	2b08      	cmp	r3, #8
 8005750:	d005      	beq.n	800575e <I2C_Master_ADDR+0x268>
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	2b10      	cmp	r3, #16
 8005756:	d002      	beq.n	800575e <I2C_Master_ADDR+0x268>
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	2b20      	cmp	r3, #32
 800575c:	d107      	bne.n	800576e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800576c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	e032      	b.n	80057ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005794:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a4:	d117      	bne.n	80057d6 <I2C_Master_ADDR+0x2e0>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057ac:	d00b      	beq.n	80057c6 <I2C_Master_ADDR+0x2d0>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d008      	beq.n	80057c6 <I2C_Master_ADDR+0x2d0>
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d005      	beq.n	80057c6 <I2C_Master_ADDR+0x2d0>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d002      	beq.n	80057c6 <I2C_Master_ADDR+0x2d0>
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d107      	bne.n	80057d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80057f2:	e00b      	b.n	800580c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	e7ff      	b.n	800580c <I2C_Master_ADDR+0x316>
 800580c:	bf00      	nop
 800580e:	3744      	adds	r7, #68	; 0x44
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d02b      	beq.n	800588a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d114      	bne.n	800588a <I2C_SlaveTransmit_TXE+0x72>
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b29      	cmp	r3, #41	; 0x29
 8005864:	d111      	bne.n	800588a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005874:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2221      	movs	r2, #33	; 0x21
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2228      	movs	r2, #40	; 0x28
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff f9e7 	bl	8004c58 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d011      	beq.n	80058c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02c      	beq.n	8005948 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d114      	bne.n	8005948 <I2C_SlaveReceive_RXNE+0x74>
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b2a      	cmp	r3, #42	; 0x2a
 8005922:	d111      	bne.n	8005948 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005932:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2222      	movs	r2, #34	; 0x22
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2228      	movs	r2, #40	; 0x28
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff f992 	bl	8004c6c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005948:	bf00      	nop
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d012      	beq.n	8005988 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059ae:	2b28      	cmp	r3, #40	; 0x28
 80059b0:	d127      	bne.n	8005a02 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	09db      	lsrs	r3, r3, #7
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	81bb      	strh	r3, [r7, #12]
 80059e4:	e002      	b.n	80059ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80059f4:	89ba      	ldrh	r2, [r7, #12]
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff f940 	bl	8004c80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a00:	e00e      	b.n	8005a20 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60bb      	str	r3, [r7, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a84:	d172      	bne.n	8005b6c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b22      	cmp	r3, #34	; 0x22
 8005a8a:	d002      	beq.n	8005a92 <I2C_Slave_STOPF+0x6a>
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a90:	d135      	bne.n	8005afe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe f85f 	bl	8003b8e <HAL_DMA_GetState>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d049      	beq.n	8005b6a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	4a69      	ldr	r2, [pc, #420]	; (8005c80 <I2C_Slave_STOPF+0x258>)
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe f831 	bl	8003b4a <HAL_DMA_Abort_IT>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d03d      	beq.n	8005b6a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005afc:	e035      	b.n	8005b6a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f043 0204 	orr.w	r2, r3, #4
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe f829 	bl	8003b8e <HAL_DMA_GetState>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d014      	beq.n	8005b6c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	4a4e      	ldr	r2, [pc, #312]	; (8005c80 <I2C_Slave_STOPF+0x258>)
 8005b48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fd fffb 	bl	8003b4a <HAL_DMA_Abort_IT>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b64:	4610      	mov	r0, r2
 8005b66:	4798      	blx	r3
 8005b68:	e000      	b.n	8005b6c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b6a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d03e      	beq.n	8005bf4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d112      	bne.n	8005baa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d112      	bne.n	8005bde <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f043 0204 	orr.w	r2, r3, #4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8b3 	bl	8005d68 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005c02:	e039      	b.n	8005c78 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b2a      	cmp	r3, #42	; 0x2a
 8005c08:	d109      	bne.n	8005c1e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2228      	movs	r2, #40	; 0x28
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff f827 	bl	8004c6c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b28      	cmp	r3, #40	; 0x28
 8005c28:	d111      	bne.n	8005c4e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <I2C_Slave_STOPF+0x25c>)
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff f828 	bl	8004c9c <HAL_I2C_ListenCpltCallback>
}
 8005c4c:	e014      	b.n	8005c78 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	2b22      	cmp	r3, #34	; 0x22
 8005c54:	d002      	beq.n	8005c5c <I2C_Slave_STOPF+0x234>
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b22      	cmp	r3, #34	; 0x22
 8005c5a:	d10d      	bne.n	8005c78 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fe fffa 	bl	8004c6c <HAL_I2C_SlaveRxCpltCallback>
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	080062c9 	.word	0x080062c9
 8005c84:	ffff0000 	.word	0xffff0000

08005c88 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c96:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d002      	beq.n	8005caa <I2C_Slave_AF+0x22>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d129      	bne.n	8005cfe <I2C_Slave_AF+0x76>
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2b28      	cmp	r3, #40	; 0x28
 8005cae:	d126      	bne.n	8005cfe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a2c      	ldr	r2, [pc, #176]	; (8005d64 <I2C_Slave_AF+0xdc>)
 8005cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cc4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cde:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe ffd0 	bl	8004c9c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005cfc:	e02e      	b.n	8005d5c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b21      	cmp	r3, #33	; 0x21
 8005d02:	d126      	bne.n	8005d52 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <I2C_Slave_AF+0xdc>)
 8005d08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2221      	movs	r2, #33	; 0x21
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d2e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d38:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d48:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fe ff84 	bl	8004c58 <HAL_I2C_SlaveTxCpltCallback>
}
 8005d50:	e004      	b.n	8005d5c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d5a:	615a      	str	r2, [r3, #20]
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	ffff0000 	.word	0xffff0000

08005d68 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	2b10      	cmp	r3, #16
 8005d84:	d002      	beq.n	8005d8c <I2C_ITError+0x24>
 8005d86:	7bbb      	ldrb	r3, [r7, #14]
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d10a      	bne.n	8005da2 <I2C_ITError+0x3a>
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b22      	cmp	r3, #34	; 0x22
 8005d90:	d107      	bne.n	8005da2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005da8:	2b28      	cmp	r3, #40	; 0x28
 8005daa:	d107      	bne.n	8005dbc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2228      	movs	r2, #40	; 0x28
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dba:	e015      	b.n	8005de8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dca:	d00a      	beq.n	8005de2 <I2C_ITError+0x7a>
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b60      	cmp	r3, #96	; 0x60
 8005dd0:	d007      	beq.n	8005de2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df6:	d162      	bne.n	8005ebe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e06:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d020      	beq.n	8005e58 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	4a6a      	ldr	r2, [pc, #424]	; (8005fc4 <I2C_ITError+0x25c>)
 8005e1c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fd fe91 	bl	8003b4a <HAL_DMA_Abort_IT>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8089 	beq.w	8005f42 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e52:	4610      	mov	r0, r2
 8005e54:	4798      	blx	r3
 8005e56:	e074      	b.n	8005f42 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	4a59      	ldr	r2, [pc, #356]	; (8005fc4 <I2C_ITError+0x25c>)
 8005e5e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fd fe70 	bl	8003b4a <HAL_DMA_Abort_IT>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d068      	beq.n	8005f42 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d10b      	bne.n	8005e96 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
 8005ebc:	e041      	b.n	8005f42 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b60      	cmp	r3, #96	; 0x60
 8005ec8:	d125      	bne.n	8005f16 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d10b      	bne.n	8005efe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fe feec 	bl	8004cec <HAL_I2C_AbortCpltCallback>
 8005f14:	e015      	b.n	8005f42 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d10b      	bne.n	8005f3c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fe fecb 	bl	8004cd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10e      	bne.n	8005f70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d104      	bne.n	8005f70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d113      	bne.n	8005fbc <I2C_ITError+0x254>
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b28      	cmp	r3, #40	; 0x28
 8005f98:	d110      	bne.n	8005fbc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a0a      	ldr	r2, [pc, #40]	; (8005fc8 <I2C_ITError+0x260>)
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fe fe70 	bl	8004c9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	080062c9 	.word	0x080062c9
 8005fc8:	ffff0000 	.word	0xffff0000

08005fcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	817b      	strh	r3, [r7, #10]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	813b      	strh	r3, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fa08 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800601c:	d103      	bne.n	8006026 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e05f      	b.n	80060ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800602a:	897b      	ldrh	r3, [r7, #10]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006038:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	492d      	ldr	r1, [pc, #180]	; (80060f4 <I2C_RequestMemoryWrite+0x128>)
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa40 	bl	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e04c      	b.n	80060ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006068:	6a39      	ldr	r1, [r7, #32]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 faaa 	bl	80065c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	2b04      	cmp	r3, #4
 800607c:	d107      	bne.n	800608e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e02b      	b.n	80060ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d105      	bne.n	80060a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006098:	893b      	ldrh	r3, [r7, #8]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	611a      	str	r2, [r3, #16]
 80060a2:	e021      	b.n	80060e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060a4:	893b      	ldrh	r3, [r7, #8]
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	6a39      	ldr	r1, [r7, #32]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa84 	bl	80065c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d107      	bne.n	80060da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e005      	b.n	80060ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060de:	893b      	ldrh	r3, [r7, #8]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	00010002 	.word	0x00010002

080060f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	4608      	mov	r0, r1
 8006102:	4611      	mov	r1, r2
 8006104:	461a      	mov	r2, r3
 8006106:	4603      	mov	r3, r0
 8006108:	817b      	strh	r3, [r7, #10]
 800610a:	460b      	mov	r3, r1
 800610c:	813b      	strh	r3, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006120:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006130:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	2200      	movs	r2, #0
 800613a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f96a 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00d      	beq.n	8006166 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006158:	d103      	bne.n	8006162 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006160:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e0aa      	b.n	80062bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006166:	897b      	ldrh	r3, [r7, #10]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006174:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	6a3a      	ldr	r2, [r7, #32]
 800617a:	4952      	ldr	r1, [pc, #328]	; (80062c4 <I2C_RequestMemoryRead+0x1cc>)
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f9a2 	bl	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e097      	b.n	80062bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a4:	6a39      	ldr	r1, [r7, #32]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fa0c 	bl	80065c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00d      	beq.n	80061ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d107      	bne.n	80061ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e076      	b.n	80062bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d105      	bne.n	80061e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061d4:	893b      	ldrh	r3, [r7, #8]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	611a      	str	r2, [r3, #16]
 80061de:	e021      	b.n	8006224 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061e0:	893b      	ldrh	r3, [r7, #8]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f0:	6a39      	ldr	r1, [r7, #32]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f9e6 	bl	80065c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	2b04      	cmp	r3, #4
 8006204:	d107      	bne.n	8006216 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006214:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e050      	b.n	80062bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006226:	6a39      	ldr	r1, [r7, #32]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f9cb 	bl	80065c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00d      	beq.n	8006250 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	2b04      	cmp	r3, #4
 800623a:	d107      	bne.n	800624c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e035      	b.n	80062bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	2200      	movs	r2, #0
 8006268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f8d3 	bl	8006418 <I2C_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00d      	beq.n	8006294 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006286:	d103      	bne.n	8006290 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e013      	b.n	80062bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006294:	897b      	ldrh	r3, [r7, #10]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	b2da      	uxtb	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	4906      	ldr	r1, [pc, #24]	; (80062c4 <I2C_RequestMemoryRead+0x1cc>)
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f90b 	bl	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	00010002 	.word	0x00010002

080062c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062e2:	4b4b      	ldr	r3, [pc, #300]	; (8006410 <I2C_DMAAbort+0x148>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	08db      	lsrs	r3, r3, #3
 80062e8:	4a4a      	ldr	r2, [pc, #296]	; (8006414 <I2C_DMAAbort+0x14c>)
 80062ea:	fba2 2303 	umull	r2, r3, r2, r3
 80062ee:	0a1a      	lsrs	r2, r3, #8
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	00da      	lsls	r2, r3, #3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f043 0220 	orr.w	r2, r3, #32
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800630e:	e00a      	b.n	8006326 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3b01      	subs	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006324:	d0ea      	beq.n	80062fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	2200      	movs	r2, #0
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	2200      	movs	r2, #0
 8006344:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006354:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2200      	movs	r2, #0
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	2200      	movs	r2, #0
 800636a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	2200      	movs	r2, #0
 800637a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b60      	cmp	r3, #96	; 0x60
 8006396:	d10e      	bne.n	80063b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2200      	movs	r2, #0
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063ae:	6978      	ldr	r0, [r7, #20]
 80063b0:	f7fe fc9c 	bl	8004cec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063b4:	e027      	b.n	8006406 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063b6:	7cfb      	ldrb	r3, [r7, #19]
 80063b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063bc:	2b28      	cmp	r3, #40	; 0x28
 80063be:	d117      	bne.n	80063f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2228      	movs	r2, #40	; 0x28
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063ee:	e007      	b.n	8006400 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006400:	6978      	ldr	r0, [r7, #20]
 8006402:	f7fe fc69 	bl	8004cd8 <HAL_I2C_ErrorCallback>
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000000 	.word	0x20000000
 8006414:	14f8b589 	.word	0x14f8b589

08006418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	603b      	str	r3, [r7, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006428:	e025      	b.n	8006476 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d021      	beq.n	8006476 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006432:	f7fc fc91 	bl	8002d58 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d116      	bne.n	8006476 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f043 0220 	orr.w	r2, r3, #32
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e023      	b.n	80064be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10d      	bne.n	800649c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	43da      	mvns	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	e00c      	b.n	80064b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	43da      	mvns	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4013      	ands	r3, r2
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bf0c      	ite	eq
 80064ae:	2301      	moveq	r3, #1
 80064b0:	2300      	movne	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d0b6      	beq.n	800642a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064d4:	e051      	b.n	800657a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e4:	d123      	bne.n	800652e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f043 0204 	orr.w	r2, r3, #4
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e046      	b.n	80065bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d021      	beq.n	800657a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fc fc0f 	bl	8002d58 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d116      	bne.n	800657a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e020      	b.n	80065bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d10c      	bne.n	800659e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	43da      	mvns	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf14      	ite	ne
 8006596:	2301      	movne	r3, #1
 8006598:	2300      	moveq	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	e00b      	b.n	80065b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	43da      	mvns	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4013      	ands	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d18d      	bne.n	80064d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065d0:	e02d      	b.n	800662e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f900 	bl	80067d8 <I2C_IsAcknowledgeFailed>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e02d      	b.n	800663e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d021      	beq.n	800662e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ea:	f7fc fbb5 	bl	8002d58 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d302      	bcc.n	8006600 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d116      	bne.n	800662e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f043 0220 	orr.w	r2, r3, #32
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e007      	b.n	800663e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	2b80      	cmp	r3, #128	; 0x80
 800663a:	d1ca      	bne.n	80065d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006652:	e02d      	b.n	80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f8bf 	bl	80067d8 <I2C_IsAcknowledgeFailed>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e02d      	b.n	80066c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d021      	beq.n	80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666c:	f7fc fb74 	bl	8002d58 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	429a      	cmp	r2, r3
 800667a:	d302      	bcc.n	8006682 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d116      	bne.n	80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e007      	b.n	80066c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d1ca      	bne.n	8006654 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066d4:	4b13      	ldr	r3, [pc, #76]	; (8006724 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	08db      	lsrs	r3, r3, #3
 80066da:	4a13      	ldr	r2, [pc, #76]	; (8006728 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	0a1a      	lsrs	r2, r3, #8
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e008      	b.n	8006718 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006714:	d0e9      	beq.n	80066ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	20000000 	.word	0x20000000
 8006728:	14f8b589 	.word	0x14f8b589

0800672c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006738:	e042      	b.n	80067c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b10      	cmp	r3, #16
 8006746:	d119      	bne.n	800677c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0210 	mvn.w	r2, #16
 8006750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e029      	b.n	80067d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800677c:	f7fc faec 	bl	8002d58 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	429a      	cmp	r2, r3
 800678a:	d302      	bcc.n	8006792 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d116      	bne.n	80067c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	f043 0220 	orr.w	r2, r3, #32
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e007      	b.n	80067d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b40      	cmp	r3, #64	; 0x40
 80067cc:	d1b5      	bne.n	800673a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ee:	d11b      	bne.n	8006828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	f043 0204 	orr.w	r2, r3, #4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006846:	d103      	bne.n	8006850 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800684e:	e007      	b.n	8006860 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006858:	d102      	bne.n	8006860 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2208      	movs	r2, #8
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e0cc      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006880:	4b68      	ldr	r3, [pc, #416]	; (8006a24 <HAL_RCC_ClockConfig+0x1b8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d90c      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688e:	4b65      	ldr	r3, [pc, #404]	; (8006a24 <HAL_RCC_ClockConfig+0x1b8>)
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006896:	4b63      	ldr	r3, [pc, #396]	; (8006a24 <HAL_RCC_ClockConfig+0x1b8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d001      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0b8      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d020      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068c0:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4a58      	ldr	r2, [pc, #352]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068d8:	4b53      	ldr	r3, [pc, #332]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	4a52      	ldr	r2, [pc, #328]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e4:	4b50      	ldr	r3, [pc, #320]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	494d      	ldr	r1, [pc, #308]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d044      	beq.n	800698c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d107      	bne.n	800691a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690a:	4b47      	ldr	r3, [pc, #284]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d119      	bne.n	800694a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e07f      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d003      	beq.n	800692a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006926:	2b03      	cmp	r3, #3
 8006928:	d107      	bne.n	800693a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800692a:	4b3f      	ldr	r3, [pc, #252]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e06f      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693a:	4b3b      	ldr	r3, [pc, #236]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e067      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800694a:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4934      	ldr	r1, [pc, #208]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	4313      	orrs	r3, r2
 800695a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800695c:	f7fc f9fc 	bl	8002d58 <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	e00a      	b.n	800697a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006964:	f7fc f9f8 	bl	8002d58 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d901      	bls.n	800697a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e04f      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697a:	4b2b      	ldr	r3, [pc, #172]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 020c 	and.w	r2, r3, #12
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	429a      	cmp	r2, r3
 800698a:	d1eb      	bne.n	8006964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800698c:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <HAL_RCC_ClockConfig+0x1b8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d20c      	bcs.n	80069b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699a:	4b22      	ldr	r3, [pc, #136]	; (8006a24 <HAL_RCC_ClockConfig+0x1b8>)
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a2:	4b20      	ldr	r3, [pc, #128]	; (8006a24 <HAL_RCC_ClockConfig+0x1b8>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e032      	b.n	8006a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069c0:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4916      	ldr	r1, [pc, #88]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	490e      	ldr	r1, [pc, #56]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069f2:	f000 f855 	bl	8006aa0 <HAL_RCC_GetSysClockFreq>
 80069f6:	4602      	mov	r2, r0
 80069f8:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	091b      	lsrs	r3, r3, #4
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	490a      	ldr	r1, [pc, #40]	; (8006a2c <HAL_RCC_ClockConfig+0x1c0>)
 8006a04:	5ccb      	ldrb	r3, [r1, r3]
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a0e:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fc f95c 	bl	8002cd0 <HAL_InitTick>

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	40023c00 	.word	0x40023c00
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	0800d484 	.word	0x0800d484
 8006a30:	20000000 	.word	0x20000000
 8006a34:	20000004 	.word	0x20000004

08006a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000000 	.word	0x20000000

08006a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a54:	f7ff fff0 	bl	8006a38 <HAL_RCC_GetHCLKFreq>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	0a9b      	lsrs	r3, r3, #10
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	4903      	ldr	r1, [pc, #12]	; (8006a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a66:	5ccb      	ldrb	r3, [r1, r3]
 8006a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40023800 	.word	0x40023800
 8006a74:	0800d494 	.word	0x0800d494

08006a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a7c:	f7ff ffdc 	bl	8006a38 <HAL_RCC_GetHCLKFreq>
 8006a80:	4602      	mov	r2, r0
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	0b5b      	lsrs	r3, r3, #13
 8006a88:	f003 0307 	and.w	r3, r3, #7
 8006a8c:	4903      	ldr	r1, [pc, #12]	; (8006a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a8e:	5ccb      	ldrb	r3, [r1, r3]
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	0800d494 	.word	0x0800d494

08006aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa4:	b0ae      	sub	sp, #184	; 0xb8
 8006aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac6:	4bcb      	ldr	r3, [pc, #812]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	f200 8206 	bhi.w	8006ee0 <HAL_RCC_GetSysClockFreq+0x440>
 8006ad4:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006b11 	.word	0x08006b11
 8006ae0:	08006ee1 	.word	0x08006ee1
 8006ae4:	08006ee1 	.word	0x08006ee1
 8006ae8:	08006ee1 	.word	0x08006ee1
 8006aec:	08006b19 	.word	0x08006b19
 8006af0:	08006ee1 	.word	0x08006ee1
 8006af4:	08006ee1 	.word	0x08006ee1
 8006af8:	08006ee1 	.word	0x08006ee1
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006ee1 	.word	0x08006ee1
 8006b04:	08006ee1 	.word	0x08006ee1
 8006b08:	08006ee1 	.word	0x08006ee1
 8006b0c:	08006d11 	.word	0x08006d11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4bb9      	ldr	r3, [pc, #740]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x358>)
 8006b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006b16:	e1e7      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b18:	4bb8      	ldr	r3, [pc, #736]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x35c>)
 8006b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b1e:	e1e3      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b20:	4bb4      	ldr	r3, [pc, #720]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b2c:	4bb1      	ldr	r3, [pc, #708]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d071      	beq.n	8006c1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b38:	4bae      	ldr	r3, [pc, #696]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	099b      	lsrs	r3, r3, #6
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b54:	2300      	movs	r3, #0
 8006b56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b5e:	4622      	mov	r2, r4
 8006b60:	462b      	mov	r3, r5
 8006b62:	f04f 0000 	mov.w	r0, #0
 8006b66:	f04f 0100 	mov.w	r1, #0
 8006b6a:	0159      	lsls	r1, r3, #5
 8006b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b70:	0150      	lsls	r0, r2, #5
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4621      	mov	r1, r4
 8006b78:	1a51      	subs	r1, r2, r1
 8006b7a:	6439      	str	r1, [r7, #64]	; 0x40
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006b82:	647b      	str	r3, [r7, #68]	; 0x44
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006b90:	4649      	mov	r1, r9
 8006b92:	018b      	lsls	r3, r1, #6
 8006b94:	4641      	mov	r1, r8
 8006b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	018a      	lsls	r2, r1, #6
 8006b9e:	4641      	mov	r1, r8
 8006ba0:	1a51      	subs	r1, r2, r1
 8006ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006bb8:	4649      	mov	r1, r9
 8006bba:	00cb      	lsls	r3, r1, #3
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	00ca      	lsls	r2, r1, #3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4622      	mov	r2, r4
 8006bce:	189b      	adds	r3, r3, r2
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	eb42 0303 	adc.w	r3, r2, r3
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	f04f 0300 	mov.w	r3, #0
 8006be4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006be8:	4629      	mov	r1, r5
 8006bea:	024b      	lsls	r3, r1, #9
 8006bec:	4621      	mov	r1, r4
 8006bee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	024a      	lsls	r2, r1, #9
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006c0c:	f7fa f86c 	bl	8000ce8 <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4613      	mov	r3, r2
 8006c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c1a:	e067      	b.n	8006cec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c1c:	4b75      	ldr	r3, [pc, #468]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	099b      	lsrs	r3, r3, #6
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c28:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c34:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c36:	2300      	movs	r3, #0
 8006c38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006c3e:	4622      	mov	r2, r4
 8006c40:	462b      	mov	r3, r5
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f04f 0100 	mov.w	r1, #0
 8006c4a:	0159      	lsls	r1, r3, #5
 8006c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c50:	0150      	lsls	r0, r2, #5
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4621      	mov	r1, r4
 8006c58:	1a51      	subs	r1, r2, r1
 8006c5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006c70:	4649      	mov	r1, r9
 8006c72:	018b      	lsls	r3, r1, #6
 8006c74:	4641      	mov	r1, r8
 8006c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c7a:	4641      	mov	r1, r8
 8006c7c:	018a      	lsls	r2, r1, #6
 8006c7e:	4641      	mov	r1, r8
 8006c80:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c84:	4649      	mov	r1, r9
 8006c86:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c9e:	4692      	mov	sl, r2
 8006ca0:	469b      	mov	fp, r3
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	eb1a 0303 	adds.w	r3, sl, r3
 8006ca8:	623b      	str	r3, [r7, #32]
 8006caa:	462b      	mov	r3, r5
 8006cac:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	028b      	lsls	r3, r1, #10
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cc8:	4621      	mov	r1, r4
 8006cca:	028a      	lsls	r2, r1, #10
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	673b      	str	r3, [r7, #112]	; 0x70
 8006cd8:	677a      	str	r2, [r7, #116]	; 0x74
 8006cda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006cde:	f7fa f803 	bl	8000ce8 <__aeabi_uldivmod>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cec:	4b41      	ldr	r3, [pc, #260]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006d0e:	e0eb      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d10:	4b38      	ldr	r3, [pc, #224]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d1c:	4b35      	ldr	r3, [pc, #212]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d06b      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d28:	4b32      	ldr	r3, [pc, #200]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	099b      	lsrs	r3, r3, #6
 8006d2e:	2200      	movs	r2, #0
 8006d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8006d40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	f04f 0000 	mov.w	r0, #0
 8006d4c:	f04f 0100 	mov.w	r1, #0
 8006d50:	0159      	lsls	r1, r3, #5
 8006d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d56:	0150      	lsls	r0, r2, #5
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	1a51      	subs	r1, r2, r1
 8006d60:	61b9      	str	r1, [r7, #24]
 8006d62:	4629      	mov	r1, r5
 8006d64:	eb63 0301 	sbc.w	r3, r3, r1
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006d76:	4659      	mov	r1, fp
 8006d78:	018b      	lsls	r3, r1, #6
 8006d7a:	4651      	mov	r1, sl
 8006d7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d80:	4651      	mov	r1, sl
 8006d82:	018a      	lsls	r2, r1, #6
 8006d84:	4651      	mov	r1, sl
 8006d86:	ebb2 0801 	subs.w	r8, r2, r1
 8006d8a:	4659      	mov	r1, fp
 8006d8c:	eb63 0901 	sbc.w	r9, r3, r1
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006da0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006da4:	4690      	mov	r8, r2
 8006da6:	4699      	mov	r9, r3
 8006da8:	4623      	mov	r3, r4
 8006daa:	eb18 0303 	adds.w	r3, r8, r3
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	462b      	mov	r3, r5
 8006db2:	eb49 0303 	adc.w	r3, r9, r3
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	024b      	lsls	r3, r1, #9
 8006dc8:	4621      	mov	r1, r4
 8006dca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006dce:	4621      	mov	r1, r4
 8006dd0:	024a      	lsls	r2, r1, #9
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dda:	2200      	movs	r2, #0
 8006ddc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006de0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006de4:	f7f9 ff80 	bl	8000ce8 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4613      	mov	r3, r2
 8006dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006df2:	e065      	b.n	8006ec0 <HAL_RCC_GetSysClockFreq+0x420>
 8006df4:	40023800 	.word	0x40023800
 8006df8:	00f42400 	.word	0x00f42400
 8006dfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e00:	4b3d      	ldr	r3, [pc, #244]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	099b      	lsrs	r3, r3, #6
 8006e06:	2200      	movs	r2, #0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e10:	653b      	str	r3, [r7, #80]	; 0x50
 8006e12:	2300      	movs	r3, #0
 8006e14:	657b      	str	r3, [r7, #84]	; 0x54
 8006e16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	f04f 0000 	mov.w	r0, #0
 8006e22:	f04f 0100 	mov.w	r1, #0
 8006e26:	0159      	lsls	r1, r3, #5
 8006e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e2c:	0150      	lsls	r0, r2, #5
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4641      	mov	r1, r8
 8006e34:	1a51      	subs	r1, r2, r1
 8006e36:	60b9      	str	r1, [r7, #8]
 8006e38:	4649      	mov	r1, r9
 8006e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	018b      	lsls	r3, r1, #6
 8006e50:	4651      	mov	r1, sl
 8006e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e56:	4651      	mov	r1, sl
 8006e58:	018a      	lsls	r2, r1, #6
 8006e5a:	4651      	mov	r1, sl
 8006e5c:	1a54      	subs	r4, r2, r1
 8006e5e:	4659      	mov	r1, fp
 8006e60:	eb63 0501 	sbc.w	r5, r3, r1
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	00eb      	lsls	r3, r5, #3
 8006e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e72:	00e2      	lsls	r2, r4, #3
 8006e74:	4614      	mov	r4, r2
 8006e76:	461d      	mov	r5, r3
 8006e78:	4643      	mov	r3, r8
 8006e7a:	18e3      	adds	r3, r4, r3
 8006e7c:	603b      	str	r3, [r7, #0]
 8006e7e:	464b      	mov	r3, r9
 8006e80:	eb45 0303 	adc.w	r3, r5, r3
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e92:	4629      	mov	r1, r5
 8006e94:	028b      	lsls	r3, r1, #10
 8006e96:	4621      	mov	r1, r4
 8006e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	028a      	lsls	r2, r1, #10
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006eae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006eb2:	f7f9 ff19 	bl	8000ce8 <__aeabi_uldivmod>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4613      	mov	r3, r2
 8006ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006ec0:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	0f1b      	lsrs	r3, r3, #28
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006ede:	e003      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <HAL_RCC_GetSysClockFreq+0x45c>)
 8006ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006ee6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ee8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	37b8      	adds	r7, #184	; 0xb8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	00f42400 	.word	0x00f42400

08006f00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e28d      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8083 	beq.w	8007026 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f20:	4b94      	ldr	r3, [pc, #592]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d019      	beq.n	8006f60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f2c:	4b91      	ldr	r3, [pc, #580]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d106      	bne.n	8006f46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f38:	4b8e      	ldr	r3, [pc, #568]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f44:	d00c      	beq.n	8006f60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f46:	4b8b      	ldr	r3, [pc, #556]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f4e:	2b0c      	cmp	r3, #12
 8006f50:	d112      	bne.n	8006f78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f52:	4b88      	ldr	r3, [pc, #544]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f5e:	d10b      	bne.n	8006f78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f60:	4b84      	ldr	r3, [pc, #528]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d05b      	beq.n	8007024 <HAL_RCC_OscConfig+0x124>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d157      	bne.n	8007024 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e25a      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d106      	bne.n	8006f90 <HAL_RCC_OscConfig+0x90>
 8006f82:	4b7c      	ldr	r3, [pc, #496]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a7b      	ldr	r2, [pc, #492]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	e01d      	b.n	8006fcc <HAL_RCC_OscConfig+0xcc>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f98:	d10c      	bne.n	8006fb4 <HAL_RCC_OscConfig+0xb4>
 8006f9a:	4b76      	ldr	r3, [pc, #472]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a75      	ldr	r2, [pc, #468]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	4b73      	ldr	r3, [pc, #460]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a72      	ldr	r2, [pc, #456]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e00b      	b.n	8006fcc <HAL_RCC_OscConfig+0xcc>
 8006fb4:	4b6f      	ldr	r3, [pc, #444]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a6e      	ldr	r2, [pc, #440]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	4b6c      	ldr	r3, [pc, #432]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a6b      	ldr	r2, [pc, #428]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d013      	beq.n	8006ffc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fb fec0 	bl	8002d58 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fdc:	f7fb febc 	bl	8002d58 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b64      	cmp	r3, #100	; 0x64
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e21f      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fee:	4b61      	ldr	r3, [pc, #388]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0f0      	beq.n	8006fdc <HAL_RCC_OscConfig+0xdc>
 8006ffa:	e014      	b.n	8007026 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fb feac 	bl	8002d58 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007004:	f7fb fea8 	bl	8002d58 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b64      	cmp	r3, #100	; 0x64
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e20b      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007016:	4b57      	ldr	r3, [pc, #348]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f0      	bne.n	8007004 <HAL_RCC_OscConfig+0x104>
 8007022:	e000      	b.n	8007026 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d06f      	beq.n	8007112 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007032:	4b50      	ldr	r3, [pc, #320]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 030c 	and.w	r3, r3, #12
 800703a:	2b00      	cmp	r3, #0
 800703c:	d017      	beq.n	800706e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800703e:	4b4d      	ldr	r3, [pc, #308]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007046:	2b08      	cmp	r3, #8
 8007048:	d105      	bne.n	8007056 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800704a:	4b4a      	ldr	r3, [pc, #296]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007056:	4b47      	ldr	r3, [pc, #284]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d11c      	bne.n	800709c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007062:	4b44      	ldr	r3, [pc, #272]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d116      	bne.n	800709c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800706e:	4b41      	ldr	r3, [pc, #260]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_RCC_OscConfig+0x186>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d001      	beq.n	8007086 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e1d3      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007086:	4b3b      	ldr	r3, [pc, #236]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4937      	ldr	r1, [pc, #220]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007096:	4313      	orrs	r3, r2
 8007098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800709a:	e03a      	b.n	8007112 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d020      	beq.n	80070e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070a4:	4b34      	ldr	r3, [pc, #208]	; (8007178 <HAL_RCC_OscConfig+0x278>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070aa:	f7fb fe55 	bl	8002d58 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070b2:	f7fb fe51 	bl	8002d58 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e1b4      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c4:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d0:	4b28      	ldr	r3, [pc, #160]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	4925      	ldr	r1, [pc, #148]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	600b      	str	r3, [r1, #0]
 80070e4:	e015      	b.n	8007112 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070e6:	4b24      	ldr	r3, [pc, #144]	; (8007178 <HAL_RCC_OscConfig+0x278>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7fb fe34 	bl	8002d58 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070f4:	f7fb fe30 	bl	8002d58 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e193      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007106:	4b1b      	ldr	r3, [pc, #108]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d036      	beq.n	800718c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d016      	beq.n	8007154 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007126:	4b15      	ldr	r3, [pc, #84]	; (800717c <HAL_RCC_OscConfig+0x27c>)
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712c:	f7fb fe14 	bl	8002d58 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007134:	f7fb fe10 	bl	8002d58 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e173      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007146:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <HAL_RCC_OscConfig+0x274>)
 8007148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCC_OscConfig+0x234>
 8007152:	e01b      	b.n	800718c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007154:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_RCC_OscConfig+0x27c>)
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715a:	f7fb fdfd 	bl	8002d58 <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007160:	e00e      	b.n	8007180 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007162:	f7fb fdf9 	bl	8002d58 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d907      	bls.n	8007180 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e15c      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
 8007174:	40023800 	.word	0x40023800
 8007178:	42470000 	.word	0x42470000
 800717c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007180:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ea      	bne.n	8007162 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 8097 	beq.w	80072c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719e:	4b83      	ldr	r3, [pc, #524]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10f      	bne.n	80071ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	4b7f      	ldr	r3, [pc, #508]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	4a7e      	ldr	r2, [pc, #504]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80071b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ba:	4b7c      	ldr	r3, [pc, #496]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ca:	4b79      	ldr	r3, [pc, #484]	; (80073b0 <HAL_RCC_OscConfig+0x4b0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d118      	bne.n	8007208 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071d6:	4b76      	ldr	r3, [pc, #472]	; (80073b0 <HAL_RCC_OscConfig+0x4b0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a75      	ldr	r2, [pc, #468]	; (80073b0 <HAL_RCC_OscConfig+0x4b0>)
 80071dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071e2:	f7fb fdb9 	bl	8002d58 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ea:	f7fb fdb5 	bl	8002d58 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e118      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fc:	4b6c      	ldr	r3, [pc, #432]	; (80073b0 <HAL_RCC_OscConfig+0x4b0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d106      	bne.n	800721e <HAL_RCC_OscConfig+0x31e>
 8007210:	4b66      	ldr	r3, [pc, #408]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007214:	4a65      	ldr	r2, [pc, #404]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	6713      	str	r3, [r2, #112]	; 0x70
 800721c:	e01c      	b.n	8007258 <HAL_RCC_OscConfig+0x358>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b05      	cmp	r3, #5
 8007224:	d10c      	bne.n	8007240 <HAL_RCC_OscConfig+0x340>
 8007226:	4b61      	ldr	r3, [pc, #388]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	4a60      	ldr	r2, [pc, #384]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 800722c:	f043 0304 	orr.w	r3, r3, #4
 8007230:	6713      	str	r3, [r2, #112]	; 0x70
 8007232:	4b5e      	ldr	r3, [pc, #376]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	4a5d      	ldr	r2, [pc, #372]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	6713      	str	r3, [r2, #112]	; 0x70
 800723e:	e00b      	b.n	8007258 <HAL_RCC_OscConfig+0x358>
 8007240:	4b5a      	ldr	r3, [pc, #360]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	4a59      	ldr	r2, [pc, #356]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007246:	f023 0301 	bic.w	r3, r3, #1
 800724a:	6713      	str	r3, [r2, #112]	; 0x70
 800724c:	4b57      	ldr	r3, [pc, #348]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	4a56      	ldr	r2, [pc, #344]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007252:	f023 0304 	bic.w	r3, r3, #4
 8007256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d015      	beq.n	800728c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007260:	f7fb fd7a 	bl	8002d58 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007266:	e00a      	b.n	800727e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007268:	f7fb fd76 	bl	8002d58 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	f241 3288 	movw	r2, #5000	; 0x1388
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e0d7      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727e:	4b4b      	ldr	r3, [pc, #300]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ee      	beq.n	8007268 <HAL_RCC_OscConfig+0x368>
 800728a:	e014      	b.n	80072b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800728c:	f7fb fd64 	bl	8002d58 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007292:	e00a      	b.n	80072aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007294:	f7fb fd60 	bl	8002d58 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e0c1      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072aa:	4b40      	ldr	r3, [pc, #256]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1ee      	bne.n	8007294 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d105      	bne.n	80072c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072bc:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	4a3a      	ldr	r2, [pc, #232]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80072c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80ad 	beq.w	800742c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072d2:	4b36      	ldr	r3, [pc, #216]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 030c 	and.w	r3, r3, #12
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d060      	beq.n	80073a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d145      	bne.n	8007372 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e6:	4b33      	ldr	r3, [pc, #204]	; (80073b4 <HAL_RCC_OscConfig+0x4b4>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fb fd34 	bl	8002d58 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072f4:	f7fb fd30 	bl	8002d58 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e093      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007306:	4b29      	ldr	r3, [pc, #164]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	019b      	lsls	r3, r3, #6
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	085b      	lsrs	r3, r3, #1
 800732a:	3b01      	subs	r3, #1
 800732c:	041b      	lsls	r3, r3, #16
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	061b      	lsls	r3, r3, #24
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	071b      	lsls	r3, r3, #28
 800733e:	491b      	ldr	r1, [pc, #108]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007340:	4313      	orrs	r3, r2
 8007342:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007344:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <HAL_RCC_OscConfig+0x4b4>)
 8007346:	2201      	movs	r2, #1
 8007348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734a:	f7fb fd05 	bl	8002d58 <HAL_GetTick>
 800734e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007350:	e008      	b.n	8007364 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007352:	f7fb fd01 	bl	8002d58 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e064      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007364:	4b11      	ldr	r3, [pc, #68]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCC_OscConfig+0x452>
 8007370:	e05c      	b.n	800742c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <HAL_RCC_OscConfig+0x4b4>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fb fcee 	bl	8002d58 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007380:	f7fb fcea 	bl	8002d58 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e04d      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007392:	4b06      	ldr	r3, [pc, #24]	; (80073ac <HAL_RCC_OscConfig+0x4ac>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f0      	bne.n	8007380 <HAL_RCC_OscConfig+0x480>
 800739e:	e045      	b.n	800742c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e040      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
 80073ac:	40023800 	.word	0x40023800
 80073b0:	40007000 	.word	0x40007000
 80073b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073b8:	4b1f      	ldr	r3, [pc, #124]	; (8007438 <HAL_RCC_OscConfig+0x538>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d030      	beq.n	8007428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d129      	bne.n	8007428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	429a      	cmp	r2, r3
 80073e0:	d122      	bne.n	8007428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073e8:	4013      	ands	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d119      	bne.n	8007428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	3b01      	subs	r3, #1
 8007402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007404:	429a      	cmp	r2, r3
 8007406:	d10f      	bne.n	8007428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007414:	429a      	cmp	r2, r3
 8007416:	d107      	bne.n	8007428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007424:	429a      	cmp	r2, r3
 8007426:	d001      	beq.n	800742c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e000      	b.n	800742e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40023800 	.word	0x40023800

0800743c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e03f      	b.n	80074ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fb f9be 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2224      	movs	r2, #36	; 0x24
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800747e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fecf 	bl	8008224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695a      	ldr	r2, [r3, #20]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b08a      	sub	sp, #40	; 0x28
 80074da:	af02      	add	r7, sp, #8
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	603b      	str	r3, [r7, #0]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d17c      	bne.n	80075f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <HAL_UART_Transmit+0x2c>
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e075      	b.n	80075f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_UART_Transmit+0x3e>
 8007510:	2302      	movs	r3, #2
 8007512:	e06e      	b.n	80075f2 <HAL_UART_Transmit+0x11c>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2221      	movs	r2, #33	; 0x21
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800752a:	f7fb fc15 	bl	8002d58 <HAL_GetTick>
 800752e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	88fa      	ldrh	r2, [r7, #6]
 800753a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007544:	d108      	bne.n	8007558 <HAL_UART_Transmit+0x82>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	e003      	b.n	8007560 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800755c:	2300      	movs	r3, #0
 800755e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007568:	e02a      	b.n	80075c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2200      	movs	r2, #0
 8007572:	2180      	movs	r1, #128	; 0x80
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 fc0f 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e036      	b.n	80075f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	3302      	adds	r3, #2
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	e007      	b.n	80075b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	3301      	adds	r3, #1
 80075b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1cf      	bne.n	800756a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	2140      	movs	r1, #64	; 0x40
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fbdf 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e006      	b.n	80075f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e000      	b.n	80075f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
  }
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3720      	adds	r7, #32
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b08a      	sub	sp, #40	; 0x28
 80075fe:	af02      	add	r7, sp, #8
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	4613      	mov	r3, r2
 8007608:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b20      	cmp	r3, #32
 8007618:	f040 808c 	bne.w	8007734 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_UART_Receive+0x2e>
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e084      	b.n	8007736 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_UART_Receive+0x40>
 8007636:	2302      	movs	r3, #2
 8007638:	e07d      	b.n	8007736 <HAL_UART_Receive+0x13c>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2222      	movs	r2, #34	; 0x22
 800764c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007656:	f7fb fb7f 	bl	8002d58 <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	88fa      	ldrh	r2, [r7, #6]
 8007666:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007670:	d108      	bne.n	8007684 <HAL_UART_Receive+0x8a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	e003      	b.n	800768c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007694:	e043      	b.n	800771e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2200      	movs	r2, #0
 800769e:	2120      	movs	r1, #32
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fb79 	bl	8007d98 <UART_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e042      	b.n	8007736 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10c      	bne.n	80076d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	3302      	adds	r3, #2
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	e01f      	b.n	8007710 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d8:	d007      	beq.n	80076ea <HAL_UART_Receive+0xf0>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <HAL_UART_Receive+0xfe>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e008      	b.n	800770a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007704:	b2da      	uxtb	r2, r3
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	3301      	adds	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1b6      	bne.n	8007696 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	e000      	b.n	8007736 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	4613      	mov	r3, r2
 800774a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b20      	cmp	r3, #32
 8007756:	d130      	bne.n	80077ba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_UART_Transmit_IT+0x26>
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e029      	b.n	80077bc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_UART_Transmit_IT+0x38>
 8007772:	2302      	movs	r3, #2
 8007774:	e022      	b.n	80077bc <HAL_UART_Transmit_IT+0x7e>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	88fa      	ldrh	r2, [r7, #6]
 8007788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	88fa      	ldrh	r2, [r7, #6]
 800778e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2221      	movs	r2, #33	; 0x21
 800779a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d11d      	bne.n	800781e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_UART_Receive_IT+0x26>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e016      	b.n	8007820 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d101      	bne.n	8007800 <HAL_UART_Receive_IT+0x38>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e00f      	b.n	8007820 <HAL_UART_Receive_IT+0x58>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	461a      	mov	r2, r3
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fb2d 	bl	8007e74 <UART_Start_Receive_IT>
 800781a:	4603      	mov	r3, r0
 800781c:	e000      	b.n	8007820 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800781e:	2302      	movs	r3, #2
  }
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b0ba      	sub	sp, #232	; 0xe8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800784e:	2300      	movs	r3, #0
 8007850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785e:	f003 030f 	and.w	r3, r3, #15
 8007862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10f      	bne.n	800788e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_UART_IRQHandler+0x66>
 800787a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fc11 	bl	80080ae <UART_Receive_IT>
      return;
 800788c:	e256      	b.n	8007d3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800788e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80de 	beq.w	8007a54 <HAL_UART_IRQHandler+0x22c>
 8007898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80d1 	beq.w	8007a54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <HAL_UART_IRQHandler+0xae>
 80078be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f043 0201 	orr.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <HAL_UART_IRQHandler+0xd2>
 80078e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d005      	beq.n	80078fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	f043 0202 	orr.w	r2, r3, #2
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <HAL_UART_IRQHandler+0xf6>
 8007906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	f043 0204 	orr.w	r2, r3, #4
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800791e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d011      	beq.n	800794e <HAL_UART_IRQHandler+0x126>
 800792a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d105      	bne.n	8007942 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	f043 0208 	orr.w	r2, r3, #8
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 81ed 	beq.w	8007d32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795c:	f003 0320 	and.w	r3, r3, #32
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <HAL_UART_IRQHandler+0x14e>
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fb9c 	bl	80080ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	bf0c      	ite	eq
 8007984:	2301      	moveq	r3, #1
 8007986:	2300      	movne	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <HAL_UART_IRQHandler+0x17a>
 800799a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d04f      	beq.n	8007a42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 faa4 	bl	8007ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d141      	bne.n	8007a3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3314      	adds	r3, #20
 80079bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3314      	adds	r3, #20
 80079de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1d9      	bne.n	80079b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d013      	beq.n	8007a32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	4a7d      	ldr	r2, [pc, #500]	; (8007c04 <HAL_UART_IRQHandler+0x3dc>)
 8007a10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fc f897 	bl	8003b4a <HAL_DMA_Abort_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d016      	beq.n	8007a50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	e00e      	b.n	8007a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f99a 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a38:	e00a      	b.n	8007a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f996 	bl	8007d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	e006      	b.n	8007a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f992 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a4e:	e170      	b.n	8007d32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	bf00      	nop
    return;
 8007a52:	e16e      	b.n	8007d32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	f040 814a 	bne.w	8007cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a62:	f003 0310 	and.w	r3, r3, #16
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8143 	beq.w	8007cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 813c 	beq.w	8007cf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60bb      	str	r3, [r7, #8]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b40      	cmp	r3, #64	; 0x40
 8007a9c:	f040 80b4 	bne.w	8007c08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8140 	beq.w	8007d36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	f080 8139 	bcs.w	8007d36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad6:	f000 8088 	beq.w	8007bea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1d9      	bne.n	8007ada <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3314      	adds	r3, #20
 8007b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3314      	adds	r3, #20
 8007b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e1      	bne.n	8007b26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3314      	adds	r3, #20
 8007b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3314      	adds	r3, #20
 8007b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e3      	bne.n	8007b62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bba:	f023 0310 	bic.w	r3, r3, #16
 8007bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e3      	bne.n	8007ba8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fb ff40 	bl	8003a6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f8c0 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c00:	e099      	b.n	8007d36 <HAL_UART_IRQHandler+0x50e>
 8007c02:	bf00      	nop
 8007c04:	08007fb7 	.word	0x08007fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 808b 	beq.w	8007d3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8086 	beq.w	8007d3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	330c      	adds	r3, #12
 8007c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c52:	647a      	str	r2, [r7, #68]	; 0x44
 8007c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e3      	bne.n	8007c2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	623b      	str	r3, [r7, #32]
   return(result);
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	f023 0301 	bic.w	r3, r3, #1
 8007c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3314      	adds	r3, #20
 8007c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e3      	bne.n	8007c66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0310 	bic.w	r3, r3, #16
 8007cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	330c      	adds	r3, #12
 8007ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cd0:	61fa      	str	r2, [r7, #28]
 8007cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e3      	bne.n	8007cac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f848 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cf0:	e023      	b.n	8007d3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <HAL_UART_IRQHandler+0x4ea>
 8007cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f967 	bl	8007fde <UART_Transmit_IT>
    return;
 8007d10:	e014      	b.n	8007d3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00e      	beq.n	8007d3c <HAL_UART_IRQHandler+0x514>
 8007d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9a7 	bl	800807e <UART_EndTransmit_IT>
    return;
 8007d30:	e004      	b.n	8007d3c <HAL_UART_IRQHandler+0x514>
    return;
 8007d32:	bf00      	nop
 8007d34:	e002      	b.n	8007d3c <HAL_UART_IRQHandler+0x514>
      return;
 8007d36:	bf00      	nop
 8007d38:	e000      	b.n	8007d3c <HAL_UART_IRQHandler+0x514>
      return;
 8007d3a:	bf00      	nop
  }
}
 8007d3c:	37e8      	adds	r7, #232	; 0xe8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b090      	sub	sp, #64	; 0x40
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da8:	e050      	b.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d04c      	beq.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007db8:	f7fa ffce 	bl	8002d58 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d241      	bcs.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	330c      	adds	r3, #12
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	330c      	adds	r3, #12
 8007de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007de8:	637a      	str	r2, [r7, #52]	; 0x34
 8007dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e5      	bne.n	8007dc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3314      	adds	r3, #20
 8007e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f023 0301 	bic.w	r3, r3, #1
 8007e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1c:	623a      	str	r2, [r7, #32]
 8007e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e5      	bne.n	8007dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e00f      	b.n	8007e6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4013      	ands	r3, r2
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bf0c      	ite	eq
 8007e5c:	2301      	moveq	r3, #1
 8007e5e:	2300      	movne	r3, #0
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d09f      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3740      	adds	r7, #64	; 0x40
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	88fa      	ldrh	r2, [r7, #6]
 8007e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2222      	movs	r2, #34	; 0x22
 8007e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ec0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0201 	orr.w	r2, r2, #1
 8007ed0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0220 	orr.w	r2, r2, #32
 8007ee0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b095      	sub	sp, #84	; 0x54
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	330c      	adds	r3, #12
 8007f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f18:	643a      	str	r2, [r7, #64]	; 0x40
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e5      	bne.n	8007ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3314      	adds	r3, #20
 8007f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3314      	adds	r3, #20
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d119      	bne.n	8007f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f023 0310 	bic.w	r3, r3, #16
 8007f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f88:	61ba      	str	r2, [r7, #24]
 8007f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6979      	ldr	r1, [r7, #20]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	613b      	str	r3, [r7, #16]
   return(result);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e5      	bne.n	8007f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007faa:	bf00      	nop
 8007fac:	3754      	adds	r7, #84	; 0x54
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fecb 	bl	8007d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b21      	cmp	r3, #33	; 0x21
 8007ff0:	d13e      	bne.n	8008070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	d114      	bne.n	8008026 <UART_Transmit_IT+0x48>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d110      	bne.n	8008026 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	1c9a      	adds	r2, r3, #2
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]
 8008024:	e008      	b.n	8008038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	1c59      	adds	r1, r3, #1
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6211      	str	r1, [r2, #32]
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4619      	mov	r1, r3
 8008046:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10f      	bne.n	800806c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800805a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800806a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	e000      	b.n	8008072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008070:	2302      	movs	r3, #2
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fe50 	bl	8007d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08c      	sub	sp, #48	; 0x30
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b22      	cmp	r3, #34	; 0x22
 80080c0:	f040 80ab 	bne.w	800821a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080cc:	d117      	bne.n	80080fe <UART_Receive_IT+0x50>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d113      	bne.n	80080fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	1c9a      	adds	r2, r3, #2
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	629a      	str	r2, [r3, #40]	; 0x28
 80080fc:	e026      	b.n	800814c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008104:	2300      	movs	r3, #0
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d007      	beq.n	8008122 <UART_Receive_IT+0x74>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <UART_Receive_IT+0x82>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	b2da      	uxtb	r2, r3
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e008      	b.n	8008142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813c:	b2da      	uxtb	r2, r3
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29b      	uxth	r3, r3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4619      	mov	r1, r3
 800815a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800815c:	2b00      	cmp	r3, #0
 800815e:	d15a      	bne.n	8008216 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0220 	bic.w	r2, r2, #32
 800816e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695a      	ldr	r2, [r3, #20]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	2b01      	cmp	r3, #1
 800819e:	d135      	bne.n	800820c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	330c      	adds	r3, #12
 80081ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	613b      	str	r3, [r7, #16]
   return(result);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f023 0310 	bic.w	r3, r3, #16
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	330c      	adds	r3, #12
 80081c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c6:	623a      	str	r2, [r7, #32]
 80081c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	69f9      	ldr	r1, [r7, #28]
 80081cc:	6a3a      	ldr	r2, [r7, #32]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0310 	and.w	r3, r3, #16
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d10a      	bne.n	80081fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fdbb 	bl	8007d80 <HAL_UARTEx_RxEventCallback>
 800820a:	e002      	b.n	8008212 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff fda3 	bl	8007d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e002      	b.n	800821c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	e000      	b.n	800821c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800821a:	2302      	movs	r3, #2
  }
}
 800821c:	4618      	mov	r0, r3
 800821e:	3730      	adds	r7, #48	; 0x30
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008228:	b0c0      	sub	sp, #256	; 0x100
 800822a:	af00      	add	r7, sp, #0
 800822c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	68d9      	ldr	r1, [r3, #12]
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	ea40 0301 	orr.w	r3, r0, r1
 800824c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	431a      	orrs	r2, r3
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	431a      	orrs	r2, r3
 8008264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4313      	orrs	r3, r2
 800826c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800827c:	f021 010c 	bic.w	r1, r1, #12
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800828a:	430b      	orrs	r3, r1
 800828c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800828e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800829a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829e:	6999      	ldr	r1, [r3, #24]
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	ea40 0301 	orr.w	r3, r0, r1
 80082aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b8f      	ldr	r3, [pc, #572]	; (80084f0 <UART_SetConfig+0x2cc>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d005      	beq.n	80082c4 <UART_SetConfig+0xa0>
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b8d      	ldr	r3, [pc, #564]	; (80084f4 <UART_SetConfig+0x2d0>)
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d104      	bne.n	80082ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082c4:	f7fe fbd8 	bl	8006a78 <HAL_RCC_GetPCLK2Freq>
 80082c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082cc:	e003      	b.n	80082d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ce:	f7fe fbbf 	bl	8006a50 <HAL_RCC_GetPCLK1Freq>
 80082d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082e0:	f040 810c 	bne.w	80084fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082f6:	4622      	mov	r2, r4
 80082f8:	462b      	mov	r3, r5
 80082fa:	1891      	adds	r1, r2, r2
 80082fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80082fe:	415b      	adcs	r3, r3
 8008300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008306:	4621      	mov	r1, r4
 8008308:	eb12 0801 	adds.w	r8, r2, r1
 800830c:	4629      	mov	r1, r5
 800830e:	eb43 0901 	adc.w	r9, r3, r1
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	f04f 0300 	mov.w	r3, #0
 800831a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800831e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008326:	4690      	mov	r8, r2
 8008328:	4699      	mov	r9, r3
 800832a:	4623      	mov	r3, r4
 800832c:	eb18 0303 	adds.w	r3, r8, r3
 8008330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008334:	462b      	mov	r3, r5
 8008336:	eb49 0303 	adc.w	r3, r9, r3
 800833a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800834a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800834e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008352:	460b      	mov	r3, r1
 8008354:	18db      	adds	r3, r3, r3
 8008356:	653b      	str	r3, [r7, #80]	; 0x50
 8008358:	4613      	mov	r3, r2
 800835a:	eb42 0303 	adc.w	r3, r2, r3
 800835e:	657b      	str	r3, [r7, #84]	; 0x54
 8008360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008368:	f7f8 fcbe 	bl	8000ce8 <__aeabi_uldivmod>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4b61      	ldr	r3, [pc, #388]	; (80084f8 <UART_SetConfig+0x2d4>)
 8008372:	fba3 2302 	umull	r2, r3, r3, r2
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	011c      	lsls	r4, r3, #4
 800837a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837e:	2200      	movs	r2, #0
 8008380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800838c:	4642      	mov	r2, r8
 800838e:	464b      	mov	r3, r9
 8008390:	1891      	adds	r1, r2, r2
 8008392:	64b9      	str	r1, [r7, #72]	; 0x48
 8008394:	415b      	adcs	r3, r3
 8008396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800839c:	4641      	mov	r1, r8
 800839e:	eb12 0a01 	adds.w	sl, r2, r1
 80083a2:	4649      	mov	r1, r9
 80083a4:	eb43 0b01 	adc.w	fp, r3, r1
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083bc:	4692      	mov	sl, r2
 80083be:	469b      	mov	fp, r3
 80083c0:	4643      	mov	r3, r8
 80083c2:	eb1a 0303 	adds.w	r3, sl, r3
 80083c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ca:	464b      	mov	r3, r9
 80083cc:	eb4b 0303 	adc.w	r3, fp, r3
 80083d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083e8:	460b      	mov	r3, r1
 80083ea:	18db      	adds	r3, r3, r3
 80083ec:	643b      	str	r3, [r7, #64]	; 0x40
 80083ee:	4613      	mov	r3, r2
 80083f0:	eb42 0303 	adc.w	r3, r2, r3
 80083f4:	647b      	str	r3, [r7, #68]	; 0x44
 80083f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083fe:	f7f8 fc73 	bl	8000ce8 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4611      	mov	r1, r2
 8008408:	4b3b      	ldr	r3, [pc, #236]	; (80084f8 <UART_SetConfig+0x2d4>)
 800840a:	fba3 2301 	umull	r2, r3, r3, r1
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	2264      	movs	r2, #100	; 0x64
 8008412:	fb02 f303 	mul.w	r3, r2, r3
 8008416:	1acb      	subs	r3, r1, r3
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800841e:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <UART_SetConfig+0x2d4>)
 8008420:	fba3 2302 	umull	r2, r3, r3, r2
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800842c:	441c      	add	r4, r3
 800842e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008432:	2200      	movs	r2, #0
 8008434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800843c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008440:	4642      	mov	r2, r8
 8008442:	464b      	mov	r3, r9
 8008444:	1891      	adds	r1, r2, r2
 8008446:	63b9      	str	r1, [r7, #56]	; 0x38
 8008448:	415b      	adcs	r3, r3
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800844c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008450:	4641      	mov	r1, r8
 8008452:	1851      	adds	r1, r2, r1
 8008454:	6339      	str	r1, [r7, #48]	; 0x30
 8008456:	4649      	mov	r1, r9
 8008458:	414b      	adcs	r3, r1
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008468:	4659      	mov	r1, fp
 800846a:	00cb      	lsls	r3, r1, #3
 800846c:	4651      	mov	r1, sl
 800846e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008472:	4651      	mov	r1, sl
 8008474:	00ca      	lsls	r2, r1, #3
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	4603      	mov	r3, r0
 800847c:	4642      	mov	r2, r8
 800847e:	189b      	adds	r3, r3, r2
 8008480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008484:	464b      	mov	r3, r9
 8008486:	460a      	mov	r2, r1
 8008488:	eb42 0303 	adc.w	r3, r2, r3
 800848c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800849c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084a4:	460b      	mov	r3, r1
 80084a6:	18db      	adds	r3, r3, r3
 80084a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084aa:	4613      	mov	r3, r2
 80084ac:	eb42 0303 	adc.w	r3, r2, r3
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084ba:	f7f8 fc15 	bl	8000ce8 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <UART_SetConfig+0x2d4>)
 80084c4:	fba3 1302 	umull	r1, r3, r3, r2
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	2164      	movs	r1, #100	; 0x64
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	3332      	adds	r3, #50	; 0x32
 80084d6:	4a08      	ldr	r2, [pc, #32]	; (80084f8 <UART_SetConfig+0x2d4>)
 80084d8:	fba2 2303 	umull	r2, r3, r2, r3
 80084dc:	095b      	lsrs	r3, r3, #5
 80084de:	f003 0207 	and.w	r2, r3, #7
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4422      	add	r2, r4
 80084ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084ec:	e105      	b.n	80086fa <UART_SetConfig+0x4d6>
 80084ee:	bf00      	nop
 80084f0:	40011000 	.word	0x40011000
 80084f4:	40011400 	.word	0x40011400
 80084f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008500:	2200      	movs	r2, #0
 8008502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800850a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800850e:	4642      	mov	r2, r8
 8008510:	464b      	mov	r3, r9
 8008512:	1891      	adds	r1, r2, r2
 8008514:	6239      	str	r1, [r7, #32]
 8008516:	415b      	adcs	r3, r3
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
 800851a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800851e:	4641      	mov	r1, r8
 8008520:	1854      	adds	r4, r2, r1
 8008522:	4649      	mov	r1, r9
 8008524:	eb43 0501 	adc.w	r5, r3, r1
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	00eb      	lsls	r3, r5, #3
 8008532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008536:	00e2      	lsls	r2, r4, #3
 8008538:	4614      	mov	r4, r2
 800853a:	461d      	mov	r5, r3
 800853c:	4643      	mov	r3, r8
 800853e:	18e3      	adds	r3, r4, r3
 8008540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008544:	464b      	mov	r3, r9
 8008546:	eb45 0303 	adc.w	r3, r5, r3
 800854a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800855a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800855e:	f04f 0200 	mov.w	r2, #0
 8008562:	f04f 0300 	mov.w	r3, #0
 8008566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800856a:	4629      	mov	r1, r5
 800856c:	008b      	lsls	r3, r1, #2
 800856e:	4621      	mov	r1, r4
 8008570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008574:	4621      	mov	r1, r4
 8008576:	008a      	lsls	r2, r1, #2
 8008578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800857c:	f7f8 fbb4 	bl	8000ce8 <__aeabi_uldivmod>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4b60      	ldr	r3, [pc, #384]	; (8008708 <UART_SetConfig+0x4e4>)
 8008586:	fba3 2302 	umull	r2, r3, r3, r2
 800858a:	095b      	lsrs	r3, r3, #5
 800858c:	011c      	lsls	r4, r3, #4
 800858e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008592:	2200      	movs	r2, #0
 8008594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800859c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	1891      	adds	r1, r2, r2
 80085a6:	61b9      	str	r1, [r7, #24]
 80085a8:	415b      	adcs	r3, r3
 80085aa:	61fb      	str	r3, [r7, #28]
 80085ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085b0:	4641      	mov	r1, r8
 80085b2:	1851      	adds	r1, r2, r1
 80085b4:	6139      	str	r1, [r7, #16]
 80085b6:	4649      	mov	r1, r9
 80085b8:	414b      	adcs	r3, r1
 80085ba:	617b      	str	r3, [r7, #20]
 80085bc:	f04f 0200 	mov.w	r2, #0
 80085c0:	f04f 0300 	mov.w	r3, #0
 80085c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085c8:	4659      	mov	r1, fp
 80085ca:	00cb      	lsls	r3, r1, #3
 80085cc:	4651      	mov	r1, sl
 80085ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085d2:	4651      	mov	r1, sl
 80085d4:	00ca      	lsls	r2, r1, #3
 80085d6:	4610      	mov	r0, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	4603      	mov	r3, r0
 80085dc:	4642      	mov	r2, r8
 80085de:	189b      	adds	r3, r3, r2
 80085e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e4:	464b      	mov	r3, r9
 80085e6:	460a      	mov	r2, r1
 80085e8:	eb42 0303 	adc.w	r3, r2, r3
 80085ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80085fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008608:	4649      	mov	r1, r9
 800860a:	008b      	lsls	r3, r1, #2
 800860c:	4641      	mov	r1, r8
 800860e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008612:	4641      	mov	r1, r8
 8008614:	008a      	lsls	r2, r1, #2
 8008616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800861a:	f7f8 fb65 	bl	8000ce8 <__aeabi_uldivmod>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4b39      	ldr	r3, [pc, #228]	; (8008708 <UART_SetConfig+0x4e4>)
 8008624:	fba3 1302 	umull	r1, r3, r3, r2
 8008628:	095b      	lsrs	r3, r3, #5
 800862a:	2164      	movs	r1, #100	; 0x64
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	3332      	adds	r3, #50	; 0x32
 8008636:	4a34      	ldr	r2, [pc, #208]	; (8008708 <UART_SetConfig+0x4e4>)
 8008638:	fba2 2303 	umull	r2, r3, r2, r3
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008642:	441c      	add	r4, r3
 8008644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008648:	2200      	movs	r2, #0
 800864a:	673b      	str	r3, [r7, #112]	; 0x70
 800864c:	677a      	str	r2, [r7, #116]	; 0x74
 800864e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008652:	4642      	mov	r2, r8
 8008654:	464b      	mov	r3, r9
 8008656:	1891      	adds	r1, r2, r2
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	415b      	adcs	r3, r3
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008662:	4641      	mov	r1, r8
 8008664:	1851      	adds	r1, r2, r1
 8008666:	6039      	str	r1, [r7, #0]
 8008668:	4649      	mov	r1, r9
 800866a:	414b      	adcs	r3, r1
 800866c:	607b      	str	r3, [r7, #4]
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800867a:	4659      	mov	r1, fp
 800867c:	00cb      	lsls	r3, r1, #3
 800867e:	4651      	mov	r1, sl
 8008680:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008684:	4651      	mov	r1, sl
 8008686:	00ca      	lsls	r2, r1, #3
 8008688:	4610      	mov	r0, r2
 800868a:	4619      	mov	r1, r3
 800868c:	4603      	mov	r3, r0
 800868e:	4642      	mov	r2, r8
 8008690:	189b      	adds	r3, r3, r2
 8008692:	66bb      	str	r3, [r7, #104]	; 0x68
 8008694:	464b      	mov	r3, r9
 8008696:	460a      	mov	r2, r1
 8008698:	eb42 0303 	adc.w	r3, r2, r3
 800869c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	663b      	str	r3, [r7, #96]	; 0x60
 80086a8:	667a      	str	r2, [r7, #100]	; 0x64
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086b6:	4649      	mov	r1, r9
 80086b8:	008b      	lsls	r3, r1, #2
 80086ba:	4641      	mov	r1, r8
 80086bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c0:	4641      	mov	r1, r8
 80086c2:	008a      	lsls	r2, r1, #2
 80086c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086c8:	f7f8 fb0e 	bl	8000ce8 <__aeabi_uldivmod>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <UART_SetConfig+0x4e4>)
 80086d2:	fba3 1302 	umull	r1, r3, r3, r2
 80086d6:	095b      	lsrs	r3, r3, #5
 80086d8:	2164      	movs	r1, #100	; 0x64
 80086da:	fb01 f303 	mul.w	r3, r1, r3
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	3332      	adds	r3, #50	; 0x32
 80086e4:	4a08      	ldr	r2, [pc, #32]	; (8008708 <UART_SetConfig+0x4e4>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	f003 020f 	and.w	r2, r3, #15
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4422      	add	r2, r4
 80086f8:	609a      	str	r2, [r3, #8]
}
 80086fa:	bf00      	nop
 80086fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008700:	46bd      	mov	sp, r7
 8008702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008706:	bf00      	nop
 8008708:	51eb851f 	.word	0x51eb851f

0800870c <atoi>:
 800870c:	220a      	movs	r2, #10
 800870e:	2100      	movs	r1, #0
 8008710:	f001 bf2a 	b.w	800a568 <strtol>

08008714 <__errno>:
 8008714:	4b01      	ldr	r3, [pc, #4]	; (800871c <__errno+0x8>)
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	2000000c 	.word	0x2000000c

08008720 <__libc_init_array>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	4d0d      	ldr	r5, [pc, #52]	; (8008758 <__libc_init_array+0x38>)
 8008724:	4c0d      	ldr	r4, [pc, #52]	; (800875c <__libc_init_array+0x3c>)
 8008726:	1b64      	subs	r4, r4, r5
 8008728:	10a4      	asrs	r4, r4, #2
 800872a:	2600      	movs	r6, #0
 800872c:	42a6      	cmp	r6, r4
 800872e:	d109      	bne.n	8008744 <__libc_init_array+0x24>
 8008730:	4d0b      	ldr	r5, [pc, #44]	; (8008760 <__libc_init_array+0x40>)
 8008732:	4c0c      	ldr	r4, [pc, #48]	; (8008764 <__libc_init_array+0x44>)
 8008734:	f004 fd4c 	bl	800d1d0 <_init>
 8008738:	1b64      	subs	r4, r4, r5
 800873a:	10a4      	asrs	r4, r4, #2
 800873c:	2600      	movs	r6, #0
 800873e:	42a6      	cmp	r6, r4
 8008740:	d105      	bne.n	800874e <__libc_init_array+0x2e>
 8008742:	bd70      	pop	{r4, r5, r6, pc}
 8008744:	f855 3b04 	ldr.w	r3, [r5], #4
 8008748:	4798      	blx	r3
 800874a:	3601      	adds	r6, #1
 800874c:	e7ee      	b.n	800872c <__libc_init_array+0xc>
 800874e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008752:	4798      	blx	r3
 8008754:	3601      	adds	r6, #1
 8008756:	e7f2      	b.n	800873e <__libc_init_array+0x1e>
 8008758:	0800d9a8 	.word	0x0800d9a8
 800875c:	0800d9a8 	.word	0x0800d9a8
 8008760:	0800d9a8 	.word	0x0800d9a8
 8008764:	0800d9ac 	.word	0x0800d9ac

08008768 <malloc>:
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <malloc+0xc>)
 800876a:	4601      	mov	r1, r0
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	f000 b87f 	b.w	8008870 <_malloc_r>
 8008772:	bf00      	nop
 8008774:	2000000c 	.word	0x2000000c

08008778 <free>:
 8008778:	4b02      	ldr	r3, [pc, #8]	; (8008784 <free+0xc>)
 800877a:	4601      	mov	r1, r0
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	f000 b80b 	b.w	8008798 <_free_r>
 8008782:	bf00      	nop
 8008784:	2000000c 	.word	0x2000000c

08008788 <memset>:
 8008788:	4402      	add	r2, r0
 800878a:	4603      	mov	r3, r0
 800878c:	4293      	cmp	r3, r2
 800878e:	d100      	bne.n	8008792 <memset+0xa>
 8008790:	4770      	bx	lr
 8008792:	f803 1b01 	strb.w	r1, [r3], #1
 8008796:	e7f9      	b.n	800878c <memset+0x4>

08008798 <_free_r>:
 8008798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800879a:	2900      	cmp	r1, #0
 800879c:	d044      	beq.n	8008828 <_free_r+0x90>
 800879e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a2:	9001      	str	r0, [sp, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f1a1 0404 	sub.w	r4, r1, #4
 80087aa:	bfb8      	it	lt
 80087ac:	18e4      	addlt	r4, r4, r3
 80087ae:	f003 f923 	bl	800b9f8 <__malloc_lock>
 80087b2:	4a1e      	ldr	r2, [pc, #120]	; (800882c <_free_r+0x94>)
 80087b4:	9801      	ldr	r0, [sp, #4]
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	b933      	cbnz	r3, 80087c8 <_free_r+0x30>
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	6014      	str	r4, [r2, #0]
 80087be:	b003      	add	sp, #12
 80087c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087c4:	f003 b91e 	b.w	800ba04 <__malloc_unlock>
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d908      	bls.n	80087de <_free_r+0x46>
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	1961      	adds	r1, r4, r5
 80087d0:	428b      	cmp	r3, r1
 80087d2:	bf01      	itttt	eq
 80087d4:	6819      	ldreq	r1, [r3, #0]
 80087d6:	685b      	ldreq	r3, [r3, #4]
 80087d8:	1949      	addeq	r1, r1, r5
 80087da:	6021      	streq	r1, [r4, #0]
 80087dc:	e7ed      	b.n	80087ba <_free_r+0x22>
 80087de:	461a      	mov	r2, r3
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b10b      	cbz	r3, 80087e8 <_free_r+0x50>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d9fa      	bls.n	80087de <_free_r+0x46>
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	1855      	adds	r5, r2, r1
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d10b      	bne.n	8008808 <_free_r+0x70>
 80087f0:	6824      	ldr	r4, [r4, #0]
 80087f2:	4421      	add	r1, r4
 80087f4:	1854      	adds	r4, r2, r1
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	d1e0      	bne.n	80087be <_free_r+0x26>
 80087fc:	681c      	ldr	r4, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	4421      	add	r1, r4
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	e7da      	b.n	80087be <_free_r+0x26>
 8008808:	d902      	bls.n	8008810 <_free_r+0x78>
 800880a:	230c      	movs	r3, #12
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	e7d6      	b.n	80087be <_free_r+0x26>
 8008810:	6825      	ldr	r5, [r4, #0]
 8008812:	1961      	adds	r1, r4, r5
 8008814:	428b      	cmp	r3, r1
 8008816:	bf04      	itt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	bf04      	itt	eq
 8008820:	1949      	addeq	r1, r1, r5
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	6054      	str	r4, [r2, #4]
 8008826:	e7ca      	b.n	80087be <_free_r+0x26>
 8008828:	b003      	add	sp, #12
 800882a:	bd30      	pop	{r4, r5, pc}
 800882c:	200005ac 	.word	0x200005ac

08008830 <sbrk_aligned>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	4e0e      	ldr	r6, [pc, #56]	; (800886c <sbrk_aligned+0x3c>)
 8008834:	460c      	mov	r4, r1
 8008836:	6831      	ldr	r1, [r6, #0]
 8008838:	4605      	mov	r5, r0
 800883a:	b911      	cbnz	r1, 8008842 <sbrk_aligned+0x12>
 800883c:	f000 ff06 	bl	800964c <_sbrk_r>
 8008840:	6030      	str	r0, [r6, #0]
 8008842:	4621      	mov	r1, r4
 8008844:	4628      	mov	r0, r5
 8008846:	f000 ff01 	bl	800964c <_sbrk_r>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d00a      	beq.n	8008864 <sbrk_aligned+0x34>
 800884e:	1cc4      	adds	r4, r0, #3
 8008850:	f024 0403 	bic.w	r4, r4, #3
 8008854:	42a0      	cmp	r0, r4
 8008856:	d007      	beq.n	8008868 <sbrk_aligned+0x38>
 8008858:	1a21      	subs	r1, r4, r0
 800885a:	4628      	mov	r0, r5
 800885c:	f000 fef6 	bl	800964c <_sbrk_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d101      	bne.n	8008868 <sbrk_aligned+0x38>
 8008864:	f04f 34ff 	mov.w	r4, #4294967295
 8008868:	4620      	mov	r0, r4
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	200005b0 	.word	0x200005b0

08008870 <_malloc_r>:
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	1ccd      	adds	r5, r1, #3
 8008876:	f025 0503 	bic.w	r5, r5, #3
 800887a:	3508      	adds	r5, #8
 800887c:	2d0c      	cmp	r5, #12
 800887e:	bf38      	it	cc
 8008880:	250c      	movcc	r5, #12
 8008882:	2d00      	cmp	r5, #0
 8008884:	4607      	mov	r7, r0
 8008886:	db01      	blt.n	800888c <_malloc_r+0x1c>
 8008888:	42a9      	cmp	r1, r5
 800888a:	d905      	bls.n	8008898 <_malloc_r+0x28>
 800888c:	230c      	movs	r3, #12
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	2600      	movs	r6, #0
 8008892:	4630      	mov	r0, r6
 8008894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008898:	4e2e      	ldr	r6, [pc, #184]	; (8008954 <_malloc_r+0xe4>)
 800889a:	f003 f8ad 	bl	800b9f8 <__malloc_lock>
 800889e:	6833      	ldr	r3, [r6, #0]
 80088a0:	461c      	mov	r4, r3
 80088a2:	bb34      	cbnz	r4, 80088f2 <_malloc_r+0x82>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4638      	mov	r0, r7
 80088a8:	f7ff ffc2 	bl	8008830 <sbrk_aligned>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	4604      	mov	r4, r0
 80088b0:	d14d      	bne.n	800894e <_malloc_r+0xde>
 80088b2:	6834      	ldr	r4, [r6, #0]
 80088b4:	4626      	mov	r6, r4
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	d140      	bne.n	800893c <_malloc_r+0xcc>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	4631      	mov	r1, r6
 80088be:	4638      	mov	r0, r7
 80088c0:	eb04 0803 	add.w	r8, r4, r3
 80088c4:	f000 fec2 	bl	800964c <_sbrk_r>
 80088c8:	4580      	cmp	r8, r0
 80088ca:	d13a      	bne.n	8008942 <_malloc_r+0xd2>
 80088cc:	6821      	ldr	r1, [r4, #0]
 80088ce:	3503      	adds	r5, #3
 80088d0:	1a6d      	subs	r5, r5, r1
 80088d2:	f025 0503 	bic.w	r5, r5, #3
 80088d6:	3508      	adds	r5, #8
 80088d8:	2d0c      	cmp	r5, #12
 80088da:	bf38      	it	cc
 80088dc:	250c      	movcc	r5, #12
 80088de:	4629      	mov	r1, r5
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ffa5 	bl	8008830 <sbrk_aligned>
 80088e6:	3001      	adds	r0, #1
 80088e8:	d02b      	beq.n	8008942 <_malloc_r+0xd2>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	442b      	add	r3, r5
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	e00e      	b.n	8008910 <_malloc_r+0xa0>
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	1b52      	subs	r2, r2, r5
 80088f6:	d41e      	bmi.n	8008936 <_malloc_r+0xc6>
 80088f8:	2a0b      	cmp	r2, #11
 80088fa:	d916      	bls.n	800892a <_malloc_r+0xba>
 80088fc:	1961      	adds	r1, r4, r5
 80088fe:	42a3      	cmp	r3, r4
 8008900:	6025      	str	r5, [r4, #0]
 8008902:	bf18      	it	ne
 8008904:	6059      	strne	r1, [r3, #4]
 8008906:	6863      	ldr	r3, [r4, #4]
 8008908:	bf08      	it	eq
 800890a:	6031      	streq	r1, [r6, #0]
 800890c:	5162      	str	r2, [r4, r5]
 800890e:	604b      	str	r3, [r1, #4]
 8008910:	4638      	mov	r0, r7
 8008912:	f104 060b 	add.w	r6, r4, #11
 8008916:	f003 f875 	bl	800ba04 <__malloc_unlock>
 800891a:	f026 0607 	bic.w	r6, r6, #7
 800891e:	1d23      	adds	r3, r4, #4
 8008920:	1af2      	subs	r2, r6, r3
 8008922:	d0b6      	beq.n	8008892 <_malloc_r+0x22>
 8008924:	1b9b      	subs	r3, r3, r6
 8008926:	50a3      	str	r3, [r4, r2]
 8008928:	e7b3      	b.n	8008892 <_malloc_r+0x22>
 800892a:	6862      	ldr	r2, [r4, #4]
 800892c:	42a3      	cmp	r3, r4
 800892e:	bf0c      	ite	eq
 8008930:	6032      	streq	r2, [r6, #0]
 8008932:	605a      	strne	r2, [r3, #4]
 8008934:	e7ec      	b.n	8008910 <_malloc_r+0xa0>
 8008936:	4623      	mov	r3, r4
 8008938:	6864      	ldr	r4, [r4, #4]
 800893a:	e7b2      	b.n	80088a2 <_malloc_r+0x32>
 800893c:	4634      	mov	r4, r6
 800893e:	6876      	ldr	r6, [r6, #4]
 8008940:	e7b9      	b.n	80088b6 <_malloc_r+0x46>
 8008942:	230c      	movs	r3, #12
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	4638      	mov	r0, r7
 8008948:	f003 f85c 	bl	800ba04 <__malloc_unlock>
 800894c:	e7a1      	b.n	8008892 <_malloc_r+0x22>
 800894e:	6025      	str	r5, [r4, #0]
 8008950:	e7de      	b.n	8008910 <_malloc_r+0xa0>
 8008952:	bf00      	nop
 8008954:	200005ac 	.word	0x200005ac

08008958 <__cvt>:
 8008958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	ec55 4b10 	vmov	r4, r5, d0
 8008960:	2d00      	cmp	r5, #0
 8008962:	460e      	mov	r6, r1
 8008964:	4619      	mov	r1, r3
 8008966:	462b      	mov	r3, r5
 8008968:	bfbb      	ittet	lt
 800896a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800896e:	461d      	movlt	r5, r3
 8008970:	2300      	movge	r3, #0
 8008972:	232d      	movlt	r3, #45	; 0x2d
 8008974:	700b      	strb	r3, [r1, #0]
 8008976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008978:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800897c:	4691      	mov	r9, r2
 800897e:	f023 0820 	bic.w	r8, r3, #32
 8008982:	bfbc      	itt	lt
 8008984:	4622      	movlt	r2, r4
 8008986:	4614      	movlt	r4, r2
 8008988:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800898c:	d005      	beq.n	800899a <__cvt+0x42>
 800898e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008992:	d100      	bne.n	8008996 <__cvt+0x3e>
 8008994:	3601      	adds	r6, #1
 8008996:	2102      	movs	r1, #2
 8008998:	e000      	b.n	800899c <__cvt+0x44>
 800899a:	2103      	movs	r1, #3
 800899c:	ab03      	add	r3, sp, #12
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	ab02      	add	r3, sp, #8
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	ec45 4b10 	vmov	d0, r4, r5
 80089a8:	4653      	mov	r3, sl
 80089aa:	4632      	mov	r2, r6
 80089ac:	f001 fe90 	bl	800a6d0 <_dtoa_r>
 80089b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80089b4:	4607      	mov	r7, r0
 80089b6:	d102      	bne.n	80089be <__cvt+0x66>
 80089b8:	f019 0f01 	tst.w	r9, #1
 80089bc:	d022      	beq.n	8008a04 <__cvt+0xac>
 80089be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089c2:	eb07 0906 	add.w	r9, r7, r6
 80089c6:	d110      	bne.n	80089ea <__cvt+0x92>
 80089c8:	783b      	ldrb	r3, [r7, #0]
 80089ca:	2b30      	cmp	r3, #48	; 0x30
 80089cc:	d10a      	bne.n	80089e4 <__cvt+0x8c>
 80089ce:	2200      	movs	r2, #0
 80089d0:	2300      	movs	r3, #0
 80089d2:	4620      	mov	r0, r4
 80089d4:	4629      	mov	r1, r5
 80089d6:	f7f8 f8a7 	bl	8000b28 <__aeabi_dcmpeq>
 80089da:	b918      	cbnz	r0, 80089e4 <__cvt+0x8c>
 80089dc:	f1c6 0601 	rsb	r6, r6, #1
 80089e0:	f8ca 6000 	str.w	r6, [sl]
 80089e4:	f8da 3000 	ldr.w	r3, [sl]
 80089e8:	4499      	add	r9, r3
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	4620      	mov	r0, r4
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7f8 f899 	bl	8000b28 <__aeabi_dcmpeq>
 80089f6:	b108      	cbz	r0, 80089fc <__cvt+0xa4>
 80089f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80089fc:	2230      	movs	r2, #48	; 0x30
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	454b      	cmp	r3, r9
 8008a02:	d307      	bcc.n	8008a14 <__cvt+0xbc>
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a08:	1bdb      	subs	r3, r3, r7
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	b004      	add	sp, #16
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	1c59      	adds	r1, r3, #1
 8008a16:	9103      	str	r1, [sp, #12]
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	e7f0      	b.n	80089fe <__cvt+0xa6>

08008a1c <__exponent>:
 8008a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2900      	cmp	r1, #0
 8008a22:	bfb8      	it	lt
 8008a24:	4249      	neglt	r1, r1
 8008a26:	f803 2b02 	strb.w	r2, [r3], #2
 8008a2a:	bfb4      	ite	lt
 8008a2c:	222d      	movlt	r2, #45	; 0x2d
 8008a2e:	222b      	movge	r2, #43	; 0x2b
 8008a30:	2909      	cmp	r1, #9
 8008a32:	7042      	strb	r2, [r0, #1]
 8008a34:	dd2a      	ble.n	8008a8c <__exponent+0x70>
 8008a36:	f10d 0407 	add.w	r4, sp, #7
 8008a3a:	46a4      	mov	ip, r4
 8008a3c:	270a      	movs	r7, #10
 8008a3e:	46a6      	mov	lr, r4
 8008a40:	460a      	mov	r2, r1
 8008a42:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a46:	fb07 1516 	mls	r5, r7, r6, r1
 8008a4a:	3530      	adds	r5, #48	; 0x30
 8008a4c:	2a63      	cmp	r2, #99	; 0x63
 8008a4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a56:	4631      	mov	r1, r6
 8008a58:	dcf1      	bgt.n	8008a3e <__exponent+0x22>
 8008a5a:	3130      	adds	r1, #48	; 0x30
 8008a5c:	f1ae 0502 	sub.w	r5, lr, #2
 8008a60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a64:	1c44      	adds	r4, r0, #1
 8008a66:	4629      	mov	r1, r5
 8008a68:	4561      	cmp	r1, ip
 8008a6a:	d30a      	bcc.n	8008a82 <__exponent+0x66>
 8008a6c:	f10d 0209 	add.w	r2, sp, #9
 8008a70:	eba2 020e 	sub.w	r2, r2, lr
 8008a74:	4565      	cmp	r5, ip
 8008a76:	bf88      	it	hi
 8008a78:	2200      	movhi	r2, #0
 8008a7a:	4413      	add	r3, r2
 8008a7c:	1a18      	subs	r0, r3, r0
 8008a7e:	b003      	add	sp, #12
 8008a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008a8a:	e7ed      	b.n	8008a68 <__exponent+0x4c>
 8008a8c:	2330      	movs	r3, #48	; 0x30
 8008a8e:	3130      	adds	r1, #48	; 0x30
 8008a90:	7083      	strb	r3, [r0, #2]
 8008a92:	70c1      	strb	r1, [r0, #3]
 8008a94:	1d03      	adds	r3, r0, #4
 8008a96:	e7f1      	b.n	8008a7c <__exponent+0x60>

08008a98 <_printf_float>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	ed2d 8b02 	vpush	{d8}
 8008aa0:	b08d      	sub	sp, #52	; 0x34
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	461f      	mov	r7, r3
 8008aac:	4605      	mov	r5, r0
 8008aae:	f002 ff7f 	bl	800b9b0 <_localeconv_r>
 8008ab2:	f8d0 a000 	ldr.w	sl, [r0]
 8008ab6:	4650      	mov	r0, sl
 8008ab8:	f7f7 fbb4 	bl	8000224 <strlen>
 8008abc:	2300      	movs	r3, #0
 8008abe:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008acc:	3307      	adds	r3, #7
 8008ace:	f023 0307 	bic.w	r3, r3, #7
 8008ad2:	f103 0208 	add.w	r2, r3, #8
 8008ad6:	f8c8 2000 	str.w	r2, [r8]
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ae2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ae6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008aea:	9307      	str	r3, [sp, #28]
 8008aec:	f8cd 8018 	str.w	r8, [sp, #24]
 8008af0:	ee08 0a10 	vmov	s16, r0
 8008af4:	4b9f      	ldr	r3, [pc, #636]	; (8008d74 <_printf_float+0x2dc>)
 8008af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295
 8008afe:	f7f8 f845 	bl	8000b8c <__aeabi_dcmpun>
 8008b02:	bb88      	cbnz	r0, 8008b68 <_printf_float+0xd0>
 8008b04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b08:	4b9a      	ldr	r3, [pc, #616]	; (8008d74 <_printf_float+0x2dc>)
 8008b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0e:	f7f8 f81f 	bl	8000b50 <__aeabi_dcmple>
 8008b12:	bb48      	cbnz	r0, 8008b68 <_printf_float+0xd0>
 8008b14:	2200      	movs	r2, #0
 8008b16:	2300      	movs	r3, #0
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f7f8 f80e 	bl	8000b3c <__aeabi_dcmplt>
 8008b20:	b110      	cbz	r0, 8008b28 <_printf_float+0x90>
 8008b22:	232d      	movs	r3, #45	; 0x2d
 8008b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b28:	4b93      	ldr	r3, [pc, #588]	; (8008d78 <_printf_float+0x2e0>)
 8008b2a:	4894      	ldr	r0, [pc, #592]	; (8008d7c <_printf_float+0x2e4>)
 8008b2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b30:	bf94      	ite	ls
 8008b32:	4698      	movls	r8, r3
 8008b34:	4680      	movhi	r8, r0
 8008b36:	2303      	movs	r3, #3
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	f023 0204 	bic.w	r2, r3, #4
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	f04f 0900 	mov.w	r9, #0
 8008b46:	9700      	str	r7, [sp, #0]
 8008b48:	4633      	mov	r3, r6
 8008b4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f000 f9d8 	bl	8008f04 <_printf_common>
 8008b54:	3001      	adds	r0, #1
 8008b56:	f040 8090 	bne.w	8008c7a <_printf_float+0x1e2>
 8008b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5e:	b00d      	add	sp, #52	; 0x34
 8008b60:	ecbd 8b02 	vpop	{d8}
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	4642      	mov	r2, r8
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f8 f80c 	bl	8000b8c <__aeabi_dcmpun>
 8008b74:	b140      	cbz	r0, 8008b88 <_printf_float+0xf0>
 8008b76:	464b      	mov	r3, r9
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfbc      	itt	lt
 8008b7c:	232d      	movlt	r3, #45	; 0x2d
 8008b7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008b82:	487f      	ldr	r0, [pc, #508]	; (8008d80 <_printf_float+0x2e8>)
 8008b84:	4b7f      	ldr	r3, [pc, #508]	; (8008d84 <_printf_float+0x2ec>)
 8008b86:	e7d1      	b.n	8008b2c <_printf_float+0x94>
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008b8e:	9206      	str	r2, [sp, #24]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	d13f      	bne.n	8008c14 <_printf_float+0x17c>
 8008b94:	2306      	movs	r3, #6
 8008b96:	6063      	str	r3, [r4, #4]
 8008b98:	9b05      	ldr	r3, [sp, #20]
 8008b9a:	6861      	ldr	r1, [r4, #4]
 8008b9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9303      	str	r3, [sp, #12]
 8008ba4:	ab0a      	add	r3, sp, #40	; 0x28
 8008ba6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008baa:	ab09      	add	r3, sp, #36	; 0x24
 8008bac:	ec49 8b10 	vmov	d0, r8, r9
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	6022      	str	r2, [r4, #0]
 8008bb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f7ff fecd 	bl	8008958 <__cvt>
 8008bbe:	9b06      	ldr	r3, [sp, #24]
 8008bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bc2:	2b47      	cmp	r3, #71	; 0x47
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	d108      	bne.n	8008bda <_printf_float+0x142>
 8008bc8:	1cc8      	adds	r0, r1, #3
 8008bca:	db02      	blt.n	8008bd2 <_printf_float+0x13a>
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	4299      	cmp	r1, r3
 8008bd0:	dd41      	ble.n	8008c56 <_printf_float+0x1be>
 8008bd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008bd6:	fa5f fb8b 	uxtb.w	fp, fp
 8008bda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bde:	d820      	bhi.n	8008c22 <_printf_float+0x18a>
 8008be0:	3901      	subs	r1, #1
 8008be2:	465a      	mov	r2, fp
 8008be4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008be8:	9109      	str	r1, [sp, #36]	; 0x24
 8008bea:	f7ff ff17 	bl	8008a1c <__exponent>
 8008bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bf0:	1813      	adds	r3, r2, r0
 8008bf2:	2a01      	cmp	r2, #1
 8008bf4:	4681      	mov	r9, r0
 8008bf6:	6123      	str	r3, [r4, #16]
 8008bf8:	dc02      	bgt.n	8008c00 <_printf_float+0x168>
 8008bfa:	6822      	ldr	r2, [r4, #0]
 8008bfc:	07d2      	lsls	r2, r2, #31
 8008bfe:	d501      	bpl.n	8008c04 <_printf_float+0x16c>
 8008c00:	3301      	adds	r3, #1
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d09c      	beq.n	8008b46 <_printf_float+0xae>
 8008c0c:	232d      	movs	r3, #45	; 0x2d
 8008c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c12:	e798      	b.n	8008b46 <_printf_float+0xae>
 8008c14:	9a06      	ldr	r2, [sp, #24]
 8008c16:	2a47      	cmp	r2, #71	; 0x47
 8008c18:	d1be      	bne.n	8008b98 <_printf_float+0x100>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1bc      	bne.n	8008b98 <_printf_float+0x100>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e7b9      	b.n	8008b96 <_printf_float+0xfe>
 8008c22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c26:	d118      	bne.n	8008c5a <_printf_float+0x1c2>
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	6863      	ldr	r3, [r4, #4]
 8008c2c:	dd0b      	ble.n	8008c46 <_printf_float+0x1ae>
 8008c2e:	6121      	str	r1, [r4, #16]
 8008c30:	b913      	cbnz	r3, 8008c38 <_printf_float+0x1a0>
 8008c32:	6822      	ldr	r2, [r4, #0]
 8008c34:	07d0      	lsls	r0, r2, #31
 8008c36:	d502      	bpl.n	8008c3e <_printf_float+0x1a6>
 8008c38:	3301      	adds	r3, #1
 8008c3a:	440b      	add	r3, r1
 8008c3c:	6123      	str	r3, [r4, #16]
 8008c3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c40:	f04f 0900 	mov.w	r9, #0
 8008c44:	e7de      	b.n	8008c04 <_printf_float+0x16c>
 8008c46:	b913      	cbnz	r3, 8008c4e <_printf_float+0x1b6>
 8008c48:	6822      	ldr	r2, [r4, #0]
 8008c4a:	07d2      	lsls	r2, r2, #31
 8008c4c:	d501      	bpl.n	8008c52 <_printf_float+0x1ba>
 8008c4e:	3302      	adds	r3, #2
 8008c50:	e7f4      	b.n	8008c3c <_printf_float+0x1a4>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e7f2      	b.n	8008c3c <_printf_float+0x1a4>
 8008c56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c5c:	4299      	cmp	r1, r3
 8008c5e:	db05      	blt.n	8008c6c <_printf_float+0x1d4>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	6121      	str	r1, [r4, #16]
 8008c64:	07d8      	lsls	r0, r3, #31
 8008c66:	d5ea      	bpl.n	8008c3e <_printf_float+0x1a6>
 8008c68:	1c4b      	adds	r3, r1, #1
 8008c6a:	e7e7      	b.n	8008c3c <_printf_float+0x1a4>
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	bfd4      	ite	le
 8008c70:	f1c1 0202 	rsble	r2, r1, #2
 8008c74:	2201      	movgt	r2, #1
 8008c76:	4413      	add	r3, r2
 8008c78:	e7e0      	b.n	8008c3c <_printf_float+0x1a4>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	055a      	lsls	r2, r3, #21
 8008c7e:	d407      	bmi.n	8008c90 <_printf_float+0x1f8>
 8008c80:	6923      	ldr	r3, [r4, #16]
 8008c82:	4642      	mov	r2, r8
 8008c84:	4631      	mov	r1, r6
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b8      	blx	r7
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d12c      	bne.n	8008ce8 <_printf_float+0x250>
 8008c8e:	e764      	b.n	8008b5a <_printf_float+0xc2>
 8008c90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c94:	f240 80e0 	bls.w	8008e58 <_printf_float+0x3c0>
 8008c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f7f7 ff42 	bl	8000b28 <__aeabi_dcmpeq>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d034      	beq.n	8008d12 <_printf_float+0x27a>
 8008ca8:	4a37      	ldr	r2, [pc, #220]	; (8008d88 <_printf_float+0x2f0>)
 8008caa:	2301      	movs	r3, #1
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f af51 	beq.w	8008b5a <_printf_float+0xc2>
 8008cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	db02      	blt.n	8008cc6 <_printf_float+0x22e>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	07d8      	lsls	r0, r3, #31
 8008cc4:	d510      	bpl.n	8008ce8 <_printf_float+0x250>
 8008cc6:	ee18 3a10 	vmov	r3, s16
 8008cca:	4652      	mov	r2, sl
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b8      	blx	r7
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	f43f af41 	beq.w	8008b5a <_printf_float+0xc2>
 8008cd8:	f04f 0800 	mov.w	r8, #0
 8008cdc:	f104 091a 	add.w	r9, r4, #26
 8008ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	4543      	cmp	r3, r8
 8008ce6:	dc09      	bgt.n	8008cfc <_printf_float+0x264>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	079b      	lsls	r3, r3, #30
 8008cec:	f100 8105 	bmi.w	8008efa <_printf_float+0x462>
 8008cf0:	68e0      	ldr	r0, [r4, #12]
 8008cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cf4:	4298      	cmp	r0, r3
 8008cf6:	bfb8      	it	lt
 8008cf8:	4618      	movlt	r0, r3
 8008cfa:	e730      	b.n	8008b5e <_printf_float+0xc6>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	464a      	mov	r2, r9
 8008d00:	4631      	mov	r1, r6
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b8      	blx	r7
 8008d06:	3001      	adds	r0, #1
 8008d08:	f43f af27 	beq.w	8008b5a <_printf_float+0xc2>
 8008d0c:	f108 0801 	add.w	r8, r8, #1
 8008d10:	e7e6      	b.n	8008ce0 <_printf_float+0x248>
 8008d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dc39      	bgt.n	8008d8c <_printf_float+0x2f4>
 8008d18:	4a1b      	ldr	r2, [pc, #108]	; (8008d88 <_printf_float+0x2f0>)
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f af19 	beq.w	8008b5a <_printf_float+0xc2>
 8008d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	d102      	bne.n	8008d36 <_printf_float+0x29e>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	07d9      	lsls	r1, r3, #31
 8008d34:	d5d8      	bpl.n	8008ce8 <_printf_float+0x250>
 8008d36:	ee18 3a10 	vmov	r3, s16
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f af09 	beq.w	8008b5a <_printf_float+0xc2>
 8008d48:	f04f 0900 	mov.w	r9, #0
 8008d4c:	f104 0a1a 	add.w	sl, r4, #26
 8008d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d52:	425b      	negs	r3, r3
 8008d54:	454b      	cmp	r3, r9
 8008d56:	dc01      	bgt.n	8008d5c <_printf_float+0x2c4>
 8008d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5a:	e792      	b.n	8008c82 <_printf_float+0x1ea>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	4652      	mov	r2, sl
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	f43f aef7 	beq.w	8008b5a <_printf_float+0xc2>
 8008d6c:	f109 0901 	add.w	r9, r9, #1
 8008d70:	e7ee      	b.n	8008d50 <_printf_float+0x2b8>
 8008d72:	bf00      	nop
 8008d74:	7fefffff 	.word	0x7fefffff
 8008d78:	0800d5a4 	.word	0x0800d5a4
 8008d7c:	0800d5a8 	.word	0x0800d5a8
 8008d80:	0800d5b0 	.word	0x0800d5b0
 8008d84:	0800d5ac 	.word	0x0800d5ac
 8008d88:	0800d5b4 	.word	0x0800d5b4
 8008d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d90:	429a      	cmp	r2, r3
 8008d92:	bfa8      	it	ge
 8008d94:	461a      	movge	r2, r3
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	4691      	mov	r9, r2
 8008d9a:	dc37      	bgt.n	8008e0c <_printf_float+0x374>
 8008d9c:	f04f 0b00 	mov.w	fp, #0
 8008da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008da4:	f104 021a 	add.w	r2, r4, #26
 8008da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008daa:	9305      	str	r3, [sp, #20]
 8008dac:	eba3 0309 	sub.w	r3, r3, r9
 8008db0:	455b      	cmp	r3, fp
 8008db2:	dc33      	bgt.n	8008e1c <_printf_float+0x384>
 8008db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008db8:	429a      	cmp	r2, r3
 8008dba:	db3b      	blt.n	8008e34 <_printf_float+0x39c>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	07da      	lsls	r2, r3, #31
 8008dc0:	d438      	bmi.n	8008e34 <_printf_float+0x39c>
 8008dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc4:	9a05      	ldr	r2, [sp, #20]
 8008dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dc8:	1a9a      	subs	r2, r3, r2
 8008dca:	eba3 0901 	sub.w	r9, r3, r1
 8008dce:	4591      	cmp	r9, r2
 8008dd0:	bfa8      	it	ge
 8008dd2:	4691      	movge	r9, r2
 8008dd4:	f1b9 0f00 	cmp.w	r9, #0
 8008dd8:	dc35      	bgt.n	8008e46 <_printf_float+0x3ae>
 8008dda:	f04f 0800 	mov.w	r8, #0
 8008dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008de2:	f104 0a1a 	add.w	sl, r4, #26
 8008de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	eba3 0309 	sub.w	r3, r3, r9
 8008df0:	4543      	cmp	r3, r8
 8008df2:	f77f af79 	ble.w	8008ce8 <_printf_float+0x250>
 8008df6:	2301      	movs	r3, #1
 8008df8:	4652      	mov	r2, sl
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b8      	blx	r7
 8008e00:	3001      	adds	r0, #1
 8008e02:	f43f aeaa 	beq.w	8008b5a <_printf_float+0xc2>
 8008e06:	f108 0801 	add.w	r8, r8, #1
 8008e0a:	e7ec      	b.n	8008de6 <_printf_float+0x34e>
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4642      	mov	r2, r8
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	d1c0      	bne.n	8008d9c <_printf_float+0x304>
 8008e1a:	e69e      	b.n	8008b5a <_printf_float+0xc2>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4631      	mov	r1, r6
 8008e20:	4628      	mov	r0, r5
 8008e22:	9205      	str	r2, [sp, #20]
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f ae97 	beq.w	8008b5a <_printf_float+0xc2>
 8008e2c:	9a05      	ldr	r2, [sp, #20]
 8008e2e:	f10b 0b01 	add.w	fp, fp, #1
 8008e32:	e7b9      	b.n	8008da8 <_printf_float+0x310>
 8008e34:	ee18 3a10 	vmov	r3, s16
 8008e38:	4652      	mov	r2, sl
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b8      	blx	r7
 8008e40:	3001      	adds	r0, #1
 8008e42:	d1be      	bne.n	8008dc2 <_printf_float+0x32a>
 8008e44:	e689      	b.n	8008b5a <_printf_float+0xc2>
 8008e46:	9a05      	ldr	r2, [sp, #20]
 8008e48:	464b      	mov	r3, r9
 8008e4a:	4442      	add	r2, r8
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b8      	blx	r7
 8008e52:	3001      	adds	r0, #1
 8008e54:	d1c1      	bne.n	8008dda <_printf_float+0x342>
 8008e56:	e680      	b.n	8008b5a <_printf_float+0xc2>
 8008e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e5a:	2a01      	cmp	r2, #1
 8008e5c:	dc01      	bgt.n	8008e62 <_printf_float+0x3ca>
 8008e5e:	07db      	lsls	r3, r3, #31
 8008e60:	d538      	bpl.n	8008ed4 <_printf_float+0x43c>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4642      	mov	r2, r8
 8008e66:	4631      	mov	r1, r6
 8008e68:	4628      	mov	r0, r5
 8008e6a:	47b8      	blx	r7
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	f43f ae74 	beq.w	8008b5a <_printf_float+0xc2>
 8008e72:	ee18 3a10 	vmov	r3, s16
 8008e76:	4652      	mov	r2, sl
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f ae6b 	beq.w	8008b5a <_printf_float+0xc2>
 8008e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f7f7 fe4c 	bl	8000b28 <__aeabi_dcmpeq>
 8008e90:	b9d8      	cbnz	r0, 8008eca <_printf_float+0x432>
 8008e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e94:	f108 0201 	add.w	r2, r8, #1
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	47b8      	blx	r7
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d10e      	bne.n	8008ec2 <_printf_float+0x42a>
 8008ea4:	e659      	b.n	8008b5a <_printf_float+0xc2>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4652      	mov	r2, sl
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f43f ae52 	beq.w	8008b5a <_printf_float+0xc2>
 8008eb6:	f108 0801 	add.w	r8, r8, #1
 8008eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	4543      	cmp	r3, r8
 8008ec0:	dcf1      	bgt.n	8008ea6 <_printf_float+0x40e>
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ec8:	e6dc      	b.n	8008c84 <_printf_float+0x1ec>
 8008eca:	f04f 0800 	mov.w	r8, #0
 8008ece:	f104 0a1a 	add.w	sl, r4, #26
 8008ed2:	e7f2      	b.n	8008eba <_printf_float+0x422>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	e7df      	b.n	8008e9a <_printf_float+0x402>
 8008eda:	2301      	movs	r3, #1
 8008edc:	464a      	mov	r2, r9
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f ae38 	beq.w	8008b5a <_printf_float+0xc2>
 8008eea:	f108 0801 	add.w	r8, r8, #1
 8008eee:	68e3      	ldr	r3, [r4, #12]
 8008ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ef2:	1a5b      	subs	r3, r3, r1
 8008ef4:	4543      	cmp	r3, r8
 8008ef6:	dcf0      	bgt.n	8008eda <_printf_float+0x442>
 8008ef8:	e6fa      	b.n	8008cf0 <_printf_float+0x258>
 8008efa:	f04f 0800 	mov.w	r8, #0
 8008efe:	f104 0919 	add.w	r9, r4, #25
 8008f02:	e7f4      	b.n	8008eee <_printf_float+0x456>

08008f04 <_printf_common>:
 8008f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	4616      	mov	r6, r2
 8008f0a:	4699      	mov	r9, r3
 8008f0c:	688a      	ldr	r2, [r1, #8]
 8008f0e:	690b      	ldr	r3, [r1, #16]
 8008f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f14:	4293      	cmp	r3, r2
 8008f16:	bfb8      	it	lt
 8008f18:	4613      	movlt	r3, r2
 8008f1a:	6033      	str	r3, [r6, #0]
 8008f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f20:	4607      	mov	r7, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	b10a      	cbz	r2, 8008f2a <_printf_common+0x26>
 8008f26:	3301      	adds	r3, #1
 8008f28:	6033      	str	r3, [r6, #0]
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	0699      	lsls	r1, r3, #26
 8008f2e:	bf42      	ittt	mi
 8008f30:	6833      	ldrmi	r3, [r6, #0]
 8008f32:	3302      	addmi	r3, #2
 8008f34:	6033      	strmi	r3, [r6, #0]
 8008f36:	6825      	ldr	r5, [r4, #0]
 8008f38:	f015 0506 	ands.w	r5, r5, #6
 8008f3c:	d106      	bne.n	8008f4c <_printf_common+0x48>
 8008f3e:	f104 0a19 	add.w	sl, r4, #25
 8008f42:	68e3      	ldr	r3, [r4, #12]
 8008f44:	6832      	ldr	r2, [r6, #0]
 8008f46:	1a9b      	subs	r3, r3, r2
 8008f48:	42ab      	cmp	r3, r5
 8008f4a:	dc26      	bgt.n	8008f9a <_printf_common+0x96>
 8008f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f50:	1e13      	subs	r3, r2, #0
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	bf18      	it	ne
 8008f56:	2301      	movne	r3, #1
 8008f58:	0692      	lsls	r2, r2, #26
 8008f5a:	d42b      	bmi.n	8008fb4 <_printf_common+0xb0>
 8008f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f60:	4649      	mov	r1, r9
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c0      	blx	r8
 8008f66:	3001      	adds	r0, #1
 8008f68:	d01e      	beq.n	8008fa8 <_printf_common+0xa4>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	68e5      	ldr	r5, [r4, #12]
 8008f6e:	6832      	ldr	r2, [r6, #0]
 8008f70:	f003 0306 	and.w	r3, r3, #6
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	bf08      	it	eq
 8008f78:	1aad      	subeq	r5, r5, r2
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	6922      	ldr	r2, [r4, #16]
 8008f7e:	bf0c      	ite	eq
 8008f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f84:	2500      	movne	r5, #0
 8008f86:	4293      	cmp	r3, r2
 8008f88:	bfc4      	itt	gt
 8008f8a:	1a9b      	subgt	r3, r3, r2
 8008f8c:	18ed      	addgt	r5, r5, r3
 8008f8e:	2600      	movs	r6, #0
 8008f90:	341a      	adds	r4, #26
 8008f92:	42b5      	cmp	r5, r6
 8008f94:	d11a      	bne.n	8008fcc <_printf_common+0xc8>
 8008f96:	2000      	movs	r0, #0
 8008f98:	e008      	b.n	8008fac <_printf_common+0xa8>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4652      	mov	r2, sl
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	47c0      	blx	r8
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d103      	bne.n	8008fb0 <_printf_common+0xac>
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb0:	3501      	adds	r5, #1
 8008fb2:	e7c6      	b.n	8008f42 <_printf_common+0x3e>
 8008fb4:	18e1      	adds	r1, r4, r3
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	2030      	movs	r0, #48	; 0x30
 8008fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fbe:	4422      	add	r2, r4
 8008fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fc8:	3302      	adds	r3, #2
 8008fca:	e7c7      	b.n	8008f5c <_printf_common+0x58>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	4622      	mov	r2, r4
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	47c0      	blx	r8
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	d0e6      	beq.n	8008fa8 <_printf_common+0xa4>
 8008fda:	3601      	adds	r6, #1
 8008fdc:	e7d9      	b.n	8008f92 <_printf_common+0x8e>
	...

08008fe0 <_printf_i>:
 8008fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe4:	7e0f      	ldrb	r7, [r1, #24]
 8008fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fe8:	2f78      	cmp	r7, #120	; 0x78
 8008fea:	4691      	mov	r9, r2
 8008fec:	4680      	mov	r8, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	469a      	mov	sl, r3
 8008ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ff6:	d807      	bhi.n	8009008 <_printf_i+0x28>
 8008ff8:	2f62      	cmp	r7, #98	; 0x62
 8008ffa:	d80a      	bhi.n	8009012 <_printf_i+0x32>
 8008ffc:	2f00      	cmp	r7, #0
 8008ffe:	f000 80d8 	beq.w	80091b2 <_printf_i+0x1d2>
 8009002:	2f58      	cmp	r7, #88	; 0x58
 8009004:	f000 80a3 	beq.w	800914e <_printf_i+0x16e>
 8009008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800900c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009010:	e03a      	b.n	8009088 <_printf_i+0xa8>
 8009012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009016:	2b15      	cmp	r3, #21
 8009018:	d8f6      	bhi.n	8009008 <_printf_i+0x28>
 800901a:	a101      	add	r1, pc, #4	; (adr r1, 8009020 <_printf_i+0x40>)
 800901c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009020:	08009079 	.word	0x08009079
 8009024:	0800908d 	.word	0x0800908d
 8009028:	08009009 	.word	0x08009009
 800902c:	08009009 	.word	0x08009009
 8009030:	08009009 	.word	0x08009009
 8009034:	08009009 	.word	0x08009009
 8009038:	0800908d 	.word	0x0800908d
 800903c:	08009009 	.word	0x08009009
 8009040:	08009009 	.word	0x08009009
 8009044:	08009009 	.word	0x08009009
 8009048:	08009009 	.word	0x08009009
 800904c:	08009199 	.word	0x08009199
 8009050:	080090bd 	.word	0x080090bd
 8009054:	0800917b 	.word	0x0800917b
 8009058:	08009009 	.word	0x08009009
 800905c:	08009009 	.word	0x08009009
 8009060:	080091bb 	.word	0x080091bb
 8009064:	08009009 	.word	0x08009009
 8009068:	080090bd 	.word	0x080090bd
 800906c:	08009009 	.word	0x08009009
 8009070:	08009009 	.word	0x08009009
 8009074:	08009183 	.word	0x08009183
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	1d1a      	adds	r2, r3, #4
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	602a      	str	r2, [r5, #0]
 8009080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009088:	2301      	movs	r3, #1
 800908a:	e0a3      	b.n	80091d4 <_printf_i+0x1f4>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	6829      	ldr	r1, [r5, #0]
 8009090:	0606      	lsls	r6, r0, #24
 8009092:	f101 0304 	add.w	r3, r1, #4
 8009096:	d50a      	bpl.n	80090ae <_printf_i+0xce>
 8009098:	680e      	ldr	r6, [r1, #0]
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	2e00      	cmp	r6, #0
 800909e:	da03      	bge.n	80090a8 <_printf_i+0xc8>
 80090a0:	232d      	movs	r3, #45	; 0x2d
 80090a2:	4276      	negs	r6, r6
 80090a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a8:	485e      	ldr	r0, [pc, #376]	; (8009224 <_printf_i+0x244>)
 80090aa:	230a      	movs	r3, #10
 80090ac:	e019      	b.n	80090e2 <_printf_i+0x102>
 80090ae:	680e      	ldr	r6, [r1, #0]
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090b6:	bf18      	it	ne
 80090b8:	b236      	sxthne	r6, r6
 80090ba:	e7ef      	b.n	800909c <_printf_i+0xbc>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	6820      	ldr	r0, [r4, #0]
 80090c0:	1d19      	adds	r1, r3, #4
 80090c2:	6029      	str	r1, [r5, #0]
 80090c4:	0601      	lsls	r1, r0, #24
 80090c6:	d501      	bpl.n	80090cc <_printf_i+0xec>
 80090c8:	681e      	ldr	r6, [r3, #0]
 80090ca:	e002      	b.n	80090d2 <_printf_i+0xf2>
 80090cc:	0646      	lsls	r6, r0, #25
 80090ce:	d5fb      	bpl.n	80090c8 <_printf_i+0xe8>
 80090d0:	881e      	ldrh	r6, [r3, #0]
 80090d2:	4854      	ldr	r0, [pc, #336]	; (8009224 <_printf_i+0x244>)
 80090d4:	2f6f      	cmp	r7, #111	; 0x6f
 80090d6:	bf0c      	ite	eq
 80090d8:	2308      	moveq	r3, #8
 80090da:	230a      	movne	r3, #10
 80090dc:	2100      	movs	r1, #0
 80090de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090e2:	6865      	ldr	r5, [r4, #4]
 80090e4:	60a5      	str	r5, [r4, #8]
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	bfa2      	ittt	ge
 80090ea:	6821      	ldrge	r1, [r4, #0]
 80090ec:	f021 0104 	bicge.w	r1, r1, #4
 80090f0:	6021      	strge	r1, [r4, #0]
 80090f2:	b90e      	cbnz	r6, 80090f8 <_printf_i+0x118>
 80090f4:	2d00      	cmp	r5, #0
 80090f6:	d04d      	beq.n	8009194 <_printf_i+0x1b4>
 80090f8:	4615      	mov	r5, r2
 80090fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80090fe:	fb03 6711 	mls	r7, r3, r1, r6
 8009102:	5dc7      	ldrb	r7, [r0, r7]
 8009104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009108:	4637      	mov	r7, r6
 800910a:	42bb      	cmp	r3, r7
 800910c:	460e      	mov	r6, r1
 800910e:	d9f4      	bls.n	80090fa <_printf_i+0x11a>
 8009110:	2b08      	cmp	r3, #8
 8009112:	d10b      	bne.n	800912c <_printf_i+0x14c>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	07de      	lsls	r6, r3, #31
 8009118:	d508      	bpl.n	800912c <_printf_i+0x14c>
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	6861      	ldr	r1, [r4, #4]
 800911e:	4299      	cmp	r1, r3
 8009120:	bfde      	ittt	le
 8009122:	2330      	movle	r3, #48	; 0x30
 8009124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800912c:	1b52      	subs	r2, r2, r5
 800912e:	6122      	str	r2, [r4, #16]
 8009130:	f8cd a000 	str.w	sl, [sp]
 8009134:	464b      	mov	r3, r9
 8009136:	aa03      	add	r2, sp, #12
 8009138:	4621      	mov	r1, r4
 800913a:	4640      	mov	r0, r8
 800913c:	f7ff fee2 	bl	8008f04 <_printf_common>
 8009140:	3001      	adds	r0, #1
 8009142:	d14c      	bne.n	80091de <_printf_i+0x1fe>
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	b004      	add	sp, #16
 800914a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914e:	4835      	ldr	r0, [pc, #212]	; (8009224 <_printf_i+0x244>)
 8009150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009154:	6829      	ldr	r1, [r5, #0]
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	f851 6b04 	ldr.w	r6, [r1], #4
 800915c:	6029      	str	r1, [r5, #0]
 800915e:	061d      	lsls	r5, r3, #24
 8009160:	d514      	bpl.n	800918c <_printf_i+0x1ac>
 8009162:	07df      	lsls	r7, r3, #31
 8009164:	bf44      	itt	mi
 8009166:	f043 0320 	orrmi.w	r3, r3, #32
 800916a:	6023      	strmi	r3, [r4, #0]
 800916c:	b91e      	cbnz	r6, 8009176 <_printf_i+0x196>
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	f023 0320 	bic.w	r3, r3, #32
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	2310      	movs	r3, #16
 8009178:	e7b0      	b.n	80090dc <_printf_i+0xfc>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	f043 0320 	orr.w	r3, r3, #32
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	2378      	movs	r3, #120	; 0x78
 8009184:	4828      	ldr	r0, [pc, #160]	; (8009228 <_printf_i+0x248>)
 8009186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800918a:	e7e3      	b.n	8009154 <_printf_i+0x174>
 800918c:	0659      	lsls	r1, r3, #25
 800918e:	bf48      	it	mi
 8009190:	b2b6      	uxthmi	r6, r6
 8009192:	e7e6      	b.n	8009162 <_printf_i+0x182>
 8009194:	4615      	mov	r5, r2
 8009196:	e7bb      	b.n	8009110 <_printf_i+0x130>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	6826      	ldr	r6, [r4, #0]
 800919c:	6961      	ldr	r1, [r4, #20]
 800919e:	1d18      	adds	r0, r3, #4
 80091a0:	6028      	str	r0, [r5, #0]
 80091a2:	0635      	lsls	r5, r6, #24
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	d501      	bpl.n	80091ac <_printf_i+0x1cc>
 80091a8:	6019      	str	r1, [r3, #0]
 80091aa:	e002      	b.n	80091b2 <_printf_i+0x1d2>
 80091ac:	0670      	lsls	r0, r6, #25
 80091ae:	d5fb      	bpl.n	80091a8 <_printf_i+0x1c8>
 80091b0:	8019      	strh	r1, [r3, #0]
 80091b2:	2300      	movs	r3, #0
 80091b4:	6123      	str	r3, [r4, #16]
 80091b6:	4615      	mov	r5, r2
 80091b8:	e7ba      	b.n	8009130 <_printf_i+0x150>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	1d1a      	adds	r2, r3, #4
 80091be:	602a      	str	r2, [r5, #0]
 80091c0:	681d      	ldr	r5, [r3, #0]
 80091c2:	6862      	ldr	r2, [r4, #4]
 80091c4:	2100      	movs	r1, #0
 80091c6:	4628      	mov	r0, r5
 80091c8:	f7f7 f83a 	bl	8000240 <memchr>
 80091cc:	b108      	cbz	r0, 80091d2 <_printf_i+0x1f2>
 80091ce:	1b40      	subs	r0, r0, r5
 80091d0:	6060      	str	r0, [r4, #4]
 80091d2:	6863      	ldr	r3, [r4, #4]
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	2300      	movs	r3, #0
 80091d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091dc:	e7a8      	b.n	8009130 <_printf_i+0x150>
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	462a      	mov	r2, r5
 80091e2:	4649      	mov	r1, r9
 80091e4:	4640      	mov	r0, r8
 80091e6:	47d0      	blx	sl
 80091e8:	3001      	adds	r0, #1
 80091ea:	d0ab      	beq.n	8009144 <_printf_i+0x164>
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	079b      	lsls	r3, r3, #30
 80091f0:	d413      	bmi.n	800921a <_printf_i+0x23a>
 80091f2:	68e0      	ldr	r0, [r4, #12]
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	4298      	cmp	r0, r3
 80091f8:	bfb8      	it	lt
 80091fa:	4618      	movlt	r0, r3
 80091fc:	e7a4      	b.n	8009148 <_printf_i+0x168>
 80091fe:	2301      	movs	r3, #1
 8009200:	4632      	mov	r2, r6
 8009202:	4649      	mov	r1, r9
 8009204:	4640      	mov	r0, r8
 8009206:	47d0      	blx	sl
 8009208:	3001      	adds	r0, #1
 800920a:	d09b      	beq.n	8009144 <_printf_i+0x164>
 800920c:	3501      	adds	r5, #1
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	9903      	ldr	r1, [sp, #12]
 8009212:	1a5b      	subs	r3, r3, r1
 8009214:	42ab      	cmp	r3, r5
 8009216:	dcf2      	bgt.n	80091fe <_printf_i+0x21e>
 8009218:	e7eb      	b.n	80091f2 <_printf_i+0x212>
 800921a:	2500      	movs	r5, #0
 800921c:	f104 0619 	add.w	r6, r4, #25
 8009220:	e7f5      	b.n	800920e <_printf_i+0x22e>
 8009222:	bf00      	nop
 8009224:	0800d5b6 	.word	0x0800d5b6
 8009228:	0800d5c7 	.word	0x0800d5c7

0800922c <_scanf_float>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	b087      	sub	sp, #28
 8009232:	4617      	mov	r7, r2
 8009234:	9303      	str	r3, [sp, #12]
 8009236:	688b      	ldr	r3, [r1, #8]
 8009238:	1e5a      	subs	r2, r3, #1
 800923a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800923e:	bf83      	ittte	hi
 8009240:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009244:	195b      	addhi	r3, r3, r5
 8009246:	9302      	strhi	r3, [sp, #8]
 8009248:	2300      	movls	r3, #0
 800924a:	bf86      	itte	hi
 800924c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009250:	608b      	strhi	r3, [r1, #8]
 8009252:	9302      	strls	r3, [sp, #8]
 8009254:	680b      	ldr	r3, [r1, #0]
 8009256:	468b      	mov	fp, r1
 8009258:	2500      	movs	r5, #0
 800925a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800925e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009262:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009266:	4680      	mov	r8, r0
 8009268:	460c      	mov	r4, r1
 800926a:	465e      	mov	r6, fp
 800926c:	46aa      	mov	sl, r5
 800926e:	46a9      	mov	r9, r5
 8009270:	9501      	str	r5, [sp, #4]
 8009272:	68a2      	ldr	r2, [r4, #8]
 8009274:	b152      	cbz	r2, 800928c <_scanf_float+0x60>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b4e      	cmp	r3, #78	; 0x4e
 800927c:	d864      	bhi.n	8009348 <_scanf_float+0x11c>
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d83c      	bhi.n	80092fc <_scanf_float+0xd0>
 8009282:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009286:	b2c8      	uxtb	r0, r1
 8009288:	280e      	cmp	r0, #14
 800928a:	d93a      	bls.n	8009302 <_scanf_float+0xd6>
 800928c:	f1b9 0f00 	cmp.w	r9, #0
 8009290:	d003      	beq.n	800929a <_scanf_float+0x6e>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800929e:	f1ba 0f01 	cmp.w	sl, #1
 80092a2:	f200 8113 	bhi.w	80094cc <_scanf_float+0x2a0>
 80092a6:	455e      	cmp	r6, fp
 80092a8:	f200 8105 	bhi.w	80094b6 <_scanf_float+0x28a>
 80092ac:	2501      	movs	r5, #1
 80092ae:	4628      	mov	r0, r5
 80092b0:	b007      	add	sp, #28
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80092ba:	2a0d      	cmp	r2, #13
 80092bc:	d8e6      	bhi.n	800928c <_scanf_float+0x60>
 80092be:	a101      	add	r1, pc, #4	; (adr r1, 80092c4 <_scanf_float+0x98>)
 80092c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092c4:	08009403 	.word	0x08009403
 80092c8:	0800928d 	.word	0x0800928d
 80092cc:	0800928d 	.word	0x0800928d
 80092d0:	0800928d 	.word	0x0800928d
 80092d4:	08009463 	.word	0x08009463
 80092d8:	0800943b 	.word	0x0800943b
 80092dc:	0800928d 	.word	0x0800928d
 80092e0:	0800928d 	.word	0x0800928d
 80092e4:	08009411 	.word	0x08009411
 80092e8:	0800928d 	.word	0x0800928d
 80092ec:	0800928d 	.word	0x0800928d
 80092f0:	0800928d 	.word	0x0800928d
 80092f4:	0800928d 	.word	0x0800928d
 80092f8:	080093c9 	.word	0x080093c9
 80092fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009300:	e7db      	b.n	80092ba <_scanf_float+0x8e>
 8009302:	290e      	cmp	r1, #14
 8009304:	d8c2      	bhi.n	800928c <_scanf_float+0x60>
 8009306:	a001      	add	r0, pc, #4	; (adr r0, 800930c <_scanf_float+0xe0>)
 8009308:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800930c:	080093bb 	.word	0x080093bb
 8009310:	0800928d 	.word	0x0800928d
 8009314:	080093bb 	.word	0x080093bb
 8009318:	0800944f 	.word	0x0800944f
 800931c:	0800928d 	.word	0x0800928d
 8009320:	08009369 	.word	0x08009369
 8009324:	080093a5 	.word	0x080093a5
 8009328:	080093a5 	.word	0x080093a5
 800932c:	080093a5 	.word	0x080093a5
 8009330:	080093a5 	.word	0x080093a5
 8009334:	080093a5 	.word	0x080093a5
 8009338:	080093a5 	.word	0x080093a5
 800933c:	080093a5 	.word	0x080093a5
 8009340:	080093a5 	.word	0x080093a5
 8009344:	080093a5 	.word	0x080093a5
 8009348:	2b6e      	cmp	r3, #110	; 0x6e
 800934a:	d809      	bhi.n	8009360 <_scanf_float+0x134>
 800934c:	2b60      	cmp	r3, #96	; 0x60
 800934e:	d8b2      	bhi.n	80092b6 <_scanf_float+0x8a>
 8009350:	2b54      	cmp	r3, #84	; 0x54
 8009352:	d077      	beq.n	8009444 <_scanf_float+0x218>
 8009354:	2b59      	cmp	r3, #89	; 0x59
 8009356:	d199      	bne.n	800928c <_scanf_float+0x60>
 8009358:	2d07      	cmp	r5, #7
 800935a:	d197      	bne.n	800928c <_scanf_float+0x60>
 800935c:	2508      	movs	r5, #8
 800935e:	e029      	b.n	80093b4 <_scanf_float+0x188>
 8009360:	2b74      	cmp	r3, #116	; 0x74
 8009362:	d06f      	beq.n	8009444 <_scanf_float+0x218>
 8009364:	2b79      	cmp	r3, #121	; 0x79
 8009366:	e7f6      	b.n	8009356 <_scanf_float+0x12a>
 8009368:	6821      	ldr	r1, [r4, #0]
 800936a:	05c8      	lsls	r0, r1, #23
 800936c:	d51a      	bpl.n	80093a4 <_scanf_float+0x178>
 800936e:	9b02      	ldr	r3, [sp, #8]
 8009370:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009374:	6021      	str	r1, [r4, #0]
 8009376:	f109 0901 	add.w	r9, r9, #1
 800937a:	b11b      	cbz	r3, 8009384 <_scanf_float+0x158>
 800937c:	3b01      	subs	r3, #1
 800937e:	3201      	adds	r2, #1
 8009380:	9302      	str	r3, [sp, #8]
 8009382:	60a2      	str	r2, [r4, #8]
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	3b01      	subs	r3, #1
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	3301      	adds	r3, #1
 800938e:	6123      	str	r3, [r4, #16]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3b01      	subs	r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	607b      	str	r3, [r7, #4]
 8009398:	f340 8084 	ble.w	80094a4 <_scanf_float+0x278>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	3301      	adds	r3, #1
 80093a0:	603b      	str	r3, [r7, #0]
 80093a2:	e766      	b.n	8009272 <_scanf_float+0x46>
 80093a4:	eb1a 0f05 	cmn.w	sl, r5
 80093a8:	f47f af70 	bne.w	800928c <_scanf_float+0x60>
 80093ac:	6822      	ldr	r2, [r4, #0]
 80093ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80093b2:	6022      	str	r2, [r4, #0]
 80093b4:	f806 3b01 	strb.w	r3, [r6], #1
 80093b8:	e7e4      	b.n	8009384 <_scanf_float+0x158>
 80093ba:	6822      	ldr	r2, [r4, #0]
 80093bc:	0610      	lsls	r0, r2, #24
 80093be:	f57f af65 	bpl.w	800928c <_scanf_float+0x60>
 80093c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093c6:	e7f4      	b.n	80093b2 <_scanf_float+0x186>
 80093c8:	f1ba 0f00 	cmp.w	sl, #0
 80093cc:	d10e      	bne.n	80093ec <_scanf_float+0x1c0>
 80093ce:	f1b9 0f00 	cmp.w	r9, #0
 80093d2:	d10e      	bne.n	80093f2 <_scanf_float+0x1c6>
 80093d4:	6822      	ldr	r2, [r4, #0]
 80093d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80093da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80093de:	d108      	bne.n	80093f2 <_scanf_float+0x1c6>
 80093e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093e4:	6022      	str	r2, [r4, #0]
 80093e6:	f04f 0a01 	mov.w	sl, #1
 80093ea:	e7e3      	b.n	80093b4 <_scanf_float+0x188>
 80093ec:	f1ba 0f02 	cmp.w	sl, #2
 80093f0:	d055      	beq.n	800949e <_scanf_float+0x272>
 80093f2:	2d01      	cmp	r5, #1
 80093f4:	d002      	beq.n	80093fc <_scanf_float+0x1d0>
 80093f6:	2d04      	cmp	r5, #4
 80093f8:	f47f af48 	bne.w	800928c <_scanf_float+0x60>
 80093fc:	3501      	adds	r5, #1
 80093fe:	b2ed      	uxtb	r5, r5
 8009400:	e7d8      	b.n	80093b4 <_scanf_float+0x188>
 8009402:	f1ba 0f01 	cmp.w	sl, #1
 8009406:	f47f af41 	bne.w	800928c <_scanf_float+0x60>
 800940a:	f04f 0a02 	mov.w	sl, #2
 800940e:	e7d1      	b.n	80093b4 <_scanf_float+0x188>
 8009410:	b97d      	cbnz	r5, 8009432 <_scanf_float+0x206>
 8009412:	f1b9 0f00 	cmp.w	r9, #0
 8009416:	f47f af3c 	bne.w	8009292 <_scanf_float+0x66>
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009420:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009424:	f47f af39 	bne.w	800929a <_scanf_float+0x6e>
 8009428:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800942c:	6022      	str	r2, [r4, #0]
 800942e:	2501      	movs	r5, #1
 8009430:	e7c0      	b.n	80093b4 <_scanf_float+0x188>
 8009432:	2d03      	cmp	r5, #3
 8009434:	d0e2      	beq.n	80093fc <_scanf_float+0x1d0>
 8009436:	2d05      	cmp	r5, #5
 8009438:	e7de      	b.n	80093f8 <_scanf_float+0x1cc>
 800943a:	2d02      	cmp	r5, #2
 800943c:	f47f af26 	bne.w	800928c <_scanf_float+0x60>
 8009440:	2503      	movs	r5, #3
 8009442:	e7b7      	b.n	80093b4 <_scanf_float+0x188>
 8009444:	2d06      	cmp	r5, #6
 8009446:	f47f af21 	bne.w	800928c <_scanf_float+0x60>
 800944a:	2507      	movs	r5, #7
 800944c:	e7b2      	b.n	80093b4 <_scanf_float+0x188>
 800944e:	6822      	ldr	r2, [r4, #0]
 8009450:	0591      	lsls	r1, r2, #22
 8009452:	f57f af1b 	bpl.w	800928c <_scanf_float+0x60>
 8009456:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800945a:	6022      	str	r2, [r4, #0]
 800945c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009460:	e7a8      	b.n	80093b4 <_scanf_float+0x188>
 8009462:	6822      	ldr	r2, [r4, #0]
 8009464:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009468:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800946c:	d006      	beq.n	800947c <_scanf_float+0x250>
 800946e:	0550      	lsls	r0, r2, #21
 8009470:	f57f af0c 	bpl.w	800928c <_scanf_float+0x60>
 8009474:	f1b9 0f00 	cmp.w	r9, #0
 8009478:	f43f af0f 	beq.w	800929a <_scanf_float+0x6e>
 800947c:	0591      	lsls	r1, r2, #22
 800947e:	bf58      	it	pl
 8009480:	9901      	ldrpl	r1, [sp, #4]
 8009482:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009486:	bf58      	it	pl
 8009488:	eba9 0101 	subpl.w	r1, r9, r1
 800948c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009490:	bf58      	it	pl
 8009492:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	f04f 0900 	mov.w	r9, #0
 800949c:	e78a      	b.n	80093b4 <_scanf_float+0x188>
 800949e:	f04f 0a03 	mov.w	sl, #3
 80094a2:	e787      	b.n	80093b4 <_scanf_float+0x188>
 80094a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80094a8:	4639      	mov	r1, r7
 80094aa:	4640      	mov	r0, r8
 80094ac:	4798      	blx	r3
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f43f aedf 	beq.w	8009272 <_scanf_float+0x46>
 80094b4:	e6ea      	b.n	800928c <_scanf_float+0x60>
 80094b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094be:	463a      	mov	r2, r7
 80094c0:	4640      	mov	r0, r8
 80094c2:	4798      	blx	r3
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	e6ec      	b.n	80092a6 <_scanf_float+0x7a>
 80094cc:	1e6b      	subs	r3, r5, #1
 80094ce:	2b06      	cmp	r3, #6
 80094d0:	d825      	bhi.n	800951e <_scanf_float+0x2f2>
 80094d2:	2d02      	cmp	r5, #2
 80094d4:	d836      	bhi.n	8009544 <_scanf_float+0x318>
 80094d6:	455e      	cmp	r6, fp
 80094d8:	f67f aee8 	bls.w	80092ac <_scanf_float+0x80>
 80094dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094e4:	463a      	mov	r2, r7
 80094e6:	4640      	mov	r0, r8
 80094e8:	4798      	blx	r3
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	6123      	str	r3, [r4, #16]
 80094f0:	e7f1      	b.n	80094d6 <_scanf_float+0x2aa>
 80094f2:	9802      	ldr	r0, [sp, #8]
 80094f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80094fc:	9002      	str	r0, [sp, #8]
 80094fe:	463a      	mov	r2, r7
 8009500:	4640      	mov	r0, r8
 8009502:	4798      	blx	r3
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	3b01      	subs	r3, #1
 8009508:	6123      	str	r3, [r4, #16]
 800950a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800950e:	fa5f fa8a 	uxtb.w	sl, sl
 8009512:	f1ba 0f02 	cmp.w	sl, #2
 8009516:	d1ec      	bne.n	80094f2 <_scanf_float+0x2c6>
 8009518:	3d03      	subs	r5, #3
 800951a:	b2ed      	uxtb	r5, r5
 800951c:	1b76      	subs	r6, r6, r5
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	05da      	lsls	r2, r3, #23
 8009522:	d52f      	bpl.n	8009584 <_scanf_float+0x358>
 8009524:	055b      	lsls	r3, r3, #21
 8009526:	d510      	bpl.n	800954a <_scanf_float+0x31e>
 8009528:	455e      	cmp	r6, fp
 800952a:	f67f aebf 	bls.w	80092ac <_scanf_float+0x80>
 800952e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009536:	463a      	mov	r2, r7
 8009538:	4640      	mov	r0, r8
 800953a:	4798      	blx	r3
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	3b01      	subs	r3, #1
 8009540:	6123      	str	r3, [r4, #16]
 8009542:	e7f1      	b.n	8009528 <_scanf_float+0x2fc>
 8009544:	46aa      	mov	sl, r5
 8009546:	9602      	str	r6, [sp, #8]
 8009548:	e7df      	b.n	800950a <_scanf_float+0x2de>
 800954a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	2965      	cmp	r1, #101	; 0x65
 8009552:	f103 33ff 	add.w	r3, r3, #4294967295
 8009556:	f106 35ff 	add.w	r5, r6, #4294967295
 800955a:	6123      	str	r3, [r4, #16]
 800955c:	d00c      	beq.n	8009578 <_scanf_float+0x34c>
 800955e:	2945      	cmp	r1, #69	; 0x45
 8009560:	d00a      	beq.n	8009578 <_scanf_float+0x34c>
 8009562:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009566:	463a      	mov	r2, r7
 8009568:	4640      	mov	r0, r8
 800956a:	4798      	blx	r3
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009572:	3b01      	subs	r3, #1
 8009574:	1eb5      	subs	r5, r6, #2
 8009576:	6123      	str	r3, [r4, #16]
 8009578:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800957c:	463a      	mov	r2, r7
 800957e:	4640      	mov	r0, r8
 8009580:	4798      	blx	r3
 8009582:	462e      	mov	r6, r5
 8009584:	6825      	ldr	r5, [r4, #0]
 8009586:	f015 0510 	ands.w	r5, r5, #16
 800958a:	d159      	bne.n	8009640 <_scanf_float+0x414>
 800958c:	7035      	strb	r5, [r6, #0]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009598:	d11b      	bne.n	80095d2 <_scanf_float+0x3a6>
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	454b      	cmp	r3, r9
 800959e:	eba3 0209 	sub.w	r2, r3, r9
 80095a2:	d123      	bne.n	80095ec <_scanf_float+0x3c0>
 80095a4:	2200      	movs	r2, #0
 80095a6:	4659      	mov	r1, fp
 80095a8:	4640      	mov	r0, r8
 80095aa:	f000 fef7 	bl	800a39c <_strtod_r>
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	f012 0f02 	tst.w	r2, #2
 80095b6:	ec57 6b10 	vmov	r6, r7, d0
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	d021      	beq.n	8009602 <_scanf_float+0x3d6>
 80095be:	9903      	ldr	r1, [sp, #12]
 80095c0:	1d1a      	adds	r2, r3, #4
 80095c2:	600a      	str	r2, [r1, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	e9c3 6700 	strd	r6, r7, [r3]
 80095ca:	68e3      	ldr	r3, [r4, #12]
 80095cc:	3301      	adds	r3, #1
 80095ce:	60e3      	str	r3, [r4, #12]
 80095d0:	e66d      	b.n	80092ae <_scanf_float+0x82>
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0e5      	beq.n	80095a4 <_scanf_float+0x378>
 80095d8:	9905      	ldr	r1, [sp, #20]
 80095da:	230a      	movs	r3, #10
 80095dc:	462a      	mov	r2, r5
 80095de:	3101      	adds	r1, #1
 80095e0:	4640      	mov	r0, r8
 80095e2:	f000 ffbf 	bl	800a564 <_strtol_r>
 80095e6:	9b04      	ldr	r3, [sp, #16]
 80095e8:	9e05      	ldr	r6, [sp, #20]
 80095ea:	1ac2      	subs	r2, r0, r3
 80095ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80095f0:	429e      	cmp	r6, r3
 80095f2:	bf28      	it	cs
 80095f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80095f8:	4912      	ldr	r1, [pc, #72]	; (8009644 <_scanf_float+0x418>)
 80095fa:	4630      	mov	r0, r6
 80095fc:	f000 f870 	bl	80096e0 <siprintf>
 8009600:	e7d0      	b.n	80095a4 <_scanf_float+0x378>
 8009602:	9903      	ldr	r1, [sp, #12]
 8009604:	f012 0f04 	tst.w	r2, #4
 8009608:	f103 0204 	add.w	r2, r3, #4
 800960c:	600a      	str	r2, [r1, #0]
 800960e:	d1d9      	bne.n	80095c4 <_scanf_float+0x398>
 8009610:	f8d3 8000 	ldr.w	r8, [r3]
 8009614:	ee10 2a10 	vmov	r2, s0
 8009618:	ee10 0a10 	vmov	r0, s0
 800961c:	463b      	mov	r3, r7
 800961e:	4639      	mov	r1, r7
 8009620:	f7f7 fab4 	bl	8000b8c <__aeabi_dcmpun>
 8009624:	b128      	cbz	r0, 8009632 <_scanf_float+0x406>
 8009626:	4808      	ldr	r0, [pc, #32]	; (8009648 <_scanf_float+0x41c>)
 8009628:	f000 f820 	bl	800966c <nanf>
 800962c:	ed88 0a00 	vstr	s0, [r8]
 8009630:	e7cb      	b.n	80095ca <_scanf_float+0x39e>
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f7 fb07 	bl	8000c48 <__aeabi_d2f>
 800963a:	f8c8 0000 	str.w	r0, [r8]
 800963e:	e7c4      	b.n	80095ca <_scanf_float+0x39e>
 8009640:	2500      	movs	r5, #0
 8009642:	e634      	b.n	80092ae <_scanf_float+0x82>
 8009644:	0800d5d8 	.word	0x0800d5d8
 8009648:	0800d6df 	.word	0x0800d6df

0800964c <_sbrk_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d06      	ldr	r5, [pc, #24]	; (8009668 <_sbrk_r+0x1c>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f9 faa6 	bl	8002ba8 <_sbrk>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_sbrk_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_sbrk_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	200005b4 	.word	0x200005b4

0800966c <nanf>:
 800966c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009674 <nanf+0x8>
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	7fc00000 	.word	0x7fc00000

08009678 <sniprintf>:
 8009678:	b40c      	push	{r2, r3}
 800967a:	b530      	push	{r4, r5, lr}
 800967c:	4b17      	ldr	r3, [pc, #92]	; (80096dc <sniprintf+0x64>)
 800967e:	1e0c      	subs	r4, r1, #0
 8009680:	681d      	ldr	r5, [r3, #0]
 8009682:	b09d      	sub	sp, #116	; 0x74
 8009684:	da08      	bge.n	8009698 <sniprintf+0x20>
 8009686:	238b      	movs	r3, #139	; 0x8b
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	b01d      	add	sp, #116	; 0x74
 8009690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009694:	b002      	add	sp, #8
 8009696:	4770      	bx	lr
 8009698:	f44f 7302 	mov.w	r3, #520	; 0x208
 800969c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80096a0:	bf14      	ite	ne
 80096a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096a6:	4623      	moveq	r3, r4
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	9307      	str	r3, [sp, #28]
 80096ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096b0:	9002      	str	r0, [sp, #8]
 80096b2:	9006      	str	r0, [sp, #24]
 80096b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096ba:	ab21      	add	r3, sp, #132	; 0x84
 80096bc:	a902      	add	r1, sp, #8
 80096be:	4628      	mov	r0, r5
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	f002 fed7 	bl	800c474 <_svfiprintf_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	bfbc      	itt	lt
 80096ca:	238b      	movlt	r3, #139	; 0x8b
 80096cc:	602b      	strlt	r3, [r5, #0]
 80096ce:	2c00      	cmp	r4, #0
 80096d0:	d0dd      	beq.n	800968e <sniprintf+0x16>
 80096d2:	9b02      	ldr	r3, [sp, #8]
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
 80096d8:	e7d9      	b.n	800968e <sniprintf+0x16>
 80096da:	bf00      	nop
 80096dc:	2000000c 	.word	0x2000000c

080096e0 <siprintf>:
 80096e0:	b40e      	push	{r1, r2, r3}
 80096e2:	b500      	push	{lr}
 80096e4:	b09c      	sub	sp, #112	; 0x70
 80096e6:	ab1d      	add	r3, sp, #116	; 0x74
 80096e8:	9002      	str	r0, [sp, #8]
 80096ea:	9006      	str	r0, [sp, #24]
 80096ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096f0:	4809      	ldr	r0, [pc, #36]	; (8009718 <siprintf+0x38>)
 80096f2:	9107      	str	r1, [sp, #28]
 80096f4:	9104      	str	r1, [sp, #16]
 80096f6:	4909      	ldr	r1, [pc, #36]	; (800971c <siprintf+0x3c>)
 80096f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fc:	9105      	str	r1, [sp, #20]
 80096fe:	6800      	ldr	r0, [r0, #0]
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	a902      	add	r1, sp, #8
 8009704:	f002 feb6 	bl	800c474 <_svfiprintf_r>
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	b01c      	add	sp, #112	; 0x70
 8009710:	f85d eb04 	ldr.w	lr, [sp], #4
 8009714:	b003      	add	sp, #12
 8009716:	4770      	bx	lr
 8009718:	2000000c 	.word	0x2000000c
 800971c:	ffff0208 	.word	0xffff0208

08009720 <strcpy>:
 8009720:	4603      	mov	r3, r0
 8009722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009726:	f803 2b01 	strb.w	r2, [r3], #1
 800972a:	2a00      	cmp	r2, #0
 800972c:	d1f9      	bne.n	8009722 <strcpy+0x2>
 800972e:	4770      	bx	lr

08009730 <strncpy>:
 8009730:	b510      	push	{r4, lr}
 8009732:	3901      	subs	r1, #1
 8009734:	4603      	mov	r3, r0
 8009736:	b132      	cbz	r2, 8009746 <strncpy+0x16>
 8009738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800973c:	f803 4b01 	strb.w	r4, [r3], #1
 8009740:	3a01      	subs	r2, #1
 8009742:	2c00      	cmp	r4, #0
 8009744:	d1f7      	bne.n	8009736 <strncpy+0x6>
 8009746:	441a      	add	r2, r3
 8009748:	2100      	movs	r1, #0
 800974a:	4293      	cmp	r3, r2
 800974c:	d100      	bne.n	8009750 <strncpy+0x20>
 800974e:	bd10      	pop	{r4, pc}
 8009750:	f803 1b01 	strb.w	r1, [r3], #1
 8009754:	e7f9      	b.n	800974a <strncpy+0x1a>

08009756 <sulp>:
 8009756:	b570      	push	{r4, r5, r6, lr}
 8009758:	4604      	mov	r4, r0
 800975a:	460d      	mov	r5, r1
 800975c:	ec45 4b10 	vmov	d0, r4, r5
 8009760:	4616      	mov	r6, r2
 8009762:	f002 fcc7 	bl	800c0f4 <__ulp>
 8009766:	ec51 0b10 	vmov	r0, r1, d0
 800976a:	b17e      	cbz	r6, 800978c <sulp+0x36>
 800976c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009770:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009774:	2b00      	cmp	r3, #0
 8009776:	dd09      	ble.n	800978c <sulp+0x36>
 8009778:	051b      	lsls	r3, r3, #20
 800977a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800977e:	2400      	movs	r4, #0
 8009780:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009784:	4622      	mov	r2, r4
 8009786:	462b      	mov	r3, r5
 8009788:	f7f6 ff66 	bl	8000658 <__aeabi_dmul>
 800978c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009790 <_strtod_l>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	ed2d 8b02 	vpush	{d8}
 8009798:	b09d      	sub	sp, #116	; 0x74
 800979a:	461f      	mov	r7, r3
 800979c:	2300      	movs	r3, #0
 800979e:	9318      	str	r3, [sp, #96]	; 0x60
 80097a0:	4ba2      	ldr	r3, [pc, #648]	; (8009a2c <_strtod_l+0x29c>)
 80097a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	4604      	mov	r4, r0
 80097aa:	4618      	mov	r0, r3
 80097ac:	4688      	mov	r8, r1
 80097ae:	f7f6 fd39 	bl	8000224 <strlen>
 80097b2:	f04f 0a00 	mov.w	sl, #0
 80097b6:	4605      	mov	r5, r0
 80097b8:	f04f 0b00 	mov.w	fp, #0
 80097bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80097c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097c2:	781a      	ldrb	r2, [r3, #0]
 80097c4:	2a2b      	cmp	r2, #43	; 0x2b
 80097c6:	d04e      	beq.n	8009866 <_strtod_l+0xd6>
 80097c8:	d83b      	bhi.n	8009842 <_strtod_l+0xb2>
 80097ca:	2a0d      	cmp	r2, #13
 80097cc:	d834      	bhi.n	8009838 <_strtod_l+0xa8>
 80097ce:	2a08      	cmp	r2, #8
 80097d0:	d834      	bhi.n	800983c <_strtod_l+0xac>
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d03e      	beq.n	8009854 <_strtod_l+0xc4>
 80097d6:	2300      	movs	r3, #0
 80097d8:	930a      	str	r3, [sp, #40]	; 0x28
 80097da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80097dc:	7833      	ldrb	r3, [r6, #0]
 80097de:	2b30      	cmp	r3, #48	; 0x30
 80097e0:	f040 80b0 	bne.w	8009944 <_strtod_l+0x1b4>
 80097e4:	7873      	ldrb	r3, [r6, #1]
 80097e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097ea:	2b58      	cmp	r3, #88	; 0x58
 80097ec:	d168      	bne.n	80098c0 <_strtod_l+0x130>
 80097ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	ab18      	add	r3, sp, #96	; 0x60
 80097f4:	9702      	str	r7, [sp, #8]
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	4a8d      	ldr	r2, [pc, #564]	; (8009a30 <_strtod_l+0x2a0>)
 80097fa:	ab19      	add	r3, sp, #100	; 0x64
 80097fc:	a917      	add	r1, sp, #92	; 0x5c
 80097fe:	4620      	mov	r0, r4
 8009800:	f001 fdce 	bl	800b3a0 <__gethex>
 8009804:	f010 0707 	ands.w	r7, r0, #7
 8009808:	4605      	mov	r5, r0
 800980a:	d005      	beq.n	8009818 <_strtod_l+0x88>
 800980c:	2f06      	cmp	r7, #6
 800980e:	d12c      	bne.n	800986a <_strtod_l+0xda>
 8009810:	3601      	adds	r6, #1
 8009812:	2300      	movs	r3, #0
 8009814:	9617      	str	r6, [sp, #92]	; 0x5c
 8009816:	930a      	str	r3, [sp, #40]	; 0x28
 8009818:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800981a:	2b00      	cmp	r3, #0
 800981c:	f040 8590 	bne.w	800a340 <_strtod_l+0xbb0>
 8009820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009822:	b1eb      	cbz	r3, 8009860 <_strtod_l+0xd0>
 8009824:	4652      	mov	r2, sl
 8009826:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800982a:	ec43 2b10 	vmov	d0, r2, r3
 800982e:	b01d      	add	sp, #116	; 0x74
 8009830:	ecbd 8b02 	vpop	{d8}
 8009834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009838:	2a20      	cmp	r2, #32
 800983a:	d1cc      	bne.n	80097d6 <_strtod_l+0x46>
 800983c:	3301      	adds	r3, #1
 800983e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009840:	e7be      	b.n	80097c0 <_strtod_l+0x30>
 8009842:	2a2d      	cmp	r2, #45	; 0x2d
 8009844:	d1c7      	bne.n	80097d6 <_strtod_l+0x46>
 8009846:	2201      	movs	r2, #1
 8009848:	920a      	str	r2, [sp, #40]	; 0x28
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	9217      	str	r2, [sp, #92]	; 0x5c
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1c2      	bne.n	80097da <_strtod_l+0x4a>
 8009854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009856:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800985a:	2b00      	cmp	r3, #0
 800985c:	f040 856e 	bne.w	800a33c <_strtod_l+0xbac>
 8009860:	4652      	mov	r2, sl
 8009862:	465b      	mov	r3, fp
 8009864:	e7e1      	b.n	800982a <_strtod_l+0x9a>
 8009866:	2200      	movs	r2, #0
 8009868:	e7ee      	b.n	8009848 <_strtod_l+0xb8>
 800986a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800986c:	b13a      	cbz	r2, 800987e <_strtod_l+0xee>
 800986e:	2135      	movs	r1, #53	; 0x35
 8009870:	a81a      	add	r0, sp, #104	; 0x68
 8009872:	f002 fd4a 	bl	800c30a <__copybits>
 8009876:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009878:	4620      	mov	r0, r4
 800987a:	f002 f909 	bl	800ba90 <_Bfree>
 800987e:	3f01      	subs	r7, #1
 8009880:	2f04      	cmp	r7, #4
 8009882:	d806      	bhi.n	8009892 <_strtod_l+0x102>
 8009884:	e8df f007 	tbb	[pc, r7]
 8009888:	1714030a 	.word	0x1714030a
 800988c:	0a          	.byte	0x0a
 800988d:	00          	.byte	0x00
 800988e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009892:	0728      	lsls	r0, r5, #28
 8009894:	d5c0      	bpl.n	8009818 <_strtod_l+0x88>
 8009896:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800989a:	e7bd      	b.n	8009818 <_strtod_l+0x88>
 800989c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80098a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80098ae:	e7f0      	b.n	8009892 <_strtod_l+0x102>
 80098b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009a34 <_strtod_l+0x2a4>
 80098b4:	e7ed      	b.n	8009892 <_strtod_l+0x102>
 80098b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80098ba:	f04f 3aff 	mov.w	sl, #4294967295
 80098be:	e7e8      	b.n	8009892 <_strtod_l+0x102>
 80098c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098c2:	1c5a      	adds	r2, r3, #1
 80098c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	2b30      	cmp	r3, #48	; 0x30
 80098ca:	d0f9      	beq.n	80098c0 <_strtod_l+0x130>
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0a3      	beq.n	8009818 <_strtod_l+0x88>
 80098d0:	2301      	movs	r3, #1
 80098d2:	f04f 0900 	mov.w	r9, #0
 80098d6:	9304      	str	r3, [sp, #16]
 80098d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098da:	9308      	str	r3, [sp, #32]
 80098dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80098e0:	464f      	mov	r7, r9
 80098e2:	220a      	movs	r2, #10
 80098e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80098e6:	7806      	ldrb	r6, [r0, #0]
 80098e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80098ec:	b2d9      	uxtb	r1, r3
 80098ee:	2909      	cmp	r1, #9
 80098f0:	d92a      	bls.n	8009948 <_strtod_l+0x1b8>
 80098f2:	9905      	ldr	r1, [sp, #20]
 80098f4:	462a      	mov	r2, r5
 80098f6:	f003 f81f 	bl	800c938 <strncmp>
 80098fa:	b398      	cbz	r0, 8009964 <_strtod_l+0x1d4>
 80098fc:	2000      	movs	r0, #0
 80098fe:	4632      	mov	r2, r6
 8009900:	463d      	mov	r5, r7
 8009902:	9005      	str	r0, [sp, #20]
 8009904:	4603      	mov	r3, r0
 8009906:	2a65      	cmp	r2, #101	; 0x65
 8009908:	d001      	beq.n	800990e <_strtod_l+0x17e>
 800990a:	2a45      	cmp	r2, #69	; 0x45
 800990c:	d118      	bne.n	8009940 <_strtod_l+0x1b0>
 800990e:	b91d      	cbnz	r5, 8009918 <_strtod_l+0x188>
 8009910:	9a04      	ldr	r2, [sp, #16]
 8009912:	4302      	orrs	r2, r0
 8009914:	d09e      	beq.n	8009854 <_strtod_l+0xc4>
 8009916:	2500      	movs	r5, #0
 8009918:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800991c:	f108 0201 	add.w	r2, r8, #1
 8009920:	9217      	str	r2, [sp, #92]	; 0x5c
 8009922:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009926:	2a2b      	cmp	r2, #43	; 0x2b
 8009928:	d075      	beq.n	8009a16 <_strtod_l+0x286>
 800992a:	2a2d      	cmp	r2, #45	; 0x2d
 800992c:	d07b      	beq.n	8009a26 <_strtod_l+0x296>
 800992e:	f04f 0c00 	mov.w	ip, #0
 8009932:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009936:	2909      	cmp	r1, #9
 8009938:	f240 8082 	bls.w	8009a40 <_strtod_l+0x2b0>
 800993c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009940:	2600      	movs	r6, #0
 8009942:	e09d      	b.n	8009a80 <_strtod_l+0x2f0>
 8009944:	2300      	movs	r3, #0
 8009946:	e7c4      	b.n	80098d2 <_strtod_l+0x142>
 8009948:	2f08      	cmp	r7, #8
 800994a:	bfd8      	it	le
 800994c:	9907      	ldrle	r1, [sp, #28]
 800994e:	f100 0001 	add.w	r0, r0, #1
 8009952:	bfda      	itte	le
 8009954:	fb02 3301 	mlale	r3, r2, r1, r3
 8009958:	9307      	strle	r3, [sp, #28]
 800995a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800995e:	3701      	adds	r7, #1
 8009960:	9017      	str	r0, [sp, #92]	; 0x5c
 8009962:	e7bf      	b.n	80098e4 <_strtod_l+0x154>
 8009964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009966:	195a      	adds	r2, r3, r5
 8009968:	9217      	str	r2, [sp, #92]	; 0x5c
 800996a:	5d5a      	ldrb	r2, [r3, r5]
 800996c:	2f00      	cmp	r7, #0
 800996e:	d037      	beq.n	80099e0 <_strtod_l+0x250>
 8009970:	9005      	str	r0, [sp, #20]
 8009972:	463d      	mov	r5, r7
 8009974:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009978:	2b09      	cmp	r3, #9
 800997a:	d912      	bls.n	80099a2 <_strtod_l+0x212>
 800997c:	2301      	movs	r3, #1
 800997e:	e7c2      	b.n	8009906 <_strtod_l+0x176>
 8009980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	9217      	str	r2, [sp, #92]	; 0x5c
 8009986:	785a      	ldrb	r2, [r3, #1]
 8009988:	3001      	adds	r0, #1
 800998a:	2a30      	cmp	r2, #48	; 0x30
 800998c:	d0f8      	beq.n	8009980 <_strtod_l+0x1f0>
 800998e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009992:	2b08      	cmp	r3, #8
 8009994:	f200 84d9 	bhi.w	800a34a <_strtod_l+0xbba>
 8009998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800999a:	9005      	str	r0, [sp, #20]
 800999c:	2000      	movs	r0, #0
 800999e:	9308      	str	r3, [sp, #32]
 80099a0:	4605      	mov	r5, r0
 80099a2:	3a30      	subs	r2, #48	; 0x30
 80099a4:	f100 0301 	add.w	r3, r0, #1
 80099a8:	d014      	beq.n	80099d4 <_strtod_l+0x244>
 80099aa:	9905      	ldr	r1, [sp, #20]
 80099ac:	4419      	add	r1, r3
 80099ae:	9105      	str	r1, [sp, #20]
 80099b0:	462b      	mov	r3, r5
 80099b2:	eb00 0e05 	add.w	lr, r0, r5
 80099b6:	210a      	movs	r1, #10
 80099b8:	4573      	cmp	r3, lr
 80099ba:	d113      	bne.n	80099e4 <_strtod_l+0x254>
 80099bc:	182b      	adds	r3, r5, r0
 80099be:	2b08      	cmp	r3, #8
 80099c0:	f105 0501 	add.w	r5, r5, #1
 80099c4:	4405      	add	r5, r0
 80099c6:	dc1c      	bgt.n	8009a02 <_strtod_l+0x272>
 80099c8:	9907      	ldr	r1, [sp, #28]
 80099ca:	230a      	movs	r3, #10
 80099cc:	fb03 2301 	mla	r3, r3, r1, r2
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	2300      	movs	r3, #0
 80099d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099d6:	1c51      	adds	r1, r2, #1
 80099d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80099da:	7852      	ldrb	r2, [r2, #1]
 80099dc:	4618      	mov	r0, r3
 80099de:	e7c9      	b.n	8009974 <_strtod_l+0x1e4>
 80099e0:	4638      	mov	r0, r7
 80099e2:	e7d2      	b.n	800998a <_strtod_l+0x1fa>
 80099e4:	2b08      	cmp	r3, #8
 80099e6:	dc04      	bgt.n	80099f2 <_strtod_l+0x262>
 80099e8:	9e07      	ldr	r6, [sp, #28]
 80099ea:	434e      	muls	r6, r1
 80099ec:	9607      	str	r6, [sp, #28]
 80099ee:	3301      	adds	r3, #1
 80099f0:	e7e2      	b.n	80099b8 <_strtod_l+0x228>
 80099f2:	f103 0c01 	add.w	ip, r3, #1
 80099f6:	f1bc 0f10 	cmp.w	ip, #16
 80099fa:	bfd8      	it	le
 80099fc:	fb01 f909 	mulle.w	r9, r1, r9
 8009a00:	e7f5      	b.n	80099ee <_strtod_l+0x25e>
 8009a02:	2d10      	cmp	r5, #16
 8009a04:	bfdc      	itt	le
 8009a06:	230a      	movle	r3, #10
 8009a08:	fb03 2909 	mlale	r9, r3, r9, r2
 8009a0c:	e7e1      	b.n	80099d2 <_strtod_l+0x242>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9305      	str	r3, [sp, #20]
 8009a12:	2301      	movs	r3, #1
 8009a14:	e77c      	b.n	8009910 <_strtod_l+0x180>
 8009a16:	f04f 0c00 	mov.w	ip, #0
 8009a1a:	f108 0202 	add.w	r2, r8, #2
 8009a1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009a24:	e785      	b.n	8009932 <_strtod_l+0x1a2>
 8009a26:	f04f 0c01 	mov.w	ip, #1
 8009a2a:	e7f6      	b.n	8009a1a <_strtod_l+0x28a>
 8009a2c:	0800d7c0 	.word	0x0800d7c0
 8009a30:	0800d5e0 	.word	0x0800d5e0
 8009a34:	7ff00000 	.word	0x7ff00000
 8009a38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a3a:	1c51      	adds	r1, r2, #1
 8009a3c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a3e:	7852      	ldrb	r2, [r2, #1]
 8009a40:	2a30      	cmp	r2, #48	; 0x30
 8009a42:	d0f9      	beq.n	8009a38 <_strtod_l+0x2a8>
 8009a44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a48:	2908      	cmp	r1, #8
 8009a4a:	f63f af79 	bhi.w	8009940 <_strtod_l+0x1b0>
 8009a4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a54:	9206      	str	r2, [sp, #24]
 8009a56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a58:	1c51      	adds	r1, r2, #1
 8009a5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a5c:	7852      	ldrb	r2, [r2, #1]
 8009a5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009a62:	2e09      	cmp	r6, #9
 8009a64:	d937      	bls.n	8009ad6 <_strtod_l+0x346>
 8009a66:	9e06      	ldr	r6, [sp, #24]
 8009a68:	1b89      	subs	r1, r1, r6
 8009a6a:	2908      	cmp	r1, #8
 8009a6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a70:	dc02      	bgt.n	8009a78 <_strtod_l+0x2e8>
 8009a72:	4576      	cmp	r6, lr
 8009a74:	bfa8      	it	ge
 8009a76:	4676      	movge	r6, lr
 8009a78:	f1bc 0f00 	cmp.w	ip, #0
 8009a7c:	d000      	beq.n	8009a80 <_strtod_l+0x2f0>
 8009a7e:	4276      	negs	r6, r6
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	d14d      	bne.n	8009b20 <_strtod_l+0x390>
 8009a84:	9904      	ldr	r1, [sp, #16]
 8009a86:	4301      	orrs	r1, r0
 8009a88:	f47f aec6 	bne.w	8009818 <_strtod_l+0x88>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f47f aee1 	bne.w	8009854 <_strtod_l+0xc4>
 8009a92:	2a69      	cmp	r2, #105	; 0x69
 8009a94:	d027      	beq.n	8009ae6 <_strtod_l+0x356>
 8009a96:	dc24      	bgt.n	8009ae2 <_strtod_l+0x352>
 8009a98:	2a49      	cmp	r2, #73	; 0x49
 8009a9a:	d024      	beq.n	8009ae6 <_strtod_l+0x356>
 8009a9c:	2a4e      	cmp	r2, #78	; 0x4e
 8009a9e:	f47f aed9 	bne.w	8009854 <_strtod_l+0xc4>
 8009aa2:	499f      	ldr	r1, [pc, #636]	; (8009d20 <_strtod_l+0x590>)
 8009aa4:	a817      	add	r0, sp, #92	; 0x5c
 8009aa6:	f001 fed3 	bl	800b850 <__match>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f43f aed2 	beq.w	8009854 <_strtod_l+0xc4>
 8009ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b28      	cmp	r3, #40	; 0x28
 8009ab6:	d12d      	bne.n	8009b14 <_strtod_l+0x384>
 8009ab8:	499a      	ldr	r1, [pc, #616]	; (8009d24 <_strtod_l+0x594>)
 8009aba:	aa1a      	add	r2, sp, #104	; 0x68
 8009abc:	a817      	add	r0, sp, #92	; 0x5c
 8009abe:	f001 fedb 	bl	800b878 <__hexnan>
 8009ac2:	2805      	cmp	r0, #5
 8009ac4:	d126      	bne.n	8009b14 <_strtod_l+0x384>
 8009ac6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ac8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009acc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ad0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ad4:	e6a0      	b.n	8009818 <_strtod_l+0x88>
 8009ad6:	210a      	movs	r1, #10
 8009ad8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009adc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ae0:	e7b9      	b.n	8009a56 <_strtod_l+0x2c6>
 8009ae2:	2a6e      	cmp	r2, #110	; 0x6e
 8009ae4:	e7db      	b.n	8009a9e <_strtod_l+0x30e>
 8009ae6:	4990      	ldr	r1, [pc, #576]	; (8009d28 <_strtod_l+0x598>)
 8009ae8:	a817      	add	r0, sp, #92	; 0x5c
 8009aea:	f001 feb1 	bl	800b850 <__match>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f43f aeb0 	beq.w	8009854 <_strtod_l+0xc4>
 8009af4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009af6:	498d      	ldr	r1, [pc, #564]	; (8009d2c <_strtod_l+0x59c>)
 8009af8:	3b01      	subs	r3, #1
 8009afa:	a817      	add	r0, sp, #92	; 0x5c
 8009afc:	9317      	str	r3, [sp, #92]	; 0x5c
 8009afe:	f001 fea7 	bl	800b850 <__match>
 8009b02:	b910      	cbnz	r0, 8009b0a <_strtod_l+0x37a>
 8009b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b06:	3301      	adds	r3, #1
 8009b08:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009d3c <_strtod_l+0x5ac>
 8009b0e:	f04f 0a00 	mov.w	sl, #0
 8009b12:	e681      	b.n	8009818 <_strtod_l+0x88>
 8009b14:	4886      	ldr	r0, [pc, #536]	; (8009d30 <_strtod_l+0x5a0>)
 8009b16:	f002 ff07 	bl	800c928 <nan>
 8009b1a:	ec5b ab10 	vmov	sl, fp, d0
 8009b1e:	e67b      	b.n	8009818 <_strtod_l+0x88>
 8009b20:	9b05      	ldr	r3, [sp, #20]
 8009b22:	9807      	ldr	r0, [sp, #28]
 8009b24:	1af3      	subs	r3, r6, r3
 8009b26:	2f00      	cmp	r7, #0
 8009b28:	bf08      	it	eq
 8009b2a:	462f      	moveq	r7, r5
 8009b2c:	2d10      	cmp	r5, #16
 8009b2e:	9306      	str	r3, [sp, #24]
 8009b30:	46a8      	mov	r8, r5
 8009b32:	bfa8      	it	ge
 8009b34:	f04f 0810 	movge.w	r8, #16
 8009b38:	f7f6 fd14 	bl	8000564 <__aeabi_ui2d>
 8009b3c:	2d09      	cmp	r5, #9
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	dd13      	ble.n	8009b6c <_strtod_l+0x3dc>
 8009b44:	4b7b      	ldr	r3, [pc, #492]	; (8009d34 <_strtod_l+0x5a4>)
 8009b46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b4e:	f7f6 fd83 	bl	8000658 <__aeabi_dmul>
 8009b52:	4682      	mov	sl, r0
 8009b54:	4648      	mov	r0, r9
 8009b56:	468b      	mov	fp, r1
 8009b58:	f7f6 fd04 	bl	8000564 <__aeabi_ui2d>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4650      	mov	r0, sl
 8009b62:	4659      	mov	r1, fp
 8009b64:	f7f6 fbc2 	bl	80002ec <__adddf3>
 8009b68:	4682      	mov	sl, r0
 8009b6a:	468b      	mov	fp, r1
 8009b6c:	2d0f      	cmp	r5, #15
 8009b6e:	dc38      	bgt.n	8009be2 <_strtod_l+0x452>
 8009b70:	9b06      	ldr	r3, [sp, #24]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f43f ae50 	beq.w	8009818 <_strtod_l+0x88>
 8009b78:	dd24      	ble.n	8009bc4 <_strtod_l+0x434>
 8009b7a:	2b16      	cmp	r3, #22
 8009b7c:	dc0b      	bgt.n	8009b96 <_strtod_l+0x406>
 8009b7e:	496d      	ldr	r1, [pc, #436]	; (8009d34 <_strtod_l+0x5a4>)
 8009b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b88:	4652      	mov	r2, sl
 8009b8a:	465b      	mov	r3, fp
 8009b8c:	f7f6 fd64 	bl	8000658 <__aeabi_dmul>
 8009b90:	4682      	mov	sl, r0
 8009b92:	468b      	mov	fp, r1
 8009b94:	e640      	b.n	8009818 <_strtod_l+0x88>
 8009b96:	9a06      	ldr	r2, [sp, #24]
 8009b98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	db20      	blt.n	8009be2 <_strtod_l+0x452>
 8009ba0:	4c64      	ldr	r4, [pc, #400]	; (8009d34 <_strtod_l+0x5a4>)
 8009ba2:	f1c5 050f 	rsb	r5, r5, #15
 8009ba6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009baa:	4652      	mov	r2, sl
 8009bac:	465b      	mov	r3, fp
 8009bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb2:	f7f6 fd51 	bl	8000658 <__aeabi_dmul>
 8009bb6:	9b06      	ldr	r3, [sp, #24]
 8009bb8:	1b5d      	subs	r5, r3, r5
 8009bba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009bc2:	e7e3      	b.n	8009b8c <_strtod_l+0x3fc>
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	3316      	adds	r3, #22
 8009bc8:	db0b      	blt.n	8009be2 <_strtod_l+0x452>
 8009bca:	9b05      	ldr	r3, [sp, #20]
 8009bcc:	1b9e      	subs	r6, r3, r6
 8009bce:	4b59      	ldr	r3, [pc, #356]	; (8009d34 <_strtod_l+0x5a4>)
 8009bd0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009bd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	f7f6 fe66 	bl	80008ac <__aeabi_ddiv>
 8009be0:	e7d6      	b.n	8009b90 <_strtod_l+0x400>
 8009be2:	9b06      	ldr	r3, [sp, #24]
 8009be4:	eba5 0808 	sub.w	r8, r5, r8
 8009be8:	4498      	add	r8, r3
 8009bea:	f1b8 0f00 	cmp.w	r8, #0
 8009bee:	dd74      	ble.n	8009cda <_strtod_l+0x54a>
 8009bf0:	f018 030f 	ands.w	r3, r8, #15
 8009bf4:	d00a      	beq.n	8009c0c <_strtod_l+0x47c>
 8009bf6:	494f      	ldr	r1, [pc, #316]	; (8009d34 <_strtod_l+0x5a4>)
 8009bf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bfc:	4652      	mov	r2, sl
 8009bfe:	465b      	mov	r3, fp
 8009c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c04:	f7f6 fd28 	bl	8000658 <__aeabi_dmul>
 8009c08:	4682      	mov	sl, r0
 8009c0a:	468b      	mov	fp, r1
 8009c0c:	f038 080f 	bics.w	r8, r8, #15
 8009c10:	d04f      	beq.n	8009cb2 <_strtod_l+0x522>
 8009c12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009c16:	dd22      	ble.n	8009c5e <_strtod_l+0x4ce>
 8009c18:	2500      	movs	r5, #0
 8009c1a:	462e      	mov	r6, r5
 8009c1c:	9507      	str	r5, [sp, #28]
 8009c1e:	9505      	str	r5, [sp, #20]
 8009c20:	2322      	movs	r3, #34	; 0x22
 8009c22:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009d3c <_strtod_l+0x5ac>
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f43f adf2 	beq.w	8009818 <_strtod_l+0x88>
 8009c34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c36:	4620      	mov	r0, r4
 8009c38:	f001 ff2a 	bl	800ba90 <_Bfree>
 8009c3c:	9905      	ldr	r1, [sp, #20]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f001 ff26 	bl	800ba90 <_Bfree>
 8009c44:	4631      	mov	r1, r6
 8009c46:	4620      	mov	r0, r4
 8009c48:	f001 ff22 	bl	800ba90 <_Bfree>
 8009c4c:	9907      	ldr	r1, [sp, #28]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f001 ff1e 	bl	800ba90 <_Bfree>
 8009c54:	4629      	mov	r1, r5
 8009c56:	4620      	mov	r0, r4
 8009c58:	f001 ff1a 	bl	800ba90 <_Bfree>
 8009c5c:	e5dc      	b.n	8009818 <_strtod_l+0x88>
 8009c5e:	4b36      	ldr	r3, [pc, #216]	; (8009d38 <_strtod_l+0x5a8>)
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	2300      	movs	r3, #0
 8009c64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c68:	4650      	mov	r0, sl
 8009c6a:	4659      	mov	r1, fp
 8009c6c:	4699      	mov	r9, r3
 8009c6e:	f1b8 0f01 	cmp.w	r8, #1
 8009c72:	dc21      	bgt.n	8009cb8 <_strtod_l+0x528>
 8009c74:	b10b      	cbz	r3, 8009c7a <_strtod_l+0x4ea>
 8009c76:	4682      	mov	sl, r0
 8009c78:	468b      	mov	fp, r1
 8009c7a:	4b2f      	ldr	r3, [pc, #188]	; (8009d38 <_strtod_l+0x5a8>)
 8009c7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c84:	4652      	mov	r2, sl
 8009c86:	465b      	mov	r3, fp
 8009c88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c8c:	f7f6 fce4 	bl	8000658 <__aeabi_dmul>
 8009c90:	4b2a      	ldr	r3, [pc, #168]	; (8009d3c <_strtod_l+0x5ac>)
 8009c92:	460a      	mov	r2, r1
 8009c94:	400b      	ands	r3, r1
 8009c96:	492a      	ldr	r1, [pc, #168]	; (8009d40 <_strtod_l+0x5b0>)
 8009c98:	428b      	cmp	r3, r1
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	d8bc      	bhi.n	8009c18 <_strtod_l+0x488>
 8009c9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ca2:	428b      	cmp	r3, r1
 8009ca4:	bf86      	itte	hi
 8009ca6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009d44 <_strtod_l+0x5b4>
 8009caa:	f04f 3aff 	movhi.w	sl, #4294967295
 8009cae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	e084      	b.n	8009dc2 <_strtod_l+0x632>
 8009cb8:	f018 0f01 	tst.w	r8, #1
 8009cbc:	d005      	beq.n	8009cca <_strtod_l+0x53a>
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f7f6 fcc8 	bl	8000658 <__aeabi_dmul>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	9a04      	ldr	r2, [sp, #16]
 8009ccc:	3208      	adds	r2, #8
 8009cce:	f109 0901 	add.w	r9, r9, #1
 8009cd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009cd6:	9204      	str	r2, [sp, #16]
 8009cd8:	e7c9      	b.n	8009c6e <_strtod_l+0x4de>
 8009cda:	d0ea      	beq.n	8009cb2 <_strtod_l+0x522>
 8009cdc:	f1c8 0800 	rsb	r8, r8, #0
 8009ce0:	f018 020f 	ands.w	r2, r8, #15
 8009ce4:	d00a      	beq.n	8009cfc <_strtod_l+0x56c>
 8009ce6:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <_strtod_l+0x5a4>)
 8009ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cec:	4650      	mov	r0, sl
 8009cee:	4659      	mov	r1, fp
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f7f6 fdda 	bl	80008ac <__aeabi_ddiv>
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	468b      	mov	fp, r1
 8009cfc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009d00:	d0d7      	beq.n	8009cb2 <_strtod_l+0x522>
 8009d02:	f1b8 0f1f 	cmp.w	r8, #31
 8009d06:	dd1f      	ble.n	8009d48 <_strtod_l+0x5b8>
 8009d08:	2500      	movs	r5, #0
 8009d0a:	462e      	mov	r6, r5
 8009d0c:	9507      	str	r5, [sp, #28]
 8009d0e:	9505      	str	r5, [sp, #20]
 8009d10:	2322      	movs	r3, #34	; 0x22
 8009d12:	f04f 0a00 	mov.w	sl, #0
 8009d16:	f04f 0b00 	mov.w	fp, #0
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	e786      	b.n	8009c2c <_strtod_l+0x49c>
 8009d1e:	bf00      	nop
 8009d20:	0800d5b1 	.word	0x0800d5b1
 8009d24:	0800d5f4 	.word	0x0800d5f4
 8009d28:	0800d5a9 	.word	0x0800d5a9
 8009d2c:	0800d6e3 	.word	0x0800d6e3
 8009d30:	0800d6df 	.word	0x0800d6df
 8009d34:	0800d858 	.word	0x0800d858
 8009d38:	0800d830 	.word	0x0800d830
 8009d3c:	7ff00000 	.word	0x7ff00000
 8009d40:	7ca00000 	.word	0x7ca00000
 8009d44:	7fefffff 	.word	0x7fefffff
 8009d48:	f018 0310 	ands.w	r3, r8, #16
 8009d4c:	bf18      	it	ne
 8009d4e:	236a      	movne	r3, #106	; 0x6a
 8009d50:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a100 <_strtod_l+0x970>
 8009d54:	9304      	str	r3, [sp, #16]
 8009d56:	4650      	mov	r0, sl
 8009d58:	4659      	mov	r1, fp
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f018 0f01 	tst.w	r8, #1
 8009d60:	d004      	beq.n	8009d6c <_strtod_l+0x5dc>
 8009d62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d66:	f7f6 fc77 	bl	8000658 <__aeabi_dmul>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d70:	f109 0908 	add.w	r9, r9, #8
 8009d74:	d1f2      	bne.n	8009d5c <_strtod_l+0x5cc>
 8009d76:	b10b      	cbz	r3, 8009d7c <_strtod_l+0x5ec>
 8009d78:	4682      	mov	sl, r0
 8009d7a:	468b      	mov	fp, r1
 8009d7c:	9b04      	ldr	r3, [sp, #16]
 8009d7e:	b1c3      	cbz	r3, 8009db2 <_strtod_l+0x622>
 8009d80:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d84:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	4659      	mov	r1, fp
 8009d8c:	dd11      	ble.n	8009db2 <_strtod_l+0x622>
 8009d8e:	2b1f      	cmp	r3, #31
 8009d90:	f340 8124 	ble.w	8009fdc <_strtod_l+0x84c>
 8009d94:	2b34      	cmp	r3, #52	; 0x34
 8009d96:	bfde      	ittt	le
 8009d98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d9c:	f04f 33ff 	movle.w	r3, #4294967295
 8009da0:	fa03 f202 	lslle.w	r2, r3, r2
 8009da4:	f04f 0a00 	mov.w	sl, #0
 8009da8:	bfcc      	ite	gt
 8009daa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009dae:	ea02 0b01 	andle.w	fp, r2, r1
 8009db2:	2200      	movs	r2, #0
 8009db4:	2300      	movs	r3, #0
 8009db6:	4650      	mov	r0, sl
 8009db8:	4659      	mov	r1, fp
 8009dba:	f7f6 feb5 	bl	8000b28 <__aeabi_dcmpeq>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d1a2      	bne.n	8009d08 <_strtod_l+0x578>
 8009dc2:	9b07      	ldr	r3, [sp, #28]
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	9908      	ldr	r1, [sp, #32]
 8009dc8:	462b      	mov	r3, r5
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f001 fec7 	bl	800bb60 <__s2b>
 8009dd2:	9007      	str	r0, [sp, #28]
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f af1f 	beq.w	8009c18 <_strtod_l+0x488>
 8009dda:	9b05      	ldr	r3, [sp, #20]
 8009ddc:	1b9e      	subs	r6, r3, r6
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfb4      	ite	lt
 8009de4:	4633      	movlt	r3, r6
 8009de6:	2300      	movge	r3, #0
 8009de8:	930c      	str	r3, [sp, #48]	; 0x30
 8009dea:	9b06      	ldr	r3, [sp, #24]
 8009dec:	2500      	movs	r5, #0
 8009dee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009df2:	9312      	str	r3, [sp, #72]	; 0x48
 8009df4:	462e      	mov	r6, r5
 8009df6:	9b07      	ldr	r3, [sp, #28]
 8009df8:	4620      	mov	r0, r4
 8009dfa:	6859      	ldr	r1, [r3, #4]
 8009dfc:	f001 fe08 	bl	800ba10 <_Balloc>
 8009e00:	9005      	str	r0, [sp, #20]
 8009e02:	2800      	cmp	r0, #0
 8009e04:	f43f af0c 	beq.w	8009c20 <_strtod_l+0x490>
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	691a      	ldr	r2, [r3, #16]
 8009e0c:	3202      	adds	r2, #2
 8009e0e:	f103 010c 	add.w	r1, r3, #12
 8009e12:	0092      	lsls	r2, r2, #2
 8009e14:	300c      	adds	r0, #12
 8009e16:	f001 fde1 	bl	800b9dc <memcpy>
 8009e1a:	ec4b ab10 	vmov	d0, sl, fp
 8009e1e:	aa1a      	add	r2, sp, #104	; 0x68
 8009e20:	a919      	add	r1, sp, #100	; 0x64
 8009e22:	4620      	mov	r0, r4
 8009e24:	f002 f9e2 	bl	800c1ec <__d2b>
 8009e28:	ec4b ab18 	vmov	d8, sl, fp
 8009e2c:	9018      	str	r0, [sp, #96]	; 0x60
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f aef6 	beq.w	8009c20 <_strtod_l+0x490>
 8009e34:	2101      	movs	r1, #1
 8009e36:	4620      	mov	r0, r4
 8009e38:	f001 ff2c 	bl	800bc94 <__i2b>
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f43f aeee 	beq.w	8009c20 <_strtod_l+0x490>
 8009e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e46:	9904      	ldr	r1, [sp, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bfab      	itete	ge
 8009e4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009e4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009e50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009e52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009e56:	bfac      	ite	ge
 8009e58:	eb03 0902 	addge.w	r9, r3, r2
 8009e5c:	1ad7      	sublt	r7, r2, r3
 8009e5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e60:	eba3 0801 	sub.w	r8, r3, r1
 8009e64:	4490      	add	r8, r2
 8009e66:	4ba1      	ldr	r3, [pc, #644]	; (800a0ec <_strtod_l+0x95c>)
 8009e68:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e6c:	4598      	cmp	r8, r3
 8009e6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e72:	f280 80c7 	bge.w	800a004 <_strtod_l+0x874>
 8009e76:	eba3 0308 	sub.w	r3, r3, r8
 8009e7a:	2b1f      	cmp	r3, #31
 8009e7c:	eba2 0203 	sub.w	r2, r2, r3
 8009e80:	f04f 0101 	mov.w	r1, #1
 8009e84:	f300 80b1 	bgt.w	8009fea <_strtod_l+0x85a>
 8009e88:	fa01 f303 	lsl.w	r3, r1, r3
 8009e8c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e8e:	2300      	movs	r3, #0
 8009e90:	9308      	str	r3, [sp, #32]
 8009e92:	eb09 0802 	add.w	r8, r9, r2
 8009e96:	9b04      	ldr	r3, [sp, #16]
 8009e98:	45c1      	cmp	r9, r8
 8009e9a:	4417      	add	r7, r2
 8009e9c:	441f      	add	r7, r3
 8009e9e:	464b      	mov	r3, r9
 8009ea0:	bfa8      	it	ge
 8009ea2:	4643      	movge	r3, r8
 8009ea4:	42bb      	cmp	r3, r7
 8009ea6:	bfa8      	it	ge
 8009ea8:	463b      	movge	r3, r7
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bfc2      	ittt	gt
 8009eae:	eba8 0803 	subgt.w	r8, r8, r3
 8009eb2:	1aff      	subgt	r7, r7, r3
 8009eb4:	eba9 0903 	subgt.w	r9, r9, r3
 8009eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	dd17      	ble.n	8009eee <_strtod_l+0x75e>
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f001 ffa6 	bl	800be14 <__pow5mult>
 8009ec8:	4606      	mov	r6, r0
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f43f aea8 	beq.w	8009c20 <_strtod_l+0x490>
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f001 fef3 	bl	800bcc0 <__multiply>
 8009eda:	900b      	str	r0, [sp, #44]	; 0x2c
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f43f ae9f 	beq.w	8009c20 <_strtod_l+0x490>
 8009ee2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f001 fdd3 	bl	800ba90 <_Bfree>
 8009eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eec:	9318      	str	r3, [sp, #96]	; 0x60
 8009eee:	f1b8 0f00 	cmp.w	r8, #0
 8009ef2:	f300 808c 	bgt.w	800a00e <_strtod_l+0x87e>
 8009ef6:	9b06      	ldr	r3, [sp, #24]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dd08      	ble.n	8009f0e <_strtod_l+0x77e>
 8009efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009efe:	9905      	ldr	r1, [sp, #20]
 8009f00:	4620      	mov	r0, r4
 8009f02:	f001 ff87 	bl	800be14 <__pow5mult>
 8009f06:	9005      	str	r0, [sp, #20]
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	f43f ae89 	beq.w	8009c20 <_strtod_l+0x490>
 8009f0e:	2f00      	cmp	r7, #0
 8009f10:	dd08      	ble.n	8009f24 <_strtod_l+0x794>
 8009f12:	9905      	ldr	r1, [sp, #20]
 8009f14:	463a      	mov	r2, r7
 8009f16:	4620      	mov	r0, r4
 8009f18:	f001 ffd6 	bl	800bec8 <__lshift>
 8009f1c:	9005      	str	r0, [sp, #20]
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f43f ae7e 	beq.w	8009c20 <_strtod_l+0x490>
 8009f24:	f1b9 0f00 	cmp.w	r9, #0
 8009f28:	dd08      	ble.n	8009f3c <_strtod_l+0x7ac>
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	464a      	mov	r2, r9
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f001 ffca 	bl	800bec8 <__lshift>
 8009f34:	4606      	mov	r6, r0
 8009f36:	2800      	cmp	r0, #0
 8009f38:	f43f ae72 	beq.w	8009c20 <_strtod_l+0x490>
 8009f3c:	9a05      	ldr	r2, [sp, #20]
 8009f3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f40:	4620      	mov	r0, r4
 8009f42:	f002 f84d 	bl	800bfe0 <__mdiff>
 8009f46:	4605      	mov	r5, r0
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	f43f ae69 	beq.w	8009c20 <_strtod_l+0x490>
 8009f4e:	68c3      	ldr	r3, [r0, #12]
 8009f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f52:	2300      	movs	r3, #0
 8009f54:	60c3      	str	r3, [r0, #12]
 8009f56:	4631      	mov	r1, r6
 8009f58:	f002 f826 	bl	800bfa8 <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	da60      	bge.n	800a022 <_strtod_l+0x892>
 8009f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f62:	ea53 030a 	orrs.w	r3, r3, sl
 8009f66:	f040 8082 	bne.w	800a06e <_strtod_l+0x8de>
 8009f6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d17d      	bne.n	800a06e <_strtod_l+0x8de>
 8009f72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f76:	0d1b      	lsrs	r3, r3, #20
 8009f78:	051b      	lsls	r3, r3, #20
 8009f7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f7e:	d976      	bls.n	800a06e <_strtod_l+0x8de>
 8009f80:	696b      	ldr	r3, [r5, #20]
 8009f82:	b913      	cbnz	r3, 8009f8a <_strtod_l+0x7fa>
 8009f84:	692b      	ldr	r3, [r5, #16]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	dd71      	ble.n	800a06e <_strtod_l+0x8de>
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f001 ff9a 	bl	800bec8 <__lshift>
 8009f94:	4631      	mov	r1, r6
 8009f96:	4605      	mov	r5, r0
 8009f98:	f002 f806 	bl	800bfa8 <__mcmp>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	dd66      	ble.n	800a06e <_strtod_l+0x8de>
 8009fa0:	9904      	ldr	r1, [sp, #16]
 8009fa2:	4a53      	ldr	r2, [pc, #332]	; (800a0f0 <_strtod_l+0x960>)
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	2900      	cmp	r1, #0
 8009fa8:	f000 8081 	beq.w	800a0ae <_strtod_l+0x91e>
 8009fac:	ea02 010b 	and.w	r1, r2, fp
 8009fb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009fb4:	dc7b      	bgt.n	800a0ae <_strtod_l+0x91e>
 8009fb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009fba:	f77f aea9 	ble.w	8009d10 <_strtod_l+0x580>
 8009fbe:	4b4d      	ldr	r3, [pc, #308]	; (800a0f4 <_strtod_l+0x964>)
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	4659      	mov	r1, fp
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f7f6 fb47 	bl	8000658 <__aeabi_dmul>
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4303      	orrs	r3, r0
 8009fce:	bf08      	it	eq
 8009fd0:	2322      	moveq	r3, #34	; 0x22
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	468b      	mov	fp, r1
 8009fd6:	bf08      	it	eq
 8009fd8:	6023      	streq	r3, [r4, #0]
 8009fda:	e62b      	b.n	8009c34 <_strtod_l+0x4a4>
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe4:	ea03 0a0a 	and.w	sl, r3, sl
 8009fe8:	e6e3      	b.n	8009db2 <_strtod_l+0x622>
 8009fea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009fee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009ff2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ff6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009ffa:	fa01 f308 	lsl.w	r3, r1, r8
 8009ffe:	9308      	str	r3, [sp, #32]
 800a000:	910d      	str	r1, [sp, #52]	; 0x34
 800a002:	e746      	b.n	8009e92 <_strtod_l+0x702>
 800a004:	2300      	movs	r3, #0
 800a006:	9308      	str	r3, [sp, #32]
 800a008:	2301      	movs	r3, #1
 800a00a:	930d      	str	r3, [sp, #52]	; 0x34
 800a00c:	e741      	b.n	8009e92 <_strtod_l+0x702>
 800a00e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a010:	4642      	mov	r2, r8
 800a012:	4620      	mov	r0, r4
 800a014:	f001 ff58 	bl	800bec8 <__lshift>
 800a018:	9018      	str	r0, [sp, #96]	; 0x60
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f47f af6b 	bne.w	8009ef6 <_strtod_l+0x766>
 800a020:	e5fe      	b.n	8009c20 <_strtod_l+0x490>
 800a022:	465f      	mov	r7, fp
 800a024:	d16e      	bne.n	800a104 <_strtod_l+0x974>
 800a026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a02c:	b342      	cbz	r2, 800a080 <_strtod_l+0x8f0>
 800a02e:	4a32      	ldr	r2, [pc, #200]	; (800a0f8 <_strtod_l+0x968>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d128      	bne.n	800a086 <_strtod_l+0x8f6>
 800a034:	9b04      	ldr	r3, [sp, #16]
 800a036:	4651      	mov	r1, sl
 800a038:	b1eb      	cbz	r3, 800a076 <_strtod_l+0x8e6>
 800a03a:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <_strtod_l+0x960>)
 800a03c:	403b      	ands	r3, r7
 800a03e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a042:	f04f 32ff 	mov.w	r2, #4294967295
 800a046:	d819      	bhi.n	800a07c <_strtod_l+0x8ec>
 800a048:	0d1b      	lsrs	r3, r3, #20
 800a04a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a04e:	fa02 f303 	lsl.w	r3, r2, r3
 800a052:	4299      	cmp	r1, r3
 800a054:	d117      	bne.n	800a086 <_strtod_l+0x8f6>
 800a056:	4b29      	ldr	r3, [pc, #164]	; (800a0fc <_strtod_l+0x96c>)
 800a058:	429f      	cmp	r7, r3
 800a05a:	d102      	bne.n	800a062 <_strtod_l+0x8d2>
 800a05c:	3101      	adds	r1, #1
 800a05e:	f43f addf 	beq.w	8009c20 <_strtod_l+0x490>
 800a062:	4b23      	ldr	r3, [pc, #140]	; (800a0f0 <_strtod_l+0x960>)
 800a064:	403b      	ands	r3, r7
 800a066:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a06a:	f04f 0a00 	mov.w	sl, #0
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1a4      	bne.n	8009fbe <_strtod_l+0x82e>
 800a074:	e5de      	b.n	8009c34 <_strtod_l+0x4a4>
 800a076:	f04f 33ff 	mov.w	r3, #4294967295
 800a07a:	e7ea      	b.n	800a052 <_strtod_l+0x8c2>
 800a07c:	4613      	mov	r3, r2
 800a07e:	e7e8      	b.n	800a052 <_strtod_l+0x8c2>
 800a080:	ea53 030a 	orrs.w	r3, r3, sl
 800a084:	d08c      	beq.n	8009fa0 <_strtod_l+0x810>
 800a086:	9b08      	ldr	r3, [sp, #32]
 800a088:	b1db      	cbz	r3, 800a0c2 <_strtod_l+0x932>
 800a08a:	423b      	tst	r3, r7
 800a08c:	d0ef      	beq.n	800a06e <_strtod_l+0x8de>
 800a08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a090:	9a04      	ldr	r2, [sp, #16]
 800a092:	4650      	mov	r0, sl
 800a094:	4659      	mov	r1, fp
 800a096:	b1c3      	cbz	r3, 800a0ca <_strtod_l+0x93a>
 800a098:	f7ff fb5d 	bl	8009756 <sulp>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	ec51 0b18 	vmov	r0, r1, d8
 800a0a4:	f7f6 f922 	bl	80002ec <__adddf3>
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	e7df      	b.n	800a06e <_strtod_l+0x8de>
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a0b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a0bc:	f04f 3aff 	mov.w	sl, #4294967295
 800a0c0:	e7d5      	b.n	800a06e <_strtod_l+0x8de>
 800a0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c4:	ea13 0f0a 	tst.w	r3, sl
 800a0c8:	e7e0      	b.n	800a08c <_strtod_l+0x8fc>
 800a0ca:	f7ff fb44 	bl	8009756 <sulp>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	ec51 0b18 	vmov	r0, r1, d8
 800a0d6:	f7f6 f907 	bl	80002e8 <__aeabi_dsub>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4682      	mov	sl, r0
 800a0e0:	468b      	mov	fp, r1
 800a0e2:	f7f6 fd21 	bl	8000b28 <__aeabi_dcmpeq>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d0c1      	beq.n	800a06e <_strtod_l+0x8de>
 800a0ea:	e611      	b.n	8009d10 <_strtod_l+0x580>
 800a0ec:	fffffc02 	.word	0xfffffc02
 800a0f0:	7ff00000 	.word	0x7ff00000
 800a0f4:	39500000 	.word	0x39500000
 800a0f8:	000fffff 	.word	0x000fffff
 800a0fc:	7fefffff 	.word	0x7fefffff
 800a100:	0800d608 	.word	0x0800d608
 800a104:	4631      	mov	r1, r6
 800a106:	4628      	mov	r0, r5
 800a108:	f002 f8cc 	bl	800c2a4 <__ratio>
 800a10c:	ec59 8b10 	vmov	r8, r9, d0
 800a110:	ee10 0a10 	vmov	r0, s0
 800a114:	2200      	movs	r2, #0
 800a116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a11a:	4649      	mov	r1, r9
 800a11c:	f7f6 fd18 	bl	8000b50 <__aeabi_dcmple>
 800a120:	2800      	cmp	r0, #0
 800a122:	d07a      	beq.n	800a21a <_strtod_l+0xa8a>
 800a124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d04a      	beq.n	800a1c0 <_strtod_l+0xa30>
 800a12a:	4b95      	ldr	r3, [pc, #596]	; (800a380 <_strtod_l+0xbf0>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a132:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a380 <_strtod_l+0xbf0>
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	4b92      	ldr	r3, [pc, #584]	; (800a384 <_strtod_l+0xbf4>)
 800a13c:	403b      	ands	r3, r7
 800a13e:	930d      	str	r3, [sp, #52]	; 0x34
 800a140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a142:	4b91      	ldr	r3, [pc, #580]	; (800a388 <_strtod_l+0xbf8>)
 800a144:	429a      	cmp	r2, r3
 800a146:	f040 80b0 	bne.w	800a2aa <_strtod_l+0xb1a>
 800a14a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a14e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a152:	ec4b ab10 	vmov	d0, sl, fp
 800a156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a15a:	f001 ffcb 	bl	800c0f4 <__ulp>
 800a15e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a162:	ec53 2b10 	vmov	r2, r3, d0
 800a166:	f7f6 fa77 	bl	8000658 <__aeabi_dmul>
 800a16a:	4652      	mov	r2, sl
 800a16c:	465b      	mov	r3, fp
 800a16e:	f7f6 f8bd 	bl	80002ec <__adddf3>
 800a172:	460b      	mov	r3, r1
 800a174:	4983      	ldr	r1, [pc, #524]	; (800a384 <_strtod_l+0xbf4>)
 800a176:	4a85      	ldr	r2, [pc, #532]	; (800a38c <_strtod_l+0xbfc>)
 800a178:	4019      	ands	r1, r3
 800a17a:	4291      	cmp	r1, r2
 800a17c:	4682      	mov	sl, r0
 800a17e:	d960      	bls.n	800a242 <_strtod_l+0xab2>
 800a180:	ee18 3a90 	vmov	r3, s17
 800a184:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a188:	4293      	cmp	r3, r2
 800a18a:	d104      	bne.n	800a196 <_strtod_l+0xa06>
 800a18c:	ee18 3a10 	vmov	r3, s16
 800a190:	3301      	adds	r3, #1
 800a192:	f43f ad45 	beq.w	8009c20 <_strtod_l+0x490>
 800a196:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a398 <_strtod_l+0xc08>
 800a19a:	f04f 3aff 	mov.w	sl, #4294967295
 800a19e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f001 fc75 	bl	800ba90 <_Bfree>
 800a1a6:	9905      	ldr	r1, [sp, #20]
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f001 fc71 	bl	800ba90 <_Bfree>
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f001 fc6d 	bl	800ba90 <_Bfree>
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f001 fc69 	bl	800ba90 <_Bfree>
 800a1be:	e61a      	b.n	8009df6 <_strtod_l+0x666>
 800a1c0:	f1ba 0f00 	cmp.w	sl, #0
 800a1c4:	d11b      	bne.n	800a1fe <_strtod_l+0xa6e>
 800a1c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1ca:	b9f3      	cbnz	r3, 800a20a <_strtod_l+0xa7a>
 800a1cc:	4b6c      	ldr	r3, [pc, #432]	; (800a380 <_strtod_l+0xbf0>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 fcb2 	bl	8000b3c <__aeabi_dcmplt>
 800a1d8:	b9d0      	cbnz	r0, 800a210 <_strtod_l+0xa80>
 800a1da:	4640      	mov	r0, r8
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4b6c      	ldr	r3, [pc, #432]	; (800a390 <_strtod_l+0xc00>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f7f6 fa39 	bl	8000658 <__aeabi_dmul>
 800a1e6:	4680      	mov	r8, r0
 800a1e8:	4689      	mov	r9, r1
 800a1ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a1ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a1f2:	9315      	str	r3, [sp, #84]	; 0x54
 800a1f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a1f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1fc:	e79d      	b.n	800a13a <_strtod_l+0x9aa>
 800a1fe:	f1ba 0f01 	cmp.w	sl, #1
 800a202:	d102      	bne.n	800a20a <_strtod_l+0xa7a>
 800a204:	2f00      	cmp	r7, #0
 800a206:	f43f ad83 	beq.w	8009d10 <_strtod_l+0x580>
 800a20a:	4b62      	ldr	r3, [pc, #392]	; (800a394 <_strtod_l+0xc04>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	e78e      	b.n	800a12e <_strtod_l+0x99e>
 800a210:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a390 <_strtod_l+0xc00>
 800a214:	f04f 0800 	mov.w	r8, #0
 800a218:	e7e7      	b.n	800a1ea <_strtod_l+0xa5a>
 800a21a:	4b5d      	ldr	r3, [pc, #372]	; (800a390 <_strtod_l+0xc00>)
 800a21c:	4640      	mov	r0, r8
 800a21e:	4649      	mov	r1, r9
 800a220:	2200      	movs	r2, #0
 800a222:	f7f6 fa19 	bl	8000658 <__aeabi_dmul>
 800a226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a228:	4680      	mov	r8, r0
 800a22a:	4689      	mov	r9, r1
 800a22c:	b933      	cbnz	r3, 800a23c <_strtod_l+0xaac>
 800a22e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a232:	900e      	str	r0, [sp, #56]	; 0x38
 800a234:	930f      	str	r3, [sp, #60]	; 0x3c
 800a236:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a23a:	e7dd      	b.n	800a1f8 <_strtod_l+0xa68>
 800a23c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a240:	e7f9      	b.n	800a236 <_strtod_l+0xaa6>
 800a242:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1a8      	bne.n	800a19e <_strtod_l+0xa0e>
 800a24c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a250:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a252:	0d1b      	lsrs	r3, r3, #20
 800a254:	051b      	lsls	r3, r3, #20
 800a256:	429a      	cmp	r2, r3
 800a258:	d1a1      	bne.n	800a19e <_strtod_l+0xa0e>
 800a25a:	4640      	mov	r0, r8
 800a25c:	4649      	mov	r1, r9
 800a25e:	f7f6 fd5b 	bl	8000d18 <__aeabi_d2lz>
 800a262:	f7f6 f9cb 	bl	80005fc <__aeabi_l2d>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4640      	mov	r0, r8
 800a26c:	4649      	mov	r1, r9
 800a26e:	f7f6 f83b 	bl	80002e8 <__aeabi_dsub>
 800a272:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a278:	ea43 030a 	orr.w	r3, r3, sl
 800a27c:	4313      	orrs	r3, r2
 800a27e:	4680      	mov	r8, r0
 800a280:	4689      	mov	r9, r1
 800a282:	d055      	beq.n	800a330 <_strtod_l+0xba0>
 800a284:	a336      	add	r3, pc, #216	; (adr r3, 800a360 <_strtod_l+0xbd0>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f6 fc57 	bl	8000b3c <__aeabi_dcmplt>
 800a28e:	2800      	cmp	r0, #0
 800a290:	f47f acd0 	bne.w	8009c34 <_strtod_l+0x4a4>
 800a294:	a334      	add	r3, pc, #208	; (adr r3, 800a368 <_strtod_l+0xbd8>)
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	f7f6 fc6b 	bl	8000b78 <__aeabi_dcmpgt>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	f43f af7b 	beq.w	800a19e <_strtod_l+0xa0e>
 800a2a8:	e4c4      	b.n	8009c34 <_strtod_l+0x4a4>
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	b333      	cbz	r3, 800a2fc <_strtod_l+0xb6c>
 800a2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2b4:	d822      	bhi.n	800a2fc <_strtod_l+0xb6c>
 800a2b6:	a32e      	add	r3, pc, #184	; (adr r3, 800a370 <_strtod_l+0xbe0>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	4640      	mov	r0, r8
 800a2be:	4649      	mov	r1, r9
 800a2c0:	f7f6 fc46 	bl	8000b50 <__aeabi_dcmple>
 800a2c4:	b1a0      	cbz	r0, 800a2f0 <_strtod_l+0xb60>
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	f7f6 fc9d 	bl	8000c08 <__aeabi_d2uiz>
 800a2ce:	2801      	cmp	r0, #1
 800a2d0:	bf38      	it	cc
 800a2d2:	2001      	movcc	r0, #1
 800a2d4:	f7f6 f946 	bl	8000564 <__aeabi_ui2d>
 800a2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4689      	mov	r9, r1
 800a2de:	bb23      	cbnz	r3, 800a32a <_strtod_l+0xb9a>
 800a2e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2e4:	9010      	str	r0, [sp, #64]	; 0x40
 800a2e6:	9311      	str	r3, [sp, #68]	; 0x44
 800a2e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2f8:	1a9b      	subs	r3, r3, r2
 800a2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a300:	eeb0 0a48 	vmov.f32	s0, s16
 800a304:	eef0 0a68 	vmov.f32	s1, s17
 800a308:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a30c:	f001 fef2 	bl	800c0f4 <__ulp>
 800a310:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a314:	ec53 2b10 	vmov	r2, r3, d0
 800a318:	f7f6 f99e 	bl	8000658 <__aeabi_dmul>
 800a31c:	ec53 2b18 	vmov	r2, r3, d8
 800a320:	f7f5 ffe4 	bl	80002ec <__adddf3>
 800a324:	4682      	mov	sl, r0
 800a326:	468b      	mov	fp, r1
 800a328:	e78d      	b.n	800a246 <_strtod_l+0xab6>
 800a32a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a32e:	e7db      	b.n	800a2e8 <_strtod_l+0xb58>
 800a330:	a311      	add	r3, pc, #68	; (adr r3, 800a378 <_strtod_l+0xbe8>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f6 fc01 	bl	8000b3c <__aeabi_dcmplt>
 800a33a:	e7b2      	b.n	800a2a2 <_strtod_l+0xb12>
 800a33c:	2300      	movs	r3, #0
 800a33e:	930a      	str	r3, [sp, #40]	; 0x28
 800a340:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a342:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	f7ff ba6b 	b.w	8009820 <_strtod_l+0x90>
 800a34a:	2a65      	cmp	r2, #101	; 0x65
 800a34c:	f43f ab5f 	beq.w	8009a0e <_strtod_l+0x27e>
 800a350:	2a45      	cmp	r2, #69	; 0x45
 800a352:	f43f ab5c 	beq.w	8009a0e <_strtod_l+0x27e>
 800a356:	2301      	movs	r3, #1
 800a358:	f7ff bb94 	b.w	8009a84 <_strtod_l+0x2f4>
 800a35c:	f3af 8000 	nop.w
 800a360:	94a03595 	.word	0x94a03595
 800a364:	3fdfffff 	.word	0x3fdfffff
 800a368:	35afe535 	.word	0x35afe535
 800a36c:	3fe00000 	.word	0x3fe00000
 800a370:	ffc00000 	.word	0xffc00000
 800a374:	41dfffff 	.word	0x41dfffff
 800a378:	94a03595 	.word	0x94a03595
 800a37c:	3fcfffff 	.word	0x3fcfffff
 800a380:	3ff00000 	.word	0x3ff00000
 800a384:	7ff00000 	.word	0x7ff00000
 800a388:	7fe00000 	.word	0x7fe00000
 800a38c:	7c9fffff 	.word	0x7c9fffff
 800a390:	3fe00000 	.word	0x3fe00000
 800a394:	bff00000 	.word	0xbff00000
 800a398:	7fefffff 	.word	0x7fefffff

0800a39c <_strtod_r>:
 800a39c:	4b01      	ldr	r3, [pc, #4]	; (800a3a4 <_strtod_r+0x8>)
 800a39e:	f7ff b9f7 	b.w	8009790 <_strtod_l>
 800a3a2:	bf00      	nop
 800a3a4:	20000074 	.word	0x20000074

0800a3a8 <strtok>:
 800a3a8:	4b16      	ldr	r3, [pc, #88]	; (800a404 <strtok+0x5c>)
 800a3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3ac:	681e      	ldr	r6, [r3, #0]
 800a3ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	b9fc      	cbnz	r4, 800a3f4 <strtok+0x4c>
 800a3b4:	2050      	movs	r0, #80	; 0x50
 800a3b6:	9101      	str	r1, [sp, #4]
 800a3b8:	f7fe f9d6 	bl	8008768 <malloc>
 800a3bc:	9901      	ldr	r1, [sp, #4]
 800a3be:	65b0      	str	r0, [r6, #88]	; 0x58
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	b920      	cbnz	r0, 800a3ce <strtok+0x26>
 800a3c4:	4b10      	ldr	r3, [pc, #64]	; (800a408 <strtok+0x60>)
 800a3c6:	4811      	ldr	r0, [pc, #68]	; (800a40c <strtok+0x64>)
 800a3c8:	2157      	movs	r1, #87	; 0x57
 800a3ca:	f000 f8d7 	bl	800a57c <__assert_func>
 800a3ce:	e9c0 4400 	strd	r4, r4, [r0]
 800a3d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a3d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a3da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a3de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a3e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a3e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a3ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a3ee:	6184      	str	r4, [r0, #24]
 800a3f0:	7704      	strb	r4, [r0, #28]
 800a3f2:	6244      	str	r4, [r0, #36]	; 0x24
 800a3f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	b002      	add	sp, #8
 800a3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a400:	f000 b806 	b.w	800a410 <__strtok_r>
 800a404:	2000000c 	.word	0x2000000c
 800a408:	0800d630 	.word	0x0800d630
 800a40c:	0800d647 	.word	0x0800d647

0800a410 <__strtok_r>:
 800a410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a412:	b908      	cbnz	r0, 800a418 <__strtok_r+0x8>
 800a414:	6810      	ldr	r0, [r2, #0]
 800a416:	b188      	cbz	r0, 800a43c <__strtok_r+0x2c>
 800a418:	4604      	mov	r4, r0
 800a41a:	4620      	mov	r0, r4
 800a41c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a420:	460f      	mov	r7, r1
 800a422:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a426:	b91e      	cbnz	r6, 800a430 <__strtok_r+0x20>
 800a428:	b965      	cbnz	r5, 800a444 <__strtok_r+0x34>
 800a42a:	6015      	str	r5, [r2, #0]
 800a42c:	4628      	mov	r0, r5
 800a42e:	e005      	b.n	800a43c <__strtok_r+0x2c>
 800a430:	42b5      	cmp	r5, r6
 800a432:	d1f6      	bne.n	800a422 <__strtok_r+0x12>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f0      	bne.n	800a41a <__strtok_r+0xa>
 800a438:	6014      	str	r4, [r2, #0]
 800a43a:	7003      	strb	r3, [r0, #0]
 800a43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a43e:	461c      	mov	r4, r3
 800a440:	e00c      	b.n	800a45c <__strtok_r+0x4c>
 800a442:	b915      	cbnz	r5, 800a44a <__strtok_r+0x3a>
 800a444:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a448:	460e      	mov	r6, r1
 800a44a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a44e:	42ab      	cmp	r3, r5
 800a450:	d1f7      	bne.n	800a442 <__strtok_r+0x32>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0f3      	beq.n	800a43e <__strtok_r+0x2e>
 800a456:	2300      	movs	r3, #0
 800a458:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a45c:	6014      	str	r4, [r2, #0]
 800a45e:	e7ed      	b.n	800a43c <__strtok_r+0x2c>

0800a460 <_strtol_l.constprop.0>:
 800a460:	2b01      	cmp	r3, #1
 800a462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a466:	d001      	beq.n	800a46c <_strtol_l.constprop.0+0xc>
 800a468:	2b24      	cmp	r3, #36	; 0x24
 800a46a:	d906      	bls.n	800a47a <_strtol_l.constprop.0+0x1a>
 800a46c:	f7fe f952 	bl	8008714 <__errno>
 800a470:	2316      	movs	r3, #22
 800a472:	6003      	str	r3, [r0, #0]
 800a474:	2000      	movs	r0, #0
 800a476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a47a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a560 <_strtol_l.constprop.0+0x100>
 800a47e:	460d      	mov	r5, r1
 800a480:	462e      	mov	r6, r5
 800a482:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a486:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a48a:	f017 0708 	ands.w	r7, r7, #8
 800a48e:	d1f7      	bne.n	800a480 <_strtol_l.constprop.0+0x20>
 800a490:	2c2d      	cmp	r4, #45	; 0x2d
 800a492:	d132      	bne.n	800a4fa <_strtol_l.constprop.0+0x9a>
 800a494:	782c      	ldrb	r4, [r5, #0]
 800a496:	2701      	movs	r7, #1
 800a498:	1cb5      	adds	r5, r6, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d05b      	beq.n	800a556 <_strtol_l.constprop.0+0xf6>
 800a49e:	2b10      	cmp	r3, #16
 800a4a0:	d109      	bne.n	800a4b6 <_strtol_l.constprop.0+0x56>
 800a4a2:	2c30      	cmp	r4, #48	; 0x30
 800a4a4:	d107      	bne.n	800a4b6 <_strtol_l.constprop.0+0x56>
 800a4a6:	782c      	ldrb	r4, [r5, #0]
 800a4a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a4ac:	2c58      	cmp	r4, #88	; 0x58
 800a4ae:	d14d      	bne.n	800a54c <_strtol_l.constprop.0+0xec>
 800a4b0:	786c      	ldrb	r4, [r5, #1]
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	3502      	adds	r5, #2
 800a4b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a4ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4be:	f04f 0c00 	mov.w	ip, #0
 800a4c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a4c6:	4666      	mov	r6, ip
 800a4c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a4cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a4d0:	f1be 0f09 	cmp.w	lr, #9
 800a4d4:	d816      	bhi.n	800a504 <_strtol_l.constprop.0+0xa4>
 800a4d6:	4674      	mov	r4, lr
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	dd24      	ble.n	800a526 <_strtol_l.constprop.0+0xc6>
 800a4dc:	f1bc 0f00 	cmp.w	ip, #0
 800a4e0:	db1e      	blt.n	800a520 <_strtol_l.constprop.0+0xc0>
 800a4e2:	45b1      	cmp	r9, r6
 800a4e4:	d31c      	bcc.n	800a520 <_strtol_l.constprop.0+0xc0>
 800a4e6:	d101      	bne.n	800a4ec <_strtol_l.constprop.0+0x8c>
 800a4e8:	45a2      	cmp	sl, r4
 800a4ea:	db19      	blt.n	800a520 <_strtol_l.constprop.0+0xc0>
 800a4ec:	fb06 4603 	mla	r6, r6, r3, r4
 800a4f0:	f04f 0c01 	mov.w	ip, #1
 800a4f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4f8:	e7e8      	b.n	800a4cc <_strtol_l.constprop.0+0x6c>
 800a4fa:	2c2b      	cmp	r4, #43	; 0x2b
 800a4fc:	bf04      	itt	eq
 800a4fe:	782c      	ldrbeq	r4, [r5, #0]
 800a500:	1cb5      	addeq	r5, r6, #2
 800a502:	e7ca      	b.n	800a49a <_strtol_l.constprop.0+0x3a>
 800a504:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a508:	f1be 0f19 	cmp.w	lr, #25
 800a50c:	d801      	bhi.n	800a512 <_strtol_l.constprop.0+0xb2>
 800a50e:	3c37      	subs	r4, #55	; 0x37
 800a510:	e7e2      	b.n	800a4d8 <_strtol_l.constprop.0+0x78>
 800a512:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a516:	f1be 0f19 	cmp.w	lr, #25
 800a51a:	d804      	bhi.n	800a526 <_strtol_l.constprop.0+0xc6>
 800a51c:	3c57      	subs	r4, #87	; 0x57
 800a51e:	e7db      	b.n	800a4d8 <_strtol_l.constprop.0+0x78>
 800a520:	f04f 3cff 	mov.w	ip, #4294967295
 800a524:	e7e6      	b.n	800a4f4 <_strtol_l.constprop.0+0x94>
 800a526:	f1bc 0f00 	cmp.w	ip, #0
 800a52a:	da05      	bge.n	800a538 <_strtol_l.constprop.0+0xd8>
 800a52c:	2322      	movs	r3, #34	; 0x22
 800a52e:	6003      	str	r3, [r0, #0]
 800a530:	4646      	mov	r6, r8
 800a532:	b942      	cbnz	r2, 800a546 <_strtol_l.constprop.0+0xe6>
 800a534:	4630      	mov	r0, r6
 800a536:	e79e      	b.n	800a476 <_strtol_l.constprop.0+0x16>
 800a538:	b107      	cbz	r7, 800a53c <_strtol_l.constprop.0+0xdc>
 800a53a:	4276      	negs	r6, r6
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	d0f9      	beq.n	800a534 <_strtol_l.constprop.0+0xd4>
 800a540:	f1bc 0f00 	cmp.w	ip, #0
 800a544:	d000      	beq.n	800a548 <_strtol_l.constprop.0+0xe8>
 800a546:	1e69      	subs	r1, r5, #1
 800a548:	6011      	str	r1, [r2, #0]
 800a54a:	e7f3      	b.n	800a534 <_strtol_l.constprop.0+0xd4>
 800a54c:	2430      	movs	r4, #48	; 0x30
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1b1      	bne.n	800a4b6 <_strtol_l.constprop.0+0x56>
 800a552:	2308      	movs	r3, #8
 800a554:	e7af      	b.n	800a4b6 <_strtol_l.constprop.0+0x56>
 800a556:	2c30      	cmp	r4, #48	; 0x30
 800a558:	d0a5      	beq.n	800a4a6 <_strtol_l.constprop.0+0x46>
 800a55a:	230a      	movs	r3, #10
 800a55c:	e7ab      	b.n	800a4b6 <_strtol_l.constprop.0+0x56>
 800a55e:	bf00      	nop
 800a560:	0800d49d 	.word	0x0800d49d

0800a564 <_strtol_r>:
 800a564:	f7ff bf7c 	b.w	800a460 <_strtol_l.constprop.0>

0800a568 <strtol>:
 800a568:	4613      	mov	r3, r2
 800a56a:	460a      	mov	r2, r1
 800a56c:	4601      	mov	r1, r0
 800a56e:	4802      	ldr	r0, [pc, #8]	; (800a578 <strtol+0x10>)
 800a570:	6800      	ldr	r0, [r0, #0]
 800a572:	f7ff bf75 	b.w	800a460 <_strtol_l.constprop.0>
 800a576:	bf00      	nop
 800a578:	2000000c 	.word	0x2000000c

0800a57c <__assert_func>:
 800a57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a57e:	4614      	mov	r4, r2
 800a580:	461a      	mov	r2, r3
 800a582:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <__assert_func+0x2c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4605      	mov	r5, r0
 800a588:	68d8      	ldr	r0, [r3, #12]
 800a58a:	b14c      	cbz	r4, 800a5a0 <__assert_func+0x24>
 800a58c:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <__assert_func+0x30>)
 800a58e:	9100      	str	r1, [sp, #0]
 800a590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a594:	4906      	ldr	r1, [pc, #24]	; (800a5b0 <__assert_func+0x34>)
 800a596:	462b      	mov	r3, r5
 800a598:	f000 fe88 	bl	800b2ac <fiprintf>
 800a59c:	f002 faae 	bl	800cafc <abort>
 800a5a0:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <__assert_func+0x38>)
 800a5a2:	461c      	mov	r4, r3
 800a5a4:	e7f3      	b.n	800a58e <__assert_func+0x12>
 800a5a6:	bf00      	nop
 800a5a8:	2000000c 	.word	0x2000000c
 800a5ac:	0800d6a4 	.word	0x0800d6a4
 800a5b0:	0800d6b1 	.word	0x0800d6b1
 800a5b4:	0800d6df 	.word	0x0800d6df

0800a5b8 <quorem>:
 800a5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	6903      	ldr	r3, [r0, #16]
 800a5be:	690c      	ldr	r4, [r1, #16]
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	f2c0 8081 	blt.w	800a6ca <quorem+0x112>
 800a5c8:	3c01      	subs	r4, #1
 800a5ca:	f101 0814 	add.w	r8, r1, #20
 800a5ce:	f100 0514 	add.w	r5, r0, #20
 800a5d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5d6:	9301      	str	r3, [sp, #4]
 800a5d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5f0:	d331      	bcc.n	800a656 <quorem+0x9e>
 800a5f2:	f04f 0e00 	mov.w	lr, #0
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	46ac      	mov	ip, r5
 800a5fa:	46f2      	mov	sl, lr
 800a5fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a600:	b293      	uxth	r3, r2
 800a602:	fb06 e303 	mla	r3, r6, r3, lr
 800a606:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	ebaa 0303 	sub.w	r3, sl, r3
 800a610:	f8dc a000 	ldr.w	sl, [ip]
 800a614:	0c12      	lsrs	r2, r2, #16
 800a616:	fa13 f38a 	uxtah	r3, r3, sl
 800a61a:	fb06 e202 	mla	r2, r6, r2, lr
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	9b00      	ldr	r3, [sp, #0]
 800a622:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a626:	b292      	uxth	r2, r2
 800a628:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a62c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a630:	f8bd 3000 	ldrh.w	r3, [sp]
 800a634:	4581      	cmp	r9, r0
 800a636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a63a:	f84c 3b04 	str.w	r3, [ip], #4
 800a63e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a642:	d2db      	bcs.n	800a5fc <quorem+0x44>
 800a644:	f855 300b 	ldr.w	r3, [r5, fp]
 800a648:	b92b      	cbnz	r3, 800a656 <quorem+0x9e>
 800a64a:	9b01      	ldr	r3, [sp, #4]
 800a64c:	3b04      	subs	r3, #4
 800a64e:	429d      	cmp	r5, r3
 800a650:	461a      	mov	r2, r3
 800a652:	d32e      	bcc.n	800a6b2 <quorem+0xfa>
 800a654:	613c      	str	r4, [r7, #16]
 800a656:	4638      	mov	r0, r7
 800a658:	f001 fca6 	bl	800bfa8 <__mcmp>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	db24      	blt.n	800a6aa <quorem+0xf2>
 800a660:	3601      	adds	r6, #1
 800a662:	4628      	mov	r0, r5
 800a664:	f04f 0c00 	mov.w	ip, #0
 800a668:	f858 2b04 	ldr.w	r2, [r8], #4
 800a66c:	f8d0 e000 	ldr.w	lr, [r0]
 800a670:	b293      	uxth	r3, r2
 800a672:	ebac 0303 	sub.w	r3, ip, r3
 800a676:	0c12      	lsrs	r2, r2, #16
 800a678:	fa13 f38e 	uxtah	r3, r3, lr
 800a67c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a684:	b29b      	uxth	r3, r3
 800a686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a68a:	45c1      	cmp	r9, r8
 800a68c:	f840 3b04 	str.w	r3, [r0], #4
 800a690:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a694:	d2e8      	bcs.n	800a668 <quorem+0xb0>
 800a696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a69e:	b922      	cbnz	r2, 800a6aa <quorem+0xf2>
 800a6a0:	3b04      	subs	r3, #4
 800a6a2:	429d      	cmp	r5, r3
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	d30a      	bcc.n	800a6be <quorem+0x106>
 800a6a8:	613c      	str	r4, [r7, #16]
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	b003      	add	sp, #12
 800a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d1cc      	bne.n	800a654 <quorem+0x9c>
 800a6ba:	3c01      	subs	r4, #1
 800a6bc:	e7c7      	b.n	800a64e <quorem+0x96>
 800a6be:	6812      	ldr	r2, [r2, #0]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	d1f0      	bne.n	800a6a8 <quorem+0xf0>
 800a6c6:	3c01      	subs	r4, #1
 800a6c8:	e7eb      	b.n	800a6a2 <quorem+0xea>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e7ee      	b.n	800a6ac <quorem+0xf4>
	...

0800a6d0 <_dtoa_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	ed2d 8b04 	vpush	{d8-d9}
 800a6d8:	ec57 6b10 	vmov	r6, r7, d0
 800a6dc:	b093      	sub	sp, #76	; 0x4c
 800a6de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6e4:	9106      	str	r1, [sp, #24]
 800a6e6:	ee10 aa10 	vmov	sl, s0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f0:	46bb      	mov	fp, r7
 800a6f2:	b975      	cbnz	r5, 800a712 <_dtoa_r+0x42>
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	f7fe f837 	bl	8008768 <malloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6260      	str	r0, [r4, #36]	; 0x24
 800a6fe:	b920      	cbnz	r0, 800a70a <_dtoa_r+0x3a>
 800a700:	4ba7      	ldr	r3, [pc, #668]	; (800a9a0 <_dtoa_r+0x2d0>)
 800a702:	21ea      	movs	r1, #234	; 0xea
 800a704:	48a7      	ldr	r0, [pc, #668]	; (800a9a4 <_dtoa_r+0x2d4>)
 800a706:	f7ff ff39 	bl	800a57c <__assert_func>
 800a70a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a70e:	6005      	str	r5, [r0, #0]
 800a710:	60c5      	str	r5, [r0, #12]
 800a712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a714:	6819      	ldr	r1, [r3, #0]
 800a716:	b151      	cbz	r1, 800a72e <_dtoa_r+0x5e>
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	604a      	str	r2, [r1, #4]
 800a71c:	2301      	movs	r3, #1
 800a71e:	4093      	lsls	r3, r2
 800a720:	608b      	str	r3, [r1, #8]
 800a722:	4620      	mov	r0, r4
 800a724:	f001 f9b4 	bl	800ba90 <_Bfree>
 800a728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	1e3b      	subs	r3, r7, #0
 800a730:	bfaa      	itet	ge
 800a732:	2300      	movge	r3, #0
 800a734:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a738:	f8c8 3000 	strge.w	r3, [r8]
 800a73c:	4b9a      	ldr	r3, [pc, #616]	; (800a9a8 <_dtoa_r+0x2d8>)
 800a73e:	bfbc      	itt	lt
 800a740:	2201      	movlt	r2, #1
 800a742:	f8c8 2000 	strlt.w	r2, [r8]
 800a746:	ea33 030b 	bics.w	r3, r3, fp
 800a74a:	d11b      	bne.n	800a784 <_dtoa_r+0xb4>
 800a74c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a74e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a758:	4333      	orrs	r3, r6
 800a75a:	f000 8592 	beq.w	800b282 <_dtoa_r+0xbb2>
 800a75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a760:	b963      	cbnz	r3, 800a77c <_dtoa_r+0xac>
 800a762:	4b92      	ldr	r3, [pc, #584]	; (800a9ac <_dtoa_r+0x2dc>)
 800a764:	e022      	b.n	800a7ac <_dtoa_r+0xdc>
 800a766:	4b92      	ldr	r3, [pc, #584]	; (800a9b0 <_dtoa_r+0x2e0>)
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	3308      	adds	r3, #8
 800a76c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	9801      	ldr	r0, [sp, #4]
 800a772:	b013      	add	sp, #76	; 0x4c
 800a774:	ecbd 8b04 	vpop	{d8-d9}
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	4b8b      	ldr	r3, [pc, #556]	; (800a9ac <_dtoa_r+0x2dc>)
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	3303      	adds	r3, #3
 800a782:	e7f3      	b.n	800a76c <_dtoa_r+0x9c>
 800a784:	2200      	movs	r2, #0
 800a786:	2300      	movs	r3, #0
 800a788:	4650      	mov	r0, sl
 800a78a:	4659      	mov	r1, fp
 800a78c:	f7f6 f9cc 	bl	8000b28 <__aeabi_dcmpeq>
 800a790:	ec4b ab19 	vmov	d9, sl, fp
 800a794:	4680      	mov	r8, r0
 800a796:	b158      	cbz	r0, 800a7b0 <_dtoa_r+0xe0>
 800a798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a79a:	2301      	movs	r3, #1
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 856b 	beq.w	800b27c <_dtoa_r+0xbac>
 800a7a6:	4883      	ldr	r0, [pc, #524]	; (800a9b4 <_dtoa_r+0x2e4>)
 800a7a8:	6018      	str	r0, [r3, #0]
 800a7aa:	1e43      	subs	r3, r0, #1
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	e7df      	b.n	800a770 <_dtoa_r+0xa0>
 800a7b0:	ec4b ab10 	vmov	d0, sl, fp
 800a7b4:	aa10      	add	r2, sp, #64	; 0x40
 800a7b6:	a911      	add	r1, sp, #68	; 0x44
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f001 fd17 	bl	800c1ec <__d2b>
 800a7be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a7c2:	ee08 0a10 	vmov	s16, r0
 800a7c6:	2d00      	cmp	r5, #0
 800a7c8:	f000 8084 	beq.w	800a8d4 <_dtoa_r+0x204>
 800a7cc:	ee19 3a90 	vmov	r3, s19
 800a7d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a7d8:	4656      	mov	r6, sl
 800a7da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a7de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a7e6:	4b74      	ldr	r3, [pc, #464]	; (800a9b8 <_dtoa_r+0x2e8>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	f7f5 fd7b 	bl	80002e8 <__aeabi_dsub>
 800a7f2:	a365      	add	r3, pc, #404	; (adr r3, 800a988 <_dtoa_r+0x2b8>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f7f5 ff2e 	bl	8000658 <__aeabi_dmul>
 800a7fc:	a364      	add	r3, pc, #400	; (adr r3, 800a990 <_dtoa_r+0x2c0>)
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f7f5 fd73 	bl	80002ec <__adddf3>
 800a806:	4606      	mov	r6, r0
 800a808:	4628      	mov	r0, r5
 800a80a:	460f      	mov	r7, r1
 800a80c:	f7f5 feba 	bl	8000584 <__aeabi_i2d>
 800a810:	a361      	add	r3, pc, #388	; (adr r3, 800a998 <_dtoa_r+0x2c8>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f5 ff1f 	bl	8000658 <__aeabi_dmul>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4630      	mov	r0, r6
 800a820:	4639      	mov	r1, r7
 800a822:	f7f5 fd63 	bl	80002ec <__adddf3>
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	f7f6 f9c5 	bl	8000bb8 <__aeabi_d2iz>
 800a82e:	2200      	movs	r2, #0
 800a830:	9000      	str	r0, [sp, #0]
 800a832:	2300      	movs	r3, #0
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	f7f6 f980 	bl	8000b3c <__aeabi_dcmplt>
 800a83c:	b150      	cbz	r0, 800a854 <_dtoa_r+0x184>
 800a83e:	9800      	ldr	r0, [sp, #0]
 800a840:	f7f5 fea0 	bl	8000584 <__aeabi_i2d>
 800a844:	4632      	mov	r2, r6
 800a846:	463b      	mov	r3, r7
 800a848:	f7f6 f96e 	bl	8000b28 <__aeabi_dcmpeq>
 800a84c:	b910      	cbnz	r0, 800a854 <_dtoa_r+0x184>
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	3b01      	subs	r3, #1
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	9b00      	ldr	r3, [sp, #0]
 800a856:	2b16      	cmp	r3, #22
 800a858:	d85a      	bhi.n	800a910 <_dtoa_r+0x240>
 800a85a:	9a00      	ldr	r2, [sp, #0]
 800a85c:	4b57      	ldr	r3, [pc, #348]	; (800a9bc <_dtoa_r+0x2ec>)
 800a85e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	ec51 0b19 	vmov	r0, r1, d9
 800a86a:	f7f6 f967 	bl	8000b3c <__aeabi_dcmplt>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d050      	beq.n	800a914 <_dtoa_r+0x244>
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	3b01      	subs	r3, #1
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	2300      	movs	r3, #0
 800a87a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a87e:	1b5d      	subs	r5, r3, r5
 800a880:	1e6b      	subs	r3, r5, #1
 800a882:	9305      	str	r3, [sp, #20]
 800a884:	bf45      	ittet	mi
 800a886:	f1c5 0301 	rsbmi	r3, r5, #1
 800a88a:	9304      	strmi	r3, [sp, #16]
 800a88c:	2300      	movpl	r3, #0
 800a88e:	2300      	movmi	r3, #0
 800a890:	bf4c      	ite	mi
 800a892:	9305      	strmi	r3, [sp, #20]
 800a894:	9304      	strpl	r3, [sp, #16]
 800a896:	9b00      	ldr	r3, [sp, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db3d      	blt.n	800a918 <_dtoa_r+0x248>
 800a89c:	9b05      	ldr	r3, [sp, #20]
 800a89e:	9a00      	ldr	r2, [sp, #0]
 800a8a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a8a2:	4413      	add	r3, r2
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9307      	str	r3, [sp, #28]
 800a8aa:	9b06      	ldr	r3, [sp, #24]
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	f200 8089 	bhi.w	800a9c4 <_dtoa_r+0x2f4>
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	bfc4      	itt	gt
 800a8b6:	3b04      	subgt	r3, #4
 800a8b8:	9306      	strgt	r3, [sp, #24]
 800a8ba:	9b06      	ldr	r3, [sp, #24]
 800a8bc:	f1a3 0302 	sub.w	r3, r3, #2
 800a8c0:	bfcc      	ite	gt
 800a8c2:	2500      	movgt	r5, #0
 800a8c4:	2501      	movle	r5, #1
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	f200 8087 	bhi.w	800a9da <_dtoa_r+0x30a>
 800a8cc:	e8df f003 	tbb	[pc, r3]
 800a8d0:	59383a2d 	.word	0x59383a2d
 800a8d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a8d8:	441d      	add	r5, r3
 800a8da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	bfc1      	itttt	gt
 800a8e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800a8ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8f2:	bfda      	itte	le
 800a8f4:	f1c3 0320 	rsble	r3, r3, #32
 800a8f8:	fa06 f003 	lslle.w	r0, r6, r3
 800a8fc:	4318      	orrgt	r0, r3
 800a8fe:	f7f5 fe31 	bl	8000564 <__aeabi_ui2d>
 800a902:	2301      	movs	r3, #1
 800a904:	4606      	mov	r6, r0
 800a906:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a90a:	3d01      	subs	r5, #1
 800a90c:	930e      	str	r3, [sp, #56]	; 0x38
 800a90e:	e76a      	b.n	800a7e6 <_dtoa_r+0x116>
 800a910:	2301      	movs	r3, #1
 800a912:	e7b2      	b.n	800a87a <_dtoa_r+0x1aa>
 800a914:	900b      	str	r0, [sp, #44]	; 0x2c
 800a916:	e7b1      	b.n	800a87c <_dtoa_r+0x1ac>
 800a918:	9b04      	ldr	r3, [sp, #16]
 800a91a:	9a00      	ldr	r2, [sp, #0]
 800a91c:	1a9b      	subs	r3, r3, r2
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	4253      	negs	r3, r2
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	2300      	movs	r3, #0
 800a926:	930a      	str	r3, [sp, #40]	; 0x28
 800a928:	e7bf      	b.n	800a8aa <_dtoa_r+0x1da>
 800a92a:	2300      	movs	r3, #0
 800a92c:	9308      	str	r3, [sp, #32]
 800a92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	dc55      	bgt.n	800a9e0 <_dtoa_r+0x310>
 800a934:	2301      	movs	r3, #1
 800a936:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a93a:	461a      	mov	r2, r3
 800a93c:	9209      	str	r2, [sp, #36]	; 0x24
 800a93e:	e00c      	b.n	800a95a <_dtoa_r+0x28a>
 800a940:	2301      	movs	r3, #1
 800a942:	e7f3      	b.n	800a92c <_dtoa_r+0x25c>
 800a944:	2300      	movs	r3, #0
 800a946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a948:	9308      	str	r3, [sp, #32]
 800a94a:	9b00      	ldr	r3, [sp, #0]
 800a94c:	4413      	add	r3, r2
 800a94e:	9302      	str	r3, [sp, #8]
 800a950:	3301      	adds	r3, #1
 800a952:	2b01      	cmp	r3, #1
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	bfb8      	it	lt
 800a958:	2301      	movlt	r3, #1
 800a95a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a95c:	2200      	movs	r2, #0
 800a95e:	6042      	str	r2, [r0, #4]
 800a960:	2204      	movs	r2, #4
 800a962:	f102 0614 	add.w	r6, r2, #20
 800a966:	429e      	cmp	r6, r3
 800a968:	6841      	ldr	r1, [r0, #4]
 800a96a:	d93d      	bls.n	800a9e8 <_dtoa_r+0x318>
 800a96c:	4620      	mov	r0, r4
 800a96e:	f001 f84f 	bl	800ba10 <_Balloc>
 800a972:	9001      	str	r0, [sp, #4]
 800a974:	2800      	cmp	r0, #0
 800a976:	d13b      	bne.n	800a9f0 <_dtoa_r+0x320>
 800a978:	4b11      	ldr	r3, [pc, #68]	; (800a9c0 <_dtoa_r+0x2f0>)
 800a97a:	4602      	mov	r2, r0
 800a97c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a980:	e6c0      	b.n	800a704 <_dtoa_r+0x34>
 800a982:	2301      	movs	r3, #1
 800a984:	e7df      	b.n	800a946 <_dtoa_r+0x276>
 800a986:	bf00      	nop
 800a988:	636f4361 	.word	0x636f4361
 800a98c:	3fd287a7 	.word	0x3fd287a7
 800a990:	8b60c8b3 	.word	0x8b60c8b3
 800a994:	3fc68a28 	.word	0x3fc68a28
 800a998:	509f79fb 	.word	0x509f79fb
 800a99c:	3fd34413 	.word	0x3fd34413
 800a9a0:	0800d630 	.word	0x0800d630
 800a9a4:	0800d6ed 	.word	0x0800d6ed
 800a9a8:	7ff00000 	.word	0x7ff00000
 800a9ac:	0800d6e9 	.word	0x0800d6e9
 800a9b0:	0800d6e0 	.word	0x0800d6e0
 800a9b4:	0800d5b5 	.word	0x0800d5b5
 800a9b8:	3ff80000 	.word	0x3ff80000
 800a9bc:	0800d858 	.word	0x0800d858
 800a9c0:	0800d748 	.word	0x0800d748
 800a9c4:	2501      	movs	r5, #1
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9306      	str	r3, [sp, #24]
 800a9ca:	9508      	str	r5, [sp, #32]
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2312      	movs	r3, #18
 800a9d8:	e7b0      	b.n	800a93c <_dtoa_r+0x26c>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	9308      	str	r3, [sp, #32]
 800a9de:	e7f5      	b.n	800a9cc <_dtoa_r+0x2fc>
 800a9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9e6:	e7b8      	b.n	800a95a <_dtoa_r+0x28a>
 800a9e8:	3101      	adds	r1, #1
 800a9ea:	6041      	str	r1, [r0, #4]
 800a9ec:	0052      	lsls	r2, r2, #1
 800a9ee:	e7b8      	b.n	800a962 <_dtoa_r+0x292>
 800a9f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9f2:	9a01      	ldr	r2, [sp, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	2b0e      	cmp	r3, #14
 800a9fa:	f200 809d 	bhi.w	800ab38 <_dtoa_r+0x468>
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	f000 809a 	beq.w	800ab38 <_dtoa_r+0x468>
 800aa04:	9b00      	ldr	r3, [sp, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dd32      	ble.n	800aa70 <_dtoa_r+0x3a0>
 800aa0a:	4ab7      	ldr	r2, [pc, #732]	; (800ace8 <_dtoa_r+0x618>)
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa18:	9b00      	ldr	r3, [sp, #0]
 800aa1a:	05d8      	lsls	r0, r3, #23
 800aa1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa20:	d516      	bpl.n	800aa50 <_dtoa_r+0x380>
 800aa22:	4bb2      	ldr	r3, [pc, #712]	; (800acec <_dtoa_r+0x61c>)
 800aa24:	ec51 0b19 	vmov	r0, r1, d9
 800aa28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa2c:	f7f5 ff3e 	bl	80008ac <__aeabi_ddiv>
 800aa30:	f007 070f 	and.w	r7, r7, #15
 800aa34:	4682      	mov	sl, r0
 800aa36:	468b      	mov	fp, r1
 800aa38:	2503      	movs	r5, #3
 800aa3a:	4eac      	ldr	r6, [pc, #688]	; (800acec <_dtoa_r+0x61c>)
 800aa3c:	b957      	cbnz	r7, 800aa54 <_dtoa_r+0x384>
 800aa3e:	4642      	mov	r2, r8
 800aa40:	464b      	mov	r3, r9
 800aa42:	4650      	mov	r0, sl
 800aa44:	4659      	mov	r1, fp
 800aa46:	f7f5 ff31 	bl	80008ac <__aeabi_ddiv>
 800aa4a:	4682      	mov	sl, r0
 800aa4c:	468b      	mov	fp, r1
 800aa4e:	e028      	b.n	800aaa2 <_dtoa_r+0x3d2>
 800aa50:	2502      	movs	r5, #2
 800aa52:	e7f2      	b.n	800aa3a <_dtoa_r+0x36a>
 800aa54:	07f9      	lsls	r1, r7, #31
 800aa56:	d508      	bpl.n	800aa6a <_dtoa_r+0x39a>
 800aa58:	4640      	mov	r0, r8
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa60:	f7f5 fdfa 	bl	8000658 <__aeabi_dmul>
 800aa64:	3501      	adds	r5, #1
 800aa66:	4680      	mov	r8, r0
 800aa68:	4689      	mov	r9, r1
 800aa6a:	107f      	asrs	r7, r7, #1
 800aa6c:	3608      	adds	r6, #8
 800aa6e:	e7e5      	b.n	800aa3c <_dtoa_r+0x36c>
 800aa70:	f000 809b 	beq.w	800abaa <_dtoa_r+0x4da>
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	4f9d      	ldr	r7, [pc, #628]	; (800acec <_dtoa_r+0x61c>)
 800aa78:	425e      	negs	r6, r3
 800aa7a:	4b9b      	ldr	r3, [pc, #620]	; (800ace8 <_dtoa_r+0x618>)
 800aa7c:	f006 020f 	and.w	r2, r6, #15
 800aa80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	ec51 0b19 	vmov	r0, r1, d9
 800aa8c:	f7f5 fde4 	bl	8000658 <__aeabi_dmul>
 800aa90:	1136      	asrs	r6, r6, #4
 800aa92:	4682      	mov	sl, r0
 800aa94:	468b      	mov	fp, r1
 800aa96:	2300      	movs	r3, #0
 800aa98:	2502      	movs	r5, #2
 800aa9a:	2e00      	cmp	r6, #0
 800aa9c:	d17a      	bne.n	800ab94 <_dtoa_r+0x4c4>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1d3      	bne.n	800aa4a <_dtoa_r+0x37a>
 800aaa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8082 	beq.w	800abae <_dtoa_r+0x4de>
 800aaaa:	4b91      	ldr	r3, [pc, #580]	; (800acf0 <_dtoa_r+0x620>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	4650      	mov	r0, sl
 800aab0:	4659      	mov	r1, fp
 800aab2:	f7f6 f843 	bl	8000b3c <__aeabi_dcmplt>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d079      	beq.n	800abae <_dtoa_r+0x4de>
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d076      	beq.n	800abae <_dtoa_r+0x4de>
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dd36      	ble.n	800ab34 <_dtoa_r+0x464>
 800aac6:	9b00      	ldr	r3, [sp, #0]
 800aac8:	4650      	mov	r0, sl
 800aaca:	4659      	mov	r1, fp
 800aacc:	1e5f      	subs	r7, r3, #1
 800aace:	2200      	movs	r2, #0
 800aad0:	4b88      	ldr	r3, [pc, #544]	; (800acf4 <_dtoa_r+0x624>)
 800aad2:	f7f5 fdc1 	bl	8000658 <__aeabi_dmul>
 800aad6:	9e02      	ldr	r6, [sp, #8]
 800aad8:	4682      	mov	sl, r0
 800aada:	468b      	mov	fp, r1
 800aadc:	3501      	adds	r5, #1
 800aade:	4628      	mov	r0, r5
 800aae0:	f7f5 fd50 	bl	8000584 <__aeabi_i2d>
 800aae4:	4652      	mov	r2, sl
 800aae6:	465b      	mov	r3, fp
 800aae8:	f7f5 fdb6 	bl	8000658 <__aeabi_dmul>
 800aaec:	4b82      	ldr	r3, [pc, #520]	; (800acf8 <_dtoa_r+0x628>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f7f5 fbfc 	bl	80002ec <__adddf3>
 800aaf4:	46d0      	mov	r8, sl
 800aaf6:	46d9      	mov	r9, fp
 800aaf8:	4682      	mov	sl, r0
 800aafa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aafe:	2e00      	cmp	r6, #0
 800ab00:	d158      	bne.n	800abb4 <_dtoa_r+0x4e4>
 800ab02:	4b7e      	ldr	r3, [pc, #504]	; (800acfc <_dtoa_r+0x62c>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	4640      	mov	r0, r8
 800ab08:	4649      	mov	r1, r9
 800ab0a:	f7f5 fbed 	bl	80002e8 <__aeabi_dsub>
 800ab0e:	4652      	mov	r2, sl
 800ab10:	465b      	mov	r3, fp
 800ab12:	4680      	mov	r8, r0
 800ab14:	4689      	mov	r9, r1
 800ab16:	f7f6 f82f 	bl	8000b78 <__aeabi_dcmpgt>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f040 8295 	bne.w	800b04a <_dtoa_r+0x97a>
 800ab20:	4652      	mov	r2, sl
 800ab22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab26:	4640      	mov	r0, r8
 800ab28:	4649      	mov	r1, r9
 800ab2a:	f7f6 f807 	bl	8000b3c <__aeabi_dcmplt>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f040 8289 	bne.w	800b046 <_dtoa_r+0x976>
 800ab34:	ec5b ab19 	vmov	sl, fp, d9
 800ab38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f2c0 8148 	blt.w	800add0 <_dtoa_r+0x700>
 800ab40:	9a00      	ldr	r2, [sp, #0]
 800ab42:	2a0e      	cmp	r2, #14
 800ab44:	f300 8144 	bgt.w	800add0 <_dtoa_r+0x700>
 800ab48:	4b67      	ldr	r3, [pc, #412]	; (800ace8 <_dtoa_r+0x618>)
 800ab4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f280 80d5 	bge.w	800ad04 <_dtoa_r+0x634>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f300 80d1 	bgt.w	800ad04 <_dtoa_r+0x634>
 800ab62:	f040 826f 	bne.w	800b044 <_dtoa_r+0x974>
 800ab66:	4b65      	ldr	r3, [pc, #404]	; (800acfc <_dtoa_r+0x62c>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	f7f5 fd73 	bl	8000658 <__aeabi_dmul>
 800ab72:	4652      	mov	r2, sl
 800ab74:	465b      	mov	r3, fp
 800ab76:	f7f5 fff5 	bl	8000b64 <__aeabi_dcmpge>
 800ab7a:	9e03      	ldr	r6, [sp, #12]
 800ab7c:	4637      	mov	r7, r6
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f040 8245 	bne.w	800b00e <_dtoa_r+0x93e>
 800ab84:	9d01      	ldr	r5, [sp, #4]
 800ab86:	2331      	movs	r3, #49	; 0x31
 800ab88:	f805 3b01 	strb.w	r3, [r5], #1
 800ab8c:	9b00      	ldr	r3, [sp, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	e240      	b.n	800b016 <_dtoa_r+0x946>
 800ab94:	07f2      	lsls	r2, r6, #31
 800ab96:	d505      	bpl.n	800aba4 <_dtoa_r+0x4d4>
 800ab98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab9c:	f7f5 fd5c 	bl	8000658 <__aeabi_dmul>
 800aba0:	3501      	adds	r5, #1
 800aba2:	2301      	movs	r3, #1
 800aba4:	1076      	asrs	r6, r6, #1
 800aba6:	3708      	adds	r7, #8
 800aba8:	e777      	b.n	800aa9a <_dtoa_r+0x3ca>
 800abaa:	2502      	movs	r5, #2
 800abac:	e779      	b.n	800aaa2 <_dtoa_r+0x3d2>
 800abae:	9f00      	ldr	r7, [sp, #0]
 800abb0:	9e03      	ldr	r6, [sp, #12]
 800abb2:	e794      	b.n	800aade <_dtoa_r+0x40e>
 800abb4:	9901      	ldr	r1, [sp, #4]
 800abb6:	4b4c      	ldr	r3, [pc, #304]	; (800ace8 <_dtoa_r+0x618>)
 800abb8:	4431      	add	r1, r6
 800abba:	910d      	str	r1, [sp, #52]	; 0x34
 800abbc:	9908      	ldr	r1, [sp, #32]
 800abbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abc6:	2900      	cmp	r1, #0
 800abc8:	d043      	beq.n	800ac52 <_dtoa_r+0x582>
 800abca:	494d      	ldr	r1, [pc, #308]	; (800ad00 <_dtoa_r+0x630>)
 800abcc:	2000      	movs	r0, #0
 800abce:	f7f5 fe6d 	bl	80008ac <__aeabi_ddiv>
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	f7f5 fb87 	bl	80002e8 <__aeabi_dsub>
 800abda:	9d01      	ldr	r5, [sp, #4]
 800abdc:	4682      	mov	sl, r0
 800abde:	468b      	mov	fp, r1
 800abe0:	4649      	mov	r1, r9
 800abe2:	4640      	mov	r0, r8
 800abe4:	f7f5 ffe8 	bl	8000bb8 <__aeabi_d2iz>
 800abe8:	4606      	mov	r6, r0
 800abea:	f7f5 fccb 	bl	8000584 <__aeabi_i2d>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f7f5 fb77 	bl	80002e8 <__aeabi_dsub>
 800abfa:	3630      	adds	r6, #48	; 0x30
 800abfc:	f805 6b01 	strb.w	r6, [r5], #1
 800ac00:	4652      	mov	r2, sl
 800ac02:	465b      	mov	r3, fp
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	f7f5 ff98 	bl	8000b3c <__aeabi_dcmplt>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d163      	bne.n	800acd8 <_dtoa_r+0x608>
 800ac10:	4642      	mov	r2, r8
 800ac12:	464b      	mov	r3, r9
 800ac14:	4936      	ldr	r1, [pc, #216]	; (800acf0 <_dtoa_r+0x620>)
 800ac16:	2000      	movs	r0, #0
 800ac18:	f7f5 fb66 	bl	80002e8 <__aeabi_dsub>
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	465b      	mov	r3, fp
 800ac20:	f7f5 ff8c 	bl	8000b3c <__aeabi_dcmplt>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f040 80b5 	bne.w	800ad94 <_dtoa_r+0x6c4>
 800ac2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac2c:	429d      	cmp	r5, r3
 800ac2e:	d081      	beq.n	800ab34 <_dtoa_r+0x464>
 800ac30:	4b30      	ldr	r3, [pc, #192]	; (800acf4 <_dtoa_r+0x624>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	4650      	mov	r0, sl
 800ac36:	4659      	mov	r1, fp
 800ac38:	f7f5 fd0e 	bl	8000658 <__aeabi_dmul>
 800ac3c:	4b2d      	ldr	r3, [pc, #180]	; (800acf4 <_dtoa_r+0x624>)
 800ac3e:	4682      	mov	sl, r0
 800ac40:	468b      	mov	fp, r1
 800ac42:	4640      	mov	r0, r8
 800ac44:	4649      	mov	r1, r9
 800ac46:	2200      	movs	r2, #0
 800ac48:	f7f5 fd06 	bl	8000658 <__aeabi_dmul>
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	4689      	mov	r9, r1
 800ac50:	e7c6      	b.n	800abe0 <_dtoa_r+0x510>
 800ac52:	4650      	mov	r0, sl
 800ac54:	4659      	mov	r1, fp
 800ac56:	f7f5 fcff 	bl	8000658 <__aeabi_dmul>
 800ac5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac5c:	9d01      	ldr	r5, [sp, #4]
 800ac5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac60:	4682      	mov	sl, r0
 800ac62:	468b      	mov	fp, r1
 800ac64:	4649      	mov	r1, r9
 800ac66:	4640      	mov	r0, r8
 800ac68:	f7f5 ffa6 	bl	8000bb8 <__aeabi_d2iz>
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	f7f5 fc89 	bl	8000584 <__aeabi_i2d>
 800ac72:	3630      	adds	r6, #48	; 0x30
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4640      	mov	r0, r8
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	f7f5 fb34 	bl	80002e8 <__aeabi_dsub>
 800ac80:	f805 6b01 	strb.w	r6, [r5], #1
 800ac84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac86:	429d      	cmp	r5, r3
 800ac88:	4680      	mov	r8, r0
 800ac8a:	4689      	mov	r9, r1
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	d124      	bne.n	800acdc <_dtoa_r+0x60c>
 800ac92:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <_dtoa_r+0x630>)
 800ac94:	4650      	mov	r0, sl
 800ac96:	4659      	mov	r1, fp
 800ac98:	f7f5 fb28 	bl	80002ec <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4640      	mov	r0, r8
 800aca2:	4649      	mov	r1, r9
 800aca4:	f7f5 ff68 	bl	8000b78 <__aeabi_dcmpgt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d173      	bne.n	800ad94 <_dtoa_r+0x6c4>
 800acac:	4652      	mov	r2, sl
 800acae:	465b      	mov	r3, fp
 800acb0:	4913      	ldr	r1, [pc, #76]	; (800ad00 <_dtoa_r+0x630>)
 800acb2:	2000      	movs	r0, #0
 800acb4:	f7f5 fb18 	bl	80002e8 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 ff3c 	bl	8000b3c <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af35 	beq.w	800ab34 <_dtoa_r+0x464>
 800acca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800accc:	1e6b      	subs	r3, r5, #1
 800acce:	930f      	str	r3, [sp, #60]	; 0x3c
 800acd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acd4:	2b30      	cmp	r3, #48	; 0x30
 800acd6:	d0f8      	beq.n	800acca <_dtoa_r+0x5fa>
 800acd8:	9700      	str	r7, [sp, #0]
 800acda:	e049      	b.n	800ad70 <_dtoa_r+0x6a0>
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <_dtoa_r+0x624>)
 800acde:	f7f5 fcbb 	bl	8000658 <__aeabi_dmul>
 800ace2:	4680      	mov	r8, r0
 800ace4:	4689      	mov	r9, r1
 800ace6:	e7bd      	b.n	800ac64 <_dtoa_r+0x594>
 800ace8:	0800d858 	.word	0x0800d858
 800acec:	0800d830 	.word	0x0800d830
 800acf0:	3ff00000 	.word	0x3ff00000
 800acf4:	40240000 	.word	0x40240000
 800acf8:	401c0000 	.word	0x401c0000
 800acfc:	40140000 	.word	0x40140000
 800ad00:	3fe00000 	.word	0x3fe00000
 800ad04:	9d01      	ldr	r5, [sp, #4]
 800ad06:	4656      	mov	r6, sl
 800ad08:	465f      	mov	r7, fp
 800ad0a:	4642      	mov	r2, r8
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	4630      	mov	r0, r6
 800ad10:	4639      	mov	r1, r7
 800ad12:	f7f5 fdcb 	bl	80008ac <__aeabi_ddiv>
 800ad16:	f7f5 ff4f 	bl	8000bb8 <__aeabi_d2iz>
 800ad1a:	4682      	mov	sl, r0
 800ad1c:	f7f5 fc32 	bl	8000584 <__aeabi_i2d>
 800ad20:	4642      	mov	r2, r8
 800ad22:	464b      	mov	r3, r9
 800ad24:	f7f5 fc98 	bl	8000658 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ad34:	f7f5 fad8 	bl	80002e8 <__aeabi_dsub>
 800ad38:	f805 6b01 	strb.w	r6, [r5], #1
 800ad3c:	9e01      	ldr	r6, [sp, #4]
 800ad3e:	9f03      	ldr	r7, [sp, #12]
 800ad40:	1bae      	subs	r6, r5, r6
 800ad42:	42b7      	cmp	r7, r6
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	d135      	bne.n	800adb6 <_dtoa_r+0x6e6>
 800ad4a:	f7f5 facf 	bl	80002ec <__adddf3>
 800ad4e:	4642      	mov	r2, r8
 800ad50:	464b      	mov	r3, r9
 800ad52:	4606      	mov	r6, r0
 800ad54:	460f      	mov	r7, r1
 800ad56:	f7f5 ff0f 	bl	8000b78 <__aeabi_dcmpgt>
 800ad5a:	b9d0      	cbnz	r0, 800ad92 <_dtoa_r+0x6c2>
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	464b      	mov	r3, r9
 800ad60:	4630      	mov	r0, r6
 800ad62:	4639      	mov	r1, r7
 800ad64:	f7f5 fee0 	bl	8000b28 <__aeabi_dcmpeq>
 800ad68:	b110      	cbz	r0, 800ad70 <_dtoa_r+0x6a0>
 800ad6a:	f01a 0f01 	tst.w	sl, #1
 800ad6e:	d110      	bne.n	800ad92 <_dtoa_r+0x6c2>
 800ad70:	4620      	mov	r0, r4
 800ad72:	ee18 1a10 	vmov	r1, s16
 800ad76:	f000 fe8b 	bl	800ba90 <_Bfree>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9800      	ldr	r0, [sp, #0]
 800ad7e:	702b      	strb	r3, [r5, #0]
 800ad80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad82:	3001      	adds	r0, #1
 800ad84:	6018      	str	r0, [r3, #0]
 800ad86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f43f acf1 	beq.w	800a770 <_dtoa_r+0xa0>
 800ad8e:	601d      	str	r5, [r3, #0]
 800ad90:	e4ee      	b.n	800a770 <_dtoa_r+0xa0>
 800ad92:	9f00      	ldr	r7, [sp, #0]
 800ad94:	462b      	mov	r3, r5
 800ad96:	461d      	mov	r5, r3
 800ad98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad9c:	2a39      	cmp	r2, #57	; 0x39
 800ad9e:	d106      	bne.n	800adae <_dtoa_r+0x6de>
 800ada0:	9a01      	ldr	r2, [sp, #4]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d1f7      	bne.n	800ad96 <_dtoa_r+0x6c6>
 800ada6:	9901      	ldr	r1, [sp, #4]
 800ada8:	2230      	movs	r2, #48	; 0x30
 800adaa:	3701      	adds	r7, #1
 800adac:	700a      	strb	r2, [r1, #0]
 800adae:	781a      	ldrb	r2, [r3, #0]
 800adb0:	3201      	adds	r2, #1
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e790      	b.n	800acd8 <_dtoa_r+0x608>
 800adb6:	4ba6      	ldr	r3, [pc, #664]	; (800b050 <_dtoa_r+0x980>)
 800adb8:	2200      	movs	r2, #0
 800adba:	f7f5 fc4d 	bl	8000658 <__aeabi_dmul>
 800adbe:	2200      	movs	r2, #0
 800adc0:	2300      	movs	r3, #0
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	f7f5 feaf 	bl	8000b28 <__aeabi_dcmpeq>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d09d      	beq.n	800ad0a <_dtoa_r+0x63a>
 800adce:	e7cf      	b.n	800ad70 <_dtoa_r+0x6a0>
 800add0:	9a08      	ldr	r2, [sp, #32]
 800add2:	2a00      	cmp	r2, #0
 800add4:	f000 80d7 	beq.w	800af86 <_dtoa_r+0x8b6>
 800add8:	9a06      	ldr	r2, [sp, #24]
 800adda:	2a01      	cmp	r2, #1
 800addc:	f300 80ba 	bgt.w	800af54 <_dtoa_r+0x884>
 800ade0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	f000 80b2 	beq.w	800af4c <_dtoa_r+0x87c>
 800ade8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adec:	9e07      	ldr	r6, [sp, #28]
 800adee:	9d04      	ldr	r5, [sp, #16]
 800adf0:	9a04      	ldr	r2, [sp, #16]
 800adf2:	441a      	add	r2, r3
 800adf4:	9204      	str	r2, [sp, #16]
 800adf6:	9a05      	ldr	r2, [sp, #20]
 800adf8:	2101      	movs	r1, #1
 800adfa:	441a      	add	r2, r3
 800adfc:	4620      	mov	r0, r4
 800adfe:	9205      	str	r2, [sp, #20]
 800ae00:	f000 ff48 	bl	800bc94 <__i2b>
 800ae04:	4607      	mov	r7, r0
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	dd0c      	ble.n	800ae24 <_dtoa_r+0x754>
 800ae0a:	9b05      	ldr	r3, [sp, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd09      	ble.n	800ae24 <_dtoa_r+0x754>
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	9a04      	ldr	r2, [sp, #16]
 800ae14:	bfa8      	it	ge
 800ae16:	462b      	movge	r3, r5
 800ae18:	1ad2      	subs	r2, r2, r3
 800ae1a:	9204      	str	r2, [sp, #16]
 800ae1c:	9a05      	ldr	r2, [sp, #20]
 800ae1e:	1aed      	subs	r5, r5, r3
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	b31b      	cbz	r3, 800ae70 <_dtoa_r+0x7a0>
 800ae28:	9b08      	ldr	r3, [sp, #32]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 80af 	beq.w	800af8e <_dtoa_r+0x8be>
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	dd13      	ble.n	800ae5c <_dtoa_r+0x78c>
 800ae34:	4639      	mov	r1, r7
 800ae36:	4632      	mov	r2, r6
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f000 ffeb 	bl	800be14 <__pow5mult>
 800ae3e:	ee18 2a10 	vmov	r2, s16
 800ae42:	4601      	mov	r1, r0
 800ae44:	4607      	mov	r7, r0
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 ff3a 	bl	800bcc0 <__multiply>
 800ae4c:	ee18 1a10 	vmov	r1, s16
 800ae50:	4680      	mov	r8, r0
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fe1c 	bl	800ba90 <_Bfree>
 800ae58:	ee08 8a10 	vmov	s16, r8
 800ae5c:	9b07      	ldr	r3, [sp, #28]
 800ae5e:	1b9a      	subs	r2, r3, r6
 800ae60:	d006      	beq.n	800ae70 <_dtoa_r+0x7a0>
 800ae62:	ee18 1a10 	vmov	r1, s16
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 ffd4 	bl	800be14 <__pow5mult>
 800ae6c:	ee08 0a10 	vmov	s16, r0
 800ae70:	2101      	movs	r1, #1
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 ff0e 	bl	800bc94 <__i2b>
 800ae78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	f340 8088 	ble.w	800af92 <_dtoa_r+0x8c2>
 800ae82:	461a      	mov	r2, r3
 800ae84:	4601      	mov	r1, r0
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 ffc4 	bl	800be14 <__pow5mult>
 800ae8c:	9b06      	ldr	r3, [sp, #24]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	4606      	mov	r6, r0
 800ae92:	f340 8081 	ble.w	800af98 <_dtoa_r+0x8c8>
 800ae96:	f04f 0800 	mov.w	r8, #0
 800ae9a:	6933      	ldr	r3, [r6, #16]
 800ae9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aea0:	6918      	ldr	r0, [r3, #16]
 800aea2:	f000 fea7 	bl	800bbf4 <__hi0bits>
 800aea6:	f1c0 0020 	rsb	r0, r0, #32
 800aeaa:	9b05      	ldr	r3, [sp, #20]
 800aeac:	4418      	add	r0, r3
 800aeae:	f010 001f 	ands.w	r0, r0, #31
 800aeb2:	f000 8092 	beq.w	800afda <_dtoa_r+0x90a>
 800aeb6:	f1c0 0320 	rsb	r3, r0, #32
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	f340 808a 	ble.w	800afd4 <_dtoa_r+0x904>
 800aec0:	f1c0 001c 	rsb	r0, r0, #28
 800aec4:	9b04      	ldr	r3, [sp, #16]
 800aec6:	4403      	add	r3, r0
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	9b05      	ldr	r3, [sp, #20]
 800aecc:	4403      	add	r3, r0
 800aece:	4405      	add	r5, r0
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dd07      	ble.n	800aee8 <_dtoa_r+0x818>
 800aed8:	ee18 1a10 	vmov	r1, s16
 800aedc:	461a      	mov	r2, r3
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fff2 	bl	800bec8 <__lshift>
 800aee4:	ee08 0a10 	vmov	s16, r0
 800aee8:	9b05      	ldr	r3, [sp, #20]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	dd05      	ble.n	800aefa <_dtoa_r+0x82a>
 800aeee:	4631      	mov	r1, r6
 800aef0:	461a      	mov	r2, r3
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 ffe8 	bl	800bec8 <__lshift>
 800aef8:	4606      	mov	r6, r0
 800aefa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d06e      	beq.n	800afde <_dtoa_r+0x90e>
 800af00:	ee18 0a10 	vmov	r0, s16
 800af04:	4631      	mov	r1, r6
 800af06:	f001 f84f 	bl	800bfa8 <__mcmp>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	da67      	bge.n	800afde <_dtoa_r+0x90e>
 800af0e:	9b00      	ldr	r3, [sp, #0]
 800af10:	3b01      	subs	r3, #1
 800af12:	ee18 1a10 	vmov	r1, s16
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	220a      	movs	r2, #10
 800af1a:	2300      	movs	r3, #0
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fdd9 	bl	800bad4 <__multadd>
 800af22:	9b08      	ldr	r3, [sp, #32]
 800af24:	ee08 0a10 	vmov	s16, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 81b1 	beq.w	800b290 <_dtoa_r+0xbc0>
 800af2e:	2300      	movs	r3, #0
 800af30:	4639      	mov	r1, r7
 800af32:	220a      	movs	r2, #10
 800af34:	4620      	mov	r0, r4
 800af36:	f000 fdcd 	bl	800bad4 <__multadd>
 800af3a:	9b02      	ldr	r3, [sp, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	4607      	mov	r7, r0
 800af40:	f300 808e 	bgt.w	800b060 <_dtoa_r+0x990>
 800af44:	9b06      	ldr	r3, [sp, #24]
 800af46:	2b02      	cmp	r3, #2
 800af48:	dc51      	bgt.n	800afee <_dtoa_r+0x91e>
 800af4a:	e089      	b.n	800b060 <_dtoa_r+0x990>
 800af4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af52:	e74b      	b.n	800adec <_dtoa_r+0x71c>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	1e5e      	subs	r6, r3, #1
 800af58:	9b07      	ldr	r3, [sp, #28]
 800af5a:	42b3      	cmp	r3, r6
 800af5c:	bfbf      	itttt	lt
 800af5e:	9b07      	ldrlt	r3, [sp, #28]
 800af60:	9607      	strlt	r6, [sp, #28]
 800af62:	1af2      	sublt	r2, r6, r3
 800af64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af66:	bfb6      	itet	lt
 800af68:	189b      	addlt	r3, r3, r2
 800af6a:	1b9e      	subge	r6, r3, r6
 800af6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af6e:	9b03      	ldr	r3, [sp, #12]
 800af70:	bfb8      	it	lt
 800af72:	2600      	movlt	r6, #0
 800af74:	2b00      	cmp	r3, #0
 800af76:	bfb7      	itett	lt
 800af78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af80:	1a9d      	sublt	r5, r3, r2
 800af82:	2300      	movlt	r3, #0
 800af84:	e734      	b.n	800adf0 <_dtoa_r+0x720>
 800af86:	9e07      	ldr	r6, [sp, #28]
 800af88:	9d04      	ldr	r5, [sp, #16]
 800af8a:	9f08      	ldr	r7, [sp, #32]
 800af8c:	e73b      	b.n	800ae06 <_dtoa_r+0x736>
 800af8e:	9a07      	ldr	r2, [sp, #28]
 800af90:	e767      	b.n	800ae62 <_dtoa_r+0x792>
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	2b01      	cmp	r3, #1
 800af96:	dc18      	bgt.n	800afca <_dtoa_r+0x8fa>
 800af98:	f1ba 0f00 	cmp.w	sl, #0
 800af9c:	d115      	bne.n	800afca <_dtoa_r+0x8fa>
 800af9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afa2:	b993      	cbnz	r3, 800afca <_dtoa_r+0x8fa>
 800afa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afa8:	0d1b      	lsrs	r3, r3, #20
 800afaa:	051b      	lsls	r3, r3, #20
 800afac:	b183      	cbz	r3, 800afd0 <_dtoa_r+0x900>
 800afae:	9b04      	ldr	r3, [sp, #16]
 800afb0:	3301      	adds	r3, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	9b05      	ldr	r3, [sp, #20]
 800afb6:	3301      	adds	r3, #1
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	f04f 0801 	mov.w	r8, #1
 800afbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f47f af6a 	bne.w	800ae9a <_dtoa_r+0x7ca>
 800afc6:	2001      	movs	r0, #1
 800afc8:	e76f      	b.n	800aeaa <_dtoa_r+0x7da>
 800afca:	f04f 0800 	mov.w	r8, #0
 800afce:	e7f6      	b.n	800afbe <_dtoa_r+0x8ee>
 800afd0:	4698      	mov	r8, r3
 800afd2:	e7f4      	b.n	800afbe <_dtoa_r+0x8ee>
 800afd4:	f43f af7d 	beq.w	800aed2 <_dtoa_r+0x802>
 800afd8:	4618      	mov	r0, r3
 800afda:	301c      	adds	r0, #28
 800afdc:	e772      	b.n	800aec4 <_dtoa_r+0x7f4>
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dc37      	bgt.n	800b054 <_dtoa_r+0x984>
 800afe4:	9b06      	ldr	r3, [sp, #24]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	dd34      	ble.n	800b054 <_dtoa_r+0x984>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	9302      	str	r3, [sp, #8]
 800afee:	9b02      	ldr	r3, [sp, #8]
 800aff0:	b96b      	cbnz	r3, 800b00e <_dtoa_r+0x93e>
 800aff2:	4631      	mov	r1, r6
 800aff4:	2205      	movs	r2, #5
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 fd6c 	bl	800bad4 <__multadd>
 800affc:	4601      	mov	r1, r0
 800affe:	4606      	mov	r6, r0
 800b000:	ee18 0a10 	vmov	r0, s16
 800b004:	f000 ffd0 	bl	800bfa8 <__mcmp>
 800b008:	2800      	cmp	r0, #0
 800b00a:	f73f adbb 	bgt.w	800ab84 <_dtoa_r+0x4b4>
 800b00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b010:	9d01      	ldr	r5, [sp, #4]
 800b012:	43db      	mvns	r3, r3
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	4631      	mov	r1, r6
 800b01c:	4620      	mov	r0, r4
 800b01e:	f000 fd37 	bl	800ba90 <_Bfree>
 800b022:	2f00      	cmp	r7, #0
 800b024:	f43f aea4 	beq.w	800ad70 <_dtoa_r+0x6a0>
 800b028:	f1b8 0f00 	cmp.w	r8, #0
 800b02c:	d005      	beq.n	800b03a <_dtoa_r+0x96a>
 800b02e:	45b8      	cmp	r8, r7
 800b030:	d003      	beq.n	800b03a <_dtoa_r+0x96a>
 800b032:	4641      	mov	r1, r8
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fd2b 	bl	800ba90 <_Bfree>
 800b03a:	4639      	mov	r1, r7
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 fd27 	bl	800ba90 <_Bfree>
 800b042:	e695      	b.n	800ad70 <_dtoa_r+0x6a0>
 800b044:	2600      	movs	r6, #0
 800b046:	4637      	mov	r7, r6
 800b048:	e7e1      	b.n	800b00e <_dtoa_r+0x93e>
 800b04a:	9700      	str	r7, [sp, #0]
 800b04c:	4637      	mov	r7, r6
 800b04e:	e599      	b.n	800ab84 <_dtoa_r+0x4b4>
 800b050:	40240000 	.word	0x40240000
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80ca 	beq.w	800b1f0 <_dtoa_r+0xb20>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	9302      	str	r3, [sp, #8]
 800b060:	2d00      	cmp	r5, #0
 800b062:	dd05      	ble.n	800b070 <_dtoa_r+0x9a0>
 800b064:	4639      	mov	r1, r7
 800b066:	462a      	mov	r2, r5
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 ff2d 	bl	800bec8 <__lshift>
 800b06e:	4607      	mov	r7, r0
 800b070:	f1b8 0f00 	cmp.w	r8, #0
 800b074:	d05b      	beq.n	800b12e <_dtoa_r+0xa5e>
 800b076:	6879      	ldr	r1, [r7, #4]
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 fcc9 	bl	800ba10 <_Balloc>
 800b07e:	4605      	mov	r5, r0
 800b080:	b928      	cbnz	r0, 800b08e <_dtoa_r+0x9be>
 800b082:	4b87      	ldr	r3, [pc, #540]	; (800b2a0 <_dtoa_r+0xbd0>)
 800b084:	4602      	mov	r2, r0
 800b086:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b08a:	f7ff bb3b 	b.w	800a704 <_dtoa_r+0x34>
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	3202      	adds	r2, #2
 800b092:	0092      	lsls	r2, r2, #2
 800b094:	f107 010c 	add.w	r1, r7, #12
 800b098:	300c      	adds	r0, #12
 800b09a:	f000 fc9f 	bl	800b9dc <memcpy>
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 ff10 	bl	800bec8 <__lshift>
 800b0a8:	9b01      	ldr	r3, [sp, #4]
 800b0aa:	f103 0901 	add.w	r9, r3, #1
 800b0ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	f00a 0301 	and.w	r3, sl, #1
 800b0ba:	46b8      	mov	r8, r7
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	4607      	mov	r7, r0
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	ee18 0a10 	vmov	r0, s16
 800b0c6:	f7ff fa77 	bl	800a5b8 <quorem>
 800b0ca:	4641      	mov	r1, r8
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0d2:	ee18 0a10 	vmov	r0, s16
 800b0d6:	f000 ff67 	bl	800bfa8 <__mcmp>
 800b0da:	463a      	mov	r2, r7
 800b0dc:	9003      	str	r0, [sp, #12]
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 ff7d 	bl	800bfe0 <__mdiff>
 800b0e6:	68c2      	ldr	r2, [r0, #12]
 800b0e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b0ec:	4605      	mov	r5, r0
 800b0ee:	bb02      	cbnz	r2, 800b132 <_dtoa_r+0xa62>
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	ee18 0a10 	vmov	r0, s16
 800b0f6:	f000 ff57 	bl	800bfa8 <__mcmp>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	9207      	str	r2, [sp, #28]
 800b102:	f000 fcc5 	bl	800ba90 <_Bfree>
 800b106:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b10a:	ea43 0102 	orr.w	r1, r3, r2
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	430b      	orrs	r3, r1
 800b112:	464d      	mov	r5, r9
 800b114:	d10f      	bne.n	800b136 <_dtoa_r+0xa66>
 800b116:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b11a:	d02a      	beq.n	800b172 <_dtoa_r+0xaa2>
 800b11c:	9b03      	ldr	r3, [sp, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dd02      	ble.n	800b128 <_dtoa_r+0xa58>
 800b122:	9b02      	ldr	r3, [sp, #8]
 800b124:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b128:	f88b a000 	strb.w	sl, [fp]
 800b12c:	e775      	b.n	800b01a <_dtoa_r+0x94a>
 800b12e:	4638      	mov	r0, r7
 800b130:	e7ba      	b.n	800b0a8 <_dtoa_r+0x9d8>
 800b132:	2201      	movs	r2, #1
 800b134:	e7e2      	b.n	800b0fc <_dtoa_r+0xa2c>
 800b136:	9b03      	ldr	r3, [sp, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	db04      	blt.n	800b146 <_dtoa_r+0xa76>
 800b13c:	9906      	ldr	r1, [sp, #24]
 800b13e:	430b      	orrs	r3, r1
 800b140:	9904      	ldr	r1, [sp, #16]
 800b142:	430b      	orrs	r3, r1
 800b144:	d122      	bne.n	800b18c <_dtoa_r+0xabc>
 800b146:	2a00      	cmp	r2, #0
 800b148:	ddee      	ble.n	800b128 <_dtoa_r+0xa58>
 800b14a:	ee18 1a10 	vmov	r1, s16
 800b14e:	2201      	movs	r2, #1
 800b150:	4620      	mov	r0, r4
 800b152:	f000 feb9 	bl	800bec8 <__lshift>
 800b156:	4631      	mov	r1, r6
 800b158:	ee08 0a10 	vmov	s16, r0
 800b15c:	f000 ff24 	bl	800bfa8 <__mcmp>
 800b160:	2800      	cmp	r0, #0
 800b162:	dc03      	bgt.n	800b16c <_dtoa_r+0xa9c>
 800b164:	d1e0      	bne.n	800b128 <_dtoa_r+0xa58>
 800b166:	f01a 0f01 	tst.w	sl, #1
 800b16a:	d0dd      	beq.n	800b128 <_dtoa_r+0xa58>
 800b16c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b170:	d1d7      	bne.n	800b122 <_dtoa_r+0xa52>
 800b172:	2339      	movs	r3, #57	; 0x39
 800b174:	f88b 3000 	strb.w	r3, [fp]
 800b178:	462b      	mov	r3, r5
 800b17a:	461d      	mov	r5, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b182:	2a39      	cmp	r2, #57	; 0x39
 800b184:	d071      	beq.n	800b26a <_dtoa_r+0xb9a>
 800b186:	3201      	adds	r2, #1
 800b188:	701a      	strb	r2, [r3, #0]
 800b18a:	e746      	b.n	800b01a <_dtoa_r+0x94a>
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	dd07      	ble.n	800b1a0 <_dtoa_r+0xad0>
 800b190:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b194:	d0ed      	beq.n	800b172 <_dtoa_r+0xaa2>
 800b196:	f10a 0301 	add.w	r3, sl, #1
 800b19a:	f88b 3000 	strb.w	r3, [fp]
 800b19e:	e73c      	b.n	800b01a <_dtoa_r+0x94a>
 800b1a0:	9b05      	ldr	r3, [sp, #20]
 800b1a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b1a6:	4599      	cmp	r9, r3
 800b1a8:	d047      	beq.n	800b23a <_dtoa_r+0xb6a>
 800b1aa:	ee18 1a10 	vmov	r1, s16
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	220a      	movs	r2, #10
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 fc8e 	bl	800bad4 <__multadd>
 800b1b8:	45b8      	cmp	r8, r7
 800b1ba:	ee08 0a10 	vmov	s16, r0
 800b1be:	f04f 0300 	mov.w	r3, #0
 800b1c2:	f04f 020a 	mov.w	r2, #10
 800b1c6:	4641      	mov	r1, r8
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	d106      	bne.n	800b1da <_dtoa_r+0xb0a>
 800b1cc:	f000 fc82 	bl	800bad4 <__multadd>
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	f109 0901 	add.w	r9, r9, #1
 800b1d8:	e772      	b.n	800b0c0 <_dtoa_r+0x9f0>
 800b1da:	f000 fc7b 	bl	800bad4 <__multadd>
 800b1de:	4639      	mov	r1, r7
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	220a      	movs	r2, #10
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 fc74 	bl	800bad4 <__multadd>
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	e7f1      	b.n	800b1d4 <_dtoa_r+0xb04>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	9302      	str	r3, [sp, #8]
 800b1f4:	9d01      	ldr	r5, [sp, #4]
 800b1f6:	ee18 0a10 	vmov	r0, s16
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	f7ff f9dc 	bl	800a5b8 <quorem>
 800b200:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	f805 ab01 	strb.w	sl, [r5], #1
 800b20a:	1aea      	subs	r2, r5, r3
 800b20c:	9b02      	ldr	r3, [sp, #8]
 800b20e:	4293      	cmp	r3, r2
 800b210:	dd09      	ble.n	800b226 <_dtoa_r+0xb56>
 800b212:	ee18 1a10 	vmov	r1, s16
 800b216:	2300      	movs	r3, #0
 800b218:	220a      	movs	r2, #10
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fc5a 	bl	800bad4 <__multadd>
 800b220:	ee08 0a10 	vmov	s16, r0
 800b224:	e7e7      	b.n	800b1f6 <_dtoa_r+0xb26>
 800b226:	9b02      	ldr	r3, [sp, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bfc8      	it	gt
 800b22c:	461d      	movgt	r5, r3
 800b22e:	9b01      	ldr	r3, [sp, #4]
 800b230:	bfd8      	it	le
 800b232:	2501      	movle	r5, #1
 800b234:	441d      	add	r5, r3
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	ee18 1a10 	vmov	r1, s16
 800b23e:	2201      	movs	r2, #1
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fe41 	bl	800bec8 <__lshift>
 800b246:	4631      	mov	r1, r6
 800b248:	ee08 0a10 	vmov	s16, r0
 800b24c:	f000 feac 	bl	800bfa8 <__mcmp>
 800b250:	2800      	cmp	r0, #0
 800b252:	dc91      	bgt.n	800b178 <_dtoa_r+0xaa8>
 800b254:	d102      	bne.n	800b25c <_dtoa_r+0xb8c>
 800b256:	f01a 0f01 	tst.w	sl, #1
 800b25a:	d18d      	bne.n	800b178 <_dtoa_r+0xaa8>
 800b25c:	462b      	mov	r3, r5
 800b25e:	461d      	mov	r5, r3
 800b260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b264:	2a30      	cmp	r2, #48	; 0x30
 800b266:	d0fa      	beq.n	800b25e <_dtoa_r+0xb8e>
 800b268:	e6d7      	b.n	800b01a <_dtoa_r+0x94a>
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d184      	bne.n	800b17a <_dtoa_r+0xaaa>
 800b270:	9b00      	ldr	r3, [sp, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	2331      	movs	r3, #49	; 0x31
 800b278:	7013      	strb	r3, [r2, #0]
 800b27a:	e6ce      	b.n	800b01a <_dtoa_r+0x94a>
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <_dtoa_r+0xbd4>)
 800b27e:	f7ff ba95 	b.w	800a7ac <_dtoa_r+0xdc>
 800b282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b284:	2b00      	cmp	r3, #0
 800b286:	f47f aa6e 	bne.w	800a766 <_dtoa_r+0x96>
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <_dtoa_r+0xbd8>)
 800b28c:	f7ff ba8e 	b.w	800a7ac <_dtoa_r+0xdc>
 800b290:	9b02      	ldr	r3, [sp, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	dcae      	bgt.n	800b1f4 <_dtoa_r+0xb24>
 800b296:	9b06      	ldr	r3, [sp, #24]
 800b298:	2b02      	cmp	r3, #2
 800b29a:	f73f aea8 	bgt.w	800afee <_dtoa_r+0x91e>
 800b29e:	e7a9      	b.n	800b1f4 <_dtoa_r+0xb24>
 800b2a0:	0800d748 	.word	0x0800d748
 800b2a4:	0800d5b4 	.word	0x0800d5b4
 800b2a8:	0800d6e0 	.word	0x0800d6e0

0800b2ac <fiprintf>:
 800b2ac:	b40e      	push	{r1, r2, r3}
 800b2ae:	b503      	push	{r0, r1, lr}
 800b2b0:	4601      	mov	r1, r0
 800b2b2:	ab03      	add	r3, sp, #12
 800b2b4:	4805      	ldr	r0, [pc, #20]	; (800b2cc <fiprintf+0x20>)
 800b2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ba:	6800      	ldr	r0, [r0, #0]
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	f001 fa03 	bl	800c6c8 <_vfiprintf_r>
 800b2c2:	b002      	add	sp, #8
 800b2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2c8:	b003      	add	sp, #12
 800b2ca:	4770      	bx	lr
 800b2cc:	2000000c 	.word	0x2000000c

0800b2d0 <rshift>:
 800b2d0:	6903      	ldr	r3, [r0, #16]
 800b2d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2de:	f100 0414 	add.w	r4, r0, #20
 800b2e2:	dd45      	ble.n	800b370 <rshift+0xa0>
 800b2e4:	f011 011f 	ands.w	r1, r1, #31
 800b2e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2f0:	d10c      	bne.n	800b30c <rshift+0x3c>
 800b2f2:	f100 0710 	add.w	r7, r0, #16
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	42b1      	cmp	r1, r6
 800b2fa:	d334      	bcc.n	800b366 <rshift+0x96>
 800b2fc:	1a9b      	subs	r3, r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	1eea      	subs	r2, r5, #3
 800b302:	4296      	cmp	r6, r2
 800b304:	bf38      	it	cc
 800b306:	2300      	movcc	r3, #0
 800b308:	4423      	add	r3, r4
 800b30a:	e015      	b.n	800b338 <rshift+0x68>
 800b30c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b310:	f1c1 0820 	rsb	r8, r1, #32
 800b314:	40cf      	lsrs	r7, r1
 800b316:	f105 0e04 	add.w	lr, r5, #4
 800b31a:	46a1      	mov	r9, r4
 800b31c:	4576      	cmp	r6, lr
 800b31e:	46f4      	mov	ip, lr
 800b320:	d815      	bhi.n	800b34e <rshift+0x7e>
 800b322:	1a9a      	subs	r2, r3, r2
 800b324:	0092      	lsls	r2, r2, #2
 800b326:	3a04      	subs	r2, #4
 800b328:	3501      	adds	r5, #1
 800b32a:	42ae      	cmp	r6, r5
 800b32c:	bf38      	it	cc
 800b32e:	2200      	movcc	r2, #0
 800b330:	18a3      	adds	r3, r4, r2
 800b332:	50a7      	str	r7, [r4, r2]
 800b334:	b107      	cbz	r7, 800b338 <rshift+0x68>
 800b336:	3304      	adds	r3, #4
 800b338:	1b1a      	subs	r2, r3, r4
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b340:	bf08      	it	eq
 800b342:	2300      	moveq	r3, #0
 800b344:	6102      	str	r2, [r0, #16]
 800b346:	bf08      	it	eq
 800b348:	6143      	streq	r3, [r0, #20]
 800b34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b34e:	f8dc c000 	ldr.w	ip, [ip]
 800b352:	fa0c fc08 	lsl.w	ip, ip, r8
 800b356:	ea4c 0707 	orr.w	r7, ip, r7
 800b35a:	f849 7b04 	str.w	r7, [r9], #4
 800b35e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b362:	40cf      	lsrs	r7, r1
 800b364:	e7da      	b.n	800b31c <rshift+0x4c>
 800b366:	f851 cb04 	ldr.w	ip, [r1], #4
 800b36a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b36e:	e7c3      	b.n	800b2f8 <rshift+0x28>
 800b370:	4623      	mov	r3, r4
 800b372:	e7e1      	b.n	800b338 <rshift+0x68>

0800b374 <__hexdig_fun>:
 800b374:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b378:	2b09      	cmp	r3, #9
 800b37a:	d802      	bhi.n	800b382 <__hexdig_fun+0xe>
 800b37c:	3820      	subs	r0, #32
 800b37e:	b2c0      	uxtb	r0, r0
 800b380:	4770      	bx	lr
 800b382:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b386:	2b05      	cmp	r3, #5
 800b388:	d801      	bhi.n	800b38e <__hexdig_fun+0x1a>
 800b38a:	3847      	subs	r0, #71	; 0x47
 800b38c:	e7f7      	b.n	800b37e <__hexdig_fun+0xa>
 800b38e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b392:	2b05      	cmp	r3, #5
 800b394:	d801      	bhi.n	800b39a <__hexdig_fun+0x26>
 800b396:	3827      	subs	r0, #39	; 0x27
 800b398:	e7f1      	b.n	800b37e <__hexdig_fun+0xa>
 800b39a:	2000      	movs	r0, #0
 800b39c:	4770      	bx	lr
	...

0800b3a0 <__gethex>:
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	ed2d 8b02 	vpush	{d8}
 800b3a8:	b089      	sub	sp, #36	; 0x24
 800b3aa:	ee08 0a10 	vmov	s16, r0
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	4bb4      	ldr	r3, [pc, #720]	; (800b684 <__gethex+0x2e4>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	468b      	mov	fp, r1
 800b3ba:	4690      	mov	r8, r2
 800b3bc:	f7f4 ff32 	bl	8000224 <strlen>
 800b3c0:	9b01      	ldr	r3, [sp, #4]
 800b3c2:	f8db 2000 	ldr.w	r2, [fp]
 800b3c6:	4403      	add	r3, r0
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3ce:	9305      	str	r3, [sp, #20]
 800b3d0:	1c93      	adds	r3, r2, #2
 800b3d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3da:	32fe      	adds	r2, #254	; 0xfe
 800b3dc:	18d1      	adds	r1, r2, r3
 800b3de:	461f      	mov	r7, r3
 800b3e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3e4:	9100      	str	r1, [sp, #0]
 800b3e6:	2830      	cmp	r0, #48	; 0x30
 800b3e8:	d0f8      	beq.n	800b3dc <__gethex+0x3c>
 800b3ea:	f7ff ffc3 	bl	800b374 <__hexdig_fun>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d13a      	bne.n	800b46a <__gethex+0xca>
 800b3f4:	9901      	ldr	r1, [sp, #4]
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	4638      	mov	r0, r7
 800b3fa:	f001 fa9d 	bl	800c938 <strncmp>
 800b3fe:	4605      	mov	r5, r0
 800b400:	2800      	cmp	r0, #0
 800b402:	d168      	bne.n	800b4d6 <__gethex+0x136>
 800b404:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b408:	eb07 060a 	add.w	r6, r7, sl
 800b40c:	f7ff ffb2 	bl	800b374 <__hexdig_fun>
 800b410:	2800      	cmp	r0, #0
 800b412:	d062      	beq.n	800b4da <__gethex+0x13a>
 800b414:	4633      	mov	r3, r6
 800b416:	7818      	ldrb	r0, [r3, #0]
 800b418:	2830      	cmp	r0, #48	; 0x30
 800b41a:	461f      	mov	r7, r3
 800b41c:	f103 0301 	add.w	r3, r3, #1
 800b420:	d0f9      	beq.n	800b416 <__gethex+0x76>
 800b422:	f7ff ffa7 	bl	800b374 <__hexdig_fun>
 800b426:	2301      	movs	r3, #1
 800b428:	fab0 f480 	clz	r4, r0
 800b42c:	0964      	lsrs	r4, r4, #5
 800b42e:	4635      	mov	r5, r6
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	463a      	mov	r2, r7
 800b434:	4616      	mov	r6, r2
 800b436:	3201      	adds	r2, #1
 800b438:	7830      	ldrb	r0, [r6, #0]
 800b43a:	f7ff ff9b 	bl	800b374 <__hexdig_fun>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d1f8      	bne.n	800b434 <__gethex+0x94>
 800b442:	9901      	ldr	r1, [sp, #4]
 800b444:	4652      	mov	r2, sl
 800b446:	4630      	mov	r0, r6
 800b448:	f001 fa76 	bl	800c938 <strncmp>
 800b44c:	b980      	cbnz	r0, 800b470 <__gethex+0xd0>
 800b44e:	b94d      	cbnz	r5, 800b464 <__gethex+0xc4>
 800b450:	eb06 050a 	add.w	r5, r6, sl
 800b454:	462a      	mov	r2, r5
 800b456:	4616      	mov	r6, r2
 800b458:	3201      	adds	r2, #1
 800b45a:	7830      	ldrb	r0, [r6, #0]
 800b45c:	f7ff ff8a 	bl	800b374 <__hexdig_fun>
 800b460:	2800      	cmp	r0, #0
 800b462:	d1f8      	bne.n	800b456 <__gethex+0xb6>
 800b464:	1bad      	subs	r5, r5, r6
 800b466:	00ad      	lsls	r5, r5, #2
 800b468:	e004      	b.n	800b474 <__gethex+0xd4>
 800b46a:	2400      	movs	r4, #0
 800b46c:	4625      	mov	r5, r4
 800b46e:	e7e0      	b.n	800b432 <__gethex+0x92>
 800b470:	2d00      	cmp	r5, #0
 800b472:	d1f7      	bne.n	800b464 <__gethex+0xc4>
 800b474:	7833      	ldrb	r3, [r6, #0]
 800b476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b47a:	2b50      	cmp	r3, #80	; 0x50
 800b47c:	d13b      	bne.n	800b4f6 <__gethex+0x156>
 800b47e:	7873      	ldrb	r3, [r6, #1]
 800b480:	2b2b      	cmp	r3, #43	; 0x2b
 800b482:	d02c      	beq.n	800b4de <__gethex+0x13e>
 800b484:	2b2d      	cmp	r3, #45	; 0x2d
 800b486:	d02e      	beq.n	800b4e6 <__gethex+0x146>
 800b488:	1c71      	adds	r1, r6, #1
 800b48a:	f04f 0900 	mov.w	r9, #0
 800b48e:	7808      	ldrb	r0, [r1, #0]
 800b490:	f7ff ff70 	bl	800b374 <__hexdig_fun>
 800b494:	1e43      	subs	r3, r0, #1
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b18      	cmp	r3, #24
 800b49a:	d82c      	bhi.n	800b4f6 <__gethex+0x156>
 800b49c:	f1a0 0210 	sub.w	r2, r0, #16
 800b4a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4a4:	f7ff ff66 	bl	800b374 <__hexdig_fun>
 800b4a8:	1e43      	subs	r3, r0, #1
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b18      	cmp	r3, #24
 800b4ae:	d91d      	bls.n	800b4ec <__gethex+0x14c>
 800b4b0:	f1b9 0f00 	cmp.w	r9, #0
 800b4b4:	d000      	beq.n	800b4b8 <__gethex+0x118>
 800b4b6:	4252      	negs	r2, r2
 800b4b8:	4415      	add	r5, r2
 800b4ba:	f8cb 1000 	str.w	r1, [fp]
 800b4be:	b1e4      	cbz	r4, 800b4fa <__gethex+0x15a>
 800b4c0:	9b00      	ldr	r3, [sp, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	bf14      	ite	ne
 800b4c6:	2700      	movne	r7, #0
 800b4c8:	2706      	moveq	r7, #6
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	b009      	add	sp, #36	; 0x24
 800b4ce:	ecbd 8b02 	vpop	{d8}
 800b4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d6:	463e      	mov	r6, r7
 800b4d8:	4625      	mov	r5, r4
 800b4da:	2401      	movs	r4, #1
 800b4dc:	e7ca      	b.n	800b474 <__gethex+0xd4>
 800b4de:	f04f 0900 	mov.w	r9, #0
 800b4e2:	1cb1      	adds	r1, r6, #2
 800b4e4:	e7d3      	b.n	800b48e <__gethex+0xee>
 800b4e6:	f04f 0901 	mov.w	r9, #1
 800b4ea:	e7fa      	b.n	800b4e2 <__gethex+0x142>
 800b4ec:	230a      	movs	r3, #10
 800b4ee:	fb03 0202 	mla	r2, r3, r2, r0
 800b4f2:	3a10      	subs	r2, #16
 800b4f4:	e7d4      	b.n	800b4a0 <__gethex+0x100>
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	e7df      	b.n	800b4ba <__gethex+0x11a>
 800b4fa:	1bf3      	subs	r3, r6, r7
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	4621      	mov	r1, r4
 800b500:	2b07      	cmp	r3, #7
 800b502:	dc0b      	bgt.n	800b51c <__gethex+0x17c>
 800b504:	ee18 0a10 	vmov	r0, s16
 800b508:	f000 fa82 	bl	800ba10 <_Balloc>
 800b50c:	4604      	mov	r4, r0
 800b50e:	b940      	cbnz	r0, 800b522 <__gethex+0x182>
 800b510:	4b5d      	ldr	r3, [pc, #372]	; (800b688 <__gethex+0x2e8>)
 800b512:	4602      	mov	r2, r0
 800b514:	21de      	movs	r1, #222	; 0xde
 800b516:	485d      	ldr	r0, [pc, #372]	; (800b68c <__gethex+0x2ec>)
 800b518:	f7ff f830 	bl	800a57c <__assert_func>
 800b51c:	3101      	adds	r1, #1
 800b51e:	105b      	asrs	r3, r3, #1
 800b520:	e7ee      	b.n	800b500 <__gethex+0x160>
 800b522:	f100 0914 	add.w	r9, r0, #20
 800b526:	f04f 0b00 	mov.w	fp, #0
 800b52a:	f1ca 0301 	rsb	r3, sl, #1
 800b52e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b532:	f8cd b000 	str.w	fp, [sp]
 800b536:	9306      	str	r3, [sp, #24]
 800b538:	42b7      	cmp	r7, r6
 800b53a:	d340      	bcc.n	800b5be <__gethex+0x21e>
 800b53c:	9802      	ldr	r0, [sp, #8]
 800b53e:	9b00      	ldr	r3, [sp, #0]
 800b540:	f840 3b04 	str.w	r3, [r0], #4
 800b544:	eba0 0009 	sub.w	r0, r0, r9
 800b548:	1080      	asrs	r0, r0, #2
 800b54a:	0146      	lsls	r6, r0, #5
 800b54c:	6120      	str	r0, [r4, #16]
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fb50 	bl	800bbf4 <__hi0bits>
 800b554:	1a30      	subs	r0, r6, r0
 800b556:	f8d8 6000 	ldr.w	r6, [r8]
 800b55a:	42b0      	cmp	r0, r6
 800b55c:	dd63      	ble.n	800b626 <__gethex+0x286>
 800b55e:	1b87      	subs	r7, r0, r6
 800b560:	4639      	mov	r1, r7
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fef4 	bl	800c350 <__any_on>
 800b568:	4682      	mov	sl, r0
 800b56a:	b1a8      	cbz	r0, 800b598 <__gethex+0x1f8>
 800b56c:	1e7b      	subs	r3, r7, #1
 800b56e:	1159      	asrs	r1, r3, #5
 800b570:	f003 021f 	and.w	r2, r3, #31
 800b574:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b578:	f04f 0a01 	mov.w	sl, #1
 800b57c:	fa0a f202 	lsl.w	r2, sl, r2
 800b580:	420a      	tst	r2, r1
 800b582:	d009      	beq.n	800b598 <__gethex+0x1f8>
 800b584:	4553      	cmp	r3, sl
 800b586:	dd05      	ble.n	800b594 <__gethex+0x1f4>
 800b588:	1eb9      	subs	r1, r7, #2
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 fee0 	bl	800c350 <__any_on>
 800b590:	2800      	cmp	r0, #0
 800b592:	d145      	bne.n	800b620 <__gethex+0x280>
 800b594:	f04f 0a02 	mov.w	sl, #2
 800b598:	4639      	mov	r1, r7
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7ff fe98 	bl	800b2d0 <rshift>
 800b5a0:	443d      	add	r5, r7
 800b5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5a6:	42ab      	cmp	r3, r5
 800b5a8:	da4c      	bge.n	800b644 <__gethex+0x2a4>
 800b5aa:	ee18 0a10 	vmov	r0, s16
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	f000 fa6e 	bl	800ba90 <_Bfree>
 800b5b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	27a3      	movs	r7, #163	; 0xa3
 800b5bc:	e785      	b.n	800b4ca <__gethex+0x12a>
 800b5be:	1e73      	subs	r3, r6, #1
 800b5c0:	9a05      	ldr	r2, [sp, #20]
 800b5c2:	9303      	str	r3, [sp, #12]
 800b5c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d019      	beq.n	800b600 <__gethex+0x260>
 800b5cc:	f1bb 0f20 	cmp.w	fp, #32
 800b5d0:	d107      	bne.n	800b5e2 <__gethex+0x242>
 800b5d2:	9b02      	ldr	r3, [sp, #8]
 800b5d4:	9a00      	ldr	r2, [sp, #0]
 800b5d6:	f843 2b04 	str.w	r2, [r3], #4
 800b5da:	9302      	str	r3, [sp, #8]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	469b      	mov	fp, r3
 800b5e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5e6:	f7ff fec5 	bl	800b374 <__hexdig_fun>
 800b5ea:	9b00      	ldr	r3, [sp, #0]
 800b5ec:	f000 000f 	and.w	r0, r0, #15
 800b5f0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b5f4:	4303      	orrs	r3, r0
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	f10b 0b04 	add.w	fp, fp, #4
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	e00d      	b.n	800b61c <__gethex+0x27c>
 800b600:	9b03      	ldr	r3, [sp, #12]
 800b602:	9a06      	ldr	r2, [sp, #24]
 800b604:	4413      	add	r3, r2
 800b606:	42bb      	cmp	r3, r7
 800b608:	d3e0      	bcc.n	800b5cc <__gethex+0x22c>
 800b60a:	4618      	mov	r0, r3
 800b60c:	9901      	ldr	r1, [sp, #4]
 800b60e:	9307      	str	r3, [sp, #28]
 800b610:	4652      	mov	r2, sl
 800b612:	f001 f991 	bl	800c938 <strncmp>
 800b616:	9b07      	ldr	r3, [sp, #28]
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1d7      	bne.n	800b5cc <__gethex+0x22c>
 800b61c:	461e      	mov	r6, r3
 800b61e:	e78b      	b.n	800b538 <__gethex+0x198>
 800b620:	f04f 0a03 	mov.w	sl, #3
 800b624:	e7b8      	b.n	800b598 <__gethex+0x1f8>
 800b626:	da0a      	bge.n	800b63e <__gethex+0x29e>
 800b628:	1a37      	subs	r7, r6, r0
 800b62a:	4621      	mov	r1, r4
 800b62c:	ee18 0a10 	vmov	r0, s16
 800b630:	463a      	mov	r2, r7
 800b632:	f000 fc49 	bl	800bec8 <__lshift>
 800b636:	1bed      	subs	r5, r5, r7
 800b638:	4604      	mov	r4, r0
 800b63a:	f100 0914 	add.w	r9, r0, #20
 800b63e:	f04f 0a00 	mov.w	sl, #0
 800b642:	e7ae      	b.n	800b5a2 <__gethex+0x202>
 800b644:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b648:	42a8      	cmp	r0, r5
 800b64a:	dd72      	ble.n	800b732 <__gethex+0x392>
 800b64c:	1b45      	subs	r5, r0, r5
 800b64e:	42ae      	cmp	r6, r5
 800b650:	dc36      	bgt.n	800b6c0 <__gethex+0x320>
 800b652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b656:	2b02      	cmp	r3, #2
 800b658:	d02a      	beq.n	800b6b0 <__gethex+0x310>
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	d02c      	beq.n	800b6b8 <__gethex+0x318>
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d11c      	bne.n	800b69c <__gethex+0x2fc>
 800b662:	42ae      	cmp	r6, r5
 800b664:	d11a      	bne.n	800b69c <__gethex+0x2fc>
 800b666:	2e01      	cmp	r6, #1
 800b668:	d112      	bne.n	800b690 <__gethex+0x2f0>
 800b66a:	9a04      	ldr	r2, [sp, #16]
 800b66c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	2301      	movs	r3, #1
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	f8c9 3000 	str.w	r3, [r9]
 800b67a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b67c:	2762      	movs	r7, #98	; 0x62
 800b67e:	601c      	str	r4, [r3, #0]
 800b680:	e723      	b.n	800b4ca <__gethex+0x12a>
 800b682:	bf00      	nop
 800b684:	0800d7c0 	.word	0x0800d7c0
 800b688:	0800d748 	.word	0x0800d748
 800b68c:	0800d759 	.word	0x0800d759
 800b690:	1e71      	subs	r1, r6, #1
 800b692:	4620      	mov	r0, r4
 800b694:	f000 fe5c 	bl	800c350 <__any_on>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d1e6      	bne.n	800b66a <__gethex+0x2ca>
 800b69c:	ee18 0a10 	vmov	r0, s16
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	f000 f9f5 	bl	800ba90 <_Bfree>
 800b6a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	2750      	movs	r7, #80	; 0x50
 800b6ae:	e70c      	b.n	800b4ca <__gethex+0x12a>
 800b6b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1f2      	bne.n	800b69c <__gethex+0x2fc>
 800b6b6:	e7d8      	b.n	800b66a <__gethex+0x2ca>
 800b6b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1d5      	bne.n	800b66a <__gethex+0x2ca>
 800b6be:	e7ed      	b.n	800b69c <__gethex+0x2fc>
 800b6c0:	1e6f      	subs	r7, r5, #1
 800b6c2:	f1ba 0f00 	cmp.w	sl, #0
 800b6c6:	d131      	bne.n	800b72c <__gethex+0x38c>
 800b6c8:	b127      	cbz	r7, 800b6d4 <__gethex+0x334>
 800b6ca:	4639      	mov	r1, r7
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f000 fe3f 	bl	800c350 <__any_on>
 800b6d2:	4682      	mov	sl, r0
 800b6d4:	117b      	asrs	r3, r7, #5
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6dc:	f007 071f 	and.w	r7, r7, #31
 800b6e0:	fa01 f707 	lsl.w	r7, r1, r7
 800b6e4:	421f      	tst	r7, r3
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	bf18      	it	ne
 800b6ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800b6f0:	1b76      	subs	r6, r6, r5
 800b6f2:	f7ff fded 	bl	800b2d0 <rshift>
 800b6f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6fa:	2702      	movs	r7, #2
 800b6fc:	f1ba 0f00 	cmp.w	sl, #0
 800b700:	d048      	beq.n	800b794 <__gethex+0x3f4>
 800b702:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b706:	2b02      	cmp	r3, #2
 800b708:	d015      	beq.n	800b736 <__gethex+0x396>
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d017      	beq.n	800b73e <__gethex+0x39e>
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d109      	bne.n	800b726 <__gethex+0x386>
 800b712:	f01a 0f02 	tst.w	sl, #2
 800b716:	d006      	beq.n	800b726 <__gethex+0x386>
 800b718:	f8d9 0000 	ldr.w	r0, [r9]
 800b71c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b720:	f01a 0f01 	tst.w	sl, #1
 800b724:	d10e      	bne.n	800b744 <__gethex+0x3a4>
 800b726:	f047 0710 	orr.w	r7, r7, #16
 800b72a:	e033      	b.n	800b794 <__gethex+0x3f4>
 800b72c:	f04f 0a01 	mov.w	sl, #1
 800b730:	e7d0      	b.n	800b6d4 <__gethex+0x334>
 800b732:	2701      	movs	r7, #1
 800b734:	e7e2      	b.n	800b6fc <__gethex+0x35c>
 800b736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b738:	f1c3 0301 	rsb	r3, r3, #1
 800b73c:	9315      	str	r3, [sp, #84]	; 0x54
 800b73e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b740:	2b00      	cmp	r3, #0
 800b742:	d0f0      	beq.n	800b726 <__gethex+0x386>
 800b744:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b748:	f104 0314 	add.w	r3, r4, #20
 800b74c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b750:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b754:	f04f 0c00 	mov.w	ip, #0
 800b758:	4618      	mov	r0, r3
 800b75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b762:	d01c      	beq.n	800b79e <__gethex+0x3fe>
 800b764:	3201      	adds	r2, #1
 800b766:	6002      	str	r2, [r0, #0]
 800b768:	2f02      	cmp	r7, #2
 800b76a:	f104 0314 	add.w	r3, r4, #20
 800b76e:	d13f      	bne.n	800b7f0 <__gethex+0x450>
 800b770:	f8d8 2000 	ldr.w	r2, [r8]
 800b774:	3a01      	subs	r2, #1
 800b776:	42b2      	cmp	r2, r6
 800b778:	d10a      	bne.n	800b790 <__gethex+0x3f0>
 800b77a:	1171      	asrs	r1, r6, #5
 800b77c:	2201      	movs	r2, #1
 800b77e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b782:	f006 061f 	and.w	r6, r6, #31
 800b786:	fa02 f606 	lsl.w	r6, r2, r6
 800b78a:	421e      	tst	r6, r3
 800b78c:	bf18      	it	ne
 800b78e:	4617      	movne	r7, r2
 800b790:	f047 0720 	orr.w	r7, r7, #32
 800b794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b796:	601c      	str	r4, [r3, #0]
 800b798:	9b04      	ldr	r3, [sp, #16]
 800b79a:	601d      	str	r5, [r3, #0]
 800b79c:	e695      	b.n	800b4ca <__gethex+0x12a>
 800b79e:	4299      	cmp	r1, r3
 800b7a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7a4:	d8d8      	bhi.n	800b758 <__gethex+0x3b8>
 800b7a6:	68a3      	ldr	r3, [r4, #8]
 800b7a8:	459b      	cmp	fp, r3
 800b7aa:	db19      	blt.n	800b7e0 <__gethex+0x440>
 800b7ac:	6861      	ldr	r1, [r4, #4]
 800b7ae:	ee18 0a10 	vmov	r0, s16
 800b7b2:	3101      	adds	r1, #1
 800b7b4:	f000 f92c 	bl	800ba10 <_Balloc>
 800b7b8:	4681      	mov	r9, r0
 800b7ba:	b918      	cbnz	r0, 800b7c4 <__gethex+0x424>
 800b7bc:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <__gethex+0x488>)
 800b7be:	4602      	mov	r2, r0
 800b7c0:	2184      	movs	r1, #132	; 0x84
 800b7c2:	e6a8      	b.n	800b516 <__gethex+0x176>
 800b7c4:	6922      	ldr	r2, [r4, #16]
 800b7c6:	3202      	adds	r2, #2
 800b7c8:	f104 010c 	add.w	r1, r4, #12
 800b7cc:	0092      	lsls	r2, r2, #2
 800b7ce:	300c      	adds	r0, #12
 800b7d0:	f000 f904 	bl	800b9dc <memcpy>
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	ee18 0a10 	vmov	r0, s16
 800b7da:	f000 f959 	bl	800ba90 <_Bfree>
 800b7de:	464c      	mov	r4, r9
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7e8:	6122      	str	r2, [r4, #16]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	615a      	str	r2, [r3, #20]
 800b7ee:	e7bb      	b.n	800b768 <__gethex+0x3c8>
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	455a      	cmp	r2, fp
 800b7f4:	dd0b      	ble.n	800b80e <__gethex+0x46e>
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7ff fd69 	bl	800b2d0 <rshift>
 800b7fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b802:	3501      	adds	r5, #1
 800b804:	42ab      	cmp	r3, r5
 800b806:	f6ff aed0 	blt.w	800b5aa <__gethex+0x20a>
 800b80a:	2701      	movs	r7, #1
 800b80c:	e7c0      	b.n	800b790 <__gethex+0x3f0>
 800b80e:	f016 061f 	ands.w	r6, r6, #31
 800b812:	d0fa      	beq.n	800b80a <__gethex+0x46a>
 800b814:	4453      	add	r3, sl
 800b816:	f1c6 0620 	rsb	r6, r6, #32
 800b81a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b81e:	f000 f9e9 	bl	800bbf4 <__hi0bits>
 800b822:	42b0      	cmp	r0, r6
 800b824:	dbe7      	blt.n	800b7f6 <__gethex+0x456>
 800b826:	e7f0      	b.n	800b80a <__gethex+0x46a>
 800b828:	0800d748 	.word	0x0800d748

0800b82c <L_shift>:
 800b82c:	f1c2 0208 	rsb	r2, r2, #8
 800b830:	0092      	lsls	r2, r2, #2
 800b832:	b570      	push	{r4, r5, r6, lr}
 800b834:	f1c2 0620 	rsb	r6, r2, #32
 800b838:	6843      	ldr	r3, [r0, #4]
 800b83a:	6804      	ldr	r4, [r0, #0]
 800b83c:	fa03 f506 	lsl.w	r5, r3, r6
 800b840:	432c      	orrs	r4, r5
 800b842:	40d3      	lsrs	r3, r2
 800b844:	6004      	str	r4, [r0, #0]
 800b846:	f840 3f04 	str.w	r3, [r0, #4]!
 800b84a:	4288      	cmp	r0, r1
 800b84c:	d3f4      	bcc.n	800b838 <L_shift+0xc>
 800b84e:	bd70      	pop	{r4, r5, r6, pc}

0800b850 <__match>:
 800b850:	b530      	push	{r4, r5, lr}
 800b852:	6803      	ldr	r3, [r0, #0]
 800b854:	3301      	adds	r3, #1
 800b856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b85a:	b914      	cbnz	r4, 800b862 <__match+0x12>
 800b85c:	6003      	str	r3, [r0, #0]
 800b85e:	2001      	movs	r0, #1
 800b860:	bd30      	pop	{r4, r5, pc}
 800b862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b866:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b86a:	2d19      	cmp	r5, #25
 800b86c:	bf98      	it	ls
 800b86e:	3220      	addls	r2, #32
 800b870:	42a2      	cmp	r2, r4
 800b872:	d0f0      	beq.n	800b856 <__match+0x6>
 800b874:	2000      	movs	r0, #0
 800b876:	e7f3      	b.n	800b860 <__match+0x10>

0800b878 <__hexnan>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	680b      	ldr	r3, [r1, #0]
 800b87e:	115e      	asrs	r6, r3, #5
 800b880:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b884:	f013 031f 	ands.w	r3, r3, #31
 800b888:	b087      	sub	sp, #28
 800b88a:	bf18      	it	ne
 800b88c:	3604      	addne	r6, #4
 800b88e:	2500      	movs	r5, #0
 800b890:	1f37      	subs	r7, r6, #4
 800b892:	4690      	mov	r8, r2
 800b894:	6802      	ldr	r2, [r0, #0]
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	4682      	mov	sl, r0
 800b89a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b89e:	46b9      	mov	r9, r7
 800b8a0:	463c      	mov	r4, r7
 800b8a2:	9502      	str	r5, [sp, #8]
 800b8a4:	46ab      	mov	fp, r5
 800b8a6:	7851      	ldrb	r1, [r2, #1]
 800b8a8:	1c53      	adds	r3, r2, #1
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	b341      	cbz	r1, 800b900 <__hexnan+0x88>
 800b8ae:	4608      	mov	r0, r1
 800b8b0:	9205      	str	r2, [sp, #20]
 800b8b2:	9104      	str	r1, [sp, #16]
 800b8b4:	f7ff fd5e 	bl	800b374 <__hexdig_fun>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d14f      	bne.n	800b95c <__hexnan+0xe4>
 800b8bc:	9904      	ldr	r1, [sp, #16]
 800b8be:	9a05      	ldr	r2, [sp, #20]
 800b8c0:	2920      	cmp	r1, #32
 800b8c2:	d818      	bhi.n	800b8f6 <__hexnan+0x7e>
 800b8c4:	9b02      	ldr	r3, [sp, #8]
 800b8c6:	459b      	cmp	fp, r3
 800b8c8:	dd13      	ble.n	800b8f2 <__hexnan+0x7a>
 800b8ca:	454c      	cmp	r4, r9
 800b8cc:	d206      	bcs.n	800b8dc <__hexnan+0x64>
 800b8ce:	2d07      	cmp	r5, #7
 800b8d0:	dc04      	bgt.n	800b8dc <__hexnan+0x64>
 800b8d2:	462a      	mov	r2, r5
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7ff ffa8 	bl	800b82c <L_shift>
 800b8dc:	4544      	cmp	r4, r8
 800b8de:	d950      	bls.n	800b982 <__hexnan+0x10a>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f1a4 0904 	sub.w	r9, r4, #4
 800b8e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8ea:	f8cd b008 	str.w	fp, [sp, #8]
 800b8ee:	464c      	mov	r4, r9
 800b8f0:	461d      	mov	r5, r3
 800b8f2:	9a03      	ldr	r2, [sp, #12]
 800b8f4:	e7d7      	b.n	800b8a6 <__hexnan+0x2e>
 800b8f6:	2929      	cmp	r1, #41	; 0x29
 800b8f8:	d156      	bne.n	800b9a8 <__hexnan+0x130>
 800b8fa:	3202      	adds	r2, #2
 800b8fc:	f8ca 2000 	str.w	r2, [sl]
 800b900:	f1bb 0f00 	cmp.w	fp, #0
 800b904:	d050      	beq.n	800b9a8 <__hexnan+0x130>
 800b906:	454c      	cmp	r4, r9
 800b908:	d206      	bcs.n	800b918 <__hexnan+0xa0>
 800b90a:	2d07      	cmp	r5, #7
 800b90c:	dc04      	bgt.n	800b918 <__hexnan+0xa0>
 800b90e:	462a      	mov	r2, r5
 800b910:	4649      	mov	r1, r9
 800b912:	4620      	mov	r0, r4
 800b914:	f7ff ff8a 	bl	800b82c <L_shift>
 800b918:	4544      	cmp	r4, r8
 800b91a:	d934      	bls.n	800b986 <__hexnan+0x10e>
 800b91c:	f1a8 0204 	sub.w	r2, r8, #4
 800b920:	4623      	mov	r3, r4
 800b922:	f853 1b04 	ldr.w	r1, [r3], #4
 800b926:	f842 1f04 	str.w	r1, [r2, #4]!
 800b92a:	429f      	cmp	r7, r3
 800b92c:	d2f9      	bcs.n	800b922 <__hexnan+0xaa>
 800b92e:	1b3b      	subs	r3, r7, r4
 800b930:	f023 0303 	bic.w	r3, r3, #3
 800b934:	3304      	adds	r3, #4
 800b936:	3401      	adds	r4, #1
 800b938:	3e03      	subs	r6, #3
 800b93a:	42b4      	cmp	r4, r6
 800b93c:	bf88      	it	hi
 800b93e:	2304      	movhi	r3, #4
 800b940:	4443      	add	r3, r8
 800b942:	2200      	movs	r2, #0
 800b944:	f843 2b04 	str.w	r2, [r3], #4
 800b948:	429f      	cmp	r7, r3
 800b94a:	d2fb      	bcs.n	800b944 <__hexnan+0xcc>
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	b91b      	cbnz	r3, 800b958 <__hexnan+0xe0>
 800b950:	4547      	cmp	r7, r8
 800b952:	d127      	bne.n	800b9a4 <__hexnan+0x12c>
 800b954:	2301      	movs	r3, #1
 800b956:	603b      	str	r3, [r7, #0]
 800b958:	2005      	movs	r0, #5
 800b95a:	e026      	b.n	800b9aa <__hexnan+0x132>
 800b95c:	3501      	adds	r5, #1
 800b95e:	2d08      	cmp	r5, #8
 800b960:	f10b 0b01 	add.w	fp, fp, #1
 800b964:	dd06      	ble.n	800b974 <__hexnan+0xfc>
 800b966:	4544      	cmp	r4, r8
 800b968:	d9c3      	bls.n	800b8f2 <__hexnan+0x7a>
 800b96a:	2300      	movs	r3, #0
 800b96c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b970:	2501      	movs	r5, #1
 800b972:	3c04      	subs	r4, #4
 800b974:	6822      	ldr	r2, [r4, #0]
 800b976:	f000 000f 	and.w	r0, r0, #15
 800b97a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b97e:	6022      	str	r2, [r4, #0]
 800b980:	e7b7      	b.n	800b8f2 <__hexnan+0x7a>
 800b982:	2508      	movs	r5, #8
 800b984:	e7b5      	b.n	800b8f2 <__hexnan+0x7a>
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d0df      	beq.n	800b94c <__hexnan+0xd4>
 800b98c:	f04f 32ff 	mov.w	r2, #4294967295
 800b990:	f1c3 0320 	rsb	r3, r3, #32
 800b994:	fa22 f303 	lsr.w	r3, r2, r3
 800b998:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b99c:	401a      	ands	r2, r3
 800b99e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b9a2:	e7d3      	b.n	800b94c <__hexnan+0xd4>
 800b9a4:	3f04      	subs	r7, #4
 800b9a6:	e7d1      	b.n	800b94c <__hexnan+0xd4>
 800b9a8:	2004      	movs	r0, #4
 800b9aa:	b007      	add	sp, #28
 800b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9b0 <_localeconv_r>:
 800b9b0:	4800      	ldr	r0, [pc, #0]	; (800b9b4 <_localeconv_r+0x4>)
 800b9b2:	4770      	bx	lr
 800b9b4:	20000164 	.word	0x20000164

0800b9b8 <__ascii_mbtowc>:
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	b901      	cbnz	r1, 800b9be <__ascii_mbtowc+0x6>
 800b9bc:	a901      	add	r1, sp, #4
 800b9be:	b142      	cbz	r2, 800b9d2 <__ascii_mbtowc+0x1a>
 800b9c0:	b14b      	cbz	r3, 800b9d6 <__ascii_mbtowc+0x1e>
 800b9c2:	7813      	ldrb	r3, [r2, #0]
 800b9c4:	600b      	str	r3, [r1, #0]
 800b9c6:	7812      	ldrb	r2, [r2, #0]
 800b9c8:	1e10      	subs	r0, r2, #0
 800b9ca:	bf18      	it	ne
 800b9cc:	2001      	movne	r0, #1
 800b9ce:	b002      	add	sp, #8
 800b9d0:	4770      	bx	lr
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	e7fb      	b.n	800b9ce <__ascii_mbtowc+0x16>
 800b9d6:	f06f 0001 	mvn.w	r0, #1
 800b9da:	e7f8      	b.n	800b9ce <__ascii_mbtowc+0x16>

0800b9dc <memcpy>:
 800b9dc:	440a      	add	r2, r1
 800b9de:	4291      	cmp	r1, r2
 800b9e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9e4:	d100      	bne.n	800b9e8 <memcpy+0xc>
 800b9e6:	4770      	bx	lr
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9f2:	4291      	cmp	r1, r2
 800b9f4:	d1f9      	bne.n	800b9ea <memcpy+0xe>
 800b9f6:	bd10      	pop	{r4, pc}

0800b9f8 <__malloc_lock>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	; (800ba00 <__malloc_lock+0x8>)
 800b9fa:	f001 ba3f 	b.w	800ce7c <__retarget_lock_acquire_recursive>
 800b9fe:	bf00      	nop
 800ba00:	200005b8 	.word	0x200005b8

0800ba04 <__malloc_unlock>:
 800ba04:	4801      	ldr	r0, [pc, #4]	; (800ba0c <__malloc_unlock+0x8>)
 800ba06:	f001 ba3a 	b.w	800ce7e <__retarget_lock_release_recursive>
 800ba0a:	bf00      	nop
 800ba0c:	200005b8 	.word	0x200005b8

0800ba10 <_Balloc>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
 800ba18:	b976      	cbnz	r6, 800ba38 <_Balloc+0x28>
 800ba1a:	2010      	movs	r0, #16
 800ba1c:	f7fc fea4 	bl	8008768 <malloc>
 800ba20:	4602      	mov	r2, r0
 800ba22:	6260      	str	r0, [r4, #36]	; 0x24
 800ba24:	b920      	cbnz	r0, 800ba30 <_Balloc+0x20>
 800ba26:	4b18      	ldr	r3, [pc, #96]	; (800ba88 <_Balloc+0x78>)
 800ba28:	4818      	ldr	r0, [pc, #96]	; (800ba8c <_Balloc+0x7c>)
 800ba2a:	2166      	movs	r1, #102	; 0x66
 800ba2c:	f7fe fda6 	bl	800a57c <__assert_func>
 800ba30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba34:	6006      	str	r6, [r0, #0]
 800ba36:	60c6      	str	r6, [r0, #12]
 800ba38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba3a:	68f3      	ldr	r3, [r6, #12]
 800ba3c:	b183      	cbz	r3, 800ba60 <_Balloc+0x50>
 800ba3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba46:	b9b8      	cbnz	r0, 800ba78 <_Balloc+0x68>
 800ba48:	2101      	movs	r1, #1
 800ba4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba4e:	1d72      	adds	r2, r6, #5
 800ba50:	0092      	lsls	r2, r2, #2
 800ba52:	4620      	mov	r0, r4
 800ba54:	f000 fc9d 	bl	800c392 <_calloc_r>
 800ba58:	b160      	cbz	r0, 800ba74 <_Balloc+0x64>
 800ba5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba5e:	e00e      	b.n	800ba7e <_Balloc+0x6e>
 800ba60:	2221      	movs	r2, #33	; 0x21
 800ba62:	2104      	movs	r1, #4
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fc94 	bl	800c392 <_calloc_r>
 800ba6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba6c:	60f0      	str	r0, [r6, #12]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e4      	bne.n	800ba3e <_Balloc+0x2e>
 800ba74:	2000      	movs	r0, #0
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	6802      	ldr	r2, [r0, #0]
 800ba7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba84:	e7f7      	b.n	800ba76 <_Balloc+0x66>
 800ba86:	bf00      	nop
 800ba88:	0800d630 	.word	0x0800d630
 800ba8c:	0800d7d4 	.word	0x0800d7d4

0800ba90 <_Bfree>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba94:	4605      	mov	r5, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	b976      	cbnz	r6, 800bab8 <_Bfree+0x28>
 800ba9a:	2010      	movs	r0, #16
 800ba9c:	f7fc fe64 	bl	8008768 <malloc>
 800baa0:	4602      	mov	r2, r0
 800baa2:	6268      	str	r0, [r5, #36]	; 0x24
 800baa4:	b920      	cbnz	r0, 800bab0 <_Bfree+0x20>
 800baa6:	4b09      	ldr	r3, [pc, #36]	; (800bacc <_Bfree+0x3c>)
 800baa8:	4809      	ldr	r0, [pc, #36]	; (800bad0 <_Bfree+0x40>)
 800baaa:	218a      	movs	r1, #138	; 0x8a
 800baac:	f7fe fd66 	bl	800a57c <__assert_func>
 800bab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bab4:	6006      	str	r6, [r0, #0]
 800bab6:	60c6      	str	r6, [r0, #12]
 800bab8:	b13c      	cbz	r4, 800baca <_Bfree+0x3a>
 800baba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800babc:	6862      	ldr	r2, [r4, #4]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bac4:	6021      	str	r1, [r4, #0]
 800bac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baca:	bd70      	pop	{r4, r5, r6, pc}
 800bacc:	0800d630 	.word	0x0800d630
 800bad0:	0800d7d4 	.word	0x0800d7d4

0800bad4 <__multadd>:
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	690d      	ldr	r5, [r1, #16]
 800bada:	4607      	mov	r7, r0
 800badc:	460c      	mov	r4, r1
 800bade:	461e      	mov	r6, r3
 800bae0:	f101 0c14 	add.w	ip, r1, #20
 800bae4:	2000      	movs	r0, #0
 800bae6:	f8dc 3000 	ldr.w	r3, [ip]
 800baea:	b299      	uxth	r1, r3
 800baec:	fb02 6101 	mla	r1, r2, r1, r6
 800baf0:	0c1e      	lsrs	r6, r3, #16
 800baf2:	0c0b      	lsrs	r3, r1, #16
 800baf4:	fb02 3306 	mla	r3, r2, r6, r3
 800baf8:	b289      	uxth	r1, r1
 800bafa:	3001      	adds	r0, #1
 800bafc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb00:	4285      	cmp	r5, r0
 800bb02:	f84c 1b04 	str.w	r1, [ip], #4
 800bb06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb0a:	dcec      	bgt.n	800bae6 <__multadd+0x12>
 800bb0c:	b30e      	cbz	r6, 800bb52 <__multadd+0x7e>
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	42ab      	cmp	r3, r5
 800bb12:	dc19      	bgt.n	800bb48 <__multadd+0x74>
 800bb14:	6861      	ldr	r1, [r4, #4]
 800bb16:	4638      	mov	r0, r7
 800bb18:	3101      	adds	r1, #1
 800bb1a:	f7ff ff79 	bl	800ba10 <_Balloc>
 800bb1e:	4680      	mov	r8, r0
 800bb20:	b928      	cbnz	r0, 800bb2e <__multadd+0x5a>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4b0c      	ldr	r3, [pc, #48]	; (800bb58 <__multadd+0x84>)
 800bb26:	480d      	ldr	r0, [pc, #52]	; (800bb5c <__multadd+0x88>)
 800bb28:	21b5      	movs	r1, #181	; 0xb5
 800bb2a:	f7fe fd27 	bl	800a57c <__assert_func>
 800bb2e:	6922      	ldr	r2, [r4, #16]
 800bb30:	3202      	adds	r2, #2
 800bb32:	f104 010c 	add.w	r1, r4, #12
 800bb36:	0092      	lsls	r2, r2, #2
 800bb38:	300c      	adds	r0, #12
 800bb3a:	f7ff ff4f 	bl	800b9dc <memcpy>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4638      	mov	r0, r7
 800bb42:	f7ff ffa5 	bl	800ba90 <_Bfree>
 800bb46:	4644      	mov	r4, r8
 800bb48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb4c:	3501      	adds	r5, #1
 800bb4e:	615e      	str	r6, [r3, #20]
 800bb50:	6125      	str	r5, [r4, #16]
 800bb52:	4620      	mov	r0, r4
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb58:	0800d748 	.word	0x0800d748
 800bb5c:	0800d7d4 	.word	0x0800d7d4

0800bb60 <__s2b>:
 800bb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	460c      	mov	r4, r1
 800bb66:	4615      	mov	r5, r2
 800bb68:	461f      	mov	r7, r3
 800bb6a:	2209      	movs	r2, #9
 800bb6c:	3308      	adds	r3, #8
 800bb6e:	4606      	mov	r6, r0
 800bb70:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb74:	2100      	movs	r1, #0
 800bb76:	2201      	movs	r2, #1
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	db09      	blt.n	800bb90 <__s2b+0x30>
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff ff47 	bl	800ba10 <_Balloc>
 800bb82:	b940      	cbnz	r0, 800bb96 <__s2b+0x36>
 800bb84:	4602      	mov	r2, r0
 800bb86:	4b19      	ldr	r3, [pc, #100]	; (800bbec <__s2b+0x8c>)
 800bb88:	4819      	ldr	r0, [pc, #100]	; (800bbf0 <__s2b+0x90>)
 800bb8a:	21ce      	movs	r1, #206	; 0xce
 800bb8c:	f7fe fcf6 	bl	800a57c <__assert_func>
 800bb90:	0052      	lsls	r2, r2, #1
 800bb92:	3101      	adds	r1, #1
 800bb94:	e7f0      	b.n	800bb78 <__s2b+0x18>
 800bb96:	9b08      	ldr	r3, [sp, #32]
 800bb98:	6143      	str	r3, [r0, #20]
 800bb9a:	2d09      	cmp	r5, #9
 800bb9c:	f04f 0301 	mov.w	r3, #1
 800bba0:	6103      	str	r3, [r0, #16]
 800bba2:	dd16      	ble.n	800bbd2 <__s2b+0x72>
 800bba4:	f104 0909 	add.w	r9, r4, #9
 800bba8:	46c8      	mov	r8, r9
 800bbaa:	442c      	add	r4, r5
 800bbac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbb0:	4601      	mov	r1, r0
 800bbb2:	3b30      	subs	r3, #48	; 0x30
 800bbb4:	220a      	movs	r2, #10
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f7ff ff8c 	bl	800bad4 <__multadd>
 800bbbc:	45a0      	cmp	r8, r4
 800bbbe:	d1f5      	bne.n	800bbac <__s2b+0x4c>
 800bbc0:	f1a5 0408 	sub.w	r4, r5, #8
 800bbc4:	444c      	add	r4, r9
 800bbc6:	1b2d      	subs	r5, r5, r4
 800bbc8:	1963      	adds	r3, r4, r5
 800bbca:	42bb      	cmp	r3, r7
 800bbcc:	db04      	blt.n	800bbd8 <__s2b+0x78>
 800bbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbd2:	340a      	adds	r4, #10
 800bbd4:	2509      	movs	r5, #9
 800bbd6:	e7f6      	b.n	800bbc6 <__s2b+0x66>
 800bbd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbdc:	4601      	mov	r1, r0
 800bbde:	3b30      	subs	r3, #48	; 0x30
 800bbe0:	220a      	movs	r2, #10
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff ff76 	bl	800bad4 <__multadd>
 800bbe8:	e7ee      	b.n	800bbc8 <__s2b+0x68>
 800bbea:	bf00      	nop
 800bbec:	0800d748 	.word	0x0800d748
 800bbf0:	0800d7d4 	.word	0x0800d7d4

0800bbf4 <__hi0bits>:
 800bbf4:	0c03      	lsrs	r3, r0, #16
 800bbf6:	041b      	lsls	r3, r3, #16
 800bbf8:	b9d3      	cbnz	r3, 800bc30 <__hi0bits+0x3c>
 800bbfa:	0400      	lsls	r0, r0, #16
 800bbfc:	2310      	movs	r3, #16
 800bbfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc02:	bf04      	itt	eq
 800bc04:	0200      	lsleq	r0, r0, #8
 800bc06:	3308      	addeq	r3, #8
 800bc08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc0c:	bf04      	itt	eq
 800bc0e:	0100      	lsleq	r0, r0, #4
 800bc10:	3304      	addeq	r3, #4
 800bc12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc16:	bf04      	itt	eq
 800bc18:	0080      	lsleq	r0, r0, #2
 800bc1a:	3302      	addeq	r3, #2
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	db05      	blt.n	800bc2c <__hi0bits+0x38>
 800bc20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc24:	f103 0301 	add.w	r3, r3, #1
 800bc28:	bf08      	it	eq
 800bc2a:	2320      	moveq	r3, #32
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	4770      	bx	lr
 800bc30:	2300      	movs	r3, #0
 800bc32:	e7e4      	b.n	800bbfe <__hi0bits+0xa>

0800bc34 <__lo0bits>:
 800bc34:	6803      	ldr	r3, [r0, #0]
 800bc36:	f013 0207 	ands.w	r2, r3, #7
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	d00b      	beq.n	800bc56 <__lo0bits+0x22>
 800bc3e:	07da      	lsls	r2, r3, #31
 800bc40:	d423      	bmi.n	800bc8a <__lo0bits+0x56>
 800bc42:	0798      	lsls	r0, r3, #30
 800bc44:	bf49      	itett	mi
 800bc46:	085b      	lsrmi	r3, r3, #1
 800bc48:	089b      	lsrpl	r3, r3, #2
 800bc4a:	2001      	movmi	r0, #1
 800bc4c:	600b      	strmi	r3, [r1, #0]
 800bc4e:	bf5c      	itt	pl
 800bc50:	600b      	strpl	r3, [r1, #0]
 800bc52:	2002      	movpl	r0, #2
 800bc54:	4770      	bx	lr
 800bc56:	b298      	uxth	r0, r3
 800bc58:	b9a8      	cbnz	r0, 800bc86 <__lo0bits+0x52>
 800bc5a:	0c1b      	lsrs	r3, r3, #16
 800bc5c:	2010      	movs	r0, #16
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	b90a      	cbnz	r2, 800bc66 <__lo0bits+0x32>
 800bc62:	3008      	adds	r0, #8
 800bc64:	0a1b      	lsrs	r3, r3, #8
 800bc66:	071a      	lsls	r2, r3, #28
 800bc68:	bf04      	itt	eq
 800bc6a:	091b      	lsreq	r3, r3, #4
 800bc6c:	3004      	addeq	r0, #4
 800bc6e:	079a      	lsls	r2, r3, #30
 800bc70:	bf04      	itt	eq
 800bc72:	089b      	lsreq	r3, r3, #2
 800bc74:	3002      	addeq	r0, #2
 800bc76:	07da      	lsls	r2, r3, #31
 800bc78:	d403      	bmi.n	800bc82 <__lo0bits+0x4e>
 800bc7a:	085b      	lsrs	r3, r3, #1
 800bc7c:	f100 0001 	add.w	r0, r0, #1
 800bc80:	d005      	beq.n	800bc8e <__lo0bits+0x5a>
 800bc82:	600b      	str	r3, [r1, #0]
 800bc84:	4770      	bx	lr
 800bc86:	4610      	mov	r0, r2
 800bc88:	e7e9      	b.n	800bc5e <__lo0bits+0x2a>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	4770      	bx	lr
 800bc8e:	2020      	movs	r0, #32
 800bc90:	4770      	bx	lr
	...

0800bc94 <__i2b>:
 800bc94:	b510      	push	{r4, lr}
 800bc96:	460c      	mov	r4, r1
 800bc98:	2101      	movs	r1, #1
 800bc9a:	f7ff feb9 	bl	800ba10 <_Balloc>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	b928      	cbnz	r0, 800bcae <__i2b+0x1a>
 800bca2:	4b05      	ldr	r3, [pc, #20]	; (800bcb8 <__i2b+0x24>)
 800bca4:	4805      	ldr	r0, [pc, #20]	; (800bcbc <__i2b+0x28>)
 800bca6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcaa:	f7fe fc67 	bl	800a57c <__assert_func>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	6144      	str	r4, [r0, #20]
 800bcb2:	6103      	str	r3, [r0, #16]
 800bcb4:	bd10      	pop	{r4, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0800d748 	.word	0x0800d748
 800bcbc:	0800d7d4 	.word	0x0800d7d4

0800bcc0 <__multiply>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	4691      	mov	r9, r2
 800bcc6:	690a      	ldr	r2, [r1, #16]
 800bcc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	bfb8      	it	lt
 800bcd0:	460b      	movlt	r3, r1
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	bfbc      	itt	lt
 800bcd6:	464c      	movlt	r4, r9
 800bcd8:	4699      	movlt	r9, r3
 800bcda:	6927      	ldr	r7, [r4, #16]
 800bcdc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	6861      	ldr	r1, [r4, #4]
 800bce4:	eb07 060a 	add.w	r6, r7, sl
 800bce8:	42b3      	cmp	r3, r6
 800bcea:	b085      	sub	sp, #20
 800bcec:	bfb8      	it	lt
 800bcee:	3101      	addlt	r1, #1
 800bcf0:	f7ff fe8e 	bl	800ba10 <_Balloc>
 800bcf4:	b930      	cbnz	r0, 800bd04 <__multiply+0x44>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	4b44      	ldr	r3, [pc, #272]	; (800be0c <__multiply+0x14c>)
 800bcfa:	4845      	ldr	r0, [pc, #276]	; (800be10 <__multiply+0x150>)
 800bcfc:	f240 115d 	movw	r1, #349	; 0x15d
 800bd00:	f7fe fc3c 	bl	800a57c <__assert_func>
 800bd04:	f100 0514 	add.w	r5, r0, #20
 800bd08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	2200      	movs	r2, #0
 800bd10:	4543      	cmp	r3, r8
 800bd12:	d321      	bcc.n	800bd58 <__multiply+0x98>
 800bd14:	f104 0314 	add.w	r3, r4, #20
 800bd18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd1c:	f109 0314 	add.w	r3, r9, #20
 800bd20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd24:	9202      	str	r2, [sp, #8]
 800bd26:	1b3a      	subs	r2, r7, r4
 800bd28:	3a15      	subs	r2, #21
 800bd2a:	f022 0203 	bic.w	r2, r2, #3
 800bd2e:	3204      	adds	r2, #4
 800bd30:	f104 0115 	add.w	r1, r4, #21
 800bd34:	428f      	cmp	r7, r1
 800bd36:	bf38      	it	cc
 800bd38:	2204      	movcc	r2, #4
 800bd3a:	9201      	str	r2, [sp, #4]
 800bd3c:	9a02      	ldr	r2, [sp, #8]
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d80c      	bhi.n	800bd5e <__multiply+0x9e>
 800bd44:	2e00      	cmp	r6, #0
 800bd46:	dd03      	ble.n	800bd50 <__multiply+0x90>
 800bd48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d05a      	beq.n	800be06 <__multiply+0x146>
 800bd50:	6106      	str	r6, [r0, #16]
 800bd52:	b005      	add	sp, #20
 800bd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd58:	f843 2b04 	str.w	r2, [r3], #4
 800bd5c:	e7d8      	b.n	800bd10 <__multiply+0x50>
 800bd5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd62:	f1ba 0f00 	cmp.w	sl, #0
 800bd66:	d024      	beq.n	800bdb2 <__multiply+0xf2>
 800bd68:	f104 0e14 	add.w	lr, r4, #20
 800bd6c:	46a9      	mov	r9, r5
 800bd6e:	f04f 0c00 	mov.w	ip, #0
 800bd72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd76:	f8d9 1000 	ldr.w	r1, [r9]
 800bd7a:	fa1f fb82 	uxth.w	fp, r2
 800bd7e:	b289      	uxth	r1, r1
 800bd80:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd88:	f8d9 2000 	ldr.w	r2, [r9]
 800bd8c:	4461      	add	r1, ip
 800bd8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd92:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd9a:	b289      	uxth	r1, r1
 800bd9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bda0:	4577      	cmp	r7, lr
 800bda2:	f849 1b04 	str.w	r1, [r9], #4
 800bda6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdaa:	d8e2      	bhi.n	800bd72 <__multiply+0xb2>
 800bdac:	9a01      	ldr	r2, [sp, #4]
 800bdae:	f845 c002 	str.w	ip, [r5, r2]
 800bdb2:	9a03      	ldr	r2, [sp, #12]
 800bdb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	f1b9 0f00 	cmp.w	r9, #0
 800bdbe:	d020      	beq.n	800be02 <__multiply+0x142>
 800bdc0:	6829      	ldr	r1, [r5, #0]
 800bdc2:	f104 0c14 	add.w	ip, r4, #20
 800bdc6:	46ae      	mov	lr, r5
 800bdc8:	f04f 0a00 	mov.w	sl, #0
 800bdcc:	f8bc b000 	ldrh.w	fp, [ip]
 800bdd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdd4:	fb09 220b 	mla	r2, r9, fp, r2
 800bdd8:	4492      	add	sl, r2
 800bdda:	b289      	uxth	r1, r1
 800bddc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bde0:	f84e 1b04 	str.w	r1, [lr], #4
 800bde4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bde8:	f8be 1000 	ldrh.w	r1, [lr]
 800bdec:	0c12      	lsrs	r2, r2, #16
 800bdee:	fb09 1102 	mla	r1, r9, r2, r1
 800bdf2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdf6:	4567      	cmp	r7, ip
 800bdf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdfc:	d8e6      	bhi.n	800bdcc <__multiply+0x10c>
 800bdfe:	9a01      	ldr	r2, [sp, #4]
 800be00:	50a9      	str	r1, [r5, r2]
 800be02:	3504      	adds	r5, #4
 800be04:	e79a      	b.n	800bd3c <__multiply+0x7c>
 800be06:	3e01      	subs	r6, #1
 800be08:	e79c      	b.n	800bd44 <__multiply+0x84>
 800be0a:	bf00      	nop
 800be0c:	0800d748 	.word	0x0800d748
 800be10:	0800d7d4 	.word	0x0800d7d4

0800be14 <__pow5mult>:
 800be14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be18:	4615      	mov	r5, r2
 800be1a:	f012 0203 	ands.w	r2, r2, #3
 800be1e:	4606      	mov	r6, r0
 800be20:	460f      	mov	r7, r1
 800be22:	d007      	beq.n	800be34 <__pow5mult+0x20>
 800be24:	4c25      	ldr	r4, [pc, #148]	; (800bebc <__pow5mult+0xa8>)
 800be26:	3a01      	subs	r2, #1
 800be28:	2300      	movs	r3, #0
 800be2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be2e:	f7ff fe51 	bl	800bad4 <__multadd>
 800be32:	4607      	mov	r7, r0
 800be34:	10ad      	asrs	r5, r5, #2
 800be36:	d03d      	beq.n	800beb4 <__pow5mult+0xa0>
 800be38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be3a:	b97c      	cbnz	r4, 800be5c <__pow5mult+0x48>
 800be3c:	2010      	movs	r0, #16
 800be3e:	f7fc fc93 	bl	8008768 <malloc>
 800be42:	4602      	mov	r2, r0
 800be44:	6270      	str	r0, [r6, #36]	; 0x24
 800be46:	b928      	cbnz	r0, 800be54 <__pow5mult+0x40>
 800be48:	4b1d      	ldr	r3, [pc, #116]	; (800bec0 <__pow5mult+0xac>)
 800be4a:	481e      	ldr	r0, [pc, #120]	; (800bec4 <__pow5mult+0xb0>)
 800be4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be50:	f7fe fb94 	bl	800a57c <__assert_func>
 800be54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be58:	6004      	str	r4, [r0, #0]
 800be5a:	60c4      	str	r4, [r0, #12]
 800be5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be64:	b94c      	cbnz	r4, 800be7a <__pow5mult+0x66>
 800be66:	f240 2171 	movw	r1, #625	; 0x271
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7ff ff12 	bl	800bc94 <__i2b>
 800be70:	2300      	movs	r3, #0
 800be72:	f8c8 0008 	str.w	r0, [r8, #8]
 800be76:	4604      	mov	r4, r0
 800be78:	6003      	str	r3, [r0, #0]
 800be7a:	f04f 0900 	mov.w	r9, #0
 800be7e:	07eb      	lsls	r3, r5, #31
 800be80:	d50a      	bpl.n	800be98 <__pow5mult+0x84>
 800be82:	4639      	mov	r1, r7
 800be84:	4622      	mov	r2, r4
 800be86:	4630      	mov	r0, r6
 800be88:	f7ff ff1a 	bl	800bcc0 <__multiply>
 800be8c:	4639      	mov	r1, r7
 800be8e:	4680      	mov	r8, r0
 800be90:	4630      	mov	r0, r6
 800be92:	f7ff fdfd 	bl	800ba90 <_Bfree>
 800be96:	4647      	mov	r7, r8
 800be98:	106d      	asrs	r5, r5, #1
 800be9a:	d00b      	beq.n	800beb4 <__pow5mult+0xa0>
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	b938      	cbnz	r0, 800beb0 <__pow5mult+0x9c>
 800bea0:	4622      	mov	r2, r4
 800bea2:	4621      	mov	r1, r4
 800bea4:	4630      	mov	r0, r6
 800bea6:	f7ff ff0b 	bl	800bcc0 <__multiply>
 800beaa:	6020      	str	r0, [r4, #0]
 800beac:	f8c0 9000 	str.w	r9, [r0]
 800beb0:	4604      	mov	r4, r0
 800beb2:	e7e4      	b.n	800be7e <__pow5mult+0x6a>
 800beb4:	4638      	mov	r0, r7
 800beb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beba:	bf00      	nop
 800bebc:	0800d920 	.word	0x0800d920
 800bec0:	0800d630 	.word	0x0800d630
 800bec4:	0800d7d4 	.word	0x0800d7d4

0800bec8 <__lshift>:
 800bec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800becc:	460c      	mov	r4, r1
 800bece:	6849      	ldr	r1, [r1, #4]
 800bed0:	6923      	ldr	r3, [r4, #16]
 800bed2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bed6:	68a3      	ldr	r3, [r4, #8]
 800bed8:	4607      	mov	r7, r0
 800beda:	4691      	mov	r9, r2
 800bedc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bee0:	f108 0601 	add.w	r6, r8, #1
 800bee4:	42b3      	cmp	r3, r6
 800bee6:	db0b      	blt.n	800bf00 <__lshift+0x38>
 800bee8:	4638      	mov	r0, r7
 800beea:	f7ff fd91 	bl	800ba10 <_Balloc>
 800beee:	4605      	mov	r5, r0
 800bef0:	b948      	cbnz	r0, 800bf06 <__lshift+0x3e>
 800bef2:	4602      	mov	r2, r0
 800bef4:	4b2a      	ldr	r3, [pc, #168]	; (800bfa0 <__lshift+0xd8>)
 800bef6:	482b      	ldr	r0, [pc, #172]	; (800bfa4 <__lshift+0xdc>)
 800bef8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800befc:	f7fe fb3e 	bl	800a57c <__assert_func>
 800bf00:	3101      	adds	r1, #1
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	e7ee      	b.n	800bee4 <__lshift+0x1c>
 800bf06:	2300      	movs	r3, #0
 800bf08:	f100 0114 	add.w	r1, r0, #20
 800bf0c:	f100 0210 	add.w	r2, r0, #16
 800bf10:	4618      	mov	r0, r3
 800bf12:	4553      	cmp	r3, sl
 800bf14:	db37      	blt.n	800bf86 <__lshift+0xbe>
 800bf16:	6920      	ldr	r0, [r4, #16]
 800bf18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf1c:	f104 0314 	add.w	r3, r4, #20
 800bf20:	f019 091f 	ands.w	r9, r9, #31
 800bf24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf2c:	d02f      	beq.n	800bf8e <__lshift+0xc6>
 800bf2e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf32:	468a      	mov	sl, r1
 800bf34:	f04f 0c00 	mov.w	ip, #0
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	fa02 f209 	lsl.w	r2, r2, r9
 800bf3e:	ea42 020c 	orr.w	r2, r2, ip
 800bf42:	f84a 2b04 	str.w	r2, [sl], #4
 800bf46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf4a:	4298      	cmp	r0, r3
 800bf4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf50:	d8f2      	bhi.n	800bf38 <__lshift+0x70>
 800bf52:	1b03      	subs	r3, r0, r4
 800bf54:	3b15      	subs	r3, #21
 800bf56:	f023 0303 	bic.w	r3, r3, #3
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	f104 0215 	add.w	r2, r4, #21
 800bf60:	4290      	cmp	r0, r2
 800bf62:	bf38      	it	cc
 800bf64:	2304      	movcc	r3, #4
 800bf66:	f841 c003 	str.w	ip, [r1, r3]
 800bf6a:	f1bc 0f00 	cmp.w	ip, #0
 800bf6e:	d001      	beq.n	800bf74 <__lshift+0xac>
 800bf70:	f108 0602 	add.w	r6, r8, #2
 800bf74:	3e01      	subs	r6, #1
 800bf76:	4638      	mov	r0, r7
 800bf78:	612e      	str	r6, [r5, #16]
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	f7ff fd88 	bl	800ba90 <_Bfree>
 800bf80:	4628      	mov	r0, r5
 800bf82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf86:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	e7c1      	b.n	800bf12 <__lshift+0x4a>
 800bf8e:	3904      	subs	r1, #4
 800bf90:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf94:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf98:	4298      	cmp	r0, r3
 800bf9a:	d8f9      	bhi.n	800bf90 <__lshift+0xc8>
 800bf9c:	e7ea      	b.n	800bf74 <__lshift+0xac>
 800bf9e:	bf00      	nop
 800bfa0:	0800d748 	.word	0x0800d748
 800bfa4:	0800d7d4 	.word	0x0800d7d4

0800bfa8 <__mcmp>:
 800bfa8:	b530      	push	{r4, r5, lr}
 800bfaa:	6902      	ldr	r2, [r0, #16]
 800bfac:	690c      	ldr	r4, [r1, #16]
 800bfae:	1b12      	subs	r2, r2, r4
 800bfb0:	d10e      	bne.n	800bfd0 <__mcmp+0x28>
 800bfb2:	f100 0314 	add.w	r3, r0, #20
 800bfb6:	3114      	adds	r1, #20
 800bfb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfc8:	42a5      	cmp	r5, r4
 800bfca:	d003      	beq.n	800bfd4 <__mcmp+0x2c>
 800bfcc:	d305      	bcc.n	800bfda <__mcmp+0x32>
 800bfce:	2201      	movs	r2, #1
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	bd30      	pop	{r4, r5, pc}
 800bfd4:	4283      	cmp	r3, r0
 800bfd6:	d3f3      	bcc.n	800bfc0 <__mcmp+0x18>
 800bfd8:	e7fa      	b.n	800bfd0 <__mcmp+0x28>
 800bfda:	f04f 32ff 	mov.w	r2, #4294967295
 800bfde:	e7f7      	b.n	800bfd0 <__mcmp+0x28>

0800bfe0 <__mdiff>:
 800bfe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	460c      	mov	r4, r1
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	4611      	mov	r1, r2
 800bfea:	4620      	mov	r0, r4
 800bfec:	4690      	mov	r8, r2
 800bfee:	f7ff ffdb 	bl	800bfa8 <__mcmp>
 800bff2:	1e05      	subs	r5, r0, #0
 800bff4:	d110      	bne.n	800c018 <__mdiff+0x38>
 800bff6:	4629      	mov	r1, r5
 800bff8:	4630      	mov	r0, r6
 800bffa:	f7ff fd09 	bl	800ba10 <_Balloc>
 800bffe:	b930      	cbnz	r0, 800c00e <__mdiff+0x2e>
 800c000:	4b3a      	ldr	r3, [pc, #232]	; (800c0ec <__mdiff+0x10c>)
 800c002:	4602      	mov	r2, r0
 800c004:	f240 2132 	movw	r1, #562	; 0x232
 800c008:	4839      	ldr	r0, [pc, #228]	; (800c0f0 <__mdiff+0x110>)
 800c00a:	f7fe fab7 	bl	800a57c <__assert_func>
 800c00e:	2301      	movs	r3, #1
 800c010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c018:	bfa4      	itt	ge
 800c01a:	4643      	movge	r3, r8
 800c01c:	46a0      	movge	r8, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c024:	bfa6      	itte	ge
 800c026:	461c      	movge	r4, r3
 800c028:	2500      	movge	r5, #0
 800c02a:	2501      	movlt	r5, #1
 800c02c:	f7ff fcf0 	bl	800ba10 <_Balloc>
 800c030:	b920      	cbnz	r0, 800c03c <__mdiff+0x5c>
 800c032:	4b2e      	ldr	r3, [pc, #184]	; (800c0ec <__mdiff+0x10c>)
 800c034:	4602      	mov	r2, r0
 800c036:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c03a:	e7e5      	b.n	800c008 <__mdiff+0x28>
 800c03c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c040:	6926      	ldr	r6, [r4, #16]
 800c042:	60c5      	str	r5, [r0, #12]
 800c044:	f104 0914 	add.w	r9, r4, #20
 800c048:	f108 0514 	add.w	r5, r8, #20
 800c04c:	f100 0e14 	add.w	lr, r0, #20
 800c050:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c054:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c058:	f108 0210 	add.w	r2, r8, #16
 800c05c:	46f2      	mov	sl, lr
 800c05e:	2100      	movs	r1, #0
 800c060:	f859 3b04 	ldr.w	r3, [r9], #4
 800c064:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c068:	fa1f f883 	uxth.w	r8, r3
 800c06c:	fa11 f18b 	uxtah	r1, r1, fp
 800c070:	0c1b      	lsrs	r3, r3, #16
 800c072:	eba1 0808 	sub.w	r8, r1, r8
 800c076:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c07a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c07e:	fa1f f888 	uxth.w	r8, r8
 800c082:	1419      	asrs	r1, r3, #16
 800c084:	454e      	cmp	r6, r9
 800c086:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c08a:	f84a 3b04 	str.w	r3, [sl], #4
 800c08e:	d8e7      	bhi.n	800c060 <__mdiff+0x80>
 800c090:	1b33      	subs	r3, r6, r4
 800c092:	3b15      	subs	r3, #21
 800c094:	f023 0303 	bic.w	r3, r3, #3
 800c098:	3304      	adds	r3, #4
 800c09a:	3415      	adds	r4, #21
 800c09c:	42a6      	cmp	r6, r4
 800c09e:	bf38      	it	cc
 800c0a0:	2304      	movcc	r3, #4
 800c0a2:	441d      	add	r5, r3
 800c0a4:	4473      	add	r3, lr
 800c0a6:	469e      	mov	lr, r3
 800c0a8:	462e      	mov	r6, r5
 800c0aa:	4566      	cmp	r6, ip
 800c0ac:	d30e      	bcc.n	800c0cc <__mdiff+0xec>
 800c0ae:	f10c 0203 	add.w	r2, ip, #3
 800c0b2:	1b52      	subs	r2, r2, r5
 800c0b4:	f022 0203 	bic.w	r2, r2, #3
 800c0b8:	3d03      	subs	r5, #3
 800c0ba:	45ac      	cmp	ip, r5
 800c0bc:	bf38      	it	cc
 800c0be:	2200      	movcc	r2, #0
 800c0c0:	441a      	add	r2, r3
 800c0c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0c6:	b17b      	cbz	r3, 800c0e8 <__mdiff+0x108>
 800c0c8:	6107      	str	r7, [r0, #16]
 800c0ca:	e7a3      	b.n	800c014 <__mdiff+0x34>
 800c0cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0d0:	fa11 f288 	uxtah	r2, r1, r8
 800c0d4:	1414      	asrs	r4, r2, #16
 800c0d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0da:	b292      	uxth	r2, r2
 800c0dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0e0:	f84e 2b04 	str.w	r2, [lr], #4
 800c0e4:	1421      	asrs	r1, r4, #16
 800c0e6:	e7e0      	b.n	800c0aa <__mdiff+0xca>
 800c0e8:	3f01      	subs	r7, #1
 800c0ea:	e7ea      	b.n	800c0c2 <__mdiff+0xe2>
 800c0ec:	0800d748 	.word	0x0800d748
 800c0f0:	0800d7d4 	.word	0x0800d7d4

0800c0f4 <__ulp>:
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	ed8d 0b00 	vstr	d0, [sp]
 800c0fa:	9b01      	ldr	r3, [sp, #4]
 800c0fc:	4912      	ldr	r1, [pc, #72]	; (800c148 <__ulp+0x54>)
 800c0fe:	4019      	ands	r1, r3
 800c100:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c104:	2900      	cmp	r1, #0
 800c106:	dd05      	ble.n	800c114 <__ulp+0x20>
 800c108:	2200      	movs	r2, #0
 800c10a:	460b      	mov	r3, r1
 800c10c:	ec43 2b10 	vmov	d0, r2, r3
 800c110:	b002      	add	sp, #8
 800c112:	4770      	bx	lr
 800c114:	4249      	negs	r1, r1
 800c116:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c11a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c11e:	f04f 0200 	mov.w	r2, #0
 800c122:	f04f 0300 	mov.w	r3, #0
 800c126:	da04      	bge.n	800c132 <__ulp+0x3e>
 800c128:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c12c:	fa41 f300 	asr.w	r3, r1, r0
 800c130:	e7ec      	b.n	800c10c <__ulp+0x18>
 800c132:	f1a0 0114 	sub.w	r1, r0, #20
 800c136:	291e      	cmp	r1, #30
 800c138:	bfda      	itte	le
 800c13a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c13e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c142:	2101      	movgt	r1, #1
 800c144:	460a      	mov	r2, r1
 800c146:	e7e1      	b.n	800c10c <__ulp+0x18>
 800c148:	7ff00000 	.word	0x7ff00000

0800c14c <__b2d>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	6905      	ldr	r5, [r0, #16]
 800c150:	f100 0714 	add.w	r7, r0, #20
 800c154:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c158:	1f2e      	subs	r6, r5, #4
 800c15a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c15e:	4620      	mov	r0, r4
 800c160:	f7ff fd48 	bl	800bbf4 <__hi0bits>
 800c164:	f1c0 0320 	rsb	r3, r0, #32
 800c168:	280a      	cmp	r0, #10
 800c16a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1e8 <__b2d+0x9c>
 800c16e:	600b      	str	r3, [r1, #0]
 800c170:	dc14      	bgt.n	800c19c <__b2d+0x50>
 800c172:	f1c0 0e0b 	rsb	lr, r0, #11
 800c176:	fa24 f10e 	lsr.w	r1, r4, lr
 800c17a:	42b7      	cmp	r7, r6
 800c17c:	ea41 030c 	orr.w	r3, r1, ip
 800c180:	bf34      	ite	cc
 800c182:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c186:	2100      	movcs	r1, #0
 800c188:	3015      	adds	r0, #21
 800c18a:	fa04 f000 	lsl.w	r0, r4, r0
 800c18e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c192:	ea40 0201 	orr.w	r2, r0, r1
 800c196:	ec43 2b10 	vmov	d0, r2, r3
 800c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c19c:	42b7      	cmp	r7, r6
 800c19e:	bf3a      	itte	cc
 800c1a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c1a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800c1a8:	2100      	movcs	r1, #0
 800c1aa:	380b      	subs	r0, #11
 800c1ac:	d017      	beq.n	800c1de <__b2d+0x92>
 800c1ae:	f1c0 0c20 	rsb	ip, r0, #32
 800c1b2:	fa04 f500 	lsl.w	r5, r4, r0
 800c1b6:	42be      	cmp	r6, r7
 800c1b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800c1bc:	ea45 0504 	orr.w	r5, r5, r4
 800c1c0:	bf8c      	ite	hi
 800c1c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c1c6:	2400      	movls	r4, #0
 800c1c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c1cc:	fa01 f000 	lsl.w	r0, r1, r0
 800c1d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1d8:	ea40 0204 	orr.w	r2, r0, r4
 800c1dc:	e7db      	b.n	800c196 <__b2d+0x4a>
 800c1de:	ea44 030c 	orr.w	r3, r4, ip
 800c1e2:	460a      	mov	r2, r1
 800c1e4:	e7d7      	b.n	800c196 <__b2d+0x4a>
 800c1e6:	bf00      	nop
 800c1e8:	3ff00000 	.word	0x3ff00000

0800c1ec <__d2b>:
 800c1ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1f0:	4689      	mov	r9, r1
 800c1f2:	2101      	movs	r1, #1
 800c1f4:	ec57 6b10 	vmov	r6, r7, d0
 800c1f8:	4690      	mov	r8, r2
 800c1fa:	f7ff fc09 	bl	800ba10 <_Balloc>
 800c1fe:	4604      	mov	r4, r0
 800c200:	b930      	cbnz	r0, 800c210 <__d2b+0x24>
 800c202:	4602      	mov	r2, r0
 800c204:	4b25      	ldr	r3, [pc, #148]	; (800c29c <__d2b+0xb0>)
 800c206:	4826      	ldr	r0, [pc, #152]	; (800c2a0 <__d2b+0xb4>)
 800c208:	f240 310a 	movw	r1, #778	; 0x30a
 800c20c:	f7fe f9b6 	bl	800a57c <__assert_func>
 800c210:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c214:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c218:	bb35      	cbnz	r5, 800c268 <__d2b+0x7c>
 800c21a:	2e00      	cmp	r6, #0
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	d028      	beq.n	800c272 <__d2b+0x86>
 800c220:	4668      	mov	r0, sp
 800c222:	9600      	str	r6, [sp, #0]
 800c224:	f7ff fd06 	bl	800bc34 <__lo0bits>
 800c228:	9900      	ldr	r1, [sp, #0]
 800c22a:	b300      	cbz	r0, 800c26e <__d2b+0x82>
 800c22c:	9a01      	ldr	r2, [sp, #4]
 800c22e:	f1c0 0320 	rsb	r3, r0, #32
 800c232:	fa02 f303 	lsl.w	r3, r2, r3
 800c236:	430b      	orrs	r3, r1
 800c238:	40c2      	lsrs	r2, r0
 800c23a:	6163      	str	r3, [r4, #20]
 800c23c:	9201      	str	r2, [sp, #4]
 800c23e:	9b01      	ldr	r3, [sp, #4]
 800c240:	61a3      	str	r3, [r4, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	bf14      	ite	ne
 800c246:	2202      	movne	r2, #2
 800c248:	2201      	moveq	r2, #1
 800c24a:	6122      	str	r2, [r4, #16]
 800c24c:	b1d5      	cbz	r5, 800c284 <__d2b+0x98>
 800c24e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c252:	4405      	add	r5, r0
 800c254:	f8c9 5000 	str.w	r5, [r9]
 800c258:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c25c:	f8c8 0000 	str.w	r0, [r8]
 800c260:	4620      	mov	r0, r4
 800c262:	b003      	add	sp, #12
 800c264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c26c:	e7d5      	b.n	800c21a <__d2b+0x2e>
 800c26e:	6161      	str	r1, [r4, #20]
 800c270:	e7e5      	b.n	800c23e <__d2b+0x52>
 800c272:	a801      	add	r0, sp, #4
 800c274:	f7ff fcde 	bl	800bc34 <__lo0bits>
 800c278:	9b01      	ldr	r3, [sp, #4]
 800c27a:	6163      	str	r3, [r4, #20]
 800c27c:	2201      	movs	r2, #1
 800c27e:	6122      	str	r2, [r4, #16]
 800c280:	3020      	adds	r0, #32
 800c282:	e7e3      	b.n	800c24c <__d2b+0x60>
 800c284:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c288:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c28c:	f8c9 0000 	str.w	r0, [r9]
 800c290:	6918      	ldr	r0, [r3, #16]
 800c292:	f7ff fcaf 	bl	800bbf4 <__hi0bits>
 800c296:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c29a:	e7df      	b.n	800c25c <__d2b+0x70>
 800c29c:	0800d748 	.word	0x0800d748
 800c2a0:	0800d7d4 	.word	0x0800d7d4

0800c2a4 <__ratio>:
 800c2a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a8:	4688      	mov	r8, r1
 800c2aa:	4669      	mov	r1, sp
 800c2ac:	4681      	mov	r9, r0
 800c2ae:	f7ff ff4d 	bl	800c14c <__b2d>
 800c2b2:	a901      	add	r1, sp, #4
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	ec55 4b10 	vmov	r4, r5, d0
 800c2ba:	f7ff ff47 	bl	800c14c <__b2d>
 800c2be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2c6:	eba3 0c02 	sub.w	ip, r3, r2
 800c2ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2ce:	1a9b      	subs	r3, r3, r2
 800c2d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2d4:	ec51 0b10 	vmov	r0, r1, d0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	bfd6      	itet	le
 800c2dc:	460a      	movle	r2, r1
 800c2de:	462a      	movgt	r2, r5
 800c2e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2e4:	468b      	mov	fp, r1
 800c2e6:	462f      	mov	r7, r5
 800c2e8:	bfd4      	ite	le
 800c2ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	ee10 2a10 	vmov	r2, s0
 800c2f8:	465b      	mov	r3, fp
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f7f4 fad6 	bl	80008ac <__aeabi_ddiv>
 800c300:	ec41 0b10 	vmov	d0, r0, r1
 800c304:	b003      	add	sp, #12
 800c306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c30a <__copybits>:
 800c30a:	3901      	subs	r1, #1
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	1149      	asrs	r1, r1, #5
 800c310:	6914      	ldr	r4, [r2, #16]
 800c312:	3101      	adds	r1, #1
 800c314:	f102 0314 	add.w	r3, r2, #20
 800c318:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c31c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c320:	1f05      	subs	r5, r0, #4
 800c322:	42a3      	cmp	r3, r4
 800c324:	d30c      	bcc.n	800c340 <__copybits+0x36>
 800c326:	1aa3      	subs	r3, r4, r2
 800c328:	3b11      	subs	r3, #17
 800c32a:	f023 0303 	bic.w	r3, r3, #3
 800c32e:	3211      	adds	r2, #17
 800c330:	42a2      	cmp	r2, r4
 800c332:	bf88      	it	hi
 800c334:	2300      	movhi	r3, #0
 800c336:	4418      	add	r0, r3
 800c338:	2300      	movs	r3, #0
 800c33a:	4288      	cmp	r0, r1
 800c33c:	d305      	bcc.n	800c34a <__copybits+0x40>
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
 800c340:	f853 6b04 	ldr.w	r6, [r3], #4
 800c344:	f845 6f04 	str.w	r6, [r5, #4]!
 800c348:	e7eb      	b.n	800c322 <__copybits+0x18>
 800c34a:	f840 3b04 	str.w	r3, [r0], #4
 800c34e:	e7f4      	b.n	800c33a <__copybits+0x30>

0800c350 <__any_on>:
 800c350:	f100 0214 	add.w	r2, r0, #20
 800c354:	6900      	ldr	r0, [r0, #16]
 800c356:	114b      	asrs	r3, r1, #5
 800c358:	4298      	cmp	r0, r3
 800c35a:	b510      	push	{r4, lr}
 800c35c:	db11      	blt.n	800c382 <__any_on+0x32>
 800c35e:	dd0a      	ble.n	800c376 <__any_on+0x26>
 800c360:	f011 011f 	ands.w	r1, r1, #31
 800c364:	d007      	beq.n	800c376 <__any_on+0x26>
 800c366:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c36a:	fa24 f001 	lsr.w	r0, r4, r1
 800c36e:	fa00 f101 	lsl.w	r1, r0, r1
 800c372:	428c      	cmp	r4, r1
 800c374:	d10b      	bne.n	800c38e <__any_on+0x3e>
 800c376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d803      	bhi.n	800c386 <__any_on+0x36>
 800c37e:	2000      	movs	r0, #0
 800c380:	bd10      	pop	{r4, pc}
 800c382:	4603      	mov	r3, r0
 800c384:	e7f7      	b.n	800c376 <__any_on+0x26>
 800c386:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c38a:	2900      	cmp	r1, #0
 800c38c:	d0f5      	beq.n	800c37a <__any_on+0x2a>
 800c38e:	2001      	movs	r0, #1
 800c390:	e7f6      	b.n	800c380 <__any_on+0x30>

0800c392 <_calloc_r>:
 800c392:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c394:	fba1 2402 	umull	r2, r4, r1, r2
 800c398:	b94c      	cbnz	r4, 800c3ae <_calloc_r+0x1c>
 800c39a:	4611      	mov	r1, r2
 800c39c:	9201      	str	r2, [sp, #4]
 800c39e:	f7fc fa67 	bl	8008870 <_malloc_r>
 800c3a2:	9a01      	ldr	r2, [sp, #4]
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	b930      	cbnz	r0, 800c3b6 <_calloc_r+0x24>
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	b003      	add	sp, #12
 800c3ac:	bd30      	pop	{r4, r5, pc}
 800c3ae:	220c      	movs	r2, #12
 800c3b0:	6002      	str	r2, [r0, #0]
 800c3b2:	2500      	movs	r5, #0
 800c3b4:	e7f8      	b.n	800c3a8 <_calloc_r+0x16>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	f7fc f9e6 	bl	8008788 <memset>
 800c3bc:	e7f4      	b.n	800c3a8 <_calloc_r+0x16>

0800c3be <__ssputs_r>:
 800c3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c2:	688e      	ldr	r6, [r1, #8]
 800c3c4:	429e      	cmp	r6, r3
 800c3c6:	4682      	mov	sl, r0
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	4690      	mov	r8, r2
 800c3cc:	461f      	mov	r7, r3
 800c3ce:	d838      	bhi.n	800c442 <__ssputs_r+0x84>
 800c3d0:	898a      	ldrh	r2, [r1, #12]
 800c3d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3d6:	d032      	beq.n	800c43e <__ssputs_r+0x80>
 800c3d8:	6825      	ldr	r5, [r4, #0]
 800c3da:	6909      	ldr	r1, [r1, #16]
 800c3dc:	eba5 0901 	sub.w	r9, r5, r1
 800c3e0:	6965      	ldr	r5, [r4, #20]
 800c3e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	444b      	add	r3, r9
 800c3ee:	106d      	asrs	r5, r5, #1
 800c3f0:	429d      	cmp	r5, r3
 800c3f2:	bf38      	it	cc
 800c3f4:	461d      	movcc	r5, r3
 800c3f6:	0553      	lsls	r3, r2, #21
 800c3f8:	d531      	bpl.n	800c45e <__ssputs_r+0xa0>
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	f7fc fa38 	bl	8008870 <_malloc_r>
 800c400:	4606      	mov	r6, r0
 800c402:	b950      	cbnz	r0, 800c41a <__ssputs_r+0x5c>
 800c404:	230c      	movs	r3, #12
 800c406:	f8ca 3000 	str.w	r3, [sl]
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	f04f 30ff 	mov.w	r0, #4294967295
 800c416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41a:	6921      	ldr	r1, [r4, #16]
 800c41c:	464a      	mov	r2, r9
 800c41e:	f7ff fadd 	bl	800b9dc <memcpy>
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	6126      	str	r6, [r4, #16]
 800c430:	6165      	str	r5, [r4, #20]
 800c432:	444e      	add	r6, r9
 800c434:	eba5 0509 	sub.w	r5, r5, r9
 800c438:	6026      	str	r6, [r4, #0]
 800c43a:	60a5      	str	r5, [r4, #8]
 800c43c:	463e      	mov	r6, r7
 800c43e:	42be      	cmp	r6, r7
 800c440:	d900      	bls.n	800c444 <__ssputs_r+0x86>
 800c442:	463e      	mov	r6, r7
 800c444:	6820      	ldr	r0, [r4, #0]
 800c446:	4632      	mov	r2, r6
 800c448:	4641      	mov	r1, r8
 800c44a:	f000 fd7f 	bl	800cf4c <memmove>
 800c44e:	68a3      	ldr	r3, [r4, #8]
 800c450:	1b9b      	subs	r3, r3, r6
 800c452:	60a3      	str	r3, [r4, #8]
 800c454:	6823      	ldr	r3, [r4, #0]
 800c456:	4433      	add	r3, r6
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	2000      	movs	r0, #0
 800c45c:	e7db      	b.n	800c416 <__ssputs_r+0x58>
 800c45e:	462a      	mov	r2, r5
 800c460:	f000 fd8e 	bl	800cf80 <_realloc_r>
 800c464:	4606      	mov	r6, r0
 800c466:	2800      	cmp	r0, #0
 800c468:	d1e1      	bne.n	800c42e <__ssputs_r+0x70>
 800c46a:	6921      	ldr	r1, [r4, #16]
 800c46c:	4650      	mov	r0, sl
 800c46e:	f7fc f993 	bl	8008798 <_free_r>
 800c472:	e7c7      	b.n	800c404 <__ssputs_r+0x46>

0800c474 <_svfiprintf_r>:
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	4698      	mov	r8, r3
 800c47a:	898b      	ldrh	r3, [r1, #12]
 800c47c:	061b      	lsls	r3, r3, #24
 800c47e:	b09d      	sub	sp, #116	; 0x74
 800c480:	4607      	mov	r7, r0
 800c482:	460d      	mov	r5, r1
 800c484:	4614      	mov	r4, r2
 800c486:	d50e      	bpl.n	800c4a6 <_svfiprintf_r+0x32>
 800c488:	690b      	ldr	r3, [r1, #16]
 800c48a:	b963      	cbnz	r3, 800c4a6 <_svfiprintf_r+0x32>
 800c48c:	2140      	movs	r1, #64	; 0x40
 800c48e:	f7fc f9ef 	bl	8008870 <_malloc_r>
 800c492:	6028      	str	r0, [r5, #0]
 800c494:	6128      	str	r0, [r5, #16]
 800c496:	b920      	cbnz	r0, 800c4a2 <_svfiprintf_r+0x2e>
 800c498:	230c      	movs	r3, #12
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a0:	e0d1      	b.n	800c646 <_svfiprintf_r+0x1d2>
 800c4a2:	2340      	movs	r3, #64	; 0x40
 800c4a4:	616b      	str	r3, [r5, #20]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4aa:	2320      	movs	r3, #32
 800c4ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b4:	2330      	movs	r3, #48	; 0x30
 800c4b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c660 <_svfiprintf_r+0x1ec>
 800c4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4be:	f04f 0901 	mov.w	r9, #1
 800c4c2:	4623      	mov	r3, r4
 800c4c4:	469a      	mov	sl, r3
 800c4c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ca:	b10a      	cbz	r2, 800c4d0 <_svfiprintf_r+0x5c>
 800c4cc:	2a25      	cmp	r2, #37	; 0x25
 800c4ce:	d1f9      	bne.n	800c4c4 <_svfiprintf_r+0x50>
 800c4d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d4:	d00b      	beq.n	800c4ee <_svfiprintf_r+0x7a>
 800c4d6:	465b      	mov	r3, fp
 800c4d8:	4622      	mov	r2, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4638      	mov	r0, r7
 800c4de:	f7ff ff6e 	bl	800c3be <__ssputs_r>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	f000 80aa 	beq.w	800c63c <_svfiprintf_r+0x1c8>
 800c4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ea:	445a      	add	r2, fp
 800c4ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 80a2 	beq.w	800c63c <_svfiprintf_r+0x1c8>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c502:	f10a 0a01 	add.w	sl, sl, #1
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	9307      	str	r3, [sp, #28]
 800c50a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c50e:	931a      	str	r3, [sp, #104]	; 0x68
 800c510:	4654      	mov	r4, sl
 800c512:	2205      	movs	r2, #5
 800c514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c518:	4851      	ldr	r0, [pc, #324]	; (800c660 <_svfiprintf_r+0x1ec>)
 800c51a:	f7f3 fe91 	bl	8000240 <memchr>
 800c51e:	9a04      	ldr	r2, [sp, #16]
 800c520:	b9d8      	cbnz	r0, 800c55a <_svfiprintf_r+0xe6>
 800c522:	06d0      	lsls	r0, r2, #27
 800c524:	bf44      	itt	mi
 800c526:	2320      	movmi	r3, #32
 800c528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c52c:	0711      	lsls	r1, r2, #28
 800c52e:	bf44      	itt	mi
 800c530:	232b      	movmi	r3, #43	; 0x2b
 800c532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c536:	f89a 3000 	ldrb.w	r3, [sl]
 800c53a:	2b2a      	cmp	r3, #42	; 0x2a
 800c53c:	d015      	beq.n	800c56a <_svfiprintf_r+0xf6>
 800c53e:	9a07      	ldr	r2, [sp, #28]
 800c540:	4654      	mov	r4, sl
 800c542:	2000      	movs	r0, #0
 800c544:	f04f 0c0a 	mov.w	ip, #10
 800c548:	4621      	mov	r1, r4
 800c54a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c54e:	3b30      	subs	r3, #48	; 0x30
 800c550:	2b09      	cmp	r3, #9
 800c552:	d94e      	bls.n	800c5f2 <_svfiprintf_r+0x17e>
 800c554:	b1b0      	cbz	r0, 800c584 <_svfiprintf_r+0x110>
 800c556:	9207      	str	r2, [sp, #28]
 800c558:	e014      	b.n	800c584 <_svfiprintf_r+0x110>
 800c55a:	eba0 0308 	sub.w	r3, r0, r8
 800c55e:	fa09 f303 	lsl.w	r3, r9, r3
 800c562:	4313      	orrs	r3, r2
 800c564:	9304      	str	r3, [sp, #16]
 800c566:	46a2      	mov	sl, r4
 800c568:	e7d2      	b.n	800c510 <_svfiprintf_r+0x9c>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	1d19      	adds	r1, r3, #4
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	9103      	str	r1, [sp, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	bfbb      	ittet	lt
 800c576:	425b      	neglt	r3, r3
 800c578:	f042 0202 	orrlt.w	r2, r2, #2
 800c57c:	9307      	strge	r3, [sp, #28]
 800c57e:	9307      	strlt	r3, [sp, #28]
 800c580:	bfb8      	it	lt
 800c582:	9204      	strlt	r2, [sp, #16]
 800c584:	7823      	ldrb	r3, [r4, #0]
 800c586:	2b2e      	cmp	r3, #46	; 0x2e
 800c588:	d10c      	bne.n	800c5a4 <_svfiprintf_r+0x130>
 800c58a:	7863      	ldrb	r3, [r4, #1]
 800c58c:	2b2a      	cmp	r3, #42	; 0x2a
 800c58e:	d135      	bne.n	800c5fc <_svfiprintf_r+0x188>
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	1d1a      	adds	r2, r3, #4
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	9203      	str	r2, [sp, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bfb8      	it	lt
 800c59c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5a0:	3402      	adds	r4, #2
 800c5a2:	9305      	str	r3, [sp, #20]
 800c5a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c670 <_svfiprintf_r+0x1fc>
 800c5a8:	7821      	ldrb	r1, [r4, #0]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	4650      	mov	r0, sl
 800c5ae:	f7f3 fe47 	bl	8000240 <memchr>
 800c5b2:	b140      	cbz	r0, 800c5c6 <_svfiprintf_r+0x152>
 800c5b4:	2340      	movs	r3, #64	; 0x40
 800c5b6:	eba0 000a 	sub.w	r0, r0, sl
 800c5ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c5be:	9b04      	ldr	r3, [sp, #16]
 800c5c0:	4303      	orrs	r3, r0
 800c5c2:	3401      	adds	r4, #1
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ca:	4826      	ldr	r0, [pc, #152]	; (800c664 <_svfiprintf_r+0x1f0>)
 800c5cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5d0:	2206      	movs	r2, #6
 800c5d2:	f7f3 fe35 	bl	8000240 <memchr>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d038      	beq.n	800c64c <_svfiprintf_r+0x1d8>
 800c5da:	4b23      	ldr	r3, [pc, #140]	; (800c668 <_svfiprintf_r+0x1f4>)
 800c5dc:	bb1b      	cbnz	r3, 800c626 <_svfiprintf_r+0x1b2>
 800c5de:	9b03      	ldr	r3, [sp, #12]
 800c5e0:	3307      	adds	r3, #7
 800c5e2:	f023 0307 	bic.w	r3, r3, #7
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	9303      	str	r3, [sp, #12]
 800c5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ec:	4433      	add	r3, r6
 800c5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f0:	e767      	b.n	800c4c2 <_svfiprintf_r+0x4e>
 800c5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	e7a5      	b.n	800c548 <_svfiprintf_r+0xd4>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	3401      	adds	r4, #1
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	4619      	mov	r1, r3
 800c604:	f04f 0c0a 	mov.w	ip, #10
 800c608:	4620      	mov	r0, r4
 800c60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c60e:	3a30      	subs	r2, #48	; 0x30
 800c610:	2a09      	cmp	r2, #9
 800c612:	d903      	bls.n	800c61c <_svfiprintf_r+0x1a8>
 800c614:	2b00      	cmp	r3, #0
 800c616:	d0c5      	beq.n	800c5a4 <_svfiprintf_r+0x130>
 800c618:	9105      	str	r1, [sp, #20]
 800c61a:	e7c3      	b.n	800c5a4 <_svfiprintf_r+0x130>
 800c61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c620:	4604      	mov	r4, r0
 800c622:	2301      	movs	r3, #1
 800c624:	e7f0      	b.n	800c608 <_svfiprintf_r+0x194>
 800c626:	ab03      	add	r3, sp, #12
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	462a      	mov	r2, r5
 800c62c:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <_svfiprintf_r+0x1f8>)
 800c62e:	a904      	add	r1, sp, #16
 800c630:	4638      	mov	r0, r7
 800c632:	f7fc fa31 	bl	8008a98 <_printf_float>
 800c636:	1c42      	adds	r2, r0, #1
 800c638:	4606      	mov	r6, r0
 800c63a:	d1d6      	bne.n	800c5ea <_svfiprintf_r+0x176>
 800c63c:	89ab      	ldrh	r3, [r5, #12]
 800c63e:	065b      	lsls	r3, r3, #25
 800c640:	f53f af2c 	bmi.w	800c49c <_svfiprintf_r+0x28>
 800c644:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c646:	b01d      	add	sp, #116	; 0x74
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64c:	ab03      	add	r3, sp, #12
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	462a      	mov	r2, r5
 800c652:	4b06      	ldr	r3, [pc, #24]	; (800c66c <_svfiprintf_r+0x1f8>)
 800c654:	a904      	add	r1, sp, #16
 800c656:	4638      	mov	r0, r7
 800c658:	f7fc fcc2 	bl	8008fe0 <_printf_i>
 800c65c:	e7eb      	b.n	800c636 <_svfiprintf_r+0x1c2>
 800c65e:	bf00      	nop
 800c660:	0800d92c 	.word	0x0800d92c
 800c664:	0800d936 	.word	0x0800d936
 800c668:	08008a99 	.word	0x08008a99
 800c66c:	0800c3bf 	.word	0x0800c3bf
 800c670:	0800d932 	.word	0x0800d932

0800c674 <__sfputc_r>:
 800c674:	6893      	ldr	r3, [r2, #8]
 800c676:	3b01      	subs	r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	b410      	push	{r4}
 800c67c:	6093      	str	r3, [r2, #8]
 800c67e:	da08      	bge.n	800c692 <__sfputc_r+0x1e>
 800c680:	6994      	ldr	r4, [r2, #24]
 800c682:	42a3      	cmp	r3, r4
 800c684:	db01      	blt.n	800c68a <__sfputc_r+0x16>
 800c686:	290a      	cmp	r1, #10
 800c688:	d103      	bne.n	800c692 <__sfputc_r+0x1e>
 800c68a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c68e:	f000 b967 	b.w	800c960 <__swbuf_r>
 800c692:	6813      	ldr	r3, [r2, #0]
 800c694:	1c58      	adds	r0, r3, #1
 800c696:	6010      	str	r0, [r2, #0]
 800c698:	7019      	strb	r1, [r3, #0]
 800c69a:	4608      	mov	r0, r1
 800c69c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6a0:	4770      	bx	lr

0800c6a2 <__sfputs_r>:
 800c6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	460f      	mov	r7, r1
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	18d5      	adds	r5, r2, r3
 800c6ac:	42ac      	cmp	r4, r5
 800c6ae:	d101      	bne.n	800c6b4 <__sfputs_r+0x12>
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	e007      	b.n	800c6c4 <__sfputs_r+0x22>
 800c6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b8:	463a      	mov	r2, r7
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f7ff ffda 	bl	800c674 <__sfputc_r>
 800c6c0:	1c43      	adds	r3, r0, #1
 800c6c2:	d1f3      	bne.n	800c6ac <__sfputs_r+0xa>
 800c6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6c8 <_vfiprintf_r>:
 800c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	460d      	mov	r5, r1
 800c6ce:	b09d      	sub	sp, #116	; 0x74
 800c6d0:	4614      	mov	r4, r2
 800c6d2:	4698      	mov	r8, r3
 800c6d4:	4606      	mov	r6, r0
 800c6d6:	b118      	cbz	r0, 800c6e0 <_vfiprintf_r+0x18>
 800c6d8:	6983      	ldr	r3, [r0, #24]
 800c6da:	b90b      	cbnz	r3, 800c6e0 <_vfiprintf_r+0x18>
 800c6dc:	f000 fb30 	bl	800cd40 <__sinit>
 800c6e0:	4b89      	ldr	r3, [pc, #548]	; (800c908 <_vfiprintf_r+0x240>)
 800c6e2:	429d      	cmp	r5, r3
 800c6e4:	d11b      	bne.n	800c71e <_vfiprintf_r+0x56>
 800c6e6:	6875      	ldr	r5, [r6, #4]
 800c6e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ea:	07d9      	lsls	r1, r3, #31
 800c6ec:	d405      	bmi.n	800c6fa <_vfiprintf_r+0x32>
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	059a      	lsls	r2, r3, #22
 800c6f2:	d402      	bmi.n	800c6fa <_vfiprintf_r+0x32>
 800c6f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6f6:	f000 fbc1 	bl	800ce7c <__retarget_lock_acquire_recursive>
 800c6fa:	89ab      	ldrh	r3, [r5, #12]
 800c6fc:	071b      	lsls	r3, r3, #28
 800c6fe:	d501      	bpl.n	800c704 <_vfiprintf_r+0x3c>
 800c700:	692b      	ldr	r3, [r5, #16]
 800c702:	b9eb      	cbnz	r3, 800c740 <_vfiprintf_r+0x78>
 800c704:	4629      	mov	r1, r5
 800c706:	4630      	mov	r0, r6
 800c708:	f000 f98a 	bl	800ca20 <__swsetup_r>
 800c70c:	b1c0      	cbz	r0, 800c740 <_vfiprintf_r+0x78>
 800c70e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c710:	07dc      	lsls	r4, r3, #31
 800c712:	d50e      	bpl.n	800c732 <_vfiprintf_r+0x6a>
 800c714:	f04f 30ff 	mov.w	r0, #4294967295
 800c718:	b01d      	add	sp, #116	; 0x74
 800c71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71e:	4b7b      	ldr	r3, [pc, #492]	; (800c90c <_vfiprintf_r+0x244>)
 800c720:	429d      	cmp	r5, r3
 800c722:	d101      	bne.n	800c728 <_vfiprintf_r+0x60>
 800c724:	68b5      	ldr	r5, [r6, #8]
 800c726:	e7df      	b.n	800c6e8 <_vfiprintf_r+0x20>
 800c728:	4b79      	ldr	r3, [pc, #484]	; (800c910 <_vfiprintf_r+0x248>)
 800c72a:	429d      	cmp	r5, r3
 800c72c:	bf08      	it	eq
 800c72e:	68f5      	ldreq	r5, [r6, #12]
 800c730:	e7da      	b.n	800c6e8 <_vfiprintf_r+0x20>
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	0598      	lsls	r0, r3, #22
 800c736:	d4ed      	bmi.n	800c714 <_vfiprintf_r+0x4c>
 800c738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c73a:	f000 fba0 	bl	800ce7e <__retarget_lock_release_recursive>
 800c73e:	e7e9      	b.n	800c714 <_vfiprintf_r+0x4c>
 800c740:	2300      	movs	r3, #0
 800c742:	9309      	str	r3, [sp, #36]	; 0x24
 800c744:	2320      	movs	r3, #32
 800c746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c74a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c74e:	2330      	movs	r3, #48	; 0x30
 800c750:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c914 <_vfiprintf_r+0x24c>
 800c754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c758:	f04f 0901 	mov.w	r9, #1
 800c75c:	4623      	mov	r3, r4
 800c75e:	469a      	mov	sl, r3
 800c760:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c764:	b10a      	cbz	r2, 800c76a <_vfiprintf_r+0xa2>
 800c766:	2a25      	cmp	r2, #37	; 0x25
 800c768:	d1f9      	bne.n	800c75e <_vfiprintf_r+0x96>
 800c76a:	ebba 0b04 	subs.w	fp, sl, r4
 800c76e:	d00b      	beq.n	800c788 <_vfiprintf_r+0xc0>
 800c770:	465b      	mov	r3, fp
 800c772:	4622      	mov	r2, r4
 800c774:	4629      	mov	r1, r5
 800c776:	4630      	mov	r0, r6
 800c778:	f7ff ff93 	bl	800c6a2 <__sfputs_r>
 800c77c:	3001      	adds	r0, #1
 800c77e:	f000 80aa 	beq.w	800c8d6 <_vfiprintf_r+0x20e>
 800c782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c784:	445a      	add	r2, fp
 800c786:	9209      	str	r2, [sp, #36]	; 0x24
 800c788:	f89a 3000 	ldrb.w	r3, [sl]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 80a2 	beq.w	800c8d6 <_vfiprintf_r+0x20e>
 800c792:	2300      	movs	r3, #0
 800c794:	f04f 32ff 	mov.w	r2, #4294967295
 800c798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c79c:	f10a 0a01 	add.w	sl, sl, #1
 800c7a0:	9304      	str	r3, [sp, #16]
 800c7a2:	9307      	str	r3, [sp, #28]
 800c7a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c7aa:	4654      	mov	r4, sl
 800c7ac:	2205      	movs	r2, #5
 800c7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b2:	4858      	ldr	r0, [pc, #352]	; (800c914 <_vfiprintf_r+0x24c>)
 800c7b4:	f7f3 fd44 	bl	8000240 <memchr>
 800c7b8:	9a04      	ldr	r2, [sp, #16]
 800c7ba:	b9d8      	cbnz	r0, 800c7f4 <_vfiprintf_r+0x12c>
 800c7bc:	06d1      	lsls	r1, r2, #27
 800c7be:	bf44      	itt	mi
 800c7c0:	2320      	movmi	r3, #32
 800c7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7c6:	0713      	lsls	r3, r2, #28
 800c7c8:	bf44      	itt	mi
 800c7ca:	232b      	movmi	r3, #43	; 0x2b
 800c7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7d6:	d015      	beq.n	800c804 <_vfiprintf_r+0x13c>
 800c7d8:	9a07      	ldr	r2, [sp, #28]
 800c7da:	4654      	mov	r4, sl
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f04f 0c0a 	mov.w	ip, #10
 800c7e2:	4621      	mov	r1, r4
 800c7e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7e8:	3b30      	subs	r3, #48	; 0x30
 800c7ea:	2b09      	cmp	r3, #9
 800c7ec:	d94e      	bls.n	800c88c <_vfiprintf_r+0x1c4>
 800c7ee:	b1b0      	cbz	r0, 800c81e <_vfiprintf_r+0x156>
 800c7f0:	9207      	str	r2, [sp, #28]
 800c7f2:	e014      	b.n	800c81e <_vfiprintf_r+0x156>
 800c7f4:	eba0 0308 	sub.w	r3, r0, r8
 800c7f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	9304      	str	r3, [sp, #16]
 800c800:	46a2      	mov	sl, r4
 800c802:	e7d2      	b.n	800c7aa <_vfiprintf_r+0xe2>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	1d19      	adds	r1, r3, #4
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	9103      	str	r1, [sp, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	bfbb      	ittet	lt
 800c810:	425b      	neglt	r3, r3
 800c812:	f042 0202 	orrlt.w	r2, r2, #2
 800c816:	9307      	strge	r3, [sp, #28]
 800c818:	9307      	strlt	r3, [sp, #28]
 800c81a:	bfb8      	it	lt
 800c81c:	9204      	strlt	r2, [sp, #16]
 800c81e:	7823      	ldrb	r3, [r4, #0]
 800c820:	2b2e      	cmp	r3, #46	; 0x2e
 800c822:	d10c      	bne.n	800c83e <_vfiprintf_r+0x176>
 800c824:	7863      	ldrb	r3, [r4, #1]
 800c826:	2b2a      	cmp	r3, #42	; 0x2a
 800c828:	d135      	bne.n	800c896 <_vfiprintf_r+0x1ce>
 800c82a:	9b03      	ldr	r3, [sp, #12]
 800c82c:	1d1a      	adds	r2, r3, #4
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	9203      	str	r2, [sp, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	bfb8      	it	lt
 800c836:	f04f 33ff 	movlt.w	r3, #4294967295
 800c83a:	3402      	adds	r4, #2
 800c83c:	9305      	str	r3, [sp, #20]
 800c83e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c924 <_vfiprintf_r+0x25c>
 800c842:	7821      	ldrb	r1, [r4, #0]
 800c844:	2203      	movs	r2, #3
 800c846:	4650      	mov	r0, sl
 800c848:	f7f3 fcfa 	bl	8000240 <memchr>
 800c84c:	b140      	cbz	r0, 800c860 <_vfiprintf_r+0x198>
 800c84e:	2340      	movs	r3, #64	; 0x40
 800c850:	eba0 000a 	sub.w	r0, r0, sl
 800c854:	fa03 f000 	lsl.w	r0, r3, r0
 800c858:	9b04      	ldr	r3, [sp, #16]
 800c85a:	4303      	orrs	r3, r0
 800c85c:	3401      	adds	r4, #1
 800c85e:	9304      	str	r3, [sp, #16]
 800c860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c864:	482c      	ldr	r0, [pc, #176]	; (800c918 <_vfiprintf_r+0x250>)
 800c866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c86a:	2206      	movs	r2, #6
 800c86c:	f7f3 fce8 	bl	8000240 <memchr>
 800c870:	2800      	cmp	r0, #0
 800c872:	d03f      	beq.n	800c8f4 <_vfiprintf_r+0x22c>
 800c874:	4b29      	ldr	r3, [pc, #164]	; (800c91c <_vfiprintf_r+0x254>)
 800c876:	bb1b      	cbnz	r3, 800c8c0 <_vfiprintf_r+0x1f8>
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	3307      	adds	r3, #7
 800c87c:	f023 0307 	bic.w	r3, r3, #7
 800c880:	3308      	adds	r3, #8
 800c882:	9303      	str	r3, [sp, #12]
 800c884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c886:	443b      	add	r3, r7
 800c888:	9309      	str	r3, [sp, #36]	; 0x24
 800c88a:	e767      	b.n	800c75c <_vfiprintf_r+0x94>
 800c88c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c890:	460c      	mov	r4, r1
 800c892:	2001      	movs	r0, #1
 800c894:	e7a5      	b.n	800c7e2 <_vfiprintf_r+0x11a>
 800c896:	2300      	movs	r3, #0
 800c898:	3401      	adds	r4, #1
 800c89a:	9305      	str	r3, [sp, #20]
 800c89c:	4619      	mov	r1, r3
 800c89e:	f04f 0c0a 	mov.w	ip, #10
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8a8:	3a30      	subs	r2, #48	; 0x30
 800c8aa:	2a09      	cmp	r2, #9
 800c8ac:	d903      	bls.n	800c8b6 <_vfiprintf_r+0x1ee>
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0c5      	beq.n	800c83e <_vfiprintf_r+0x176>
 800c8b2:	9105      	str	r1, [sp, #20]
 800c8b4:	e7c3      	b.n	800c83e <_vfiprintf_r+0x176>
 800c8b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e7f0      	b.n	800c8a2 <_vfiprintf_r+0x1da>
 800c8c0:	ab03      	add	r3, sp, #12
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4b16      	ldr	r3, [pc, #88]	; (800c920 <_vfiprintf_r+0x258>)
 800c8c8:	a904      	add	r1, sp, #16
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7fc f8e4 	bl	8008a98 <_printf_float>
 800c8d0:	4607      	mov	r7, r0
 800c8d2:	1c78      	adds	r0, r7, #1
 800c8d4:	d1d6      	bne.n	800c884 <_vfiprintf_r+0x1bc>
 800c8d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8d8:	07d9      	lsls	r1, r3, #31
 800c8da:	d405      	bmi.n	800c8e8 <_vfiprintf_r+0x220>
 800c8dc:	89ab      	ldrh	r3, [r5, #12]
 800c8de:	059a      	lsls	r2, r3, #22
 800c8e0:	d402      	bmi.n	800c8e8 <_vfiprintf_r+0x220>
 800c8e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8e4:	f000 facb 	bl	800ce7e <__retarget_lock_release_recursive>
 800c8e8:	89ab      	ldrh	r3, [r5, #12]
 800c8ea:	065b      	lsls	r3, r3, #25
 800c8ec:	f53f af12 	bmi.w	800c714 <_vfiprintf_r+0x4c>
 800c8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8f2:	e711      	b.n	800c718 <_vfiprintf_r+0x50>
 800c8f4:	ab03      	add	r3, sp, #12
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4b09      	ldr	r3, [pc, #36]	; (800c920 <_vfiprintf_r+0x258>)
 800c8fc:	a904      	add	r1, sp, #16
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7fc fb6e 	bl	8008fe0 <_printf_i>
 800c904:	e7e4      	b.n	800c8d0 <_vfiprintf_r+0x208>
 800c906:	bf00      	nop
 800c908:	0800d960 	.word	0x0800d960
 800c90c:	0800d980 	.word	0x0800d980
 800c910:	0800d940 	.word	0x0800d940
 800c914:	0800d92c 	.word	0x0800d92c
 800c918:	0800d936 	.word	0x0800d936
 800c91c:	08008a99 	.word	0x08008a99
 800c920:	0800c6a3 	.word	0x0800c6a3
 800c924:	0800d932 	.word	0x0800d932

0800c928 <nan>:
 800c928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c930 <nan+0x8>
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	00000000 	.word	0x00000000
 800c934:	7ff80000 	.word	0x7ff80000

0800c938 <strncmp>:
 800c938:	b510      	push	{r4, lr}
 800c93a:	b17a      	cbz	r2, 800c95c <strncmp+0x24>
 800c93c:	4603      	mov	r3, r0
 800c93e:	3901      	subs	r1, #1
 800c940:	1884      	adds	r4, r0, r2
 800c942:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c946:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c94a:	4290      	cmp	r0, r2
 800c94c:	d101      	bne.n	800c952 <strncmp+0x1a>
 800c94e:	42a3      	cmp	r3, r4
 800c950:	d101      	bne.n	800c956 <strncmp+0x1e>
 800c952:	1a80      	subs	r0, r0, r2
 800c954:	bd10      	pop	{r4, pc}
 800c956:	2800      	cmp	r0, #0
 800c958:	d1f3      	bne.n	800c942 <strncmp+0xa>
 800c95a:	e7fa      	b.n	800c952 <strncmp+0x1a>
 800c95c:	4610      	mov	r0, r2
 800c95e:	e7f9      	b.n	800c954 <strncmp+0x1c>

0800c960 <__swbuf_r>:
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	460e      	mov	r6, r1
 800c964:	4614      	mov	r4, r2
 800c966:	4605      	mov	r5, r0
 800c968:	b118      	cbz	r0, 800c972 <__swbuf_r+0x12>
 800c96a:	6983      	ldr	r3, [r0, #24]
 800c96c:	b90b      	cbnz	r3, 800c972 <__swbuf_r+0x12>
 800c96e:	f000 f9e7 	bl	800cd40 <__sinit>
 800c972:	4b21      	ldr	r3, [pc, #132]	; (800c9f8 <__swbuf_r+0x98>)
 800c974:	429c      	cmp	r4, r3
 800c976:	d12b      	bne.n	800c9d0 <__swbuf_r+0x70>
 800c978:	686c      	ldr	r4, [r5, #4]
 800c97a:	69a3      	ldr	r3, [r4, #24]
 800c97c:	60a3      	str	r3, [r4, #8]
 800c97e:	89a3      	ldrh	r3, [r4, #12]
 800c980:	071a      	lsls	r2, r3, #28
 800c982:	d52f      	bpl.n	800c9e4 <__swbuf_r+0x84>
 800c984:	6923      	ldr	r3, [r4, #16]
 800c986:	b36b      	cbz	r3, 800c9e4 <__swbuf_r+0x84>
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	6820      	ldr	r0, [r4, #0]
 800c98c:	1ac0      	subs	r0, r0, r3
 800c98e:	6963      	ldr	r3, [r4, #20]
 800c990:	b2f6      	uxtb	r6, r6
 800c992:	4283      	cmp	r3, r0
 800c994:	4637      	mov	r7, r6
 800c996:	dc04      	bgt.n	800c9a2 <__swbuf_r+0x42>
 800c998:	4621      	mov	r1, r4
 800c99a:	4628      	mov	r0, r5
 800c99c:	f000 f93c 	bl	800cc18 <_fflush_r>
 800c9a0:	bb30      	cbnz	r0, 800c9f0 <__swbuf_r+0x90>
 800c9a2:	68a3      	ldr	r3, [r4, #8]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	60a3      	str	r3, [r4, #8]
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	1c5a      	adds	r2, r3, #1
 800c9ac:	6022      	str	r2, [r4, #0]
 800c9ae:	701e      	strb	r6, [r3, #0]
 800c9b0:	6963      	ldr	r3, [r4, #20]
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	4283      	cmp	r3, r0
 800c9b6:	d004      	beq.n	800c9c2 <__swbuf_r+0x62>
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	07db      	lsls	r3, r3, #31
 800c9bc:	d506      	bpl.n	800c9cc <__swbuf_r+0x6c>
 800c9be:	2e0a      	cmp	r6, #10
 800c9c0:	d104      	bne.n	800c9cc <__swbuf_r+0x6c>
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f000 f927 	bl	800cc18 <_fflush_r>
 800c9ca:	b988      	cbnz	r0, 800c9f0 <__swbuf_r+0x90>
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <__swbuf_r+0x9c>)
 800c9d2:	429c      	cmp	r4, r3
 800c9d4:	d101      	bne.n	800c9da <__swbuf_r+0x7a>
 800c9d6:	68ac      	ldr	r4, [r5, #8]
 800c9d8:	e7cf      	b.n	800c97a <__swbuf_r+0x1a>
 800c9da:	4b09      	ldr	r3, [pc, #36]	; (800ca00 <__swbuf_r+0xa0>)
 800c9dc:	429c      	cmp	r4, r3
 800c9de:	bf08      	it	eq
 800c9e0:	68ec      	ldreq	r4, [r5, #12]
 800c9e2:	e7ca      	b.n	800c97a <__swbuf_r+0x1a>
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 f81a 	bl	800ca20 <__swsetup_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d0cb      	beq.n	800c988 <__swbuf_r+0x28>
 800c9f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9f4:	e7ea      	b.n	800c9cc <__swbuf_r+0x6c>
 800c9f6:	bf00      	nop
 800c9f8:	0800d960 	.word	0x0800d960
 800c9fc:	0800d980 	.word	0x0800d980
 800ca00:	0800d940 	.word	0x0800d940

0800ca04 <__ascii_wctomb>:
 800ca04:	b149      	cbz	r1, 800ca1a <__ascii_wctomb+0x16>
 800ca06:	2aff      	cmp	r2, #255	; 0xff
 800ca08:	bf85      	ittet	hi
 800ca0a:	238a      	movhi	r3, #138	; 0x8a
 800ca0c:	6003      	strhi	r3, [r0, #0]
 800ca0e:	700a      	strbls	r2, [r1, #0]
 800ca10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca14:	bf98      	it	ls
 800ca16:	2001      	movls	r0, #1
 800ca18:	4770      	bx	lr
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	4770      	bx	lr
	...

0800ca20 <__swsetup_r>:
 800ca20:	4b32      	ldr	r3, [pc, #200]	; (800caec <__swsetup_r+0xcc>)
 800ca22:	b570      	push	{r4, r5, r6, lr}
 800ca24:	681d      	ldr	r5, [r3, #0]
 800ca26:	4606      	mov	r6, r0
 800ca28:	460c      	mov	r4, r1
 800ca2a:	b125      	cbz	r5, 800ca36 <__swsetup_r+0x16>
 800ca2c:	69ab      	ldr	r3, [r5, #24]
 800ca2e:	b913      	cbnz	r3, 800ca36 <__swsetup_r+0x16>
 800ca30:	4628      	mov	r0, r5
 800ca32:	f000 f985 	bl	800cd40 <__sinit>
 800ca36:	4b2e      	ldr	r3, [pc, #184]	; (800caf0 <__swsetup_r+0xd0>)
 800ca38:	429c      	cmp	r4, r3
 800ca3a:	d10f      	bne.n	800ca5c <__swsetup_r+0x3c>
 800ca3c:	686c      	ldr	r4, [r5, #4]
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca44:	0719      	lsls	r1, r3, #28
 800ca46:	d42c      	bmi.n	800caa2 <__swsetup_r+0x82>
 800ca48:	06dd      	lsls	r5, r3, #27
 800ca4a:	d411      	bmi.n	800ca70 <__swsetup_r+0x50>
 800ca4c:	2309      	movs	r3, #9
 800ca4e:	6033      	str	r3, [r6, #0]
 800ca50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	e03e      	b.n	800cada <__swsetup_r+0xba>
 800ca5c:	4b25      	ldr	r3, [pc, #148]	; (800caf4 <__swsetup_r+0xd4>)
 800ca5e:	429c      	cmp	r4, r3
 800ca60:	d101      	bne.n	800ca66 <__swsetup_r+0x46>
 800ca62:	68ac      	ldr	r4, [r5, #8]
 800ca64:	e7eb      	b.n	800ca3e <__swsetup_r+0x1e>
 800ca66:	4b24      	ldr	r3, [pc, #144]	; (800caf8 <__swsetup_r+0xd8>)
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	bf08      	it	eq
 800ca6c:	68ec      	ldreq	r4, [r5, #12]
 800ca6e:	e7e6      	b.n	800ca3e <__swsetup_r+0x1e>
 800ca70:	0758      	lsls	r0, r3, #29
 800ca72:	d512      	bpl.n	800ca9a <__swsetup_r+0x7a>
 800ca74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca76:	b141      	cbz	r1, 800ca8a <__swsetup_r+0x6a>
 800ca78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca7c:	4299      	cmp	r1, r3
 800ca7e:	d002      	beq.n	800ca86 <__swsetup_r+0x66>
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7fb fe89 	bl	8008798 <_free_r>
 800ca86:	2300      	movs	r3, #0
 800ca88:	6363      	str	r3, [r4, #52]	; 0x34
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	2300      	movs	r3, #0
 800ca94:	6063      	str	r3, [r4, #4]
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	6023      	str	r3, [r4, #0]
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f043 0308 	orr.w	r3, r3, #8
 800caa0:	81a3      	strh	r3, [r4, #12]
 800caa2:	6923      	ldr	r3, [r4, #16]
 800caa4:	b94b      	cbnz	r3, 800caba <__swsetup_r+0x9a>
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800caac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cab0:	d003      	beq.n	800caba <__swsetup_r+0x9a>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4630      	mov	r0, r6
 800cab6:	f000 fa09 	bl	800cecc <__smakebuf_r>
 800caba:	89a0      	ldrh	r0, [r4, #12]
 800cabc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cac0:	f010 0301 	ands.w	r3, r0, #1
 800cac4:	d00a      	beq.n	800cadc <__swsetup_r+0xbc>
 800cac6:	2300      	movs	r3, #0
 800cac8:	60a3      	str	r3, [r4, #8]
 800caca:	6963      	ldr	r3, [r4, #20]
 800cacc:	425b      	negs	r3, r3
 800cace:	61a3      	str	r3, [r4, #24]
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	b943      	cbnz	r3, 800cae6 <__swsetup_r+0xc6>
 800cad4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cad8:	d1ba      	bne.n	800ca50 <__swsetup_r+0x30>
 800cada:	bd70      	pop	{r4, r5, r6, pc}
 800cadc:	0781      	lsls	r1, r0, #30
 800cade:	bf58      	it	pl
 800cae0:	6963      	ldrpl	r3, [r4, #20]
 800cae2:	60a3      	str	r3, [r4, #8]
 800cae4:	e7f4      	b.n	800cad0 <__swsetup_r+0xb0>
 800cae6:	2000      	movs	r0, #0
 800cae8:	e7f7      	b.n	800cada <__swsetup_r+0xba>
 800caea:	bf00      	nop
 800caec:	2000000c 	.word	0x2000000c
 800caf0:	0800d960 	.word	0x0800d960
 800caf4:	0800d980 	.word	0x0800d980
 800caf8:	0800d940 	.word	0x0800d940

0800cafc <abort>:
 800cafc:	b508      	push	{r3, lr}
 800cafe:	2006      	movs	r0, #6
 800cb00:	f000 fa96 	bl	800d030 <raise>
 800cb04:	2001      	movs	r0, #1
 800cb06:	f7f5 ffd7 	bl	8002ab8 <_exit>
	...

0800cb0c <__sflush_r>:
 800cb0c:	898a      	ldrh	r2, [r1, #12]
 800cb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb12:	4605      	mov	r5, r0
 800cb14:	0710      	lsls	r0, r2, #28
 800cb16:	460c      	mov	r4, r1
 800cb18:	d458      	bmi.n	800cbcc <__sflush_r+0xc0>
 800cb1a:	684b      	ldr	r3, [r1, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	dc05      	bgt.n	800cb2c <__sflush_r+0x20>
 800cb20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dc02      	bgt.n	800cb2c <__sflush_r+0x20>
 800cb26:	2000      	movs	r0, #0
 800cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb2e:	2e00      	cmp	r6, #0
 800cb30:	d0f9      	beq.n	800cb26 <__sflush_r+0x1a>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb38:	682f      	ldr	r7, [r5, #0]
 800cb3a:	602b      	str	r3, [r5, #0]
 800cb3c:	d032      	beq.n	800cba4 <__sflush_r+0x98>
 800cb3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb40:	89a3      	ldrh	r3, [r4, #12]
 800cb42:	075a      	lsls	r2, r3, #29
 800cb44:	d505      	bpl.n	800cb52 <__sflush_r+0x46>
 800cb46:	6863      	ldr	r3, [r4, #4]
 800cb48:	1ac0      	subs	r0, r0, r3
 800cb4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb4c:	b10b      	cbz	r3, 800cb52 <__sflush_r+0x46>
 800cb4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb50:	1ac0      	subs	r0, r0, r3
 800cb52:	2300      	movs	r3, #0
 800cb54:	4602      	mov	r2, r0
 800cb56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb58:	6a21      	ldr	r1, [r4, #32]
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	47b0      	blx	r6
 800cb5e:	1c43      	adds	r3, r0, #1
 800cb60:	89a3      	ldrh	r3, [r4, #12]
 800cb62:	d106      	bne.n	800cb72 <__sflush_r+0x66>
 800cb64:	6829      	ldr	r1, [r5, #0]
 800cb66:	291d      	cmp	r1, #29
 800cb68:	d82c      	bhi.n	800cbc4 <__sflush_r+0xb8>
 800cb6a:	4a2a      	ldr	r2, [pc, #168]	; (800cc14 <__sflush_r+0x108>)
 800cb6c:	40ca      	lsrs	r2, r1
 800cb6e:	07d6      	lsls	r6, r2, #31
 800cb70:	d528      	bpl.n	800cbc4 <__sflush_r+0xb8>
 800cb72:	2200      	movs	r2, #0
 800cb74:	6062      	str	r2, [r4, #4]
 800cb76:	04d9      	lsls	r1, r3, #19
 800cb78:	6922      	ldr	r2, [r4, #16]
 800cb7a:	6022      	str	r2, [r4, #0]
 800cb7c:	d504      	bpl.n	800cb88 <__sflush_r+0x7c>
 800cb7e:	1c42      	adds	r2, r0, #1
 800cb80:	d101      	bne.n	800cb86 <__sflush_r+0x7a>
 800cb82:	682b      	ldr	r3, [r5, #0]
 800cb84:	b903      	cbnz	r3, 800cb88 <__sflush_r+0x7c>
 800cb86:	6560      	str	r0, [r4, #84]	; 0x54
 800cb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb8a:	602f      	str	r7, [r5, #0]
 800cb8c:	2900      	cmp	r1, #0
 800cb8e:	d0ca      	beq.n	800cb26 <__sflush_r+0x1a>
 800cb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb94:	4299      	cmp	r1, r3
 800cb96:	d002      	beq.n	800cb9e <__sflush_r+0x92>
 800cb98:	4628      	mov	r0, r5
 800cb9a:	f7fb fdfd 	bl	8008798 <_free_r>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	6360      	str	r0, [r4, #52]	; 0x34
 800cba2:	e7c1      	b.n	800cb28 <__sflush_r+0x1c>
 800cba4:	6a21      	ldr	r1, [r4, #32]
 800cba6:	2301      	movs	r3, #1
 800cba8:	4628      	mov	r0, r5
 800cbaa:	47b0      	blx	r6
 800cbac:	1c41      	adds	r1, r0, #1
 800cbae:	d1c7      	bne.n	800cb40 <__sflush_r+0x34>
 800cbb0:	682b      	ldr	r3, [r5, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0c4      	beq.n	800cb40 <__sflush_r+0x34>
 800cbb6:	2b1d      	cmp	r3, #29
 800cbb8:	d001      	beq.n	800cbbe <__sflush_r+0xb2>
 800cbba:	2b16      	cmp	r3, #22
 800cbbc:	d101      	bne.n	800cbc2 <__sflush_r+0xb6>
 800cbbe:	602f      	str	r7, [r5, #0]
 800cbc0:	e7b1      	b.n	800cb26 <__sflush_r+0x1a>
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc8:	81a3      	strh	r3, [r4, #12]
 800cbca:	e7ad      	b.n	800cb28 <__sflush_r+0x1c>
 800cbcc:	690f      	ldr	r7, [r1, #16]
 800cbce:	2f00      	cmp	r7, #0
 800cbd0:	d0a9      	beq.n	800cb26 <__sflush_r+0x1a>
 800cbd2:	0793      	lsls	r3, r2, #30
 800cbd4:	680e      	ldr	r6, [r1, #0]
 800cbd6:	bf08      	it	eq
 800cbd8:	694b      	ldreq	r3, [r1, #20]
 800cbda:	600f      	str	r7, [r1, #0]
 800cbdc:	bf18      	it	ne
 800cbde:	2300      	movne	r3, #0
 800cbe0:	eba6 0807 	sub.w	r8, r6, r7
 800cbe4:	608b      	str	r3, [r1, #8]
 800cbe6:	f1b8 0f00 	cmp.w	r8, #0
 800cbea:	dd9c      	ble.n	800cb26 <__sflush_r+0x1a>
 800cbec:	6a21      	ldr	r1, [r4, #32]
 800cbee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbf0:	4643      	mov	r3, r8
 800cbf2:	463a      	mov	r2, r7
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	47b0      	blx	r6
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	dc06      	bgt.n	800cc0a <__sflush_r+0xfe>
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc02:	81a3      	strh	r3, [r4, #12]
 800cc04:	f04f 30ff 	mov.w	r0, #4294967295
 800cc08:	e78e      	b.n	800cb28 <__sflush_r+0x1c>
 800cc0a:	4407      	add	r7, r0
 800cc0c:	eba8 0800 	sub.w	r8, r8, r0
 800cc10:	e7e9      	b.n	800cbe6 <__sflush_r+0xda>
 800cc12:	bf00      	nop
 800cc14:	20400001 	.word	0x20400001

0800cc18 <_fflush_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	690b      	ldr	r3, [r1, #16]
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	460c      	mov	r4, r1
 800cc20:	b913      	cbnz	r3, 800cc28 <_fflush_r+0x10>
 800cc22:	2500      	movs	r5, #0
 800cc24:	4628      	mov	r0, r5
 800cc26:	bd38      	pop	{r3, r4, r5, pc}
 800cc28:	b118      	cbz	r0, 800cc32 <_fflush_r+0x1a>
 800cc2a:	6983      	ldr	r3, [r0, #24]
 800cc2c:	b90b      	cbnz	r3, 800cc32 <_fflush_r+0x1a>
 800cc2e:	f000 f887 	bl	800cd40 <__sinit>
 800cc32:	4b14      	ldr	r3, [pc, #80]	; (800cc84 <_fflush_r+0x6c>)
 800cc34:	429c      	cmp	r4, r3
 800cc36:	d11b      	bne.n	800cc70 <_fflush_r+0x58>
 800cc38:	686c      	ldr	r4, [r5, #4]
 800cc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0ef      	beq.n	800cc22 <_fflush_r+0xa>
 800cc42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc44:	07d0      	lsls	r0, r2, #31
 800cc46:	d404      	bmi.n	800cc52 <_fflush_r+0x3a>
 800cc48:	0599      	lsls	r1, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_fflush_r+0x3a>
 800cc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc4e:	f000 f915 	bl	800ce7c <__retarget_lock_acquire_recursive>
 800cc52:	4628      	mov	r0, r5
 800cc54:	4621      	mov	r1, r4
 800cc56:	f7ff ff59 	bl	800cb0c <__sflush_r>
 800cc5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc5c:	07da      	lsls	r2, r3, #31
 800cc5e:	4605      	mov	r5, r0
 800cc60:	d4e0      	bmi.n	800cc24 <_fflush_r+0xc>
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	059b      	lsls	r3, r3, #22
 800cc66:	d4dd      	bmi.n	800cc24 <_fflush_r+0xc>
 800cc68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc6a:	f000 f908 	bl	800ce7e <__retarget_lock_release_recursive>
 800cc6e:	e7d9      	b.n	800cc24 <_fflush_r+0xc>
 800cc70:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <_fflush_r+0x70>)
 800cc72:	429c      	cmp	r4, r3
 800cc74:	d101      	bne.n	800cc7a <_fflush_r+0x62>
 800cc76:	68ac      	ldr	r4, [r5, #8]
 800cc78:	e7df      	b.n	800cc3a <_fflush_r+0x22>
 800cc7a:	4b04      	ldr	r3, [pc, #16]	; (800cc8c <_fflush_r+0x74>)
 800cc7c:	429c      	cmp	r4, r3
 800cc7e:	bf08      	it	eq
 800cc80:	68ec      	ldreq	r4, [r5, #12]
 800cc82:	e7da      	b.n	800cc3a <_fflush_r+0x22>
 800cc84:	0800d960 	.word	0x0800d960
 800cc88:	0800d980 	.word	0x0800d980
 800cc8c:	0800d940 	.word	0x0800d940

0800cc90 <std>:
 800cc90:	2300      	movs	r3, #0
 800cc92:	b510      	push	{r4, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	e9c0 3300 	strd	r3, r3, [r0]
 800cc9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc9e:	6083      	str	r3, [r0, #8]
 800cca0:	8181      	strh	r1, [r0, #12]
 800cca2:	6643      	str	r3, [r0, #100]	; 0x64
 800cca4:	81c2      	strh	r2, [r0, #14]
 800cca6:	6183      	str	r3, [r0, #24]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	2208      	movs	r2, #8
 800ccac:	305c      	adds	r0, #92	; 0x5c
 800ccae:	f7fb fd6b 	bl	8008788 <memset>
 800ccb2:	4b05      	ldr	r3, [pc, #20]	; (800ccc8 <std+0x38>)
 800ccb4:	6263      	str	r3, [r4, #36]	; 0x24
 800ccb6:	4b05      	ldr	r3, [pc, #20]	; (800cccc <std+0x3c>)
 800ccb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccba:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <std+0x40>)
 800ccbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccbe:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <std+0x44>)
 800ccc0:	6224      	str	r4, [r4, #32]
 800ccc2:	6323      	str	r3, [r4, #48]	; 0x30
 800ccc4:	bd10      	pop	{r4, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0800d069 	.word	0x0800d069
 800cccc:	0800d08b 	.word	0x0800d08b
 800ccd0:	0800d0c3 	.word	0x0800d0c3
 800ccd4:	0800d0e7 	.word	0x0800d0e7

0800ccd8 <_cleanup_r>:
 800ccd8:	4901      	ldr	r1, [pc, #4]	; (800cce0 <_cleanup_r+0x8>)
 800ccda:	f000 b8af 	b.w	800ce3c <_fwalk_reent>
 800ccde:	bf00      	nop
 800cce0:	0800cc19 	.word	0x0800cc19

0800cce4 <__sfmoreglue>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	2268      	movs	r2, #104	; 0x68
 800cce8:	1e4d      	subs	r5, r1, #1
 800ccea:	4355      	muls	r5, r2
 800ccec:	460e      	mov	r6, r1
 800ccee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccf2:	f7fb fdbd 	bl	8008870 <_malloc_r>
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	b140      	cbz	r0, 800cd0c <__sfmoreglue+0x28>
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	e9c0 1600 	strd	r1, r6, [r0]
 800cd00:	300c      	adds	r0, #12
 800cd02:	60a0      	str	r0, [r4, #8]
 800cd04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd08:	f7fb fd3e 	bl	8008788 <memset>
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}

0800cd10 <__sfp_lock_acquire>:
 800cd10:	4801      	ldr	r0, [pc, #4]	; (800cd18 <__sfp_lock_acquire+0x8>)
 800cd12:	f000 b8b3 	b.w	800ce7c <__retarget_lock_acquire_recursive>
 800cd16:	bf00      	nop
 800cd18:	200005b9 	.word	0x200005b9

0800cd1c <__sfp_lock_release>:
 800cd1c:	4801      	ldr	r0, [pc, #4]	; (800cd24 <__sfp_lock_release+0x8>)
 800cd1e:	f000 b8ae 	b.w	800ce7e <__retarget_lock_release_recursive>
 800cd22:	bf00      	nop
 800cd24:	200005b9 	.word	0x200005b9

0800cd28 <__sinit_lock_acquire>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__sinit_lock_acquire+0x8>)
 800cd2a:	f000 b8a7 	b.w	800ce7c <__retarget_lock_acquire_recursive>
 800cd2e:	bf00      	nop
 800cd30:	200005ba 	.word	0x200005ba

0800cd34 <__sinit_lock_release>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__sinit_lock_release+0x8>)
 800cd36:	f000 b8a2 	b.w	800ce7e <__retarget_lock_release_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	200005ba 	.word	0x200005ba

0800cd40 <__sinit>:
 800cd40:	b510      	push	{r4, lr}
 800cd42:	4604      	mov	r4, r0
 800cd44:	f7ff fff0 	bl	800cd28 <__sinit_lock_acquire>
 800cd48:	69a3      	ldr	r3, [r4, #24]
 800cd4a:	b11b      	cbz	r3, 800cd54 <__sinit+0x14>
 800cd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd50:	f7ff bff0 	b.w	800cd34 <__sinit_lock_release>
 800cd54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd58:	6523      	str	r3, [r4, #80]	; 0x50
 800cd5a:	4b13      	ldr	r3, [pc, #76]	; (800cda8 <__sinit+0x68>)
 800cd5c:	4a13      	ldr	r2, [pc, #76]	; (800cdac <__sinit+0x6c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd62:	42a3      	cmp	r3, r4
 800cd64:	bf04      	itt	eq
 800cd66:	2301      	moveq	r3, #1
 800cd68:	61a3      	streq	r3, [r4, #24]
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f000 f820 	bl	800cdb0 <__sfp>
 800cd70:	6060      	str	r0, [r4, #4]
 800cd72:	4620      	mov	r0, r4
 800cd74:	f000 f81c 	bl	800cdb0 <__sfp>
 800cd78:	60a0      	str	r0, [r4, #8]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f000 f818 	bl	800cdb0 <__sfp>
 800cd80:	2200      	movs	r2, #0
 800cd82:	60e0      	str	r0, [r4, #12]
 800cd84:	2104      	movs	r1, #4
 800cd86:	6860      	ldr	r0, [r4, #4]
 800cd88:	f7ff ff82 	bl	800cc90 <std>
 800cd8c:	68a0      	ldr	r0, [r4, #8]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	2109      	movs	r1, #9
 800cd92:	f7ff ff7d 	bl	800cc90 <std>
 800cd96:	68e0      	ldr	r0, [r4, #12]
 800cd98:	2202      	movs	r2, #2
 800cd9a:	2112      	movs	r1, #18
 800cd9c:	f7ff ff78 	bl	800cc90 <std>
 800cda0:	2301      	movs	r3, #1
 800cda2:	61a3      	str	r3, [r4, #24]
 800cda4:	e7d2      	b.n	800cd4c <__sinit+0xc>
 800cda6:	bf00      	nop
 800cda8:	0800d5a0 	.word	0x0800d5a0
 800cdac:	0800ccd9 	.word	0x0800ccd9

0800cdb0 <__sfp>:
 800cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb2:	4607      	mov	r7, r0
 800cdb4:	f7ff ffac 	bl	800cd10 <__sfp_lock_acquire>
 800cdb8:	4b1e      	ldr	r3, [pc, #120]	; (800ce34 <__sfp+0x84>)
 800cdba:	681e      	ldr	r6, [r3, #0]
 800cdbc:	69b3      	ldr	r3, [r6, #24]
 800cdbe:	b913      	cbnz	r3, 800cdc6 <__sfp+0x16>
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7ff ffbd 	bl	800cd40 <__sinit>
 800cdc6:	3648      	adds	r6, #72	; 0x48
 800cdc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	d503      	bpl.n	800cdd8 <__sfp+0x28>
 800cdd0:	6833      	ldr	r3, [r6, #0]
 800cdd2:	b30b      	cbz	r3, 800ce18 <__sfp+0x68>
 800cdd4:	6836      	ldr	r6, [r6, #0]
 800cdd6:	e7f7      	b.n	800cdc8 <__sfp+0x18>
 800cdd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cddc:	b9d5      	cbnz	r5, 800ce14 <__sfp+0x64>
 800cdde:	4b16      	ldr	r3, [pc, #88]	; (800ce38 <__sfp+0x88>)
 800cde0:	60e3      	str	r3, [r4, #12]
 800cde2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cde6:	6665      	str	r5, [r4, #100]	; 0x64
 800cde8:	f000 f847 	bl	800ce7a <__retarget_lock_init_recursive>
 800cdec:	f7ff ff96 	bl	800cd1c <__sfp_lock_release>
 800cdf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cdf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cdf8:	6025      	str	r5, [r4, #0]
 800cdfa:	61a5      	str	r5, [r4, #24]
 800cdfc:	2208      	movs	r2, #8
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce04:	f7fb fcc0 	bl	8008788 <memset>
 800ce08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce10:	4620      	mov	r0, r4
 800ce12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce14:	3468      	adds	r4, #104	; 0x68
 800ce16:	e7d9      	b.n	800cdcc <__sfp+0x1c>
 800ce18:	2104      	movs	r1, #4
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	f7ff ff62 	bl	800cce4 <__sfmoreglue>
 800ce20:	4604      	mov	r4, r0
 800ce22:	6030      	str	r0, [r6, #0]
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d1d5      	bne.n	800cdd4 <__sfp+0x24>
 800ce28:	f7ff ff78 	bl	800cd1c <__sfp_lock_release>
 800ce2c:	230c      	movs	r3, #12
 800ce2e:	603b      	str	r3, [r7, #0]
 800ce30:	e7ee      	b.n	800ce10 <__sfp+0x60>
 800ce32:	bf00      	nop
 800ce34:	0800d5a0 	.word	0x0800d5a0
 800ce38:	ffff0001 	.word	0xffff0001

0800ce3c <_fwalk_reent>:
 800ce3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce40:	4606      	mov	r6, r0
 800ce42:	4688      	mov	r8, r1
 800ce44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce48:	2700      	movs	r7, #0
 800ce4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce4e:	f1b9 0901 	subs.w	r9, r9, #1
 800ce52:	d505      	bpl.n	800ce60 <_fwalk_reent+0x24>
 800ce54:	6824      	ldr	r4, [r4, #0]
 800ce56:	2c00      	cmp	r4, #0
 800ce58:	d1f7      	bne.n	800ce4a <_fwalk_reent+0xe>
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce60:	89ab      	ldrh	r3, [r5, #12]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d907      	bls.n	800ce76 <_fwalk_reent+0x3a>
 800ce66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	d003      	beq.n	800ce76 <_fwalk_reent+0x3a>
 800ce6e:	4629      	mov	r1, r5
 800ce70:	4630      	mov	r0, r6
 800ce72:	47c0      	blx	r8
 800ce74:	4307      	orrs	r7, r0
 800ce76:	3568      	adds	r5, #104	; 0x68
 800ce78:	e7e9      	b.n	800ce4e <_fwalk_reent+0x12>

0800ce7a <__retarget_lock_init_recursive>:
 800ce7a:	4770      	bx	lr

0800ce7c <__retarget_lock_acquire_recursive>:
 800ce7c:	4770      	bx	lr

0800ce7e <__retarget_lock_release_recursive>:
 800ce7e:	4770      	bx	lr

0800ce80 <__swhatbuf_r>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	460e      	mov	r6, r1
 800ce84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	b096      	sub	sp, #88	; 0x58
 800ce8c:	4614      	mov	r4, r2
 800ce8e:	461d      	mov	r5, r3
 800ce90:	da08      	bge.n	800cea4 <__swhatbuf_r+0x24>
 800ce92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce96:	2200      	movs	r2, #0
 800ce98:	602a      	str	r2, [r5, #0]
 800ce9a:	061a      	lsls	r2, r3, #24
 800ce9c:	d410      	bmi.n	800cec0 <__swhatbuf_r+0x40>
 800ce9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cea2:	e00e      	b.n	800cec2 <__swhatbuf_r+0x42>
 800cea4:	466a      	mov	r2, sp
 800cea6:	f000 f945 	bl	800d134 <_fstat_r>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	dbf1      	blt.n	800ce92 <__swhatbuf_r+0x12>
 800ceae:	9a01      	ldr	r2, [sp, #4]
 800ceb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ceb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ceb8:	425a      	negs	r2, r3
 800ceba:	415a      	adcs	r2, r3
 800cebc:	602a      	str	r2, [r5, #0]
 800cebe:	e7ee      	b.n	800ce9e <__swhatbuf_r+0x1e>
 800cec0:	2340      	movs	r3, #64	; 0x40
 800cec2:	2000      	movs	r0, #0
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	b016      	add	sp, #88	; 0x58
 800cec8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cecc <__smakebuf_r>:
 800cecc:	898b      	ldrh	r3, [r1, #12]
 800cece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ced0:	079d      	lsls	r5, r3, #30
 800ced2:	4606      	mov	r6, r0
 800ced4:	460c      	mov	r4, r1
 800ced6:	d507      	bpl.n	800cee8 <__smakebuf_r+0x1c>
 800ced8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cedc:	6023      	str	r3, [r4, #0]
 800cede:	6123      	str	r3, [r4, #16]
 800cee0:	2301      	movs	r3, #1
 800cee2:	6163      	str	r3, [r4, #20]
 800cee4:	b002      	add	sp, #8
 800cee6:	bd70      	pop	{r4, r5, r6, pc}
 800cee8:	ab01      	add	r3, sp, #4
 800ceea:	466a      	mov	r2, sp
 800ceec:	f7ff ffc8 	bl	800ce80 <__swhatbuf_r>
 800cef0:	9900      	ldr	r1, [sp, #0]
 800cef2:	4605      	mov	r5, r0
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7fb fcbb 	bl	8008870 <_malloc_r>
 800cefa:	b948      	cbnz	r0, 800cf10 <__smakebuf_r+0x44>
 800cefc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf00:	059a      	lsls	r2, r3, #22
 800cf02:	d4ef      	bmi.n	800cee4 <__smakebuf_r+0x18>
 800cf04:	f023 0303 	bic.w	r3, r3, #3
 800cf08:	f043 0302 	orr.w	r3, r3, #2
 800cf0c:	81a3      	strh	r3, [r4, #12]
 800cf0e:	e7e3      	b.n	800ced8 <__smakebuf_r+0xc>
 800cf10:	4b0d      	ldr	r3, [pc, #52]	; (800cf48 <__smakebuf_r+0x7c>)
 800cf12:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	6020      	str	r0, [r4, #0]
 800cf18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1c:	81a3      	strh	r3, [r4, #12]
 800cf1e:	9b00      	ldr	r3, [sp, #0]
 800cf20:	6163      	str	r3, [r4, #20]
 800cf22:	9b01      	ldr	r3, [sp, #4]
 800cf24:	6120      	str	r0, [r4, #16]
 800cf26:	b15b      	cbz	r3, 800cf40 <__smakebuf_r+0x74>
 800cf28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	f000 f913 	bl	800d158 <_isatty_r>
 800cf32:	b128      	cbz	r0, 800cf40 <__smakebuf_r+0x74>
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f023 0303 	bic.w	r3, r3, #3
 800cf3a:	f043 0301 	orr.w	r3, r3, #1
 800cf3e:	81a3      	strh	r3, [r4, #12]
 800cf40:	89a0      	ldrh	r0, [r4, #12]
 800cf42:	4305      	orrs	r5, r0
 800cf44:	81a5      	strh	r5, [r4, #12]
 800cf46:	e7cd      	b.n	800cee4 <__smakebuf_r+0x18>
 800cf48:	0800ccd9 	.word	0x0800ccd9

0800cf4c <memmove>:
 800cf4c:	4288      	cmp	r0, r1
 800cf4e:	b510      	push	{r4, lr}
 800cf50:	eb01 0402 	add.w	r4, r1, r2
 800cf54:	d902      	bls.n	800cf5c <memmove+0x10>
 800cf56:	4284      	cmp	r4, r0
 800cf58:	4623      	mov	r3, r4
 800cf5a:	d807      	bhi.n	800cf6c <memmove+0x20>
 800cf5c:	1e43      	subs	r3, r0, #1
 800cf5e:	42a1      	cmp	r1, r4
 800cf60:	d008      	beq.n	800cf74 <memmove+0x28>
 800cf62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf6a:	e7f8      	b.n	800cf5e <memmove+0x12>
 800cf6c:	4402      	add	r2, r0
 800cf6e:	4601      	mov	r1, r0
 800cf70:	428a      	cmp	r2, r1
 800cf72:	d100      	bne.n	800cf76 <memmove+0x2a>
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf7e:	e7f7      	b.n	800cf70 <memmove+0x24>

0800cf80 <_realloc_r>:
 800cf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf84:	4680      	mov	r8, r0
 800cf86:	4614      	mov	r4, r2
 800cf88:	460e      	mov	r6, r1
 800cf8a:	b921      	cbnz	r1, 800cf96 <_realloc_r+0x16>
 800cf8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf90:	4611      	mov	r1, r2
 800cf92:	f7fb bc6d 	b.w	8008870 <_malloc_r>
 800cf96:	b92a      	cbnz	r2, 800cfa4 <_realloc_r+0x24>
 800cf98:	f7fb fbfe 	bl	8008798 <_free_r>
 800cf9c:	4625      	mov	r5, r4
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa4:	f000 f8fa 	bl	800d19c <_malloc_usable_size_r>
 800cfa8:	4284      	cmp	r4, r0
 800cfaa:	4607      	mov	r7, r0
 800cfac:	d802      	bhi.n	800cfb4 <_realloc_r+0x34>
 800cfae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfb2:	d812      	bhi.n	800cfda <_realloc_r+0x5a>
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	f7fb fc5a 	bl	8008870 <_malloc_r>
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d0ed      	beq.n	800cf9e <_realloc_r+0x1e>
 800cfc2:	42bc      	cmp	r4, r7
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	bf28      	it	cs
 800cfca:	463a      	movcs	r2, r7
 800cfcc:	f7fe fd06 	bl	800b9dc <memcpy>
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	f7fb fbe0 	bl	8008798 <_free_r>
 800cfd8:	e7e1      	b.n	800cf9e <_realloc_r+0x1e>
 800cfda:	4635      	mov	r5, r6
 800cfdc:	e7df      	b.n	800cf9e <_realloc_r+0x1e>

0800cfde <_raise_r>:
 800cfde:	291f      	cmp	r1, #31
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	d904      	bls.n	800cff2 <_raise_r+0x14>
 800cfe8:	2316      	movs	r3, #22
 800cfea:	6003      	str	r3, [r0, #0]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	bd38      	pop	{r3, r4, r5, pc}
 800cff2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cff4:	b112      	cbz	r2, 800cffc <_raise_r+0x1e>
 800cff6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cffa:	b94b      	cbnz	r3, 800d010 <_raise_r+0x32>
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 f831 	bl	800d064 <_getpid_r>
 800d002:	462a      	mov	r2, r5
 800d004:	4601      	mov	r1, r0
 800d006:	4620      	mov	r0, r4
 800d008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d00c:	f000 b818 	b.w	800d040 <_kill_r>
 800d010:	2b01      	cmp	r3, #1
 800d012:	d00a      	beq.n	800d02a <_raise_r+0x4c>
 800d014:	1c59      	adds	r1, r3, #1
 800d016:	d103      	bne.n	800d020 <_raise_r+0x42>
 800d018:	2316      	movs	r3, #22
 800d01a:	6003      	str	r3, [r0, #0]
 800d01c:	2001      	movs	r0, #1
 800d01e:	e7e7      	b.n	800cff0 <_raise_r+0x12>
 800d020:	2400      	movs	r4, #0
 800d022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d026:	4628      	mov	r0, r5
 800d028:	4798      	blx	r3
 800d02a:	2000      	movs	r0, #0
 800d02c:	e7e0      	b.n	800cff0 <_raise_r+0x12>
	...

0800d030 <raise>:
 800d030:	4b02      	ldr	r3, [pc, #8]	; (800d03c <raise+0xc>)
 800d032:	4601      	mov	r1, r0
 800d034:	6818      	ldr	r0, [r3, #0]
 800d036:	f7ff bfd2 	b.w	800cfde <_raise_r>
 800d03a:	bf00      	nop
 800d03c:	2000000c 	.word	0x2000000c

0800d040 <_kill_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4d07      	ldr	r5, [pc, #28]	; (800d060 <_kill_r+0x20>)
 800d044:	2300      	movs	r3, #0
 800d046:	4604      	mov	r4, r0
 800d048:	4608      	mov	r0, r1
 800d04a:	4611      	mov	r1, r2
 800d04c:	602b      	str	r3, [r5, #0]
 800d04e:	f7f5 fd23 	bl	8002a98 <_kill>
 800d052:	1c43      	adds	r3, r0, #1
 800d054:	d102      	bne.n	800d05c <_kill_r+0x1c>
 800d056:	682b      	ldr	r3, [r5, #0]
 800d058:	b103      	cbz	r3, 800d05c <_kill_r+0x1c>
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	bd38      	pop	{r3, r4, r5, pc}
 800d05e:	bf00      	nop
 800d060:	200005b4 	.word	0x200005b4

0800d064 <_getpid_r>:
 800d064:	f7f5 bd10 	b.w	8002a88 <_getpid>

0800d068 <__sread>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	460c      	mov	r4, r1
 800d06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d070:	f000 f89c 	bl	800d1ac <_read_r>
 800d074:	2800      	cmp	r0, #0
 800d076:	bfab      	itete	ge
 800d078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d07a:	89a3      	ldrhlt	r3, [r4, #12]
 800d07c:	181b      	addge	r3, r3, r0
 800d07e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d082:	bfac      	ite	ge
 800d084:	6563      	strge	r3, [r4, #84]	; 0x54
 800d086:	81a3      	strhlt	r3, [r4, #12]
 800d088:	bd10      	pop	{r4, pc}

0800d08a <__swrite>:
 800d08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08e:	461f      	mov	r7, r3
 800d090:	898b      	ldrh	r3, [r1, #12]
 800d092:	05db      	lsls	r3, r3, #23
 800d094:	4605      	mov	r5, r0
 800d096:	460c      	mov	r4, r1
 800d098:	4616      	mov	r6, r2
 800d09a:	d505      	bpl.n	800d0a8 <__swrite+0x1e>
 800d09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f000 f868 	bl	800d178 <_lseek_r>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0b2:	81a3      	strh	r3, [r4, #12]
 800d0b4:	4632      	mov	r2, r6
 800d0b6:	463b      	mov	r3, r7
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0be:	f000 b817 	b.w	800d0f0 <_write_r>

0800d0c2 <__sseek>:
 800d0c2:	b510      	push	{r4, lr}
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ca:	f000 f855 	bl	800d178 <_lseek_r>
 800d0ce:	1c43      	adds	r3, r0, #1
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	bf15      	itete	ne
 800d0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0de:	81a3      	strheq	r3, [r4, #12]
 800d0e0:	bf18      	it	ne
 800d0e2:	81a3      	strhne	r3, [r4, #12]
 800d0e4:	bd10      	pop	{r4, pc}

0800d0e6 <__sclose>:
 800d0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ea:	f000 b813 	b.w	800d114 <_close_r>
	...

0800d0f0 <_write_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d07      	ldr	r5, [pc, #28]	; (800d110 <_write_r+0x20>)
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	602a      	str	r2, [r5, #0]
 800d0fe:	461a      	mov	r2, r3
 800d100:	f7f5 fd01 	bl	8002b06 <_write>
 800d104:	1c43      	adds	r3, r0, #1
 800d106:	d102      	bne.n	800d10e <_write_r+0x1e>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	b103      	cbz	r3, 800d10e <_write_r+0x1e>
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	200005b4 	.word	0x200005b4

0800d114 <_close_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	4d06      	ldr	r5, [pc, #24]	; (800d130 <_close_r+0x1c>)
 800d118:	2300      	movs	r3, #0
 800d11a:	4604      	mov	r4, r0
 800d11c:	4608      	mov	r0, r1
 800d11e:	602b      	str	r3, [r5, #0]
 800d120:	f7f5 fd0d 	bl	8002b3e <_close>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_close_r+0x1a>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_close_r+0x1a>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	200005b4 	.word	0x200005b4

0800d134 <_fstat_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4d07      	ldr	r5, [pc, #28]	; (800d154 <_fstat_r+0x20>)
 800d138:	2300      	movs	r3, #0
 800d13a:	4604      	mov	r4, r0
 800d13c:	4608      	mov	r0, r1
 800d13e:	4611      	mov	r1, r2
 800d140:	602b      	str	r3, [r5, #0]
 800d142:	f7f5 fd08 	bl	8002b56 <_fstat>
 800d146:	1c43      	adds	r3, r0, #1
 800d148:	d102      	bne.n	800d150 <_fstat_r+0x1c>
 800d14a:	682b      	ldr	r3, [r5, #0]
 800d14c:	b103      	cbz	r3, 800d150 <_fstat_r+0x1c>
 800d14e:	6023      	str	r3, [r4, #0]
 800d150:	bd38      	pop	{r3, r4, r5, pc}
 800d152:	bf00      	nop
 800d154:	200005b4 	.word	0x200005b4

0800d158 <_isatty_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4d06      	ldr	r5, [pc, #24]	; (800d174 <_isatty_r+0x1c>)
 800d15c:	2300      	movs	r3, #0
 800d15e:	4604      	mov	r4, r0
 800d160:	4608      	mov	r0, r1
 800d162:	602b      	str	r3, [r5, #0]
 800d164:	f7f5 fd07 	bl	8002b76 <_isatty>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d102      	bne.n	800d172 <_isatty_r+0x1a>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	b103      	cbz	r3, 800d172 <_isatty_r+0x1a>
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	200005b4 	.word	0x200005b4

0800d178 <_lseek_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d07      	ldr	r5, [pc, #28]	; (800d198 <_lseek_r+0x20>)
 800d17c:	4604      	mov	r4, r0
 800d17e:	4608      	mov	r0, r1
 800d180:	4611      	mov	r1, r2
 800d182:	2200      	movs	r2, #0
 800d184:	602a      	str	r2, [r5, #0]
 800d186:	461a      	mov	r2, r3
 800d188:	f7f5 fd00 	bl	8002b8c <_lseek>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	d102      	bne.n	800d196 <_lseek_r+0x1e>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	b103      	cbz	r3, 800d196 <_lseek_r+0x1e>
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	200005b4 	.word	0x200005b4

0800d19c <_malloc_usable_size_r>:
 800d19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a0:	1f18      	subs	r0, r3, #4
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	bfbc      	itt	lt
 800d1a6:	580b      	ldrlt	r3, [r1, r0]
 800d1a8:	18c0      	addlt	r0, r0, r3
 800d1aa:	4770      	bx	lr

0800d1ac <_read_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d07      	ldr	r5, [pc, #28]	; (800d1cc <_read_r+0x20>)
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	4608      	mov	r0, r1
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	602a      	str	r2, [r5, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	f7f5 fc86 	bl	8002acc <_read>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_read_r+0x1e>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_read_r+0x1e>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	200005b4 	.word	0x200005b4

0800d1d0 <_init>:
 800d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d2:	bf00      	nop
 800d1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1d6:	bc08      	pop	{r3}
 800d1d8:	469e      	mov	lr, r3
 800d1da:	4770      	bx	lr

0800d1dc <_fini>:
 800d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1de:	bf00      	nop
 800d1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1e2:	bc08      	pop	{r3}
 800d1e4:	469e      	mov	lr, r3
 800d1e6:	4770      	bx	lr


IPM_Integration with GSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf4  0800a470  0800a470  0001a470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b164  0800b164  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b164  0800b164  0001b164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b16c  0800b16c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b16c  0800b16c  0001b16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b170  0800b170  0001b170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  200001dc  0800b350  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800b350  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a3d  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003969  00000000  00000000  00038c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003d910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b8d  00000000  00000000  0003eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197ad  00000000  00000000  00063655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d54d3  00000000  00000000  0007ce02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001522d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006130  00000000  00000000  00152328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a454 	.word	0x0800a454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a454 	.word	0x0800a454

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <DataTosend>:
//}
//


void DataTosend(char* time,char* val)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
//	HAL_Delay(5000);
//	DataToCloud(1,RTC_time_data);
//	HAL_Delay(5000);
//	DataToCloud(2,ADC_cloud_data);
//	HAL_Delay(5000);
	DataToCloud(time,val);
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f9b5 	bl	80012c8 <DataToCloud>


}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <Voltage_Calculation>:
float vol;
int temp;


float Voltage_Calculation(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	vol=(float)(temp*(MIN_VALUE/MAX_VALUE));
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <Voltage_Calculation+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fad7 	bl	8000524 <__aeabi_i2d>
 8000f76:	a30a      	add	r3, pc, #40	; (adr r3, 8000fa0 <Voltage_Calculation+0x38>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fb3c 	bl	80005f8 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fe0e 	bl	8000ba8 <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <Voltage_Calculation+0x44>)
 8000f90:	6013      	str	r3, [r2, #0]
    return vol;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <Voltage_Calculation+0x44>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	ee07 3a90 	vmov	s15, r3
}
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	e734d9b4 	.word	0xe734d9b4
 8000fa4:	3f4a680c 	.word	0x3f4a680c
 8000fa8:	20000200 	.word	0x20000200
 8000fac:	200001fc 	.word	0x200001fc

08000fb0 <adc_handler>:

void adc_handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

	d = (float)Voltage_Calculation();
 8000fb4:	f7ff ffd8 	bl	8000f68 <Voltage_Calculation>
 8000fb8:	eef0 7a40 	vmov.f32	s15, s0
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <adc_handler+0x18>)
 8000fbe:	edc3 7a00 	vstr	s15, [r3]
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001f8 	.word	0x200001f8

08000fcc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	temp = adc_value();
 8000fd4:	f000 fb6a 	bl	80016ac <adc_value>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000fdc:	6013      	str	r3, [r2, #0]
	//HAL_ADC_Start_IT(&hadc1);

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000200 	.word	0x20000200

08000fec <bcdToDec>:
	return (uint8_t)( (val/10*16) + (val%10) );
}

//Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	return (int)( (val/16*10) + (val%16) );
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	461a      	mov	r2, r3
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	4413      	add	r3, r2
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <Get_Time>:
      I2C_Write(&hi2c1, DS3107_ADDRESS, 0x00, 1, set_time, 7, 1000);


}
void Get_Time (void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t get_time[7];

	I2C_read(get_time);
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fac5 	bl	80015b4 <I2C_read>

	time.seconds 	= bcdToDec(get_time[0]);
 800102a:	783b      	ldrb	r3, [r7, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ffdd 	bl	8000fec <bcdToDec>
 8001032:	4603      	mov	r3, r0
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <Get_Time+0x88>)
 8001038:	701a      	strb	r2, [r3, #0]
    time.minutes 	= bcdToDec(get_time[1]);
 800103a:	787b      	ldrb	r3, [r7, #1]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffd5 	bl	8000fec <bcdToDec>
 8001042:	4603      	mov	r3, r0
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <Get_Time+0x88>)
 8001048:	705a      	strb	r2, [r3, #1]
	time.hour 		= bcdToDec(get_time[2]);
 800104a:	78bb      	ldrb	r3, [r7, #2]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffcd 	bl	8000fec <bcdToDec>
 8001052:	4603      	mov	r3, r0
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <Get_Time+0x88>)
 8001058:	709a      	strb	r2, [r3, #2]
	time.dayofweek  = bcdToDec(get_time[3]);
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffc5 	bl	8000fec <bcdToDec>
 8001062:	4603      	mov	r3, r0
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <Get_Time+0x88>)
 8001068:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800106a:	793b      	ldrb	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffbd 	bl	8000fec <bcdToDec>
 8001072:	4603      	mov	r3, r0
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <Get_Time+0x88>)
 8001078:	711a      	strb	r2, [r3, #4]
	time.month 		= bcdToDec(get_time[5]);
 800107a:	797b      	ldrb	r3, [r7, #5]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ffb5 	bl	8000fec <bcdToDec>
 8001082:	4603      	mov	r3, r0
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <Get_Time+0x88>)
 8001088:	715a      	strb	r2, [r3, #5]
	time.year 		= bcdToDec(get_time[6]);
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ffad 	bl	8000fec <bcdToDec>
 8001092:	4603      	mov	r3, r0
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <Get_Time+0x88>)
 8001098:	719a      	strb	r2, [r3, #6]
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000204 	.word	0x20000204

080010a8 <app>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void app(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af02      	add	r7, sp, #8
//  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Get_Time();
 80010ae:	f7ff ffb5 	bl	800101c <Get_Time>
	  	  sprintf(buffer_OLED, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <app+0x78>)
 80010b4:	789b      	ldrb	r3, [r3, #2]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <app+0x78>)
 80010ba:	785b      	ldrb	r3, [r3, #1]
 80010bc:	4619      	mov	r1, r3
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <app+0x78>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	460b      	mov	r3, r1
 80010c6:	4917      	ldr	r1, [pc, #92]	; (8001124 <app+0x7c>)
 80010c8:	4817      	ldr	r0, [pc, #92]	; (8001128 <app+0x80>)
 80010ca:	f007 f84f 	bl	800816c <siprintf>
	  	  ssd1306_SetCursor(5, 5);
 80010ce:	2105      	movs	r1, #5
 80010d0:	2005      	movs	r0, #5
 80010d2:	f000 fce3 	bl	8001a9c <ssd1306_SetCursor>
	  	  OLED_data(buffer_OLED);
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <app+0x80>)
 80010d8:	f000 f830 	bl	800113c <OLED_data>


	  	  HAL_Delay(500);
 80010dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e0:	f001 f9ce 	bl	8002480 <HAL_Delay>

	  	  /*ADC function started*/

	  	  HAL_ADC_Start_IT(&hadc1);
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <app+0x84>)
 80010e6:	f001 fd11 	bl	8002b0c <HAL_ADC_Start_IT>
	  	  adc_handler();
 80010ea:	f7ff ff61 	bl	8000fb0 <adc_handler>

  		  sprintf(buffer_ADC, "%f", d);
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <app+0x88>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa28 	bl	8000548 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	490d      	ldr	r1, [pc, #52]	; (8001134 <app+0x8c>)
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <app+0x90>)
 8001100:	f007 f834 	bl	800816c <siprintf>
  		  ssd1306_SetCursor(7, 20);
 8001104:	2114      	movs	r1, #20
 8001106:	2007      	movs	r0, #7
 8001108:	f000 fcc8 	bl	8001a9c <ssd1306_SetCursor>
  		  OLED_data(buffer_ADC);
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <app+0x90>)
 800110e:	f000 f815 	bl	800113c <OLED_data>
//  		DataTosend(time.hour,time.minutes,time.seconds,d);
  		DataTosend(buffer_OLED,buffer_ADC);
 8001112:	4909      	ldr	r1, [pc, #36]	; (8001138 <app+0x90>)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <app+0x80>)
 8001116:	f7ff ff19 	bl	8000f4c <DataTosend>


  }
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000204 	.word	0x20000204
 8001124:	0800a470 	.word	0x0800a470
 8001128:	2000020c 	.word	0x2000020c
 800112c:	200005a0 	.word	0x200005a0
 8001130:	200001f8 	.word	0x200001f8
 8001134:	0800a480 	.word	0x0800a480
 8001138:	2000021c 	.word	0x2000021c

0800113c <OLED_data>:


          void OLED_data(char* buffer)
         {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
 8001142:	6078      	str	r0, [r7, #4]

	  	    ssd1306_WriteString(buffer, Font_7x10, White);
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <OLED_data+0x24>)
 8001146:	2201      	movs	r2, #1
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fc7f 	bl	8001a50 <ssd1306_WriteString>
	  	    ssd1306_UpdateScreen();
 8001152:	f000 fb6f 	bl	8001834 <ssd1306_UpdateScreen>

	  	  }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0800ad34 	.word	0x0800ad34

08001164 <UART1_Init>:

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void UART1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <UART1_Init+0x58>)
 800116a:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <UART1_Init+0x5c>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <UART1_Init+0x58>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <UART1_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <UART1_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <UART1_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <UART1_Init+0x58>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <UART1_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <UART1_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <UART1_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <UART1_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <UART1_Init+0x58>)
 80011a8:	f004 fe6c 	bl	8005e84 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <UART1_Init+0x52>
  {
    Error_Handler();
 80011b2:	f000 fe11 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000290 	.word	0x20000290
 80011c0:	40013800 	.word	0x40013800

080011c4 <UART2_Init>:


void UART2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <UART2_Init+0x58>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <UART2_Init+0x5c>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <UART2_Init+0x58>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <UART2_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <UART2_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <UART2_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <UART2_Init+0x58>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <UART2_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <UART2_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <UART2_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <UART2_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <UART2_Init+0x58>)
 8001208:	f004 fe3c 	bl	8005e84 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <UART2_Init+0x52>
  {
    Error_Handler();
 8001212:	f000 fde1 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000314 	.word	0x20000314
 8001220:	40004400 	.word	0x40004400

08001224 <GsmCommands>:


void GsmCommands(uint8_t* cmd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7fe ffcf 	bl	80001d0 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <GsmCommands+0x4c>)
 800123c:	f004 fe70 	bl	8005f20 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 8001240:	2264      	movs	r2, #100	; 0x64
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <GsmCommands+0x50>)
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <GsmCommands+0x4c>)
 8001246:	f004 fed9 	bl	8005ffc <HAL_UART_Receive_IT>
	 HAL_Delay(1000);
 800124a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124e:	f001 f917 	bl	8002480 <HAL_Delay>
	 HAL_UART_Transmit_IT(&huart1, Reply, strlen((char*)Reply));
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <GsmCommands+0x50>)
 8001254:	f7fe ffbc 	bl	80001d0 <strlen>
 8001258:	4603      	mov	r3, r0
 800125a:	b29b      	uxth	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	4905      	ldr	r1, [pc, #20]	; (8001274 <GsmCommands+0x50>)
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <GsmCommands+0x54>)
 8001262:	f004 fe5d 	bl	8005f20 <HAL_UART_Transmit_IT>


}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000314 	.word	0x20000314
 8001274:	2000022c 	.word	0x2000022c
 8001278:	20000290 	.word	0x20000290

0800127c <Gsm_Init>:



void Gsm_Init()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 8001280:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001284:	f001 f8fc 	bl	8002480 <HAL_Delay>
//	          HAL_Delay(1000);


	          //send data to thingspeak

	                    GsmCommands((uint8_t*)"AT\r\n");
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <Gsm_Init+0x34>)
 800128a:	f7ff ffcb 	bl	8001224 <GsmCommands>
                        GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 800128e:	4809      	ldr	r0, [pc, #36]	; (80012b4 <Gsm_Init+0x38>)
 8001290:	f7ff ffc8 	bl	8001224 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <Gsm_Init+0x3c>)
 8001296:	f7ff ffc5 	bl	8001224 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 800129a:	4808      	ldr	r0, [pc, #32]	; (80012bc <Gsm_Init+0x40>)
 800129c:	f7ff ffc2 	bl	8001224 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <Gsm_Init+0x44>)
 80012a2:	f7ff ffbf 	bl	8001224 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <Gsm_Init+0x48>)
 80012a8:	f7ff ffbc 	bl	8001224 <GsmCommands>
//


}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	0800a484 	.word	0x0800a484
 80012b4:	0800a48c 	.word	0x0800a48c
 80012b8:	0800a498 	.word	0x0800a498
 80012bc:	0800a4a4 	.word	0x0800a4a4
 80012c0:	0800a4b4 	.word	0x0800a4b4
 80012c4:	0800a4d4 	.word	0x0800a4d4

080012c8 <DataToCloud>:
//
//}


void DataToCloud(uint8_t* RTC_data,uint8_t* adc_data)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0c6      	sub	sp, #280	; 0x118
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012d6:	6018      	str	r0, [r3, #0]
 80012d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012e0:	6019      	str	r1, [r3, #0]

			uint8_t AT_RTCcloud_data[256];

			char* encoded_RTC_data = url_encode(RTC_data);
 80012e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	f000 f83a 	bl	8001364 <url_encode>
 80012f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
			    char* encoded_adc_data = url_encode(adc_data);
 80012f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	f000 f831 	bl	8001364 <url_encode>
 8001302:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108


				//	RTCdata_to_cloud

				 GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8001306:	4813      	ldr	r0, [pc, #76]	; (8001354 <DataToCloud+0x8c>)
 8001308:	f7ff ff8c 	bl	8001224 <GsmCommands>
				 GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800130c:	4812      	ldr	r0, [pc, #72]	; (8001358 <DataToCloud+0x90>)
 800130e:	f7ff ff89 	bl	8001224 <GsmCommands>


				 snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyLSuScQBF1GOx4mF4KqTnwraq44K9x2roV38OmpNi6GQOP_srVrmM2XlQHFSWzKbMI/exec?field1=%s&field2=%s\"\r\n",encoded_RTC_data, encoded_adc_data);
 8001312:	f107 0008 	add.w	r0, r7, #8
 8001316:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <DataToCloud+0x94>)
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	f006 feed 	bl	8008104 <sniprintf>
//					snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data), "AT+HTTPPARA=\"URL\",\https://api.thingspeak.com/update?api_key=Y1KDSHTWPIVWKUFJ&field%d=%s\"\r\n",field,cloud_data);


//				 snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyLSuScQBF1GOx4mF4KqTnwraq44K9x2roV38OmpNi6GQOP_srVrmM2XlQHFSWzKbMI/exec?field1=%s&field2=%s\"\r\n",RTC_data,adc_data);
//					snprintf(AT_RTCcloud_data,sizeof(AT_RTCcloud_data), "AT+HTTPPARA=\"URL\",\https://script.google.com/macros/s/AKfycbyRFUZ6mtG47oo06jN6elCj2Zq41r2QrjdROOz-AtCCj6mnL4hzXSkpr7Zdz16FgCHTXw/exec?field1=%s&field2=%s\"\r\n",(char*)RTC_data,(char*)adc_data);
					GsmCommands((uint8_t*)AT_RTCcloud_data);
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff78 	bl	8001224 <GsmCommands>
					 GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <DataToCloud+0x98>)
 8001336:	f7ff ff75 	bl	8001224 <GsmCommands>

					 free(encoded_RTC_data);
 800133a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800133e:	f006 f969 	bl	8007614 <free>
					free(encoded_adc_data);
 8001342:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001346:	f006 f965 	bl	8007614 <free>

}
 800134a:	bf00      	nop
 800134c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0800a4e4 	.word	0x0800a4e4
 8001358:	0800a4f4 	.word	0x0800a4f4
 800135c:	0800a504 	.word	0x0800a504
 8001360:	0800a5a0 	.word	0x0800a5a0

08001364 <url_encode>:

char* url_encode(const char* str) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    const char* hex = "0123456789ABCDEF";
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <url_encode+0xc4>)
 800136e:	613b      	str	r3, [r7, #16]
    char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7fe ff2d 	bl	80001d0 <strlen>
 8001376:	4602      	mov	r2, r0
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	3301      	adds	r3, #1
 8001380:	4618      	mov	r0, r3
 8001382:	f006 f93f 	bl	8007604 <malloc>
 8001386:	4603      	mov	r3, r0
 8001388:	60fb      	str	r3, [r7, #12]
    char* ptr = encoded;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	617b      	str	r3, [r7, #20]

    while (*str) {
 800138e:	e03e      	b.n	800140e <url_encode+0xaa>
        if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f006 f92d 	bl	80075f4 <isalnum>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10f      	bne.n	80013c0 <url_encode+0x5c>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b2d      	cmp	r3, #45	; 0x2d
 80013a6:	d00b      	beq.n	80013c0 <url_encode+0x5c>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b5f      	cmp	r3, #95	; 0x5f
 80013ae:	d007      	beq.n	80013c0 <url_encode+0x5c>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b2e      	cmp	r3, #46	; 0x2e
 80013b6:	d003      	beq.n	80013c0 <url_encode+0x5c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b7e      	cmp	r3, #126	; 0x7e
 80013be:	d106      	bne.n	80013ce <url_encode+0x6a>
            *ptr++ = *str;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	617a      	str	r2, [r7, #20]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	e01c      	b.n	8001408 <url_encode+0xa4>
        } else {
            *ptr++ = '%';
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	617a      	str	r2, [r7, #20]
 80013d4:	2225      	movs	r2, #37	; 0x25
 80013d6:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[(*str >> 4) & 0xF];
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	441a      	add	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	1c59      	adds	r1, r3, #1
 80013ec:	6179      	str	r1, [r7, #20]
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[*str & 0xF];
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	441a      	add	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	1c59      	adds	r1, r3, #1
 8001402:	6179      	str	r1, [r7, #20]
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	701a      	strb	r2, [r3, #0]
        }
        str++;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
    while (*str) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1bc      	bne.n	8001390 <url_encode+0x2c>
    }
    *ptr = '\0';
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
    return encoded;
 800141c:	68fb      	ldr	r3, [r7, #12]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	0800a5b4 	.word	0x0800a5b4

0800142c <User_SystemClock_Config>:
#include "application_RTC.h"
#include "ssd1306.h"
extern I2C_HandleTypeDef hi2c1;

void User_SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2244      	movs	r2, #68	; 0x44
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f006 f900 	bl	8007640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800144e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001452:	f003 fb91 	bl	8004b78 <HAL_PWREx_ControlVoltageScaling>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <User_SystemClock_Config+0x34>
  {
    Error_Handler();
 800145c:	f000 fcbc 	bl	8001dd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001460:	f003 fb6c 	bl	8004b3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <User_SystemClock_Config+0xc0>)
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146a:	4a20      	ldr	r2, [pc, #128]	; (80014ec <User_SystemClock_Config+0xc0>)
 800146c:	f023 0318 	bic.w	r3, r3, #24
 8001470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001474:	2314      	movs	r3, #20
 8001476:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001484:	2360      	movs	r3, #96	; 0x60
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2302      	movs	r3, #2
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800148c:	2301      	movs	r3, #1
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001494:	2310      	movs	r3, #16
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001498:	2307      	movs	r3, #7
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fbbb 	bl	8004c24 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <User_SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014b4:	f000 fc90 	bl	8001dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2303      	movs	r3, #3
 80014be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	2101      	movs	r1, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 ffbb 	bl	800544c <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <User_SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014dc:	f000 fc7c 	bl	8001dd8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014e0:	f004 fbce 	bl	8005c80 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014e4:	bf00      	nop
 80014e6:	3758      	adds	r7, #88	; 0x58
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000

080014f0 <USER_I2C1_Init>:


void USER_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <USER_I2C1_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <USER_I2C1_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <USER_I2C1_Init+0x74>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <USER_I2C1_Init+0x7c>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <USER_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <USER_I2C1_Init+0x74>)
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <USER_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <USER_I2C1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <USER_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <USER_I2C1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <USER_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <USER_I2C1_Init+0x74>)
 800152c:	f002 fd0a 	bl	8003f44 <HAL_I2C_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <USER_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001536:	f000 fc4f 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <USER_I2C1_Init+0x74>)
 800153e:	f003 fa65 	bl	8004a0c <HAL_I2CEx_ConfigAnalogFilter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <USER_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001548:	f000 fc46 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <USER_I2C1_Init+0x74>)
 8001550:	f003 faa7 	bl	8004aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <USER_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 fc3d 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000604 	.word	0x20000604
 8001568:	40005400 	.word	0x40005400
 800156c:	00707cbb 	.word	0x00707cbb

08001570 <I2C_Write>:


// Generic I2C write function
void I2C_Write(I2C_HandleTypeDef *hi2c, uint16_t device_address, uint16_t mem_address, uint8_t mem_address_size, uint8_t *data, size_t data_size, uint32_t timeout)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af04      	add	r7, sp, #16
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	817b      	strh	r3, [r7, #10]
 8001582:	460b      	mov	r3, r1
 8001584:	813b      	strh	r3, [r7, #8]
 8001586:	4613      	mov	r3, r2
 8001588:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(hi2c, device_address, mem_address, mem_address_size, data, data_size, timeout);
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	b29c      	uxth	r4, r3
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	b29b      	uxth	r3, r3
 8001592:	8938      	ldrh	r0, [r7, #8]
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001598:	9202      	str	r2, [sp, #8]
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4623      	mov	r3, r4
 80015a2:	4602      	mov	r2, r0
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f002 fd5d 	bl	8004064 <HAL_I2C_Mem_Write>
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd90      	pop	{r4, r7, pc}
	...

080015b4 <I2C_read>:

//read function for RTC
void I2C_read(uint8_t *data)
   {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, DS3107_ADDRESS, 0x00, 1, data, 7, 1000);
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2307      	movs	r3, #7
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2301      	movs	r3, #1
 80015cc:	2200      	movs	r2, #0
 80015ce:	21d0      	movs	r1, #208	; 0xd0
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <I2C_read+0x2c>)
 80015d2:	f002 fe5b 	bl	800428c <HAL_I2C_Mem_Read>
   }
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000604 	.word	0x20000604

080015e4 <USER_ADC1_Init>:
//  HAL_RCCEx_EnableMSIPLLMode();
//}


 void USER_ADC1_Init(void)
 {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN ADC1_Init 0 */
 //
   /* USER CODE END ADC1_Init 0 */

   ADC_ChannelConfTypeDef sConfig = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 //
   /* USER CODE END ADC1_Init 1 */

   /** Common config
   */
   hadc1.Instance = ADC1;
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <USER_ADC1_Init+0xbc>)
 80015fc:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <USER_ADC1_Init+0xc0>)
 80015fe:	601a      	str	r2, [r3, #0]
   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001602:	2200      	movs	r2, #0
 8001604:	605a      	str	r2, [r3, #4]
   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <USER_ADC1_Init+0xbc>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <USER_ADC1_Init+0xbc>)
 800161a:	2204      	movs	r2, #4
 800161c:	615a      	str	r2, [r3, #20]
   hadc1.Init.LowPowerAutoWait = DISABLE;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001620:	2200      	movs	r2, #0
 8001622:	761a      	strb	r2, [r3, #24]
   hadc1.Init.ContinuousConvMode = DISABLE;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001626:	2200      	movs	r2, #0
 8001628:	765a      	strb	r2, [r3, #25]
   hadc1.Init.NbrOfConversion = 1;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <USER_ADC1_Init+0xbc>)
 800162c:	2201      	movs	r2, #1
 800162e:	61da      	str	r2, [r3, #28]
   hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <USER_ADC1_Init+0xbc>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001640:	2200      	movs	r2, #0
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
   hadc1.Init.DMAContinuousRequests = DISABLE;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <USER_ADC1_Init+0xbc>)
 800164e:	2200      	movs	r2, #0
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
   hadc1.Init.OversamplingMode = DISABLE;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <USER_ADC1_Init+0xbc>)
 800165c:	f001 f90e 	bl	800287c <HAL_ADC_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <USER_ADC1_Init+0x86>
   {
     Error_Handler();
 8001666:	f000 fbb7 	bl	8001dd8 <Error_Handler>
   }

   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_5;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <USER_ADC1_Init+0xc4>)
 800166c:	603b      	str	r3, [r7, #0]
   sConfig.Rank = ADC_REGULAR_RANK_1;
 800166e:	2306      	movs	r3, #6
 8001670:	607b      	str	r3, [r7, #4]
   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001676:	237f      	movs	r3, #127	; 0x7f
 8001678:	60fb      	str	r3, [r7, #12]
   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800167a:	2304      	movs	r3, #4
 800167c:	613b      	str	r3, [r7, #16]
   sConfig.Offset = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <USER_ADC1_Init+0xbc>)
 8001688:	f001 fcca 	bl	8003020 <HAL_ADC_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <USER_ADC1_Init+0xb2>
   {
     Error_Handler();
 8001692:	f000 fba1 	bl	8001dd8 <Error_Handler>
   }
   /* USER CODE BEGIN ADC1_Init 2 */
 //
   /* USER CODE END ADC1_Init 2 */

 }
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200005a0 	.word	0x200005a0
 80016a4:	50040000 	.word	0x50040000
 80016a8:	14f00020 	.word	0x14f00020

080016ac <adc_value>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

int adc_value(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
return	HAL_ADC_GetValue(&hadc1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <adc_value+0x10>)
 80016b2:	f001 fae0 	bl	8002c76 <HAL_ADC_GetValue>
 80016b6:	4603      	mov	r3, r0

}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200005a0 	.word	0x200005a0

080016c0 <ssd1306_Reset>:
#include "common_RTC.h"


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <ssd1306_WriteCommand>:

 //Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af04      	add	r7, sp, #16
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2301      	movs	r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2301      	movs	r3, #1
 80016ea:	2200      	movs	r2, #0
 80016ec:	2178      	movs	r1, #120	; 0x78
 80016ee:	4803      	ldr	r0, [pc, #12]	; (80016fc <ssd1306_WriteCommand+0x2c>)
 80016f0:	f7ff ff3e 	bl	8001570 <I2C_Write>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000604 	.word	0x20000604

08001700 <ssd1306_WriteData>:


// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af04      	add	r7, sp, #16
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	2178      	movs	r1, #120	; 0x78
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <ssd1306_WriteData+0x2c>)
 8001720:	f7ff ff26 	bl	8001570 <I2C_Write>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000604 	.word	0x20000604

08001730 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001734:	f7ff ffc4 	bl	80016c0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001738:	2064      	movs	r0, #100	; 0x64
 800173a:	f000 fea1 	bl	8002480 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800173e:	2000      	movs	r0, #0
 8001740:	f000 f9d8 	bl	8001af4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001744:	2020      	movs	r0, #32
 8001746:	f7ff ffc3 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff ffc0 	bl	80016d0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001750:	20b0      	movs	r0, #176	; 0xb0
 8001752:	f7ff ffbd 	bl	80016d0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001756:	20c8      	movs	r0, #200	; 0xc8
 8001758:	f7ff ffba 	bl	80016d0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ffb7 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001762:	2010      	movs	r0, #16
 8001764:	f7ff ffb4 	bl	80016d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001768:	2040      	movs	r0, #64	; 0x40
 800176a:	f7ff ffb1 	bl	80016d0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800176e:	20ff      	movs	r0, #255	; 0xff
 8001770:	f000 f9ac 	bl	8001acc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001774:	20a1      	movs	r0, #161	; 0xa1
 8001776:	f7ff ffab 	bl	80016d0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800177a:	20a6      	movs	r0, #166	; 0xa6
 800177c:	f7ff ffa8 	bl	80016d0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001780:	20a8      	movs	r0, #168	; 0xa8
 8001782:	f7ff ffa5 	bl	80016d0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001786:	201f      	movs	r0, #31
 8001788:	f7ff ffa2 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800178c:	20a4      	movs	r0, #164	; 0xa4
 800178e:	f7ff ff9f 	bl	80016d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001792:	20d3      	movs	r0, #211	; 0xd3
 8001794:	f7ff ff9c 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ff99 	bl	80016d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800179e:	20d5      	movs	r0, #213	; 0xd5
 80017a0:	f7ff ff96 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80017a4:	20f0      	movs	r0, #240	; 0xf0
 80017a6:	f7ff ff93 	bl	80016d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80017aa:	20d9      	movs	r0, #217	; 0xd9
 80017ac:	f7ff ff90 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017b0:	2022      	movs	r0, #34	; 0x22
 80017b2:	f7ff ff8d 	bl	80016d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017b6:	20da      	movs	r0, #218	; 0xda
 80017b8:	f7ff ff8a 	bl	80016d0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80017bc:	2002      	movs	r0, #2
 80017be:	f7ff ff87 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017c2:	20db      	movs	r0, #219	; 0xdb
 80017c4:	f7ff ff84 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017c8:	2020      	movs	r0, #32
 80017ca:	f7ff ff81 	bl	80016d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017ce:	208d      	movs	r0, #141	; 0x8d
 80017d0:	f7ff ff7e 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017d4:	2014      	movs	r0, #20
 80017d6:	f7ff ff7b 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 f98a 	bl	8001af4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f000 f80f 	bl	8001804 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80017e6:	f000 f825 	bl	8001834 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <ssd1306_Init+0xd0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <ssd1306_Init+0xd0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80017f6:	4b02      	ldr	r3, [pc, #8]	; (8001800 <ssd1306_Init+0xd0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	711a      	strb	r2, [r3, #4]
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000598 	.word	0x20000598

08001804 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <ssd1306_Fill+0x14>
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <ssd1306_Fill+0x16>
 8001818:	23ff      	movs	r3, #255	; 0xff
 800181a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181e:	4619      	mov	r1, r3
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <ssd1306_Fill+0x2c>)
 8001822:	f005 ff0d 	bl	8007640 <memset>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000398 	.word	0x20000398

08001834 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800183a:	2300      	movs	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e016      	b.n	800186e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3b50      	subs	r3, #80	; 0x50
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff42 	bl	80016d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff ff3f 	bl	80016d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001852:	2010      	movs	r0, #16
 8001854:	f7ff ff3c 	bl	80016d0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <ssd1306_UpdateScreen+0x4c>)
 800185e:	4413      	add	r3, r2
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff4c 	bl	8001700 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	3301      	adds	r3, #1
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d9e5      	bls.n	8001840 <ssd1306_UpdateScreen+0xc>
    }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000398 	.word	0x20000398

08001884 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	460b      	mov	r3, r1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db3d      	blt.n	800191a <ssd1306_DrawPixel+0x96>
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	2b1f      	cmp	r3, #31
 80018a2:	d83a      	bhi.n	800191a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d11a      	bne.n	80018e0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	08db      	lsrs	r3, r3, #3
 80018b0:	b2d8      	uxtb	r0, r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	01db      	lsls	r3, r3, #7
 80018b6:	4413      	add	r3, r2
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <ssd1306_DrawPixel+0xa4>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	b25a      	sxtb	r2, r3
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b259      	sxtb	r1, r3
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4603      	mov	r3, r0
 80018d4:	01db      	lsls	r3, r3, #7
 80018d6:	4413      	add	r3, r2
 80018d8:	b2c9      	uxtb	r1, r1
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <ssd1306_DrawPixel+0xa4>)
 80018dc:	54d1      	strb	r1, [r2, r3]
 80018de:	e01d      	b.n	800191c <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	4413      	add	r3, r2
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <ssd1306_DrawPixel+0xa4>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	2101      	movs	r1, #1
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	b25b      	sxtb	r3, r3
 8001906:	4013      	ands	r3, r2
 8001908:	b259      	sxtb	r1, r3
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4603      	mov	r3, r0
 800190e:	01db      	lsls	r3, r3, #7
 8001910:	4413      	add	r3, r2
 8001912:	b2c9      	uxtb	r1, r1
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <ssd1306_DrawPixel+0xa4>)
 8001916:	54d1      	strb	r1, [r2, r3]
 8001918:	e000      	b.n	800191c <ssd1306_DrawPixel+0x98>
        return;
 800191a:	bf00      	nop
    }
}
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000398 	.word	0x20000398

0800192c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	4604      	mov	r4, r0
 8001934:	4638      	mov	r0, r7
 8001936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800193a:	4623      	mov	r3, r4
 800193c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d902      	bls.n	800194a <ssd1306_WriteChar+0x1e>
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b7e      	cmp	r3, #126	; 0x7e
 8001948:	d901      	bls.n	800194e <ssd1306_WriteChar+0x22>
        return 0;
 800194a:	2300      	movs	r3, #0
 800194c:	e079      	b.n	8001a42 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <ssd1306_WriteChar+0x120>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	783b      	ldrb	r3, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	2b80      	cmp	r3, #128	; 0x80
 800195a:	dc06      	bgt.n	800196a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <ssd1306_WriteChar+0x120>)
 800195e:	885b      	ldrh	r3, [r3, #2]
 8001960:	461a      	mov	r2, r3
 8001962:	787b      	ldrb	r3, [r7, #1]
 8001964:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001966:	2b20      	cmp	r3, #32
 8001968:	dd01      	ble.n	800196e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800196a:	2300      	movs	r3, #0
 800196c:	e069      	b.n	8001a42 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e04e      	b.n	8001a12 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	3b20      	subs	r3, #32
 800197a:	7879      	ldrb	r1, [r7, #1]
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4619      	mov	r1, r3
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	440b      	add	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	e036      	b.n	8001a02 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <ssd1306_WriteChar+0x120>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b2d8      	uxtb	r0, r3
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <ssd1306_WriteChar+0x120>)
 80019b4:	885b      	ldrh	r3, [r3, #2]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4413      	add	r3, r2
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff ff5d 	bl	8001884 <ssd1306_DrawPixel>
 80019ca:	e017      	b.n	80019fc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <ssd1306_WriteChar+0x120>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	b2d8      	uxtb	r0, r3
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <ssd1306_WriteChar+0x120>)
 80019dc:	885b      	ldrh	r3, [r3, #2]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b2d9      	uxtb	r1, r3
 80019e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	f7ff ff44 	bl	8001884 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	783b      	ldrb	r3, [r7, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d3c3      	bcc.n	8001994 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	787b      	ldrb	r3, [r7, #1]
 8001a14:	461a      	mov	r2, r3
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d3ab      	bcc.n	8001974 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <ssd1306_WriteChar+0x120>)
 8001a1e:	881a      	ldrh	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <ssd1306_WriteChar+0x108>
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	3b20      	subs	r3, #32
 8001a2c:	440b      	add	r3, r1
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	e001      	b.n	8001a38 <ssd1306_WriteChar+0x10c>
 8001a34:	783b      	ldrb	r3, [r7, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <ssd1306_WriteChar+0x120>)
 8001a3e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000598 	.word	0x20000598

08001a50 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	4638      	mov	r0, r7
 8001a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001a5e:	e013      	b.n	8001a88 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	7818      	ldrb	r0, [r3, #0]
 8001a64:	7e3b      	ldrb	r3, [r7, #24]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	463b      	mov	r3, r7
 8001a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6c:	f7ff ff5e 	bl	800192c <ssd1306_WriteChar>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d002      	beq.n	8001a82 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	e008      	b.n	8001a94 <ssd1306_WriteString+0x44>
        }
        str++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e7      	bne.n	8001a60 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	781b      	ldrb	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <ssd1306_SetCursor+0x2c>)
 8001ab2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <ssd1306_SetCursor+0x2c>)
 8001aba:	805a      	strh	r2, [r3, #2]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	20000598 	.word	0x20000598

08001acc <ssd1306_SetContrast>:
//        }
//    }
//    return;
//}

void ssd1306_SetContrast(const uint8_t value) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ad6:	2381      	movs	r3, #129	; 0x81
 8001ad8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fdf7 	bl	80016d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fdf3 	bl	80016d0 <ssd1306_WriteCommand>
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b04:	23af      	movs	r3, #175	; 0xaf
 8001b06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <ssd1306_SetDisplayOn+0x38>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	715a      	strb	r2, [r3, #5]
 8001b0e:	e004      	b.n	8001b1a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001b10:	23ae      	movs	r3, #174	; 0xae
 8001b12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <ssd1306_SetDisplayOn+0x38>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fdd7 	bl	80016d0 <ssd1306_WriteCommand>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000598 	.word	0x20000598

08001b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b34:	f000 fc2f 	bl	8002396 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b38:	f000 f818 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3c:	f000 f91c 	bl	8001d78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b40:	f000 f8da 	bl	8001cf8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b44:	f000 f874 	bl	8001c30 <MX_ADC1_Init>
//  MX_USART1_UART_Init();
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  User_SystemClock_Config();
 8001b48:	f7ff fc70 	bl	800142c <User_SystemClock_Config>
  USER_ADC1_Init();
 8001b4c:	f7ff fd4a 	bl	80015e4 <USER_ADC1_Init>
  USER_I2C1_Init();
 8001b50:	f7ff fcce 	bl	80014f0 <USER_I2C1_Init>
  ssd1306_Init();
 8001b54:	f7ff fdec 	bl	8001730 <ssd1306_Init>
  //gsm data

  UART1_Init();
 8001b58:	f7ff fb04 	bl	8001164 <UART1_Init>
    UART2_Init();
 8001b5c:	f7ff fb32 	bl	80011c4 <UART2_Init>
    Gsm_Init();
 8001b60:	f7ff fb8c 	bl	800127c <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app();
 8001b64:	f7ff faa0 	bl	80010a8 <app>
 8001b68:	e7fc      	b.n	8001b64 <main+0x34>
	...

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b096      	sub	sp, #88	; 0x58
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2244      	movs	r2, #68	; 0x44
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 fd60 	bl	8007640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b92:	f002 fff1 	bl	8004b78 <HAL_PWREx_ControlVoltageScaling>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b9c:	f000 f91c 	bl	8001dd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ba0:	f002 ffcc 	bl	8004b3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <SystemClock_Config+0xc0>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <SystemClock_Config+0xc0>)
 8001bac:	f023 0318 	bic.w	r3, r3, #24
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001bb4:	2314      	movs	r3, #20
 8001bb6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001bc4:	2360      	movs	r3, #96	; 0x60
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bd8:	2307      	movs	r3, #7
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f81b 	bl	8004c24 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001bf4:	f000 f8f0 	bl	8001dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fc1b 	bl	800544c <HAL_RCC_ClockConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c1c:	f000 f8dc 	bl	8001dd8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c20:	f004 f82e 	bl	8005c80 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c24:	bf00      	nop
 8001c26:	3758      	adds	r7, #88	; 0x58
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000

08001c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
////
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c36:	463b      	mov	r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
////
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <MX_ADC1_Init+0xc0>)
 8001c4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c66:	2204      	movs	r2, #4
 8001c68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ca6:	4811      	ldr	r0, [pc, #68]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001ca8:	f000 fde8 	bl	800287c <HAL_ADC_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001cb2:	f000 f891 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <MX_ADC1_Init+0xc4>)
 8001cb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cba:	2306      	movs	r3, #6
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cc2:	237f      	movs	r3, #127	; 0x7f
 8001cc4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4806      	ldr	r0, [pc, #24]	; (8001cec <MX_ADC1_Init+0xbc>)
 8001cd4:	f001 f9a4 	bl	8003020 <HAL_ADC_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001cde:	f000 f87b 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//
  /* USER CODE END ADC1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200005a0 	.word	0x200005a0
 8001cf0:	50040000 	.word	0x50040000
 8001cf4:	14f00020 	.word	0x14f00020

08001cf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
////////
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <MX_I2C1_Init+0x78>)
 8001d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <MX_I2C1_Init+0x7c>)
 8001d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d32:	480e      	ldr	r0, [pc, #56]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d34:	f002 f906 	bl	8003f44 <HAL_I2C_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d3e:	f000 f84b 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d42:	2100      	movs	r1, #0
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d46:	f002 fe61 	bl	8004a0c <HAL_I2CEx_ConfigAnalogFilter>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d50:	f000 f842 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d54:	2100      	movs	r1, #0
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d58:	f002 fea3 	bl	8004aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f000 f839 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
////////
  /* USER CODE END I2C1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000604 	.word	0x20000604
 8001d70:	40005400 	.word	0x40005400
 8001d74:	00707cbb 	.word	0x00707cbb

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_GPIO_Init+0x5c>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ddc:	b672      	cpsid	i
}
 8001dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <Error_Handler+0x8>
	...

08001de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_MspInit+0x44>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_MspInit+0x44>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6613      	str	r3, [r2, #96]	; 0x60
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_MspInit+0x44>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_MspInit+0x44>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_MspInit+0x44>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_MspInit+0x44>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b09e      	sub	sp, #120	; 0x78
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	2254      	movs	r2, #84	; 0x54
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f005 fbf7 	bl	8007640 <memset>
  if(hadc->Instance==ADC1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a29      	ldr	r2, [pc, #164]	; (8001efc <HAL_ADC_MspInit+0xd0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d14b      	bne.n	8001ef4 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e66:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001e70:	2310      	movs	r3, #16
 8001e72:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e74:	2307      	movs	r3, #7
 8001e76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e86:	f107 0310 	add.w	r3, r7, #16
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fd02 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001e96:	f7ff ff9f 	bl	8001dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_ADC_MspInit+0xd4>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_ADC_MspInit+0xd4>)
 8001ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_ADC_MspInit+0xd4>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_ADC_MspInit+0xd4>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_ADC_MspInit+0xd4>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_ADC_MspInit+0xd4>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ece:	230b      	movs	r3, #11
 8001ed0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eda:	4619      	mov	r1, r3
 8001edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee0:	f001 fec6 	bl	8003c70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2012      	movs	r0, #18
 8001eea:	f001 fe0c 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001eee:	2012      	movs	r0, #18
 8001ef0:	f001 fe25 	bl	8003b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ef4:	bf00      	nop
 8001ef6:	3778      	adds	r7, #120	; 0x78
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	50040000 	.word	0x50040000
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b09e      	sub	sp, #120	; 0x78
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	2254      	movs	r2, #84	; 0x54
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f005 fb8b 	bl	8007640 <memset>
  if(hi2c->Instance==I2C1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_I2C_MspInit+0xa4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d135      	bne.n	8001fa0 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f34:	2340      	movs	r3, #64	; 0x40
 8001f36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fca7 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f4c:	f7ff ff44 	bl	8001dd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_I2C_MspInit+0xa8>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_I2C_MspInit+0xa8>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_I2C_MspInit+0xa8>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6c:	2312      	movs	r3, #18
 8001f6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f80:	4619      	mov	r1, r3
 8001f82:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <HAL_I2C_MspInit+0xac>)
 8001f84:	f001 fe74 	bl	8003c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0xa8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_I2C_MspInit+0xa8>)
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_I2C_MspInit+0xa8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3778      	adds	r7, #120	; 0x78
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000400 	.word	0x48000400

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0a0      	sub	sp, #128	; 0x80
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	2254      	movs	r2, #84	; 0x54
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f005 fb33 	bl	8007640 <memset>
  if(huart->Instance==USART1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a46      	ldr	r2, [pc, #280]	; (80020f8 <HAL_UART_MspInit+0x144>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d140      	bne.n	8002066 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fc4f 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ffc:	f7ff feec 	bl	8001dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_UART_MspInit+0x148>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002004:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <HAL_UART_MspInit+0x148>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	6613      	str	r3, [r2, #96]	; 0x60
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_UART_MspInit+0x148>)
 800200e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <HAL_UART_MspInit+0x148>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	4a37      	ldr	r2, [pc, #220]	; (80020fc <HAL_UART_MspInit+0x148>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_UART_MspInit+0x148>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002030:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002034:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002042:	2307      	movs	r3, #7
 8002044:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002050:	f001 fe0e 	bl	8003c70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2025      	movs	r0, #37	; 0x25
 800205a:	f001 fd54 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800205e:	2025      	movs	r0, #37	; 0x25
 8002060:	f001 fd6d 	bl	8003b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002064:	e043      	b.n	80020ee <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a25      	ldr	r2, [pc, #148]	; (8002100 <HAL_UART_MspInit+0x14c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d13e      	bne.n	80020ee <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002070:	2302      	movs	r3, #2
 8002072:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002074:	2300      	movs	r3, #0
 8002076:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fc09 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002088:	f7ff fea6 	bl	8001dd8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_UART_MspInit+0x148>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_UART_MspInit+0x148>)
 8002092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_UART_MspInit+0x148>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_UART_MspInit+0x148>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_UART_MspInit+0x148>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_UART_MspInit+0x148>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020bc:	230c      	movs	r3, #12
 80020be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020cc:	2307      	movs	r3, #7
 80020ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020d4:	4619      	mov	r1, r3
 80020d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020da:	f001 fdc9 	bl	8003c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2026      	movs	r0, #38	; 0x26
 80020e4:	f001 fd0f 	bl	8003b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020e8:	2026      	movs	r0, #38	; 0x26
 80020ea:	f001 fd28 	bl	8003b3e <HAL_NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3780      	adds	r7, #128	; 0x80
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40021000 	.word	0x40021000
 8002100:	40004400 	.word	0x40004400

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <NMI_Handler+0x4>

0800210a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <HardFault_Handler+0x4>

08002110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler+0x4>

08002116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <UsageFault_Handler+0x4>

08002122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002150:	f000 f976 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <ADC1_IRQHandler+0x10>)
 800215e:	f000 fd97 	bl	8002c90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200005a0 	.word	0x200005a0

0800216c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <USART1_IRQHandler+0x10>)
 8002172:	f003 ff99 	bl	80060a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000290 	.word	0x20000290

08002180 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <USART2_IRQHandler+0x10>)
 8002186:	f003 ff8f 	bl	80060a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000314 	.word	0x20000314

08002194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return 1;
 8002198:	2301      	movs	r3, #1
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_kill>:

int _kill(int pid, int sig)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ae:	f005 f9f7 	bl	80075a0 <__errno>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2216      	movs	r2, #22
 80021b6:	601a      	str	r2, [r3, #0]
  return -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_exit>:

void _exit (int status)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ffe7 	bl	80021a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021d6:	e7fe      	b.n	80021d6 <_exit+0x12>

080021d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e00a      	b.n	8002200 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ea:	f3af 8000 	nop.w
 80021ee:	4601      	mov	r1, r0
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	60ba      	str	r2, [r7, #8]
 80021f6:	b2ca      	uxtb	r2, r1
 80021f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbf0      	blt.n	80021ea <_read+0x12>
  }

  return len;
 8002208:	687b      	ldr	r3, [r7, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e009      	b.n	8002238 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60ba      	str	r2, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbf1      	blt.n	8002224 <_write+0x12>
  }
  return len;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_close>:

int _close(int file)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002272:	605a      	str	r2, [r3, #4]
  return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_isatty>:

int _isatty(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e4:	f005 f95c 	bl	80075a0 <__errno>
 80022e8:	4603      	mov	r3, r0
 80022ea:	220c      	movs	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20010000 	.word	0x20010000
 8002314:	00000400 	.word	0x00000400
 8002318:	20000658 	.word	0x20000658
 800231c:	20000670 	.word	0x20000670

08002320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <SystemInit+0x20>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <SystemInit+0x20>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800237c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002348:	f7ff ffea 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <LoopForever+0x6>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	; (8002384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <LoopForever+0xe>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	; (8002390 <LoopForever+0x16>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002372:	f005 f91b 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002376:	f7ff fbdb 	bl	8001b30 <main>

0800237a <LoopForever>:

LoopForever:
    b LoopForever
 800237a:	e7fe      	b.n	800237a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800237c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002388:	0800b174 	.word	0x0800b174
  ldr r2, =_sbss
 800238c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002390:	20000670 	.word	0x20000670

08002394 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <CAN1_RX0_IRQHandler>

08002396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f001 fba5 	bl	8003af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f80e 	bl	80023c8 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	e001      	b.n	80023bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b8:	f7ff fd14 	bl	8001de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_InitTick+0x6c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d023      	beq.n	8002424 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_InitTick+0x70>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_InitTick+0x6c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 fbb1 	bl	8003b5a <HAL_SYSTICK_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b0f      	cmp	r3, #15
 8002402:	d809      	bhi.n	8002418 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002404:	2200      	movs	r2, #0
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f001 fb7b 	bl	8003b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <HAL_InitTick+0x74>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e007      	b.n	8002428 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e004      	b.n	8002428 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e001      	b.n	8002428 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	2000065c 	.word	0x2000065c

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	2000065c 	.word	0x2000065c

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000008 	.word	0x20000008

080024c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <LL_ADC_SetOffset+0x44>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	4313      	orrs	r3, r2
 8002560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002568:	bf00      	nop
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	03fff000 	.word	0x03fff000

08002578 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	461a      	mov	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3360      	adds	r3, #96	; 0x60
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3330      	adds	r3, #48	; 0x30
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	4413      	add	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	211f      	movs	r1, #31
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	0e9b      	lsrs	r3, r3, #26
 8002638:	f003 011f 	and.w	r1, r3, #31
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	431a      	orrs	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800267e:	b480      	push	{r7}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3314      	adds	r3, #20
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0e5b      	lsrs	r3, r3, #25
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	4413      	add	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	0d1b      	lsrs	r3, r3, #20
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2107      	movs	r1, #7
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0d1b      	lsrs	r3, r3, #20
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	431a      	orrs	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	43db      	mvns	r3, r3
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0318 	and.w	r3, r3, #24
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026f8:	40d9      	lsrs	r1, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	400b      	ands	r3, r1
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	431a      	orrs	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	0007ffff 	.word	0x0007ffff

0800271c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800272c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6093      	str	r3, [r2, #8]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002754:	d101      	bne.n	800275a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002778:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800277c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a4:	d101      	bne.n	80027aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_IsEnabled+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_IsEnabled+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002816:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800281a:	f043 0204 	orr.w	r2, r3, #4
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b04      	cmp	r3, #4
 8002840:	d101      	bne.n	8002846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d101      	bne.n	800286c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e12c      	b.n	8002af0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fac1 	bl	8001e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff3f 	bl	8002740 <LL_ADC_IsDeepPowerDownEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff25 	bl	800271c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff5a 	bl	8002790 <LL_ADC_IsInternalRegulatorEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d115      	bne.n	800290e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff3e 	bl	8002768 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ec:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <HAL_ADC_Init+0x27c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	099b      	lsrs	r3, r3, #6
 80028f2:	4a82      	ldr	r2, [pc, #520]	; (8002afc <HAL_ADC_Init+0x280>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	3301      	adds	r3, #1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002900:	e002      	b.n	8002908 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3b01      	subs	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f9      	bne.n	8002902 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff3c 	bl	8002790 <LL_ADC_IsInternalRegulatorEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f043 0210 	orr.w	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f043 0201 	orr.w	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff75 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 8002944:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 80c5 	bne.w	8002ade <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 80c1 	bne.w	8002ade <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002964:	f043 0202 	orr.w	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff35 	bl	80027e0 <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800297c:	4860      	ldr	r0, [pc, #384]	; (8002b00 <HAL_ADC_Init+0x284>)
 800297e:	f7ff ff2f 	bl	80027e0 <LL_ADC_IsEnabled>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	485d      	ldr	r0, [pc, #372]	; (8002b04 <HAL_ADC_Init+0x288>)
 8002990:	f7ff fd9a 	bl	80024c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7e5b      	ldrb	r3, [r3, #25]
 8002998:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800299e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	3b01      	subs	r3, #1
 80029c8:	045b      	lsls	r3, r3, #17
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	4b45      	ldr	r3, [pc, #276]	; (8002b08 <HAL_ADC_Init+0x28c>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff12 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 8002a0a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff1f 	bl	8002854 <LL_ADC_INJ_IsConversionOngoing>
 8002a16:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d13d      	bne.n	8002a9a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d13a      	bne.n	8002a9a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a28:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a30:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a40:	f023 0302 	bic.w	r3, r3, #2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	69b9      	ldr	r1, [r7, #24]
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d118      	bne.n	8002a8a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a62:	f023 0304 	bic.w	r3, r3, #4
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a74:	4311      	orrs	r1, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	e007      	b.n	8002a9a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10c      	bne.n	8002abc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f023 010f 	bic.w	r1, r3, #15
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aba:	e007      	b.n	8002acc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 020f 	bic.w	r2, r2, #15
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f023 0303 	bic.w	r3, r3, #3
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
 8002adc:	e007      	b.n	8002aee <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aee:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20000000 	.word	0x20000000
 8002afc:	053e2d63 	.word	0x053e2d63
 8002b00:	50040000 	.word	0x50040000
 8002b04:	50040300 	.word	0x50040300
 8002b08:	fff0c007 	.word	0xfff0c007

08002b0c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fe88 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 80a1 	bne.w	8002c68 <HAL_ADC_Start_IT+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_Start_IT+0x28>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e09c      	b.n	8002c6e <HAL_ADC_Start_IT+0x162>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fe4f 	bl	80037e0 <ADC_Enable>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 8088 	bne.w	8002c5e <HAL_ADC_Start_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	f023 0206 	bic.w	r2, r3, #6
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	659a      	str	r2, [r3, #88]	; 0x58
 8002b7a:	e002      	b.n	8002b82 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	221c      	movs	r2, #28
 8002b88:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 021c 	bic.w	r2, r2, #28
 8002ba0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d108      	bne.n	8002bbc <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0208 	orr.w	r2, r2, #8
 8002bb8:	605a      	str	r2, [r3, #4]
          break;
 8002bba:	e008      	b.n	8002bce <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0204 	orr.w	r2, r2, #4
 8002bca:	605a      	str	r2, [r3, #4]
          break;
 8002bcc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0210 	orr.w	r2, r2, #16
 8002be4:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d02d      	beq.n	8002c50 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d110      	bne.n	8002c2e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0220 	bic.w	r2, r2, #32
 8002c1a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2a:	605a      	str	r2, [r3, #4]
            break;
 8002c2c:	e011      	b.n	8002c52 <HAL_ADC_Start_IT+0x146>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	605a      	str	r2, [r3, #4]
            break;
 8002c4e:	e000      	b.n	8002c52 <HAL_ADC_Start_IT+0x146>
        }
      }
 8002c50:	bf00      	nop

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fdd5 	bl	8002806 <LL_ADC_REG_StartConversion>
 8002c5c:	e006      	b.n	8002c6c <HAL_ADC_Start_IT+0x160>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c66:	e001      	b.n	8002c6c <HAL_ADC_Start_IT+0x160>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d017      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x56>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fe2f 	bl	800393c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x6a>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05e      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d059      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fc55 	bl	80025da <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d03e      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d135      	bne.n	8002db4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d12e      	bne.n	8002db4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fd67 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11a      	bne.n	8002d9c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 020c 	bic.w	r2, r2, #12
 8002d74:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d112      	bne.n	8002db4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
 8002d9a:	e00b      	b.n	8002db4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f043 0210 	orr.w	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fe f909 	bl	8000fcc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_IRQHandler+0x146>
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d072      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d06d      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fc26 	bl	8002658 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e0c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fbe1 	bl	80025da <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e18:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d047      	beq.n	8002eb8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_ADC_IRQHandler+0x1b2>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03f      	beq.n	8002eb8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d13a      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d133      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d12e      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fcf8 	bl	8002854 <LL_ADC_INJ_IsConversionOngoing>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11a      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e78:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d112      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e9e:	e00b      	b.n	8002eb8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0210 	orr.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fd17 	bl	80038ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2260      	movs	r2, #96	; 0x60
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d011      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x264>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f886 	bl	8002ff8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d012      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x294>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fcfd 	bl	8003914 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x2c4>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fcef 	bl	8003928 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d02a      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x324>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d025      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002f70:	2301      	movs	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e008      	b.n	8002f88 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002f84:	2301      	movs	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10e      	bne.n	8002fac <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f830 	bl	800300c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <HAL_ADC_IRQHandler+0x360>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f043 0208 	orr.w	r2, r3, #8
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fc88 	bl	8003900 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0b6      	sub	sp, #216	; 0xd8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x22>
 800303e:	2302      	movs	r3, #2
 8003040:	e3b9      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x796>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fbed 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 839e 	bne.w	8003798 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b05      	cmp	r3, #5
 8003062:	d824      	bhi.n	80030ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	3b02      	subs	r3, #2
 800306a:	2b03      	cmp	r3, #3
 800306c:	d81b      	bhi.n	80030a6 <HAL_ADC_ConfigChannel+0x86>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <HAL_ADC_ConfigChannel+0x54>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003085 	.word	0x08003085
 8003078:	0800308d 	.word	0x0800308d
 800307c:	08003095 	.word	0x08003095
 8003080:	0800309d 	.word	0x0800309d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	220c      	movs	r2, #12
 8003088:	605a      	str	r2, [r3, #4]
          break;
 800308a:	e011      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2212      	movs	r2, #18
 8003090:	605a      	str	r2, [r3, #4]
          break;
 8003092:	e00d      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2218      	movs	r2, #24
 8003098:	605a      	str	r2, [r3, #4]
          break;
 800309a:	e009      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a2:	605a      	str	r2, [r3, #4]
          break;
 80030a4:	e004      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2206      	movs	r2, #6
 80030aa:	605a      	str	r2, [r3, #4]
          break;
 80030ac:	e000      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80030ae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	f7ff fa9f 	bl	8002600 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fbb1 	bl	800282e <LL_ADC_REG_IsConversionOngoing>
 80030cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fbbd 	bl	8002854 <LL_ADC_INJ_IsConversionOngoing>
 80030da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 81a6 	bne.w	8003434 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 81a1 	bne.w	8003434 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	461a      	mov	r2, r3
 8003100:	f7ff fabd 	bl	800267e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b04      	cmp	r3, #4
 8003124:	d00a      	beq.n	800313c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6919      	ldr	r1, [r3, #16]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003136:	f7ff f9fb 	bl	8002530 <LL_ADC_SetOffset>
 800313a:	e17b      	b.n	8003434 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fa18 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003148:	4603      	mov	r3, r0
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x148>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fa0d 	bl	8002578 <LL_ADC_GetOffsetChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	0e9b      	lsrs	r3, r3, #26
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	e01e      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x186>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fa02 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003174:	4603      	mov	r3, r0
 8003176:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800318a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800318e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e004      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800319a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d105      	bne.n	80031be <HAL_ADC_ConfigChannel+0x19e>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0e9b      	lsrs	r3, r3, #26
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	e018      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x1d0>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80031e2:	2320      	movs	r3, #32
 80031e4:	e004      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80031e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d106      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff f9d1 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff f9b5 	bl	8002578 <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_ADC_ConfigChannel+0x20e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f9aa 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	0e9b      	lsrs	r3, r3, #26
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	e01e      	b.n	800326c <HAL_ADC_ConfigChannel+0x24c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f99f 	bl	8002578 <LL_ADC_GetOffsetChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800324c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e004      	b.n	800326a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x264>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0e9b      	lsrs	r3, r3, #26
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	e018      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x296>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003298:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800329c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e004      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80032ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f96e 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff f952 	bl	8002578 <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x2d4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f947 	bl	8002578 <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	f003 021f 	and.w	r2, r3, #31
 80032f2:	e01e      	b.n	8003332 <HAL_ADC_ConfigChannel+0x312>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f93c 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003312:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800331a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e004      	b.n	8003330 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_ADC_ConfigChannel+0x32a>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0e9b      	lsrs	r3, r3, #26
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	e016      	b.n	8003378 <HAL_ADC_ConfigChannel+0x358>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800335c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800335e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003362:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800336a:	2320      	movs	r3, #32
 800336c:	e004      	b.n	8003378 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800336e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003378:	429a      	cmp	r2, r3
 800337a:	d106      	bne.n	800338a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2200      	movs	r2, #0
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff f90d 	bl	80025a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2103      	movs	r1, #3
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f8f1 	bl	8002578 <LL_ADC_GetOffsetChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x396>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2103      	movs	r1, #3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f8e6 	bl	8002578 <LL_ADC_GetOffsetChannel>
 80033ac:	4603      	mov	r3, r0
 80033ae:	0e9b      	lsrs	r3, r3, #26
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	e017      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x3c6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2103      	movs	r1, #3
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff f8db 	bl	8002578 <LL_ADC_GetOffsetChannel>
 80033c2:	4603      	mov	r3, r0
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80033d8:	2320      	movs	r3, #32
 80033da:	e003      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80033dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x3de>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	e011      	b.n	8003422 <HAL_ADC_ConfigChannel+0x402>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800340c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003416:	2320      	movs	r3, #32
 8003418:	e003      	b.n	8003422 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003422:	429a      	cmp	r2, r3
 8003424:	d106      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	2103      	movs	r1, #3
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f8b8 	bl	80025a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f9d1 	bl	80027e0 <LL_ADC_IsEnabled>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 813f 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	461a      	mov	r2, r3
 8003454:	f7ff f93e 	bl	80026d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a8e      	ldr	r2, [pc, #568]	; (8003698 <HAL_ADC_ConfigChannel+0x678>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f040 8130 	bne.w	80036c4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_ADC_ConfigChannel+0x46c>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2b09      	cmp	r3, #9
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e019      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x4a0>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800349a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800349e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80034a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2b09      	cmp	r3, #9
 80034b8:	bf94      	ite	ls
 80034ba:	2301      	movls	r3, #1
 80034bc:	2300      	movhi	r3, #0
 80034be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d079      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d107      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x4c0>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0e9b      	lsrs	r3, r3, #26
 80034d6:	3301      	adds	r3, #1
 80034d8:	069b      	lsls	r3, r3, #26
 80034da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034de:	e015      	b.n	800350c <HAL_ADC_ConfigChannel+0x4ec>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80034f8:	2320      	movs	r3, #32
 80034fa:	e003      	b.n	8003504 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80034fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3301      	adds	r3, #1
 8003506:	069b      	lsls	r3, r3, #26
 8003508:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_ADC_ConfigChannel+0x50c>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	e017      	b.n	800355c <HAL_ADC_ConfigChannel+0x53c>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800353a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e003      	b.n	8003550 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	2101      	movs	r1, #1
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	ea42 0103 	orr.w	r1, r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x562>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	3301      	adds	r3, #1
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	051b      	lsls	r3, r3, #20
 8003580:	e018      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x594>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800359a:	2320      	movs	r3, #32
 800359c:	e003      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800359e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b4:	430b      	orrs	r3, r1
 80035b6:	e080      	b.n	80036ba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x5b4>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0e9b      	lsrs	r3, r3, #26
 80035ca:	3301      	adds	r3, #1
 80035cc:	069b      	lsls	r3, r3, #26
 80035ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d2:	e015      	b.n	8003600 <HAL_ADC_ConfigChannel+0x5e0>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80035ec:	2320      	movs	r3, #32
 80035ee:	e003      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	069b      	lsls	r3, r3, #26
 80035fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x600>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	3301      	adds	r3, #1
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	e017      	b.n	8003650 <HAL_ADC_ConfigChannel+0x630>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	61fb      	str	r3, [r7, #28]
  return result;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003638:	2320      	movs	r3, #32
 800363a:	e003      	b.n	8003644 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	ea42 0103 	orr.w	r1, r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_ADC_ConfigChannel+0x65c>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0e9b      	lsrs	r3, r3, #26
 8003666:	3301      	adds	r3, #1
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	3b1e      	subs	r3, #30
 8003674:	051b      	lsls	r3, r3, #20
 8003676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800367a:	e01d      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x698>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	613b      	str	r3, [r7, #16]
  return result;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e005      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x684>
 8003698:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	f003 021f 	and.w	r2, r3, #31
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	3b1e      	subs	r3, #30
 80036b2:	051b      	lsls	r3, r3, #20
 80036b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b8:	430b      	orrs	r3, r1
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6892      	ldr	r2, [r2, #8]
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fe ffdd 	bl	800267e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_ADC_ConfigChannel+0x7a0>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d06c      	beq.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036d0:	483c      	ldr	r0, [pc, #240]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 80036d2:	f7fe ff1f 	bl	8002514 <LL_ADC_GetCommonPathInternalCh>
 80036d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_ADC_ConfigChannel+0x7a8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d127      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d121      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a35      	ldr	r2, [pc, #212]	; (80037cc <HAL_ADC_ConfigChannel+0x7ac>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d157      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003702:	4619      	mov	r1, r3
 8003704:	482f      	ldr	r0, [pc, #188]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003706:	f7fe fef2 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800370a:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <HAL_ADC_ConfigChannel+0x7b0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003724:	e002      	b.n	800372c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3b01      	subs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f9      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003732:	e03a      	b.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a27      	ldr	r2, [pc, #156]	; (80037d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d113      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x746>
 800373e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_ADC_ConfigChannel+0x7ac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d12a      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375c:	4619      	mov	r1, r3
 800375e:	4819      	ldr	r0, [pc, #100]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003760:	f7fe fec5 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003764:	e021      	b.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_ADC_ConfigChannel+0x7bc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d11c      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a12      	ldr	r2, [pc, #72]	; (80037cc <HAL_ADC_ConfigChannel+0x7ac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d111      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800378a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800378e:	4619      	mov	r1, r3
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003792:	f7fe feac 	bl	80024ee <LL_ADC_SetCommonPathInternalCh>
 8003796:	e008      	b.n	80037aa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	37d8      	adds	r7, #216	; 0xd8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	80080000 	.word	0x80080000
 80037c4:	50040300 	.word	0x50040300
 80037c8:	c7520000 	.word	0xc7520000
 80037cc:	50040000 	.word	0x50040000
 80037d0:	20000000 	.word	0x20000000
 80037d4:	053e2d63 	.word	0x053e2d63
 80037d8:	cb840000 	.word	0xcb840000
 80037dc:	80000001 	.word	0x80000001

080037e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fff5 	bl	80027e0 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d169      	bne.n	80038d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	4b36      	ldr	r3, [pc, #216]	; (80038dc <ADC_Enable+0xfc>)
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f043 0210 	orr.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	f043 0201 	orr.w	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e055      	b.n	80038d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe ffc4 	bl	80027b8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003830:	482b      	ldr	r0, [pc, #172]	; (80038e0 <ADC_Enable+0x100>)
 8003832:	f7fe fe6f 	bl	8002514 <LL_ADC_GetCommonPathInternalCh>
 8003836:	4603      	mov	r3, r0
 8003838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <ADC_Enable+0x104>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <ADC_Enable+0x108>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800385a:	e002      	b.n	8003862 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3b01      	subs	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f9      	bne.n	800385c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003868:	f7fe fdfe 	bl	8002468 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800386e:	e028      	b.n	80038c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe ffb3 	bl	80027e0 <LL_ADC_IsEnabled>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe ff97 	bl	80027b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800388a:	f7fe fded 	bl	8002468 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d914      	bls.n	80038c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d00d      	beq.n	80038c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f043 0210 	orr.w	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f043 0201 	orr.w	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e007      	b.n	80038d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d1cf      	bne.n	8003870 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	8000003f 	.word	0x8000003f
 80038e0:	50040300 	.word	0x50040300
 80038e4:	20000000 	.word	0x20000000
 80038e8:	053e2d63 	.word	0x053e2d63

080038ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <__NVIC_SetPriorityGrouping+0x44>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800396c:	4013      	ands	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800397c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003982:	4a04      	ldr	r2, [pc, #16]	; (8003994 <__NVIC_SetPriorityGrouping+0x44>)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	60d3      	str	r3, [r2, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <__NVIC_GetPriorityGrouping+0x18>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	f003 0307 	and.w	r3, r3, #7
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	db0b      	blt.n	80039de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	f003 021f 	and.w	r2, r3, #31
 80039cc:	4907      	ldr	r1, [pc, #28]	; (80039ec <__NVIC_EnableIRQ+0x38>)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2001      	movs	r0, #1
 80039d6:	fa00 f202 	lsl.w	r2, r0, r2
 80039da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e100 	.word	0xe000e100

080039f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db0a      	blt.n	8003a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	490c      	ldr	r1, [pc, #48]	; (8003a3c <__NVIC_SetPriority+0x4c>)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	440b      	add	r3, r1
 8003a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a18:	e00a      	b.n	8003a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <__NVIC_SetPriority+0x50>)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	3b04      	subs	r3, #4
 8003a28:	0112      	lsls	r2, r2, #4
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	761a      	strb	r2, [r3, #24]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000e100 	.word	0xe000e100
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f1c3 0307 	rsb	r3, r3, #7
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	bf28      	it	cs
 8003a62:	2304      	movcs	r3, #4
 8003a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d902      	bls.n	8003a74 <NVIC_EncodePriority+0x30>
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3b03      	subs	r3, #3
 8003a72:	e000      	b.n	8003a76 <NVIC_EncodePriority+0x32>
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a78:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	401a      	ands	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	43d9      	mvns	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	4313      	orrs	r3, r2
         );
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3724      	adds	r7, #36	; 0x24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003abc:	d301      	bcc.n	8003ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00f      	b.n	8003ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <SysTick_Config+0x40>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aca:	210f      	movs	r1, #15
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	f7ff ff8e 	bl	80039f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <SysTick_Config+0x40>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <SysTick_Config+0x40>)
 8003adc:	2207      	movs	r2, #7
 8003ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	e000e010 	.word	0xe000e010

08003af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff29 	bl	8003950 <__NVIC_SetPriorityGrouping>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b18:	f7ff ff3e 	bl	8003998 <__NVIC_GetPriorityGrouping>
 8003b1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff ff8e 	bl	8003a44 <NVIC_EncodePriority>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff5d 	bl	80039f0 <__NVIC_SetPriority>
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff31 	bl	80039b4 <__NVIC_EnableIRQ>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ffa2 	bl	8003aac <SysTick_Config>
 8003b68:	4603      	mov	r3, r0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d008      	beq.n	8003b9c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e022      	b.n	8003be2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020e 	bic.w	r2, r2, #14
 8003baa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f003 021c 	and.w	r2, r3, #28
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2101      	movs	r1, #1
 8003bca:	fa01 f202 	lsl.w	r2, r1, r2
 8003bce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d005      	beq.n	8003c12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	e029      	b.n	8003c66 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 020e 	bic.w	r2, r2, #14
 8003c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f003 021c 	and.w	r2, r3, #28
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2101      	movs	r1, #1
 8003c40:	fa01 f202 	lsl.w	r2, r1, r2
 8003c44:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
    }
  }
  return status;
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7e:	e148      	b.n	8003f12 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 813a 	beq.w	8003f0c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d005      	beq.n	8003cb0 <HAL_GPIO_Init+0x40>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d130      	bne.n	8003d12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0201 	and.w	r2, r3, #1
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d017      	beq.n	8003d4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d123      	bne.n	8003da2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	08da      	lsrs	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3208      	adds	r2, #8
 8003d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	220f      	movs	r2, #15
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	08da      	lsrs	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3208      	adds	r2, #8
 8003d9c:	6939      	ldr	r1, [r7, #16]
 8003d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0203 	and.w	r2, r3, #3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8094 	beq.w	8003f0c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de4:	4b52      	ldr	r3, [pc, #328]	; (8003f30 <HAL_GPIO_Init+0x2c0>)
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	4a51      	ldr	r2, [pc, #324]	; (8003f30 <HAL_GPIO_Init+0x2c0>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	6613      	str	r3, [r2, #96]	; 0x60
 8003df0:	4b4f      	ldr	r3, [pc, #316]	; (8003f30 <HAL_GPIO_Init+0x2c0>)
 8003df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dfc:	4a4d      	ldr	r2, [pc, #308]	; (8003f34 <HAL_GPIO_Init+0x2c4>)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	089b      	lsrs	r3, r3, #2
 8003e02:	3302      	adds	r3, #2
 8003e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	220f      	movs	r2, #15
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e26:	d00d      	beq.n	8003e44 <HAL_GPIO_Init+0x1d4>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a43      	ldr	r2, [pc, #268]	; (8003f38 <HAL_GPIO_Init+0x2c8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d007      	beq.n	8003e40 <HAL_GPIO_Init+0x1d0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a42      	ldr	r2, [pc, #264]	; (8003f3c <HAL_GPIO_Init+0x2cc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <HAL_GPIO_Init+0x1cc>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e004      	b.n	8003e46 <HAL_GPIO_Init+0x1d6>
 8003e3c:	2307      	movs	r3, #7
 8003e3e:	e002      	b.n	8003e46 <HAL_GPIO_Init+0x1d6>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_GPIO_Init+0x1d6>
 8003e44:	2300      	movs	r3, #0
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	f002 0203 	and.w	r2, r2, #3
 8003e4c:	0092      	lsls	r2, r2, #2
 8003e4e:	4093      	lsls	r3, r2
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e56:	4937      	ldr	r1, [pc, #220]	; (8003f34 <HAL_GPIO_Init+0x2c4>)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e88:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eb2:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003edc:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f06:	4a0e      	ldr	r2, [pc, #56]	; (8003f40 <HAL_GPIO_Init+0x2d0>)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f47f aeaf 	bne.w	8003c80 <HAL_GPIO_Init+0x10>
  }
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40010000 	.word	0x40010000
 8003f38:	48000400 	.word	0x48000400
 8003f3c:	48000800 	.word	0x48000800
 8003f40:	40010400 	.word	0x40010400

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e081      	b.n	800405a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd ffca 	bl	8001f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d107      	bne.n	8003fbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	e006      	b.n	8003fcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d104      	bne.n	8003fde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004000:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1a      	ldr	r2, [r3, #32]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	f040 80f9 	bne.w	800427e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_I2C_Mem_Write+0x34>
 8004092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0ed      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Mem_Write+0x4e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0e6      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ba:	f7fe f9d5 	bl	8002468 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2319      	movs	r3, #25
 80040c6:	2201      	movs	r2, #1
 80040c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fac3 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0d1      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2221      	movs	r2, #33	; 0x21
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	; 0x40
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004104:	88f8      	ldrh	r0, [r7, #6]
 8004106:	893a      	ldrh	r2, [r7, #8]
 8004108:	8979      	ldrh	r1, [r7, #10]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4603      	mov	r3, r0
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f9d3 	bl	80044c0 <I2C_RequestMemoryWrite>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0a9      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2bff      	cmp	r3, #255	; 0xff
 8004134:	d90e      	bls.n	8004154 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fc2b 	bl	80049a8 <I2C_TransferConfig>
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	b2da      	uxtb	r2, r3
 8004164:	8979      	ldrh	r1, [r7, #10]
 8004166:	2300      	movs	r3, #0
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fc1a 	bl	80049a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 faad 	bl	80046d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e07b      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d034      	beq.n	800422c <HAL_I2C_Mem_Write+0x1c8>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d130      	bne.n	800422c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fa3f 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e04d      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2bff      	cmp	r3, #255	; 0xff
 80041ec:	d90e      	bls.n	800420c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	22ff      	movs	r2, #255	; 0xff
 80041f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	8979      	ldrh	r1, [r7, #10]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fbcf 	bl	80049a8 <I2C_TransferConfig>
 800420a:	e00f      	b.n	800422c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	b2da      	uxtb	r2, r3
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	2300      	movs	r3, #0
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fbbe 	bl	80049a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d19e      	bne.n	8004174 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fa8c 	bl	8004758 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e01a      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2220      	movs	r2, #32
 8004250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_I2C_Mem_Write+0x224>)
 800425e:	400b      	ands	r3, r1
 8004260:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	fe00e800 	.word	0xfe00e800

0800428c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	461a      	mov	r2, r3
 800429a:	4603      	mov	r3, r0
 800429c:	817b      	strh	r3, [r7, #10]
 800429e:	460b      	mov	r3, r1
 80042a0:	813b      	strh	r3, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	f040 80fd 	bne.w	80044ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x34>
 80042ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d105      	bne.n	80042cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0f1      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Mem_Read+0x4e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0ea      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042e2:	f7fe f8c1 	bl	8002468 <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2319      	movs	r3, #25
 80042ee:	2201      	movs	r2, #1
 80042f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f9af 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0d5      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2222      	movs	r2, #34	; 0x22
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2240      	movs	r2, #64	; 0x40
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432c:	88f8      	ldrh	r0, [r7, #6]
 800432e:	893a      	ldrh	r2, [r7, #8]
 8004330:	8979      	ldrh	r1, [r7, #10]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	4603      	mov	r3, r0
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f913 	bl	8004568 <I2C_RequestMemoryRead>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0ad      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2bff      	cmp	r3, #255	; 0xff
 800435c:	d90e      	bls.n	800437c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	22ff      	movs	r2, #255	; 0xff
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	b2da      	uxtb	r2, r3
 800436a:	8979      	ldrh	r1, [r7, #10]
 800436c:	4b52      	ldr	r3, [pc, #328]	; (80044b8 <HAL_I2C_Mem_Read+0x22c>)
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fb17 	bl	80049a8 <I2C_TransferConfig>
 800437a:	e00f      	b.n	800439c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	b2da      	uxtb	r2, r3
 800438c:	8979      	ldrh	r1, [r7, #10]
 800438e:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_I2C_Mem_Read+0x22c>)
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fb06 	bl	80049a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	2200      	movs	r2, #0
 80043a4:	2104      	movs	r1, #4
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f956 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07c      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d034      	beq.n	800445c <HAL_I2C_Mem_Read+0x1d0>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d130      	bne.n	800445c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f927 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04d      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2bff      	cmp	r3, #255	; 0xff
 800441c:	d90e      	bls.n	800443c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	22ff      	movs	r2, #255	; 0xff
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	8979      	ldrh	r1, [r7, #10]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fab7 	bl	80049a8 <I2C_TransferConfig>
 800443a:	e00f      	b.n	800445c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	b2da      	uxtb	r2, r3
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 faa6 	bl	80049a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d19a      	bne.n	800439c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f974 	bl	8004758 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01a      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2220      	movs	r2, #32
 8004480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_I2C_Mem_Read+0x230>)
 800448e:	400b      	ands	r3, r1
 8004490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	80002400 	.word	0x80002400
 80044bc:	fe00e800 	.word	0xfe00e800

080044c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	817b      	strh	r3, [r7, #10]
 80044d2:	460b      	mov	r3, r1
 80044d4:	813b      	strh	r3, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	8979      	ldrh	r1, [r7, #10]
 80044e0:	4b20      	ldr	r3, [pc, #128]	; (8004564 <I2C_RequestMemoryWrite+0xa4>)
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa5d 	bl	80049a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f8f0 	bl	80046d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e02c      	b.n	800455c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004508:	893b      	ldrh	r3, [r7, #8]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
 8004512:	e015      	b.n	8004540 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	b29b      	uxth	r3, r3
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8d6 	bl	80046d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e012      	b.n	800455c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004536:	893b      	ldrh	r3, [r7, #8]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2200      	movs	r2, #0
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f884 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	80002000 	.word	0x80002000

08004568 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4603      	mov	r3, r0
 8004578:	817b      	strh	r3, [r7, #10]
 800457a:	460b      	mov	r3, r1
 800457c:	813b      	strh	r3, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	8979      	ldrh	r1, [r7, #10]
 8004588:	4b20      	ldr	r3, [pc, #128]	; (800460c <I2C_RequestMemoryRead+0xa4>)
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2300      	movs	r3, #0
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fa0a 	bl	80049a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f89d 	bl	80046d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e02c      	b.n	8004602 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ae:	893b      	ldrh	r3, [r7, #8]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
 80045b8:	e015      	b.n	80045e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045ba:	893b      	ldrh	r3, [r7, #8]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f883 	bl	80046d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e012      	b.n	8004602 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045dc:	893b      	ldrh	r3, [r7, #8]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2140      	movs	r1, #64	; 0x40
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f831 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	80002000 	.word	0x80002000

08004610 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d103      	bne.n	800462e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d007      	beq.n	800464c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	619a      	str	r2, [r3, #24]
  }
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004668:	e022      	b.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d01e      	beq.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fd fef9 	bl	8002468 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d113      	bne.n	80046b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e00f      	b.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4013      	ands	r3, r2
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	429a      	cmp	r2, r3
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d0cd      	beq.n	800466a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046e4:	e02c      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f870 	bl	80047d0 <I2C_IsErrorOccurred>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e02a      	b.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d01e      	beq.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004702:	f7fd feb1 	bl	8002468 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	d302      	bcc.n	8004718 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d113      	bne.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e007      	b.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d1cb      	bne.n	80046e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004764:	e028      	b.n	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f830 	bl	80047d0 <I2C_IsErrorOccurred>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e026      	b.n	80047c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477a:	f7fd fe75 	bl	8002468 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d302      	bcc.n	8004790 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d113      	bne.n	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e007      	b.n	80047c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d1cf      	bne.n	8004766 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d075      	beq.n	80048e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2210      	movs	r2, #16
 8004802:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004804:	e056      	b.n	80048b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d052      	beq.n	80048b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fd fe2b 	bl	8002468 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <I2C_IsErrorOccurred+0x54>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d147      	bne.n	80048b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004836:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004846:	d12e      	bne.n	80048a6 <I2C_IsErrorOccurred+0xd6>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800484e:	d02a      	beq.n	80048a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d027      	beq.n	80048a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004864:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004866:	f7fd fdff 	bl	8002468 <HAL_GetTick>
 800486a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800486c:	e01b      	b.n	80048a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800486e:	f7fd fdfb 	bl	8002468 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b19      	cmp	r3, #25
 800487a:	d914      	bls.n	80048a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d1dc      	bne.n	800486e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d003      	beq.n	80048ca <I2C_IsErrorOccurred+0xfa>
 80048c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d09d      	beq.n	8004806 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2220      	movs	r2, #32
 80048d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	f043 0308 	orr.w	r3, r3, #8
 8004922:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800492c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800494e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01c      	beq.n	8004998 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff fe56 	bl	8004610 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <I2C_IsErrorOccurred+0x1d4>)
 8004970:	400b      	ands	r3, r1
 8004972:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	431a      	orrs	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	fe00e800 	.word	0xfe00e800

080049a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	817b      	strh	r3, [r7, #10]
 80049b6:	4613      	mov	r3, r2
 80049b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049c0:	7a7b      	ldrb	r3, [r7, #9]
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	0d5b      	lsrs	r3, r3, #21
 80049e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <I2C_TransferConfig+0x60>)
 80049e8:	430b      	orrs	r3, r1
 80049ea:	43db      	mvns	r3, r3
 80049ec:	ea02 0103 	and.w	r1, r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	03ff63ff 	.word	0x03ff63ff

08004a0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d138      	bne.n	8004a94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e032      	b.n	8004a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d139      	bne.n	8004b2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e033      	b.n	8004b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2224      	movs	r2, #36	; 0x24
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004af4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e000      	b.n	8004b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	6013      	str	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40007000 	.word	0x40007000

08004b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40007000 	.word	0x40007000

08004b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b86:	d130      	bne.n	8004bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b88:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b94:	d038      	beq.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2232      	movs	r2, #50	; 0x32
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	0c9b      	lsrs	r3, r3, #18
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bbc:	e002      	b.n	8004bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd0:	d102      	bne.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f2      	bne.n	8004bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d110      	bne.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e00f      	b.n	8004c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf6:	d007      	beq.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c00:	4a05      	ldr	r2, [pc, #20]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40007000 	.word	0x40007000
 8004c1c:	20000000 	.word	0x20000000
 8004c20:	431bde83 	.word	0x431bde83

08004c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f000 bc02 	b.w	800543c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c38:	4b96      	ldr	r3, [pc, #600]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c42:	4b94      	ldr	r3, [pc, #592]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80e4 	beq.w	8004e22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4c>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	f040 808b 	bne.w	8004d7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	f040 8087 	bne.w	8004d7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c70:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_OscConfig+0x64>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e3d9      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x7e>
 8004c98:	4b7e      	ldr	r3, [pc, #504]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca0:	e005      	b.n	8004cae <HAL_RCC_OscConfig+0x8a>
 8004ca2:	4b7c      	ldr	r3, [pc, #496]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d223      	bcs.n	8004cfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fd8c 	bl	80057d4 <RCC_SetFlashLatencyFromMSIRange>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e3ba      	b.n	800543c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc6:	4b73      	ldr	r3, [pc, #460]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a72      	ldr	r2, [pc, #456]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ccc:	f043 0308 	orr.w	r3, r3, #8
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	4b70      	ldr	r3, [pc, #448]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	496d      	ldr	r1, [pc, #436]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce4:	4b6b      	ldr	r3, [pc, #428]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	4968      	ldr	r1, [pc, #416]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]
 8004cf8:	e025      	b.n	8004d46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cfa:	4b66      	ldr	r3, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a65      	ldr	r2, [pc, #404]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d00:	f043 0308 	orr.w	r3, r3, #8
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4960      	ldr	r1, [pc, #384]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d18:	4b5e      	ldr	r3, [pc, #376]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	495b      	ldr	r1, [pc, #364]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fd4c 	bl	80057d4 <RCC_SetFlashLatencyFromMSIRange>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e37a      	b.n	800543c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d46:	f000 fc81 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	4b51      	ldr	r3, [pc, #324]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	4950      	ldr	r1, [pc, #320]	; (8004e98 <HAL_RCC_OscConfig+0x274>)
 8004d58:	5ccb      	ldrb	r3, [r1, r3]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	4a4e      	ldr	r2, [pc, #312]	; (8004e9c <HAL_RCC_OscConfig+0x278>)
 8004d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d66:	4b4e      	ldr	r3, [pc, #312]	; (8004ea0 <HAL_RCC_OscConfig+0x27c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd fb2c 	bl	80023c8 <HAL_InitTick>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d052      	beq.n	8004e20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	e35e      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d032      	beq.n	8004dec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d86:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a42      	ldr	r2, [pc, #264]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d92:	f7fd fb69 	bl	8002468 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d9a:	f7fd fb65 	bl	8002468 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e347      	b.n	800543c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dac:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004db8:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dbe:	f043 0308 	orr.w	r3, r3, #8
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	4930      	ldr	r1, [pc, #192]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	492b      	ldr	r1, [pc, #172]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
 8004dea:	e01a      	b.n	8004e22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a28      	ldr	r2, [pc, #160]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004df8:	f7fd fb36 	bl	8002468 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e00:	f7fd fb32 	bl	8002468 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e314      	b.n	800543c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x1dc>
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d073      	beq.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_OscConfig+0x21c>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d10e      	bne.n	8004e58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d063      	beq.n	8004f14 <HAL_RCC_OscConfig+0x2f0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d15f      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e2f1      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d106      	bne.n	8004e70 <HAL_RCC_OscConfig+0x24c>
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e025      	b.n	8004ebc <HAL_RCC_OscConfig+0x298>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e78:	d114      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x280>
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a02      	ldr	r2, [pc, #8]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e013      	b.n	8004ebc <HAL_RCC_OscConfig+0x298>
 8004e94:	40021000 	.word	0x40021000
 8004e98:	0800ad40 	.word	0x0800ad40
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	20000004 	.word	0x20000004
 8004ea4:	4ba0      	ldr	r3, [pc, #640]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a9f      	ldr	r2, [pc, #636]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b9d      	ldr	r3, [pc, #628]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a9c      	ldr	r2, [pc, #624]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fad0 	bl	8002468 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd facc 	bl	8002468 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e2ae      	b.n	800543c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ede:	4b92      	ldr	r3, [pc, #584]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x2a8>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fd fabc 	bl	8002468 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fd fab8 	bl	8002468 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e29a      	b.n	800543c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f06:	4b88      	ldr	r3, [pc, #544]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x2d0>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d060      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_OscConfig+0x310>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d119      	bne.n	8004f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d116      	bne.n	8004f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f34:	4b7c      	ldr	r3, [pc, #496]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_OscConfig+0x328>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e277      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4c:	4b76      	ldr	r3, [pc, #472]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	4973      	ldr	r1, [pc, #460]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f60:	e040      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d023      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f6a:	4b6f      	ldr	r3, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6e      	ldr	r2, [pc, #440]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fd fa77 	bl	8002468 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7e:	f7fd fa73 	bl	8002468 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e255      	b.n	800543c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f90:	4b65      	ldr	r3, [pc, #404]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9c:	4b62      	ldr	r3, [pc, #392]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	495f      	ldr	r1, [pc, #380]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	e018      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb2:	4b5d      	ldr	r3, [pc, #372]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5c      	ldr	r2, [pc, #368]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fd fa53 	bl	8002468 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fa4f 	bl	8002468 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e231      	b.n	800543c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fd8:	4b53      	ldr	r3, [pc, #332]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f0      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d03c      	beq.n	800506a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01c      	beq.n	8005032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffe:	4a4a      	ldr	r2, [pc, #296]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fd fa2e 	bl	8002468 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fd fa2a 	bl	8002468 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e20c      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ef      	beq.n	8005010 <HAL_RCC_OscConfig+0x3ec>
 8005030:	e01b      	b.n	800506a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005032:	4b3d      	ldr	r3, [pc, #244]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005038:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fd fa11 	bl	8002468 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504a:	f7fd fa0d 	bl	8002468 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e1ef      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800505c:	4b32      	ldr	r3, [pc, #200]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ef      	bne.n	800504a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80a6 	beq.w	80051c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005078:	2300      	movs	r3, #0
 800507a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10d      	bne.n	80050a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	6593      	str	r3, [r2, #88]	; 0x58
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d118      	bne.n	80050e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050bc:	f7fd f9d4 	bl	8002468 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c4:	f7fd f9d0 	bl	8002468 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e1b2      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d108      	bne.n	80050fc <HAL_RCC_OscConfig+0x4d8>
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050fa:	e029      	b.n	8005150 <HAL_RCC_OscConfig+0x52c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d115      	bne.n	8005130 <HAL_RCC_OscConfig+0x50c>
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	4a07      	ldr	r2, [pc, #28]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	4a03      	ldr	r2, [pc, #12]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005124:	e014      	b.n	8005150 <HAL_RCC_OscConfig+0x52c>
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
 8005130:	4b9a      	ldr	r3, [pc, #616]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	4a99      	ldr	r2, [pc, #612]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005140:	4b96      	ldr	r3, [pc, #600]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	4a95      	ldr	r2, [pc, #596]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d016      	beq.n	8005186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fd f986 	bl	8002468 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515e:	e00a      	b.n	8005176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005160:	f7fd f982 	bl	8002468 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	f241 3288 	movw	r2, #5000	; 0x1388
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e162      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005176:	4b89      	ldr	r3, [pc, #548]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ed      	beq.n	8005160 <HAL_RCC_OscConfig+0x53c>
 8005184:	e015      	b.n	80051b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fd f96f 	bl	8002468 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7fd f96b 	bl	8002468 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e14b      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a4:	4b7d      	ldr	r3, [pc, #500]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ed      	bne.n	800518e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b8:	4b78      	ldr	r3, [pc, #480]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	4a77      	ldr	r2, [pc, #476]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d03c      	beq.n	800524a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01c      	beq.n	8005212 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051d8:	4b70      	ldr	r3, [pc, #448]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80051da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051de:	4a6f      	ldr	r2, [pc, #444]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7fd f93e 	bl	8002468 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f0:	f7fd f93a 	bl	8002468 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e11c      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005202:	4b66      	ldr	r3, [pc, #408]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ef      	beq.n	80051f0 <HAL_RCC_OscConfig+0x5cc>
 8005210:	e01b      	b.n	800524a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005212:	4b62      	ldr	r3, [pc, #392]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005218:	4a60      	ldr	r2, [pc, #384]	; (800539c <HAL_RCC_OscConfig+0x778>)
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005222:	f7fd f921 	bl	8002468 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800522a:	f7fd f91d 	bl	8002468 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e0ff      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800523c:	4b57      	ldr	r3, [pc, #348]	; (800539c <HAL_RCC_OscConfig+0x778>)
 800523e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ef      	bne.n	800522a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80f3 	beq.w	800543a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	2b02      	cmp	r3, #2
 800525a:	f040 80c9 	bne.w	80053f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800525e:	4b4f      	ldr	r3, [pc, #316]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f003 0203 	and.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	429a      	cmp	r2, r3
 8005270:	d12c      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	3b01      	subs	r3, #1
 800527e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d123      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d11b      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d113      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	3b01      	subs	r3, #1
 80052b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d109      	bne.n	80052cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	3b01      	subs	r3, #1
 80052c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d06b      	beq.n	80053a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	d062      	beq.n	8005398 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052d2:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0ac      	b.n	800543c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052e2:	4b2e      	ldr	r3, [pc, #184]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2d      	ldr	r2, [pc, #180]	; (800539c <HAL_RCC_OscConfig+0x778>)
 80052e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052ee:	f7fd f8bb 	bl	8002468 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd f8b7 	bl	8002468 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e099      	b.n	800543c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005308:	4b24      	ldr	r3, [pc, #144]	; (800539c <HAL_RCC_OscConfig+0x778>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005314:	4b21      	ldr	r3, [pc, #132]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_RCC_OscConfig+0x77c>)
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005324:	3a01      	subs	r2, #1
 8005326:	0112      	lsls	r2, r2, #4
 8005328:	4311      	orrs	r1, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800532e:	0212      	lsls	r2, r2, #8
 8005330:	4311      	orrs	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005336:	0852      	lsrs	r2, r2, #1
 8005338:	3a01      	subs	r2, #1
 800533a:	0552      	lsls	r2, r2, #21
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005342:	0852      	lsrs	r2, r2, #1
 8005344:	3a01      	subs	r2, #1
 8005346:	0652      	lsls	r2, r2, #25
 8005348:	4311      	orrs	r1, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800534e:	06d2      	lsls	r2, r2, #27
 8005350:	430a      	orrs	r2, r1
 8005352:	4912      	ldr	r1, [pc, #72]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005354:	4313      	orrs	r3, r2
 8005356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <HAL_RCC_OscConfig+0x778>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0f      	ldr	r2, [pc, #60]	; (800539c <HAL_RCC_OscConfig+0x778>)
 800535e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005364:	4b0d      	ldr	r3, [pc, #52]	; (800539c <HAL_RCC_OscConfig+0x778>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	4a0c      	ldr	r2, [pc, #48]	; (800539c <HAL_RCC_OscConfig+0x778>)
 800536a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800536e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005370:	f7fd f87a 	bl	8002468 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005378:	f7fd f876 	bl	8002468 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e058      	b.n	800543c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538a:	4b04      	ldr	r3, [pc, #16]	; (800539c <HAL_RCC_OscConfig+0x778>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005396:	e050      	b.n	800543a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e04f      	b.n	800543c <HAL_RCC_OscConfig+0x818>
 800539c:	40021000 	.word	0x40021000
 80053a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d144      	bne.n	800543a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a23      	ldr	r2, [pc, #140]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053bc:	4b21      	ldr	r3, [pc, #132]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4a20      	ldr	r2, [pc, #128]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053c8:	f7fd f84e 	bl	8002468 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fd f84a 	bl	8002468 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e02c      	b.n	800543c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e2:	4b18      	ldr	r3, [pc, #96]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCC_OscConfig+0x7ac>
 80053ee:	e024      	b.n	800543a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	d01f      	beq.n	8005436 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f6:	4b13      	ldr	r3, [pc, #76]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a12      	ldr	r2, [pc, #72]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 80053fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005402:	f7fd f831 	bl	8002468 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540a:	f7fd f82d 	bl	8002468 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e00f      	b.n	800543c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f0      	bne.n	800540a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	4905      	ldr	r1, [pc, #20]	; (8005444 <HAL_RCC_OscConfig+0x820>)
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_RCC_OscConfig+0x824>)
 8005430:	4013      	ands	r3, r2
 8005432:	60cb      	str	r3, [r1, #12]
 8005434:	e001      	b.n	800543a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	feeefffc 	.word	0xfeeefffc

0800544c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0e7      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005460:	4b75      	ldr	r3, [pc, #468]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d910      	bls.n	8005490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b72      	ldr	r3, [pc, #456]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 0207 	bic.w	r2, r3, #7
 8005476:	4970      	ldr	r1, [pc, #448]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b6e      	ldr	r3, [pc, #440]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0cf      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	4b66      	ldr	r3, [pc, #408]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d908      	bls.n	80054be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ac:	4b63      	ldr	r3, [pc, #396]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	4960      	ldr	r1, [pc, #384]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04c      	beq.n	8005564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054d2:	4b5a      	ldr	r3, [pc, #360]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d121      	bne.n	8005522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e0a6      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d107      	bne.n	80054fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ea:	4b54      	ldr	r3, [pc, #336]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d115      	bne.n	8005522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e09a      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005502:	4b4e      	ldr	r3, [pc, #312]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e08e      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005512:	4b4a      	ldr	r3, [pc, #296]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e086      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005522:	4b46      	ldr	r3, [pc, #280]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f023 0203 	bic.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4943      	ldr	r1, [pc, #268]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005530:	4313      	orrs	r3, r2
 8005532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005534:	f7fc ff98 	bl	8002468 <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	e00a      	b.n	8005552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553c:	f7fc ff94 	bl	8002468 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e06e      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	4b3a      	ldr	r3, [pc, #232]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 020c 	and.w	r2, r3, #12
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	429a      	cmp	r2, r3
 8005562:	d1eb      	bne.n	800553c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	4b31      	ldr	r3, [pc, #196]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800557c:	429a      	cmp	r2, r3
 800557e:	d208      	bcs.n	8005592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005580:	4b2e      	ldr	r3, [pc, #184]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	492b      	ldr	r1, [pc, #172]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d210      	bcs.n	80055c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 0207 	bic.w	r2, r3, #7
 80055a8:	4923      	ldr	r1, [pc, #140]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b0:	4b21      	ldr	r3, [pc, #132]	; (8005638 <HAL_RCC_ClockConfig+0x1ec>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d001      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e036      	b.n	8005630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	4918      	ldr	r1, [pc, #96]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4910      	ldr	r1, [pc, #64]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005600:	f000 f824 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <HAL_RCC_ClockConfig+0x1f0>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	490b      	ldr	r1, [pc, #44]	; (8005640 <HAL_RCC_ClockConfig+0x1f4>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
 800561c:	4a09      	ldr	r2, [pc, #36]	; (8005644 <HAL_RCC_ClockConfig+0x1f8>)
 800561e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_RCC_ClockConfig+0x1fc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7fc fecf 	bl	80023c8 <HAL_InitTick>
 800562a:	4603      	mov	r3, r0
 800562c:	72fb      	strb	r3, [r7, #11]

  return status;
 800562e:	7afb      	ldrb	r3, [r7, #11]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40022000 	.word	0x40022000
 800563c:	40021000 	.word	0x40021000
 8005640:	0800ad40 	.word	0x0800ad40
 8005644:	20000000 	.word	0x20000000
 8005648:	20000004 	.word	0x20000004

0800564c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	; 0x24
 8005650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800565a:	4b3e      	ldr	r3, [pc, #248]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005664:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x34>
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b0c      	cmp	r3, #12
 8005678:	d121      	bne.n	80056be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d11e      	bne.n	80056be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005680:	4b34      	ldr	r3, [pc, #208]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800568c:	4b31      	ldr	r3, [pc, #196]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 800568e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e005      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800569c:	4b2d      	ldr	r3, [pc, #180]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056a8:	4a2b      	ldr	r2, [pc, #172]	; (8005758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d102      	bne.n	80056ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80056c4:	4b25      	ldr	r3, [pc, #148]	; (800575c <HAL_RCC_GetSysClockFreq+0x110>)
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	e004      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056d0:	4b23      	ldr	r3, [pc, #140]	; (8005760 <HAL_RCC_GetSysClockFreq+0x114>)
 80056d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b0c      	cmp	r3, #12
 80056d8:	d134      	bne.n	8005744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d003      	beq.n	80056f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d003      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0xac>
 80056f0:	e005      	b.n	80056fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056f2:	4b1a      	ldr	r3, [pc, #104]	; (800575c <HAL_RCC_GetSysClockFreq+0x110>)
 80056f4:	617b      	str	r3, [r7, #20]
      break;
 80056f6:	e005      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_RCC_GetSysClockFreq+0x114>)
 80056fa:	617b      	str	r3, [r7, #20]
      break;
 80056fc:	e002      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	617b      	str	r3, [r7, #20]
      break;
 8005702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	3301      	adds	r3, #1
 8005710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	fb03 f202 	mul.w	r2, r3, r2
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800572a:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <HAL_RCC_GetSysClockFreq+0x108>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	0e5b      	lsrs	r3, r3, #25
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	3301      	adds	r3, #1
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005744:	69bb      	ldr	r3, [r7, #24]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3724      	adds	r7, #36	; 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	0800ad58 	.word	0x0800ad58
 800575c:	00f42400 	.word	0x00f42400
 8005760:	007a1200 	.word	0x007a1200

08005764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <HAL_RCC_GetHCLKFreq+0x14>)
 800576a:	681b      	ldr	r3, [r3, #0]
}
 800576c:	4618      	mov	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	20000000 	.word	0x20000000

0800577c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005780:	f7ff fff0 	bl	8005764 <HAL_RCC_GetHCLKFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	4904      	ldr	r1, [pc, #16]	; (80057a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005792:	5ccb      	ldrb	r3, [r1, r3]
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40021000 	.word	0x40021000
 80057a4:	0800ad50 	.word	0x0800ad50

080057a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057ac:	f7ff ffda 	bl	8005764 <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	0adb      	lsrs	r3, r3, #11
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4904      	ldr	r1, [pc, #16]	; (80057d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40021000 	.word	0x40021000
 80057d0:	0800ad50 	.word	0x0800ad50

080057d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057e0:	4b2a      	ldr	r3, [pc, #168]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057ec:	f7ff f9b6 	bl	8004b5c <HAL_PWREx_GetVoltageRange>
 80057f0:	6178      	str	r0, [r7, #20]
 80057f2:	e014      	b.n	800581e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f8:	4a24      	ldr	r2, [pc, #144]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005800:	4b22      	ldr	r3, [pc, #136]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800580c:	f7ff f9a6 	bl	8004b5c <HAL_PWREx_GetVoltageRange>
 8005810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005812:	4b1e      	ldr	r3, [pc, #120]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	4a1d      	ldr	r2, [pc, #116]	; (800588c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005824:	d10b      	bne.n	800583e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b80      	cmp	r3, #128	; 0x80
 800582a:	d919      	bls.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2ba0      	cmp	r3, #160	; 0xa0
 8005830:	d902      	bls.n	8005838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005832:	2302      	movs	r3, #2
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	e013      	b.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005838:	2301      	movs	r3, #1
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	e010      	b.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b80      	cmp	r3, #128	; 0x80
 8005842:	d902      	bls.n	800584a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005844:	2303      	movs	r3, #3
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e00a      	b.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b80      	cmp	r3, #128	; 0x80
 800584e:	d102      	bne.n	8005856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005850:	2302      	movs	r3, #2
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	e004      	b.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d101      	bne.n	8005860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800585c:	2301      	movs	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f023 0207 	bic.w	r2, r3, #7
 8005868:	4909      	ldr	r1, [pc, #36]	; (8005890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d001      	beq.n	8005882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	40022000 	.word	0x40022000

08005894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800589c:	2300      	movs	r3, #0
 800589e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058a0:	2300      	movs	r3, #0
 80058a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d031      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058b8:	d01a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80058ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058be:	d814      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058c8:	d10f      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80058ca:	4b5d      	ldr	r3, [pc, #372]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4a5c      	ldr	r2, [pc, #368]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058d6:	e00c      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3304      	adds	r3, #4
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 f9de 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058e8:	e003      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	74fb      	strb	r3, [r7, #19]
      break;
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80058f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f2:	7cfb      	ldrb	r3, [r7, #19]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058f8:	4b51      	ldr	r3, [pc, #324]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	494e      	ldr	r1, [pc, #312]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800590e:	e001      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	7cfb      	ldrb	r3, [r7, #19]
 8005912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 809e 	beq.w	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005922:	2300      	movs	r3, #0
 8005924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005926:	4b46      	ldr	r3, [pc, #280]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00d      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593c:	4b40      	ldr	r3, [pc, #256]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	4a3f      	ldr	r2, [pc, #252]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005946:	6593      	str	r3, [r2, #88]	; 0x58
 8005948:	4b3d      	ldr	r3, [pc, #244]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005954:	2301      	movs	r3, #1
 8005956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005958:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a39      	ldr	r2, [pc, #228]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800595e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005964:	f7fc fd80 	bl	8002468 <HAL_GetTick>
 8005968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800596a:	e009      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596c:	f7fc fd7c 	bl	8002468 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d902      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	74fb      	strb	r3, [r7, #19]
        break;
 800597e:	e005      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005980:	4b30      	ldr	r3, [pc, #192]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0ef      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d15a      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005992:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01e      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d019      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ae:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059ca:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059da:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d016      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fc fd3c 	bl	8002468 <HAL_GetTick>
 80059f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f2:	e00b      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fc fd38 	bl	8002468 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d902      	bls.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	74fb      	strb	r3, [r7, #19]
            break;
 8005a0a:	e006      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0ec      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005a1a:	7cfb      	ldrb	r3, [r7, #19]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10b      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2e:	4904      	ldr	r1, [pc, #16]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a36:	e009      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a38:	7cfb      	ldrb	r3, [r7, #19]
 8005a3a:	74bb      	strb	r3, [r7, #18]
 8005a3c:	e006      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
 8005a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a4c:	7c7b      	ldrb	r3, [r7, #17]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4b8a      	ldr	r3, [pc, #552]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a56:	4a89      	ldr	r2, [pc, #548]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a6a:	4b84      	ldr	r3, [pc, #528]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a70:	f023 0203 	bic.w	r2, r3, #3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	4980      	ldr	r1, [pc, #512]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8c:	4b7b      	ldr	r3, [pc, #492]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f023 020c 	bic.w	r2, r3, #12
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	4978      	ldr	r1, [pc, #480]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aae:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	496f      	ldr	r1, [pc, #444]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ad0:	4b6a      	ldr	r3, [pc, #424]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	4967      	ldr	r1, [pc, #412]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005af2:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	495e      	ldr	r1, [pc, #376]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b14:	4b59      	ldr	r3, [pc, #356]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4956      	ldr	r1, [pc, #344]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b36:	4b51      	ldr	r3, [pc, #324]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	494d      	ldr	r1, [pc, #308]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d028      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b58:	4b48      	ldr	r3, [pc, #288]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	4945      	ldr	r1, [pc, #276]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b76:	d106      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b78:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b82:	60d3      	str	r3, [r2, #12]
 8005b84:	e011      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b8e:	d10c      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	2101      	movs	r1, #1
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f882 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005ba6:	7cfb      	ldrb	r3, [r7, #19]
 8005ba8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d028      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bb6:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc4:	492d      	ldr	r1, [pc, #180]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd4:	d106      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd6:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be0:	60d3      	str	r3, [r2, #12]
 8005be2:	e011      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bec:	d10c      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f853 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bfe:	7cfb      	ldrb	r3, [r7, #19]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01c      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c22:	4916      	ldr	r1, [pc, #88]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c32:	d10c      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	2102      	movs	r1, #2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f830 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005c40:	4603      	mov	r3, r0
 8005c42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c44:	7cfb      	ldrb	r3, [r7, #19]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005c4a:	7cfb      	ldrb	r3, [r7, #19]
 8005c4c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c68:	4904      	ldr	r1, [pc, #16]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c70:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000

08005c80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c8a:	f043 0304 	orr.w	r3, r3, #4
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40021000 	.word	0x40021000

08005ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cae:	4b74      	ldr	r3, [pc, #464]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d018      	beq.n	8005cec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cba:	4b71      	ldr	r3, [pc, #452]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0203 	and.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d10d      	bne.n	8005ce6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005cd2:	4b6b      	ldr	r3, [pc, #428]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d047      	beq.n	8005d76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	73fb      	strb	r3, [r7, #15]
 8005cea:	e044      	b.n	8005d76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d018      	beq.n	8005d26 <RCCEx_PLLSAI1_Config+0x86>
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d825      	bhi.n	8005d44 <RCCEx_PLLSAI1_Config+0xa4>
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d002      	beq.n	8005d02 <RCCEx_PLLSAI1_Config+0x62>
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d009      	beq.n	8005d14 <RCCEx_PLLSAI1_Config+0x74>
 8005d00:	e020      	b.n	8005d44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d02:	4b5f      	ldr	r3, [pc, #380]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d11d      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d12:	e01a      	b.n	8005d4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d14:	4b5a      	ldr	r3, [pc, #360]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d116      	bne.n	8005d4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d24:	e013      	b.n	8005d4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d26:	4b56      	ldr	r3, [pc, #344]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d32:	4b53      	ldr	r3, [pc, #332]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d42:	e006      	b.n	8005d52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	73fb      	strb	r3, [r7, #15]
      break;
 8005d48:	e004      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10d      	bne.n	8005d76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d5a:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6819      	ldr	r1, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	4943      	ldr	r1, [pc, #268]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d17c      	bne.n	8005e76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d7c:	4b40      	ldr	r3, [pc, #256]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3f      	ldr	r2, [pc, #252]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d88:	f7fc fb6e 	bl	8002468 <HAL_GetTick>
 8005d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d8e:	e009      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d90:	f7fc fb6a 	bl	8002468 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d902      	bls.n	8005da4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	73fb      	strb	r3, [r7, #15]
        break;
 8005da2:	e005      	b.n	8005db0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005da4:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1ef      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d15f      	bne.n	8005e76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d110      	bne.n	8005dde <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dbc:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005dc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6892      	ldr	r2, [r2, #8]
 8005dcc:	0211      	lsls	r1, r2, #8
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68d2      	ldr	r2, [r2, #12]
 8005dd2:	06d2      	lsls	r2, r2, #27
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	492a      	ldr	r1, [pc, #168]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	610b      	str	r3, [r1, #16]
 8005ddc:	e027      	b.n	8005e2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d112      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005de4:	4b26      	ldr	r3, [pc, #152]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6892      	ldr	r2, [r2, #8]
 8005df4:	0211      	lsls	r1, r2, #8
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6912      	ldr	r2, [r2, #16]
 8005dfa:	0852      	lsrs	r2, r2, #1
 8005dfc:	3a01      	subs	r2, #1
 8005dfe:	0552      	lsls	r2, r2, #21
 8005e00:	430a      	orrs	r2, r1
 8005e02:	491f      	ldr	r1, [pc, #124]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]
 8005e08:	e011      	b.n	8005e2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e0a:	4b1d      	ldr	r3, [pc, #116]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6892      	ldr	r2, [r2, #8]
 8005e1a:	0211      	lsls	r1, r2, #8
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6952      	ldr	r2, [r2, #20]
 8005e20:	0852      	lsrs	r2, r2, #1
 8005e22:	3a01      	subs	r2, #1
 8005e24:	0652      	lsls	r2, r2, #25
 8005e26:	430a      	orrs	r2, r1
 8005e28:	4915      	ldr	r1, [pc, #84]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e2e:	4b14      	ldr	r3, [pc, #80]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3a:	f7fc fb15 	bl	8002468 <HAL_GetTick>
 8005e3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e40:	e009      	b.n	8005e56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e42:	f7fc fb11 	bl	8002468 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d902      	bls.n	8005e56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	73fb      	strb	r3, [r7, #15]
          break;
 8005e54:	e005      	b.n	8005e62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ef      	beq.n	8005e42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	4903      	ldr	r1, [pc, #12]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40021000 	.word	0x40021000

08005e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e040      	b.n	8005f18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc f884 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fbfc 	bl	80066c0 <UART_SetConfig>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e022      	b.n	8005f18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fe1c 	bl	8006b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fea3 	bl	8006c5c <UART_CheckIdleState>
 8005f16:	4603      	mov	r3, r0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b08b      	sub	sp, #44	; 0x2c
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d156      	bne.n	8005fe4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_UART_Transmit_IT+0x22>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e04f      	b.n	8005fe6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit_IT+0x34>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e048      	b.n	8005fe6 <HAL_UART_Transmit_IT+0xc6>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2221      	movs	r2, #33	; 0x21
 8005f84:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8e:	d107      	bne.n	8005fa0 <HAL_UART_Transmit_IT+0x80>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <HAL_UART_Transmit_IT+0xd4>)
 8005f9c:	669a      	str	r2, [r3, #104]	; 0x68
 8005f9e:	e002      	b.n	8005fa6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <HAL_UART_Transmit_IT+0xd8>)
 8005fa4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e000      	b.n	8005fe6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
  }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	372c      	adds	r7, #44	; 0x2c
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	080071b7 	.word	0x080071b7
 8005ff8:	080070ff 	.word	0x080070ff

08005ffc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	; 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4613      	mov	r3, r2
 8006008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600e:	2b20      	cmp	r3, #32
 8006010:	d142      	bne.n	8006098 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_Receive_IT+0x22>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e03b      	b.n	800609a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_UART_Receive_IT+0x34>
 800602c:	2302      	movs	r3, #2
 800602e:	e034      	b.n	800609a <HAL_UART_Receive_IT+0x9e>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <HAL_UART_Receive_IT+0xa8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d01f      	beq.n	8006088 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	613b      	str	r3, [r7, #16]
   return(result);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	69f9      	ldr	r1, [r7, #28]
 800607a:	6a3a      	ldr	r2, [r7, #32]
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	61bb      	str	r3, [r7, #24]
   return(result);
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e6      	bne.n	8006056 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	461a      	mov	r2, r3
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fef2 	bl	8006e78 <UART_Start_Receive_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	e000      	b.n	800609a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006098:	2302      	movs	r3, #2
  }
}
 800609a:	4618      	mov	r0, r3
 800609c:	3728      	adds	r7, #40	; 0x28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40008000 	.word	0x40008000

080060a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b0ba      	sub	sp, #232	; 0xe8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80060d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80060d6:	4013      	ands	r3, r2
 80060d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80060dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d115      	bne.n	8006110 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00f      	beq.n	8006110 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 82a6 	beq.w	8006652 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
      }
      return;
 800610e:	e2a0      	b.n	8006652 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8117 	beq.w	8006348 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800611a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800612a:	4b85      	ldr	r3, [pc, #532]	; (8006340 <HAL_UART_IRQHandler+0x298>)
 800612c:	4013      	ands	r3, r2
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 810a 	beq.w	8006348 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d011      	beq.n	8006164 <HAL_UART_IRQHandler+0xbc>
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2201      	movs	r2, #1
 8006152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800615a:	f043 0201 	orr.w	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d011      	beq.n	8006194 <HAL_UART_IRQHandler+0xec>
 8006170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2202      	movs	r2, #2
 8006182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800618a:	f043 0204 	orr.w	r2, r3, #4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d011      	beq.n	80061c4 <HAL_UART_IRQHandler+0x11c>
 80061a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2204      	movs	r2, #4
 80061b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ba:	f043 0202 	orr.w	r2, r3, #2
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d017      	beq.n	8006200 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d105      	bne.n	80061e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2208      	movs	r2, #8
 80061ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f6:	f043 0208 	orr.w	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006208:	2b00      	cmp	r3, #0
 800620a:	d012      	beq.n	8006232 <HAL_UART_IRQHandler+0x18a>
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00c      	beq.n	8006232 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 820c 	beq.w	8006656 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d005      	beq.n	800628a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800627e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006282:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006286:	2b00      	cmp	r3, #0
 8006288:	d04f      	beq.n	800632a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 febe 	bl	800700c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d141      	bne.n	8006322 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3308      	adds	r3, #8
 80062c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1d9      	bne.n	800629e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d013      	beq.n	800631a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	4a13      	ldr	r2, [pc, #76]	; (8006344 <HAL_UART_IRQHandler+0x29c>)
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd fc75 	bl	8003bee <HAL_DMA_Abort_IT>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d017      	beq.n	800633a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	e00f      	b.n	800633a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f9ba 	bl	8006694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e00b      	b.n	800633a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f9b6 	bl	8006694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e007      	b.n	800633a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9b2 	bl	8006694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006338:	e18d      	b.n	8006656 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633a:	bf00      	nop
    return;
 800633c:	e18b      	b.n	8006656 <HAL_UART_IRQHandler+0x5ae>
 800633e:	bf00      	nop
 8006340:	04000120 	.word	0x04000120
 8006344:	080070d3 	.word	0x080070d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	2b01      	cmp	r3, #1
 800634e:	f040 8146 	bne.w	80065de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 813f 	beq.w	80065de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8138 	beq.w	80065de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2210      	movs	r2, #16
 8006374:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	f040 80b4 	bne.w	80064ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006392:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 815f 	beq.w	800665a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063a6:	429a      	cmp	r2, r3
 80063a8:	f080 8157 	bcs.w	800665a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f040 8085 	bne.w	80064d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800640a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1da      	bne.n	80063c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3308      	adds	r3, #8
 8006418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006424:	f023 0301 	bic.w	r3, r3, #1
 8006428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3308      	adds	r3, #8
 8006432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006436:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800643a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800643e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e1      	bne.n	8006412 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800645e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3308      	adds	r3, #8
 800646e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006472:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006474:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e3      	bne.n	800644e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a2:	f023 0310 	bic.w	r3, r3, #16
 80064a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80064b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e4      	bne.n	8006492 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fd fb50 	bl	8003b72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064de:	b29b      	uxth	r3, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f8de 	bl	80066a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064ec:	e0b5      	b.n	800665a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80a7 	beq.w	800665e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80a2 	beq.w	800665e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800652e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800653c:	647b      	str	r3, [r7, #68]	; 0x44
 800653e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e4      	bne.n	800651a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	623b      	str	r3, [r7, #32]
   return(result);
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006574:	633a      	str	r2, [r7, #48]	; 0x30
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800657a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e3      	bne.n	8006550 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e4      	bne.n	800659a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f866 	bl	80066a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065dc:	e03f      	b.n	800665e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_UART_IRQHandler+0x560>
 80065ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 ffc2 	bl	800758a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006606:	e02d      	b.n	8006664 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01c      	beq.n	8006662 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	4798      	blx	r3
    }
    return;
 8006630:	e017      	b.n	8006662 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d012      	beq.n	8006664 <HAL_UART_IRQHandler+0x5bc>
 800663e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fe13 	bl	8007276 <UART_EndTransmit_IT>
    return;
 8006650:	e008      	b.n	8006664 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006652:	bf00      	nop
 8006654:	e006      	b.n	8006664 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006656:	bf00      	nop
 8006658:	e004      	b.n	8006664 <HAL_UART_IRQHandler+0x5bc>
      return;
 800665a:	bf00      	nop
 800665c:	e002      	b.n	8006664 <HAL_UART_IRQHandler+0x5bc>
      return;
 800665e:	bf00      	nop
 8006660:	e000      	b.n	8006664 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006662:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006664:	37e8      	adds	r7, #232	; 0xe8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066c4:	b08a      	sub	sp, #40	; 0x28
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	431a      	orrs	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	431a      	orrs	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4bb4      	ldr	r3, [pc, #720]	; (80069c0 <UART_SetConfig+0x300>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4aa9      	ldr	r2, [pc, #676]	; (80069c4 <UART_SetConfig+0x304>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	4313      	orrs	r3, r2
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4aa0      	ldr	r2, [pc, #640]	; (80069c8 <UART_SetConfig+0x308>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d126      	bne.n	8006798 <UART_SetConfig+0xd8>
 800674a:	4ba0      	ldr	r3, [pc, #640]	; (80069cc <UART_SetConfig+0x30c>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	2b03      	cmp	r3, #3
 8006756:	d81b      	bhi.n	8006790 <UART_SetConfig+0xd0>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0xa0>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006771 	.word	0x08006771
 8006764:	08006781 	.word	0x08006781
 8006768:	08006779 	.word	0x08006779
 800676c:	08006789 	.word	0x08006789
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006776:	e080      	b.n	800687a <UART_SetConfig+0x1ba>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e07c      	b.n	800687a <UART_SetConfig+0x1ba>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e078      	b.n	800687a <UART_SetConfig+0x1ba>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e074      	b.n	800687a <UART_SetConfig+0x1ba>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e070      	b.n	800687a <UART_SetConfig+0x1ba>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a8c      	ldr	r2, [pc, #560]	; (80069d0 <UART_SetConfig+0x310>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d138      	bne.n	8006814 <UART_SetConfig+0x154>
 80067a2:	4b8a      	ldr	r3, [pc, #552]	; (80069cc <UART_SetConfig+0x30c>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a8:	f003 030c 	and.w	r3, r3, #12
 80067ac:	2b0c      	cmp	r3, #12
 80067ae:	d82d      	bhi.n	800680c <UART_SetConfig+0x14c>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <UART_SetConfig+0xf8>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067ed 	.word	0x080067ed
 80067bc:	0800680d 	.word	0x0800680d
 80067c0:	0800680d 	.word	0x0800680d
 80067c4:	0800680d 	.word	0x0800680d
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	0800680d 	.word	0x0800680d
 80067d0:	0800680d 	.word	0x0800680d
 80067d4:	0800680d 	.word	0x0800680d
 80067d8:	080067f5 	.word	0x080067f5
 80067dc:	0800680d 	.word	0x0800680d
 80067e0:	0800680d 	.word	0x0800680d
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006805 	.word	0x08006805
 80067ec:	2300      	movs	r3, #0
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e042      	b.n	800687a <UART_SetConfig+0x1ba>
 80067f4:	2302      	movs	r3, #2
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e03e      	b.n	800687a <UART_SetConfig+0x1ba>
 80067fc:	2304      	movs	r3, #4
 80067fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006802:	e03a      	b.n	800687a <UART_SetConfig+0x1ba>
 8006804:	2308      	movs	r3, #8
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680a:	e036      	b.n	800687a <UART_SetConfig+0x1ba>
 800680c:	2310      	movs	r3, #16
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006812:	e032      	b.n	800687a <UART_SetConfig+0x1ba>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a6a      	ldr	r2, [pc, #424]	; (80069c4 <UART_SetConfig+0x304>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d12a      	bne.n	8006874 <UART_SetConfig+0x1b4>
 800681e:	4b6b      	ldr	r3, [pc, #428]	; (80069cc <UART_SetConfig+0x30c>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800682c:	d01a      	beq.n	8006864 <UART_SetConfig+0x1a4>
 800682e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006832:	d81b      	bhi.n	800686c <UART_SetConfig+0x1ac>
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006838:	d00c      	beq.n	8006854 <UART_SetConfig+0x194>
 800683a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683e:	d815      	bhi.n	800686c <UART_SetConfig+0x1ac>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <UART_SetConfig+0x18c>
 8006844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006848:	d008      	beq.n	800685c <UART_SetConfig+0x19c>
 800684a:	e00f      	b.n	800686c <UART_SetConfig+0x1ac>
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e012      	b.n	800687a <UART_SetConfig+0x1ba>
 8006854:	2302      	movs	r3, #2
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	e00e      	b.n	800687a <UART_SetConfig+0x1ba>
 800685c:	2304      	movs	r3, #4
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006862:	e00a      	b.n	800687a <UART_SetConfig+0x1ba>
 8006864:	2308      	movs	r3, #8
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686a:	e006      	b.n	800687a <UART_SetConfig+0x1ba>
 800686c:	2310      	movs	r3, #16
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006872:	e002      	b.n	800687a <UART_SetConfig+0x1ba>
 8006874:	2310      	movs	r3, #16
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a51      	ldr	r2, [pc, #324]	; (80069c4 <UART_SetConfig+0x304>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d17a      	bne.n	800697a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006888:	2b08      	cmp	r3, #8
 800688a:	d824      	bhi.n	80068d6 <UART_SetConfig+0x216>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <UART_SetConfig+0x1d4>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068d7 	.word	0x080068d7
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068d7 	.word	0x080068d7
 80068a4:	080068c7 	.word	0x080068c7
 80068a8:	080068d7 	.word	0x080068d7
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	080068d7 	.word	0x080068d7
 80068b4:	080068cf 	.word	0x080068cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fe ff60 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 80068bc:	61f8      	str	r0, [r7, #28]
        break;
 80068be:	e010      	b.n	80068e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c0:	4b44      	ldr	r3, [pc, #272]	; (80069d4 <UART_SetConfig+0x314>)
 80068c2:	61fb      	str	r3, [r7, #28]
        break;
 80068c4:	e00d      	b.n	80068e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c6:	f7fe fec1 	bl	800564c <HAL_RCC_GetSysClockFreq>
 80068ca:	61f8      	str	r0, [r7, #28]
        break;
 80068cc:	e009      	b.n	80068e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d2:	61fb      	str	r3, [r7, #28]
        break;
 80068d4:	e005      	b.n	80068e2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8107 	beq.w	8006af8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4413      	add	r3, r2
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d305      	bcc.n	8006906 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	429a      	cmp	r2, r3
 8006904:	d903      	bls.n	800690e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800690c:	e0f4      	b.n	8006af8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	2200      	movs	r2, #0
 8006912:	461c      	mov	r4, r3
 8006914:	4615      	mov	r5, r2
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	022b      	lsls	r3, r5, #8
 8006920:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006924:	0222      	lsls	r2, r4, #8
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	6849      	ldr	r1, [r1, #4]
 800692a:	0849      	lsrs	r1, r1, #1
 800692c:	2000      	movs	r0, #0
 800692e:	4688      	mov	r8, r1
 8006930:	4681      	mov	r9, r0
 8006932:	eb12 0a08 	adds.w	sl, r2, r8
 8006936:	eb43 0b09 	adc.w	fp, r3, r9
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006948:	4650      	mov	r0, sl
 800694a:	4659      	mov	r1, fp
 800694c:	f7fa f97c 	bl	8000c48 <__aeabi_uldivmod>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4613      	mov	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800695e:	d308      	bcc.n	8006972 <UART_SetConfig+0x2b2>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006966:	d204      	bcs.n	8006972 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	60da      	str	r2, [r3, #12]
 8006970:	e0c2      	b.n	8006af8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006978:	e0be      	b.n	8006af8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006982:	d16a      	bne.n	8006a5a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006988:	2b08      	cmp	r3, #8
 800698a:	d834      	bhi.n	80069f6 <UART_SetConfig+0x336>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <UART_SetConfig+0x2d4>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069d9 	.word	0x080069d9
 800699c:	080069e1 	.word	0x080069e1
 80069a0:	080069f7 	.word	0x080069f7
 80069a4:	080069e7 	.word	0x080069e7
 80069a8:	080069f7 	.word	0x080069f7
 80069ac:	080069f7 	.word	0x080069f7
 80069b0:	080069f7 	.word	0x080069f7
 80069b4:	080069ef 	.word	0x080069ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fe fee0 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 80069bc:	61f8      	str	r0, [r7, #28]
        break;
 80069be:	e020      	b.n	8006a02 <UART_SetConfig+0x342>
 80069c0:	efff69f3 	.word	0xefff69f3
 80069c4:	40008000 	.word	0x40008000
 80069c8:	40013800 	.word	0x40013800
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40004400 	.word	0x40004400
 80069d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d8:	f7fe fee6 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 80069dc:	61f8      	str	r0, [r7, #28]
        break;
 80069de:	e010      	b.n	8006a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069e0:	4b4c      	ldr	r3, [pc, #304]	; (8006b14 <UART_SetConfig+0x454>)
 80069e2:	61fb      	str	r3, [r7, #28]
        break;
 80069e4:	e00d      	b.n	8006a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069e6:	f7fe fe31 	bl	800564c <HAL_RCC_GetSysClockFreq>
 80069ea:	61f8      	str	r0, [r7, #28]
        break;
 80069ec:	e009      	b.n	8006a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f2:	61fb      	str	r3, [r7, #28]
        break;
 80069f4:	e005      	b.n	8006a02 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d077      	beq.n	8006af8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	005a      	lsls	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	441a      	add	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d916      	bls.n	8006a52 <UART_SetConfig+0x392>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2a:	d212      	bcs.n	8006a52 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f023 030f 	bic.w	r3, r3, #15
 8006a34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	8afb      	ldrh	r3, [r7, #22]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	8afa      	ldrh	r2, [r7, #22]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e052      	b.n	8006af8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a58:	e04e      	b.n	8006af8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d827      	bhi.n	8006ab2 <UART_SetConfig+0x3f2>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x3a8>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a9d 	.word	0x08006a9d
 8006a74:	08006ab3 	.word	0x08006ab3
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006ab3 	.word	0x08006ab3
 8006a80:	08006ab3 	.word	0x08006ab3
 8006a84:	08006ab3 	.word	0x08006ab3
 8006a88:	08006aab 	.word	0x08006aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fe fe76 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 8006a90:	61f8      	str	r0, [r7, #28]
        break;
 8006a92:	e014      	b.n	8006abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a94:	f7fe fe88 	bl	80057a8 <HAL_RCC_GetPCLK2Freq>
 8006a98:	61f8      	str	r0, [r7, #28]
        break;
 8006a9a:	e010      	b.n	8006abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a9c:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <UART_SetConfig+0x454>)
 8006a9e:	61fb      	str	r3, [r7, #28]
        break;
 8006aa0:	e00d      	b.n	8006abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa2:	f7fe fdd3 	bl	800564c <HAL_RCC_GetSysClockFreq>
 8006aa6:	61f8      	str	r0, [r7, #28]
        break;
 8006aa8:	e009      	b.n	8006abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aae:	61fb      	str	r3, [r7, #28]
        break;
 8006ab0:	e005      	b.n	8006abe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006abc:	bf00      	nop
    }

    if (pclk != 0U)
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d019      	beq.n	8006af8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	085a      	lsrs	r2, r3, #1
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	441a      	add	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b0f      	cmp	r3, #15
 8006adc:	d909      	bls.n	8006af2 <UART_SetConfig+0x432>
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae4:	d205      	bcs.n	8006af2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60da      	str	r2, [r3, #12]
 8006af0:	e002      	b.n	8006af8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3728      	adds	r7, #40	; 0x28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b12:	bf00      	nop
 8006b14:	00f42400 	.word	0x00f42400

08006b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c16:	d10a      	bne.n	8006c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c6c:	f7fb fbfc 	bl	8002468 <HAL_GetTick>
 8006c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d10e      	bne.n	8006c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f82d 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e023      	b.n	8006ce6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d10e      	bne.n	8006cca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f817 	bl	8006cee <UART_WaitOnFlagUntilTimeout>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e00d      	b.n	8006ce6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b09c      	sub	sp, #112	; 0x70
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	603b      	str	r3, [r7, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfe:	e0a5      	b.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	f000 80a1 	beq.w	8006e4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0a:	f7fb fbad 	bl	8002468 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d302      	bcc.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d13e      	bne.n	8006d9e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d34:	667b      	str	r3, [r7, #100]	; 0x64
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e6      	bne.n	8006d20 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	663b      	str	r3, [r7, #96]	; 0x60
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3308      	adds	r3, #8
 8006d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d72:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e5      	bne.n	8006d52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e067      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d04f      	beq.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dba:	d147      	bne.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dc4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
 8006de6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	613b      	str	r3, [r7, #16]
   return(result);
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e18:	623a      	str	r2, [r7, #32]
 8006e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	69f9      	ldr	r1, [r7, #28]
 8006e1e:	6a3a      	ldr	r2, [r7, #32]
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e5      	bne.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e010      	b.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69da      	ldr	r2, [r3, #28]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4013      	ands	r3, r2
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	f43f af4a 	beq.w	8006d00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3770      	adds	r7, #112	; 0x70
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b097      	sub	sp, #92	; 0x5c
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	88fa      	ldrh	r2, [r7, #6]
 8006e98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eaa:	d10e      	bne.n	8006eca <UART_Start_Receive_IT+0x52>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d105      	bne.n	8006ec0 <UART_Start_Receive_IT+0x48>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ebe:	e02d      	b.n	8006f1c <UART_Start_Receive_IT+0xa4>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	22ff      	movs	r2, #255	; 0xff
 8006ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ec8:	e028      	b.n	8006f1c <UART_Start_Receive_IT+0xa4>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <UART_Start_Receive_IT+0x76>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <UART_Start_Receive_IT+0x6c>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	22ff      	movs	r2, #255	; 0xff
 8006ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ee2:	e01b      	b.n	8006f1c <UART_Start_Receive_IT+0xa4>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	227f      	movs	r2, #127	; 0x7f
 8006ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eec:	e016      	b.n	8006f1c <UART_Start_Receive_IT+0xa4>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef6:	d10d      	bne.n	8006f14 <UART_Start_Receive_IT+0x9c>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <UART_Start_Receive_IT+0x92>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	227f      	movs	r2, #127	; 0x7f
 8006f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f08:	e008      	b.n	8006f1c <UART_Start_Receive_IT+0xa4>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	223f      	movs	r2, #63	; 0x3f
 8006f0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f12:	e003      	b.n	8006f1c <UART_Start_Receive_IT+0xa4>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2222      	movs	r2, #34	; 0x22
 8006f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	657b      	str	r3, [r7, #84]	; 0x54
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d107      	bne.n	8006f78 <UART_Start_Receive_IT+0x100>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a24      	ldr	r2, [pc, #144]	; (8007004 <UART_Start_Receive_IT+0x18c>)
 8006f74:	665a      	str	r2, [r3, #100]	; 0x64
 8006f76:	e002      	b.n	8006f7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4a23      	ldr	r2, [pc, #140]	; (8007008 <UART_Start_Receive_IT+0x190>)
 8006f7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d019      	beq.n	8006fc2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
 8006fae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e6      	bne.n	8006f8e <UART_Start_Receive_IT+0x116>
 8006fc0:	e018      	b.n	8006ff4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f043 0320 	orr.w	r3, r3, #32
 8006fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe0:	623b      	str	r3, [r7, #32]
 8006fe2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	69f9      	ldr	r1, [r7, #28]
 8006fe6:	6a3a      	ldr	r2, [r7, #32]
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e6      	bne.n	8006fc2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	375c      	adds	r7, #92	; 0x5c
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	0800742b 	.word	0x0800742b
 8007008:	080072cb 	.word	0x080072cb

0800700c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b095      	sub	sp, #84	; 0x54
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007032:	643b      	str	r3, [r7, #64]	; 0x40
 8007034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e6      	bne.n	8007014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	61fb      	str	r3, [r7, #28]
   return(result);
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	64bb      	str	r3, [r7, #72]	; 0x48
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800706c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800707e:	2b01      	cmp	r3, #1
 8007080:	d118      	bne.n	80070b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f023 0310 	bic.w	r3, r3, #16
 8007096:	647b      	str	r3, [r7, #68]	; 0x44
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	6979      	ldr	r1, [r7, #20]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	613b      	str	r3, [r7, #16]
   return(result);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e6      	bne.n	8007082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070c6:	bf00      	nop
 80070c8:	3754      	adds	r7, #84	; 0x54
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f7ff facf 	bl	8006694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070fe:	b480      	push	{r7}
 8007100:	b08f      	sub	sp, #60	; 0x3c
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800710a:	2b21      	cmp	r3, #33	; 0x21
 800710c:	d14d      	bne.n	80071aa <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d132      	bne.n	8007180 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	61fb      	str	r3, [r7, #28]
   return(result);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800713a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800713e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e6      	bne.n	800711a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	60bb      	str	r3, [r7, #8]
   return(result);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007160:	633b      	str	r3, [r7, #48]	; 0x30
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6979      	ldr	r1, [r7, #20]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	613b      	str	r3, [r7, #16]
   return(result);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e6      	bne.n	800714c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800717e:	e014      	b.n	80071aa <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007184:	781a      	ldrb	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	b292      	uxth	r2, r2
 800718c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80071aa:	bf00      	nop
 80071ac:	373c      	adds	r7, #60	; 0x3c
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b091      	sub	sp, #68	; 0x44
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c2:	2b21      	cmp	r3, #33	; 0x21
 80071c4:	d151      	bne.n	800726a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d132      	bne.n	8007238 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	623b      	str	r3, [r7, #32]
   return(result);
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	633b      	str	r3, [r7, #48]	; 0x30
 80071f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e6      	bne.n	80071d2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	60fb      	str	r3, [r7, #12]
   return(result);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007218:	637b      	str	r3, [r7, #52]	; 0x34
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007222:	61fb      	str	r3, [r7, #28]
 8007224:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	69b9      	ldr	r1, [r7, #24]
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	617b      	str	r3, [r7, #20]
   return(result);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e6      	bne.n	8007204 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007236:	e018      	b.n	800726a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800723e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007240:	881a      	ldrh	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800724a:	b292      	uxth	r2, r2
 800724c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007252:	1c9a      	adds	r2, r3, #2
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800726a:	bf00      	nop
 800726c:	3744      	adds	r7, #68	; 0x44
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b088      	sub	sp, #32
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	60bb      	str	r3, [r7, #8]
   return(result);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	613b      	str	r3, [r7, #16]
   return(result);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff f9d5 	bl	800666c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c2:	bf00      	nop
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b096      	sub	sp, #88	; 0x58
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e0:	2b22      	cmp	r3, #34	; 0x22
 80072e2:	f040 8094 	bne.w	800740e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072f0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80072f4:	b2d9      	uxtb	r1, r3
 80072f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007300:	400a      	ands	r2, r1
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d179      	bne.n	8007422 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800733c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007342:	653b      	str	r3, [r7, #80]	; 0x50
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734c:	647b      	str	r3, [r7, #68]	; 0x44
 800734e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800735a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	623b      	str	r3, [r7, #32]
   return(result);
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007380:	633a      	str	r2, [r7, #48]	; 0x30
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e5      	bne.n	8007360 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d12e      	bne.n	8007406 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073cc:	61fb      	str	r3, [r7, #28]
 80073ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	69b9      	ldr	r1, [r7, #24]
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	617b      	str	r3, [r7, #20]
   return(result);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e6      	bne.n	80073ae <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d103      	bne.n	80073f6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2210      	movs	r2, #16
 80073f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff f952 	bl	80066a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007404:	e00d      	b.n	8007422 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff f93a 	bl	8006680 <HAL_UART_RxCpltCallback>
}
 800740c:	e009      	b.n	8007422 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	8b1b      	ldrh	r3, [r3, #24]
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0208 	orr.w	r2, r2, #8
 800741e:	b292      	uxth	r2, r2
 8007420:	831a      	strh	r2, [r3, #24]
}
 8007422:	bf00      	nop
 8007424:	3758      	adds	r7, #88	; 0x58
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b096      	sub	sp, #88	; 0x58
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007438:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007440:	2b22      	cmp	r3, #34	; 0x22
 8007442:	f040 8094 	bne.w	800756e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800744c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007454:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007456:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800745a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800745e:	4013      	ands	r3, r2
 8007460:	b29a      	uxth	r2, r3
 8007462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007464:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	1c9a      	adds	r2, r3, #2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d179      	bne.n	8007582 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	643b      	str	r3, [r7, #64]	; 0x40
 80074ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f023 0301 	bic.w	r3, r3, #1
 80074d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007504:	2b01      	cmp	r3, #1
 8007506:	d12e      	bne.n	8007566 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60bb      	str	r3, [r7, #8]
   return(result);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f023 0310 	bic.w	r3, r3, #16
 8007522:	647b      	str	r3, [r7, #68]	; 0x44
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	613b      	str	r3, [r7, #16]
   return(result);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b10      	cmp	r3, #16
 800754c:	d103      	bne.n	8007556 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2210      	movs	r2, #16
 8007554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff f8a2 	bl	80066a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007564:	e00d      	b.n	8007582 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff f88a 	bl	8006680 <HAL_UART_RxCpltCallback>
}
 800756c:	e009      	b.n	8007582 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	8b1b      	ldrh	r3, [r3, #24]
 8007574:	b29a      	uxth	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0208 	orr.w	r2, r2, #8
 800757e:	b292      	uxth	r2, r2
 8007580:	831a      	strh	r2, [r3, #24]
}
 8007582:	bf00      	nop
 8007584:	3758      	adds	r7, #88	; 0x58
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007592:	bf00      	nop
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
	...

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	2000000c 	.word	0x2000000c

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f002 ff48 	bl	800a454 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	0800b16c 	.word	0x0800b16c
 80075e8:	0800b16c 	.word	0x0800b16c
 80075ec:	0800b16c 	.word	0x0800b16c
 80075f0:	0800b170 	.word	0x0800b170

080075f4 <isalnum>:
 80075f4:	4b02      	ldr	r3, [pc, #8]	; (8007600 <isalnum+0xc>)
 80075f6:	4418      	add	r0, r3
 80075f8:	7840      	ldrb	r0, [r0, #1]
 80075fa:	f000 0007 	and.w	r0, r0, #7
 80075fe:	4770      	bx	lr
 8007600:	0800adc0 	.word	0x0800adc0

08007604 <malloc>:
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <malloc+0xc>)
 8007606:	4601      	mov	r1, r0
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f000 b88d 	b.w	8007728 <_malloc_r>
 800760e:	bf00      	nop
 8007610:	2000000c 	.word	0x2000000c

08007614 <free>:
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <free+0xc>)
 8007616:	4601      	mov	r1, r0
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	f000 b819 	b.w	8007650 <_free_r>
 800761e:	bf00      	nop
 8007620:	2000000c 	.word	0x2000000c

08007624 <memcpy>:
 8007624:	440a      	add	r2, r1
 8007626:	4291      	cmp	r1, r2
 8007628:	f100 33ff 	add.w	r3, r0, #4294967295
 800762c:	d100      	bne.n	8007630 <memcpy+0xc>
 800762e:	4770      	bx	lr
 8007630:	b510      	push	{r4, lr}
 8007632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800763a:	4291      	cmp	r1, r2
 800763c:	d1f9      	bne.n	8007632 <memcpy+0xe>
 800763e:	bd10      	pop	{r4, pc}

08007640 <memset>:
 8007640:	4402      	add	r2, r0
 8007642:	4603      	mov	r3, r0
 8007644:	4293      	cmp	r3, r2
 8007646:	d100      	bne.n	800764a <memset+0xa>
 8007648:	4770      	bx	lr
 800764a:	f803 1b01 	strb.w	r1, [r3], #1
 800764e:	e7f9      	b.n	8007644 <memset+0x4>

08007650 <_free_r>:
 8007650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007652:	2900      	cmp	r1, #0
 8007654:	d044      	beq.n	80076e0 <_free_r+0x90>
 8007656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765a:	9001      	str	r0, [sp, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f1a1 0404 	sub.w	r4, r1, #4
 8007662:	bfb8      	it	lt
 8007664:	18e4      	addlt	r4, r4, r3
 8007666:	f001 fc21 	bl	8008eac <__malloc_lock>
 800766a:	4a1e      	ldr	r2, [pc, #120]	; (80076e4 <_free_r+0x94>)
 800766c:	9801      	ldr	r0, [sp, #4]
 800766e:	6813      	ldr	r3, [r2, #0]
 8007670:	b933      	cbnz	r3, 8007680 <_free_r+0x30>
 8007672:	6063      	str	r3, [r4, #4]
 8007674:	6014      	str	r4, [r2, #0]
 8007676:	b003      	add	sp, #12
 8007678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800767c:	f001 bc1c 	b.w	8008eb8 <__malloc_unlock>
 8007680:	42a3      	cmp	r3, r4
 8007682:	d908      	bls.n	8007696 <_free_r+0x46>
 8007684:	6825      	ldr	r5, [r4, #0]
 8007686:	1961      	adds	r1, r4, r5
 8007688:	428b      	cmp	r3, r1
 800768a:	bf01      	itttt	eq
 800768c:	6819      	ldreq	r1, [r3, #0]
 800768e:	685b      	ldreq	r3, [r3, #4]
 8007690:	1949      	addeq	r1, r1, r5
 8007692:	6021      	streq	r1, [r4, #0]
 8007694:	e7ed      	b.n	8007672 <_free_r+0x22>
 8007696:	461a      	mov	r2, r3
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	b10b      	cbz	r3, 80076a0 <_free_r+0x50>
 800769c:	42a3      	cmp	r3, r4
 800769e:	d9fa      	bls.n	8007696 <_free_r+0x46>
 80076a0:	6811      	ldr	r1, [r2, #0]
 80076a2:	1855      	adds	r5, r2, r1
 80076a4:	42a5      	cmp	r5, r4
 80076a6:	d10b      	bne.n	80076c0 <_free_r+0x70>
 80076a8:	6824      	ldr	r4, [r4, #0]
 80076aa:	4421      	add	r1, r4
 80076ac:	1854      	adds	r4, r2, r1
 80076ae:	42a3      	cmp	r3, r4
 80076b0:	6011      	str	r1, [r2, #0]
 80076b2:	d1e0      	bne.n	8007676 <_free_r+0x26>
 80076b4:	681c      	ldr	r4, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	6053      	str	r3, [r2, #4]
 80076ba:	4421      	add	r1, r4
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	e7da      	b.n	8007676 <_free_r+0x26>
 80076c0:	d902      	bls.n	80076c8 <_free_r+0x78>
 80076c2:	230c      	movs	r3, #12
 80076c4:	6003      	str	r3, [r0, #0]
 80076c6:	e7d6      	b.n	8007676 <_free_r+0x26>
 80076c8:	6825      	ldr	r5, [r4, #0]
 80076ca:	1961      	adds	r1, r4, r5
 80076cc:	428b      	cmp	r3, r1
 80076ce:	bf04      	itt	eq
 80076d0:	6819      	ldreq	r1, [r3, #0]
 80076d2:	685b      	ldreq	r3, [r3, #4]
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	bf04      	itt	eq
 80076d8:	1949      	addeq	r1, r1, r5
 80076da:	6021      	streq	r1, [r4, #0]
 80076dc:	6054      	str	r4, [r2, #4]
 80076de:	e7ca      	b.n	8007676 <_free_r+0x26>
 80076e0:	b003      	add	sp, #12
 80076e2:	bd30      	pop	{r4, r5, pc}
 80076e4:	20000660 	.word	0x20000660

080076e8 <sbrk_aligned>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	4e0e      	ldr	r6, [pc, #56]	; (8007724 <sbrk_aligned+0x3c>)
 80076ec:	460c      	mov	r4, r1
 80076ee:	6831      	ldr	r1, [r6, #0]
 80076f0:	4605      	mov	r5, r0
 80076f2:	b911      	cbnz	r1, 80076fa <sbrk_aligned+0x12>
 80076f4:	f000 fcf6 	bl	80080e4 <_sbrk_r>
 80076f8:	6030      	str	r0, [r6, #0]
 80076fa:	4621      	mov	r1, r4
 80076fc:	4628      	mov	r0, r5
 80076fe:	f000 fcf1 	bl	80080e4 <_sbrk_r>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	d00a      	beq.n	800771c <sbrk_aligned+0x34>
 8007706:	1cc4      	adds	r4, r0, #3
 8007708:	f024 0403 	bic.w	r4, r4, #3
 800770c:	42a0      	cmp	r0, r4
 800770e:	d007      	beq.n	8007720 <sbrk_aligned+0x38>
 8007710:	1a21      	subs	r1, r4, r0
 8007712:	4628      	mov	r0, r5
 8007714:	f000 fce6 	bl	80080e4 <_sbrk_r>
 8007718:	3001      	adds	r0, #1
 800771a:	d101      	bne.n	8007720 <sbrk_aligned+0x38>
 800771c:	f04f 34ff 	mov.w	r4, #4294967295
 8007720:	4620      	mov	r0, r4
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	20000664 	.word	0x20000664

08007728 <_malloc_r>:
 8007728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772c:	1ccd      	adds	r5, r1, #3
 800772e:	f025 0503 	bic.w	r5, r5, #3
 8007732:	3508      	adds	r5, #8
 8007734:	2d0c      	cmp	r5, #12
 8007736:	bf38      	it	cc
 8007738:	250c      	movcc	r5, #12
 800773a:	2d00      	cmp	r5, #0
 800773c:	4607      	mov	r7, r0
 800773e:	db01      	blt.n	8007744 <_malloc_r+0x1c>
 8007740:	42a9      	cmp	r1, r5
 8007742:	d905      	bls.n	8007750 <_malloc_r+0x28>
 8007744:	230c      	movs	r3, #12
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	2600      	movs	r6, #0
 800774a:	4630      	mov	r0, r6
 800774c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007750:	4e2e      	ldr	r6, [pc, #184]	; (800780c <_malloc_r+0xe4>)
 8007752:	f001 fbab 	bl	8008eac <__malloc_lock>
 8007756:	6833      	ldr	r3, [r6, #0]
 8007758:	461c      	mov	r4, r3
 800775a:	bb34      	cbnz	r4, 80077aa <_malloc_r+0x82>
 800775c:	4629      	mov	r1, r5
 800775e:	4638      	mov	r0, r7
 8007760:	f7ff ffc2 	bl	80076e8 <sbrk_aligned>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	4604      	mov	r4, r0
 8007768:	d14d      	bne.n	8007806 <_malloc_r+0xde>
 800776a:	6834      	ldr	r4, [r6, #0]
 800776c:	4626      	mov	r6, r4
 800776e:	2e00      	cmp	r6, #0
 8007770:	d140      	bne.n	80077f4 <_malloc_r+0xcc>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	4631      	mov	r1, r6
 8007776:	4638      	mov	r0, r7
 8007778:	eb04 0803 	add.w	r8, r4, r3
 800777c:	f000 fcb2 	bl	80080e4 <_sbrk_r>
 8007780:	4580      	cmp	r8, r0
 8007782:	d13a      	bne.n	80077fa <_malloc_r+0xd2>
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	3503      	adds	r5, #3
 8007788:	1a6d      	subs	r5, r5, r1
 800778a:	f025 0503 	bic.w	r5, r5, #3
 800778e:	3508      	adds	r5, #8
 8007790:	2d0c      	cmp	r5, #12
 8007792:	bf38      	it	cc
 8007794:	250c      	movcc	r5, #12
 8007796:	4629      	mov	r1, r5
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff ffa5 	bl	80076e8 <sbrk_aligned>
 800779e:	3001      	adds	r0, #1
 80077a0:	d02b      	beq.n	80077fa <_malloc_r+0xd2>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	442b      	add	r3, r5
 80077a6:	6023      	str	r3, [r4, #0]
 80077a8:	e00e      	b.n	80077c8 <_malloc_r+0xa0>
 80077aa:	6822      	ldr	r2, [r4, #0]
 80077ac:	1b52      	subs	r2, r2, r5
 80077ae:	d41e      	bmi.n	80077ee <_malloc_r+0xc6>
 80077b0:	2a0b      	cmp	r2, #11
 80077b2:	d916      	bls.n	80077e2 <_malloc_r+0xba>
 80077b4:	1961      	adds	r1, r4, r5
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	6025      	str	r5, [r4, #0]
 80077ba:	bf18      	it	ne
 80077bc:	6059      	strne	r1, [r3, #4]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	bf08      	it	eq
 80077c2:	6031      	streq	r1, [r6, #0]
 80077c4:	5162      	str	r2, [r4, r5]
 80077c6:	604b      	str	r3, [r1, #4]
 80077c8:	4638      	mov	r0, r7
 80077ca:	f104 060b 	add.w	r6, r4, #11
 80077ce:	f001 fb73 	bl	8008eb8 <__malloc_unlock>
 80077d2:	f026 0607 	bic.w	r6, r6, #7
 80077d6:	1d23      	adds	r3, r4, #4
 80077d8:	1af2      	subs	r2, r6, r3
 80077da:	d0b6      	beq.n	800774a <_malloc_r+0x22>
 80077dc:	1b9b      	subs	r3, r3, r6
 80077de:	50a3      	str	r3, [r4, r2]
 80077e0:	e7b3      	b.n	800774a <_malloc_r+0x22>
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	bf0c      	ite	eq
 80077e8:	6032      	streq	r2, [r6, #0]
 80077ea:	605a      	strne	r2, [r3, #4]
 80077ec:	e7ec      	b.n	80077c8 <_malloc_r+0xa0>
 80077ee:	4623      	mov	r3, r4
 80077f0:	6864      	ldr	r4, [r4, #4]
 80077f2:	e7b2      	b.n	800775a <_malloc_r+0x32>
 80077f4:	4634      	mov	r4, r6
 80077f6:	6876      	ldr	r6, [r6, #4]
 80077f8:	e7b9      	b.n	800776e <_malloc_r+0x46>
 80077fa:	230c      	movs	r3, #12
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4638      	mov	r0, r7
 8007800:	f001 fb5a 	bl	8008eb8 <__malloc_unlock>
 8007804:	e7a1      	b.n	800774a <_malloc_r+0x22>
 8007806:	6025      	str	r5, [r4, #0]
 8007808:	e7de      	b.n	80077c8 <_malloc_r+0xa0>
 800780a:	bf00      	nop
 800780c:	20000660 	.word	0x20000660

08007810 <__cvt>:
 8007810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007814:	ec55 4b10 	vmov	r4, r5, d0
 8007818:	2d00      	cmp	r5, #0
 800781a:	460e      	mov	r6, r1
 800781c:	4619      	mov	r1, r3
 800781e:	462b      	mov	r3, r5
 8007820:	bfbb      	ittet	lt
 8007822:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007826:	461d      	movlt	r5, r3
 8007828:	2300      	movge	r3, #0
 800782a:	232d      	movlt	r3, #45	; 0x2d
 800782c:	700b      	strb	r3, [r1, #0]
 800782e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007834:	4691      	mov	r9, r2
 8007836:	f023 0820 	bic.w	r8, r3, #32
 800783a:	bfbc      	itt	lt
 800783c:	4622      	movlt	r2, r4
 800783e:	4614      	movlt	r4, r2
 8007840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007844:	d005      	beq.n	8007852 <__cvt+0x42>
 8007846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800784a:	d100      	bne.n	800784e <__cvt+0x3e>
 800784c:	3601      	adds	r6, #1
 800784e:	2102      	movs	r1, #2
 8007850:	e000      	b.n	8007854 <__cvt+0x44>
 8007852:	2103      	movs	r1, #3
 8007854:	ab03      	add	r3, sp, #12
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	ab02      	add	r3, sp, #8
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	ec45 4b10 	vmov	d0, r4, r5
 8007860:	4653      	mov	r3, sl
 8007862:	4632      	mov	r2, r6
 8007864:	f000 fd30 	bl	80082c8 <_dtoa_r>
 8007868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800786c:	4607      	mov	r7, r0
 800786e:	d102      	bne.n	8007876 <__cvt+0x66>
 8007870:	f019 0f01 	tst.w	r9, #1
 8007874:	d022      	beq.n	80078bc <__cvt+0xac>
 8007876:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800787a:	eb07 0906 	add.w	r9, r7, r6
 800787e:	d110      	bne.n	80078a2 <__cvt+0x92>
 8007880:	783b      	ldrb	r3, [r7, #0]
 8007882:	2b30      	cmp	r3, #48	; 0x30
 8007884:	d10a      	bne.n	800789c <__cvt+0x8c>
 8007886:	2200      	movs	r2, #0
 8007888:	2300      	movs	r3, #0
 800788a:	4620      	mov	r0, r4
 800788c:	4629      	mov	r1, r5
 800788e:	f7f9 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007892:	b918      	cbnz	r0, 800789c <__cvt+0x8c>
 8007894:	f1c6 0601 	rsb	r6, r6, #1
 8007898:	f8ca 6000 	str.w	r6, [sl]
 800789c:	f8da 3000 	ldr.w	r3, [sl]
 80078a0:	4499      	add	r9, r3
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f9 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ae:	b108      	cbz	r0, 80078b4 <__cvt+0xa4>
 80078b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80078b4:	2230      	movs	r2, #48	; 0x30
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	454b      	cmp	r3, r9
 80078ba:	d307      	bcc.n	80078cc <__cvt+0xbc>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c0:	1bdb      	subs	r3, r3, r7
 80078c2:	4638      	mov	r0, r7
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	b004      	add	sp, #16
 80078c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078cc:	1c59      	adds	r1, r3, #1
 80078ce:	9103      	str	r1, [sp, #12]
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	e7f0      	b.n	80078b6 <__cvt+0xa6>

080078d4 <__exponent>:
 80078d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078d6:	4603      	mov	r3, r0
 80078d8:	2900      	cmp	r1, #0
 80078da:	bfb8      	it	lt
 80078dc:	4249      	neglt	r1, r1
 80078de:	f803 2b02 	strb.w	r2, [r3], #2
 80078e2:	bfb4      	ite	lt
 80078e4:	222d      	movlt	r2, #45	; 0x2d
 80078e6:	222b      	movge	r2, #43	; 0x2b
 80078e8:	2909      	cmp	r1, #9
 80078ea:	7042      	strb	r2, [r0, #1]
 80078ec:	dd2a      	ble.n	8007944 <__exponent+0x70>
 80078ee:	f10d 0407 	add.w	r4, sp, #7
 80078f2:	46a4      	mov	ip, r4
 80078f4:	270a      	movs	r7, #10
 80078f6:	46a6      	mov	lr, r4
 80078f8:	460a      	mov	r2, r1
 80078fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80078fe:	fb07 1516 	mls	r5, r7, r6, r1
 8007902:	3530      	adds	r5, #48	; 0x30
 8007904:	2a63      	cmp	r2, #99	; 0x63
 8007906:	f104 34ff 	add.w	r4, r4, #4294967295
 800790a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800790e:	4631      	mov	r1, r6
 8007910:	dcf1      	bgt.n	80078f6 <__exponent+0x22>
 8007912:	3130      	adds	r1, #48	; 0x30
 8007914:	f1ae 0502 	sub.w	r5, lr, #2
 8007918:	f804 1c01 	strb.w	r1, [r4, #-1]
 800791c:	1c44      	adds	r4, r0, #1
 800791e:	4629      	mov	r1, r5
 8007920:	4561      	cmp	r1, ip
 8007922:	d30a      	bcc.n	800793a <__exponent+0x66>
 8007924:	f10d 0209 	add.w	r2, sp, #9
 8007928:	eba2 020e 	sub.w	r2, r2, lr
 800792c:	4565      	cmp	r5, ip
 800792e:	bf88      	it	hi
 8007930:	2200      	movhi	r2, #0
 8007932:	4413      	add	r3, r2
 8007934:	1a18      	subs	r0, r3, r0
 8007936:	b003      	add	sp, #12
 8007938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800793a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800793e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007942:	e7ed      	b.n	8007920 <__exponent+0x4c>
 8007944:	2330      	movs	r3, #48	; 0x30
 8007946:	3130      	adds	r1, #48	; 0x30
 8007948:	7083      	strb	r3, [r0, #2]
 800794a:	70c1      	strb	r1, [r0, #3]
 800794c:	1d03      	adds	r3, r0, #4
 800794e:	e7f1      	b.n	8007934 <__exponent+0x60>

08007950 <_printf_float>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	ed2d 8b02 	vpush	{d8}
 8007958:	b08d      	sub	sp, #52	; 0x34
 800795a:	460c      	mov	r4, r1
 800795c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007960:	4616      	mov	r6, r2
 8007962:	461f      	mov	r7, r3
 8007964:	4605      	mov	r5, r0
 8007966:	f001 fa9d 	bl	8008ea4 <_localeconv_r>
 800796a:	f8d0 a000 	ldr.w	sl, [r0]
 800796e:	4650      	mov	r0, sl
 8007970:	f7f8 fc2e 	bl	80001d0 <strlen>
 8007974:	2300      	movs	r3, #0
 8007976:	930a      	str	r3, [sp, #40]	; 0x28
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	9305      	str	r3, [sp, #20]
 800797c:	f8d8 3000 	ldr.w	r3, [r8]
 8007980:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007984:	3307      	adds	r3, #7
 8007986:	f023 0307 	bic.w	r3, r3, #7
 800798a:	f103 0208 	add.w	r2, r3, #8
 800798e:	f8c8 2000 	str.w	r2, [r8]
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800799a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800799e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079a2:	9307      	str	r3, [sp, #28]
 80079a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80079a8:	ee08 0a10 	vmov	s16, r0
 80079ac:	4b9f      	ldr	r3, [pc, #636]	; (8007c2c <_printf_float+0x2dc>)
 80079ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	f7f9 f8b9 	bl	8000b2c <__aeabi_dcmpun>
 80079ba:	bb88      	cbnz	r0, 8007a20 <_printf_float+0xd0>
 80079bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079c0:	4b9a      	ldr	r3, [pc, #616]	; (8007c2c <_printf_float+0x2dc>)
 80079c2:	f04f 32ff 	mov.w	r2, #4294967295
 80079c6:	f7f9 f893 	bl	8000af0 <__aeabi_dcmple>
 80079ca:	bb48      	cbnz	r0, 8007a20 <_printf_float+0xd0>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f9 f882 	bl	8000adc <__aeabi_dcmplt>
 80079d8:	b110      	cbz	r0, 80079e0 <_printf_float+0x90>
 80079da:	232d      	movs	r3, #45	; 0x2d
 80079dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e0:	4b93      	ldr	r3, [pc, #588]	; (8007c30 <_printf_float+0x2e0>)
 80079e2:	4894      	ldr	r0, [pc, #592]	; (8007c34 <_printf_float+0x2e4>)
 80079e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079e8:	bf94      	ite	ls
 80079ea:	4698      	movls	r8, r3
 80079ec:	4680      	movhi	r8, r0
 80079ee:	2303      	movs	r3, #3
 80079f0:	6123      	str	r3, [r4, #16]
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	f023 0204 	bic.w	r2, r3, #4
 80079f8:	6022      	str	r2, [r4, #0]
 80079fa:	f04f 0900 	mov.w	r9, #0
 80079fe:	9700      	str	r7, [sp, #0]
 8007a00:	4633      	mov	r3, r6
 8007a02:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a04:	4621      	mov	r1, r4
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 f9d8 	bl	8007dbc <_printf_common>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f040 8090 	bne.w	8007b32 <_printf_float+0x1e2>
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	b00d      	add	sp, #52	; 0x34
 8007a18:	ecbd 8b02 	vpop	{d8}
 8007a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a20:	4642      	mov	r2, r8
 8007a22:	464b      	mov	r3, r9
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	f7f9 f880 	bl	8000b2c <__aeabi_dcmpun>
 8007a2c:	b140      	cbz	r0, 8007a40 <_printf_float+0xf0>
 8007a2e:	464b      	mov	r3, r9
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfbc      	itt	lt
 8007a34:	232d      	movlt	r3, #45	; 0x2d
 8007a36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a3a:	487f      	ldr	r0, [pc, #508]	; (8007c38 <_printf_float+0x2e8>)
 8007a3c:	4b7f      	ldr	r3, [pc, #508]	; (8007c3c <_printf_float+0x2ec>)
 8007a3e:	e7d1      	b.n	80079e4 <_printf_float+0x94>
 8007a40:	6863      	ldr	r3, [r4, #4]
 8007a42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a46:	9206      	str	r2, [sp, #24]
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	d13f      	bne.n	8007acc <_printf_float+0x17c>
 8007a4c:	2306      	movs	r3, #6
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	6861      	ldr	r1, [r4, #4]
 8007a54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9303      	str	r3, [sp, #12]
 8007a5c:	ab0a      	add	r3, sp, #40	; 0x28
 8007a5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a62:	ab09      	add	r3, sp, #36	; 0x24
 8007a64:	ec49 8b10 	vmov	d0, r8, r9
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	6022      	str	r2, [r4, #0]
 8007a6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a70:	4628      	mov	r0, r5
 8007a72:	f7ff fecd 	bl	8007810 <__cvt>
 8007a76:	9b06      	ldr	r3, [sp, #24]
 8007a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a7a:	2b47      	cmp	r3, #71	; 0x47
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	d108      	bne.n	8007a92 <_printf_float+0x142>
 8007a80:	1cc8      	adds	r0, r1, #3
 8007a82:	db02      	blt.n	8007a8a <_printf_float+0x13a>
 8007a84:	6863      	ldr	r3, [r4, #4]
 8007a86:	4299      	cmp	r1, r3
 8007a88:	dd41      	ble.n	8007b0e <_printf_float+0x1be>
 8007a8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a8e:	fa5f fb8b 	uxtb.w	fp, fp
 8007a92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a96:	d820      	bhi.n	8007ada <_printf_float+0x18a>
 8007a98:	3901      	subs	r1, #1
 8007a9a:	465a      	mov	r2, fp
 8007a9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aa0:	9109      	str	r1, [sp, #36]	; 0x24
 8007aa2:	f7ff ff17 	bl	80078d4 <__exponent>
 8007aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa8:	1813      	adds	r3, r2, r0
 8007aaa:	2a01      	cmp	r2, #1
 8007aac:	4681      	mov	r9, r0
 8007aae:	6123      	str	r3, [r4, #16]
 8007ab0:	dc02      	bgt.n	8007ab8 <_printf_float+0x168>
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	07d2      	lsls	r2, r2, #31
 8007ab6:	d501      	bpl.n	8007abc <_printf_float+0x16c>
 8007ab8:	3301      	adds	r3, #1
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d09c      	beq.n	80079fe <_printf_float+0xae>
 8007ac4:	232d      	movs	r3, #45	; 0x2d
 8007ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aca:	e798      	b.n	80079fe <_printf_float+0xae>
 8007acc:	9a06      	ldr	r2, [sp, #24]
 8007ace:	2a47      	cmp	r2, #71	; 0x47
 8007ad0:	d1be      	bne.n	8007a50 <_printf_float+0x100>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1bc      	bne.n	8007a50 <_printf_float+0x100>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e7b9      	b.n	8007a4e <_printf_float+0xfe>
 8007ada:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ade:	d118      	bne.n	8007b12 <_printf_float+0x1c2>
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	6863      	ldr	r3, [r4, #4]
 8007ae4:	dd0b      	ble.n	8007afe <_printf_float+0x1ae>
 8007ae6:	6121      	str	r1, [r4, #16]
 8007ae8:	b913      	cbnz	r3, 8007af0 <_printf_float+0x1a0>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	07d0      	lsls	r0, r2, #31
 8007aee:	d502      	bpl.n	8007af6 <_printf_float+0x1a6>
 8007af0:	3301      	adds	r3, #1
 8007af2:	440b      	add	r3, r1
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007af8:	f04f 0900 	mov.w	r9, #0
 8007afc:	e7de      	b.n	8007abc <_printf_float+0x16c>
 8007afe:	b913      	cbnz	r3, 8007b06 <_printf_float+0x1b6>
 8007b00:	6822      	ldr	r2, [r4, #0]
 8007b02:	07d2      	lsls	r2, r2, #31
 8007b04:	d501      	bpl.n	8007b0a <_printf_float+0x1ba>
 8007b06:	3302      	adds	r3, #2
 8007b08:	e7f4      	b.n	8007af4 <_printf_float+0x1a4>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7f2      	b.n	8007af4 <_printf_float+0x1a4>
 8007b0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b14:	4299      	cmp	r1, r3
 8007b16:	db05      	blt.n	8007b24 <_printf_float+0x1d4>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	6121      	str	r1, [r4, #16]
 8007b1c:	07d8      	lsls	r0, r3, #31
 8007b1e:	d5ea      	bpl.n	8007af6 <_printf_float+0x1a6>
 8007b20:	1c4b      	adds	r3, r1, #1
 8007b22:	e7e7      	b.n	8007af4 <_printf_float+0x1a4>
 8007b24:	2900      	cmp	r1, #0
 8007b26:	bfd4      	ite	le
 8007b28:	f1c1 0202 	rsble	r2, r1, #2
 8007b2c:	2201      	movgt	r2, #1
 8007b2e:	4413      	add	r3, r2
 8007b30:	e7e0      	b.n	8007af4 <_printf_float+0x1a4>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	055a      	lsls	r2, r3, #21
 8007b36:	d407      	bmi.n	8007b48 <_printf_float+0x1f8>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	4642      	mov	r2, r8
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b8      	blx	r7
 8007b42:	3001      	adds	r0, #1
 8007b44:	d12c      	bne.n	8007ba0 <_printf_float+0x250>
 8007b46:	e764      	b.n	8007a12 <_printf_float+0xc2>
 8007b48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b4c:	f240 80e0 	bls.w	8007d10 <_printf_float+0x3c0>
 8007b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b54:	2200      	movs	r2, #0
 8007b56:	2300      	movs	r3, #0
 8007b58:	f7f8 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d034      	beq.n	8007bca <_printf_float+0x27a>
 8007b60:	4a37      	ldr	r2, [pc, #220]	; (8007c40 <_printf_float+0x2f0>)
 8007b62:	2301      	movs	r3, #1
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f af51 	beq.w	8007a12 <_printf_float+0xc2>
 8007b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b74:	429a      	cmp	r2, r3
 8007b76:	db02      	blt.n	8007b7e <_printf_float+0x22e>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	07d8      	lsls	r0, r3, #31
 8007b7c:	d510      	bpl.n	8007ba0 <_printf_float+0x250>
 8007b7e:	ee18 3a10 	vmov	r3, s16
 8007b82:	4652      	mov	r2, sl
 8007b84:	4631      	mov	r1, r6
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	f43f af41 	beq.w	8007a12 <_printf_float+0xc2>
 8007b90:	f04f 0800 	mov.w	r8, #0
 8007b94:	f104 091a 	add.w	r9, r4, #26
 8007b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4543      	cmp	r3, r8
 8007b9e:	dc09      	bgt.n	8007bb4 <_printf_float+0x264>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	079b      	lsls	r3, r3, #30
 8007ba4:	f100 8105 	bmi.w	8007db2 <_printf_float+0x462>
 8007ba8:	68e0      	ldr	r0, [r4, #12]
 8007baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bac:	4298      	cmp	r0, r3
 8007bae:	bfb8      	it	lt
 8007bb0:	4618      	movlt	r0, r3
 8007bb2:	e730      	b.n	8007a16 <_printf_float+0xc6>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	464a      	mov	r2, r9
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4628      	mov	r0, r5
 8007bbc:	47b8      	blx	r7
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f43f af27 	beq.w	8007a12 <_printf_float+0xc2>
 8007bc4:	f108 0801 	add.w	r8, r8, #1
 8007bc8:	e7e6      	b.n	8007b98 <_printf_float+0x248>
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dc39      	bgt.n	8007c44 <_printf_float+0x2f4>
 8007bd0:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <_printf_float+0x2f0>)
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f af19 	beq.w	8007a12 <_printf_float+0xc2>
 8007be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d102      	bne.n	8007bee <_printf_float+0x29e>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	07d9      	lsls	r1, r3, #31
 8007bec:	d5d8      	bpl.n	8007ba0 <_printf_float+0x250>
 8007bee:	ee18 3a10 	vmov	r3, s16
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	f43f af09 	beq.w	8007a12 <_printf_float+0xc2>
 8007c00:	f04f 0900 	mov.w	r9, #0
 8007c04:	f104 0a1a 	add.w	sl, r4, #26
 8007c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0a:	425b      	negs	r3, r3
 8007c0c:	454b      	cmp	r3, r9
 8007c0e:	dc01      	bgt.n	8007c14 <_printf_float+0x2c4>
 8007c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c12:	e792      	b.n	8007b3a <_printf_float+0x1ea>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4652      	mov	r2, sl
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f aef7 	beq.w	8007a12 <_printf_float+0xc2>
 8007c24:	f109 0901 	add.w	r9, r9, #1
 8007c28:	e7ee      	b.n	8007c08 <_printf_float+0x2b8>
 8007c2a:	bf00      	nop
 8007c2c:	7fefffff 	.word	0x7fefffff
 8007c30:	0800ad8c 	.word	0x0800ad8c
 8007c34:	0800ad90 	.word	0x0800ad90
 8007c38:	0800ad98 	.word	0x0800ad98
 8007c3c:	0800ad94 	.word	0x0800ad94
 8007c40:	0800ad9c 	.word	0x0800ad9c
 8007c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	bfa8      	it	ge
 8007c4c:	461a      	movge	r2, r3
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	4691      	mov	r9, r2
 8007c52:	dc37      	bgt.n	8007cc4 <_printf_float+0x374>
 8007c54:	f04f 0b00 	mov.w	fp, #0
 8007c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c5c:	f104 021a 	add.w	r2, r4, #26
 8007c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	eba3 0309 	sub.w	r3, r3, r9
 8007c68:	455b      	cmp	r3, fp
 8007c6a:	dc33      	bgt.n	8007cd4 <_printf_float+0x384>
 8007c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c70:	429a      	cmp	r2, r3
 8007c72:	db3b      	blt.n	8007cec <_printf_float+0x39c>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	07da      	lsls	r2, r3, #31
 8007c78:	d438      	bmi.n	8007cec <_printf_float+0x39c>
 8007c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7c:	9a05      	ldr	r2, [sp, #20]
 8007c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c80:	1a9a      	subs	r2, r3, r2
 8007c82:	eba3 0901 	sub.w	r9, r3, r1
 8007c86:	4591      	cmp	r9, r2
 8007c88:	bfa8      	it	ge
 8007c8a:	4691      	movge	r9, r2
 8007c8c:	f1b9 0f00 	cmp.w	r9, #0
 8007c90:	dc35      	bgt.n	8007cfe <_printf_float+0x3ae>
 8007c92:	f04f 0800 	mov.w	r8, #0
 8007c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c9a:	f104 0a1a 	add.w	sl, r4, #26
 8007c9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	eba3 0309 	sub.w	r3, r3, r9
 8007ca8:	4543      	cmp	r3, r8
 8007caa:	f77f af79 	ble.w	8007ba0 <_printf_float+0x250>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f aeaa 	beq.w	8007a12 <_printf_float+0xc2>
 8007cbe:	f108 0801 	add.w	r8, r8, #1
 8007cc2:	e7ec      	b.n	8007c9e <_printf_float+0x34e>
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4642      	mov	r2, r8
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d1c0      	bne.n	8007c54 <_printf_float+0x304>
 8007cd2:	e69e      	b.n	8007a12 <_printf_float+0xc2>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	9205      	str	r2, [sp, #20]
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f ae97 	beq.w	8007a12 <_printf_float+0xc2>
 8007ce4:	9a05      	ldr	r2, [sp, #20]
 8007ce6:	f10b 0b01 	add.w	fp, fp, #1
 8007cea:	e7b9      	b.n	8007c60 <_printf_float+0x310>
 8007cec:	ee18 3a10 	vmov	r3, s16
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d1be      	bne.n	8007c7a <_printf_float+0x32a>
 8007cfc:	e689      	b.n	8007a12 <_printf_float+0xc2>
 8007cfe:	9a05      	ldr	r2, [sp, #20]
 8007d00:	464b      	mov	r3, r9
 8007d02:	4442      	add	r2, r8
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d1c1      	bne.n	8007c92 <_printf_float+0x342>
 8007d0e:	e680      	b.n	8007a12 <_printf_float+0xc2>
 8007d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d12:	2a01      	cmp	r2, #1
 8007d14:	dc01      	bgt.n	8007d1a <_printf_float+0x3ca>
 8007d16:	07db      	lsls	r3, r3, #31
 8007d18:	d538      	bpl.n	8007d8c <_printf_float+0x43c>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae74 	beq.w	8007a12 <_printf_float+0xc2>
 8007d2a:	ee18 3a10 	vmov	r3, s16
 8007d2e:	4652      	mov	r2, sl
 8007d30:	4631      	mov	r1, r6
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b8      	blx	r7
 8007d36:	3001      	adds	r0, #1
 8007d38:	f43f ae6b 	beq.w	8007a12 <_printf_float+0xc2>
 8007d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d40:	2200      	movs	r2, #0
 8007d42:	2300      	movs	r3, #0
 8007d44:	f7f8 fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d48:	b9d8      	cbnz	r0, 8007d82 <_printf_float+0x432>
 8007d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4c:	f108 0201 	add.w	r2, r8, #1
 8007d50:	3b01      	subs	r3, #1
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d10e      	bne.n	8007d7a <_printf_float+0x42a>
 8007d5c:	e659      	b.n	8007a12 <_printf_float+0xc2>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4652      	mov	r2, sl
 8007d62:	4631      	mov	r1, r6
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b8      	blx	r7
 8007d68:	3001      	adds	r0, #1
 8007d6a:	f43f ae52 	beq.w	8007a12 <_printf_float+0xc2>
 8007d6e:	f108 0801 	add.w	r8, r8, #1
 8007d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d74:	3b01      	subs	r3, #1
 8007d76:	4543      	cmp	r3, r8
 8007d78:	dcf1      	bgt.n	8007d5e <_printf_float+0x40e>
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d80:	e6dc      	b.n	8007b3c <_printf_float+0x1ec>
 8007d82:	f04f 0800 	mov.w	r8, #0
 8007d86:	f104 0a1a 	add.w	sl, r4, #26
 8007d8a:	e7f2      	b.n	8007d72 <_printf_float+0x422>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4642      	mov	r2, r8
 8007d90:	e7df      	b.n	8007d52 <_printf_float+0x402>
 8007d92:	2301      	movs	r3, #1
 8007d94:	464a      	mov	r2, r9
 8007d96:	4631      	mov	r1, r6
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b8      	blx	r7
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	f43f ae38 	beq.w	8007a12 <_printf_float+0xc2>
 8007da2:	f108 0801 	add.w	r8, r8, #1
 8007da6:	68e3      	ldr	r3, [r4, #12]
 8007da8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007daa:	1a5b      	subs	r3, r3, r1
 8007dac:	4543      	cmp	r3, r8
 8007dae:	dcf0      	bgt.n	8007d92 <_printf_float+0x442>
 8007db0:	e6fa      	b.n	8007ba8 <_printf_float+0x258>
 8007db2:	f04f 0800 	mov.w	r8, #0
 8007db6:	f104 0919 	add.w	r9, r4, #25
 8007dba:	e7f4      	b.n	8007da6 <_printf_float+0x456>

08007dbc <_printf_common>:
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	4699      	mov	r9, r3
 8007dc4:	688a      	ldr	r2, [r1, #8]
 8007dc6:	690b      	ldr	r3, [r1, #16]
 8007dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bfb8      	it	lt
 8007dd0:	4613      	movlt	r3, r2
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dd8:	4607      	mov	r7, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	b10a      	cbz	r2, 8007de2 <_printf_common+0x26>
 8007dde:	3301      	adds	r3, #1
 8007de0:	6033      	str	r3, [r6, #0]
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	0699      	lsls	r1, r3, #26
 8007de6:	bf42      	ittt	mi
 8007de8:	6833      	ldrmi	r3, [r6, #0]
 8007dea:	3302      	addmi	r3, #2
 8007dec:	6033      	strmi	r3, [r6, #0]
 8007dee:	6825      	ldr	r5, [r4, #0]
 8007df0:	f015 0506 	ands.w	r5, r5, #6
 8007df4:	d106      	bne.n	8007e04 <_printf_common+0x48>
 8007df6:	f104 0a19 	add.w	sl, r4, #25
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	6832      	ldr	r2, [r6, #0]
 8007dfe:	1a9b      	subs	r3, r3, r2
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	dc26      	bgt.n	8007e52 <_printf_common+0x96>
 8007e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e08:	1e13      	subs	r3, r2, #0
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	bf18      	it	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	0692      	lsls	r2, r2, #26
 8007e12:	d42b      	bmi.n	8007e6c <_printf_common+0xb0>
 8007e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e18:	4649      	mov	r1, r9
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	47c0      	blx	r8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d01e      	beq.n	8007e60 <_printf_common+0xa4>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	68e5      	ldr	r5, [r4, #12]
 8007e26:	6832      	ldr	r2, [r6, #0]
 8007e28:	f003 0306 	and.w	r3, r3, #6
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	bf08      	it	eq
 8007e30:	1aad      	subeq	r5, r5, r2
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	6922      	ldr	r2, [r4, #16]
 8007e36:	bf0c      	ite	eq
 8007e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e3c:	2500      	movne	r5, #0
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bfc4      	itt	gt
 8007e42:	1a9b      	subgt	r3, r3, r2
 8007e44:	18ed      	addgt	r5, r5, r3
 8007e46:	2600      	movs	r6, #0
 8007e48:	341a      	adds	r4, #26
 8007e4a:	42b5      	cmp	r5, r6
 8007e4c:	d11a      	bne.n	8007e84 <_printf_common+0xc8>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	e008      	b.n	8007e64 <_printf_common+0xa8>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4652      	mov	r2, sl
 8007e56:	4649      	mov	r1, r9
 8007e58:	4638      	mov	r0, r7
 8007e5a:	47c0      	blx	r8
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d103      	bne.n	8007e68 <_printf_common+0xac>
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	3501      	adds	r5, #1
 8007e6a:	e7c6      	b.n	8007dfa <_printf_common+0x3e>
 8007e6c:	18e1      	adds	r1, r4, r3
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	2030      	movs	r0, #48	; 0x30
 8007e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e76:	4422      	add	r2, r4
 8007e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e80:	3302      	adds	r3, #2
 8007e82:	e7c7      	b.n	8007e14 <_printf_common+0x58>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4622      	mov	r2, r4
 8007e88:	4649      	mov	r1, r9
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c0      	blx	r8
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d0e6      	beq.n	8007e60 <_printf_common+0xa4>
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7d9      	b.n	8007e4a <_printf_common+0x8e>
	...

08007e98 <_printf_i>:
 8007e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	7e0f      	ldrb	r7, [r1, #24]
 8007e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ea0:	2f78      	cmp	r7, #120	; 0x78
 8007ea2:	4691      	mov	r9, r2
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	469a      	mov	sl, r3
 8007eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eae:	d807      	bhi.n	8007ec0 <_printf_i+0x28>
 8007eb0:	2f62      	cmp	r7, #98	; 0x62
 8007eb2:	d80a      	bhi.n	8007eca <_printf_i+0x32>
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	f000 80d8 	beq.w	800806a <_printf_i+0x1d2>
 8007eba:	2f58      	cmp	r7, #88	; 0x58
 8007ebc:	f000 80a3 	beq.w	8008006 <_printf_i+0x16e>
 8007ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ec8:	e03a      	b.n	8007f40 <_printf_i+0xa8>
 8007eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ece:	2b15      	cmp	r3, #21
 8007ed0:	d8f6      	bhi.n	8007ec0 <_printf_i+0x28>
 8007ed2:	a101      	add	r1, pc, #4	; (adr r1, 8007ed8 <_printf_i+0x40>)
 8007ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ed8:	08007f31 	.word	0x08007f31
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007ec1 	.word	0x08007ec1
 8007ee4:	08007ec1 	.word	0x08007ec1
 8007ee8:	08007ec1 	.word	0x08007ec1
 8007eec:	08007ec1 	.word	0x08007ec1
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	08007ec1 	.word	0x08007ec1
 8007ef8:	08007ec1 	.word	0x08007ec1
 8007efc:	08007ec1 	.word	0x08007ec1
 8007f00:	08007ec1 	.word	0x08007ec1
 8007f04:	08008051 	.word	0x08008051
 8007f08:	08007f75 	.word	0x08007f75
 8007f0c:	08008033 	.word	0x08008033
 8007f10:	08007ec1 	.word	0x08007ec1
 8007f14:	08007ec1 	.word	0x08007ec1
 8007f18:	08008073 	.word	0x08008073
 8007f1c:	08007ec1 	.word	0x08007ec1
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	08007ec1 	.word	0x08007ec1
 8007f28:	08007ec1 	.word	0x08007ec1
 8007f2c:	0800803b 	.word	0x0800803b
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0a3      	b.n	800808c <_printf_i+0x1f4>
 8007f44:	6820      	ldr	r0, [r4, #0]
 8007f46:	6829      	ldr	r1, [r5, #0]
 8007f48:	0606      	lsls	r6, r0, #24
 8007f4a:	f101 0304 	add.w	r3, r1, #4
 8007f4e:	d50a      	bpl.n	8007f66 <_printf_i+0xce>
 8007f50:	680e      	ldr	r6, [r1, #0]
 8007f52:	602b      	str	r3, [r5, #0]
 8007f54:	2e00      	cmp	r6, #0
 8007f56:	da03      	bge.n	8007f60 <_printf_i+0xc8>
 8007f58:	232d      	movs	r3, #45	; 0x2d
 8007f5a:	4276      	negs	r6, r6
 8007f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f60:	485e      	ldr	r0, [pc, #376]	; (80080dc <_printf_i+0x244>)
 8007f62:	230a      	movs	r3, #10
 8007f64:	e019      	b.n	8007f9a <_printf_i+0x102>
 8007f66:	680e      	ldr	r6, [r1, #0]
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f6e:	bf18      	it	ne
 8007f70:	b236      	sxthne	r6, r6
 8007f72:	e7ef      	b.n	8007f54 <_printf_i+0xbc>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	1d19      	adds	r1, r3, #4
 8007f7a:	6029      	str	r1, [r5, #0]
 8007f7c:	0601      	lsls	r1, r0, #24
 8007f7e:	d501      	bpl.n	8007f84 <_printf_i+0xec>
 8007f80:	681e      	ldr	r6, [r3, #0]
 8007f82:	e002      	b.n	8007f8a <_printf_i+0xf2>
 8007f84:	0646      	lsls	r6, r0, #25
 8007f86:	d5fb      	bpl.n	8007f80 <_printf_i+0xe8>
 8007f88:	881e      	ldrh	r6, [r3, #0]
 8007f8a:	4854      	ldr	r0, [pc, #336]	; (80080dc <_printf_i+0x244>)
 8007f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f8e:	bf0c      	ite	eq
 8007f90:	2308      	moveq	r3, #8
 8007f92:	230a      	movne	r3, #10
 8007f94:	2100      	movs	r1, #0
 8007f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f9a:	6865      	ldr	r5, [r4, #4]
 8007f9c:	60a5      	str	r5, [r4, #8]
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	bfa2      	ittt	ge
 8007fa2:	6821      	ldrge	r1, [r4, #0]
 8007fa4:	f021 0104 	bicge.w	r1, r1, #4
 8007fa8:	6021      	strge	r1, [r4, #0]
 8007faa:	b90e      	cbnz	r6, 8007fb0 <_printf_i+0x118>
 8007fac:	2d00      	cmp	r5, #0
 8007fae:	d04d      	beq.n	800804c <_printf_i+0x1b4>
 8007fb0:	4615      	mov	r5, r2
 8007fb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fb6:	fb03 6711 	mls	r7, r3, r1, r6
 8007fba:	5dc7      	ldrb	r7, [r0, r7]
 8007fbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fc0:	4637      	mov	r7, r6
 8007fc2:	42bb      	cmp	r3, r7
 8007fc4:	460e      	mov	r6, r1
 8007fc6:	d9f4      	bls.n	8007fb2 <_printf_i+0x11a>
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d10b      	bne.n	8007fe4 <_printf_i+0x14c>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	07de      	lsls	r6, r3, #31
 8007fd0:	d508      	bpl.n	8007fe4 <_printf_i+0x14c>
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	6861      	ldr	r1, [r4, #4]
 8007fd6:	4299      	cmp	r1, r3
 8007fd8:	bfde      	ittt	le
 8007fda:	2330      	movle	r3, #48	; 0x30
 8007fdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fe4:	1b52      	subs	r2, r2, r5
 8007fe6:	6122      	str	r2, [r4, #16]
 8007fe8:	f8cd a000 	str.w	sl, [sp]
 8007fec:	464b      	mov	r3, r9
 8007fee:	aa03      	add	r2, sp, #12
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	f7ff fee2 	bl	8007dbc <_printf_common>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d14c      	bne.n	8008096 <_printf_i+0x1fe>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b004      	add	sp, #16
 8008002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008006:	4835      	ldr	r0, [pc, #212]	; (80080dc <_printf_i+0x244>)
 8008008:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800800c:	6829      	ldr	r1, [r5, #0]
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	f851 6b04 	ldr.w	r6, [r1], #4
 8008014:	6029      	str	r1, [r5, #0]
 8008016:	061d      	lsls	r5, r3, #24
 8008018:	d514      	bpl.n	8008044 <_printf_i+0x1ac>
 800801a:	07df      	lsls	r7, r3, #31
 800801c:	bf44      	itt	mi
 800801e:	f043 0320 	orrmi.w	r3, r3, #32
 8008022:	6023      	strmi	r3, [r4, #0]
 8008024:	b91e      	cbnz	r6, 800802e <_printf_i+0x196>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	f023 0320 	bic.w	r3, r3, #32
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	2310      	movs	r3, #16
 8008030:	e7b0      	b.n	8007f94 <_printf_i+0xfc>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	f043 0320 	orr.w	r3, r3, #32
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	2378      	movs	r3, #120	; 0x78
 800803c:	4828      	ldr	r0, [pc, #160]	; (80080e0 <_printf_i+0x248>)
 800803e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008042:	e7e3      	b.n	800800c <_printf_i+0x174>
 8008044:	0659      	lsls	r1, r3, #25
 8008046:	bf48      	it	mi
 8008048:	b2b6      	uxthmi	r6, r6
 800804a:	e7e6      	b.n	800801a <_printf_i+0x182>
 800804c:	4615      	mov	r5, r2
 800804e:	e7bb      	b.n	8007fc8 <_printf_i+0x130>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	6826      	ldr	r6, [r4, #0]
 8008054:	6961      	ldr	r1, [r4, #20]
 8008056:	1d18      	adds	r0, r3, #4
 8008058:	6028      	str	r0, [r5, #0]
 800805a:	0635      	lsls	r5, r6, #24
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	d501      	bpl.n	8008064 <_printf_i+0x1cc>
 8008060:	6019      	str	r1, [r3, #0]
 8008062:	e002      	b.n	800806a <_printf_i+0x1d2>
 8008064:	0670      	lsls	r0, r6, #25
 8008066:	d5fb      	bpl.n	8008060 <_printf_i+0x1c8>
 8008068:	8019      	strh	r1, [r3, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	4615      	mov	r5, r2
 8008070:	e7ba      	b.n	8007fe8 <_printf_i+0x150>
 8008072:	682b      	ldr	r3, [r5, #0]
 8008074:	1d1a      	adds	r2, r3, #4
 8008076:	602a      	str	r2, [r5, #0]
 8008078:	681d      	ldr	r5, [r3, #0]
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	2100      	movs	r1, #0
 800807e:	4628      	mov	r0, r5
 8008080:	f7f8 f8ae 	bl	80001e0 <memchr>
 8008084:	b108      	cbz	r0, 800808a <_printf_i+0x1f2>
 8008086:	1b40      	subs	r0, r0, r5
 8008088:	6060      	str	r0, [r4, #4]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	6123      	str	r3, [r4, #16]
 800808e:	2300      	movs	r3, #0
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008094:	e7a8      	b.n	8007fe8 <_printf_i+0x150>
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	462a      	mov	r2, r5
 800809a:	4649      	mov	r1, r9
 800809c:	4640      	mov	r0, r8
 800809e:	47d0      	blx	sl
 80080a0:	3001      	adds	r0, #1
 80080a2:	d0ab      	beq.n	8007ffc <_printf_i+0x164>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	079b      	lsls	r3, r3, #30
 80080a8:	d413      	bmi.n	80080d2 <_printf_i+0x23a>
 80080aa:	68e0      	ldr	r0, [r4, #12]
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	4298      	cmp	r0, r3
 80080b0:	bfb8      	it	lt
 80080b2:	4618      	movlt	r0, r3
 80080b4:	e7a4      	b.n	8008000 <_printf_i+0x168>
 80080b6:	2301      	movs	r3, #1
 80080b8:	4632      	mov	r2, r6
 80080ba:	4649      	mov	r1, r9
 80080bc:	4640      	mov	r0, r8
 80080be:	47d0      	blx	sl
 80080c0:	3001      	adds	r0, #1
 80080c2:	d09b      	beq.n	8007ffc <_printf_i+0x164>
 80080c4:	3501      	adds	r5, #1
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	9903      	ldr	r1, [sp, #12]
 80080ca:	1a5b      	subs	r3, r3, r1
 80080cc:	42ab      	cmp	r3, r5
 80080ce:	dcf2      	bgt.n	80080b6 <_printf_i+0x21e>
 80080d0:	e7eb      	b.n	80080aa <_printf_i+0x212>
 80080d2:	2500      	movs	r5, #0
 80080d4:	f104 0619 	add.w	r6, r4, #25
 80080d8:	e7f5      	b.n	80080c6 <_printf_i+0x22e>
 80080da:	bf00      	nop
 80080dc:	0800ad9e 	.word	0x0800ad9e
 80080e0:	0800adaf 	.word	0x0800adaf

080080e4 <_sbrk_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d06      	ldr	r5, [pc, #24]	; (8008100 <_sbrk_r+0x1c>)
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	f7fa f8e0 	bl	80022b4 <_sbrk>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_sbrk_r+0x1a>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_sbrk_r+0x1a>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	20000668 	.word	0x20000668

08008104 <sniprintf>:
 8008104:	b40c      	push	{r2, r3}
 8008106:	b530      	push	{r4, r5, lr}
 8008108:	4b17      	ldr	r3, [pc, #92]	; (8008168 <sniprintf+0x64>)
 800810a:	1e0c      	subs	r4, r1, #0
 800810c:	681d      	ldr	r5, [r3, #0]
 800810e:	b09d      	sub	sp, #116	; 0x74
 8008110:	da08      	bge.n	8008124 <sniprintf+0x20>
 8008112:	238b      	movs	r3, #139	; 0x8b
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f04f 30ff 	mov.w	r0, #4294967295
 800811a:	b01d      	add	sp, #116	; 0x74
 800811c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008120:	b002      	add	sp, #8
 8008122:	4770      	bx	lr
 8008124:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008128:	f8ad 3014 	strh.w	r3, [sp, #20]
 800812c:	bf14      	ite	ne
 800812e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008132:	4623      	moveq	r3, r4
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800813c:	9002      	str	r0, [sp, #8]
 800813e:	9006      	str	r0, [sp, #24]
 8008140:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008146:	ab21      	add	r3, sp, #132	; 0x84
 8008148:	a902      	add	r1, sp, #8
 800814a:	4628      	mov	r0, r5
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f001 faaf 	bl	80096b0 <_svfiprintf_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	bfbc      	itt	lt
 8008156:	238b      	movlt	r3, #139	; 0x8b
 8008158:	602b      	strlt	r3, [r5, #0]
 800815a:	2c00      	cmp	r4, #0
 800815c:	d0dd      	beq.n	800811a <sniprintf+0x16>
 800815e:	9b02      	ldr	r3, [sp, #8]
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e7d9      	b.n	800811a <sniprintf+0x16>
 8008166:	bf00      	nop
 8008168:	2000000c 	.word	0x2000000c

0800816c <siprintf>:
 800816c:	b40e      	push	{r1, r2, r3}
 800816e:	b500      	push	{lr}
 8008170:	b09c      	sub	sp, #112	; 0x70
 8008172:	ab1d      	add	r3, sp, #116	; 0x74
 8008174:	9002      	str	r0, [sp, #8]
 8008176:	9006      	str	r0, [sp, #24]
 8008178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800817c:	4809      	ldr	r0, [pc, #36]	; (80081a4 <siprintf+0x38>)
 800817e:	9107      	str	r1, [sp, #28]
 8008180:	9104      	str	r1, [sp, #16]
 8008182:	4909      	ldr	r1, [pc, #36]	; (80081a8 <siprintf+0x3c>)
 8008184:	f853 2b04 	ldr.w	r2, [r3], #4
 8008188:	9105      	str	r1, [sp, #20]
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	a902      	add	r1, sp, #8
 8008190:	f001 fa8e 	bl	80096b0 <_svfiprintf_r>
 8008194:	9b02      	ldr	r3, [sp, #8]
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	b01c      	add	sp, #112	; 0x70
 800819c:	f85d eb04 	ldr.w	lr, [sp], #4
 80081a0:	b003      	add	sp, #12
 80081a2:	4770      	bx	lr
 80081a4:	2000000c 	.word	0x2000000c
 80081a8:	ffff0208 	.word	0xffff0208

080081ac <quorem>:
 80081ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b0:	6903      	ldr	r3, [r0, #16]
 80081b2:	690c      	ldr	r4, [r1, #16]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	4607      	mov	r7, r0
 80081b8:	f2c0 8081 	blt.w	80082be <quorem+0x112>
 80081bc:	3c01      	subs	r4, #1
 80081be:	f101 0814 	add.w	r8, r1, #20
 80081c2:	f100 0514 	add.w	r5, r0, #20
 80081c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d4:	3301      	adds	r3, #1
 80081d6:	429a      	cmp	r2, r3
 80081d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80081e4:	d331      	bcc.n	800824a <quorem+0x9e>
 80081e6:	f04f 0e00 	mov.w	lr, #0
 80081ea:	4640      	mov	r0, r8
 80081ec:	46ac      	mov	ip, r5
 80081ee:	46f2      	mov	sl, lr
 80081f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80081f4:	b293      	uxth	r3, r2
 80081f6:	fb06 e303 	mla	r3, r6, r3, lr
 80081fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081fe:	b29b      	uxth	r3, r3
 8008200:	ebaa 0303 	sub.w	r3, sl, r3
 8008204:	f8dc a000 	ldr.w	sl, [ip]
 8008208:	0c12      	lsrs	r2, r2, #16
 800820a:	fa13 f38a 	uxtah	r3, r3, sl
 800820e:	fb06 e202 	mla	r2, r6, r2, lr
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	9b00      	ldr	r3, [sp, #0]
 8008216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800821a:	b292      	uxth	r2, r2
 800821c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008224:	f8bd 3000 	ldrh.w	r3, [sp]
 8008228:	4581      	cmp	r9, r0
 800822a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800822e:	f84c 3b04 	str.w	r3, [ip], #4
 8008232:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008236:	d2db      	bcs.n	80081f0 <quorem+0x44>
 8008238:	f855 300b 	ldr.w	r3, [r5, fp]
 800823c:	b92b      	cbnz	r3, 800824a <quorem+0x9e>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	3b04      	subs	r3, #4
 8008242:	429d      	cmp	r5, r3
 8008244:	461a      	mov	r2, r3
 8008246:	d32e      	bcc.n	80082a6 <quorem+0xfa>
 8008248:	613c      	str	r4, [r7, #16]
 800824a:	4638      	mov	r0, r7
 800824c:	f001 f8bc 	bl	80093c8 <__mcmp>
 8008250:	2800      	cmp	r0, #0
 8008252:	db24      	blt.n	800829e <quorem+0xf2>
 8008254:	3601      	adds	r6, #1
 8008256:	4628      	mov	r0, r5
 8008258:	f04f 0c00 	mov.w	ip, #0
 800825c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008260:	f8d0 e000 	ldr.w	lr, [r0]
 8008264:	b293      	uxth	r3, r2
 8008266:	ebac 0303 	sub.w	r3, ip, r3
 800826a:	0c12      	lsrs	r2, r2, #16
 800826c:	fa13 f38e 	uxtah	r3, r3, lr
 8008270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008278:	b29b      	uxth	r3, r3
 800827a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800827e:	45c1      	cmp	r9, r8
 8008280:	f840 3b04 	str.w	r3, [r0], #4
 8008284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008288:	d2e8      	bcs.n	800825c <quorem+0xb0>
 800828a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800828e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008292:	b922      	cbnz	r2, 800829e <quorem+0xf2>
 8008294:	3b04      	subs	r3, #4
 8008296:	429d      	cmp	r5, r3
 8008298:	461a      	mov	r2, r3
 800829a:	d30a      	bcc.n	80082b2 <quorem+0x106>
 800829c:	613c      	str	r4, [r7, #16]
 800829e:	4630      	mov	r0, r6
 80082a0:	b003      	add	sp, #12
 80082a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	3b04      	subs	r3, #4
 80082aa:	2a00      	cmp	r2, #0
 80082ac:	d1cc      	bne.n	8008248 <quorem+0x9c>
 80082ae:	3c01      	subs	r4, #1
 80082b0:	e7c7      	b.n	8008242 <quorem+0x96>
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	3b04      	subs	r3, #4
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	d1f0      	bne.n	800829c <quorem+0xf0>
 80082ba:	3c01      	subs	r4, #1
 80082bc:	e7eb      	b.n	8008296 <quorem+0xea>
 80082be:	2000      	movs	r0, #0
 80082c0:	e7ee      	b.n	80082a0 <quorem+0xf4>
 80082c2:	0000      	movs	r0, r0
 80082c4:	0000      	movs	r0, r0
	...

080082c8 <_dtoa_r>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ed2d 8b04 	vpush	{d8-d9}
 80082d0:	ec57 6b10 	vmov	r6, r7, d0
 80082d4:	b093      	sub	sp, #76	; 0x4c
 80082d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082dc:	9106      	str	r1, [sp, #24]
 80082de:	ee10 aa10 	vmov	sl, s0
 80082e2:	4604      	mov	r4, r0
 80082e4:	9209      	str	r2, [sp, #36]	; 0x24
 80082e6:	930c      	str	r3, [sp, #48]	; 0x30
 80082e8:	46bb      	mov	fp, r7
 80082ea:	b975      	cbnz	r5, 800830a <_dtoa_r+0x42>
 80082ec:	2010      	movs	r0, #16
 80082ee:	f7ff f989 	bl	8007604 <malloc>
 80082f2:	4602      	mov	r2, r0
 80082f4:	6260      	str	r0, [r4, #36]	; 0x24
 80082f6:	b920      	cbnz	r0, 8008302 <_dtoa_r+0x3a>
 80082f8:	4ba7      	ldr	r3, [pc, #668]	; (8008598 <_dtoa_r+0x2d0>)
 80082fa:	21ea      	movs	r1, #234	; 0xea
 80082fc:	48a7      	ldr	r0, [pc, #668]	; (800859c <_dtoa_r+0x2d4>)
 80082fe:	f001 fad7 	bl	80098b0 <__assert_func>
 8008302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008306:	6005      	str	r5, [r0, #0]
 8008308:	60c5      	str	r5, [r0, #12]
 800830a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830c:	6819      	ldr	r1, [r3, #0]
 800830e:	b151      	cbz	r1, 8008326 <_dtoa_r+0x5e>
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	604a      	str	r2, [r1, #4]
 8008314:	2301      	movs	r3, #1
 8008316:	4093      	lsls	r3, r2
 8008318:	608b      	str	r3, [r1, #8]
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fe12 	bl	8008f44 <_Bfree>
 8008320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	1e3b      	subs	r3, r7, #0
 8008328:	bfaa      	itet	ge
 800832a:	2300      	movge	r3, #0
 800832c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008330:	f8c8 3000 	strge.w	r3, [r8]
 8008334:	4b9a      	ldr	r3, [pc, #616]	; (80085a0 <_dtoa_r+0x2d8>)
 8008336:	bfbc      	itt	lt
 8008338:	2201      	movlt	r2, #1
 800833a:	f8c8 2000 	strlt.w	r2, [r8]
 800833e:	ea33 030b 	bics.w	r3, r3, fp
 8008342:	d11b      	bne.n	800837c <_dtoa_r+0xb4>
 8008344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008346:	f242 730f 	movw	r3, #9999	; 0x270f
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008350:	4333      	orrs	r3, r6
 8008352:	f000 8592 	beq.w	8008e7a <_dtoa_r+0xbb2>
 8008356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008358:	b963      	cbnz	r3, 8008374 <_dtoa_r+0xac>
 800835a:	4b92      	ldr	r3, [pc, #584]	; (80085a4 <_dtoa_r+0x2dc>)
 800835c:	e022      	b.n	80083a4 <_dtoa_r+0xdc>
 800835e:	4b92      	ldr	r3, [pc, #584]	; (80085a8 <_dtoa_r+0x2e0>)
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	3308      	adds	r3, #8
 8008364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	9801      	ldr	r0, [sp, #4]
 800836a:	b013      	add	sp, #76	; 0x4c
 800836c:	ecbd 8b04 	vpop	{d8-d9}
 8008370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008374:	4b8b      	ldr	r3, [pc, #556]	; (80085a4 <_dtoa_r+0x2dc>)
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	3303      	adds	r3, #3
 800837a:	e7f3      	b.n	8008364 <_dtoa_r+0x9c>
 800837c:	2200      	movs	r2, #0
 800837e:	2300      	movs	r3, #0
 8008380:	4650      	mov	r0, sl
 8008382:	4659      	mov	r1, fp
 8008384:	f7f8 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008388:	ec4b ab19 	vmov	d9, sl, fp
 800838c:	4680      	mov	r8, r0
 800838e:	b158      	cbz	r0, 80083a8 <_dtoa_r+0xe0>
 8008390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008392:	2301      	movs	r3, #1
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 856b 	beq.w	8008e74 <_dtoa_r+0xbac>
 800839e:	4883      	ldr	r0, [pc, #524]	; (80085ac <_dtoa_r+0x2e4>)
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	1e43      	subs	r3, r0, #1
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	e7df      	b.n	8008368 <_dtoa_r+0xa0>
 80083a8:	ec4b ab10 	vmov	d0, sl, fp
 80083ac:	aa10      	add	r2, sp, #64	; 0x40
 80083ae:	a911      	add	r1, sp, #68	; 0x44
 80083b0:	4620      	mov	r0, r4
 80083b2:	f001 f8af 	bl	8009514 <__d2b>
 80083b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083ba:	ee08 0a10 	vmov	s16, r0
 80083be:	2d00      	cmp	r5, #0
 80083c0:	f000 8084 	beq.w	80084cc <_dtoa_r+0x204>
 80083c4:	ee19 3a90 	vmov	r3, s19
 80083c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083d0:	4656      	mov	r6, sl
 80083d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083de:	4b74      	ldr	r3, [pc, #464]	; (80085b0 <_dtoa_r+0x2e8>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f7 ff4f 	bl	8000288 <__aeabi_dsub>
 80083ea:	a365      	add	r3, pc, #404	; (adr r3, 8008580 <_dtoa_r+0x2b8>)
 80083ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f0:	f7f8 f902 	bl	80005f8 <__aeabi_dmul>
 80083f4:	a364      	add	r3, pc, #400	; (adr r3, 8008588 <_dtoa_r+0x2c0>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7f7 ff47 	bl	800028c <__adddf3>
 80083fe:	4606      	mov	r6, r0
 8008400:	4628      	mov	r0, r5
 8008402:	460f      	mov	r7, r1
 8008404:	f7f8 f88e 	bl	8000524 <__aeabi_i2d>
 8008408:	a361      	add	r3, pc, #388	; (adr r3, 8008590 <_dtoa_r+0x2c8>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 f8f3 	bl	80005f8 <__aeabi_dmul>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f7 ff37 	bl	800028c <__adddf3>
 800841e:	4606      	mov	r6, r0
 8008420:	460f      	mov	r7, r1
 8008422:	f7f8 fb99 	bl	8000b58 <__aeabi_d2iz>
 8008426:	2200      	movs	r2, #0
 8008428:	9000      	str	r0, [sp, #0]
 800842a:	2300      	movs	r3, #0
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fb54 	bl	8000adc <__aeabi_dcmplt>
 8008434:	b150      	cbz	r0, 800844c <_dtoa_r+0x184>
 8008436:	9800      	ldr	r0, [sp, #0]
 8008438:	f7f8 f874 	bl	8000524 <__aeabi_i2d>
 800843c:	4632      	mov	r2, r6
 800843e:	463b      	mov	r3, r7
 8008440:	f7f8 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008444:	b910      	cbnz	r0, 800844c <_dtoa_r+0x184>
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	3b01      	subs	r3, #1
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	9b00      	ldr	r3, [sp, #0]
 800844e:	2b16      	cmp	r3, #22
 8008450:	d85a      	bhi.n	8008508 <_dtoa_r+0x240>
 8008452:	9a00      	ldr	r2, [sp, #0]
 8008454:	4b57      	ldr	r3, [pc, #348]	; (80085b4 <_dtoa_r+0x2ec>)
 8008456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	ec51 0b19 	vmov	r0, r1, d9
 8008462:	f7f8 fb3b 	bl	8000adc <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	d050      	beq.n	800850c <_dtoa_r+0x244>
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	3b01      	subs	r3, #1
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	930b      	str	r3, [sp, #44]	; 0x2c
 8008474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008476:	1b5d      	subs	r5, r3, r5
 8008478:	1e6b      	subs	r3, r5, #1
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	bf45      	ittet	mi
 800847e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008482:	9304      	strmi	r3, [sp, #16]
 8008484:	2300      	movpl	r3, #0
 8008486:	2300      	movmi	r3, #0
 8008488:	bf4c      	ite	mi
 800848a:	9305      	strmi	r3, [sp, #20]
 800848c:	9304      	strpl	r3, [sp, #16]
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	db3d      	blt.n	8008510 <_dtoa_r+0x248>
 8008494:	9b05      	ldr	r3, [sp, #20]
 8008496:	9a00      	ldr	r2, [sp, #0]
 8008498:	920a      	str	r2, [sp, #40]	; 0x28
 800849a:	4413      	add	r3, r2
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	2300      	movs	r3, #0
 80084a0:	9307      	str	r3, [sp, #28]
 80084a2:	9b06      	ldr	r3, [sp, #24]
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	f200 8089 	bhi.w	80085bc <_dtoa_r+0x2f4>
 80084aa:	2b05      	cmp	r3, #5
 80084ac:	bfc4      	itt	gt
 80084ae:	3b04      	subgt	r3, #4
 80084b0:	9306      	strgt	r3, [sp, #24]
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	f1a3 0302 	sub.w	r3, r3, #2
 80084b8:	bfcc      	ite	gt
 80084ba:	2500      	movgt	r5, #0
 80084bc:	2501      	movle	r5, #1
 80084be:	2b03      	cmp	r3, #3
 80084c0:	f200 8087 	bhi.w	80085d2 <_dtoa_r+0x30a>
 80084c4:	e8df f003 	tbb	[pc, r3]
 80084c8:	59383a2d 	.word	0x59383a2d
 80084cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084d0:	441d      	add	r5, r3
 80084d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	bfc1      	itttt	gt
 80084da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80084e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084ea:	bfda      	itte	le
 80084ec:	f1c3 0320 	rsble	r3, r3, #32
 80084f0:	fa06 f003 	lslle.w	r0, r6, r3
 80084f4:	4318      	orrgt	r0, r3
 80084f6:	f7f8 f805 	bl	8000504 <__aeabi_ui2d>
 80084fa:	2301      	movs	r3, #1
 80084fc:	4606      	mov	r6, r0
 80084fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008502:	3d01      	subs	r5, #1
 8008504:	930e      	str	r3, [sp, #56]	; 0x38
 8008506:	e76a      	b.n	80083de <_dtoa_r+0x116>
 8008508:	2301      	movs	r3, #1
 800850a:	e7b2      	b.n	8008472 <_dtoa_r+0x1aa>
 800850c:	900b      	str	r0, [sp, #44]	; 0x2c
 800850e:	e7b1      	b.n	8008474 <_dtoa_r+0x1ac>
 8008510:	9b04      	ldr	r3, [sp, #16]
 8008512:	9a00      	ldr	r2, [sp, #0]
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	4253      	negs	r3, r2
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	2300      	movs	r3, #0
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	e7bf      	b.n	80084a2 <_dtoa_r+0x1da>
 8008522:	2300      	movs	r3, #0
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc55      	bgt.n	80085d8 <_dtoa_r+0x310>
 800852c:	2301      	movs	r3, #1
 800852e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008532:	461a      	mov	r2, r3
 8008534:	9209      	str	r2, [sp, #36]	; 0x24
 8008536:	e00c      	b.n	8008552 <_dtoa_r+0x28a>
 8008538:	2301      	movs	r3, #1
 800853a:	e7f3      	b.n	8008524 <_dtoa_r+0x25c>
 800853c:	2300      	movs	r3, #0
 800853e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	4413      	add	r3, r2
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	3301      	adds	r3, #1
 800854a:	2b01      	cmp	r3, #1
 800854c:	9303      	str	r3, [sp, #12]
 800854e:	bfb8      	it	lt
 8008550:	2301      	movlt	r3, #1
 8008552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008554:	2200      	movs	r2, #0
 8008556:	6042      	str	r2, [r0, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	f102 0614 	add.w	r6, r2, #20
 800855e:	429e      	cmp	r6, r3
 8008560:	6841      	ldr	r1, [r0, #4]
 8008562:	d93d      	bls.n	80085e0 <_dtoa_r+0x318>
 8008564:	4620      	mov	r0, r4
 8008566:	f000 fcad 	bl	8008ec4 <_Balloc>
 800856a:	9001      	str	r0, [sp, #4]
 800856c:	2800      	cmp	r0, #0
 800856e:	d13b      	bne.n	80085e8 <_dtoa_r+0x320>
 8008570:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <_dtoa_r+0x2f0>)
 8008572:	4602      	mov	r2, r0
 8008574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008578:	e6c0      	b.n	80082fc <_dtoa_r+0x34>
 800857a:	2301      	movs	r3, #1
 800857c:	e7df      	b.n	800853e <_dtoa_r+0x276>
 800857e:	bf00      	nop
 8008580:	636f4361 	.word	0x636f4361
 8008584:	3fd287a7 	.word	0x3fd287a7
 8008588:	8b60c8b3 	.word	0x8b60c8b3
 800858c:	3fc68a28 	.word	0x3fc68a28
 8008590:	509f79fb 	.word	0x509f79fb
 8008594:	3fd34413 	.word	0x3fd34413
 8008598:	0800aece 	.word	0x0800aece
 800859c:	0800aee5 	.word	0x0800aee5
 80085a0:	7ff00000 	.word	0x7ff00000
 80085a4:	0800aeca 	.word	0x0800aeca
 80085a8:	0800aec1 	.word	0x0800aec1
 80085ac:	0800ad9d 	.word	0x0800ad9d
 80085b0:	3ff80000 	.word	0x3ff80000
 80085b4:	0800afd8 	.word	0x0800afd8
 80085b8:	0800af40 	.word	0x0800af40
 80085bc:	2501      	movs	r5, #1
 80085be:	2300      	movs	r3, #0
 80085c0:	9306      	str	r3, [sp, #24]
 80085c2:	9508      	str	r5, [sp, #32]
 80085c4:	f04f 33ff 	mov.w	r3, #4294967295
 80085c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085cc:	2200      	movs	r2, #0
 80085ce:	2312      	movs	r3, #18
 80085d0:	e7b0      	b.n	8008534 <_dtoa_r+0x26c>
 80085d2:	2301      	movs	r3, #1
 80085d4:	9308      	str	r3, [sp, #32]
 80085d6:	e7f5      	b.n	80085c4 <_dtoa_r+0x2fc>
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085de:	e7b8      	b.n	8008552 <_dtoa_r+0x28a>
 80085e0:	3101      	adds	r1, #1
 80085e2:	6041      	str	r1, [r0, #4]
 80085e4:	0052      	lsls	r2, r2, #1
 80085e6:	e7b8      	b.n	800855a <_dtoa_r+0x292>
 80085e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ea:	9a01      	ldr	r2, [sp, #4]
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	2b0e      	cmp	r3, #14
 80085f2:	f200 809d 	bhi.w	8008730 <_dtoa_r+0x468>
 80085f6:	2d00      	cmp	r5, #0
 80085f8:	f000 809a 	beq.w	8008730 <_dtoa_r+0x468>
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dd32      	ble.n	8008668 <_dtoa_r+0x3a0>
 8008602:	4ab7      	ldr	r2, [pc, #732]	; (80088e0 <_dtoa_r+0x618>)
 8008604:	f003 030f 	and.w	r3, r3, #15
 8008608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800860c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008610:	9b00      	ldr	r3, [sp, #0]
 8008612:	05d8      	lsls	r0, r3, #23
 8008614:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008618:	d516      	bpl.n	8008648 <_dtoa_r+0x380>
 800861a:	4bb2      	ldr	r3, [pc, #712]	; (80088e4 <_dtoa_r+0x61c>)
 800861c:	ec51 0b19 	vmov	r0, r1, d9
 8008620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008624:	f7f8 f912 	bl	800084c <__aeabi_ddiv>
 8008628:	f007 070f 	and.w	r7, r7, #15
 800862c:	4682      	mov	sl, r0
 800862e:	468b      	mov	fp, r1
 8008630:	2503      	movs	r5, #3
 8008632:	4eac      	ldr	r6, [pc, #688]	; (80088e4 <_dtoa_r+0x61c>)
 8008634:	b957      	cbnz	r7, 800864c <_dtoa_r+0x384>
 8008636:	4642      	mov	r2, r8
 8008638:	464b      	mov	r3, r9
 800863a:	4650      	mov	r0, sl
 800863c:	4659      	mov	r1, fp
 800863e:	f7f8 f905 	bl	800084c <__aeabi_ddiv>
 8008642:	4682      	mov	sl, r0
 8008644:	468b      	mov	fp, r1
 8008646:	e028      	b.n	800869a <_dtoa_r+0x3d2>
 8008648:	2502      	movs	r5, #2
 800864a:	e7f2      	b.n	8008632 <_dtoa_r+0x36a>
 800864c:	07f9      	lsls	r1, r7, #31
 800864e:	d508      	bpl.n	8008662 <_dtoa_r+0x39a>
 8008650:	4640      	mov	r0, r8
 8008652:	4649      	mov	r1, r9
 8008654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	3501      	adds	r5, #1
 800865e:	4680      	mov	r8, r0
 8008660:	4689      	mov	r9, r1
 8008662:	107f      	asrs	r7, r7, #1
 8008664:	3608      	adds	r6, #8
 8008666:	e7e5      	b.n	8008634 <_dtoa_r+0x36c>
 8008668:	f000 809b 	beq.w	80087a2 <_dtoa_r+0x4da>
 800866c:	9b00      	ldr	r3, [sp, #0]
 800866e:	4f9d      	ldr	r7, [pc, #628]	; (80088e4 <_dtoa_r+0x61c>)
 8008670:	425e      	negs	r6, r3
 8008672:	4b9b      	ldr	r3, [pc, #620]	; (80088e0 <_dtoa_r+0x618>)
 8008674:	f006 020f 	and.w	r2, r6, #15
 8008678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	ec51 0b19 	vmov	r0, r1, d9
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	1136      	asrs	r6, r6, #4
 800868a:	4682      	mov	sl, r0
 800868c:	468b      	mov	fp, r1
 800868e:	2300      	movs	r3, #0
 8008690:	2502      	movs	r5, #2
 8008692:	2e00      	cmp	r6, #0
 8008694:	d17a      	bne.n	800878c <_dtoa_r+0x4c4>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1d3      	bne.n	8008642 <_dtoa_r+0x37a>
 800869a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8082 	beq.w	80087a6 <_dtoa_r+0x4de>
 80086a2:	4b91      	ldr	r3, [pc, #580]	; (80088e8 <_dtoa_r+0x620>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	4650      	mov	r0, sl
 80086a8:	4659      	mov	r1, fp
 80086aa:	f7f8 fa17 	bl	8000adc <__aeabi_dcmplt>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d079      	beq.n	80087a6 <_dtoa_r+0x4de>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d076      	beq.n	80087a6 <_dtoa_r+0x4de>
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	dd36      	ble.n	800872c <_dtoa_r+0x464>
 80086be:	9b00      	ldr	r3, [sp, #0]
 80086c0:	4650      	mov	r0, sl
 80086c2:	4659      	mov	r1, fp
 80086c4:	1e5f      	subs	r7, r3, #1
 80086c6:	2200      	movs	r2, #0
 80086c8:	4b88      	ldr	r3, [pc, #544]	; (80088ec <_dtoa_r+0x624>)
 80086ca:	f7f7 ff95 	bl	80005f8 <__aeabi_dmul>
 80086ce:	9e02      	ldr	r6, [sp, #8]
 80086d0:	4682      	mov	sl, r0
 80086d2:	468b      	mov	fp, r1
 80086d4:	3501      	adds	r5, #1
 80086d6:	4628      	mov	r0, r5
 80086d8:	f7f7 ff24 	bl	8000524 <__aeabi_i2d>
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	f7f7 ff8a 	bl	80005f8 <__aeabi_dmul>
 80086e4:	4b82      	ldr	r3, [pc, #520]	; (80088f0 <_dtoa_r+0x628>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	f7f7 fdd0 	bl	800028c <__adddf3>
 80086ec:	46d0      	mov	r8, sl
 80086ee:	46d9      	mov	r9, fp
 80086f0:	4682      	mov	sl, r0
 80086f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086f6:	2e00      	cmp	r6, #0
 80086f8:	d158      	bne.n	80087ac <_dtoa_r+0x4e4>
 80086fa:	4b7e      	ldr	r3, [pc, #504]	; (80088f4 <_dtoa_r+0x62c>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f7 fdc1 	bl	8000288 <__aeabi_dsub>
 8008706:	4652      	mov	r2, sl
 8008708:	465b      	mov	r3, fp
 800870a:	4680      	mov	r8, r0
 800870c:	4689      	mov	r9, r1
 800870e:	f7f8 fa03 	bl	8000b18 <__aeabi_dcmpgt>
 8008712:	2800      	cmp	r0, #0
 8008714:	f040 8295 	bne.w	8008c42 <_dtoa_r+0x97a>
 8008718:	4652      	mov	r2, sl
 800871a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800871e:	4640      	mov	r0, r8
 8008720:	4649      	mov	r1, r9
 8008722:	f7f8 f9db 	bl	8000adc <__aeabi_dcmplt>
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 8289 	bne.w	8008c3e <_dtoa_r+0x976>
 800872c:	ec5b ab19 	vmov	sl, fp, d9
 8008730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008732:	2b00      	cmp	r3, #0
 8008734:	f2c0 8148 	blt.w	80089c8 <_dtoa_r+0x700>
 8008738:	9a00      	ldr	r2, [sp, #0]
 800873a:	2a0e      	cmp	r2, #14
 800873c:	f300 8144 	bgt.w	80089c8 <_dtoa_r+0x700>
 8008740:	4b67      	ldr	r3, [pc, #412]	; (80088e0 <_dtoa_r+0x618>)
 8008742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008746:	e9d3 8900 	ldrd	r8, r9, [r3]
 800874a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	f280 80d5 	bge.w	80088fc <_dtoa_r+0x634>
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f300 80d1 	bgt.w	80088fc <_dtoa_r+0x634>
 800875a:	f040 826f 	bne.w	8008c3c <_dtoa_r+0x974>
 800875e:	4b65      	ldr	r3, [pc, #404]	; (80088f4 <_dtoa_r+0x62c>)
 8008760:	2200      	movs	r2, #0
 8008762:	4640      	mov	r0, r8
 8008764:	4649      	mov	r1, r9
 8008766:	f7f7 ff47 	bl	80005f8 <__aeabi_dmul>
 800876a:	4652      	mov	r2, sl
 800876c:	465b      	mov	r3, fp
 800876e:	f7f8 f9c9 	bl	8000b04 <__aeabi_dcmpge>
 8008772:	9e03      	ldr	r6, [sp, #12]
 8008774:	4637      	mov	r7, r6
 8008776:	2800      	cmp	r0, #0
 8008778:	f040 8245 	bne.w	8008c06 <_dtoa_r+0x93e>
 800877c:	9d01      	ldr	r5, [sp, #4]
 800877e:	2331      	movs	r3, #49	; 0x31
 8008780:	f805 3b01 	strb.w	r3, [r5], #1
 8008784:	9b00      	ldr	r3, [sp, #0]
 8008786:	3301      	adds	r3, #1
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	e240      	b.n	8008c0e <_dtoa_r+0x946>
 800878c:	07f2      	lsls	r2, r6, #31
 800878e:	d505      	bpl.n	800879c <_dtoa_r+0x4d4>
 8008790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	3501      	adds	r5, #1
 800879a:	2301      	movs	r3, #1
 800879c:	1076      	asrs	r6, r6, #1
 800879e:	3708      	adds	r7, #8
 80087a0:	e777      	b.n	8008692 <_dtoa_r+0x3ca>
 80087a2:	2502      	movs	r5, #2
 80087a4:	e779      	b.n	800869a <_dtoa_r+0x3d2>
 80087a6:	9f00      	ldr	r7, [sp, #0]
 80087a8:	9e03      	ldr	r6, [sp, #12]
 80087aa:	e794      	b.n	80086d6 <_dtoa_r+0x40e>
 80087ac:	9901      	ldr	r1, [sp, #4]
 80087ae:	4b4c      	ldr	r3, [pc, #304]	; (80088e0 <_dtoa_r+0x618>)
 80087b0:	4431      	add	r1, r6
 80087b2:	910d      	str	r1, [sp, #52]	; 0x34
 80087b4:	9908      	ldr	r1, [sp, #32]
 80087b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087be:	2900      	cmp	r1, #0
 80087c0:	d043      	beq.n	800884a <_dtoa_r+0x582>
 80087c2:	494d      	ldr	r1, [pc, #308]	; (80088f8 <_dtoa_r+0x630>)
 80087c4:	2000      	movs	r0, #0
 80087c6:	f7f8 f841 	bl	800084c <__aeabi_ddiv>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	9d01      	ldr	r5, [sp, #4]
 80087d4:	4682      	mov	sl, r0
 80087d6:	468b      	mov	fp, r1
 80087d8:	4649      	mov	r1, r9
 80087da:	4640      	mov	r0, r8
 80087dc:	f7f8 f9bc 	bl	8000b58 <__aeabi_d2iz>
 80087e0:	4606      	mov	r6, r0
 80087e2:	f7f7 fe9f 	bl	8000524 <__aeabi_i2d>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	f7f7 fd4b 	bl	8000288 <__aeabi_dsub>
 80087f2:	3630      	adds	r6, #48	; 0x30
 80087f4:	f805 6b01 	strb.w	r6, [r5], #1
 80087f8:	4652      	mov	r2, sl
 80087fa:	465b      	mov	r3, fp
 80087fc:	4680      	mov	r8, r0
 80087fe:	4689      	mov	r9, r1
 8008800:	f7f8 f96c 	bl	8000adc <__aeabi_dcmplt>
 8008804:	2800      	cmp	r0, #0
 8008806:	d163      	bne.n	80088d0 <_dtoa_r+0x608>
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	4936      	ldr	r1, [pc, #216]	; (80088e8 <_dtoa_r+0x620>)
 800880e:	2000      	movs	r0, #0
 8008810:	f7f7 fd3a 	bl	8000288 <__aeabi_dsub>
 8008814:	4652      	mov	r2, sl
 8008816:	465b      	mov	r3, fp
 8008818:	f7f8 f960 	bl	8000adc <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	f040 80b5 	bne.w	800898c <_dtoa_r+0x6c4>
 8008822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008824:	429d      	cmp	r5, r3
 8008826:	d081      	beq.n	800872c <_dtoa_r+0x464>
 8008828:	4b30      	ldr	r3, [pc, #192]	; (80088ec <_dtoa_r+0x624>)
 800882a:	2200      	movs	r2, #0
 800882c:	4650      	mov	r0, sl
 800882e:	4659      	mov	r1, fp
 8008830:	f7f7 fee2 	bl	80005f8 <__aeabi_dmul>
 8008834:	4b2d      	ldr	r3, [pc, #180]	; (80088ec <_dtoa_r+0x624>)
 8008836:	4682      	mov	sl, r0
 8008838:	468b      	mov	fp, r1
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	2200      	movs	r2, #0
 8008840:	f7f7 feda 	bl	80005f8 <__aeabi_dmul>
 8008844:	4680      	mov	r8, r0
 8008846:	4689      	mov	r9, r1
 8008848:	e7c6      	b.n	80087d8 <_dtoa_r+0x510>
 800884a:	4650      	mov	r0, sl
 800884c:	4659      	mov	r1, fp
 800884e:	f7f7 fed3 	bl	80005f8 <__aeabi_dmul>
 8008852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008854:	9d01      	ldr	r5, [sp, #4]
 8008856:	930f      	str	r3, [sp, #60]	; 0x3c
 8008858:	4682      	mov	sl, r0
 800885a:	468b      	mov	fp, r1
 800885c:	4649      	mov	r1, r9
 800885e:	4640      	mov	r0, r8
 8008860:	f7f8 f97a 	bl	8000b58 <__aeabi_d2iz>
 8008864:	4606      	mov	r6, r0
 8008866:	f7f7 fe5d 	bl	8000524 <__aeabi_i2d>
 800886a:	3630      	adds	r6, #48	; 0x30
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f7 fd08 	bl	8000288 <__aeabi_dsub>
 8008878:	f805 6b01 	strb.w	r6, [r5], #1
 800887c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800887e:	429d      	cmp	r5, r3
 8008880:	4680      	mov	r8, r0
 8008882:	4689      	mov	r9, r1
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	d124      	bne.n	80088d4 <_dtoa_r+0x60c>
 800888a:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <_dtoa_r+0x630>)
 800888c:	4650      	mov	r0, sl
 800888e:	4659      	mov	r1, fp
 8008890:	f7f7 fcfc 	bl	800028c <__adddf3>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f8 f93c 	bl	8000b18 <__aeabi_dcmpgt>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d173      	bne.n	800898c <_dtoa_r+0x6c4>
 80088a4:	4652      	mov	r2, sl
 80088a6:	465b      	mov	r3, fp
 80088a8:	4913      	ldr	r1, [pc, #76]	; (80088f8 <_dtoa_r+0x630>)
 80088aa:	2000      	movs	r0, #0
 80088ac:	f7f7 fcec 	bl	8000288 <__aeabi_dsub>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4640      	mov	r0, r8
 80088b6:	4649      	mov	r1, r9
 80088b8:	f7f8 f910 	bl	8000adc <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	f43f af35 	beq.w	800872c <_dtoa_r+0x464>
 80088c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088c4:	1e6b      	subs	r3, r5, #1
 80088c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088cc:	2b30      	cmp	r3, #48	; 0x30
 80088ce:	d0f8      	beq.n	80088c2 <_dtoa_r+0x5fa>
 80088d0:	9700      	str	r7, [sp, #0]
 80088d2:	e049      	b.n	8008968 <_dtoa_r+0x6a0>
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <_dtoa_r+0x624>)
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	4680      	mov	r8, r0
 80088dc:	4689      	mov	r9, r1
 80088de:	e7bd      	b.n	800885c <_dtoa_r+0x594>
 80088e0:	0800afd8 	.word	0x0800afd8
 80088e4:	0800afb0 	.word	0x0800afb0
 80088e8:	3ff00000 	.word	0x3ff00000
 80088ec:	40240000 	.word	0x40240000
 80088f0:	401c0000 	.word	0x401c0000
 80088f4:	40140000 	.word	0x40140000
 80088f8:	3fe00000 	.word	0x3fe00000
 80088fc:	9d01      	ldr	r5, [sp, #4]
 80088fe:	4656      	mov	r6, sl
 8008900:	465f      	mov	r7, fp
 8008902:	4642      	mov	r2, r8
 8008904:	464b      	mov	r3, r9
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 ff9f 	bl	800084c <__aeabi_ddiv>
 800890e:	f7f8 f923 	bl	8000b58 <__aeabi_d2iz>
 8008912:	4682      	mov	sl, r0
 8008914:	f7f7 fe06 	bl	8000524 <__aeabi_i2d>
 8008918:	4642      	mov	r2, r8
 800891a:	464b      	mov	r3, r9
 800891c:	f7f7 fe6c 	bl	80005f8 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800892c:	f7f7 fcac 	bl	8000288 <__aeabi_dsub>
 8008930:	f805 6b01 	strb.w	r6, [r5], #1
 8008934:	9e01      	ldr	r6, [sp, #4]
 8008936:	9f03      	ldr	r7, [sp, #12]
 8008938:	1bae      	subs	r6, r5, r6
 800893a:	42b7      	cmp	r7, r6
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	d135      	bne.n	80089ae <_dtoa_r+0x6e6>
 8008942:	f7f7 fca3 	bl	800028c <__adddf3>
 8008946:	4642      	mov	r2, r8
 8008948:	464b      	mov	r3, r9
 800894a:	4606      	mov	r6, r0
 800894c:	460f      	mov	r7, r1
 800894e:	f7f8 f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 8008952:	b9d0      	cbnz	r0, 800898a <_dtoa_r+0x6c2>
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f8 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008960:	b110      	cbz	r0, 8008968 <_dtoa_r+0x6a0>
 8008962:	f01a 0f01 	tst.w	sl, #1
 8008966:	d110      	bne.n	800898a <_dtoa_r+0x6c2>
 8008968:	4620      	mov	r0, r4
 800896a:	ee18 1a10 	vmov	r1, s16
 800896e:	f000 fae9 	bl	8008f44 <_Bfree>
 8008972:	2300      	movs	r3, #0
 8008974:	9800      	ldr	r0, [sp, #0]
 8008976:	702b      	strb	r3, [r5, #0]
 8008978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800897a:	3001      	adds	r0, #1
 800897c:	6018      	str	r0, [r3, #0]
 800897e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008980:	2b00      	cmp	r3, #0
 8008982:	f43f acf1 	beq.w	8008368 <_dtoa_r+0xa0>
 8008986:	601d      	str	r5, [r3, #0]
 8008988:	e4ee      	b.n	8008368 <_dtoa_r+0xa0>
 800898a:	9f00      	ldr	r7, [sp, #0]
 800898c:	462b      	mov	r3, r5
 800898e:	461d      	mov	r5, r3
 8008990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008994:	2a39      	cmp	r2, #57	; 0x39
 8008996:	d106      	bne.n	80089a6 <_dtoa_r+0x6de>
 8008998:	9a01      	ldr	r2, [sp, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d1f7      	bne.n	800898e <_dtoa_r+0x6c6>
 800899e:	9901      	ldr	r1, [sp, #4]
 80089a0:	2230      	movs	r2, #48	; 0x30
 80089a2:	3701      	adds	r7, #1
 80089a4:	700a      	strb	r2, [r1, #0]
 80089a6:	781a      	ldrb	r2, [r3, #0]
 80089a8:	3201      	adds	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
 80089ac:	e790      	b.n	80088d0 <_dtoa_r+0x608>
 80089ae:	4ba6      	ldr	r3, [pc, #664]	; (8008c48 <_dtoa_r+0x980>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7f7 fe21 	bl	80005f8 <__aeabi_dmul>
 80089b6:	2200      	movs	r2, #0
 80089b8:	2300      	movs	r3, #0
 80089ba:	4606      	mov	r6, r0
 80089bc:	460f      	mov	r7, r1
 80089be:	f7f8 f883 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d09d      	beq.n	8008902 <_dtoa_r+0x63a>
 80089c6:	e7cf      	b.n	8008968 <_dtoa_r+0x6a0>
 80089c8:	9a08      	ldr	r2, [sp, #32]
 80089ca:	2a00      	cmp	r2, #0
 80089cc:	f000 80d7 	beq.w	8008b7e <_dtoa_r+0x8b6>
 80089d0:	9a06      	ldr	r2, [sp, #24]
 80089d2:	2a01      	cmp	r2, #1
 80089d4:	f300 80ba 	bgt.w	8008b4c <_dtoa_r+0x884>
 80089d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089da:	2a00      	cmp	r2, #0
 80089dc:	f000 80b2 	beq.w	8008b44 <_dtoa_r+0x87c>
 80089e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089e4:	9e07      	ldr	r6, [sp, #28]
 80089e6:	9d04      	ldr	r5, [sp, #16]
 80089e8:	9a04      	ldr	r2, [sp, #16]
 80089ea:	441a      	add	r2, r3
 80089ec:	9204      	str	r2, [sp, #16]
 80089ee:	9a05      	ldr	r2, [sp, #20]
 80089f0:	2101      	movs	r1, #1
 80089f2:	441a      	add	r2, r3
 80089f4:	4620      	mov	r0, r4
 80089f6:	9205      	str	r2, [sp, #20]
 80089f8:	f000 fb5c 	bl	80090b4 <__i2b>
 80089fc:	4607      	mov	r7, r0
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	dd0c      	ble.n	8008a1c <_dtoa_r+0x754>
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dd09      	ble.n	8008a1c <_dtoa_r+0x754>
 8008a08:	42ab      	cmp	r3, r5
 8008a0a:	9a04      	ldr	r2, [sp, #16]
 8008a0c:	bfa8      	it	ge
 8008a0e:	462b      	movge	r3, r5
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	9204      	str	r2, [sp, #16]
 8008a14:	9a05      	ldr	r2, [sp, #20]
 8008a16:	1aed      	subs	r5, r5, r3
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	9305      	str	r3, [sp, #20]
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	b31b      	cbz	r3, 8008a68 <_dtoa_r+0x7a0>
 8008a20:	9b08      	ldr	r3, [sp, #32]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80af 	beq.w	8008b86 <_dtoa_r+0x8be>
 8008a28:	2e00      	cmp	r6, #0
 8008a2a:	dd13      	ble.n	8008a54 <_dtoa_r+0x78c>
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4632      	mov	r2, r6
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fbff 	bl	8009234 <__pow5mult>
 8008a36:	ee18 2a10 	vmov	r2, s16
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 fb4e 	bl	80090e0 <__multiply>
 8008a44:	ee18 1a10 	vmov	r1, s16
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 fa7a 	bl	8008f44 <_Bfree>
 8008a50:	ee08 8a10 	vmov	s16, r8
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	1b9a      	subs	r2, r3, r6
 8008a58:	d006      	beq.n	8008a68 <_dtoa_r+0x7a0>
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fbe8 	bl	8009234 <__pow5mult>
 8008a64:	ee08 0a10 	vmov	s16, r0
 8008a68:	2101      	movs	r1, #1
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fb22 	bl	80090b4 <__i2b>
 8008a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	f340 8088 	ble.w	8008b8a <_dtoa_r+0x8c2>
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 fbd8 	bl	8009234 <__pow5mult>
 8008a84:	9b06      	ldr	r3, [sp, #24]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	4606      	mov	r6, r0
 8008a8a:	f340 8081 	ble.w	8008b90 <_dtoa_r+0x8c8>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	6933      	ldr	r3, [r6, #16]
 8008a94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a98:	6918      	ldr	r0, [r3, #16]
 8008a9a:	f000 fabb 	bl	8009014 <__hi0bits>
 8008a9e:	f1c0 0020 	rsb	r0, r0, #32
 8008aa2:	9b05      	ldr	r3, [sp, #20]
 8008aa4:	4418      	add	r0, r3
 8008aa6:	f010 001f 	ands.w	r0, r0, #31
 8008aaa:	f000 8092 	beq.w	8008bd2 <_dtoa_r+0x90a>
 8008aae:	f1c0 0320 	rsb	r3, r0, #32
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	f340 808a 	ble.w	8008bcc <_dtoa_r+0x904>
 8008ab8:	f1c0 001c 	rsb	r0, r0, #28
 8008abc:	9b04      	ldr	r3, [sp, #16]
 8008abe:	4403      	add	r3, r0
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	9b05      	ldr	r3, [sp, #20]
 8008ac4:	4403      	add	r3, r0
 8008ac6:	4405      	add	r5, r0
 8008ac8:	9305      	str	r3, [sp, #20]
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dd07      	ble.n	8008ae0 <_dtoa_r+0x818>
 8008ad0:	ee18 1a10 	vmov	r1, s16
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 fc06 	bl	80092e8 <__lshift>
 8008adc:	ee08 0a10 	vmov	s16, r0
 8008ae0:	9b05      	ldr	r3, [sp, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dd05      	ble.n	8008af2 <_dtoa_r+0x82a>
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fbfc 	bl	80092e8 <__lshift>
 8008af0:	4606      	mov	r6, r0
 8008af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d06e      	beq.n	8008bd6 <_dtoa_r+0x90e>
 8008af8:	ee18 0a10 	vmov	r0, s16
 8008afc:	4631      	mov	r1, r6
 8008afe:	f000 fc63 	bl	80093c8 <__mcmp>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	da67      	bge.n	8008bd6 <_dtoa_r+0x90e>
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	ee18 1a10 	vmov	r1, s16
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	220a      	movs	r2, #10
 8008b12:	2300      	movs	r3, #0
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fa37 	bl	8008f88 <__multadd>
 8008b1a:	9b08      	ldr	r3, [sp, #32]
 8008b1c:	ee08 0a10 	vmov	s16, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 81b1 	beq.w	8008e88 <_dtoa_r+0xbc0>
 8008b26:	2300      	movs	r3, #0
 8008b28:	4639      	mov	r1, r7
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fa2b 	bl	8008f88 <__multadd>
 8008b32:	9b02      	ldr	r3, [sp, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	4607      	mov	r7, r0
 8008b38:	f300 808e 	bgt.w	8008c58 <_dtoa_r+0x990>
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	dc51      	bgt.n	8008be6 <_dtoa_r+0x91e>
 8008b42:	e089      	b.n	8008c58 <_dtoa_r+0x990>
 8008b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b4a:	e74b      	b.n	80089e4 <_dtoa_r+0x71c>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	1e5e      	subs	r6, r3, #1
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	42b3      	cmp	r3, r6
 8008b54:	bfbf      	itttt	lt
 8008b56:	9b07      	ldrlt	r3, [sp, #28]
 8008b58:	9607      	strlt	r6, [sp, #28]
 8008b5a:	1af2      	sublt	r2, r6, r3
 8008b5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b5e:	bfb6      	itet	lt
 8008b60:	189b      	addlt	r3, r3, r2
 8008b62:	1b9e      	subge	r6, r3, r6
 8008b64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	bfb8      	it	lt
 8008b6a:	2600      	movlt	r6, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfb7      	itett	lt
 8008b70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b78:	1a9d      	sublt	r5, r3, r2
 8008b7a:	2300      	movlt	r3, #0
 8008b7c:	e734      	b.n	80089e8 <_dtoa_r+0x720>
 8008b7e:	9e07      	ldr	r6, [sp, #28]
 8008b80:	9d04      	ldr	r5, [sp, #16]
 8008b82:	9f08      	ldr	r7, [sp, #32]
 8008b84:	e73b      	b.n	80089fe <_dtoa_r+0x736>
 8008b86:	9a07      	ldr	r2, [sp, #28]
 8008b88:	e767      	b.n	8008a5a <_dtoa_r+0x792>
 8008b8a:	9b06      	ldr	r3, [sp, #24]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	dc18      	bgt.n	8008bc2 <_dtoa_r+0x8fa>
 8008b90:	f1ba 0f00 	cmp.w	sl, #0
 8008b94:	d115      	bne.n	8008bc2 <_dtoa_r+0x8fa>
 8008b96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b9a:	b993      	cbnz	r3, 8008bc2 <_dtoa_r+0x8fa>
 8008b9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ba0:	0d1b      	lsrs	r3, r3, #20
 8008ba2:	051b      	lsls	r3, r3, #20
 8008ba4:	b183      	cbz	r3, 8008bc8 <_dtoa_r+0x900>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	9b05      	ldr	r3, [sp, #20]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	f04f 0801 	mov.w	r8, #1
 8008bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f47f af6a 	bne.w	8008a92 <_dtoa_r+0x7ca>
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e76f      	b.n	8008aa2 <_dtoa_r+0x7da>
 8008bc2:	f04f 0800 	mov.w	r8, #0
 8008bc6:	e7f6      	b.n	8008bb6 <_dtoa_r+0x8ee>
 8008bc8:	4698      	mov	r8, r3
 8008bca:	e7f4      	b.n	8008bb6 <_dtoa_r+0x8ee>
 8008bcc:	f43f af7d 	beq.w	8008aca <_dtoa_r+0x802>
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	301c      	adds	r0, #28
 8008bd4:	e772      	b.n	8008abc <_dtoa_r+0x7f4>
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dc37      	bgt.n	8008c4c <_dtoa_r+0x984>
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	dd34      	ble.n	8008c4c <_dtoa_r+0x984>
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	9302      	str	r3, [sp, #8]
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	b96b      	cbnz	r3, 8008c06 <_dtoa_r+0x93e>
 8008bea:	4631      	mov	r1, r6
 8008bec:	2205      	movs	r2, #5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f9ca 	bl	8008f88 <__multadd>
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	ee18 0a10 	vmov	r0, s16
 8008bfc:	f000 fbe4 	bl	80093c8 <__mcmp>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f73f adbb 	bgt.w	800877c <_dtoa_r+0x4b4>
 8008c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c08:	9d01      	ldr	r5, [sp, #4]
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	4631      	mov	r1, r6
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 f995 	bl	8008f44 <_Bfree>
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	f43f aea4 	beq.w	8008968 <_dtoa_r+0x6a0>
 8008c20:	f1b8 0f00 	cmp.w	r8, #0
 8008c24:	d005      	beq.n	8008c32 <_dtoa_r+0x96a>
 8008c26:	45b8      	cmp	r8, r7
 8008c28:	d003      	beq.n	8008c32 <_dtoa_r+0x96a>
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 f989 	bl	8008f44 <_Bfree>
 8008c32:	4639      	mov	r1, r7
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 f985 	bl	8008f44 <_Bfree>
 8008c3a:	e695      	b.n	8008968 <_dtoa_r+0x6a0>
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	4637      	mov	r7, r6
 8008c40:	e7e1      	b.n	8008c06 <_dtoa_r+0x93e>
 8008c42:	9700      	str	r7, [sp, #0]
 8008c44:	4637      	mov	r7, r6
 8008c46:	e599      	b.n	800877c <_dtoa_r+0x4b4>
 8008c48:	40240000 	.word	0x40240000
 8008c4c:	9b08      	ldr	r3, [sp, #32]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 80ca 	beq.w	8008de8 <_dtoa_r+0xb20>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	dd05      	ble.n	8008c68 <_dtoa_r+0x9a0>
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fb41 	bl	80092e8 <__lshift>
 8008c66:	4607      	mov	r7, r0
 8008c68:	f1b8 0f00 	cmp.w	r8, #0
 8008c6c:	d05b      	beq.n	8008d26 <_dtoa_r+0xa5e>
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 f927 	bl	8008ec4 <_Balloc>
 8008c76:	4605      	mov	r5, r0
 8008c78:	b928      	cbnz	r0, 8008c86 <_dtoa_r+0x9be>
 8008c7a:	4b87      	ldr	r3, [pc, #540]	; (8008e98 <_dtoa_r+0xbd0>)
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c82:	f7ff bb3b 	b.w	80082fc <_dtoa_r+0x34>
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	3202      	adds	r2, #2
 8008c8a:	0092      	lsls	r2, r2, #2
 8008c8c:	f107 010c 	add.w	r1, r7, #12
 8008c90:	300c      	adds	r0, #12
 8008c92:	f7fe fcc7 	bl	8007624 <memcpy>
 8008c96:	2201      	movs	r2, #1
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fb24 	bl	80092e8 <__lshift>
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	f103 0901 	add.w	r9, r3, #1
 8008ca6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008caa:	4413      	add	r3, r2
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	f00a 0301 	and.w	r3, sl, #1
 8008cb2:	46b8      	mov	r8, r7
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	4631      	mov	r1, r6
 8008cba:	ee18 0a10 	vmov	r0, s16
 8008cbe:	f7ff fa75 	bl	80081ac <quorem>
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	9002      	str	r0, [sp, #8]
 8008cc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cca:	ee18 0a10 	vmov	r0, s16
 8008cce:	f000 fb7b 	bl	80093c8 <__mcmp>
 8008cd2:	463a      	mov	r2, r7
 8008cd4:	9003      	str	r0, [sp, #12]
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f000 fb91 	bl	8009400 <__mdiff>
 8008cde:	68c2      	ldr	r2, [r0, #12]
 8008ce0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	bb02      	cbnz	r2, 8008d2a <_dtoa_r+0xa62>
 8008ce8:	4601      	mov	r1, r0
 8008cea:	ee18 0a10 	vmov	r0, s16
 8008cee:	f000 fb6b 	bl	80093c8 <__mcmp>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	9207      	str	r2, [sp, #28]
 8008cfa:	f000 f923 	bl	8008f44 <_Bfree>
 8008cfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d02:	ea43 0102 	orr.w	r1, r3, r2
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	464d      	mov	r5, r9
 8008d0c:	d10f      	bne.n	8008d2e <_dtoa_r+0xa66>
 8008d0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d12:	d02a      	beq.n	8008d6a <_dtoa_r+0xaa2>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dd02      	ble.n	8008d20 <_dtoa_r+0xa58>
 8008d1a:	9b02      	ldr	r3, [sp, #8]
 8008d1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d20:	f88b a000 	strb.w	sl, [fp]
 8008d24:	e775      	b.n	8008c12 <_dtoa_r+0x94a>
 8008d26:	4638      	mov	r0, r7
 8008d28:	e7ba      	b.n	8008ca0 <_dtoa_r+0x9d8>
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	e7e2      	b.n	8008cf4 <_dtoa_r+0xa2c>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	db04      	blt.n	8008d3e <_dtoa_r+0xa76>
 8008d34:	9906      	ldr	r1, [sp, #24]
 8008d36:	430b      	orrs	r3, r1
 8008d38:	9904      	ldr	r1, [sp, #16]
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	d122      	bne.n	8008d84 <_dtoa_r+0xabc>
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	ddee      	ble.n	8008d20 <_dtoa_r+0xa58>
 8008d42:	ee18 1a10 	vmov	r1, s16
 8008d46:	2201      	movs	r2, #1
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 facd 	bl	80092e8 <__lshift>
 8008d4e:	4631      	mov	r1, r6
 8008d50:	ee08 0a10 	vmov	s16, r0
 8008d54:	f000 fb38 	bl	80093c8 <__mcmp>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	dc03      	bgt.n	8008d64 <_dtoa_r+0xa9c>
 8008d5c:	d1e0      	bne.n	8008d20 <_dtoa_r+0xa58>
 8008d5e:	f01a 0f01 	tst.w	sl, #1
 8008d62:	d0dd      	beq.n	8008d20 <_dtoa_r+0xa58>
 8008d64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d68:	d1d7      	bne.n	8008d1a <_dtoa_r+0xa52>
 8008d6a:	2339      	movs	r3, #57	; 0x39
 8008d6c:	f88b 3000 	strb.w	r3, [fp]
 8008d70:	462b      	mov	r3, r5
 8008d72:	461d      	mov	r5, r3
 8008d74:	3b01      	subs	r3, #1
 8008d76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d7a:	2a39      	cmp	r2, #57	; 0x39
 8008d7c:	d071      	beq.n	8008e62 <_dtoa_r+0xb9a>
 8008d7e:	3201      	adds	r2, #1
 8008d80:	701a      	strb	r2, [r3, #0]
 8008d82:	e746      	b.n	8008c12 <_dtoa_r+0x94a>
 8008d84:	2a00      	cmp	r2, #0
 8008d86:	dd07      	ble.n	8008d98 <_dtoa_r+0xad0>
 8008d88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d8c:	d0ed      	beq.n	8008d6a <_dtoa_r+0xaa2>
 8008d8e:	f10a 0301 	add.w	r3, sl, #1
 8008d92:	f88b 3000 	strb.w	r3, [fp]
 8008d96:	e73c      	b.n	8008c12 <_dtoa_r+0x94a>
 8008d98:	9b05      	ldr	r3, [sp, #20]
 8008d9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d9e:	4599      	cmp	r9, r3
 8008da0:	d047      	beq.n	8008e32 <_dtoa_r+0xb6a>
 8008da2:	ee18 1a10 	vmov	r1, s16
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f8ec 	bl	8008f88 <__multadd>
 8008db0:	45b8      	cmp	r8, r7
 8008db2:	ee08 0a10 	vmov	s16, r0
 8008db6:	f04f 0300 	mov.w	r3, #0
 8008dba:	f04f 020a 	mov.w	r2, #10
 8008dbe:	4641      	mov	r1, r8
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	d106      	bne.n	8008dd2 <_dtoa_r+0xb0a>
 8008dc4:	f000 f8e0 	bl	8008f88 <__multadd>
 8008dc8:	4680      	mov	r8, r0
 8008dca:	4607      	mov	r7, r0
 8008dcc:	f109 0901 	add.w	r9, r9, #1
 8008dd0:	e772      	b.n	8008cb8 <_dtoa_r+0x9f0>
 8008dd2:	f000 f8d9 	bl	8008f88 <__multadd>
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	4680      	mov	r8, r0
 8008dda:	2300      	movs	r3, #0
 8008ddc:	220a      	movs	r2, #10
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f8d2 	bl	8008f88 <__multadd>
 8008de4:	4607      	mov	r7, r0
 8008de6:	e7f1      	b.n	8008dcc <_dtoa_r+0xb04>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	9302      	str	r3, [sp, #8]
 8008dec:	9d01      	ldr	r5, [sp, #4]
 8008dee:	ee18 0a10 	vmov	r0, s16
 8008df2:	4631      	mov	r1, r6
 8008df4:	f7ff f9da 	bl	80081ac <quorem>
 8008df8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	f805 ab01 	strb.w	sl, [r5], #1
 8008e02:	1aea      	subs	r2, r5, r3
 8008e04:	9b02      	ldr	r3, [sp, #8]
 8008e06:	4293      	cmp	r3, r2
 8008e08:	dd09      	ble.n	8008e1e <_dtoa_r+0xb56>
 8008e0a:	ee18 1a10 	vmov	r1, s16
 8008e0e:	2300      	movs	r3, #0
 8008e10:	220a      	movs	r2, #10
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 f8b8 	bl	8008f88 <__multadd>
 8008e18:	ee08 0a10 	vmov	s16, r0
 8008e1c:	e7e7      	b.n	8008dee <_dtoa_r+0xb26>
 8008e1e:	9b02      	ldr	r3, [sp, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bfc8      	it	gt
 8008e24:	461d      	movgt	r5, r3
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	bfd8      	it	le
 8008e2a:	2501      	movle	r5, #1
 8008e2c:	441d      	add	r5, r3
 8008e2e:	f04f 0800 	mov.w	r8, #0
 8008e32:	ee18 1a10 	vmov	r1, s16
 8008e36:	2201      	movs	r2, #1
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 fa55 	bl	80092e8 <__lshift>
 8008e3e:	4631      	mov	r1, r6
 8008e40:	ee08 0a10 	vmov	s16, r0
 8008e44:	f000 fac0 	bl	80093c8 <__mcmp>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	dc91      	bgt.n	8008d70 <_dtoa_r+0xaa8>
 8008e4c:	d102      	bne.n	8008e54 <_dtoa_r+0xb8c>
 8008e4e:	f01a 0f01 	tst.w	sl, #1
 8008e52:	d18d      	bne.n	8008d70 <_dtoa_r+0xaa8>
 8008e54:	462b      	mov	r3, r5
 8008e56:	461d      	mov	r5, r3
 8008e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e5c:	2a30      	cmp	r2, #48	; 0x30
 8008e5e:	d0fa      	beq.n	8008e56 <_dtoa_r+0xb8e>
 8008e60:	e6d7      	b.n	8008c12 <_dtoa_r+0x94a>
 8008e62:	9a01      	ldr	r2, [sp, #4]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d184      	bne.n	8008d72 <_dtoa_r+0xaaa>
 8008e68:	9b00      	ldr	r3, [sp, #0]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	2331      	movs	r3, #49	; 0x31
 8008e70:	7013      	strb	r3, [r2, #0]
 8008e72:	e6ce      	b.n	8008c12 <_dtoa_r+0x94a>
 8008e74:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <_dtoa_r+0xbd4>)
 8008e76:	f7ff ba95 	b.w	80083a4 <_dtoa_r+0xdc>
 8008e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f47f aa6e 	bne.w	800835e <_dtoa_r+0x96>
 8008e82:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <_dtoa_r+0xbd8>)
 8008e84:	f7ff ba8e 	b.w	80083a4 <_dtoa_r+0xdc>
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	dcae      	bgt.n	8008dec <_dtoa_r+0xb24>
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	f73f aea8 	bgt.w	8008be6 <_dtoa_r+0x91e>
 8008e96:	e7a9      	b.n	8008dec <_dtoa_r+0xb24>
 8008e98:	0800af40 	.word	0x0800af40
 8008e9c:	0800ad9c 	.word	0x0800ad9c
 8008ea0:	0800aec1 	.word	0x0800aec1

08008ea4 <_localeconv_r>:
 8008ea4:	4800      	ldr	r0, [pc, #0]	; (8008ea8 <_localeconv_r+0x4>)
 8008ea6:	4770      	bx	lr
 8008ea8:	20000160 	.word	0x20000160

08008eac <__malloc_lock>:
 8008eac:	4801      	ldr	r0, [pc, #4]	; (8008eb4 <__malloc_lock+0x8>)
 8008eae:	f000 bd30 	b.w	8009912 <__retarget_lock_acquire_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	2000066c 	.word	0x2000066c

08008eb8 <__malloc_unlock>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	; (8008ec0 <__malloc_unlock+0x8>)
 8008eba:	f000 bd2b 	b.w	8009914 <__retarget_lock_release_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	2000066c 	.word	0x2000066c

08008ec4 <_Balloc>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ec8:	4604      	mov	r4, r0
 8008eca:	460d      	mov	r5, r1
 8008ecc:	b976      	cbnz	r6, 8008eec <_Balloc+0x28>
 8008ece:	2010      	movs	r0, #16
 8008ed0:	f7fe fb98 	bl	8007604 <malloc>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	6260      	str	r0, [r4, #36]	; 0x24
 8008ed8:	b920      	cbnz	r0, 8008ee4 <_Balloc+0x20>
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <_Balloc+0x78>)
 8008edc:	4818      	ldr	r0, [pc, #96]	; (8008f40 <_Balloc+0x7c>)
 8008ede:	2166      	movs	r1, #102	; 0x66
 8008ee0:	f000 fce6 	bl	80098b0 <__assert_func>
 8008ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ee8:	6006      	str	r6, [r0, #0]
 8008eea:	60c6      	str	r6, [r0, #12]
 8008eec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008eee:	68f3      	ldr	r3, [r6, #12]
 8008ef0:	b183      	cbz	r3, 8008f14 <_Balloc+0x50>
 8008ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008efa:	b9b8      	cbnz	r0, 8008f2c <_Balloc+0x68>
 8008efc:	2101      	movs	r1, #1
 8008efe:	fa01 f605 	lsl.w	r6, r1, r5
 8008f02:	1d72      	adds	r2, r6, #5
 8008f04:	0092      	lsls	r2, r2, #2
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 fb60 	bl	80095cc <_calloc_r>
 8008f0c:	b160      	cbz	r0, 8008f28 <_Balloc+0x64>
 8008f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f12:	e00e      	b.n	8008f32 <_Balloc+0x6e>
 8008f14:	2221      	movs	r2, #33	; 0x21
 8008f16:	2104      	movs	r1, #4
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fb57 	bl	80095cc <_calloc_r>
 8008f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f20:	60f0      	str	r0, [r6, #12]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1e4      	bne.n	8008ef2 <_Balloc+0x2e>
 8008f28:	2000      	movs	r0, #0
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	6802      	ldr	r2, [r0, #0]
 8008f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f32:	2300      	movs	r3, #0
 8008f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f38:	e7f7      	b.n	8008f2a <_Balloc+0x66>
 8008f3a:	bf00      	nop
 8008f3c:	0800aece 	.word	0x0800aece
 8008f40:	0800af51 	.word	0x0800af51

08008f44 <_Bfree>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f48:	4605      	mov	r5, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	b976      	cbnz	r6, 8008f6c <_Bfree+0x28>
 8008f4e:	2010      	movs	r0, #16
 8008f50:	f7fe fb58 	bl	8007604 <malloc>
 8008f54:	4602      	mov	r2, r0
 8008f56:	6268      	str	r0, [r5, #36]	; 0x24
 8008f58:	b920      	cbnz	r0, 8008f64 <_Bfree+0x20>
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <_Bfree+0x3c>)
 8008f5c:	4809      	ldr	r0, [pc, #36]	; (8008f84 <_Bfree+0x40>)
 8008f5e:	218a      	movs	r1, #138	; 0x8a
 8008f60:	f000 fca6 	bl	80098b0 <__assert_func>
 8008f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f68:	6006      	str	r6, [r0, #0]
 8008f6a:	60c6      	str	r6, [r0, #12]
 8008f6c:	b13c      	cbz	r4, 8008f7e <_Bfree+0x3a>
 8008f6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f70:	6862      	ldr	r2, [r4, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f78:	6021      	str	r1, [r4, #0]
 8008f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	0800aece 	.word	0x0800aece
 8008f84:	0800af51 	.word	0x0800af51

08008f88 <__multadd>:
 8008f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8c:	690d      	ldr	r5, [r1, #16]
 8008f8e:	4607      	mov	r7, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	461e      	mov	r6, r3
 8008f94:	f101 0c14 	add.w	ip, r1, #20
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8008f9e:	b299      	uxth	r1, r3
 8008fa0:	fb02 6101 	mla	r1, r2, r1, r6
 8008fa4:	0c1e      	lsrs	r6, r3, #16
 8008fa6:	0c0b      	lsrs	r3, r1, #16
 8008fa8:	fb02 3306 	mla	r3, r2, r6, r3
 8008fac:	b289      	uxth	r1, r1
 8008fae:	3001      	adds	r0, #1
 8008fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fb4:	4285      	cmp	r5, r0
 8008fb6:	f84c 1b04 	str.w	r1, [ip], #4
 8008fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fbe:	dcec      	bgt.n	8008f9a <__multadd+0x12>
 8008fc0:	b30e      	cbz	r6, 8009006 <__multadd+0x7e>
 8008fc2:	68a3      	ldr	r3, [r4, #8]
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	dc19      	bgt.n	8008ffc <__multadd+0x74>
 8008fc8:	6861      	ldr	r1, [r4, #4]
 8008fca:	4638      	mov	r0, r7
 8008fcc:	3101      	adds	r1, #1
 8008fce:	f7ff ff79 	bl	8008ec4 <_Balloc>
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	b928      	cbnz	r0, 8008fe2 <__multadd+0x5a>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	; (800900c <__multadd+0x84>)
 8008fda:	480d      	ldr	r0, [pc, #52]	; (8009010 <__multadd+0x88>)
 8008fdc:	21b5      	movs	r1, #181	; 0xb5
 8008fde:	f000 fc67 	bl	80098b0 <__assert_func>
 8008fe2:	6922      	ldr	r2, [r4, #16]
 8008fe4:	3202      	adds	r2, #2
 8008fe6:	f104 010c 	add.w	r1, r4, #12
 8008fea:	0092      	lsls	r2, r2, #2
 8008fec:	300c      	adds	r0, #12
 8008fee:	f7fe fb19 	bl	8007624 <memcpy>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f7ff ffa5 	bl	8008f44 <_Bfree>
 8008ffa:	4644      	mov	r4, r8
 8008ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009000:	3501      	adds	r5, #1
 8009002:	615e      	str	r6, [r3, #20]
 8009004:	6125      	str	r5, [r4, #16]
 8009006:	4620      	mov	r0, r4
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	0800af40 	.word	0x0800af40
 8009010:	0800af51 	.word	0x0800af51

08009014 <__hi0bits>:
 8009014:	0c03      	lsrs	r3, r0, #16
 8009016:	041b      	lsls	r3, r3, #16
 8009018:	b9d3      	cbnz	r3, 8009050 <__hi0bits+0x3c>
 800901a:	0400      	lsls	r0, r0, #16
 800901c:	2310      	movs	r3, #16
 800901e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009022:	bf04      	itt	eq
 8009024:	0200      	lsleq	r0, r0, #8
 8009026:	3308      	addeq	r3, #8
 8009028:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800902c:	bf04      	itt	eq
 800902e:	0100      	lsleq	r0, r0, #4
 8009030:	3304      	addeq	r3, #4
 8009032:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009036:	bf04      	itt	eq
 8009038:	0080      	lsleq	r0, r0, #2
 800903a:	3302      	addeq	r3, #2
 800903c:	2800      	cmp	r0, #0
 800903e:	db05      	blt.n	800904c <__hi0bits+0x38>
 8009040:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009044:	f103 0301 	add.w	r3, r3, #1
 8009048:	bf08      	it	eq
 800904a:	2320      	moveq	r3, #32
 800904c:	4618      	mov	r0, r3
 800904e:	4770      	bx	lr
 8009050:	2300      	movs	r3, #0
 8009052:	e7e4      	b.n	800901e <__hi0bits+0xa>

08009054 <__lo0bits>:
 8009054:	6803      	ldr	r3, [r0, #0]
 8009056:	f013 0207 	ands.w	r2, r3, #7
 800905a:	4601      	mov	r1, r0
 800905c:	d00b      	beq.n	8009076 <__lo0bits+0x22>
 800905e:	07da      	lsls	r2, r3, #31
 8009060:	d423      	bmi.n	80090aa <__lo0bits+0x56>
 8009062:	0798      	lsls	r0, r3, #30
 8009064:	bf49      	itett	mi
 8009066:	085b      	lsrmi	r3, r3, #1
 8009068:	089b      	lsrpl	r3, r3, #2
 800906a:	2001      	movmi	r0, #1
 800906c:	600b      	strmi	r3, [r1, #0]
 800906e:	bf5c      	itt	pl
 8009070:	600b      	strpl	r3, [r1, #0]
 8009072:	2002      	movpl	r0, #2
 8009074:	4770      	bx	lr
 8009076:	b298      	uxth	r0, r3
 8009078:	b9a8      	cbnz	r0, 80090a6 <__lo0bits+0x52>
 800907a:	0c1b      	lsrs	r3, r3, #16
 800907c:	2010      	movs	r0, #16
 800907e:	b2da      	uxtb	r2, r3
 8009080:	b90a      	cbnz	r2, 8009086 <__lo0bits+0x32>
 8009082:	3008      	adds	r0, #8
 8009084:	0a1b      	lsrs	r3, r3, #8
 8009086:	071a      	lsls	r2, r3, #28
 8009088:	bf04      	itt	eq
 800908a:	091b      	lsreq	r3, r3, #4
 800908c:	3004      	addeq	r0, #4
 800908e:	079a      	lsls	r2, r3, #30
 8009090:	bf04      	itt	eq
 8009092:	089b      	lsreq	r3, r3, #2
 8009094:	3002      	addeq	r0, #2
 8009096:	07da      	lsls	r2, r3, #31
 8009098:	d403      	bmi.n	80090a2 <__lo0bits+0x4e>
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	f100 0001 	add.w	r0, r0, #1
 80090a0:	d005      	beq.n	80090ae <__lo0bits+0x5a>
 80090a2:	600b      	str	r3, [r1, #0]
 80090a4:	4770      	bx	lr
 80090a6:	4610      	mov	r0, r2
 80090a8:	e7e9      	b.n	800907e <__lo0bits+0x2a>
 80090aa:	2000      	movs	r0, #0
 80090ac:	4770      	bx	lr
 80090ae:	2020      	movs	r0, #32
 80090b0:	4770      	bx	lr
	...

080090b4 <__i2b>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	2101      	movs	r1, #1
 80090ba:	f7ff ff03 	bl	8008ec4 <_Balloc>
 80090be:	4602      	mov	r2, r0
 80090c0:	b928      	cbnz	r0, 80090ce <__i2b+0x1a>
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <__i2b+0x24>)
 80090c4:	4805      	ldr	r0, [pc, #20]	; (80090dc <__i2b+0x28>)
 80090c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090ca:	f000 fbf1 	bl	80098b0 <__assert_func>
 80090ce:	2301      	movs	r3, #1
 80090d0:	6144      	str	r4, [r0, #20]
 80090d2:	6103      	str	r3, [r0, #16]
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop
 80090d8:	0800af40 	.word	0x0800af40
 80090dc:	0800af51 	.word	0x0800af51

080090e0 <__multiply>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4691      	mov	r9, r2
 80090e6:	690a      	ldr	r2, [r1, #16]
 80090e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	bfb8      	it	lt
 80090f0:	460b      	movlt	r3, r1
 80090f2:	460c      	mov	r4, r1
 80090f4:	bfbc      	itt	lt
 80090f6:	464c      	movlt	r4, r9
 80090f8:	4699      	movlt	r9, r3
 80090fa:	6927      	ldr	r7, [r4, #16]
 80090fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	6861      	ldr	r1, [r4, #4]
 8009104:	eb07 060a 	add.w	r6, r7, sl
 8009108:	42b3      	cmp	r3, r6
 800910a:	b085      	sub	sp, #20
 800910c:	bfb8      	it	lt
 800910e:	3101      	addlt	r1, #1
 8009110:	f7ff fed8 	bl	8008ec4 <_Balloc>
 8009114:	b930      	cbnz	r0, 8009124 <__multiply+0x44>
 8009116:	4602      	mov	r2, r0
 8009118:	4b44      	ldr	r3, [pc, #272]	; (800922c <__multiply+0x14c>)
 800911a:	4845      	ldr	r0, [pc, #276]	; (8009230 <__multiply+0x150>)
 800911c:	f240 115d 	movw	r1, #349	; 0x15d
 8009120:	f000 fbc6 	bl	80098b0 <__assert_func>
 8009124:	f100 0514 	add.w	r5, r0, #20
 8009128:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800912c:	462b      	mov	r3, r5
 800912e:	2200      	movs	r2, #0
 8009130:	4543      	cmp	r3, r8
 8009132:	d321      	bcc.n	8009178 <__multiply+0x98>
 8009134:	f104 0314 	add.w	r3, r4, #20
 8009138:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800913c:	f109 0314 	add.w	r3, r9, #20
 8009140:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009144:	9202      	str	r2, [sp, #8]
 8009146:	1b3a      	subs	r2, r7, r4
 8009148:	3a15      	subs	r2, #21
 800914a:	f022 0203 	bic.w	r2, r2, #3
 800914e:	3204      	adds	r2, #4
 8009150:	f104 0115 	add.w	r1, r4, #21
 8009154:	428f      	cmp	r7, r1
 8009156:	bf38      	it	cc
 8009158:	2204      	movcc	r2, #4
 800915a:	9201      	str	r2, [sp, #4]
 800915c:	9a02      	ldr	r2, [sp, #8]
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	429a      	cmp	r2, r3
 8009162:	d80c      	bhi.n	800917e <__multiply+0x9e>
 8009164:	2e00      	cmp	r6, #0
 8009166:	dd03      	ble.n	8009170 <__multiply+0x90>
 8009168:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800916c:	2b00      	cmp	r3, #0
 800916e:	d05a      	beq.n	8009226 <__multiply+0x146>
 8009170:	6106      	str	r6, [r0, #16]
 8009172:	b005      	add	sp, #20
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009178:	f843 2b04 	str.w	r2, [r3], #4
 800917c:	e7d8      	b.n	8009130 <__multiply+0x50>
 800917e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009182:	f1ba 0f00 	cmp.w	sl, #0
 8009186:	d024      	beq.n	80091d2 <__multiply+0xf2>
 8009188:	f104 0e14 	add.w	lr, r4, #20
 800918c:	46a9      	mov	r9, r5
 800918e:	f04f 0c00 	mov.w	ip, #0
 8009192:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009196:	f8d9 1000 	ldr.w	r1, [r9]
 800919a:	fa1f fb82 	uxth.w	fp, r2
 800919e:	b289      	uxth	r1, r1
 80091a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80091a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091a8:	f8d9 2000 	ldr.w	r2, [r9]
 80091ac:	4461      	add	r1, ip
 80091ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80091b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091ba:	b289      	uxth	r1, r1
 80091bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091c0:	4577      	cmp	r7, lr
 80091c2:	f849 1b04 	str.w	r1, [r9], #4
 80091c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ca:	d8e2      	bhi.n	8009192 <__multiply+0xb2>
 80091cc:	9a01      	ldr	r2, [sp, #4]
 80091ce:	f845 c002 	str.w	ip, [r5, r2]
 80091d2:	9a03      	ldr	r2, [sp, #12]
 80091d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091d8:	3304      	adds	r3, #4
 80091da:	f1b9 0f00 	cmp.w	r9, #0
 80091de:	d020      	beq.n	8009222 <__multiply+0x142>
 80091e0:	6829      	ldr	r1, [r5, #0]
 80091e2:	f104 0c14 	add.w	ip, r4, #20
 80091e6:	46ae      	mov	lr, r5
 80091e8:	f04f 0a00 	mov.w	sl, #0
 80091ec:	f8bc b000 	ldrh.w	fp, [ip]
 80091f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091f4:	fb09 220b 	mla	r2, r9, fp, r2
 80091f8:	4492      	add	sl, r2
 80091fa:	b289      	uxth	r1, r1
 80091fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009200:	f84e 1b04 	str.w	r1, [lr], #4
 8009204:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009208:	f8be 1000 	ldrh.w	r1, [lr]
 800920c:	0c12      	lsrs	r2, r2, #16
 800920e:	fb09 1102 	mla	r1, r9, r2, r1
 8009212:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009216:	4567      	cmp	r7, ip
 8009218:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800921c:	d8e6      	bhi.n	80091ec <__multiply+0x10c>
 800921e:	9a01      	ldr	r2, [sp, #4]
 8009220:	50a9      	str	r1, [r5, r2]
 8009222:	3504      	adds	r5, #4
 8009224:	e79a      	b.n	800915c <__multiply+0x7c>
 8009226:	3e01      	subs	r6, #1
 8009228:	e79c      	b.n	8009164 <__multiply+0x84>
 800922a:	bf00      	nop
 800922c:	0800af40 	.word	0x0800af40
 8009230:	0800af51 	.word	0x0800af51

08009234 <__pow5mult>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4615      	mov	r5, r2
 800923a:	f012 0203 	ands.w	r2, r2, #3
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	d007      	beq.n	8009254 <__pow5mult+0x20>
 8009244:	4c25      	ldr	r4, [pc, #148]	; (80092dc <__pow5mult+0xa8>)
 8009246:	3a01      	subs	r2, #1
 8009248:	2300      	movs	r3, #0
 800924a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800924e:	f7ff fe9b 	bl	8008f88 <__multadd>
 8009252:	4607      	mov	r7, r0
 8009254:	10ad      	asrs	r5, r5, #2
 8009256:	d03d      	beq.n	80092d4 <__pow5mult+0xa0>
 8009258:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800925a:	b97c      	cbnz	r4, 800927c <__pow5mult+0x48>
 800925c:	2010      	movs	r0, #16
 800925e:	f7fe f9d1 	bl	8007604 <malloc>
 8009262:	4602      	mov	r2, r0
 8009264:	6270      	str	r0, [r6, #36]	; 0x24
 8009266:	b928      	cbnz	r0, 8009274 <__pow5mult+0x40>
 8009268:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <__pow5mult+0xac>)
 800926a:	481e      	ldr	r0, [pc, #120]	; (80092e4 <__pow5mult+0xb0>)
 800926c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009270:	f000 fb1e 	bl	80098b0 <__assert_func>
 8009274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009278:	6004      	str	r4, [r0, #0]
 800927a:	60c4      	str	r4, [r0, #12]
 800927c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009284:	b94c      	cbnz	r4, 800929a <__pow5mult+0x66>
 8009286:	f240 2171 	movw	r1, #625	; 0x271
 800928a:	4630      	mov	r0, r6
 800928c:	f7ff ff12 	bl	80090b4 <__i2b>
 8009290:	2300      	movs	r3, #0
 8009292:	f8c8 0008 	str.w	r0, [r8, #8]
 8009296:	4604      	mov	r4, r0
 8009298:	6003      	str	r3, [r0, #0]
 800929a:	f04f 0900 	mov.w	r9, #0
 800929e:	07eb      	lsls	r3, r5, #31
 80092a0:	d50a      	bpl.n	80092b8 <__pow5mult+0x84>
 80092a2:	4639      	mov	r1, r7
 80092a4:	4622      	mov	r2, r4
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7ff ff1a 	bl	80090e0 <__multiply>
 80092ac:	4639      	mov	r1, r7
 80092ae:	4680      	mov	r8, r0
 80092b0:	4630      	mov	r0, r6
 80092b2:	f7ff fe47 	bl	8008f44 <_Bfree>
 80092b6:	4647      	mov	r7, r8
 80092b8:	106d      	asrs	r5, r5, #1
 80092ba:	d00b      	beq.n	80092d4 <__pow5mult+0xa0>
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	b938      	cbnz	r0, 80092d0 <__pow5mult+0x9c>
 80092c0:	4622      	mov	r2, r4
 80092c2:	4621      	mov	r1, r4
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff ff0b 	bl	80090e0 <__multiply>
 80092ca:	6020      	str	r0, [r4, #0]
 80092cc:	f8c0 9000 	str.w	r9, [r0]
 80092d0:	4604      	mov	r4, r0
 80092d2:	e7e4      	b.n	800929e <__pow5mult+0x6a>
 80092d4:	4638      	mov	r0, r7
 80092d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092da:	bf00      	nop
 80092dc:	0800b0a0 	.word	0x0800b0a0
 80092e0:	0800aece 	.word	0x0800aece
 80092e4:	0800af51 	.word	0x0800af51

080092e8 <__lshift>:
 80092e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	460c      	mov	r4, r1
 80092ee:	6849      	ldr	r1, [r1, #4]
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	4607      	mov	r7, r0
 80092fa:	4691      	mov	r9, r2
 80092fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009300:	f108 0601 	add.w	r6, r8, #1
 8009304:	42b3      	cmp	r3, r6
 8009306:	db0b      	blt.n	8009320 <__lshift+0x38>
 8009308:	4638      	mov	r0, r7
 800930a:	f7ff fddb 	bl	8008ec4 <_Balloc>
 800930e:	4605      	mov	r5, r0
 8009310:	b948      	cbnz	r0, 8009326 <__lshift+0x3e>
 8009312:	4602      	mov	r2, r0
 8009314:	4b2a      	ldr	r3, [pc, #168]	; (80093c0 <__lshift+0xd8>)
 8009316:	482b      	ldr	r0, [pc, #172]	; (80093c4 <__lshift+0xdc>)
 8009318:	f240 11d9 	movw	r1, #473	; 0x1d9
 800931c:	f000 fac8 	bl	80098b0 <__assert_func>
 8009320:	3101      	adds	r1, #1
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	e7ee      	b.n	8009304 <__lshift+0x1c>
 8009326:	2300      	movs	r3, #0
 8009328:	f100 0114 	add.w	r1, r0, #20
 800932c:	f100 0210 	add.w	r2, r0, #16
 8009330:	4618      	mov	r0, r3
 8009332:	4553      	cmp	r3, sl
 8009334:	db37      	blt.n	80093a6 <__lshift+0xbe>
 8009336:	6920      	ldr	r0, [r4, #16]
 8009338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800933c:	f104 0314 	add.w	r3, r4, #20
 8009340:	f019 091f 	ands.w	r9, r9, #31
 8009344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009348:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800934c:	d02f      	beq.n	80093ae <__lshift+0xc6>
 800934e:	f1c9 0e20 	rsb	lr, r9, #32
 8009352:	468a      	mov	sl, r1
 8009354:	f04f 0c00 	mov.w	ip, #0
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	fa02 f209 	lsl.w	r2, r2, r9
 800935e:	ea42 020c 	orr.w	r2, r2, ip
 8009362:	f84a 2b04 	str.w	r2, [sl], #4
 8009366:	f853 2b04 	ldr.w	r2, [r3], #4
 800936a:	4298      	cmp	r0, r3
 800936c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009370:	d8f2      	bhi.n	8009358 <__lshift+0x70>
 8009372:	1b03      	subs	r3, r0, r4
 8009374:	3b15      	subs	r3, #21
 8009376:	f023 0303 	bic.w	r3, r3, #3
 800937a:	3304      	adds	r3, #4
 800937c:	f104 0215 	add.w	r2, r4, #21
 8009380:	4290      	cmp	r0, r2
 8009382:	bf38      	it	cc
 8009384:	2304      	movcc	r3, #4
 8009386:	f841 c003 	str.w	ip, [r1, r3]
 800938a:	f1bc 0f00 	cmp.w	ip, #0
 800938e:	d001      	beq.n	8009394 <__lshift+0xac>
 8009390:	f108 0602 	add.w	r6, r8, #2
 8009394:	3e01      	subs	r6, #1
 8009396:	4638      	mov	r0, r7
 8009398:	612e      	str	r6, [r5, #16]
 800939a:	4621      	mov	r1, r4
 800939c:	f7ff fdd2 	bl	8008f44 <_Bfree>
 80093a0:	4628      	mov	r0, r5
 80093a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80093aa:	3301      	adds	r3, #1
 80093ac:	e7c1      	b.n	8009332 <__lshift+0x4a>
 80093ae:	3904      	subs	r1, #4
 80093b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80093b8:	4298      	cmp	r0, r3
 80093ba:	d8f9      	bhi.n	80093b0 <__lshift+0xc8>
 80093bc:	e7ea      	b.n	8009394 <__lshift+0xac>
 80093be:	bf00      	nop
 80093c0:	0800af40 	.word	0x0800af40
 80093c4:	0800af51 	.word	0x0800af51

080093c8 <__mcmp>:
 80093c8:	b530      	push	{r4, r5, lr}
 80093ca:	6902      	ldr	r2, [r0, #16]
 80093cc:	690c      	ldr	r4, [r1, #16]
 80093ce:	1b12      	subs	r2, r2, r4
 80093d0:	d10e      	bne.n	80093f0 <__mcmp+0x28>
 80093d2:	f100 0314 	add.w	r3, r0, #20
 80093d6:	3114      	adds	r1, #20
 80093d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80093e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80093e8:	42a5      	cmp	r5, r4
 80093ea:	d003      	beq.n	80093f4 <__mcmp+0x2c>
 80093ec:	d305      	bcc.n	80093fa <__mcmp+0x32>
 80093ee:	2201      	movs	r2, #1
 80093f0:	4610      	mov	r0, r2
 80093f2:	bd30      	pop	{r4, r5, pc}
 80093f4:	4283      	cmp	r3, r0
 80093f6:	d3f3      	bcc.n	80093e0 <__mcmp+0x18>
 80093f8:	e7fa      	b.n	80093f0 <__mcmp+0x28>
 80093fa:	f04f 32ff 	mov.w	r2, #4294967295
 80093fe:	e7f7      	b.n	80093f0 <__mcmp+0x28>

08009400 <__mdiff>:
 8009400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	460c      	mov	r4, r1
 8009406:	4606      	mov	r6, r0
 8009408:	4611      	mov	r1, r2
 800940a:	4620      	mov	r0, r4
 800940c:	4690      	mov	r8, r2
 800940e:	f7ff ffdb 	bl	80093c8 <__mcmp>
 8009412:	1e05      	subs	r5, r0, #0
 8009414:	d110      	bne.n	8009438 <__mdiff+0x38>
 8009416:	4629      	mov	r1, r5
 8009418:	4630      	mov	r0, r6
 800941a:	f7ff fd53 	bl	8008ec4 <_Balloc>
 800941e:	b930      	cbnz	r0, 800942e <__mdiff+0x2e>
 8009420:	4b3a      	ldr	r3, [pc, #232]	; (800950c <__mdiff+0x10c>)
 8009422:	4602      	mov	r2, r0
 8009424:	f240 2132 	movw	r1, #562	; 0x232
 8009428:	4839      	ldr	r0, [pc, #228]	; (8009510 <__mdiff+0x110>)
 800942a:	f000 fa41 	bl	80098b0 <__assert_func>
 800942e:	2301      	movs	r3, #1
 8009430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	bfa4      	itt	ge
 800943a:	4643      	movge	r3, r8
 800943c:	46a0      	movge	r8, r4
 800943e:	4630      	mov	r0, r6
 8009440:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009444:	bfa6      	itte	ge
 8009446:	461c      	movge	r4, r3
 8009448:	2500      	movge	r5, #0
 800944a:	2501      	movlt	r5, #1
 800944c:	f7ff fd3a 	bl	8008ec4 <_Balloc>
 8009450:	b920      	cbnz	r0, 800945c <__mdiff+0x5c>
 8009452:	4b2e      	ldr	r3, [pc, #184]	; (800950c <__mdiff+0x10c>)
 8009454:	4602      	mov	r2, r0
 8009456:	f44f 7110 	mov.w	r1, #576	; 0x240
 800945a:	e7e5      	b.n	8009428 <__mdiff+0x28>
 800945c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009460:	6926      	ldr	r6, [r4, #16]
 8009462:	60c5      	str	r5, [r0, #12]
 8009464:	f104 0914 	add.w	r9, r4, #20
 8009468:	f108 0514 	add.w	r5, r8, #20
 800946c:	f100 0e14 	add.w	lr, r0, #20
 8009470:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009478:	f108 0210 	add.w	r2, r8, #16
 800947c:	46f2      	mov	sl, lr
 800947e:	2100      	movs	r1, #0
 8009480:	f859 3b04 	ldr.w	r3, [r9], #4
 8009484:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009488:	fa1f f883 	uxth.w	r8, r3
 800948c:	fa11 f18b 	uxtah	r1, r1, fp
 8009490:	0c1b      	lsrs	r3, r3, #16
 8009492:	eba1 0808 	sub.w	r8, r1, r8
 8009496:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800949a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800949e:	fa1f f888 	uxth.w	r8, r8
 80094a2:	1419      	asrs	r1, r3, #16
 80094a4:	454e      	cmp	r6, r9
 80094a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094aa:	f84a 3b04 	str.w	r3, [sl], #4
 80094ae:	d8e7      	bhi.n	8009480 <__mdiff+0x80>
 80094b0:	1b33      	subs	r3, r6, r4
 80094b2:	3b15      	subs	r3, #21
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	3304      	adds	r3, #4
 80094ba:	3415      	adds	r4, #21
 80094bc:	42a6      	cmp	r6, r4
 80094be:	bf38      	it	cc
 80094c0:	2304      	movcc	r3, #4
 80094c2:	441d      	add	r5, r3
 80094c4:	4473      	add	r3, lr
 80094c6:	469e      	mov	lr, r3
 80094c8:	462e      	mov	r6, r5
 80094ca:	4566      	cmp	r6, ip
 80094cc:	d30e      	bcc.n	80094ec <__mdiff+0xec>
 80094ce:	f10c 0203 	add.w	r2, ip, #3
 80094d2:	1b52      	subs	r2, r2, r5
 80094d4:	f022 0203 	bic.w	r2, r2, #3
 80094d8:	3d03      	subs	r5, #3
 80094da:	45ac      	cmp	ip, r5
 80094dc:	bf38      	it	cc
 80094de:	2200      	movcc	r2, #0
 80094e0:	441a      	add	r2, r3
 80094e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094e6:	b17b      	cbz	r3, 8009508 <__mdiff+0x108>
 80094e8:	6107      	str	r7, [r0, #16]
 80094ea:	e7a3      	b.n	8009434 <__mdiff+0x34>
 80094ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80094f0:	fa11 f288 	uxtah	r2, r1, r8
 80094f4:	1414      	asrs	r4, r2, #16
 80094f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094fa:	b292      	uxth	r2, r2
 80094fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009500:	f84e 2b04 	str.w	r2, [lr], #4
 8009504:	1421      	asrs	r1, r4, #16
 8009506:	e7e0      	b.n	80094ca <__mdiff+0xca>
 8009508:	3f01      	subs	r7, #1
 800950a:	e7ea      	b.n	80094e2 <__mdiff+0xe2>
 800950c:	0800af40 	.word	0x0800af40
 8009510:	0800af51 	.word	0x0800af51

08009514 <__d2b>:
 8009514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009518:	4689      	mov	r9, r1
 800951a:	2101      	movs	r1, #1
 800951c:	ec57 6b10 	vmov	r6, r7, d0
 8009520:	4690      	mov	r8, r2
 8009522:	f7ff fccf 	bl	8008ec4 <_Balloc>
 8009526:	4604      	mov	r4, r0
 8009528:	b930      	cbnz	r0, 8009538 <__d2b+0x24>
 800952a:	4602      	mov	r2, r0
 800952c:	4b25      	ldr	r3, [pc, #148]	; (80095c4 <__d2b+0xb0>)
 800952e:	4826      	ldr	r0, [pc, #152]	; (80095c8 <__d2b+0xb4>)
 8009530:	f240 310a 	movw	r1, #778	; 0x30a
 8009534:	f000 f9bc 	bl	80098b0 <__assert_func>
 8009538:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800953c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009540:	bb35      	cbnz	r5, 8009590 <__d2b+0x7c>
 8009542:	2e00      	cmp	r6, #0
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	d028      	beq.n	800959a <__d2b+0x86>
 8009548:	4668      	mov	r0, sp
 800954a:	9600      	str	r6, [sp, #0]
 800954c:	f7ff fd82 	bl	8009054 <__lo0bits>
 8009550:	9900      	ldr	r1, [sp, #0]
 8009552:	b300      	cbz	r0, 8009596 <__d2b+0x82>
 8009554:	9a01      	ldr	r2, [sp, #4]
 8009556:	f1c0 0320 	rsb	r3, r0, #32
 800955a:	fa02 f303 	lsl.w	r3, r2, r3
 800955e:	430b      	orrs	r3, r1
 8009560:	40c2      	lsrs	r2, r0
 8009562:	6163      	str	r3, [r4, #20]
 8009564:	9201      	str	r2, [sp, #4]
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	61a3      	str	r3, [r4, #24]
 800956a:	2b00      	cmp	r3, #0
 800956c:	bf14      	ite	ne
 800956e:	2202      	movne	r2, #2
 8009570:	2201      	moveq	r2, #1
 8009572:	6122      	str	r2, [r4, #16]
 8009574:	b1d5      	cbz	r5, 80095ac <__d2b+0x98>
 8009576:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800957a:	4405      	add	r5, r0
 800957c:	f8c9 5000 	str.w	r5, [r9]
 8009580:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009584:	f8c8 0000 	str.w	r0, [r8]
 8009588:	4620      	mov	r0, r4
 800958a:	b003      	add	sp, #12
 800958c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009594:	e7d5      	b.n	8009542 <__d2b+0x2e>
 8009596:	6161      	str	r1, [r4, #20]
 8009598:	e7e5      	b.n	8009566 <__d2b+0x52>
 800959a:	a801      	add	r0, sp, #4
 800959c:	f7ff fd5a 	bl	8009054 <__lo0bits>
 80095a0:	9b01      	ldr	r3, [sp, #4]
 80095a2:	6163      	str	r3, [r4, #20]
 80095a4:	2201      	movs	r2, #1
 80095a6:	6122      	str	r2, [r4, #16]
 80095a8:	3020      	adds	r0, #32
 80095aa:	e7e3      	b.n	8009574 <__d2b+0x60>
 80095ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095b4:	f8c9 0000 	str.w	r0, [r9]
 80095b8:	6918      	ldr	r0, [r3, #16]
 80095ba:	f7ff fd2b 	bl	8009014 <__hi0bits>
 80095be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095c2:	e7df      	b.n	8009584 <__d2b+0x70>
 80095c4:	0800af40 	.word	0x0800af40
 80095c8:	0800af51 	.word	0x0800af51

080095cc <_calloc_r>:
 80095cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ce:	fba1 2402 	umull	r2, r4, r1, r2
 80095d2:	b94c      	cbnz	r4, 80095e8 <_calloc_r+0x1c>
 80095d4:	4611      	mov	r1, r2
 80095d6:	9201      	str	r2, [sp, #4]
 80095d8:	f7fe f8a6 	bl	8007728 <_malloc_r>
 80095dc:	9a01      	ldr	r2, [sp, #4]
 80095de:	4605      	mov	r5, r0
 80095e0:	b930      	cbnz	r0, 80095f0 <_calloc_r+0x24>
 80095e2:	4628      	mov	r0, r5
 80095e4:	b003      	add	sp, #12
 80095e6:	bd30      	pop	{r4, r5, pc}
 80095e8:	220c      	movs	r2, #12
 80095ea:	6002      	str	r2, [r0, #0]
 80095ec:	2500      	movs	r5, #0
 80095ee:	e7f8      	b.n	80095e2 <_calloc_r+0x16>
 80095f0:	4621      	mov	r1, r4
 80095f2:	f7fe f825 	bl	8007640 <memset>
 80095f6:	e7f4      	b.n	80095e2 <_calloc_r+0x16>

080095f8 <__ssputs_r>:
 80095f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095fc:	688e      	ldr	r6, [r1, #8]
 80095fe:	429e      	cmp	r6, r3
 8009600:	4682      	mov	sl, r0
 8009602:	460c      	mov	r4, r1
 8009604:	4690      	mov	r8, r2
 8009606:	461f      	mov	r7, r3
 8009608:	d838      	bhi.n	800967c <__ssputs_r+0x84>
 800960a:	898a      	ldrh	r2, [r1, #12]
 800960c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009610:	d032      	beq.n	8009678 <__ssputs_r+0x80>
 8009612:	6825      	ldr	r5, [r4, #0]
 8009614:	6909      	ldr	r1, [r1, #16]
 8009616:	eba5 0901 	sub.w	r9, r5, r1
 800961a:	6965      	ldr	r5, [r4, #20]
 800961c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009624:	3301      	adds	r3, #1
 8009626:	444b      	add	r3, r9
 8009628:	106d      	asrs	r5, r5, #1
 800962a:	429d      	cmp	r5, r3
 800962c:	bf38      	it	cc
 800962e:	461d      	movcc	r5, r3
 8009630:	0553      	lsls	r3, r2, #21
 8009632:	d531      	bpl.n	8009698 <__ssputs_r+0xa0>
 8009634:	4629      	mov	r1, r5
 8009636:	f7fe f877 	bl	8007728 <_malloc_r>
 800963a:	4606      	mov	r6, r0
 800963c:	b950      	cbnz	r0, 8009654 <__ssputs_r+0x5c>
 800963e:	230c      	movs	r3, #12
 8009640:	f8ca 3000 	str.w	r3, [sl]
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009654:	6921      	ldr	r1, [r4, #16]
 8009656:	464a      	mov	r2, r9
 8009658:	f7fd ffe4 	bl	8007624 <memcpy>
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009666:	81a3      	strh	r3, [r4, #12]
 8009668:	6126      	str	r6, [r4, #16]
 800966a:	6165      	str	r5, [r4, #20]
 800966c:	444e      	add	r6, r9
 800966e:	eba5 0509 	sub.w	r5, r5, r9
 8009672:	6026      	str	r6, [r4, #0]
 8009674:	60a5      	str	r5, [r4, #8]
 8009676:	463e      	mov	r6, r7
 8009678:	42be      	cmp	r6, r7
 800967a:	d900      	bls.n	800967e <__ssputs_r+0x86>
 800967c:	463e      	mov	r6, r7
 800967e:	6820      	ldr	r0, [r4, #0]
 8009680:	4632      	mov	r2, r6
 8009682:	4641      	mov	r1, r8
 8009684:	f000 f959 	bl	800993a <memmove>
 8009688:	68a3      	ldr	r3, [r4, #8]
 800968a:	1b9b      	subs	r3, r3, r6
 800968c:	60a3      	str	r3, [r4, #8]
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	4433      	add	r3, r6
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	2000      	movs	r0, #0
 8009696:	e7db      	b.n	8009650 <__ssputs_r+0x58>
 8009698:	462a      	mov	r2, r5
 800969a:	f000 f968 	bl	800996e <_realloc_r>
 800969e:	4606      	mov	r6, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d1e1      	bne.n	8009668 <__ssputs_r+0x70>
 80096a4:	6921      	ldr	r1, [r4, #16]
 80096a6:	4650      	mov	r0, sl
 80096a8:	f7fd ffd2 	bl	8007650 <_free_r>
 80096ac:	e7c7      	b.n	800963e <__ssputs_r+0x46>
	...

080096b0 <_svfiprintf_r>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	4698      	mov	r8, r3
 80096b6:	898b      	ldrh	r3, [r1, #12]
 80096b8:	061b      	lsls	r3, r3, #24
 80096ba:	b09d      	sub	sp, #116	; 0x74
 80096bc:	4607      	mov	r7, r0
 80096be:	460d      	mov	r5, r1
 80096c0:	4614      	mov	r4, r2
 80096c2:	d50e      	bpl.n	80096e2 <_svfiprintf_r+0x32>
 80096c4:	690b      	ldr	r3, [r1, #16]
 80096c6:	b963      	cbnz	r3, 80096e2 <_svfiprintf_r+0x32>
 80096c8:	2140      	movs	r1, #64	; 0x40
 80096ca:	f7fe f82d 	bl	8007728 <_malloc_r>
 80096ce:	6028      	str	r0, [r5, #0]
 80096d0:	6128      	str	r0, [r5, #16]
 80096d2:	b920      	cbnz	r0, 80096de <_svfiprintf_r+0x2e>
 80096d4:	230c      	movs	r3, #12
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e0d1      	b.n	8009882 <_svfiprintf_r+0x1d2>
 80096de:	2340      	movs	r3, #64	; 0x40
 80096e0:	616b      	str	r3, [r5, #20]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9309      	str	r3, [sp, #36]	; 0x24
 80096e6:	2320      	movs	r3, #32
 80096e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f0:	2330      	movs	r3, #48	; 0x30
 80096f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800989c <_svfiprintf_r+0x1ec>
 80096f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096fa:	f04f 0901 	mov.w	r9, #1
 80096fe:	4623      	mov	r3, r4
 8009700:	469a      	mov	sl, r3
 8009702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009706:	b10a      	cbz	r2, 800970c <_svfiprintf_r+0x5c>
 8009708:	2a25      	cmp	r2, #37	; 0x25
 800970a:	d1f9      	bne.n	8009700 <_svfiprintf_r+0x50>
 800970c:	ebba 0b04 	subs.w	fp, sl, r4
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x7a>
 8009712:	465b      	mov	r3, fp
 8009714:	4622      	mov	r2, r4
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ff6d 	bl	80095f8 <__ssputs_r>
 800971e:	3001      	adds	r0, #1
 8009720:	f000 80aa 	beq.w	8009878 <_svfiprintf_r+0x1c8>
 8009724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009726:	445a      	add	r2, fp
 8009728:	9209      	str	r2, [sp, #36]	; 0x24
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 80a2 	beq.w	8009878 <_svfiprintf_r+0x1c8>
 8009734:	2300      	movs	r3, #0
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973e:	f10a 0a01 	add.w	sl, sl, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800974a:	931a      	str	r3, [sp, #104]	; 0x68
 800974c:	4654      	mov	r4, sl
 800974e:	2205      	movs	r2, #5
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	4851      	ldr	r0, [pc, #324]	; (800989c <_svfiprintf_r+0x1ec>)
 8009756:	f7f6 fd43 	bl	80001e0 <memchr>
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	b9d8      	cbnz	r0, 8009796 <_svfiprintf_r+0xe6>
 800975e:	06d0      	lsls	r0, r2, #27
 8009760:	bf44      	itt	mi
 8009762:	2320      	movmi	r3, #32
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009768:	0711      	lsls	r1, r2, #28
 800976a:	bf44      	itt	mi
 800976c:	232b      	movmi	r3, #43	; 0x2b
 800976e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b2a      	cmp	r3, #42	; 0x2a
 8009778:	d015      	beq.n	80097a6 <_svfiprintf_r+0xf6>
 800977a:	9a07      	ldr	r2, [sp, #28]
 800977c:	4654      	mov	r4, sl
 800977e:	2000      	movs	r0, #0
 8009780:	f04f 0c0a 	mov.w	ip, #10
 8009784:	4621      	mov	r1, r4
 8009786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800978a:	3b30      	subs	r3, #48	; 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d94e      	bls.n	800982e <_svfiprintf_r+0x17e>
 8009790:	b1b0      	cbz	r0, 80097c0 <_svfiprintf_r+0x110>
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	e014      	b.n	80097c0 <_svfiprintf_r+0x110>
 8009796:	eba0 0308 	sub.w	r3, r0, r8
 800979a:	fa09 f303 	lsl.w	r3, r9, r3
 800979e:	4313      	orrs	r3, r2
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	46a2      	mov	sl, r4
 80097a4:	e7d2      	b.n	800974c <_svfiprintf_r+0x9c>
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	1d19      	adds	r1, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9103      	str	r1, [sp, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbb      	ittet	lt
 80097b2:	425b      	neglt	r3, r3
 80097b4:	f042 0202 	orrlt.w	r2, r2, #2
 80097b8:	9307      	strge	r3, [sp, #28]
 80097ba:	9307      	strlt	r3, [sp, #28]
 80097bc:	bfb8      	it	lt
 80097be:	9204      	strlt	r2, [sp, #16]
 80097c0:	7823      	ldrb	r3, [r4, #0]
 80097c2:	2b2e      	cmp	r3, #46	; 0x2e
 80097c4:	d10c      	bne.n	80097e0 <_svfiprintf_r+0x130>
 80097c6:	7863      	ldrb	r3, [r4, #1]
 80097c8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ca:	d135      	bne.n	8009838 <_svfiprintf_r+0x188>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9203      	str	r2, [sp, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bfb8      	it	lt
 80097d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80097dc:	3402      	adds	r4, #2
 80097de:	9305      	str	r3, [sp, #20]
 80097e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098ac <_svfiprintf_r+0x1fc>
 80097e4:	7821      	ldrb	r1, [r4, #0]
 80097e6:	2203      	movs	r2, #3
 80097e8:	4650      	mov	r0, sl
 80097ea:	f7f6 fcf9 	bl	80001e0 <memchr>
 80097ee:	b140      	cbz	r0, 8009802 <_svfiprintf_r+0x152>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	eba0 000a 	sub.w	r0, r0, sl
 80097f6:	fa03 f000 	lsl.w	r0, r3, r0
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	4303      	orrs	r3, r0
 80097fe:	3401      	adds	r4, #1
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009806:	4826      	ldr	r0, [pc, #152]	; (80098a0 <_svfiprintf_r+0x1f0>)
 8009808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800980c:	2206      	movs	r2, #6
 800980e:	f7f6 fce7 	bl	80001e0 <memchr>
 8009812:	2800      	cmp	r0, #0
 8009814:	d038      	beq.n	8009888 <_svfiprintf_r+0x1d8>
 8009816:	4b23      	ldr	r3, [pc, #140]	; (80098a4 <_svfiprintf_r+0x1f4>)
 8009818:	bb1b      	cbnz	r3, 8009862 <_svfiprintf_r+0x1b2>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	3307      	adds	r3, #7
 800981e:	f023 0307 	bic.w	r3, r3, #7
 8009822:	3308      	adds	r3, #8
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009828:	4433      	add	r3, r6
 800982a:	9309      	str	r3, [sp, #36]	; 0x24
 800982c:	e767      	b.n	80096fe <_svfiprintf_r+0x4e>
 800982e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009832:	460c      	mov	r4, r1
 8009834:	2001      	movs	r0, #1
 8009836:	e7a5      	b.n	8009784 <_svfiprintf_r+0xd4>
 8009838:	2300      	movs	r3, #0
 800983a:	3401      	adds	r4, #1
 800983c:	9305      	str	r3, [sp, #20]
 800983e:	4619      	mov	r1, r3
 8009840:	f04f 0c0a 	mov.w	ip, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800984a:	3a30      	subs	r2, #48	; 0x30
 800984c:	2a09      	cmp	r2, #9
 800984e:	d903      	bls.n	8009858 <_svfiprintf_r+0x1a8>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0c5      	beq.n	80097e0 <_svfiprintf_r+0x130>
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	e7c3      	b.n	80097e0 <_svfiprintf_r+0x130>
 8009858:	fb0c 2101 	mla	r1, ip, r1, r2
 800985c:	4604      	mov	r4, r0
 800985e:	2301      	movs	r3, #1
 8009860:	e7f0      	b.n	8009844 <_svfiprintf_r+0x194>
 8009862:	ab03      	add	r3, sp, #12
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	462a      	mov	r2, r5
 8009868:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <_svfiprintf_r+0x1f8>)
 800986a:	a904      	add	r1, sp, #16
 800986c:	4638      	mov	r0, r7
 800986e:	f7fe f86f 	bl	8007950 <_printf_float>
 8009872:	1c42      	adds	r2, r0, #1
 8009874:	4606      	mov	r6, r0
 8009876:	d1d6      	bne.n	8009826 <_svfiprintf_r+0x176>
 8009878:	89ab      	ldrh	r3, [r5, #12]
 800987a:	065b      	lsls	r3, r3, #25
 800987c:	f53f af2c 	bmi.w	80096d8 <_svfiprintf_r+0x28>
 8009880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009882:	b01d      	add	sp, #116	; 0x74
 8009884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009888:	ab03      	add	r3, sp, #12
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	462a      	mov	r2, r5
 800988e:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <_svfiprintf_r+0x1f8>)
 8009890:	a904      	add	r1, sp, #16
 8009892:	4638      	mov	r0, r7
 8009894:	f7fe fb00 	bl	8007e98 <_printf_i>
 8009898:	e7eb      	b.n	8009872 <_svfiprintf_r+0x1c2>
 800989a:	bf00      	nop
 800989c:	0800b0ac 	.word	0x0800b0ac
 80098a0:	0800b0b6 	.word	0x0800b0b6
 80098a4:	08007951 	.word	0x08007951
 80098a8:	080095f9 	.word	0x080095f9
 80098ac:	0800b0b2 	.word	0x0800b0b2

080098b0 <__assert_func>:
 80098b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098b2:	4614      	mov	r4, r2
 80098b4:	461a      	mov	r2, r3
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <__assert_func+0x2c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4605      	mov	r5, r0
 80098bc:	68d8      	ldr	r0, [r3, #12]
 80098be:	b14c      	cbz	r4, 80098d4 <__assert_func+0x24>
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <__assert_func+0x30>)
 80098c2:	9100      	str	r1, [sp, #0]
 80098c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098c8:	4906      	ldr	r1, [pc, #24]	; (80098e4 <__assert_func+0x34>)
 80098ca:	462b      	mov	r3, r5
 80098cc:	f000 f80e 	bl	80098ec <fiprintf>
 80098d0:	f000 faa4 	bl	8009e1c <abort>
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <__assert_func+0x38>)
 80098d6:	461c      	mov	r4, r3
 80098d8:	e7f3      	b.n	80098c2 <__assert_func+0x12>
 80098da:	bf00      	nop
 80098dc:	2000000c 	.word	0x2000000c
 80098e0:	0800b0bd 	.word	0x0800b0bd
 80098e4:	0800b0ca 	.word	0x0800b0ca
 80098e8:	0800b0f8 	.word	0x0800b0f8

080098ec <fiprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b503      	push	{r0, r1, lr}
 80098f0:	4601      	mov	r1, r0
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <fiprintf+0x20>)
 80098f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f000 f88f 	bl	8009a20 <_vfiprintf_r>
 8009902:	b002      	add	sp, #8
 8009904:	f85d eb04 	ldr.w	lr, [sp], #4
 8009908:	b003      	add	sp, #12
 800990a:	4770      	bx	lr
 800990c:	2000000c 	.word	0x2000000c

08009910 <__retarget_lock_init_recursive>:
 8009910:	4770      	bx	lr

08009912 <__retarget_lock_acquire_recursive>:
 8009912:	4770      	bx	lr

08009914 <__retarget_lock_release_recursive>:
 8009914:	4770      	bx	lr

08009916 <__ascii_mbtowc>:
 8009916:	b082      	sub	sp, #8
 8009918:	b901      	cbnz	r1, 800991c <__ascii_mbtowc+0x6>
 800991a:	a901      	add	r1, sp, #4
 800991c:	b142      	cbz	r2, 8009930 <__ascii_mbtowc+0x1a>
 800991e:	b14b      	cbz	r3, 8009934 <__ascii_mbtowc+0x1e>
 8009920:	7813      	ldrb	r3, [r2, #0]
 8009922:	600b      	str	r3, [r1, #0]
 8009924:	7812      	ldrb	r2, [r2, #0]
 8009926:	1e10      	subs	r0, r2, #0
 8009928:	bf18      	it	ne
 800992a:	2001      	movne	r0, #1
 800992c:	b002      	add	sp, #8
 800992e:	4770      	bx	lr
 8009930:	4610      	mov	r0, r2
 8009932:	e7fb      	b.n	800992c <__ascii_mbtowc+0x16>
 8009934:	f06f 0001 	mvn.w	r0, #1
 8009938:	e7f8      	b.n	800992c <__ascii_mbtowc+0x16>

0800993a <memmove>:
 800993a:	4288      	cmp	r0, r1
 800993c:	b510      	push	{r4, lr}
 800993e:	eb01 0402 	add.w	r4, r1, r2
 8009942:	d902      	bls.n	800994a <memmove+0x10>
 8009944:	4284      	cmp	r4, r0
 8009946:	4623      	mov	r3, r4
 8009948:	d807      	bhi.n	800995a <memmove+0x20>
 800994a:	1e43      	subs	r3, r0, #1
 800994c:	42a1      	cmp	r1, r4
 800994e:	d008      	beq.n	8009962 <memmove+0x28>
 8009950:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009954:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009958:	e7f8      	b.n	800994c <memmove+0x12>
 800995a:	4402      	add	r2, r0
 800995c:	4601      	mov	r1, r0
 800995e:	428a      	cmp	r2, r1
 8009960:	d100      	bne.n	8009964 <memmove+0x2a>
 8009962:	bd10      	pop	{r4, pc}
 8009964:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009968:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800996c:	e7f7      	b.n	800995e <memmove+0x24>

0800996e <_realloc_r>:
 800996e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	4680      	mov	r8, r0
 8009974:	4614      	mov	r4, r2
 8009976:	460e      	mov	r6, r1
 8009978:	b921      	cbnz	r1, 8009984 <_realloc_r+0x16>
 800997a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800997e:	4611      	mov	r1, r2
 8009980:	f7fd bed2 	b.w	8007728 <_malloc_r>
 8009984:	b92a      	cbnz	r2, 8009992 <_realloc_r+0x24>
 8009986:	f7fd fe63 	bl	8007650 <_free_r>
 800998a:	4625      	mov	r5, r4
 800998c:	4628      	mov	r0, r5
 800998e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009992:	f000 fc67 	bl	800a264 <_malloc_usable_size_r>
 8009996:	4284      	cmp	r4, r0
 8009998:	4607      	mov	r7, r0
 800999a:	d802      	bhi.n	80099a2 <_realloc_r+0x34>
 800999c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099a0:	d812      	bhi.n	80099c8 <_realloc_r+0x5a>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4640      	mov	r0, r8
 80099a6:	f7fd febf 	bl	8007728 <_malloc_r>
 80099aa:	4605      	mov	r5, r0
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d0ed      	beq.n	800998c <_realloc_r+0x1e>
 80099b0:	42bc      	cmp	r4, r7
 80099b2:	4622      	mov	r2, r4
 80099b4:	4631      	mov	r1, r6
 80099b6:	bf28      	it	cs
 80099b8:	463a      	movcs	r2, r7
 80099ba:	f7fd fe33 	bl	8007624 <memcpy>
 80099be:	4631      	mov	r1, r6
 80099c0:	4640      	mov	r0, r8
 80099c2:	f7fd fe45 	bl	8007650 <_free_r>
 80099c6:	e7e1      	b.n	800998c <_realloc_r+0x1e>
 80099c8:	4635      	mov	r5, r6
 80099ca:	e7df      	b.n	800998c <_realloc_r+0x1e>

080099cc <__sfputc_r>:
 80099cc:	6893      	ldr	r3, [r2, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	b410      	push	{r4}
 80099d4:	6093      	str	r3, [r2, #8]
 80099d6:	da08      	bge.n	80099ea <__sfputc_r+0x1e>
 80099d8:	6994      	ldr	r4, [r2, #24]
 80099da:	42a3      	cmp	r3, r4
 80099dc:	db01      	blt.n	80099e2 <__sfputc_r+0x16>
 80099de:	290a      	cmp	r1, #10
 80099e0:	d103      	bne.n	80099ea <__sfputc_r+0x1e>
 80099e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e6:	f000 b94b 	b.w	8009c80 <__swbuf_r>
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	1c58      	adds	r0, r3, #1
 80099ee:	6010      	str	r0, [r2, #0]
 80099f0:	7019      	strb	r1, [r3, #0]
 80099f2:	4608      	mov	r0, r1
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <__sfputs_r>:
 80099fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	4614      	mov	r4, r2
 8009a02:	18d5      	adds	r5, r2, r3
 8009a04:	42ac      	cmp	r4, r5
 8009a06:	d101      	bne.n	8009a0c <__sfputs_r+0x12>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e007      	b.n	8009a1c <__sfputs_r+0x22>
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	463a      	mov	r2, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ffda 	bl	80099cc <__sfputc_r>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d1f3      	bne.n	8009a04 <__sfputs_r+0xa>
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a20 <_vfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460d      	mov	r5, r1
 8009a26:	b09d      	sub	sp, #116	; 0x74
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4698      	mov	r8, r3
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	b118      	cbz	r0, 8009a38 <_vfiprintf_r+0x18>
 8009a30:	6983      	ldr	r3, [r0, #24]
 8009a32:	b90b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x18>
 8009a34:	f000 fb14 	bl	800a060 <__sinit>
 8009a38:	4b89      	ldr	r3, [pc, #548]	; (8009c60 <_vfiprintf_r+0x240>)
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	d11b      	bne.n	8009a76 <_vfiprintf_r+0x56>
 8009a3e:	6875      	ldr	r5, [r6, #4]
 8009a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a42:	07d9      	lsls	r1, r3, #31
 8009a44:	d405      	bmi.n	8009a52 <_vfiprintf_r+0x32>
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	059a      	lsls	r2, r3, #22
 8009a4a:	d402      	bmi.n	8009a52 <_vfiprintf_r+0x32>
 8009a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a4e:	f7ff ff60 	bl	8009912 <__retarget_lock_acquire_recursive>
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	071b      	lsls	r3, r3, #28
 8009a56:	d501      	bpl.n	8009a5c <_vfiprintf_r+0x3c>
 8009a58:	692b      	ldr	r3, [r5, #16]
 8009a5a:	b9eb      	cbnz	r3, 8009a98 <_vfiprintf_r+0x78>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f000 f96e 	bl	8009d40 <__swsetup_r>
 8009a64:	b1c0      	cbz	r0, 8009a98 <_vfiprintf_r+0x78>
 8009a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a68:	07dc      	lsls	r4, r3, #31
 8009a6a:	d50e      	bpl.n	8009a8a <_vfiprintf_r+0x6a>
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b01d      	add	sp, #116	; 0x74
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	4b7b      	ldr	r3, [pc, #492]	; (8009c64 <_vfiprintf_r+0x244>)
 8009a78:	429d      	cmp	r5, r3
 8009a7a:	d101      	bne.n	8009a80 <_vfiprintf_r+0x60>
 8009a7c:	68b5      	ldr	r5, [r6, #8]
 8009a7e:	e7df      	b.n	8009a40 <_vfiprintf_r+0x20>
 8009a80:	4b79      	ldr	r3, [pc, #484]	; (8009c68 <_vfiprintf_r+0x248>)
 8009a82:	429d      	cmp	r5, r3
 8009a84:	bf08      	it	eq
 8009a86:	68f5      	ldreq	r5, [r6, #12]
 8009a88:	e7da      	b.n	8009a40 <_vfiprintf_r+0x20>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	0598      	lsls	r0, r3, #22
 8009a8e:	d4ed      	bmi.n	8009a6c <_vfiprintf_r+0x4c>
 8009a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a92:	f7ff ff3f 	bl	8009914 <__retarget_lock_release_recursive>
 8009a96:	e7e9      	b.n	8009a6c <_vfiprintf_r+0x4c>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aa6:	2330      	movs	r3, #48	; 0x30
 8009aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c6c <_vfiprintf_r+0x24c>
 8009aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab0:	f04f 0901 	mov.w	r9, #1
 8009ab4:	4623      	mov	r3, r4
 8009ab6:	469a      	mov	sl, r3
 8009ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009abc:	b10a      	cbz	r2, 8009ac2 <_vfiprintf_r+0xa2>
 8009abe:	2a25      	cmp	r2, #37	; 0x25
 8009ac0:	d1f9      	bne.n	8009ab6 <_vfiprintf_r+0x96>
 8009ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ac6:	d00b      	beq.n	8009ae0 <_vfiprintf_r+0xc0>
 8009ac8:	465b      	mov	r3, fp
 8009aca:	4622      	mov	r2, r4
 8009acc:	4629      	mov	r1, r5
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff ff93 	bl	80099fa <__sfputs_r>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f000 80aa 	beq.w	8009c2e <_vfiprintf_r+0x20e>
 8009ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009adc:	445a      	add	r2, fp
 8009ade:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 80a2 	beq.w	8009c2e <_vfiprintf_r+0x20e>
 8009aea:	2300      	movs	r3, #0
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af4:	f10a 0a01 	add.w	sl, sl, #1
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	9307      	str	r3, [sp, #28]
 8009afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b00:	931a      	str	r3, [sp, #104]	; 0x68
 8009b02:	4654      	mov	r4, sl
 8009b04:	2205      	movs	r2, #5
 8009b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0a:	4858      	ldr	r0, [pc, #352]	; (8009c6c <_vfiprintf_r+0x24c>)
 8009b0c:	f7f6 fb68 	bl	80001e0 <memchr>
 8009b10:	9a04      	ldr	r2, [sp, #16]
 8009b12:	b9d8      	cbnz	r0, 8009b4c <_vfiprintf_r+0x12c>
 8009b14:	06d1      	lsls	r1, r2, #27
 8009b16:	bf44      	itt	mi
 8009b18:	2320      	movmi	r3, #32
 8009b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b1e:	0713      	lsls	r3, r2, #28
 8009b20:	bf44      	itt	mi
 8009b22:	232b      	movmi	r3, #43	; 0x2b
 8009b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b28:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2e:	d015      	beq.n	8009b5c <_vfiprintf_r+0x13c>
 8009b30:	9a07      	ldr	r2, [sp, #28]
 8009b32:	4654      	mov	r4, sl
 8009b34:	2000      	movs	r0, #0
 8009b36:	f04f 0c0a 	mov.w	ip, #10
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b40:	3b30      	subs	r3, #48	; 0x30
 8009b42:	2b09      	cmp	r3, #9
 8009b44:	d94e      	bls.n	8009be4 <_vfiprintf_r+0x1c4>
 8009b46:	b1b0      	cbz	r0, 8009b76 <_vfiprintf_r+0x156>
 8009b48:	9207      	str	r2, [sp, #28]
 8009b4a:	e014      	b.n	8009b76 <_vfiprintf_r+0x156>
 8009b4c:	eba0 0308 	sub.w	r3, r0, r8
 8009b50:	fa09 f303 	lsl.w	r3, r9, r3
 8009b54:	4313      	orrs	r3, r2
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	46a2      	mov	sl, r4
 8009b5a:	e7d2      	b.n	8009b02 <_vfiprintf_r+0xe2>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	1d19      	adds	r1, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9103      	str	r1, [sp, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bfbb      	ittet	lt
 8009b68:	425b      	neglt	r3, r3
 8009b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b6e:	9307      	strge	r3, [sp, #28]
 8009b70:	9307      	strlt	r3, [sp, #28]
 8009b72:	bfb8      	it	lt
 8009b74:	9204      	strlt	r2, [sp, #16]
 8009b76:	7823      	ldrb	r3, [r4, #0]
 8009b78:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7a:	d10c      	bne.n	8009b96 <_vfiprintf_r+0x176>
 8009b7c:	7863      	ldrb	r3, [r4, #1]
 8009b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b80:	d135      	bne.n	8009bee <_vfiprintf_r+0x1ce>
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	1d1a      	adds	r2, r3, #4
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	9203      	str	r2, [sp, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfb8      	it	lt
 8009b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b92:	3402      	adds	r4, #2
 8009b94:	9305      	str	r3, [sp, #20]
 8009b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c7c <_vfiprintf_r+0x25c>
 8009b9a:	7821      	ldrb	r1, [r4, #0]
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	4650      	mov	r0, sl
 8009ba0:	f7f6 fb1e 	bl	80001e0 <memchr>
 8009ba4:	b140      	cbz	r0, 8009bb8 <_vfiprintf_r+0x198>
 8009ba6:	2340      	movs	r3, #64	; 0x40
 8009ba8:	eba0 000a 	sub.w	r0, r0, sl
 8009bac:	fa03 f000 	lsl.w	r0, r3, r0
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	4303      	orrs	r3, r0
 8009bb4:	3401      	adds	r4, #1
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbc:	482c      	ldr	r0, [pc, #176]	; (8009c70 <_vfiprintf_r+0x250>)
 8009bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc2:	2206      	movs	r2, #6
 8009bc4:	f7f6 fb0c 	bl	80001e0 <memchr>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d03f      	beq.n	8009c4c <_vfiprintf_r+0x22c>
 8009bcc:	4b29      	ldr	r3, [pc, #164]	; (8009c74 <_vfiprintf_r+0x254>)
 8009bce:	bb1b      	cbnz	r3, 8009c18 <_vfiprintf_r+0x1f8>
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	3307      	adds	r3, #7
 8009bd4:	f023 0307 	bic.w	r3, r3, #7
 8009bd8:	3308      	adds	r3, #8
 8009bda:	9303      	str	r3, [sp, #12]
 8009bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bde:	443b      	add	r3, r7
 8009be0:	9309      	str	r3, [sp, #36]	; 0x24
 8009be2:	e767      	b.n	8009ab4 <_vfiprintf_r+0x94>
 8009be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009be8:	460c      	mov	r4, r1
 8009bea:	2001      	movs	r0, #1
 8009bec:	e7a5      	b.n	8009b3a <_vfiprintf_r+0x11a>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f04f 0c0a 	mov.w	ip, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c00:	3a30      	subs	r2, #48	; 0x30
 8009c02:	2a09      	cmp	r2, #9
 8009c04:	d903      	bls.n	8009c0e <_vfiprintf_r+0x1ee>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d0c5      	beq.n	8009b96 <_vfiprintf_r+0x176>
 8009c0a:	9105      	str	r1, [sp, #20]
 8009c0c:	e7c3      	b.n	8009b96 <_vfiprintf_r+0x176>
 8009c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c12:	4604      	mov	r4, r0
 8009c14:	2301      	movs	r3, #1
 8009c16:	e7f0      	b.n	8009bfa <_vfiprintf_r+0x1da>
 8009c18:	ab03      	add	r3, sp, #12
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	462a      	mov	r2, r5
 8009c1e:	4b16      	ldr	r3, [pc, #88]	; (8009c78 <_vfiprintf_r+0x258>)
 8009c20:	a904      	add	r1, sp, #16
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7fd fe94 	bl	8007950 <_printf_float>
 8009c28:	4607      	mov	r7, r0
 8009c2a:	1c78      	adds	r0, r7, #1
 8009c2c:	d1d6      	bne.n	8009bdc <_vfiprintf_r+0x1bc>
 8009c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c30:	07d9      	lsls	r1, r3, #31
 8009c32:	d405      	bmi.n	8009c40 <_vfiprintf_r+0x220>
 8009c34:	89ab      	ldrh	r3, [r5, #12]
 8009c36:	059a      	lsls	r2, r3, #22
 8009c38:	d402      	bmi.n	8009c40 <_vfiprintf_r+0x220>
 8009c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3c:	f7ff fe6a 	bl	8009914 <__retarget_lock_release_recursive>
 8009c40:	89ab      	ldrh	r3, [r5, #12]
 8009c42:	065b      	lsls	r3, r3, #25
 8009c44:	f53f af12 	bmi.w	8009a6c <_vfiprintf_r+0x4c>
 8009c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c4a:	e711      	b.n	8009a70 <_vfiprintf_r+0x50>
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <_vfiprintf_r+0x258>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7fe f91e 	bl	8007e98 <_printf_i>
 8009c5c:	e7e4      	b.n	8009c28 <_vfiprintf_r+0x208>
 8009c5e:	bf00      	nop
 8009c60:	0800b124 	.word	0x0800b124
 8009c64:	0800b144 	.word	0x0800b144
 8009c68:	0800b104 	.word	0x0800b104
 8009c6c:	0800b0ac 	.word	0x0800b0ac
 8009c70:	0800b0b6 	.word	0x0800b0b6
 8009c74:	08007951 	.word	0x08007951
 8009c78:	080099fb 	.word	0x080099fb
 8009c7c:	0800b0b2 	.word	0x0800b0b2

08009c80 <__swbuf_r>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	460e      	mov	r6, r1
 8009c84:	4614      	mov	r4, r2
 8009c86:	4605      	mov	r5, r0
 8009c88:	b118      	cbz	r0, 8009c92 <__swbuf_r+0x12>
 8009c8a:	6983      	ldr	r3, [r0, #24]
 8009c8c:	b90b      	cbnz	r3, 8009c92 <__swbuf_r+0x12>
 8009c8e:	f000 f9e7 	bl	800a060 <__sinit>
 8009c92:	4b21      	ldr	r3, [pc, #132]	; (8009d18 <__swbuf_r+0x98>)
 8009c94:	429c      	cmp	r4, r3
 8009c96:	d12b      	bne.n	8009cf0 <__swbuf_r+0x70>
 8009c98:	686c      	ldr	r4, [r5, #4]
 8009c9a:	69a3      	ldr	r3, [r4, #24]
 8009c9c:	60a3      	str	r3, [r4, #8]
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	071a      	lsls	r2, r3, #28
 8009ca2:	d52f      	bpl.n	8009d04 <__swbuf_r+0x84>
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	b36b      	cbz	r3, 8009d04 <__swbuf_r+0x84>
 8009ca8:	6923      	ldr	r3, [r4, #16]
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	1ac0      	subs	r0, r0, r3
 8009cae:	6963      	ldr	r3, [r4, #20]
 8009cb0:	b2f6      	uxtb	r6, r6
 8009cb2:	4283      	cmp	r3, r0
 8009cb4:	4637      	mov	r7, r6
 8009cb6:	dc04      	bgt.n	8009cc2 <__swbuf_r+0x42>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f000 f93c 	bl	8009f38 <_fflush_r>
 8009cc0:	bb30      	cbnz	r0, 8009d10 <__swbuf_r+0x90>
 8009cc2:	68a3      	ldr	r3, [r4, #8]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	60a3      	str	r3, [r4, #8]
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	6022      	str	r2, [r4, #0]
 8009cce:	701e      	strb	r6, [r3, #0]
 8009cd0:	6963      	ldr	r3, [r4, #20]
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	4283      	cmp	r3, r0
 8009cd6:	d004      	beq.n	8009ce2 <__swbuf_r+0x62>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	07db      	lsls	r3, r3, #31
 8009cdc:	d506      	bpl.n	8009cec <__swbuf_r+0x6c>
 8009cde:	2e0a      	cmp	r6, #10
 8009ce0:	d104      	bne.n	8009cec <__swbuf_r+0x6c>
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f000 f927 	bl	8009f38 <_fflush_r>
 8009cea:	b988      	cbnz	r0, 8009d10 <__swbuf_r+0x90>
 8009cec:	4638      	mov	r0, r7
 8009cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <__swbuf_r+0x9c>)
 8009cf2:	429c      	cmp	r4, r3
 8009cf4:	d101      	bne.n	8009cfa <__swbuf_r+0x7a>
 8009cf6:	68ac      	ldr	r4, [r5, #8]
 8009cf8:	e7cf      	b.n	8009c9a <__swbuf_r+0x1a>
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <__swbuf_r+0xa0>)
 8009cfc:	429c      	cmp	r4, r3
 8009cfe:	bf08      	it	eq
 8009d00:	68ec      	ldreq	r4, [r5, #12]
 8009d02:	e7ca      	b.n	8009c9a <__swbuf_r+0x1a>
 8009d04:	4621      	mov	r1, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 f81a 	bl	8009d40 <__swsetup_r>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d0cb      	beq.n	8009ca8 <__swbuf_r+0x28>
 8009d10:	f04f 37ff 	mov.w	r7, #4294967295
 8009d14:	e7ea      	b.n	8009cec <__swbuf_r+0x6c>
 8009d16:	bf00      	nop
 8009d18:	0800b124 	.word	0x0800b124
 8009d1c:	0800b144 	.word	0x0800b144
 8009d20:	0800b104 	.word	0x0800b104

08009d24 <__ascii_wctomb>:
 8009d24:	b149      	cbz	r1, 8009d3a <__ascii_wctomb+0x16>
 8009d26:	2aff      	cmp	r2, #255	; 0xff
 8009d28:	bf85      	ittet	hi
 8009d2a:	238a      	movhi	r3, #138	; 0x8a
 8009d2c:	6003      	strhi	r3, [r0, #0]
 8009d2e:	700a      	strbls	r2, [r1, #0]
 8009d30:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d34:	bf98      	it	ls
 8009d36:	2001      	movls	r0, #1
 8009d38:	4770      	bx	lr
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4770      	bx	lr
	...

08009d40 <__swsetup_r>:
 8009d40:	4b32      	ldr	r3, [pc, #200]	; (8009e0c <__swsetup_r+0xcc>)
 8009d42:	b570      	push	{r4, r5, r6, lr}
 8009d44:	681d      	ldr	r5, [r3, #0]
 8009d46:	4606      	mov	r6, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	b125      	cbz	r5, 8009d56 <__swsetup_r+0x16>
 8009d4c:	69ab      	ldr	r3, [r5, #24]
 8009d4e:	b913      	cbnz	r3, 8009d56 <__swsetup_r+0x16>
 8009d50:	4628      	mov	r0, r5
 8009d52:	f000 f985 	bl	800a060 <__sinit>
 8009d56:	4b2e      	ldr	r3, [pc, #184]	; (8009e10 <__swsetup_r+0xd0>)
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	d10f      	bne.n	8009d7c <__swsetup_r+0x3c>
 8009d5c:	686c      	ldr	r4, [r5, #4]
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d64:	0719      	lsls	r1, r3, #28
 8009d66:	d42c      	bmi.n	8009dc2 <__swsetup_r+0x82>
 8009d68:	06dd      	lsls	r5, r3, #27
 8009d6a:	d411      	bmi.n	8009d90 <__swsetup_r+0x50>
 8009d6c:	2309      	movs	r3, #9
 8009d6e:	6033      	str	r3, [r6, #0]
 8009d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7a:	e03e      	b.n	8009dfa <__swsetup_r+0xba>
 8009d7c:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <__swsetup_r+0xd4>)
 8009d7e:	429c      	cmp	r4, r3
 8009d80:	d101      	bne.n	8009d86 <__swsetup_r+0x46>
 8009d82:	68ac      	ldr	r4, [r5, #8]
 8009d84:	e7eb      	b.n	8009d5e <__swsetup_r+0x1e>
 8009d86:	4b24      	ldr	r3, [pc, #144]	; (8009e18 <__swsetup_r+0xd8>)
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	bf08      	it	eq
 8009d8c:	68ec      	ldreq	r4, [r5, #12]
 8009d8e:	e7e6      	b.n	8009d5e <__swsetup_r+0x1e>
 8009d90:	0758      	lsls	r0, r3, #29
 8009d92:	d512      	bpl.n	8009dba <__swsetup_r+0x7a>
 8009d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d96:	b141      	cbz	r1, 8009daa <__swsetup_r+0x6a>
 8009d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	d002      	beq.n	8009da6 <__swsetup_r+0x66>
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7fd fc55 	bl	8007650 <_free_r>
 8009da6:	2300      	movs	r3, #0
 8009da8:	6363      	str	r3, [r4, #52]	; 0x34
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	2300      	movs	r3, #0
 8009db4:	6063      	str	r3, [r4, #4]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f043 0308 	orr.w	r3, r3, #8
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	b94b      	cbnz	r3, 8009dda <__swsetup_r+0x9a>
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd0:	d003      	beq.n	8009dda <__swsetup_r+0x9a>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f000 fa05 	bl	800a1e4 <__smakebuf_r>
 8009dda:	89a0      	ldrh	r0, [r4, #12]
 8009ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de0:	f010 0301 	ands.w	r3, r0, #1
 8009de4:	d00a      	beq.n	8009dfc <__swsetup_r+0xbc>
 8009de6:	2300      	movs	r3, #0
 8009de8:	60a3      	str	r3, [r4, #8]
 8009dea:	6963      	ldr	r3, [r4, #20]
 8009dec:	425b      	negs	r3, r3
 8009dee:	61a3      	str	r3, [r4, #24]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	b943      	cbnz	r3, 8009e06 <__swsetup_r+0xc6>
 8009df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009df8:	d1ba      	bne.n	8009d70 <__swsetup_r+0x30>
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	0781      	lsls	r1, r0, #30
 8009dfe:	bf58      	it	pl
 8009e00:	6963      	ldrpl	r3, [r4, #20]
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	e7f4      	b.n	8009df0 <__swsetup_r+0xb0>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e7f7      	b.n	8009dfa <__swsetup_r+0xba>
 8009e0a:	bf00      	nop
 8009e0c:	2000000c 	.word	0x2000000c
 8009e10:	0800b124 	.word	0x0800b124
 8009e14:	0800b144 	.word	0x0800b144
 8009e18:	0800b104 	.word	0x0800b104

08009e1c <abort>:
 8009e1c:	b508      	push	{r3, lr}
 8009e1e:	2006      	movs	r0, #6
 8009e20:	f000 fa50 	bl	800a2c4 <raise>
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7f8 f9cd 	bl	80021c4 <_exit>
	...

08009e2c <__sflush_r>:
 8009e2c:	898a      	ldrh	r2, [r1, #12]
 8009e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e32:	4605      	mov	r5, r0
 8009e34:	0710      	lsls	r0, r2, #28
 8009e36:	460c      	mov	r4, r1
 8009e38:	d458      	bmi.n	8009eec <__sflush_r+0xc0>
 8009e3a:	684b      	ldr	r3, [r1, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dc05      	bgt.n	8009e4c <__sflush_r+0x20>
 8009e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	dc02      	bgt.n	8009e4c <__sflush_r+0x20>
 8009e46:	2000      	movs	r0, #0
 8009e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	d0f9      	beq.n	8009e46 <__sflush_r+0x1a>
 8009e52:	2300      	movs	r3, #0
 8009e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e58:	682f      	ldr	r7, [r5, #0]
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	d032      	beq.n	8009ec4 <__sflush_r+0x98>
 8009e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	075a      	lsls	r2, r3, #29
 8009e64:	d505      	bpl.n	8009e72 <__sflush_r+0x46>
 8009e66:	6863      	ldr	r3, [r4, #4]
 8009e68:	1ac0      	subs	r0, r0, r3
 8009e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e6c:	b10b      	cbz	r3, 8009e72 <__sflush_r+0x46>
 8009e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e70:	1ac0      	subs	r0, r0, r3
 8009e72:	2300      	movs	r3, #0
 8009e74:	4602      	mov	r2, r0
 8009e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e78:	6a21      	ldr	r1, [r4, #32]
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	47b0      	blx	r6
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	d106      	bne.n	8009e92 <__sflush_r+0x66>
 8009e84:	6829      	ldr	r1, [r5, #0]
 8009e86:	291d      	cmp	r1, #29
 8009e88:	d82c      	bhi.n	8009ee4 <__sflush_r+0xb8>
 8009e8a:	4a2a      	ldr	r2, [pc, #168]	; (8009f34 <__sflush_r+0x108>)
 8009e8c:	40ca      	lsrs	r2, r1
 8009e8e:	07d6      	lsls	r6, r2, #31
 8009e90:	d528      	bpl.n	8009ee4 <__sflush_r+0xb8>
 8009e92:	2200      	movs	r2, #0
 8009e94:	6062      	str	r2, [r4, #4]
 8009e96:	04d9      	lsls	r1, r3, #19
 8009e98:	6922      	ldr	r2, [r4, #16]
 8009e9a:	6022      	str	r2, [r4, #0]
 8009e9c:	d504      	bpl.n	8009ea8 <__sflush_r+0x7c>
 8009e9e:	1c42      	adds	r2, r0, #1
 8009ea0:	d101      	bne.n	8009ea6 <__sflush_r+0x7a>
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	b903      	cbnz	r3, 8009ea8 <__sflush_r+0x7c>
 8009ea6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eaa:	602f      	str	r7, [r5, #0]
 8009eac:	2900      	cmp	r1, #0
 8009eae:	d0ca      	beq.n	8009e46 <__sflush_r+0x1a>
 8009eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	d002      	beq.n	8009ebe <__sflush_r+0x92>
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f7fd fbc9 	bl	8007650 <_free_r>
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ec2:	e7c1      	b.n	8009e48 <__sflush_r+0x1c>
 8009ec4:	6a21      	ldr	r1, [r4, #32]
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b0      	blx	r6
 8009ecc:	1c41      	adds	r1, r0, #1
 8009ece:	d1c7      	bne.n	8009e60 <__sflush_r+0x34>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0c4      	beq.n	8009e60 <__sflush_r+0x34>
 8009ed6:	2b1d      	cmp	r3, #29
 8009ed8:	d001      	beq.n	8009ede <__sflush_r+0xb2>
 8009eda:	2b16      	cmp	r3, #22
 8009edc:	d101      	bne.n	8009ee2 <__sflush_r+0xb6>
 8009ede:	602f      	str	r7, [r5, #0]
 8009ee0:	e7b1      	b.n	8009e46 <__sflush_r+0x1a>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	e7ad      	b.n	8009e48 <__sflush_r+0x1c>
 8009eec:	690f      	ldr	r7, [r1, #16]
 8009eee:	2f00      	cmp	r7, #0
 8009ef0:	d0a9      	beq.n	8009e46 <__sflush_r+0x1a>
 8009ef2:	0793      	lsls	r3, r2, #30
 8009ef4:	680e      	ldr	r6, [r1, #0]
 8009ef6:	bf08      	it	eq
 8009ef8:	694b      	ldreq	r3, [r1, #20]
 8009efa:	600f      	str	r7, [r1, #0]
 8009efc:	bf18      	it	ne
 8009efe:	2300      	movne	r3, #0
 8009f00:	eba6 0807 	sub.w	r8, r6, r7
 8009f04:	608b      	str	r3, [r1, #8]
 8009f06:	f1b8 0f00 	cmp.w	r8, #0
 8009f0a:	dd9c      	ble.n	8009e46 <__sflush_r+0x1a>
 8009f0c:	6a21      	ldr	r1, [r4, #32]
 8009f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f10:	4643      	mov	r3, r8
 8009f12:	463a      	mov	r2, r7
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b0      	blx	r6
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	dc06      	bgt.n	8009f2a <__sflush_r+0xfe>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e78e      	b.n	8009e48 <__sflush_r+0x1c>
 8009f2a:	4407      	add	r7, r0
 8009f2c:	eba8 0800 	sub.w	r8, r8, r0
 8009f30:	e7e9      	b.n	8009f06 <__sflush_r+0xda>
 8009f32:	bf00      	nop
 8009f34:	20400001 	.word	0x20400001

08009f38 <_fflush_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	690b      	ldr	r3, [r1, #16]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	460c      	mov	r4, r1
 8009f40:	b913      	cbnz	r3, 8009f48 <_fflush_r+0x10>
 8009f42:	2500      	movs	r5, #0
 8009f44:	4628      	mov	r0, r5
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	b118      	cbz	r0, 8009f52 <_fflush_r+0x1a>
 8009f4a:	6983      	ldr	r3, [r0, #24]
 8009f4c:	b90b      	cbnz	r3, 8009f52 <_fflush_r+0x1a>
 8009f4e:	f000 f887 	bl	800a060 <__sinit>
 8009f52:	4b14      	ldr	r3, [pc, #80]	; (8009fa4 <_fflush_r+0x6c>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	d11b      	bne.n	8009f90 <_fflush_r+0x58>
 8009f58:	686c      	ldr	r4, [r5, #4]
 8009f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0ef      	beq.n	8009f42 <_fflush_r+0xa>
 8009f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f64:	07d0      	lsls	r0, r2, #31
 8009f66:	d404      	bmi.n	8009f72 <_fflush_r+0x3a>
 8009f68:	0599      	lsls	r1, r3, #22
 8009f6a:	d402      	bmi.n	8009f72 <_fflush_r+0x3a>
 8009f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f6e:	f7ff fcd0 	bl	8009912 <__retarget_lock_acquire_recursive>
 8009f72:	4628      	mov	r0, r5
 8009f74:	4621      	mov	r1, r4
 8009f76:	f7ff ff59 	bl	8009e2c <__sflush_r>
 8009f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f7c:	07da      	lsls	r2, r3, #31
 8009f7e:	4605      	mov	r5, r0
 8009f80:	d4e0      	bmi.n	8009f44 <_fflush_r+0xc>
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	059b      	lsls	r3, r3, #22
 8009f86:	d4dd      	bmi.n	8009f44 <_fflush_r+0xc>
 8009f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f8a:	f7ff fcc3 	bl	8009914 <__retarget_lock_release_recursive>
 8009f8e:	e7d9      	b.n	8009f44 <_fflush_r+0xc>
 8009f90:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <_fflush_r+0x70>)
 8009f92:	429c      	cmp	r4, r3
 8009f94:	d101      	bne.n	8009f9a <_fflush_r+0x62>
 8009f96:	68ac      	ldr	r4, [r5, #8]
 8009f98:	e7df      	b.n	8009f5a <_fflush_r+0x22>
 8009f9a:	4b04      	ldr	r3, [pc, #16]	; (8009fac <_fflush_r+0x74>)
 8009f9c:	429c      	cmp	r4, r3
 8009f9e:	bf08      	it	eq
 8009fa0:	68ec      	ldreq	r4, [r5, #12]
 8009fa2:	e7da      	b.n	8009f5a <_fflush_r+0x22>
 8009fa4:	0800b124 	.word	0x0800b124
 8009fa8:	0800b144 	.word	0x0800b144
 8009fac:	0800b104 	.word	0x0800b104

08009fb0 <std>:
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	b510      	push	{r4, lr}
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8009fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fbe:	6083      	str	r3, [r0, #8]
 8009fc0:	8181      	strh	r1, [r0, #12]
 8009fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8009fc4:	81c2      	strh	r2, [r0, #14]
 8009fc6:	6183      	str	r3, [r0, #24]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	2208      	movs	r2, #8
 8009fcc:	305c      	adds	r0, #92	; 0x5c
 8009fce:	f7fd fb37 	bl	8007640 <memset>
 8009fd2:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <std+0x38>)
 8009fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8009fd6:	4b05      	ldr	r3, [pc, #20]	; (8009fec <std+0x3c>)
 8009fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fda:	4b05      	ldr	r3, [pc, #20]	; (8009ff0 <std+0x40>)
 8009fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fde:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <std+0x44>)
 8009fe0:	6224      	str	r4, [r4, #32]
 8009fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8009fe4:	bd10      	pop	{r4, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800a2fd 	.word	0x0800a2fd
 8009fec:	0800a31f 	.word	0x0800a31f
 8009ff0:	0800a357 	.word	0x0800a357
 8009ff4:	0800a37b 	.word	0x0800a37b

08009ff8 <_cleanup_r>:
 8009ff8:	4901      	ldr	r1, [pc, #4]	; (800a000 <_cleanup_r+0x8>)
 8009ffa:	f000 b8af 	b.w	800a15c <_fwalk_reent>
 8009ffe:	bf00      	nop
 800a000:	08009f39 	.word	0x08009f39

0800a004 <__sfmoreglue>:
 800a004:	b570      	push	{r4, r5, r6, lr}
 800a006:	2268      	movs	r2, #104	; 0x68
 800a008:	1e4d      	subs	r5, r1, #1
 800a00a:	4355      	muls	r5, r2
 800a00c:	460e      	mov	r6, r1
 800a00e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a012:	f7fd fb89 	bl	8007728 <_malloc_r>
 800a016:	4604      	mov	r4, r0
 800a018:	b140      	cbz	r0, 800a02c <__sfmoreglue+0x28>
 800a01a:	2100      	movs	r1, #0
 800a01c:	e9c0 1600 	strd	r1, r6, [r0]
 800a020:	300c      	adds	r0, #12
 800a022:	60a0      	str	r0, [r4, #8]
 800a024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a028:	f7fd fb0a 	bl	8007640 <memset>
 800a02c:	4620      	mov	r0, r4
 800a02e:	bd70      	pop	{r4, r5, r6, pc}

0800a030 <__sfp_lock_acquire>:
 800a030:	4801      	ldr	r0, [pc, #4]	; (800a038 <__sfp_lock_acquire+0x8>)
 800a032:	f7ff bc6e 	b.w	8009912 <__retarget_lock_acquire_recursive>
 800a036:	bf00      	nop
 800a038:	2000066d 	.word	0x2000066d

0800a03c <__sfp_lock_release>:
 800a03c:	4801      	ldr	r0, [pc, #4]	; (800a044 <__sfp_lock_release+0x8>)
 800a03e:	f7ff bc69 	b.w	8009914 <__retarget_lock_release_recursive>
 800a042:	bf00      	nop
 800a044:	2000066d 	.word	0x2000066d

0800a048 <__sinit_lock_acquire>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sinit_lock_acquire+0x8>)
 800a04a:	f7ff bc62 	b.w	8009912 <__retarget_lock_acquire_recursive>
 800a04e:	bf00      	nop
 800a050:	2000066e 	.word	0x2000066e

0800a054 <__sinit_lock_release>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__sinit_lock_release+0x8>)
 800a056:	f7ff bc5d 	b.w	8009914 <__retarget_lock_release_recursive>
 800a05a:	bf00      	nop
 800a05c:	2000066e 	.word	0x2000066e

0800a060 <__sinit>:
 800a060:	b510      	push	{r4, lr}
 800a062:	4604      	mov	r4, r0
 800a064:	f7ff fff0 	bl	800a048 <__sinit_lock_acquire>
 800a068:	69a3      	ldr	r3, [r4, #24]
 800a06a:	b11b      	cbz	r3, 800a074 <__sinit+0x14>
 800a06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a070:	f7ff bff0 	b.w	800a054 <__sinit_lock_release>
 800a074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a078:	6523      	str	r3, [r4, #80]	; 0x50
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <__sinit+0x68>)
 800a07c:	4a13      	ldr	r2, [pc, #76]	; (800a0cc <__sinit+0x6c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	62a2      	str	r2, [r4, #40]	; 0x28
 800a082:	42a3      	cmp	r3, r4
 800a084:	bf04      	itt	eq
 800a086:	2301      	moveq	r3, #1
 800a088:	61a3      	streq	r3, [r4, #24]
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 f820 	bl	800a0d0 <__sfp>
 800a090:	6060      	str	r0, [r4, #4]
 800a092:	4620      	mov	r0, r4
 800a094:	f000 f81c 	bl	800a0d0 <__sfp>
 800a098:	60a0      	str	r0, [r4, #8]
 800a09a:	4620      	mov	r0, r4
 800a09c:	f000 f818 	bl	800a0d0 <__sfp>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	60e0      	str	r0, [r4, #12]
 800a0a4:	2104      	movs	r1, #4
 800a0a6:	6860      	ldr	r0, [r4, #4]
 800a0a8:	f7ff ff82 	bl	8009fb0 <std>
 800a0ac:	68a0      	ldr	r0, [r4, #8]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	2109      	movs	r1, #9
 800a0b2:	f7ff ff7d 	bl	8009fb0 <std>
 800a0b6:	68e0      	ldr	r0, [r4, #12]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	2112      	movs	r1, #18
 800a0bc:	f7ff ff78 	bl	8009fb0 <std>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	61a3      	str	r3, [r4, #24]
 800a0c4:	e7d2      	b.n	800a06c <__sinit+0xc>
 800a0c6:	bf00      	nop
 800a0c8:	0800ad88 	.word	0x0800ad88
 800a0cc:	08009ff9 	.word	0x08009ff9

0800a0d0 <__sfp>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	4607      	mov	r7, r0
 800a0d4:	f7ff ffac 	bl	800a030 <__sfp_lock_acquire>
 800a0d8:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <__sfp+0x84>)
 800a0da:	681e      	ldr	r6, [r3, #0]
 800a0dc:	69b3      	ldr	r3, [r6, #24]
 800a0de:	b913      	cbnz	r3, 800a0e6 <__sfp+0x16>
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff ffbd 	bl	800a060 <__sinit>
 800a0e6:	3648      	adds	r6, #72	; 0x48
 800a0e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	d503      	bpl.n	800a0f8 <__sfp+0x28>
 800a0f0:	6833      	ldr	r3, [r6, #0]
 800a0f2:	b30b      	cbz	r3, 800a138 <__sfp+0x68>
 800a0f4:	6836      	ldr	r6, [r6, #0]
 800a0f6:	e7f7      	b.n	800a0e8 <__sfp+0x18>
 800a0f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0fc:	b9d5      	cbnz	r5, 800a134 <__sfp+0x64>
 800a0fe:	4b16      	ldr	r3, [pc, #88]	; (800a158 <__sfp+0x88>)
 800a100:	60e3      	str	r3, [r4, #12]
 800a102:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a106:	6665      	str	r5, [r4, #100]	; 0x64
 800a108:	f7ff fc02 	bl	8009910 <__retarget_lock_init_recursive>
 800a10c:	f7ff ff96 	bl	800a03c <__sfp_lock_release>
 800a110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a118:	6025      	str	r5, [r4, #0]
 800a11a:	61a5      	str	r5, [r4, #24]
 800a11c:	2208      	movs	r2, #8
 800a11e:	4629      	mov	r1, r5
 800a120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a124:	f7fd fa8c 	bl	8007640 <memset>
 800a128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a12c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a130:	4620      	mov	r0, r4
 800a132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a134:	3468      	adds	r4, #104	; 0x68
 800a136:	e7d9      	b.n	800a0ec <__sfp+0x1c>
 800a138:	2104      	movs	r1, #4
 800a13a:	4638      	mov	r0, r7
 800a13c:	f7ff ff62 	bl	800a004 <__sfmoreglue>
 800a140:	4604      	mov	r4, r0
 800a142:	6030      	str	r0, [r6, #0]
 800a144:	2800      	cmp	r0, #0
 800a146:	d1d5      	bne.n	800a0f4 <__sfp+0x24>
 800a148:	f7ff ff78 	bl	800a03c <__sfp_lock_release>
 800a14c:	230c      	movs	r3, #12
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	e7ee      	b.n	800a130 <__sfp+0x60>
 800a152:	bf00      	nop
 800a154:	0800ad88 	.word	0x0800ad88
 800a158:	ffff0001 	.word	0xffff0001

0800a15c <_fwalk_reent>:
 800a15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a160:	4606      	mov	r6, r0
 800a162:	4688      	mov	r8, r1
 800a164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a168:	2700      	movs	r7, #0
 800a16a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a16e:	f1b9 0901 	subs.w	r9, r9, #1
 800a172:	d505      	bpl.n	800a180 <_fwalk_reent+0x24>
 800a174:	6824      	ldr	r4, [r4, #0]
 800a176:	2c00      	cmp	r4, #0
 800a178:	d1f7      	bne.n	800a16a <_fwalk_reent+0xe>
 800a17a:	4638      	mov	r0, r7
 800a17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a180:	89ab      	ldrh	r3, [r5, #12]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d907      	bls.n	800a196 <_fwalk_reent+0x3a>
 800a186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a18a:	3301      	adds	r3, #1
 800a18c:	d003      	beq.n	800a196 <_fwalk_reent+0x3a>
 800a18e:	4629      	mov	r1, r5
 800a190:	4630      	mov	r0, r6
 800a192:	47c0      	blx	r8
 800a194:	4307      	orrs	r7, r0
 800a196:	3568      	adds	r5, #104	; 0x68
 800a198:	e7e9      	b.n	800a16e <_fwalk_reent+0x12>

0800a19a <__swhatbuf_r>:
 800a19a:	b570      	push	{r4, r5, r6, lr}
 800a19c:	460e      	mov	r6, r1
 800a19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	b096      	sub	sp, #88	; 0x58
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	461d      	mov	r5, r3
 800a1aa:	da08      	bge.n	800a1be <__swhatbuf_r+0x24>
 800a1ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	602a      	str	r2, [r5, #0]
 800a1b4:	061a      	lsls	r2, r3, #24
 800a1b6:	d410      	bmi.n	800a1da <__swhatbuf_r+0x40>
 800a1b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1bc:	e00e      	b.n	800a1dc <__swhatbuf_r+0x42>
 800a1be:	466a      	mov	r2, sp
 800a1c0:	f000 f902 	bl	800a3c8 <_fstat_r>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	dbf1      	blt.n	800a1ac <__swhatbuf_r+0x12>
 800a1c8:	9a01      	ldr	r2, [sp, #4]
 800a1ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1d2:	425a      	negs	r2, r3
 800a1d4:	415a      	adcs	r2, r3
 800a1d6:	602a      	str	r2, [r5, #0]
 800a1d8:	e7ee      	b.n	800a1b8 <__swhatbuf_r+0x1e>
 800a1da:	2340      	movs	r3, #64	; 0x40
 800a1dc:	2000      	movs	r0, #0
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	b016      	add	sp, #88	; 0x58
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}

0800a1e4 <__smakebuf_r>:
 800a1e4:	898b      	ldrh	r3, [r1, #12]
 800a1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1e8:	079d      	lsls	r5, r3, #30
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	d507      	bpl.n	800a200 <__smakebuf_r+0x1c>
 800a1f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f4:	6023      	str	r3, [r4, #0]
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	6163      	str	r3, [r4, #20]
 800a1fc:	b002      	add	sp, #8
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	ab01      	add	r3, sp, #4
 800a202:	466a      	mov	r2, sp
 800a204:	f7ff ffc9 	bl	800a19a <__swhatbuf_r>
 800a208:	9900      	ldr	r1, [sp, #0]
 800a20a:	4605      	mov	r5, r0
 800a20c:	4630      	mov	r0, r6
 800a20e:	f7fd fa8b 	bl	8007728 <_malloc_r>
 800a212:	b948      	cbnz	r0, 800a228 <__smakebuf_r+0x44>
 800a214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a218:	059a      	lsls	r2, r3, #22
 800a21a:	d4ef      	bmi.n	800a1fc <__smakebuf_r+0x18>
 800a21c:	f023 0303 	bic.w	r3, r3, #3
 800a220:	f043 0302 	orr.w	r3, r3, #2
 800a224:	81a3      	strh	r3, [r4, #12]
 800a226:	e7e3      	b.n	800a1f0 <__smakebuf_r+0xc>
 800a228:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <__smakebuf_r+0x7c>)
 800a22a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	6020      	str	r0, [r4, #0]
 800a230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	9b00      	ldr	r3, [sp, #0]
 800a238:	6163      	str	r3, [r4, #20]
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	6120      	str	r0, [r4, #16]
 800a23e:	b15b      	cbz	r3, 800a258 <__smakebuf_r+0x74>
 800a240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f8d1 	bl	800a3ec <_isatty_r>
 800a24a:	b128      	cbz	r0, 800a258 <__smakebuf_r+0x74>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f023 0303 	bic.w	r3, r3, #3
 800a252:	f043 0301 	orr.w	r3, r3, #1
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	89a0      	ldrh	r0, [r4, #12]
 800a25a:	4305      	orrs	r5, r0
 800a25c:	81a5      	strh	r5, [r4, #12]
 800a25e:	e7cd      	b.n	800a1fc <__smakebuf_r+0x18>
 800a260:	08009ff9 	.word	0x08009ff9

0800a264 <_malloc_usable_size_r>:
 800a264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a268:	1f18      	subs	r0, r3, #4
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bfbc      	itt	lt
 800a26e:	580b      	ldrlt	r3, [r1, r0]
 800a270:	18c0      	addlt	r0, r0, r3
 800a272:	4770      	bx	lr

0800a274 <_raise_r>:
 800a274:	291f      	cmp	r1, #31
 800a276:	b538      	push	{r3, r4, r5, lr}
 800a278:	4604      	mov	r4, r0
 800a27a:	460d      	mov	r5, r1
 800a27c:	d904      	bls.n	800a288 <_raise_r+0x14>
 800a27e:	2316      	movs	r3, #22
 800a280:	6003      	str	r3, [r0, #0]
 800a282:	f04f 30ff 	mov.w	r0, #4294967295
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a28a:	b112      	cbz	r2, 800a292 <_raise_r+0x1e>
 800a28c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a290:	b94b      	cbnz	r3, 800a2a6 <_raise_r+0x32>
 800a292:	4620      	mov	r0, r4
 800a294:	f000 f830 	bl	800a2f8 <_getpid_r>
 800a298:	462a      	mov	r2, r5
 800a29a:	4601      	mov	r1, r0
 800a29c:	4620      	mov	r0, r4
 800a29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a2:	f000 b817 	b.w	800a2d4 <_kill_r>
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d00a      	beq.n	800a2c0 <_raise_r+0x4c>
 800a2aa:	1c59      	adds	r1, r3, #1
 800a2ac:	d103      	bne.n	800a2b6 <_raise_r+0x42>
 800a2ae:	2316      	movs	r3, #22
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	e7e7      	b.n	800a286 <_raise_r+0x12>
 800a2b6:	2400      	movs	r4, #0
 800a2b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2bc:	4628      	mov	r0, r5
 800a2be:	4798      	blx	r3
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e7e0      	b.n	800a286 <_raise_r+0x12>

0800a2c4 <raise>:
 800a2c4:	4b02      	ldr	r3, [pc, #8]	; (800a2d0 <raise+0xc>)
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	f7ff bfd3 	b.w	800a274 <_raise_r>
 800a2ce:	bf00      	nop
 800a2d0:	2000000c 	.word	0x2000000c

0800a2d4 <_kill_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	; (800a2f4 <_kill_r+0x20>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f7f7 ff5f 	bl	80021a4 <_kill>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d102      	bne.n	800a2f0 <_kill_r+0x1c>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b103      	cbz	r3, 800a2f0 <_kill_r+0x1c>
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	bd38      	pop	{r3, r4, r5, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000668 	.word	0x20000668

0800a2f8 <_getpid_r>:
 800a2f8:	f7f7 bf4c 	b.w	8002194 <_getpid>

0800a2fc <__sread>:
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	460c      	mov	r4, r1
 800a300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a304:	f000 f894 	bl	800a430 <_read_r>
 800a308:	2800      	cmp	r0, #0
 800a30a:	bfab      	itete	ge
 800a30c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a30e:	89a3      	ldrhlt	r3, [r4, #12]
 800a310:	181b      	addge	r3, r3, r0
 800a312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a316:	bfac      	ite	ge
 800a318:	6563      	strge	r3, [r4, #84]	; 0x54
 800a31a:	81a3      	strhlt	r3, [r4, #12]
 800a31c:	bd10      	pop	{r4, pc}

0800a31e <__swrite>:
 800a31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a322:	461f      	mov	r7, r3
 800a324:	898b      	ldrh	r3, [r1, #12]
 800a326:	05db      	lsls	r3, r3, #23
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	4616      	mov	r6, r2
 800a32e:	d505      	bpl.n	800a33c <__swrite+0x1e>
 800a330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a334:	2302      	movs	r3, #2
 800a336:	2200      	movs	r2, #0
 800a338:	f000 f868 	bl	800a40c <_lseek_r>
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	4632      	mov	r2, r6
 800a34a:	463b      	mov	r3, r7
 800a34c:	4628      	mov	r0, r5
 800a34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	f000 b817 	b.w	800a384 <_write_r>

0800a356 <__sseek>:
 800a356:	b510      	push	{r4, lr}
 800a358:	460c      	mov	r4, r1
 800a35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a35e:	f000 f855 	bl	800a40c <_lseek_r>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	bf15      	itete	ne
 800a368:	6560      	strne	r0, [r4, #84]	; 0x54
 800a36a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a36e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a372:	81a3      	strheq	r3, [r4, #12]
 800a374:	bf18      	it	ne
 800a376:	81a3      	strhne	r3, [r4, #12]
 800a378:	bd10      	pop	{r4, pc}

0800a37a <__sclose>:
 800a37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a37e:	f000 b813 	b.w	800a3a8 <_close_r>
	...

0800a384 <_write_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_write_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f7 ff3d 	bl	8002212 <_write>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_write_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_write_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20000668 	.word	0x20000668

0800a3a8 <_close_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d06      	ldr	r5, [pc, #24]	; (800a3c4 <_close_r+0x1c>)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	602b      	str	r3, [r5, #0]
 800a3b4:	f7f7 ff49 	bl	800224a <_close>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_close_r+0x1a>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_close_r+0x1a>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	20000668 	.word	0x20000668

0800a3c8 <_fstat_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4d07      	ldr	r5, [pc, #28]	; (800a3e8 <_fstat_r+0x20>)
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	f7f7 ff44 	bl	8002262 <_fstat>
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	d102      	bne.n	800a3e4 <_fstat_r+0x1c>
 800a3de:	682b      	ldr	r3, [r5, #0]
 800a3e0:	b103      	cbz	r3, 800a3e4 <_fstat_r+0x1c>
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	bd38      	pop	{r3, r4, r5, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000668 	.word	0x20000668

0800a3ec <_isatty_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4d06      	ldr	r5, [pc, #24]	; (800a408 <_isatty_r+0x1c>)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	602b      	str	r3, [r5, #0]
 800a3f8:	f7f7 ff43 	bl	8002282 <_isatty>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d102      	bne.n	800a406 <_isatty_r+0x1a>
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	b103      	cbz	r3, 800a406 <_isatty_r+0x1a>
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	20000668 	.word	0x20000668

0800a40c <_lseek_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d07      	ldr	r5, [pc, #28]	; (800a42c <_lseek_r+0x20>)
 800a410:	4604      	mov	r4, r0
 800a412:	4608      	mov	r0, r1
 800a414:	4611      	mov	r1, r2
 800a416:	2200      	movs	r2, #0
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	f7f7 ff3c 	bl	8002298 <_lseek>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_lseek_r+0x1e>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_lseek_r+0x1e>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20000668 	.word	0x20000668

0800a430 <_read_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d07      	ldr	r5, [pc, #28]	; (800a450 <_read_r+0x20>)
 800a434:	4604      	mov	r4, r0
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	2200      	movs	r2, #0
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	f7f7 feca 	bl	80021d8 <_read>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	d102      	bne.n	800a44e <_read_r+0x1e>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	b103      	cbz	r3, 800a44e <_read_r+0x1e>
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	20000668 	.word	0x20000668

0800a454 <_init>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	bf00      	nop
 800a458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45a:	bc08      	pop	{r3}
 800a45c:	469e      	mov	lr, r3
 800a45e:	4770      	bx	lr

0800a460 <_fini>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	bf00      	nop
 800a464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a466:	bc08      	pop	{r3}
 800a468:	469e      	mov	lr, r3
 800a46a:	4770      	bx	lr

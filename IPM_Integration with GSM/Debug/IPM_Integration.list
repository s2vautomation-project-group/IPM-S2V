
IPM_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08008158  08008158  00018158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cfc  08008cfc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008cfc  08008cfc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cfc  08008cfc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001dc  08008ee0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08008ee0  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e6e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd5  00000000  00000000  0003207a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00034e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00035dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023814  00000000  00000000  00036bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f8d  00000000  00000000  0005a3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d03eb  00000000  00000000  0006d371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d75c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  0013d7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800813c 	.word	0x0800813c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800813c 	.word	0x0800813c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <Voltage_Calculation>:
float vol;
int temp;


float Voltage_Calculation(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	vol=(float)(temp*(MIN_VALUE/MAX_VALUE));
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <Voltage_Calculation+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fc67 	bl	8000524 <__aeabi_i2d>
 8000c56:	a30a      	add	r3, pc, #40	; (adr r3, 8000c80 <Voltage_Calculation+0x38>)
 8000c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5c:	f7ff fccc 	bl	80005f8 <__aeabi_dmul>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	f7ff ff9e 	bl	8000ba8 <__aeabi_d2f>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <Voltage_Calculation+0x44>)
 8000c70:	6013      	str	r3, [r2, #0]
    return vol;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <Voltage_Calculation+0x44>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	ee07 3a90 	vmov	s15, r3
}
 8000c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	e734d9b4 	.word	0xe734d9b4
 8000c84:	3f4a680c 	.word	0x3f4a680c
 8000c88:	20000200 	.word	0x20000200
 8000c8c:	200001fc 	.word	0x200001fc

08000c90 <adc_handler>:

void adc_handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

	d = (float)Voltage_Calculation();
 8000c94:	f7ff ffd8 	bl	8000c48 <Voltage_Calculation>
 8000c98:	eef0 7a40 	vmov.f32	s15, s0
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <adc_handler+0x18>)
 8000c9e:	edc3 7a00 	vstr	s15, [r3]
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001f8 	.word	0x200001f8

08000cac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	temp = adc_value();
 8000cb4:	f000 f9fa 	bl	80010ac <adc_value>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000cbc:	6013      	str	r3, [r2, #0]
	//HAL_ADC_Start_IT(&hadc1);

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000200 	.word	0x20000200

08000ccc <bcdToDec>:
	return (uint8_t)( (val/10*16) + (val%10) );
}

//Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	return (int)( (val/16*10) + (val%16) );
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	4413      	add	r3, r2
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <Get_Time>:
      I2C_Write(&hi2c1, DS3107_ADDRESS, 0x00, 1, set_time, 7, 1000);


}
void Get_Time (void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	uint8_t get_time[7];

	I2C_read(get_time);
 8000d02:	463b      	mov	r3, r7
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f955 	bl	8000fb4 <I2C_read>

	time.seconds 	= bcdToDec(get_time[0]);
 8000d0a:	783b      	ldrb	r3, [r7, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ffdd 	bl	8000ccc <bcdToDec>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <Get_Time+0x88>)
 8000d18:	701a      	strb	r2, [r3, #0]
    time.minutes 	= bcdToDec(get_time[1]);
 8000d1a:	787b      	ldrb	r3, [r7, #1]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ffd5 	bl	8000ccc <bcdToDec>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <Get_Time+0x88>)
 8000d28:	705a      	strb	r2, [r3, #1]
	time.hour 		= bcdToDec(get_time[2]);
 8000d2a:	78bb      	ldrb	r3, [r7, #2]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffcd 	bl	8000ccc <bcdToDec>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <Get_Time+0x88>)
 8000d38:	709a      	strb	r2, [r3, #2]
	time.dayofweek  = bcdToDec(get_time[3]);
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ffc5 	bl	8000ccc <bcdToDec>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <Get_Time+0x88>)
 8000d48:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000d4a:	793b      	ldrb	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ffbd 	bl	8000ccc <bcdToDec>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <Get_Time+0x88>)
 8000d58:	711a      	strb	r2, [r3, #4]
	time.month 		= bcdToDec(get_time[5]);
 8000d5a:	797b      	ldrb	r3, [r7, #5]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ffb5 	bl	8000ccc <bcdToDec>
 8000d62:	4603      	mov	r3, r0
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <Get_Time+0x88>)
 8000d68:	715a      	strb	r2, [r3, #5]
	time.year 		= bcdToDec(get_time[6]);
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ffad 	bl	8000ccc <bcdToDec>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <Get_Time+0x88>)
 8000d78:	719a      	strb	r2, [r3, #6]
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000204 	.word	0x20000204

08000d88 <app>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void app(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af02      	add	r7, sp, #8
//  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Get_Time();
 8000d8e:	f7ff ffb5 	bl	8000cfc <Get_Time>
	  	  sprintf(buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <app+0x88>)
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <app+0x88>)
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <app+0x88>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	460b      	mov	r3, r1
 8000da6:	491b      	ldr	r1, [pc, #108]	; (8000e14 <app+0x8c>)
 8000da8:	481b      	ldr	r0, [pc, #108]	; (8000e18 <app+0x90>)
 8000daa:	f004 ff5d 	bl	8005c68 <siprintf>


	  	  ssd1306_SetCursor(5, 5);
 8000dae:	2105      	movs	r1, #5
 8000db0:	2005      	movs	r0, #5
 8000db2:	f000 fb73 	bl	800149c <ssd1306_SetCursor>
	  	  ssd1306_WriteString(buffer, Font_7x10, White);
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <app+0x94>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dbe:	4816      	ldr	r0, [pc, #88]	; (8000e18 <app+0x90>)
 8000dc0:	f000 fb46 	bl	8001450 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000dc4:	f000 fa36 	bl	8001234 <ssd1306_UpdateScreen>
//
//	  	  ssd1306_SetCursor(7, 20);
//	  	  ssd1306_WriteString(buffer, Font_7x10, White);
//	  	  ssd1306_UpdateScreen();

	  	  HAL_Delay(500);
 8000dc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dcc:	f000 fe56 	bl	8001a7c <HAL_Delay>

	  	        HAL_ADC_Start_IT(&hadc1);
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <app+0x98>)
 8000dd2:	f001 f999 	bl	8002108 <HAL_ADC_Start_IT>
	  		 	 adc_handler();
 8000dd6:	f7ff ff5b 	bl	8000c90 <adc_handler>


	  		   sprintf(buffer, "%f", d);
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <app+0x9c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fbb2 	bl	8000548 <__aeabi_f2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	490f      	ldr	r1, [pc, #60]	; (8000e28 <app+0xa0>)
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <app+0x90>)
 8000dec:	f004 ff3c 	bl	8005c68 <siprintf>

	  		 	  	  ssd1306_SetCursor(7, 20);
 8000df0:	2114      	movs	r1, #20
 8000df2:	2007      	movs	r0, #7
 8000df4:	f000 fb52 	bl	800149c <ssd1306_SetCursor>
	  		 	  	  ssd1306_WriteString(buffer, Font_7x10, White);
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <app+0x94>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	9200      	str	r2, [sp, #0]
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <app+0x90>)
 8000e02:	f000 fb25 	bl	8001450 <ssd1306_WriteString>
	  		 	  	  ssd1306_UpdateScreen();
 8000e06:	f000 fa15 	bl	8001234 <ssd1306_UpdateScreen>
  }
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000204 	.word	0x20000204
 8000e14:	08008158 	.word	0x08008158
 8000e18:	2000020c 	.word	0x2000020c
 8000e1c:	080088d8 	.word	0x080088d8
 8000e20:	20000424 	.word	0x20000424
 8000e24:	200001f8 	.word	0x200001f8
 8000e28:	08008168 	.word	0x08008168

08000e2c <User_SystemClock_Config>:
#include "application_RTC.h"
#include "ssd1306.h"
extern I2C_HandleTypeDef hi2c1;

void User_SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	; 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 faa2 	bl	8005384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e52:	f003 f911 	bl	8004078 <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <User_SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e5c:	f000 fb77 	bl	800154e <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e60:	f003 f8ec 	bl	800403c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <User_SystemClock_Config+0xc0>)
 8000e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <User_SystemClock_Config+0xc0>)
 8000e6c:	f023 0318 	bic.w	r3, r3, #24
 8000e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e74:	2314      	movs	r3, #20
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e84:	2360      	movs	r3, #96	; 0x60
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000e94:	2310      	movs	r3, #16
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 f93b 	bl	8004124 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <User_SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 fb4b 	bl	800154e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb8:	230f      	movs	r3, #15
 8000eba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fd3b 	bl	800494c <HAL_RCC_ClockConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <User_SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000edc:	f000 fb37 	bl	800154e <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ee0:	f004 f916 	bl	8005110 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ee4:	bf00      	nop
 8000ee6:	3758      	adds	r7, #88	; 0x58
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <USER_I2C1_Init>:


void USER_I2C1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <USER_I2C1_Init+0x78>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <USER_I2C1_Init+0x7c>)
 8000efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f2c:	f002 fa8a 	bl	8003444 <HAL_I2C_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <USER_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f36:	f000 fb0a 	bl	800154e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f3e:	f002 ffe5 	bl	8003f0c <HAL_I2CEx_ConfigAnalogFilter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <USER_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f48:	f000 fb01 	bl	800154e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <USER_I2C1_Init+0x74>)
 8000f50:	f003 f827 	bl	8003fa2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <USER_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f5a:	f000 faf8 	bl	800154e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000488 	.word	0x20000488
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	00707cbb 	.word	0x00707cbb

08000f70 <I2C_Write>:


// Generic I2C write function
void I2C_Write(I2C_HandleTypeDef *hi2c, uint16_t device_address, uint16_t mem_address, uint8_t mem_address_size, uint8_t *data, size_t data_size, uint32_t timeout)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	817b      	strh	r3, [r7, #10]
 8000f82:	460b      	mov	r3, r1
 8000f84:	813b      	strh	r3, [r7, #8]
 8000f86:	4613      	mov	r3, r2
 8000f88:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(hi2c, device_address, mem_address, mem_address_size, data, data_size, timeout);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	b29c      	uxth	r4, r3
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	8938      	ldrh	r0, [r7, #8]
 8000f94:	8979      	ldrh	r1, [r7, #10]
 8000f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f98:	9202      	str	r2, [sp, #8]
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f002 fadd 	bl	8003564 <HAL_I2C_Mem_Write>
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
	...

08000fb4 <I2C_read>:

//read function for RTC
void I2C_read(uint8_t *data)
   {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, DS3107_ADDRESS, 0x00, 1, data, 7, 1000);
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	21d0      	movs	r1, #208	; 0xd0
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <I2C_read+0x2c>)
 8000fd2:	f002 fbdb 	bl	800378c <HAL_I2C_Mem_Read>
   }
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000488 	.word	0x20000488

08000fe4 <USER_ADC1_Init>:
//  HAL_RCCEx_EnableMSIPLLMode();
//}


 void USER_ADC1_Init(void)
 {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN ADC1_Init 0 */
 //
   /* USER CODE END ADC1_Init 0 */

   ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 //
   /* USER CODE END ADC1_Init 1 */

   /** Common config
   */
   hadc1.Instance = ADC1;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8000ffc:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <USER_ADC1_Init+0xc0>)
 8000ffe:	601a      	str	r2, [r3, #0]
   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <USER_ADC1_Init+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <USER_ADC1_Init+0xbc>)
 800101a:	2204      	movs	r2, #4
 800101c:	615a      	str	r2, [r3, #20]
   hadc1.Init.LowPowerAutoWait = DISABLE;
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001020:	2200      	movs	r2, #0
 8001022:	761a      	strb	r2, [r3, #24]
   hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001026:	2200      	movs	r2, #0
 8001028:	765a      	strb	r2, [r3, #25]
   hadc1.Init.NbrOfConversion = 1;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <USER_ADC1_Init+0xbc>)
 800102c:	2201      	movs	r2, #1
 800102e:	61da      	str	r2, [r3, #28]
   hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2020 	strb.w	r2, [r3, #32]
   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <USER_ADC1_Init+0xbc>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001040:	2200      	movs	r2, #0
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
   hadc1.Init.DMAContinuousRequests = DISABLE;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <USER_ADC1_Init+0xbc>)
 800104e:	2200      	movs	r2, #0
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
   hadc1.Init.OversamplingMode = DISABLE;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <USER_ADC1_Init+0xbc>)
 800105c:	f000 ff0c 	bl	8001e78 <HAL_ADC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <USER_ADC1_Init+0x86>
   {
     Error_Handler();
 8001066:	f000 fa72 	bl	800154e <Error_Handler>
   }

   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_5;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <USER_ADC1_Init+0xc4>)
 800106c:	603b      	str	r3, [r7, #0]
   sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	607b      	str	r3, [r7, #4]
   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	60fb      	str	r3, [r7, #12]
   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	613b      	str	r3, [r7, #16]
   sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <USER_ADC1_Init+0xbc>)
 8001088:	f001 fac8 	bl	800261c <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <USER_ADC1_Init+0xb2>
   {
     Error_Handler();
 8001092:	f000 fa5c 	bl	800154e <Error_Handler>
   }
   /* USER CODE BEGIN ADC1_Init 2 */
 //
   /* USER CODE END ADC1_Init 2 */

 }
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000424 	.word	0x20000424
 80010a4:	50040000 	.word	0x50040000
 80010a8:	14f00020 	.word	0x14f00020

080010ac <adc_value>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

int adc_value(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
return	HAL_ADC_GetValue(&hadc1);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <adc_value+0x10>)
 80010b2:	f001 f8de 	bl	8002272 <HAL_ADC_GetValue>
 80010b6:	4603      	mov	r3, r0

}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000424 	.word	0x20000424

080010c0 <ssd1306_Reset>:
#include "common_RTC.h"


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <ssd1306_WriteCommand>:

 //Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	2200      	movs	r2, #0
 80010ec:	2178      	movs	r1, #120	; 0x78
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <ssd1306_WriteCommand+0x2c>)
 80010f0:	f7ff ff3e 	bl	8000f70 <I2C_Write>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000488 	.word	0x20000488

08001100 <ssd1306_WriteData>:


// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2240      	movs	r2, #64	; 0x40
 800111c:	2178      	movs	r1, #120	; 0x78
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <ssd1306_WriteData+0x2c>)
 8001120:	f7ff ff26 	bl	8000f70 <I2C_Write>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000488 	.word	0x20000488

08001130 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001134:	f7ff ffc4 	bl	80010c0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f000 fc9f 	bl	8001a7c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f9d8 	bl	80014f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ffc3 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ffc0 	bl	80010d0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001150:	20b0      	movs	r0, #176	; 0xb0
 8001152:	f7ff ffbd 	bl	80010d0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001156:	20c8      	movs	r0, #200	; 0xc8
 8001158:	f7ff ffba 	bl	80010d0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ffb7 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001162:	2010      	movs	r0, #16
 8001164:	f7ff ffb4 	bl	80010d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001168:	2040      	movs	r0, #64	; 0x40
 800116a:	f7ff ffb1 	bl	80010d0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800116e:	20ff      	movs	r0, #255	; 0xff
 8001170:	f000 f9ac 	bl	80014cc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001174:	20a1      	movs	r0, #161	; 0xa1
 8001176:	f7ff ffab 	bl	80010d0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800117a:	20a6      	movs	r0, #166	; 0xa6
 800117c:	f7ff ffa8 	bl	80010d0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001180:	20a8      	movs	r0, #168	; 0xa8
 8001182:	f7ff ffa5 	bl	80010d0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001186:	201f      	movs	r0, #31
 8001188:	f7ff ffa2 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800118c:	20a4      	movs	r0, #164	; 0xa4
 800118e:	f7ff ff9f 	bl	80010d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001192:	20d3      	movs	r0, #211	; 0xd3
 8001194:	f7ff ff9c 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff ff99 	bl	80010d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800119e:	20d5      	movs	r0, #213	; 0xd5
 80011a0:	f7ff ff96 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011a4:	20f0      	movs	r0, #240	; 0xf0
 80011a6:	f7ff ff93 	bl	80010d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011aa:	20d9      	movs	r0, #217	; 0xd9
 80011ac:	f7ff ff90 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011b0:	2022      	movs	r0, #34	; 0x22
 80011b2:	f7ff ff8d 	bl	80010d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011b6:	20da      	movs	r0, #218	; 0xda
 80011b8:	f7ff ff8a 	bl	80010d0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80011bc:	2002      	movs	r0, #2
 80011be:	f7ff ff87 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80011c2:	20db      	movs	r0, #219	; 0xdb
 80011c4:	f7ff ff84 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011c8:	2020      	movs	r0, #32
 80011ca:	f7ff ff81 	bl	80010d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011ce:	208d      	movs	r0, #141	; 0x8d
 80011d0:	f7ff ff7e 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80011d4:	2014      	movs	r0, #20
 80011d6:	f7ff ff7b 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 f98a 	bl	80014f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f80f 	bl	8001204 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011e6:	f000 f825 	bl	8001234 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <ssd1306_Init+0xd0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <ssd1306_Init+0xd0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80011f6:	4b02      	ldr	r3, [pc, #8]	; (8001200 <ssd1306_Init+0xd0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	711a      	strb	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000041c 	.word	0x2000041c

08001204 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <ssd1306_Fill+0x14>
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <ssd1306_Fill+0x16>
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121e:	4619      	mov	r1, r3
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <ssd1306_Fill+0x2c>)
 8001222:	f004 f8af 	bl	8005384 <memset>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000021c 	.word	0x2000021c

08001234 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e016      	b.n	800126e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	3b50      	subs	r3, #80	; 0x50
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff42 	bl	80010d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff ff3f 	bl	80010d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001252:	2010      	movs	r0, #16
 8001254:	f7ff ff3c 	bl	80010d0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	01db      	lsls	r3, r3, #7
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <ssd1306_UpdateScreen+0x4c>)
 800125e:	4413      	add	r3, r2
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff4c 	bl	8001100 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	3301      	adds	r3, #1
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d9e5      	bls.n	8001240 <ssd1306_UpdateScreen+0xc>
    }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000021c 	.word	0x2000021c

08001284 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	460b      	mov	r3, r1
 8001290:	71bb      	strb	r3, [r7, #6]
 8001292:	4613      	mov	r3, r2
 8001294:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db3d      	blt.n	800131a <ssd1306_DrawPixel+0x96>
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	2b1f      	cmp	r3, #31
 80012a2:	d83a      	bhi.n	800131a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d11a      	bne.n	80012e0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	b2d8      	uxtb	r0, r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	01db      	lsls	r3, r3, #7
 80012b6:	4413      	add	r3, r2
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <ssd1306_DrawPixel+0xa4>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b259      	sxtb	r1, r3
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	4603      	mov	r3, r0
 80012d4:	01db      	lsls	r3, r3, #7
 80012d6:	4413      	add	r3, r2
 80012d8:	b2c9      	uxtb	r1, r1
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <ssd1306_DrawPixel+0xa4>)
 80012dc:	54d1      	strb	r1, [r2, r3]
 80012de:	e01d      	b.n	800131c <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	08db      	lsrs	r3, r3, #3
 80012e6:	b2d8      	uxtb	r0, r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	4413      	add	r3, r2
 80012ee:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <ssd1306_DrawPixel+0xa4>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	b25b      	sxtb	r3, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	b25b      	sxtb	r3, r3
 8001306:	4013      	ands	r3, r2
 8001308:	b259      	sxtb	r1, r3
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	4603      	mov	r3, r0
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	4413      	add	r3, r2
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <ssd1306_DrawPixel+0xa4>)
 8001316:	54d1      	strb	r1, [r2, r3]
 8001318:	e000      	b.n	800131c <ssd1306_DrawPixel+0x98>
        return;
 800131a:	bf00      	nop
    }
}
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000021c 	.word	0x2000021c

0800132c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	4604      	mov	r4, r0
 8001334:	4638      	mov	r0, r7
 8001336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800133a:	4623      	mov	r3, r4
 800133c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	2b1f      	cmp	r3, #31
 8001342:	d902      	bls.n	800134a <ssd1306_WriteChar+0x1e>
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b7e      	cmp	r3, #126	; 0x7e
 8001348:	d901      	bls.n	800134e <ssd1306_WriteChar+0x22>
        return 0;
 800134a:	2300      	movs	r3, #0
 800134c:	e079      	b.n	8001442 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <ssd1306_WriteChar+0x120>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	783b      	ldrb	r3, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	2b80      	cmp	r3, #128	; 0x80
 800135a:	dc06      	bgt.n	800136a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <ssd1306_WriteChar+0x120>)
 800135e:	885b      	ldrh	r3, [r3, #2]
 8001360:	461a      	mov	r2, r3
 8001362:	787b      	ldrb	r3, [r7, #1]
 8001364:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001366:	2b20      	cmp	r3, #32
 8001368:	dd01      	ble.n	800136e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800136a:	2300      	movs	r3, #0
 800136c:	e069      	b.n	8001442 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e04e      	b.n	8001412 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3b20      	subs	r3, #32
 800137a:	7879      	ldrb	r1, [r7, #1]
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	4619      	mov	r1, r3
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	440b      	add	r3, r1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	e036      	b.n	8001402 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <ssd1306_WriteChar+0x120>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <ssd1306_WriteChar+0x120>)
 80013b4:	885b      	ldrh	r3, [r3, #2]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff ff5d 	bl	8001284 <ssd1306_DrawPixel>
 80013ca:	e017      	b.n	80013fc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <ssd1306_WriteChar+0x120>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <ssd1306_WriteChar+0x120>)
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b2d9      	uxtb	r1, r3
 80013e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	f7ff ff44 	bl	8001284 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	3301      	adds	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	783b      	ldrb	r3, [r7, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4293      	cmp	r3, r2
 800140a:	d3c3      	bcc.n	8001394 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	3301      	adds	r3, #1
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	787b      	ldrb	r3, [r7, #1]
 8001414:	461a      	mov	r2, r3
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	4293      	cmp	r3, r2
 800141a:	d3ab      	bcc.n	8001374 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <ssd1306_WriteChar+0x120>)
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <ssd1306_WriteChar+0x108>
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3b20      	subs	r3, #32
 800142c:	440b      	add	r3, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	e001      	b.n	8001438 <ssd1306_WriteChar+0x10c>
 8001434:	783b      	ldrb	r3, [r7, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <ssd1306_WriteChar+0x120>)
 800143e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd90      	pop	{r4, r7, pc}
 800144a:	bf00      	nop
 800144c:	2000041c 	.word	0x2000041c

08001450 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	4638      	mov	r0, r7
 800145a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800145e:	e013      	b.n	8001488 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	7818      	ldrb	r0, [r3, #0]
 8001464:	7e3b      	ldrb	r3, [r7, #24]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	463b      	mov	r3, r7
 800146a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800146c:	f7ff ff5e 	bl	800132c <ssd1306_WriteChar>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d002      	beq.n	8001482 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	e008      	b.n	8001494 <ssd1306_WriteString+0x44>
        }
        str++;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3301      	adds	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e7      	bne.n	8001460 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	781b      	ldrb	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <ssd1306_SetCursor+0x2c>)
 80014b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <ssd1306_SetCursor+0x2c>)
 80014ba:	805a      	strh	r2, [r3, #2]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	2000041c 	.word	0x2000041c

080014cc <ssd1306_SetContrast>:
//        }
//    }
//    return;
//}

void ssd1306_SetContrast(const uint8_t value) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80014d6:	2381      	movs	r3, #129	; 0x81
 80014d8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fdf7 	bl	80010d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fdf3 	bl	80010d0 <ssd1306_WriteCommand>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001504:	23af      	movs	r3, #175	; 0xaf
 8001506:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <ssd1306_SetDisplayOn+0x38>)
 800150a:	2201      	movs	r2, #1
 800150c:	715a      	strb	r2, [r3, #5]
 800150e:	e004      	b.n	800151a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001510:	23ae      	movs	r3, #174	; 0xae
 8001512:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <ssd1306_SetDisplayOn+0x38>)
 8001516:	2200      	movs	r2, #0
 8001518:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fdd7 	bl	80010d0 <ssd1306_WriteCommand>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000041c 	.word	0x2000041c

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fa2d 	bl	8001992 <HAL_Init>
  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_I2C1_Init();
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  User_SystemClock_Config();
 8001538:	f7ff fc78 	bl	8000e2c <User_SystemClock_Config>
  USER_ADC1_Init();
 800153c:	f7ff fd52 	bl	8000fe4 <USER_ADC1_Init>
  USER_I2C1_Init();
 8001540:	f7ff fcd6 	bl	8000ef0 <USER_I2C1_Init>
  ssd1306_Init();
 8001544:	f7ff fdf4 	bl	8001130 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app();
 8001548:	f7ff fc1e 	bl	8000d88 <app>
 800154c:	e7fc      	b.n	8001548 <main+0x18>

0800154e <Error_Handler>:
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
void Error_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001552:	b672      	cpsid	i
}
 8001554:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001556:	e7fe      	b.n	8001556 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <HAL_MspInit+0x44>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6613      	str	r3, [r2, #96]	; 0x60
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x44>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b09e      	sub	sp, #120	; 0x78
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	2254      	movs	r2, #84	; 0x54
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fedf 	bl	8005384 <memset>
  if(hadc->Instance==ADC1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a29      	ldr	r2, [pc, #164]	; (8001670 <HAL_ADC_MspInit+0xd0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d14b      	bne.n	8001668 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015da:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015dc:	2301      	movs	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80015e4:	2310      	movs	r3, #16
 80015e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015e8:	2307      	movs	r3, #7
 80015ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80015f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 fb90 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800160a:	f7ff ffa0 	bl	800154e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_ADC_MspInit+0xd4>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a18      	ldr	r2, [pc, #96]	; (8001674 <HAL_ADC_MspInit+0xd4>)
 8001614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_ADC_MspInit+0xd4>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_ADC_MspInit+0xd4>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <HAL_ADC_MspInit+0xd4>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_ADC_MspInit+0xd4>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001642:	230b      	movs	r3, #11
 8001644:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f001 fd8c 	bl	8003170 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2012      	movs	r0, #18
 800165e:	f001 fd50 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001662:	2012      	movs	r0, #18
 8001664:	f001 fd69 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3778      	adds	r7, #120	; 0x78
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	50040000 	.word	0x50040000
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b09e      	sub	sp, #120	; 0x78
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2254      	movs	r2, #84	; 0x54
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fe73 	bl	8005384 <memset>
  if(hi2c->Instance==I2C1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_I2C_MspInit+0xa4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d135      	bne.n	8001714 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fb35 	bl	8004d24 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016c0:	f7ff ff45 	bl	800154e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_I2C_MspInit+0xa8>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <HAL_I2C_MspInit+0xa8>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_I2C_MspInit+0xa8>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ec:	2304      	movs	r3, #4
 80016ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016f4:	4619      	mov	r1, r3
 80016f6:	480b      	ldr	r0, [pc, #44]	; (8001724 <HAL_I2C_MspInit+0xac>)
 80016f8:	f001 fd3a 	bl	8003170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_I2C_MspInit+0xa8>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_I2C_MspInit+0xa8>)
 8001702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001706:	6593      	str	r3, [r2, #88]	; 0x58
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_I2C_MspInit+0xa8>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001714:	bf00      	nop
 8001716:	3778      	adds	r7, #120	; 0x78
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40005400 	.word	0x40005400
 8001720:	40021000 	.word	0x40021000
 8001724:	48000400 	.word	0x48000400

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 f962 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <ADC1_IRQHandler+0x10>)
 8001782:	f000 fd83 	bl	800228c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000424 	.word	0x20000424

08001790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_kill>:

int _kill(int pid, int sig)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017aa:	f003 fdb3 	bl	8005314 <__errno>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2216      	movs	r2, #22
 80017b2:	601a      	str	r2, [r3, #0]
  return -1;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_exit>:

void _exit (int status)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffe7 	bl	80017a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d2:	e7fe      	b.n	80017d2 <_exit+0x12>

080017d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00a      	b.n	80017fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	4601      	mov	r1, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf0      	blt.n	80017e6 <_read+0x12>
  }

  return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e009      	b.n	8001834 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf1      	blt.n	8001820 <_write+0x12>
  }
  return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_close>:

int _close(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186e:	605a      	str	r2, [r3, #4]
  return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_isatty>:

int _isatty(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f003 fd18 	bl	8005314 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20010000 	.word	0x20010000
 8001910:	00000400 	.word	0x00000400
 8001914:	200004dc 	.word	0x200004dc
 8001918:	200004f8 	.word	0x200004f8

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001944:	f7ff ffea 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	; (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	; (800198c <LoopForever+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f003 fcd7 	bl	8005320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001972:	f7ff fddd 	bl	8001530 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001978:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001984:	08008d04 	.word	0x08008d04
  ldr r2, =_sbss
 8001988:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800198c:	200004f4 	.word	0x200004f4

08001990 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <CAN1_RX0_IRQHandler>

08001992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f001 fba5 	bl	80030ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f80e 	bl	80019c4 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	e001      	b.n	80019b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b4:	f7ff fdd0 	bl	8001558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_InitTick+0x6c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_InitTick+0x70>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_InitTick+0x6c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fbb1 	bl	8003156 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d809      	bhi.n	8001a14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f001 fb7b 	bl	8003102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_InitTick+0x74>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e007      	b.n	8001a24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e004      	b.n	8001a24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e001      	b.n	8001a24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	200004e0 	.word	0x200004e0

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200004e0 	.word	0x200004e0

08001a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a84:	f7ff ffee 	bl	8001a64 <HAL_GetTick>
 8001a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d005      	beq.n	8001aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_Delay+0x44>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa2:	bf00      	nop
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8f7      	bhi.n	8001aa4 <HAL_Delay+0x28>
  {
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3360      	adds	r3, #96	; 0x60
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <LL_ADC_SetOffset+0x44>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	03fff000 	.word	0x03fff000

08001b74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3360      	adds	r3, #96	; 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3360      	adds	r3, #96	; 0x60
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3330      	adds	r3, #48	; 0x30
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	4413      	add	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	211f      	movs	r1, #31
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0e9b      	lsrs	r3, r3, #26
 8001c34:	f003 011f 	and.w	r1, r3, #31
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	431a      	orrs	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3314      	adds	r3, #20
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	0e5b      	lsrs	r3, r3, #25
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	0d1b      	lsrs	r3, r3, #20
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2107      	movs	r1, #7
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	0d1b      	lsrs	r3, r3, #20
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cc4:	bf00      	nop
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0318 	and.w	r3, r3, #24
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cf4:	40d9      	lsrs	r1, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	0007ffff 	.word	0x0007ffff

08001d18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6093      	str	r3, [r2, #8]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001da0:	d101      	bne.n	8001da6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <LL_ADC_IsEnabled+0x18>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <LL_ADC_IsEnabled+0x1a>
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e16:	f043 0204 	orr.w	r2, r3, #4
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d101      	bne.n	8001e42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d101      	bne.n	8001e68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e12c      	b.n	80020ec <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff fb7d 	bl	80015a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff3f 	bl	8001d3c <LL_ADC_IsDeepPowerDownEnabled>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff25 	bl	8001d18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff5a 	bl	8001d8c <LL_ADC_IsInternalRegulatorEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff3e 	bl	8001d64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee8:	4b82      	ldr	r3, [pc, #520]	; (80020f4 <HAL_ADC_Init+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	4a82      	ldr	r2, [pc, #520]	; (80020f8 <HAL_ADC_Init+0x280>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001efc:	e002      	b.n	8001f04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f9      	bne.n	8001efe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff3c 	bl	8001d8c <LL_ADC_IsInternalRegulatorEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10d      	bne.n	8001f36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f043 0210 	orr.w	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff75 	bl	8001e2a <LL_ADC_REG_IsConversionOngoing>
 8001f40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80c5 	bne.w	80020da <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 80c1 	bne.w	80020da <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f60:	f043 0202 	orr.w	r2, r3, #2
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff35 	bl	8001ddc <LL_ADC_IsEnabled>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f78:	4860      	ldr	r0, [pc, #384]	; (80020fc <HAL_ADC_Init+0x284>)
 8001f7a:	f7ff ff2f 	bl	8001ddc <LL_ADC_IsEnabled>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	485d      	ldr	r0, [pc, #372]	; (8002100 <HAL_ADC_Init+0x288>)
 8001f8c:	f7ff fd9a 	bl	8001ac4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e5b      	ldrb	r3, [r3, #25]
 8001f94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fa0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fa6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	045b      	lsls	r3, r3, #17
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b45      	ldr	r3, [pc, #276]	; (8002104 <HAL_ADC_Init+0x28c>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff12 	bl	8001e2a <LL_ADC_REG_IsConversionOngoing>
 8002006:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff1f 	bl	8001e50 <LL_ADC_INJ_IsConversionOngoing>
 8002012:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d13d      	bne.n	8002096 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d13a      	bne.n	8002096 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002024:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800202c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800203c:	f023 0302 	bic.w	r3, r3, #2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	69b9      	ldr	r1, [r7, #24]
 8002046:	430b      	orrs	r3, r1
 8002048:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002050:	2b01      	cmp	r3, #1
 8002052:	d118      	bne.n	8002086 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002076:	430a      	orrs	r2, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	e007      	b.n	8002096 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10c      	bne.n	80020b8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	f023 010f 	bic.w	r1, r3, #15
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
 80020b6:	e007      	b.n	80020c8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 020f 	bic.w	r2, r2, #15
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f023 0303 	bic.w	r3, r3, #3
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
 80020d8:	e007      	b.n	80020ea <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000000 	.word	0x20000000
 80020f8:	053e2d63 	.word	0x053e2d63
 80020fc:	50040000 	.word	0x50040000
 8002100:	50040300 	.word	0x50040300
 8002104:	fff0c007 	.word	0xfff0c007

08002108 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fe88 	bl	8001e2a <LL_ADC_REG_IsConversionOngoing>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 80a1 	bne.w	8002264 <HAL_ADC_Start_IT+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_ADC_Start_IT+0x28>
 800212c:	2302      	movs	r3, #2
 800212e:	e09c      	b.n	800226a <HAL_ADC_Start_IT+0x162>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fe4f 	bl	8002ddc <ADC_Enable>
 800213e:	4603      	mov	r3, r0
 8002140:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 8088 	bne.w	800225a <HAL_ADC_Start_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f023 0206 	bic.w	r2, r3, #6
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	; 0x58
 8002176:	e002      	b.n	800217e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	221c      	movs	r2, #28
 8002184:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 021c 	bic.w	r2, r2, #28
 800219c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d108      	bne.n	80021b8 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0208 	orr.w	r2, r2, #8
 80021b4:	605a      	str	r2, [r3, #4]
          break;
 80021b6:	e008      	b.n	80021ca <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0204 	orr.w	r2, r2, #4
 80021c6:	605a      	str	r2, [r3, #4]
          break;
 80021c8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d107      	bne.n	80021e2 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0210 	orr.w	r2, r2, #16
 80021e0:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d02d      	beq.n	800224c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d110      	bne.n	800222a <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0220 	bic.w	r2, r2, #32
 8002216:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002226:	605a      	str	r2, [r3, #4]
            break;
 8002228:	e011      	b.n	800224e <HAL_ADC_Start_IT+0x146>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002238:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0220 	orr.w	r2, r2, #32
 8002248:	605a      	str	r2, [r3, #4]
            break;
 800224a:	e000      	b.n	800224e <HAL_ADC_Start_IT+0x146>
        }
      }
 800224c:	bf00      	nop

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fdd5 	bl	8001e02 <LL_ADC_REG_StartConversion>
 8002258:	e006      	b.n	8002268 <HAL_ADC_Start_IT+0x160>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002262:	e001      	b.n	8002268 <HAL_ADC_Start_IT+0x160>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002264:	2302      	movs	r3, #2
 8002266:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d017      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x56>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fe2f 	bl	8002f38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x6a>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05e      	beq.n	80023be <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d059      	beq.n	80023be <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc55 	bl	8001bd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d03e      	beq.n	80023b0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d135      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b08      	cmp	r3, #8
 8002350:	d12e      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fd67 	bl	8001e2a <LL_ADC_REG_IsConversionOngoing>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11a      	bne.n	8002398 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 020c 	bic.w	r2, r2, #12
 8002370:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d112      	bne.n	80023b0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
 8002396:	e00b      	b.n	80023b0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f043 0210 	orr.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7fe fc7b 	bl	8000cac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d004      	beq.n	80023d2 <HAL_ADC_IRQHandler+0x146>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d072      	beq.n	80024c2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d06d      	beq.n	80024c2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fc26 	bl	8001c54 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002408:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fbe1 	bl	8001bd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002414:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d047      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <HAL_ADC_IRQHandler+0x1b2>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d03f      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d13a      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d133      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d12e      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fcf8 	bl	8001e50 <LL_ADC_INJ_IsConversionOngoing>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11a      	bne.n	800249c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002474:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d112      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
 800249a:	e00b      	b.n	80024b4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fd17 	bl	8002ee8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2260      	movs	r2, #96	; 0x60
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d011      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x264>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f886 	bl	80025f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <HAL_ADC_IRQHandler+0x294>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fcfd 	bl	8002f10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_ADC_IRQHandler+0x2c4>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00d      	beq.n	8002550 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fcef 	bl	8002f24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d02a      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x324>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d025      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800256c:	2301      	movs	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e008      	b.n	8002584 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002580:	2301      	movs	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d10e      	bne.n	80025a8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f043 0202 	orr.w	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f830 	bl	8002608 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2210      	movs	r2, #16
 80025ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <HAL_ADC_IRQHandler+0x360>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	f043 0208 	orr.w	r2, r3, #8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fc88 	bl	8002efc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025ec:	bf00      	nop
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0b6      	sub	sp, #216	; 0xd8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x22>
 800263a:	2302      	movs	r3, #2
 800263c:	e3b9      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x796>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fbed 	bl	8001e2a <LL_ADC_REG_IsConversionOngoing>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 839e 	bne.w	8002d94 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d824      	bhi.n	80026aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	3b02      	subs	r3, #2
 8002666:	2b03      	cmp	r3, #3
 8002668:	d81b      	bhi.n	80026a2 <HAL_ADC_ConfigChannel+0x86>
 800266a:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <HAL_ADC_ConfigChannel+0x54>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	08002681 	.word	0x08002681
 8002674:	08002689 	.word	0x08002689
 8002678:	08002691 	.word	0x08002691
 800267c:	08002699 	.word	0x08002699
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	220c      	movs	r2, #12
 8002684:	605a      	str	r2, [r3, #4]
          break;
 8002686:	e011      	b.n	80026ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2212      	movs	r2, #18
 800268c:	605a      	str	r2, [r3, #4]
          break;
 800268e:	e00d      	b.n	80026ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2218      	movs	r2, #24
 8002694:	605a      	str	r2, [r3, #4]
          break;
 8002696:	e009      	b.n	80026ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269e:	605a      	str	r2, [r3, #4]
          break;
 80026a0:	e004      	b.n	80026ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2206      	movs	r2, #6
 80026a6:	605a      	str	r2, [r3, #4]
          break;
 80026a8:	e000      	b.n	80026ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	f7ff fa9f 	bl	8001bfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fbb1 	bl	8001e2a <LL_ADC_REG_IsConversionOngoing>
 80026c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fbbd 	bl	8001e50 <LL_ADC_INJ_IsConversionOngoing>
 80026d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 81a6 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 81a1 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f7ff fabd 	bl	8001c7a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d00a      	beq.n	8002738 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002732:	f7ff f9fb 	bl	8001b2c <LL_ADC_SetOffset>
 8002736:	e17b      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fa18 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x148>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fa0d 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	0e9b      	lsrs	r3, r3, #26
 800275e:	f003 021f 	and.w	r2, r3, #31
 8002762:	e01e      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x186>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fa02 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800278a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002792:	2320      	movs	r3, #32
 8002794:	e004      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x19e>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0e9b      	lsrs	r3, r3, #26
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	e018      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e004      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80027e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d106      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f9d1 	bl	8001ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f9b5 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <HAL_ADC_ConfigChannel+0x20e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f9aa 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	f003 021f 	and.w	r2, r3, #31
 8002828:	e01e      	b.n	8002868 <HAL_ADC_ConfigChannel+0x24c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f99f 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800284c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e004      	b.n	8002866 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800285c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x264>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0e9b      	lsrs	r3, r3, #26
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	e018      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x296>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800289c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e004      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d106      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	2101      	movs	r1, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f96e 	bl	8001ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f952 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2d4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2102      	movs	r1, #2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f947 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 021f 	and.w	r2, r3, #31
 80028ee:	e01e      	b.n	800292e <HAL_ADC_ConfigChannel+0x312>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f93c 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800290e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e004      	b.n	800292c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002922:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x32a>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	e016      	b.n	8002974 <HAL_ADC_ConfigChannel+0x358>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800295a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800295e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e004      	b.n	8002974 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800296a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002974:	429a      	cmp	r2, r3
 8002976:	d106      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2200      	movs	r2, #0
 800297e:	2102      	movs	r1, #2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f90d 	bl	8001ba0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2103      	movs	r1, #3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f8f1 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x396>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2103      	movs	r1, #3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f8e6 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	e017      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x3c6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f8db 	bl	8001b74 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e003      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80029d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x3de>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	0e9b      	lsrs	r3, r3, #26
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	e011      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x402>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e003      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d106      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2103      	movs	r1, #3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f8b8 	bl	8001ba0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f9d1 	bl	8001ddc <LL_ADC_IsEnabled>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 813f 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f7ff f93e 	bl	8001cd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a8e      	ldr	r2, [pc, #568]	; (8002c94 <HAL_ADC_ConfigChannel+0x678>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 8130 	bne.w	8002cc0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x46c>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	3301      	adds	r3, #1
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	bf94      	ite	ls
 8002a80:	2301      	movls	r3, #1
 8002a82:	2300      	movhi	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e019      	b.n	8002abc <HAL_ADC_ConfigChannel+0x4a0>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a98:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	bf94      	ite	ls
 8002ab6:	2301      	movls	r3, #1
 8002ab8:	2300      	movhi	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d079      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x4c0>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	069b      	lsls	r3, r3, #26
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ada:	e015      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x4ec>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x50c>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	e017      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x53c>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	ea42 0103 	orr.w	r1, r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x562>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	051b      	lsls	r3, r3, #20
 8002b7c:	e018      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x594>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 021f 	and.w	r2, r3, #31
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	e080      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d107      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x5b4>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	069b      	lsls	r3, r3, #26
 8002bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bce:	e015      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x5e0>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002be8:	2320      	movs	r3, #32
 8002bea:	e003      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	069b      	lsls	r3, r3, #26
 8002bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x600>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2101      	movs	r1, #1
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	e017      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x630>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	61fb      	str	r3, [r7, #28]
  return result;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e003      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	ea42 0103 	orr.w	r1, r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x65c>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	3301      	adds	r3, #1
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4613      	mov	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b1e      	subs	r3, #30
 8002c70:	051b      	lsls	r3, r3, #20
 8002c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c76:	e01d      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x698>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	613b      	str	r3, [r7, #16]
  return result;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e005      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x684>
 8002c94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 021f 	and.w	r2, r3, #31
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	3b1e      	subs	r3, #30
 8002cae:	051b      	lsls	r3, r3, #20
 8002cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6892      	ldr	r2, [r2, #8]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f7fe ffdd 	bl	8001c7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_ADC_ConfigChannel+0x7a0>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d06c      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ccc:	483c      	ldr	r0, [pc, #240]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002cce:	f7fe ff1f 	bl	8001b10 <LL_ADC_GetCommonPathInternalCh>
 8002cd2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d127      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d121      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a35      	ldr	r2, [pc, #212]	; (8002dc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d157      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cfe:	4619      	mov	r1, r3
 8002d00:	482f      	ldr	r0, [pc, #188]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d02:	f7fe fef2 	bl	8001aea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <HAL_ADC_ConfigChannel+0x7b0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d20:	e002      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f9      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2e:	e03a      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d113      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x746>
 8002d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d12a      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4819      	ldr	r0, [pc, #100]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d5c:	f7fe fec5 	bl	8001aea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d60:	e021      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d11c      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d116      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d111      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d8e:	f7fe feac 	bl	8001aea <LL_ADC_SetCommonPathInternalCh>
 8002d92:	e008      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	37d8      	adds	r7, #216	; 0xd8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	80080000 	.word	0x80080000
 8002dc0:	50040300 	.word	0x50040300
 8002dc4:	c7520000 	.word	0xc7520000
 8002dc8:	50040000 	.word	0x50040000
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	053e2d63 	.word	0x053e2d63
 8002dd4:	cb840000 	.word	0xcb840000
 8002dd8:	80000001 	.word	0x80000001

08002ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fff5 	bl	8001ddc <LL_ADC_IsEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d169      	bne.n	8002ecc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <ADC_Enable+0xfc>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e055      	b.n	8002ece <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffc4 	bl	8001db4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e2c:	482b      	ldr	r0, [pc, #172]	; (8002edc <ADC_Enable+0x100>)
 8002e2e:	f7fe fe6f 	bl	8001b10 <LL_ADC_GetCommonPathInternalCh>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <ADC_Enable+0x104>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <ADC_Enable+0x108>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002e56:	e002      	b.n	8002e5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e64:	f7fe fdfe 	bl	8001a64 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6a:	e028      	b.n	8002ebe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe ffb3 	bl	8001ddc <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe ff97 	bl	8001db4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e86:	f7fe fded 	bl	8001a64 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d914      	bls.n	8002ebe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d00d      	beq.n	8002ebe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e007      	b.n	8002ece <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d1cf      	bne.n	8002e6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	8000003f 	.word	0x8000003f
 8002edc:	50040300 	.word	0x50040300
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	053e2d63 	.word	0x053e2d63

08002ee8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7e:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	60d3      	str	r3, [r2, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <__NVIC_GetPriorityGrouping+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0307 	and.w	r3, r3, #7
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db0b      	blt.n	8002fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <__NVIC_EnableIRQ+0x38>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
         );
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b8:	d301      	bcc.n	80030be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <SysTick_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c6:	210f      	movs	r1, #15
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f7ff ff8e 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <SysTick_Config+0x40>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <SysTick_Config+0x40>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff29 	bl	8002f4c <__NVIC_SetPriorityGrouping>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003114:	f7ff ff3e 	bl	8002f94 <__NVIC_GetPriorityGrouping>
 8003118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff ff8e 	bl	8003040 <NVIC_EncodePriority>
 8003124:	4602      	mov	r2, r0
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff5d 	bl	8002fec <__NVIC_SetPriority>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff31 	bl	8002fb0 <__NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa2 	bl	80030a8 <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317e:	e148      	b.n	8003412 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 813a 	beq.w	800340c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d005      	beq.n	80031b0 <HAL_GPIO_Init+0x40>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d130      	bne.n	8003212 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031e6:	2201      	movs	r2, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f003 0201 	and.w	r2, r3, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b03      	cmp	r3, #3
 800321c:	d017      	beq.n	800324e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d123      	bne.n	80032a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003266:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	6939      	ldr	r1, [r7, #16]
 800329e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0203 	and.w	r2, r3, #3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8094 	beq.w	800340c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e4:	4b52      	ldr	r3, [pc, #328]	; (8003430 <HAL_GPIO_Init+0x2c0>)
 80032e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e8:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_GPIO_Init+0x2c0>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6613      	str	r3, [r2, #96]	; 0x60
 80032f0:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <HAL_GPIO_Init+0x2c0>)
 80032f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032fc:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_GPIO_Init+0x2c4>)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220f      	movs	r2, #15
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003326:	d00d      	beq.n	8003344 <HAL_GPIO_Init+0x1d4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a43      	ldr	r2, [pc, #268]	; (8003438 <HAL_GPIO_Init+0x2c8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_Init+0x1d0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a42      	ldr	r2, [pc, #264]	; (800343c <HAL_GPIO_Init+0x2cc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_GPIO_Init+0x1cc>
 8003338:	2302      	movs	r3, #2
 800333a:	e004      	b.n	8003346 <HAL_GPIO_Init+0x1d6>
 800333c:	2307      	movs	r3, #7
 800333e:	e002      	b.n	8003346 <HAL_GPIO_Init+0x1d6>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_GPIO_Init+0x1d6>
 8003344:	2300      	movs	r3, #0
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	f002 0203 	and.w	r2, r2, #3
 800334c:	0092      	lsls	r2, r2, #2
 800334e:	4093      	lsls	r3, r2
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003356:	4937      	ldr	r1, [pc, #220]	; (8003434 <HAL_GPIO_Init+0x2c4>)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3302      	adds	r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003364:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	43db      	mvns	r3, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003388:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800338e:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033b2:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033b8:	4b21      	ldr	r3, [pc, #132]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003406:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_GPIO_Init+0x2d0>)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3301      	adds	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f aeaf 	bne.w	8003180 <HAL_GPIO_Init+0x10>
  }
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40021000 	.word	0x40021000
 8003434:	40010000 	.word	0x40010000
 8003438:	48000400 	.word	0x48000400
 800343c:	48000800 	.word	0x48000800
 8003440:	40010400 	.word	0x40010400

08003444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e081      	b.n	800355a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe f904 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003494:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	e006      	b.n	80034cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d104      	bne.n	80034de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003500:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69d9      	ldr	r1, [r3, #28]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1a      	ldr	r2, [r3, #32]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	817b      	strh	r3, [r7, #10]
 8003576:	460b      	mov	r3, r1
 8003578:	813b      	strh	r3, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	f040 80f9 	bne.w	800377e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_I2C_Mem_Write+0x34>
 8003592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0ed      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Mem_Write+0x4e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0e6      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ba:	f7fe fa53 	bl	8001a64 <HAL_GetTick>
 80035be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2319      	movs	r3, #25
 80035c6:	2201      	movs	r2, #1
 80035c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fac3 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0d1      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2221      	movs	r2, #33	; 0x21
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003604:	88f8      	ldrh	r0, [r7, #6]
 8003606:	893a      	ldrh	r2, [r7, #8]
 8003608:	8979      	ldrh	r1, [r7, #10]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	4603      	mov	r3, r0
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f9d3 	bl	80039c0 <I2C_RequestMemoryWrite>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0a9      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2bff      	cmp	r3, #255	; 0xff
 8003634:	d90e      	bls.n	8003654 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	22ff      	movs	r2, #255	; 0xff
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	b2da      	uxtb	r2, r3
 8003642:	8979      	ldrh	r1, [r7, #10]
 8003644:	2300      	movs	r3, #0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fc2b 	bl	8003ea8 <I2C_TransferConfig>
 8003652:	e00f      	b.n	8003674 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	b2da      	uxtb	r2, r3
 8003664:	8979      	ldrh	r1, [r7, #10]
 8003666:	2300      	movs	r3, #0
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fc1a 	bl	8003ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 faad 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e07b      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d034      	beq.n	800372c <HAL_I2C_Mem_Write+0x1c8>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d130      	bne.n	800372c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	2200      	movs	r2, #0
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fa3f 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e04d      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2bff      	cmp	r3, #255	; 0xff
 80036ec:	d90e      	bls.n	800370c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	22ff      	movs	r2, #255	; 0xff
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	8979      	ldrh	r1, [r7, #10]
 80036fc:	2300      	movs	r3, #0
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fbcf 	bl	8003ea8 <I2C_TransferConfig>
 800370a:	e00f      	b.n	800372c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	b2da      	uxtb	r2, r3
 800371c:	8979      	ldrh	r1, [r7, #10]
 800371e:	2300      	movs	r3, #0
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fbbe 	bl	8003ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d19e      	bne.n	8003674 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa8c 	bl	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e01a      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2220      	movs	r2, #32
 8003750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <HAL_I2C_Mem_Write+0x224>)
 800375e:	400b      	ands	r3, r1
 8003760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	fe00e800 	.word	0xfe00e800

0800378c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	461a      	mov	r2, r3
 800379a:	4603      	mov	r3, r0
 800379c:	817b      	strh	r3, [r7, #10]
 800379e:	460b      	mov	r3, r1
 80037a0:	813b      	strh	r3, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	f040 80fd 	bne.w	80039ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_I2C_Mem_Read+0x34>
 80037ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0f1      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Mem_Read+0x4e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0ea      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e2:	f7fe f93f 	bl	8001a64 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2319      	movs	r3, #25
 80037ee:	2201      	movs	r2, #1
 80037f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f9af 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0d5      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2222      	movs	r2, #34	; 0x22
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2240      	movs	r2, #64	; 0x40
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800382c:	88f8      	ldrh	r0, [r7, #6]
 800382e:	893a      	ldrh	r2, [r7, #8]
 8003830:	8979      	ldrh	r1, [r7, #10]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	4603      	mov	r3, r0
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f913 	bl	8003a68 <I2C_RequestMemoryRead>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0ad      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2bff      	cmp	r3, #255	; 0xff
 800385c:	d90e      	bls.n	800387c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	b2da      	uxtb	r2, r3
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <HAL_I2C_Mem_Read+0x22c>)
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fb17 	bl	8003ea8 <I2C_TransferConfig>
 800387a:	e00f      	b.n	800389c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	b2da      	uxtb	r2, r3
 800388c:	8979      	ldrh	r1, [r7, #10]
 800388e:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <HAL_I2C_Mem_Read+0x22c>)
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fb06 	bl	8003ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	2200      	movs	r2, #0
 80038a4:	2104      	movs	r1, #4
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f956 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07c      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d034      	beq.n	800395c <HAL_I2C_Mem_Read+0x1d0>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d130      	bne.n	800395c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f927 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e04d      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2bff      	cmp	r3, #255	; 0xff
 800391c:	d90e      	bls.n	800393c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	b2da      	uxtb	r2, r3
 800392a:	8979      	ldrh	r1, [r7, #10]
 800392c:	2300      	movs	r3, #0
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fab7 	bl	8003ea8 <I2C_TransferConfig>
 800393a:	e00f      	b.n	800395c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	b2da      	uxtb	r2, r3
 800394c:	8979      	ldrh	r1, [r7, #10]
 800394e:	2300      	movs	r3, #0
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 faa6 	bl	8003ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d19a      	bne.n	800389c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f974 	bl	8003c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e01a      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2220      	movs	r2, #32
 8003980:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_I2C_Mem_Read+0x230>)
 800398e:	400b      	ands	r3, r1
 8003990:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	80002400 	.word	0x80002400
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	817b      	strh	r3, [r7, #10]
 80039d2:	460b      	mov	r3, r1
 80039d4:	813b      	strh	r3, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <I2C_RequestMemoryWrite+0xa4>)
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa5d 	bl	8003ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	69b9      	ldr	r1, [r7, #24]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8f0 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e02c      	b.n	8003a5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a08:	893b      	ldrh	r3, [r7, #8]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
 8003a12:	e015      	b.n	8003a40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f8d6 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e012      	b.n	8003a5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	; 0x80
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f884 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	80002000 	.word	0x80002000

08003a68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	817b      	strh	r3, [r7, #10]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	813b      	strh	r3, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	8979      	ldrh	r1, [r7, #10]
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <I2C_RequestMemoryRead+0xa4>)
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fa0a 	bl	8003ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f89d 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e02c      	b.n	8003b02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aae:	893b      	ldrh	r3, [r7, #8]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab8:	e015      	b.n	8003ae6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aba:	893b      	ldrh	r3, [r7, #8]
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f883 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e012      	b.n	8003b02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003adc:	893b      	ldrh	r3, [r7, #8]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2200      	movs	r2, #0
 8003aee:	2140      	movs	r1, #64	; 0x40
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f831 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	80002000 	.word	0x80002000

08003b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d103      	bne.n	8003b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d007      	beq.n	8003b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	619a      	str	r2, [r3, #24]
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	e022      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d01e      	beq.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fd ff77 	bl	8001a64 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d113      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e00f      	b.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d0cd      	beq.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003be4:	e02c      	b.n	8003c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f870 	bl	8003cd0 <I2C_IsErrorOccurred>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e02a      	b.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d01e      	beq.n	8003c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fd ff2f 	bl	8001a64 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d113      	bne.n	8003c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e007      	b.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d1cb      	bne.n	8003be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c64:	e028      	b.n	8003cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f830 	bl	8003cd0 <I2C_IsErrorOccurred>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e026      	b.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fd fef3 	bl	8001a64 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d1cf      	bne.n	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d075      	beq.n	8003de8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2210      	movs	r2, #16
 8003d02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d04:	e056      	b.n	8003db4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d052      	beq.n	8003db4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	f7fd fea9 	bl	8001a64 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d302      	bcc.n	8003d24 <I2C_IsErrorOccurred+0x54>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d147      	bne.n	8003db4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d46:	d12e      	bne.n	8003da6 <I2C_IsErrorOccurred+0xd6>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d4e:	d02a      	beq.n	8003da6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d027      	beq.n	8003da6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d66:	f7fd fe7d 	bl	8001a64 <HAL_GetTick>
 8003d6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d6c:	e01b      	b.n	8003da6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d6e:	f7fd fe79 	bl	8001a64 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b19      	cmp	r3, #25
 8003d7a:	d914      	bls.n	8003da6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d1dc      	bne.n	8003d6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d003      	beq.n	8003dca <I2C_IsErrorOccurred+0xfa>
 8003dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d09d      	beq.n	8003d06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00b      	beq.n	8003e34 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f043 0308 	orr.w	r3, r3, #8
 8003e22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01c      	beq.n	8003e98 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fe56 	bl	8003b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <I2C_IsErrorOccurred+0x1d4>)
 8003e70:	400b      	ands	r3, r1
 8003e72:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3728      	adds	r7, #40	; 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	fe00e800 	.word	0xfe00e800

08003ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	817b      	strh	r3, [r7, #10]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eba:	897b      	ldrh	r3, [r7, #10]
 8003ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ec0:	7a7b      	ldrb	r3, [r7, #9]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	0d5b      	lsrs	r3, r3, #21
 8003ee2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <I2C_TransferConfig+0x60>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	43db      	mvns	r3, r3
 8003eec:	ea02 0103 	and.w	r1, r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	03ff63ff 	.word	0x03ff63ff

08003f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d138      	bne.n	8003f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e032      	b.n	8003f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d139      	bne.n	800402c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e033      	b.n	800402e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2224      	movs	r2, #36	; 0x24
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a04      	ldr	r2, [pc, #16]	; (8004058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404a:	6013      	str	r3, [r2, #0]
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40007000 	.word	0x40007000

0800405c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <HAL_PWREx_GetVoltageRange+0x18>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40007000 	.word	0x40007000

08004078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	d130      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004088:	4b23      	ldr	r3, [pc, #140]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004094:	d038      	beq.n	8004108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800409e:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2232      	movs	r2, #50	; 0x32
 80040ac:	fb02 f303 	mul.w	r3, r2, r3
 80040b0:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0c9b      	lsrs	r3, r3, #18
 80040b8:	3301      	adds	r3, #1
 80040ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040bc:	e002      	b.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d0:	d102      	bne.n	80040d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f2      	bne.n	80040be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e4:	d110      	bne.n	8004108 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e00f      	b.n	800410a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d007      	beq.n	8004108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004100:	4a05      	ldr	r2, [pc, #20]	; (8004118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004106:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40007000 	.word	0x40007000
 800411c:	20000000 	.word	0x20000000
 8004120:	431bde83 	.word	0x431bde83

08004124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f000 bc02 	b.w	800493c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004138:	4b96      	ldr	r3, [pc, #600]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004142:	4b94      	ldr	r3, [pc, #592]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80e4 	beq.w	8004322 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_RCC_OscConfig+0x4c>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	f040 808b 	bne.w	800427e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b01      	cmp	r3, #1
 800416c:	f040 8087 	bne.w	800427e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004170:	4b88      	ldr	r3, [pc, #544]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_OscConfig+0x64>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e3d9      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <HAL_RCC_OscConfig+0x7e>
 8004198:	4b7e      	ldr	r3, [pc, #504]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a0:	e005      	b.n	80041ae <HAL_RCC_OscConfig+0x8a>
 80041a2:	4b7c      	ldr	r3, [pc, #496]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d223      	bcs.n	80041fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fd54 	bl	8004c64 <RCC_SetFlashLatencyFromMSIRange>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e3ba      	b.n	800493c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c6:	4b73      	ldr	r3, [pc, #460]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a72      	ldr	r2, [pc, #456]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041cc:	f043 0308 	orr.w	r3, r3, #8
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b70      	ldr	r3, [pc, #448]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	496d      	ldr	r1, [pc, #436]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e4:	4b6b      	ldr	r3, [pc, #428]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	4968      	ldr	r1, [pc, #416]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
 80041f8:	e025      	b.n	8004246 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fa:	4b66      	ldr	r3, [pc, #408]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a65      	ldr	r2, [pc, #404]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004200:	f043 0308 	orr.w	r3, r3, #8
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b63      	ldr	r3, [pc, #396]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4960      	ldr	r1, [pc, #384]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004218:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	495b      	ldr	r1, [pc, #364]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fd14 	bl	8004c64 <RCC_SetFlashLatencyFromMSIRange>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e37a      	b.n	800493c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004246:	f000 fc81 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b51      	ldr	r3, [pc, #324]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	4950      	ldr	r1, [pc, #320]	; (8004398 <HAL_RCC_OscConfig+0x274>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_RCC_OscConfig+0x278>)
 8004264:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004266:	4b4e      	ldr	r3, [pc, #312]	; (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd fbaa 	bl	80019c4 <HAL_InitTick>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d052      	beq.n	8004320 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	e35e      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d032      	beq.n	80042ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004286:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a42      	ldr	r2, [pc, #264]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004292:	f7fd fbe7 	bl	8001a64 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429a:	f7fd fbe3 	bl	8001a64 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e347      	b.n	800493c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ac:	4b39      	ldr	r3, [pc, #228]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042b8:	4b36      	ldr	r3, [pc, #216]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a35      	ldr	r2, [pc, #212]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042be:	f043 0308 	orr.w	r3, r3, #8
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4930      	ldr	r1, [pc, #192]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042d6:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	492b      	ldr	r1, [pc, #172]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
 80042ea:	e01a      	b.n	8004322 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042ec:	4b29      	ldr	r3, [pc, #164]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a28      	ldr	r2, [pc, #160]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042f8:	f7fd fbb4 	bl	8001a64 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004300:	f7fd fbb0 	bl	8001a64 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e314      	b.n	800493c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x1dc>
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004320:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d073      	beq.n	8004416 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d005      	beq.n	8004340 <HAL_RCC_OscConfig+0x21c>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d10e      	bne.n	8004358 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10b      	bne.n	8004358 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d063      	beq.n	8004414 <HAL_RCC_OscConfig+0x2f0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d15f      	bne.n	8004414 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e2f1      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d106      	bne.n	8004370 <HAL_RCC_OscConfig+0x24c>
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e025      	b.n	80043bc <HAL_RCC_OscConfig+0x298>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004378:	d114      	bne.n	80043a4 <HAL_RCC_OscConfig+0x280>
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a05      	ldr	r2, [pc, #20]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a02      	ldr	r2, [pc, #8]	; (8004394 <HAL_RCC_OscConfig+0x270>)
 800438c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e013      	b.n	80043bc <HAL_RCC_OscConfig+0x298>
 8004394:	40021000 	.word	0x40021000
 8004398:	080088e4 	.word	0x080088e4
 800439c:	20000000 	.word	0x20000000
 80043a0:	20000004 	.word	0x20000004
 80043a4:	4ba0      	ldr	r3, [pc, #640]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a9f      	ldr	r2, [pc, #636]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80043aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4b9d      	ldr	r3, [pc, #628]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a9c      	ldr	r2, [pc, #624]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d013      	beq.n	80043ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fb4e 	bl	8001a64 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fd fb4a 	bl	8001a64 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e2ae      	b.n	800493c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043de:	4b92      	ldr	r3, [pc, #584]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x2a8>
 80043ea:	e014      	b.n	8004416 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fb3a 	bl	8001a64 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fd fb36 	bl	8001a64 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e29a      	b.n	800493c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004406:	4b88      	ldr	r3, [pc, #544]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2d0>
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d060      	beq.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d005      	beq.n	8004434 <HAL_RCC_OscConfig+0x310>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d119      	bne.n	8004462 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d116      	bne.n	8004462 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004434:	4b7c      	ldr	r3, [pc, #496]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_OscConfig+0x328>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e277      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b76      	ldr	r3, [pc, #472]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	4973      	ldr	r1, [pc, #460]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004460:	e040      	b.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d023      	beq.n	80044b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800446a:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6e      	ldr	r2, [pc, #440]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd faf5 	bl	8001a64 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447e:	f7fd faf1 	bl	8001a64 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e255      	b.n	800493c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004490:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449c:	4b62      	ldr	r3, [pc, #392]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	495f      	ldr	r1, [pc, #380]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
 80044b0:	e018      	b.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044b2:	4b5d      	ldr	r3, [pc, #372]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a5c      	ldr	r2, [pc, #368]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fd fad1 	bl	8001a64 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c6:	f7fd facd 	bl	8001a64 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e231      	b.n	800493c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d8:	4b53      	ldr	r3, [pc, #332]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d03c      	beq.n	800456a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01c      	beq.n	8004532 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f8:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fe:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd faac 	bl	8001a64 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004510:	f7fd faa8 	bl	8001a64 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e20c      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004522:	4b41      	ldr	r3, [pc, #260]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ef      	beq.n	8004510 <HAL_RCC_OscConfig+0x3ec>
 8004530:	e01b      	b.n	800456a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004532:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004538:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fd fa8f 	bl	8001a64 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454a:	f7fd fa8b 	bl	8001a64 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1ef      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800455c:	4b32      	ldr	r3, [pc, #200]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ef      	bne.n	800454a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80a6 	beq.w	80046c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004578:	2300      	movs	r3, #0
 800457a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800457c:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004588:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	4a26      	ldr	r2, [pc, #152]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800458e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004592:	6593      	str	r3, [r2, #88]	; 0x58
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a0:	2301      	movs	r3, #1
 80045a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <HAL_RCC_OscConfig+0x508>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d118      	bne.n	80045e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b0:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_RCC_OscConfig+0x508>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <HAL_RCC_OscConfig+0x508>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045bc:	f7fd fa52 	bl	8001a64 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd fa4e 	bl	8001a64 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e1b2      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x508>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d108      	bne.n	80045fc <HAL_RCC_OscConfig+0x4d8>
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045fa:	e029      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b05      	cmp	r3, #5
 8004602:	d115      	bne.n	8004630 <HAL_RCC_OscConfig+0x50c>
 8004604:	4b08      	ldr	r3, [pc, #32]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	4a07      	ldr	r2, [pc, #28]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	4a03      	ldr	r2, [pc, #12]	; (8004628 <HAL_RCC_OscConfig+0x504>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004624:	e014      	b.n	8004650 <HAL_RCC_OscConfig+0x52c>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	40007000 	.word	0x40007000
 8004630:	4b9a      	ldr	r3, [pc, #616]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	4a99      	ldr	r2, [pc, #612]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004640:	4b96      	ldr	r3, [pc, #600]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004646:	4a95      	ldr	r2, [pc, #596]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d016      	beq.n	8004686 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fd fa04 	bl	8001a64 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd fa00 	bl	8001a64 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e162      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004676:	4b89      	ldr	r3, [pc, #548]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ed      	beq.n	8004660 <HAL_RCC_OscConfig+0x53c>
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd f9ed 	bl	8001a64 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fd f9e9 	bl	8001a64 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e14b      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a4:	4b7d      	ldr	r3, [pc, #500]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ed      	bne.n	800468e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b78      	ldr	r3, [pc, #480]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a77      	ldr	r2, [pc, #476]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d03c      	beq.n	800474a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01c      	beq.n	8004712 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046d8:	4b70      	ldr	r3, [pc, #448]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80046da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046de:	4a6f      	ldr	r2, [pc, #444]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fd f9bc 	bl	8001a64 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f0:	f7fd f9b8 	bl	8001a64 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e11c      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004702:	4b66      	ldr	r3, [pc, #408]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ef      	beq.n	80046f0 <HAL_RCC_OscConfig+0x5cc>
 8004710:	e01b      	b.n	800474a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004712:	4b62      	ldr	r3, [pc, #392]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004714:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004718:	4a60      	ldr	r2, [pc, #384]	; (800489c <HAL_RCC_OscConfig+0x778>)
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004722:	f7fd f99f 	bl	8001a64 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800472a:	f7fd f99b 	bl	8001a64 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0ff      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800473c:	4b57      	ldr	r3, [pc, #348]	; (800489c <HAL_RCC_OscConfig+0x778>)
 800473e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1ef      	bne.n	800472a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80f3 	beq.w	800493a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	2b02      	cmp	r3, #2
 800475a:	f040 80c9 	bne.w	80048f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800475e:	4b4f      	ldr	r3, [pc, #316]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 0203 	and.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	429a      	cmp	r2, r3
 8004770:	d12c      	bne.n	80047cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	3b01      	subs	r3, #1
 800477e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d123      	bne.n	80047cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d11b      	bne.n	80047cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d113      	bne.n	80047cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	3b01      	subs	r3, #1
 80047b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d109      	bne.n	80047cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	3b01      	subs	r3, #1
 80047c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d06b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	d062      	beq.n	8004898 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047d2:	4b32      	ldr	r3, [pc, #200]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0ac      	b.n	800493c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047e2:	4b2e      	ldr	r3, [pc, #184]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2d      	ldr	r2, [pc, #180]	; (800489c <HAL_RCC_OscConfig+0x778>)
 80047e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047ee:	f7fd f939 	bl	8001a64 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fd f935 	bl	8001a64 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e099      	b.n	800493c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	4b24      	ldr	r3, [pc, #144]	; (800489c <HAL_RCC_OscConfig+0x778>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004814:	4b21      	ldr	r3, [pc, #132]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <HAL_RCC_OscConfig+0x77c>)
 800481a:	4013      	ands	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004824:	3a01      	subs	r2, #1
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800482e:	0212      	lsls	r2, r2, #8
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004836:	0852      	lsrs	r2, r2, #1
 8004838:	3a01      	subs	r2, #1
 800483a:	0552      	lsls	r2, r2, #21
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004842:	0852      	lsrs	r2, r2, #1
 8004844:	3a01      	subs	r2, #1
 8004846:	0652      	lsls	r2, r2, #25
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800484e:	06d2      	lsls	r2, r2, #27
 8004850:	430a      	orrs	r2, r1
 8004852:	4912      	ldr	r1, [pc, #72]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004854:	4313      	orrs	r3, r2
 8004856:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <HAL_RCC_OscConfig+0x778>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0f      	ldr	r2, [pc, #60]	; (800489c <HAL_RCC_OscConfig+0x778>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004864:	4b0d      	ldr	r3, [pc, #52]	; (800489c <HAL_RCC_OscConfig+0x778>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a0c      	ldr	r2, [pc, #48]	; (800489c <HAL_RCC_OscConfig+0x778>)
 800486a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004870:	f7fd f8f8 	bl	8001a64 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fd f8f4 	bl	8001a64 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e058      	b.n	800493c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488a:	4b04      	ldr	r3, [pc, #16]	; (800489c <HAL_RCC_OscConfig+0x778>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004896:	e050      	b.n	800493a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e04f      	b.n	800493c <HAL_RCC_OscConfig+0x818>
 800489c:	40021000 	.word	0x40021000
 80048a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d144      	bne.n	800493a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a23      	ldr	r2, [pc, #140]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048bc:	4b21      	ldr	r3, [pc, #132]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4a20      	ldr	r2, [pc, #128]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c8:	f7fd f8cc 	bl	8001a64 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fd f8c8 	bl	8001a64 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e02c      	b.n	800493c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x7ac>
 80048ee:	e024      	b.n	800493a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d01f      	beq.n	8004936 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a12      	ldr	r2, [pc, #72]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 80048fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fd f8af 	bl	8001a64 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490a:	f7fd f8ab 	bl	8001a64 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e00f      	b.n	800493c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	4905      	ldr	r1, [pc, #20]	; (8004944 <HAL_RCC_OscConfig+0x820>)
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_OscConfig+0x824>)
 8004930:	4013      	ands	r3, r2
 8004932:	60cb      	str	r3, [r1, #12]
 8004934:	e001      	b.n	800493a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	feeefffc 	.word	0xfeeefffc

0800494c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0e7      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b75      	ldr	r3, [pc, #468]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d910      	bls.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b72      	ldr	r3, [pc, #456]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 0207 	bic.w	r2, r3, #7
 8004976:	4970      	ldr	r1, [pc, #448]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b6e      	ldr	r3, [pc, #440]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0cf      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	4b66      	ldr	r3, [pc, #408]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d908      	bls.n	80049be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ac:	4b63      	ldr	r3, [pc, #396]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4960      	ldr	r1, [pc, #384]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d04c      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d2:	4b5a      	ldr	r3, [pc, #360]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d121      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0a6      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ea:	4b54      	ldr	r3, [pc, #336]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d115      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e09a      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a02:	4b4e      	ldr	r3, [pc, #312]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e08e      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a12:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e086      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a22:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f023 0203 	bic.w	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4943      	ldr	r1, [pc, #268]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a34:	f7fd f816 	bl	8001a64 <HAL_GetTick>
 8004a38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3c:	f7fd f812 	bl	8001a64 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e06e      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	4b3a      	ldr	r3, [pc, #232]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 020c 	and.w	r2, r3, #12
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d1eb      	bne.n	8004a3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b31      	ldr	r3, [pc, #196]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d208      	bcs.n	8004a92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	492b      	ldr	r1, [pc, #172]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d210      	bcs.n	8004ac2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa0:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 0207 	bic.w	r2, r3, #7
 8004aa8:	4923      	ldr	r1, [pc, #140]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab0:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e036      	b.n	8004b30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	4918      	ldr	r1, [pc, #96]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aec:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4910      	ldr	r1, [pc, #64]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b00:	f000 f824 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	490b      	ldr	r1, [pc, #44]	; (8004b40 <HAL_RCC_ClockConfig+0x1f4>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1c:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <HAL_RCC_ClockConfig+0x1f8>)
 8004b1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b20:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <HAL_RCC_ClockConfig+0x1fc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc ff4d 	bl	80019c4 <HAL_InitTick>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	080088e4 	.word	0x080088e4
 8004b44:	20000000 	.word	0x20000000
 8004b48:	20000004 	.word	0x20000004

08004b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b089      	sub	sp, #36	; 0x24
 8004b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5a:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b64:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x34>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d121      	bne.n	8004bbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d11e      	bne.n	8004bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b80:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b8c:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ba8:	4a2b      	ldr	r2, [pc, #172]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d102      	bne.n	8004bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc4:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e004      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd0:	4b23      	ldr	r3, [pc, #140]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d134      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0xac>
 8004bf0:	e005      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bf4:	617b      	str	r3, [r7, #20]
      break;
 8004bf6:	e005      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bfa:	617b      	str	r3, [r7, #20]
      break;
 8004bfc:	e002      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	617b      	str	r3, [r7, #20]
      break;
 8004c02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	3301      	adds	r3, #1
 8004c10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	fb03 f202 	mul.w	r2, r3, r2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	0e5b      	lsrs	r3, r3, #25
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	3301      	adds	r3, #1
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c44:	69bb      	ldr	r3, [r7, #24]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	080088f4 	.word	0x080088f4
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	007a1200 	.word	0x007a1200

08004c64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c70:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c7c:	f7ff f9ee 	bl	800405c <HAL_PWREx_GetVoltageRange>
 8004c80:	6178      	str	r0, [r7, #20]
 8004c82:	e014      	b.n	8004cae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c90:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c9c:	f7ff f9de 	bl	800405c <HAL_PWREx_GetVoltageRange>
 8004ca0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb4:	d10b      	bne.n	8004cce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d919      	bls.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2ba0      	cmp	r3, #160	; 0xa0
 8004cc0:	d902      	bls.n	8004cc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	e013      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cc8:	2301      	movs	r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	e010      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d902      	bls.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	e00a      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d102      	bne.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e004      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b70      	cmp	r3, #112	; 0x70
 8004cea:	d101      	bne.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cec:	2301      	movs	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 0207 	bic.w	r2, r3, #7
 8004cf8:	4909      	ldr	r1, [pc, #36]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d001      	beq.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40022000 	.word	0x40022000

08004d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d30:	2300      	movs	r3, #0
 8004d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d031      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d48:	d01a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d4e:	d814      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d5a:	4b5d      	ldr	r3, [pc, #372]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4a5c      	ldr	r2, [pc, #368]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f9de 	bl	8005130 <RCCEx_PLLSAI1_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d88:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	494e      	ldr	r1, [pc, #312]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d9e:	e001      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 809e 	beq.w	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dcc:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd0:	4a3f      	ldr	r2, [pc, #252]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd8:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de4:	2301      	movs	r3, #1
 8004de6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de8:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a39      	ldr	r2, [pc, #228]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df4:	f7fc fe36 	bl	8001a64 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dfa:	e009      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fc fe32 	bl	8001a64 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e0e:	e005      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e10:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15a      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e22:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01e      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d019      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e6a:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d016      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fc fdf2 	bl	8001a64 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e82:	e00b      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fc fdee 	bl	8001a64 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d902      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	74fb      	strb	r3, [r7, #19]
            break;
 8004e9a:	e006      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0ec      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebe:	4904      	ldr	r1, [pc, #16]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ec6:	e009      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ec8:	7cfb      	ldrb	r3, [r7, #19]
 8004eca:	74bb      	strb	r3, [r7, #18]
 8004ecc:	e006      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004edc:	7c7b      	ldrb	r3, [r7, #17]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b8a      	ldr	r3, [pc, #552]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	4a89      	ldr	r2, [pc, #548]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efa:	4b84      	ldr	r3, [pc, #528]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f023 0203 	bic.w	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	4980      	ldr	r1, [pc, #512]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f1c:	4b7b      	ldr	r3, [pc, #492]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f023 020c 	bic.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	4978      	ldr	r1, [pc, #480]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f3e:	4b73      	ldr	r3, [pc, #460]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	496f      	ldr	r1, [pc, #444]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f60:	4b6a      	ldr	r3, [pc, #424]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	4967      	ldr	r1, [pc, #412]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f82:	4b62      	ldr	r3, [pc, #392]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	495e      	ldr	r1, [pc, #376]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fa4:	4b59      	ldr	r3, [pc, #356]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	4956      	ldr	r1, [pc, #344]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fc6:	4b51      	ldr	r3, [pc, #324]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	494d      	ldr	r1, [pc, #308]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d028      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4945      	ldr	r1, [pc, #276]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005006:	d106      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005008:	4b40      	ldr	r3, [pc, #256]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a3f      	ldr	r2, [pc, #252]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005012:	60d3      	str	r3, [r2, #12]
 8005014:	e011      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800501e:	d10c      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	2101      	movs	r1, #1
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f882 	bl	8005130 <RCCEx_PLLSAI1_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005036:	7cfb      	ldrb	r3, [r7, #19]
 8005038:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d028      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005046:	4b31      	ldr	r3, [pc, #196]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005054:	492d      	ldr	r1, [pc, #180]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005064:	d106      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800506c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005070:	60d3      	str	r3, [r2, #12]
 8005072:	e011      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800507c:	d10c      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f853 	bl	8005130 <RCCEx_PLLSAI1_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01c      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b2:	4916      	ldr	r1, [pc, #88]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050c2:	d10c      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3304      	adds	r3, #4
 80050c8:	2102      	movs	r1, #2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f830 	bl	8005130 <RCCEx_PLLSAI1_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f8:	4904      	ldr	r1, [pc, #16]	; (800510c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005100:	7cbb      	ldrb	r3, [r7, #18]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000

08005110 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a04      	ldr	r2, [pc, #16]	; (800512c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800511a:	f043 0304 	orr.w	r3, r3, #4
 800511e:	6013      	str	r3, [r2, #0]
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000

08005130 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800513e:	4b74      	ldr	r3, [pc, #464]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d018      	beq.n	800517c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800514a:	4b71      	ldr	r3, [pc, #452]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0203 	and.w	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d10d      	bne.n	8005176 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
       ||
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005162:	4b6b      	ldr	r3, [pc, #428]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
       ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d047      	beq.n	8005206 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e044      	b.n	8005206 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b03      	cmp	r3, #3
 8005182:	d018      	beq.n	80051b6 <RCCEx_PLLSAI1_Config+0x86>
 8005184:	2b03      	cmp	r3, #3
 8005186:	d825      	bhi.n	80051d4 <RCCEx_PLLSAI1_Config+0xa4>
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <RCCEx_PLLSAI1_Config+0x62>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d009      	beq.n	80051a4 <RCCEx_PLLSAI1_Config+0x74>
 8005190:	e020      	b.n	80051d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005192:	4b5f      	ldr	r3, [pc, #380]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d11d      	bne.n	80051da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a2:	e01a      	b.n	80051da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a4:	4b5a      	ldr	r3, [pc, #360]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d116      	bne.n	80051de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b4:	e013      	b.n	80051de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b6:	4b56      	ldr	r3, [pc, #344]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051c2:	4b53      	ldr	r3, [pc, #332]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d2:	e006      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e004      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051da:	bf00      	nop
 80051dc:	e002      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051de:	bf00      	nop
 80051e0:	e000      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ea:	4b49      	ldr	r3, [pc, #292]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	430b      	orrs	r3, r1
 8005200:	4943      	ldr	r1, [pc, #268]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005202:	4313      	orrs	r3, r2
 8005204:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d17c      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800520c:	4b40      	ldr	r3, [pc, #256]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a3f      	ldr	r2, [pc, #252]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005218:	f7fc fc24 	bl	8001a64 <HAL_GetTick>
 800521c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800521e:	e009      	b.n	8005234 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005220:	f7fc fc20 	bl	8001a64 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d902      	bls.n	8005234 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	73fb      	strb	r3, [r7, #15]
        break;
 8005232:	e005      	b.n	8005240 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ef      	bne.n	8005220 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d15f      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d110      	bne.n	800526e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800524c:	4b30      	ldr	r3, [pc, #192]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005254:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6892      	ldr	r2, [r2, #8]
 800525c:	0211      	lsls	r1, r2, #8
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	06d2      	lsls	r2, r2, #27
 8005264:	430a      	orrs	r2, r1
 8005266:	492a      	ldr	r1, [pc, #168]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005268:	4313      	orrs	r3, r2
 800526a:	610b      	str	r3, [r1, #16]
 800526c:	e027      	b.n	80052be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d112      	bne.n	800529a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005274:	4b26      	ldr	r3, [pc, #152]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800527c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	0211      	lsls	r1, r2, #8
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6912      	ldr	r2, [r2, #16]
 800528a:	0852      	lsrs	r2, r2, #1
 800528c:	3a01      	subs	r2, #1
 800528e:	0552      	lsls	r2, r2, #21
 8005290:	430a      	orrs	r2, r1
 8005292:	491f      	ldr	r1, [pc, #124]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005294:	4313      	orrs	r3, r2
 8005296:	610b      	str	r3, [r1, #16]
 8005298:	e011      	b.n	80052be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6892      	ldr	r2, [r2, #8]
 80052aa:	0211      	lsls	r1, r2, #8
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6952      	ldr	r2, [r2, #20]
 80052b0:	0852      	lsrs	r2, r2, #1
 80052b2:	3a01      	subs	r2, #1
 80052b4:	0652      	lsls	r2, r2, #25
 80052b6:	430a      	orrs	r2, r1
 80052b8:	4915      	ldr	r1, [pc, #84]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fc fbcb 	bl	8001a64 <HAL_GetTick>
 80052ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d0:	e009      	b.n	80052e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d2:	f7fc fbc7 	bl	8001a64 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d902      	bls.n	80052e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	73fb      	strb	r3, [r7, #15]
          break;
 80052e4:	e005      	b.n	80052f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ef      	beq.n	80052d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4903      	ldr	r1, [pc, #12]	; (8005310 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000

08005314 <__errno>:
 8005314:	4b01      	ldr	r3, [pc, #4]	; (800531c <__errno+0x8>)
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	2000000c 	.word	0x2000000c

08005320 <__libc_init_array>:
 8005320:	b570      	push	{r4, r5, r6, lr}
 8005322:	4d0d      	ldr	r5, [pc, #52]	; (8005358 <__libc_init_array+0x38>)
 8005324:	4c0d      	ldr	r4, [pc, #52]	; (800535c <__libc_init_array+0x3c>)
 8005326:	1b64      	subs	r4, r4, r5
 8005328:	10a4      	asrs	r4, r4, #2
 800532a:	2600      	movs	r6, #0
 800532c:	42a6      	cmp	r6, r4
 800532e:	d109      	bne.n	8005344 <__libc_init_array+0x24>
 8005330:	4d0b      	ldr	r5, [pc, #44]	; (8005360 <__libc_init_array+0x40>)
 8005332:	4c0c      	ldr	r4, [pc, #48]	; (8005364 <__libc_init_array+0x44>)
 8005334:	f002 ff02 	bl	800813c <_init>
 8005338:	1b64      	subs	r4, r4, r5
 800533a:	10a4      	asrs	r4, r4, #2
 800533c:	2600      	movs	r6, #0
 800533e:	42a6      	cmp	r6, r4
 8005340:	d105      	bne.n	800534e <__libc_init_array+0x2e>
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	f855 3b04 	ldr.w	r3, [r5], #4
 8005348:	4798      	blx	r3
 800534a:	3601      	adds	r6, #1
 800534c:	e7ee      	b.n	800532c <__libc_init_array+0xc>
 800534e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005352:	4798      	blx	r3
 8005354:	3601      	adds	r6, #1
 8005356:	e7f2      	b.n	800533e <__libc_init_array+0x1e>
 8005358:	08008cfc 	.word	0x08008cfc
 800535c:	08008cfc 	.word	0x08008cfc
 8005360:	08008cfc 	.word	0x08008cfc
 8005364:	08008d00 	.word	0x08008d00

08005368 <memcpy>:
 8005368:	440a      	add	r2, r1
 800536a:	4291      	cmp	r1, r2
 800536c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005370:	d100      	bne.n	8005374 <memcpy+0xc>
 8005372:	4770      	bx	lr
 8005374:	b510      	push	{r4, lr}
 8005376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800537a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800537e:	4291      	cmp	r1, r2
 8005380:	d1f9      	bne.n	8005376 <memcpy+0xe>
 8005382:	bd10      	pop	{r4, pc}

08005384 <memset>:
 8005384:	4402      	add	r2, r0
 8005386:	4603      	mov	r3, r0
 8005388:	4293      	cmp	r3, r2
 800538a:	d100      	bne.n	800538e <memset+0xa>
 800538c:	4770      	bx	lr
 800538e:	f803 1b01 	strb.w	r1, [r3], #1
 8005392:	e7f9      	b.n	8005388 <memset+0x4>

08005394 <__cvt>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	ec55 4b10 	vmov	r4, r5, d0
 800539c:	2d00      	cmp	r5, #0
 800539e:	460e      	mov	r6, r1
 80053a0:	4619      	mov	r1, r3
 80053a2:	462b      	mov	r3, r5
 80053a4:	bfbb      	ittet	lt
 80053a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053aa:	461d      	movlt	r5, r3
 80053ac:	2300      	movge	r3, #0
 80053ae:	232d      	movlt	r3, #45	; 0x2d
 80053b0:	700b      	strb	r3, [r1, #0]
 80053b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053b8:	4691      	mov	r9, r2
 80053ba:	f023 0820 	bic.w	r8, r3, #32
 80053be:	bfbc      	itt	lt
 80053c0:	4622      	movlt	r2, r4
 80053c2:	4614      	movlt	r4, r2
 80053c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053c8:	d005      	beq.n	80053d6 <__cvt+0x42>
 80053ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053ce:	d100      	bne.n	80053d2 <__cvt+0x3e>
 80053d0:	3601      	adds	r6, #1
 80053d2:	2102      	movs	r1, #2
 80053d4:	e000      	b.n	80053d8 <__cvt+0x44>
 80053d6:	2103      	movs	r1, #3
 80053d8:	ab03      	add	r3, sp, #12
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	ab02      	add	r3, sp, #8
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	ec45 4b10 	vmov	d0, r4, r5
 80053e4:	4653      	mov	r3, sl
 80053e6:	4632      	mov	r2, r6
 80053e8:	f000 fcea 	bl	8005dc0 <_dtoa_r>
 80053ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053f0:	4607      	mov	r7, r0
 80053f2:	d102      	bne.n	80053fa <__cvt+0x66>
 80053f4:	f019 0f01 	tst.w	r9, #1
 80053f8:	d022      	beq.n	8005440 <__cvt+0xac>
 80053fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053fe:	eb07 0906 	add.w	r9, r7, r6
 8005402:	d110      	bne.n	8005426 <__cvt+0x92>
 8005404:	783b      	ldrb	r3, [r7, #0]
 8005406:	2b30      	cmp	r3, #48	; 0x30
 8005408:	d10a      	bne.n	8005420 <__cvt+0x8c>
 800540a:	2200      	movs	r2, #0
 800540c:	2300      	movs	r3, #0
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	f7fb fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 8005416:	b918      	cbnz	r0, 8005420 <__cvt+0x8c>
 8005418:	f1c6 0601 	rsb	r6, r6, #1
 800541c:	f8ca 6000 	str.w	r6, [sl]
 8005420:	f8da 3000 	ldr.w	r3, [sl]
 8005424:	4499      	add	r9, r3
 8005426:	2200      	movs	r2, #0
 8005428:	2300      	movs	r3, #0
 800542a:	4620      	mov	r0, r4
 800542c:	4629      	mov	r1, r5
 800542e:	f7fb fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005432:	b108      	cbz	r0, 8005438 <__cvt+0xa4>
 8005434:	f8cd 900c 	str.w	r9, [sp, #12]
 8005438:	2230      	movs	r2, #48	; 0x30
 800543a:	9b03      	ldr	r3, [sp, #12]
 800543c:	454b      	cmp	r3, r9
 800543e:	d307      	bcc.n	8005450 <__cvt+0xbc>
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005444:	1bdb      	subs	r3, r3, r7
 8005446:	4638      	mov	r0, r7
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	b004      	add	sp, #16
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	1c59      	adds	r1, r3, #1
 8005452:	9103      	str	r1, [sp, #12]
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e7f0      	b.n	800543a <__cvt+0xa6>

08005458 <__exponent>:
 8005458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800545a:	4603      	mov	r3, r0
 800545c:	2900      	cmp	r1, #0
 800545e:	bfb8      	it	lt
 8005460:	4249      	neglt	r1, r1
 8005462:	f803 2b02 	strb.w	r2, [r3], #2
 8005466:	bfb4      	ite	lt
 8005468:	222d      	movlt	r2, #45	; 0x2d
 800546a:	222b      	movge	r2, #43	; 0x2b
 800546c:	2909      	cmp	r1, #9
 800546e:	7042      	strb	r2, [r0, #1]
 8005470:	dd2a      	ble.n	80054c8 <__exponent+0x70>
 8005472:	f10d 0407 	add.w	r4, sp, #7
 8005476:	46a4      	mov	ip, r4
 8005478:	270a      	movs	r7, #10
 800547a:	46a6      	mov	lr, r4
 800547c:	460a      	mov	r2, r1
 800547e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005482:	fb07 1516 	mls	r5, r7, r6, r1
 8005486:	3530      	adds	r5, #48	; 0x30
 8005488:	2a63      	cmp	r2, #99	; 0x63
 800548a:	f104 34ff 	add.w	r4, r4, #4294967295
 800548e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005492:	4631      	mov	r1, r6
 8005494:	dcf1      	bgt.n	800547a <__exponent+0x22>
 8005496:	3130      	adds	r1, #48	; 0x30
 8005498:	f1ae 0502 	sub.w	r5, lr, #2
 800549c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054a0:	1c44      	adds	r4, r0, #1
 80054a2:	4629      	mov	r1, r5
 80054a4:	4561      	cmp	r1, ip
 80054a6:	d30a      	bcc.n	80054be <__exponent+0x66>
 80054a8:	f10d 0209 	add.w	r2, sp, #9
 80054ac:	eba2 020e 	sub.w	r2, r2, lr
 80054b0:	4565      	cmp	r5, ip
 80054b2:	bf88      	it	hi
 80054b4:	2200      	movhi	r2, #0
 80054b6:	4413      	add	r3, r2
 80054b8:	1a18      	subs	r0, r3, r0
 80054ba:	b003      	add	sp, #12
 80054bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054c6:	e7ed      	b.n	80054a4 <__exponent+0x4c>
 80054c8:	2330      	movs	r3, #48	; 0x30
 80054ca:	3130      	adds	r1, #48	; 0x30
 80054cc:	7083      	strb	r3, [r0, #2]
 80054ce:	70c1      	strb	r1, [r0, #3]
 80054d0:	1d03      	adds	r3, r0, #4
 80054d2:	e7f1      	b.n	80054b8 <__exponent+0x60>

080054d4 <_printf_float>:
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	ed2d 8b02 	vpush	{d8}
 80054dc:	b08d      	sub	sp, #52	; 0x34
 80054de:	460c      	mov	r4, r1
 80054e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054e4:	4616      	mov	r6, r2
 80054e6:	461f      	mov	r7, r3
 80054e8:	4605      	mov	r5, r0
 80054ea:	f001 fa57 	bl	800699c <_localeconv_r>
 80054ee:	f8d0 a000 	ldr.w	sl, [r0]
 80054f2:	4650      	mov	r0, sl
 80054f4:	f7fa fe6c 	bl	80001d0 <strlen>
 80054f8:	2300      	movs	r3, #0
 80054fa:	930a      	str	r3, [sp, #40]	; 0x28
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	9305      	str	r3, [sp, #20]
 8005500:	f8d8 3000 	ldr.w	r3, [r8]
 8005504:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005508:	3307      	adds	r3, #7
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	f103 0208 	add.w	r2, r3, #8
 8005512:	f8c8 2000 	str.w	r2, [r8]
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800551e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005522:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	f8cd 8018 	str.w	r8, [sp, #24]
 800552c:	ee08 0a10 	vmov	s16, r0
 8005530:	4b9f      	ldr	r3, [pc, #636]	; (80057b0 <_printf_float+0x2dc>)
 8005532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	f7fb faf7 	bl	8000b2c <__aeabi_dcmpun>
 800553e:	bb88      	cbnz	r0, 80055a4 <_printf_float+0xd0>
 8005540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005544:	4b9a      	ldr	r3, [pc, #616]	; (80057b0 <_printf_float+0x2dc>)
 8005546:	f04f 32ff 	mov.w	r2, #4294967295
 800554a:	f7fb fad1 	bl	8000af0 <__aeabi_dcmple>
 800554e:	bb48      	cbnz	r0, 80055a4 <_printf_float+0xd0>
 8005550:	2200      	movs	r2, #0
 8005552:	2300      	movs	r3, #0
 8005554:	4640      	mov	r0, r8
 8005556:	4649      	mov	r1, r9
 8005558:	f7fb fac0 	bl	8000adc <__aeabi_dcmplt>
 800555c:	b110      	cbz	r0, 8005564 <_printf_float+0x90>
 800555e:	232d      	movs	r3, #45	; 0x2d
 8005560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005564:	4b93      	ldr	r3, [pc, #588]	; (80057b4 <_printf_float+0x2e0>)
 8005566:	4894      	ldr	r0, [pc, #592]	; (80057b8 <_printf_float+0x2e4>)
 8005568:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800556c:	bf94      	ite	ls
 800556e:	4698      	movls	r8, r3
 8005570:	4680      	movhi	r8, r0
 8005572:	2303      	movs	r3, #3
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	9b05      	ldr	r3, [sp, #20]
 8005578:	f023 0204 	bic.w	r2, r3, #4
 800557c:	6022      	str	r2, [r4, #0]
 800557e:	f04f 0900 	mov.w	r9, #0
 8005582:	9700      	str	r7, [sp, #0]
 8005584:	4633      	mov	r3, r6
 8005586:	aa0b      	add	r2, sp, #44	; 0x2c
 8005588:	4621      	mov	r1, r4
 800558a:	4628      	mov	r0, r5
 800558c:	f000 f9d8 	bl	8005940 <_printf_common>
 8005590:	3001      	adds	r0, #1
 8005592:	f040 8090 	bne.w	80056b6 <_printf_float+0x1e2>
 8005596:	f04f 30ff 	mov.w	r0, #4294967295
 800559a:	b00d      	add	sp, #52	; 0x34
 800559c:	ecbd 8b02 	vpop	{d8}
 80055a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	4640      	mov	r0, r8
 80055aa:	4649      	mov	r1, r9
 80055ac:	f7fb fabe 	bl	8000b2c <__aeabi_dcmpun>
 80055b0:	b140      	cbz	r0, 80055c4 <_printf_float+0xf0>
 80055b2:	464b      	mov	r3, r9
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bfbc      	itt	lt
 80055b8:	232d      	movlt	r3, #45	; 0x2d
 80055ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055be:	487f      	ldr	r0, [pc, #508]	; (80057bc <_printf_float+0x2e8>)
 80055c0:	4b7f      	ldr	r3, [pc, #508]	; (80057c0 <_printf_float+0x2ec>)
 80055c2:	e7d1      	b.n	8005568 <_printf_float+0x94>
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055ca:	9206      	str	r2, [sp, #24]
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	d13f      	bne.n	8005650 <_printf_float+0x17c>
 80055d0:	2306      	movs	r3, #6
 80055d2:	6063      	str	r3, [r4, #4]
 80055d4:	9b05      	ldr	r3, [sp, #20]
 80055d6:	6861      	ldr	r1, [r4, #4]
 80055d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055dc:	2300      	movs	r3, #0
 80055de:	9303      	str	r3, [sp, #12]
 80055e0:	ab0a      	add	r3, sp, #40	; 0x28
 80055e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80055e6:	ab09      	add	r3, sp, #36	; 0x24
 80055e8:	ec49 8b10 	vmov	d0, r8, r9
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	6022      	str	r2, [r4, #0]
 80055f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055f4:	4628      	mov	r0, r5
 80055f6:	f7ff fecd 	bl	8005394 <__cvt>
 80055fa:	9b06      	ldr	r3, [sp, #24]
 80055fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055fe:	2b47      	cmp	r3, #71	; 0x47
 8005600:	4680      	mov	r8, r0
 8005602:	d108      	bne.n	8005616 <_printf_float+0x142>
 8005604:	1cc8      	adds	r0, r1, #3
 8005606:	db02      	blt.n	800560e <_printf_float+0x13a>
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	4299      	cmp	r1, r3
 800560c:	dd41      	ble.n	8005692 <_printf_float+0x1be>
 800560e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005612:	fa5f fb8b 	uxtb.w	fp, fp
 8005616:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800561a:	d820      	bhi.n	800565e <_printf_float+0x18a>
 800561c:	3901      	subs	r1, #1
 800561e:	465a      	mov	r2, fp
 8005620:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005624:	9109      	str	r1, [sp, #36]	; 0x24
 8005626:	f7ff ff17 	bl	8005458 <__exponent>
 800562a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800562c:	1813      	adds	r3, r2, r0
 800562e:	2a01      	cmp	r2, #1
 8005630:	4681      	mov	r9, r0
 8005632:	6123      	str	r3, [r4, #16]
 8005634:	dc02      	bgt.n	800563c <_printf_float+0x168>
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	07d2      	lsls	r2, r2, #31
 800563a:	d501      	bpl.n	8005640 <_printf_float+0x16c>
 800563c:	3301      	adds	r3, #1
 800563e:	6123      	str	r3, [r4, #16]
 8005640:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005644:	2b00      	cmp	r3, #0
 8005646:	d09c      	beq.n	8005582 <_printf_float+0xae>
 8005648:	232d      	movs	r3, #45	; 0x2d
 800564a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564e:	e798      	b.n	8005582 <_printf_float+0xae>
 8005650:	9a06      	ldr	r2, [sp, #24]
 8005652:	2a47      	cmp	r2, #71	; 0x47
 8005654:	d1be      	bne.n	80055d4 <_printf_float+0x100>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1bc      	bne.n	80055d4 <_printf_float+0x100>
 800565a:	2301      	movs	r3, #1
 800565c:	e7b9      	b.n	80055d2 <_printf_float+0xfe>
 800565e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005662:	d118      	bne.n	8005696 <_printf_float+0x1c2>
 8005664:	2900      	cmp	r1, #0
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	dd0b      	ble.n	8005682 <_printf_float+0x1ae>
 800566a:	6121      	str	r1, [r4, #16]
 800566c:	b913      	cbnz	r3, 8005674 <_printf_float+0x1a0>
 800566e:	6822      	ldr	r2, [r4, #0]
 8005670:	07d0      	lsls	r0, r2, #31
 8005672:	d502      	bpl.n	800567a <_printf_float+0x1a6>
 8005674:	3301      	adds	r3, #1
 8005676:	440b      	add	r3, r1
 8005678:	6123      	str	r3, [r4, #16]
 800567a:	65a1      	str	r1, [r4, #88]	; 0x58
 800567c:	f04f 0900 	mov.w	r9, #0
 8005680:	e7de      	b.n	8005640 <_printf_float+0x16c>
 8005682:	b913      	cbnz	r3, 800568a <_printf_float+0x1b6>
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	07d2      	lsls	r2, r2, #31
 8005688:	d501      	bpl.n	800568e <_printf_float+0x1ba>
 800568a:	3302      	adds	r3, #2
 800568c:	e7f4      	b.n	8005678 <_printf_float+0x1a4>
 800568e:	2301      	movs	r3, #1
 8005690:	e7f2      	b.n	8005678 <_printf_float+0x1a4>
 8005692:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005698:	4299      	cmp	r1, r3
 800569a:	db05      	blt.n	80056a8 <_printf_float+0x1d4>
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	6121      	str	r1, [r4, #16]
 80056a0:	07d8      	lsls	r0, r3, #31
 80056a2:	d5ea      	bpl.n	800567a <_printf_float+0x1a6>
 80056a4:	1c4b      	adds	r3, r1, #1
 80056a6:	e7e7      	b.n	8005678 <_printf_float+0x1a4>
 80056a8:	2900      	cmp	r1, #0
 80056aa:	bfd4      	ite	le
 80056ac:	f1c1 0202 	rsble	r2, r1, #2
 80056b0:	2201      	movgt	r2, #1
 80056b2:	4413      	add	r3, r2
 80056b4:	e7e0      	b.n	8005678 <_printf_float+0x1a4>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	055a      	lsls	r2, r3, #21
 80056ba:	d407      	bmi.n	80056cc <_printf_float+0x1f8>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	4642      	mov	r2, r8
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	d12c      	bne.n	8005724 <_printf_float+0x250>
 80056ca:	e764      	b.n	8005596 <_printf_float+0xc2>
 80056cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056d0:	f240 80e0 	bls.w	8005894 <_printf_float+0x3c0>
 80056d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056d8:	2200      	movs	r2, #0
 80056da:	2300      	movs	r3, #0
 80056dc:	f7fb f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d034      	beq.n	800574e <_printf_float+0x27a>
 80056e4:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <_printf_float+0x2f0>)
 80056e6:	2301      	movs	r3, #1
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f af51 	beq.w	8005596 <_printf_float+0xc2>
 80056f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056f8:	429a      	cmp	r2, r3
 80056fa:	db02      	blt.n	8005702 <_printf_float+0x22e>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	07d8      	lsls	r0, r3, #31
 8005700:	d510      	bpl.n	8005724 <_printf_float+0x250>
 8005702:	ee18 3a10 	vmov	r3, s16
 8005706:	4652      	mov	r2, sl
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	f43f af41 	beq.w	8005596 <_printf_float+0xc2>
 8005714:	f04f 0800 	mov.w	r8, #0
 8005718:	f104 091a 	add.w	r9, r4, #26
 800571c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571e:	3b01      	subs	r3, #1
 8005720:	4543      	cmp	r3, r8
 8005722:	dc09      	bgt.n	8005738 <_printf_float+0x264>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	079b      	lsls	r3, r3, #30
 8005728:	f100 8105 	bmi.w	8005936 <_printf_float+0x462>
 800572c:	68e0      	ldr	r0, [r4, #12]
 800572e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005730:	4298      	cmp	r0, r3
 8005732:	bfb8      	it	lt
 8005734:	4618      	movlt	r0, r3
 8005736:	e730      	b.n	800559a <_printf_float+0xc6>
 8005738:	2301      	movs	r3, #1
 800573a:	464a      	mov	r2, r9
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	f43f af27 	beq.w	8005596 <_printf_float+0xc2>
 8005748:	f108 0801 	add.w	r8, r8, #1
 800574c:	e7e6      	b.n	800571c <_printf_float+0x248>
 800574e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	dc39      	bgt.n	80057c8 <_printf_float+0x2f4>
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <_printf_float+0x2f0>)
 8005756:	2301      	movs	r3, #1
 8005758:	4631      	mov	r1, r6
 800575a:	4628      	mov	r0, r5
 800575c:	47b8      	blx	r7
 800575e:	3001      	adds	r0, #1
 8005760:	f43f af19 	beq.w	8005596 <_printf_float+0xc2>
 8005764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005768:	4313      	orrs	r3, r2
 800576a:	d102      	bne.n	8005772 <_printf_float+0x29e>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	07d9      	lsls	r1, r3, #31
 8005770:	d5d8      	bpl.n	8005724 <_printf_float+0x250>
 8005772:	ee18 3a10 	vmov	r3, s16
 8005776:	4652      	mov	r2, sl
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f af09 	beq.w	8005596 <_printf_float+0xc2>
 8005784:	f04f 0900 	mov.w	r9, #0
 8005788:	f104 0a1a 	add.w	sl, r4, #26
 800578c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578e:	425b      	negs	r3, r3
 8005790:	454b      	cmp	r3, r9
 8005792:	dc01      	bgt.n	8005798 <_printf_float+0x2c4>
 8005794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005796:	e792      	b.n	80056be <_printf_float+0x1ea>
 8005798:	2301      	movs	r3, #1
 800579a:	4652      	mov	r2, sl
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	f43f aef7 	beq.w	8005596 <_printf_float+0xc2>
 80057a8:	f109 0901 	add.w	r9, r9, #1
 80057ac:	e7ee      	b.n	800578c <_printf_float+0x2b8>
 80057ae:	bf00      	nop
 80057b0:	7fefffff 	.word	0x7fefffff
 80057b4:	08008928 	.word	0x08008928
 80057b8:	0800892c 	.word	0x0800892c
 80057bc:	08008934 	.word	0x08008934
 80057c0:	08008930 	.word	0x08008930
 80057c4:	08008938 	.word	0x08008938
 80057c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057cc:	429a      	cmp	r2, r3
 80057ce:	bfa8      	it	ge
 80057d0:	461a      	movge	r2, r3
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	4691      	mov	r9, r2
 80057d6:	dc37      	bgt.n	8005848 <_printf_float+0x374>
 80057d8:	f04f 0b00 	mov.w	fp, #0
 80057dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057e0:	f104 021a 	add.w	r2, r4, #26
 80057e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057e6:	9305      	str	r3, [sp, #20]
 80057e8:	eba3 0309 	sub.w	r3, r3, r9
 80057ec:	455b      	cmp	r3, fp
 80057ee:	dc33      	bgt.n	8005858 <_printf_float+0x384>
 80057f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f4:	429a      	cmp	r2, r3
 80057f6:	db3b      	blt.n	8005870 <_printf_float+0x39c>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	07da      	lsls	r2, r3, #31
 80057fc:	d438      	bmi.n	8005870 <_printf_float+0x39c>
 80057fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005800:	9a05      	ldr	r2, [sp, #20]
 8005802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005804:	1a9a      	subs	r2, r3, r2
 8005806:	eba3 0901 	sub.w	r9, r3, r1
 800580a:	4591      	cmp	r9, r2
 800580c:	bfa8      	it	ge
 800580e:	4691      	movge	r9, r2
 8005810:	f1b9 0f00 	cmp.w	r9, #0
 8005814:	dc35      	bgt.n	8005882 <_printf_float+0x3ae>
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800581e:	f104 0a1a 	add.w	sl, r4, #26
 8005822:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	eba3 0309 	sub.w	r3, r3, r9
 800582c:	4543      	cmp	r3, r8
 800582e:	f77f af79 	ble.w	8005724 <_printf_float+0x250>
 8005832:	2301      	movs	r3, #1
 8005834:	4652      	mov	r2, sl
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f aeaa 	beq.w	8005596 <_printf_float+0xc2>
 8005842:	f108 0801 	add.w	r8, r8, #1
 8005846:	e7ec      	b.n	8005822 <_printf_float+0x34e>
 8005848:	4613      	mov	r3, r2
 800584a:	4631      	mov	r1, r6
 800584c:	4642      	mov	r2, r8
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	d1c0      	bne.n	80057d8 <_printf_float+0x304>
 8005856:	e69e      	b.n	8005596 <_printf_float+0xc2>
 8005858:	2301      	movs	r3, #1
 800585a:	4631      	mov	r1, r6
 800585c:	4628      	mov	r0, r5
 800585e:	9205      	str	r2, [sp, #20]
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f ae97 	beq.w	8005596 <_printf_float+0xc2>
 8005868:	9a05      	ldr	r2, [sp, #20]
 800586a:	f10b 0b01 	add.w	fp, fp, #1
 800586e:	e7b9      	b.n	80057e4 <_printf_float+0x310>
 8005870:	ee18 3a10 	vmov	r3, s16
 8005874:	4652      	mov	r2, sl
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	d1be      	bne.n	80057fe <_printf_float+0x32a>
 8005880:	e689      	b.n	8005596 <_printf_float+0xc2>
 8005882:	9a05      	ldr	r2, [sp, #20]
 8005884:	464b      	mov	r3, r9
 8005886:	4442      	add	r2, r8
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	d1c1      	bne.n	8005816 <_printf_float+0x342>
 8005892:	e680      	b.n	8005596 <_printf_float+0xc2>
 8005894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005896:	2a01      	cmp	r2, #1
 8005898:	dc01      	bgt.n	800589e <_printf_float+0x3ca>
 800589a:	07db      	lsls	r3, r3, #31
 800589c:	d538      	bpl.n	8005910 <_printf_float+0x43c>
 800589e:	2301      	movs	r3, #1
 80058a0:	4642      	mov	r2, r8
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	f43f ae74 	beq.w	8005596 <_printf_float+0xc2>
 80058ae:	ee18 3a10 	vmov	r3, s16
 80058b2:	4652      	mov	r2, sl
 80058b4:	4631      	mov	r1, r6
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b8      	blx	r7
 80058ba:	3001      	adds	r0, #1
 80058bc:	f43f ae6b 	beq.w	8005596 <_printf_float+0xc2>
 80058c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058c4:	2200      	movs	r2, #0
 80058c6:	2300      	movs	r3, #0
 80058c8:	f7fb f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80058cc:	b9d8      	cbnz	r0, 8005906 <_printf_float+0x432>
 80058ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d0:	f108 0201 	add.w	r2, r8, #1
 80058d4:	3b01      	subs	r3, #1
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	47b8      	blx	r7
 80058dc:	3001      	adds	r0, #1
 80058de:	d10e      	bne.n	80058fe <_printf_float+0x42a>
 80058e0:	e659      	b.n	8005596 <_printf_float+0xc2>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f ae52 	beq.w	8005596 <_printf_float+0xc2>
 80058f2:	f108 0801 	add.w	r8, r8, #1
 80058f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	4543      	cmp	r3, r8
 80058fc:	dcf1      	bgt.n	80058e2 <_printf_float+0x40e>
 80058fe:	464b      	mov	r3, r9
 8005900:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005904:	e6dc      	b.n	80056c0 <_printf_float+0x1ec>
 8005906:	f04f 0800 	mov.w	r8, #0
 800590a:	f104 0a1a 	add.w	sl, r4, #26
 800590e:	e7f2      	b.n	80058f6 <_printf_float+0x422>
 8005910:	2301      	movs	r3, #1
 8005912:	4642      	mov	r2, r8
 8005914:	e7df      	b.n	80058d6 <_printf_float+0x402>
 8005916:	2301      	movs	r3, #1
 8005918:	464a      	mov	r2, r9
 800591a:	4631      	mov	r1, r6
 800591c:	4628      	mov	r0, r5
 800591e:	47b8      	blx	r7
 8005920:	3001      	adds	r0, #1
 8005922:	f43f ae38 	beq.w	8005596 <_printf_float+0xc2>
 8005926:	f108 0801 	add.w	r8, r8, #1
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800592e:	1a5b      	subs	r3, r3, r1
 8005930:	4543      	cmp	r3, r8
 8005932:	dcf0      	bgt.n	8005916 <_printf_float+0x442>
 8005934:	e6fa      	b.n	800572c <_printf_float+0x258>
 8005936:	f04f 0800 	mov.w	r8, #0
 800593a:	f104 0919 	add.w	r9, r4, #25
 800593e:	e7f4      	b.n	800592a <_printf_float+0x456>

08005940 <_printf_common>:
 8005940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	4616      	mov	r6, r2
 8005946:	4699      	mov	r9, r3
 8005948:	688a      	ldr	r2, [r1, #8]
 800594a:	690b      	ldr	r3, [r1, #16]
 800594c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005950:	4293      	cmp	r3, r2
 8005952:	bfb8      	it	lt
 8005954:	4613      	movlt	r3, r2
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800595c:	4607      	mov	r7, r0
 800595e:	460c      	mov	r4, r1
 8005960:	b10a      	cbz	r2, 8005966 <_printf_common+0x26>
 8005962:	3301      	adds	r3, #1
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	0699      	lsls	r1, r3, #26
 800596a:	bf42      	ittt	mi
 800596c:	6833      	ldrmi	r3, [r6, #0]
 800596e:	3302      	addmi	r3, #2
 8005970:	6033      	strmi	r3, [r6, #0]
 8005972:	6825      	ldr	r5, [r4, #0]
 8005974:	f015 0506 	ands.w	r5, r5, #6
 8005978:	d106      	bne.n	8005988 <_printf_common+0x48>
 800597a:	f104 0a19 	add.w	sl, r4, #25
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	6832      	ldr	r2, [r6, #0]
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	42ab      	cmp	r3, r5
 8005986:	dc26      	bgt.n	80059d6 <_printf_common+0x96>
 8005988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800598c:	1e13      	subs	r3, r2, #0
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	bf18      	it	ne
 8005992:	2301      	movne	r3, #1
 8005994:	0692      	lsls	r2, r2, #26
 8005996:	d42b      	bmi.n	80059f0 <_printf_common+0xb0>
 8005998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800599c:	4649      	mov	r1, r9
 800599e:	4638      	mov	r0, r7
 80059a0:	47c0      	blx	r8
 80059a2:	3001      	adds	r0, #1
 80059a4:	d01e      	beq.n	80059e4 <_printf_common+0xa4>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	68e5      	ldr	r5, [r4, #12]
 80059aa:	6832      	ldr	r2, [r6, #0]
 80059ac:	f003 0306 	and.w	r3, r3, #6
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	bf08      	it	eq
 80059b4:	1aad      	subeq	r5, r5, r2
 80059b6:	68a3      	ldr	r3, [r4, #8]
 80059b8:	6922      	ldr	r2, [r4, #16]
 80059ba:	bf0c      	ite	eq
 80059bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c0:	2500      	movne	r5, #0
 80059c2:	4293      	cmp	r3, r2
 80059c4:	bfc4      	itt	gt
 80059c6:	1a9b      	subgt	r3, r3, r2
 80059c8:	18ed      	addgt	r5, r5, r3
 80059ca:	2600      	movs	r6, #0
 80059cc:	341a      	adds	r4, #26
 80059ce:	42b5      	cmp	r5, r6
 80059d0:	d11a      	bne.n	8005a08 <_printf_common+0xc8>
 80059d2:	2000      	movs	r0, #0
 80059d4:	e008      	b.n	80059e8 <_printf_common+0xa8>
 80059d6:	2301      	movs	r3, #1
 80059d8:	4652      	mov	r2, sl
 80059da:	4649      	mov	r1, r9
 80059dc:	4638      	mov	r0, r7
 80059de:	47c0      	blx	r8
 80059e0:	3001      	adds	r0, #1
 80059e2:	d103      	bne.n	80059ec <_printf_common+0xac>
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ec:	3501      	adds	r5, #1
 80059ee:	e7c6      	b.n	800597e <_printf_common+0x3e>
 80059f0:	18e1      	adds	r1, r4, r3
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	2030      	movs	r0, #48	; 0x30
 80059f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059fa:	4422      	add	r2, r4
 80059fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a04:	3302      	adds	r3, #2
 8005a06:	e7c7      	b.n	8005998 <_printf_common+0x58>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c0      	blx	r8
 8005a12:	3001      	adds	r0, #1
 8005a14:	d0e6      	beq.n	80059e4 <_printf_common+0xa4>
 8005a16:	3601      	adds	r6, #1
 8005a18:	e7d9      	b.n	80059ce <_printf_common+0x8e>
	...

08005a1c <_printf_i>:
 8005a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	7e0f      	ldrb	r7, [r1, #24]
 8005a22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a24:	2f78      	cmp	r7, #120	; 0x78
 8005a26:	4691      	mov	r9, r2
 8005a28:	4680      	mov	r8, r0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	469a      	mov	sl, r3
 8005a2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a32:	d807      	bhi.n	8005a44 <_printf_i+0x28>
 8005a34:	2f62      	cmp	r7, #98	; 0x62
 8005a36:	d80a      	bhi.n	8005a4e <_printf_i+0x32>
 8005a38:	2f00      	cmp	r7, #0
 8005a3a:	f000 80d8 	beq.w	8005bee <_printf_i+0x1d2>
 8005a3e:	2f58      	cmp	r7, #88	; 0x58
 8005a40:	f000 80a3 	beq.w	8005b8a <_printf_i+0x16e>
 8005a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a4c:	e03a      	b.n	8005ac4 <_printf_i+0xa8>
 8005a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a52:	2b15      	cmp	r3, #21
 8005a54:	d8f6      	bhi.n	8005a44 <_printf_i+0x28>
 8005a56:	a101      	add	r1, pc, #4	; (adr r1, 8005a5c <_printf_i+0x40>)
 8005a58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a5c:	08005ab5 	.word	0x08005ab5
 8005a60:	08005ac9 	.word	0x08005ac9
 8005a64:	08005a45 	.word	0x08005a45
 8005a68:	08005a45 	.word	0x08005a45
 8005a6c:	08005a45 	.word	0x08005a45
 8005a70:	08005a45 	.word	0x08005a45
 8005a74:	08005ac9 	.word	0x08005ac9
 8005a78:	08005a45 	.word	0x08005a45
 8005a7c:	08005a45 	.word	0x08005a45
 8005a80:	08005a45 	.word	0x08005a45
 8005a84:	08005a45 	.word	0x08005a45
 8005a88:	08005bd5 	.word	0x08005bd5
 8005a8c:	08005af9 	.word	0x08005af9
 8005a90:	08005bb7 	.word	0x08005bb7
 8005a94:	08005a45 	.word	0x08005a45
 8005a98:	08005a45 	.word	0x08005a45
 8005a9c:	08005bf7 	.word	0x08005bf7
 8005aa0:	08005a45 	.word	0x08005a45
 8005aa4:	08005af9 	.word	0x08005af9
 8005aa8:	08005a45 	.word	0x08005a45
 8005aac:	08005a45 	.word	0x08005a45
 8005ab0:	08005bbf 	.word	0x08005bbf
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	1d1a      	adds	r2, r3, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	602a      	str	r2, [r5, #0]
 8005abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0a3      	b.n	8005c10 <_printf_i+0x1f4>
 8005ac8:	6820      	ldr	r0, [r4, #0]
 8005aca:	6829      	ldr	r1, [r5, #0]
 8005acc:	0606      	lsls	r6, r0, #24
 8005ace:	f101 0304 	add.w	r3, r1, #4
 8005ad2:	d50a      	bpl.n	8005aea <_printf_i+0xce>
 8005ad4:	680e      	ldr	r6, [r1, #0]
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	da03      	bge.n	8005ae4 <_printf_i+0xc8>
 8005adc:	232d      	movs	r3, #45	; 0x2d
 8005ade:	4276      	negs	r6, r6
 8005ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae4:	485e      	ldr	r0, [pc, #376]	; (8005c60 <_printf_i+0x244>)
 8005ae6:	230a      	movs	r3, #10
 8005ae8:	e019      	b.n	8005b1e <_printf_i+0x102>
 8005aea:	680e      	ldr	r6, [r1, #0]
 8005aec:	602b      	str	r3, [r5, #0]
 8005aee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005af2:	bf18      	it	ne
 8005af4:	b236      	sxthne	r6, r6
 8005af6:	e7ef      	b.n	8005ad8 <_printf_i+0xbc>
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	6820      	ldr	r0, [r4, #0]
 8005afc:	1d19      	adds	r1, r3, #4
 8005afe:	6029      	str	r1, [r5, #0]
 8005b00:	0601      	lsls	r1, r0, #24
 8005b02:	d501      	bpl.n	8005b08 <_printf_i+0xec>
 8005b04:	681e      	ldr	r6, [r3, #0]
 8005b06:	e002      	b.n	8005b0e <_printf_i+0xf2>
 8005b08:	0646      	lsls	r6, r0, #25
 8005b0a:	d5fb      	bpl.n	8005b04 <_printf_i+0xe8>
 8005b0c:	881e      	ldrh	r6, [r3, #0]
 8005b0e:	4854      	ldr	r0, [pc, #336]	; (8005c60 <_printf_i+0x244>)
 8005b10:	2f6f      	cmp	r7, #111	; 0x6f
 8005b12:	bf0c      	ite	eq
 8005b14:	2308      	moveq	r3, #8
 8005b16:	230a      	movne	r3, #10
 8005b18:	2100      	movs	r1, #0
 8005b1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b1e:	6865      	ldr	r5, [r4, #4]
 8005b20:	60a5      	str	r5, [r4, #8]
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	bfa2      	ittt	ge
 8005b26:	6821      	ldrge	r1, [r4, #0]
 8005b28:	f021 0104 	bicge.w	r1, r1, #4
 8005b2c:	6021      	strge	r1, [r4, #0]
 8005b2e:	b90e      	cbnz	r6, 8005b34 <_printf_i+0x118>
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	d04d      	beq.n	8005bd0 <_printf_i+0x1b4>
 8005b34:	4615      	mov	r5, r2
 8005b36:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b3a:	fb03 6711 	mls	r7, r3, r1, r6
 8005b3e:	5dc7      	ldrb	r7, [r0, r7]
 8005b40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b44:	4637      	mov	r7, r6
 8005b46:	42bb      	cmp	r3, r7
 8005b48:	460e      	mov	r6, r1
 8005b4a:	d9f4      	bls.n	8005b36 <_printf_i+0x11a>
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d10b      	bne.n	8005b68 <_printf_i+0x14c>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	07de      	lsls	r6, r3, #31
 8005b54:	d508      	bpl.n	8005b68 <_printf_i+0x14c>
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	6861      	ldr	r1, [r4, #4]
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	bfde      	ittt	le
 8005b5e:	2330      	movle	r3, #48	; 0x30
 8005b60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b68:	1b52      	subs	r2, r2, r5
 8005b6a:	6122      	str	r2, [r4, #16]
 8005b6c:	f8cd a000 	str.w	sl, [sp]
 8005b70:	464b      	mov	r3, r9
 8005b72:	aa03      	add	r2, sp, #12
 8005b74:	4621      	mov	r1, r4
 8005b76:	4640      	mov	r0, r8
 8005b78:	f7ff fee2 	bl	8005940 <_printf_common>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d14c      	bne.n	8005c1a <_printf_i+0x1fe>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	b004      	add	sp, #16
 8005b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8a:	4835      	ldr	r0, [pc, #212]	; (8005c60 <_printf_i+0x244>)
 8005b8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b90:	6829      	ldr	r1, [r5, #0]
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b98:	6029      	str	r1, [r5, #0]
 8005b9a:	061d      	lsls	r5, r3, #24
 8005b9c:	d514      	bpl.n	8005bc8 <_printf_i+0x1ac>
 8005b9e:	07df      	lsls	r7, r3, #31
 8005ba0:	bf44      	itt	mi
 8005ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ba6:	6023      	strmi	r3, [r4, #0]
 8005ba8:	b91e      	cbnz	r6, 8005bb2 <_printf_i+0x196>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	f023 0320 	bic.w	r3, r3, #32
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	2310      	movs	r3, #16
 8005bb4:	e7b0      	b.n	8005b18 <_printf_i+0xfc>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	f043 0320 	orr.w	r3, r3, #32
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	2378      	movs	r3, #120	; 0x78
 8005bc0:	4828      	ldr	r0, [pc, #160]	; (8005c64 <_printf_i+0x248>)
 8005bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bc6:	e7e3      	b.n	8005b90 <_printf_i+0x174>
 8005bc8:	0659      	lsls	r1, r3, #25
 8005bca:	bf48      	it	mi
 8005bcc:	b2b6      	uxthmi	r6, r6
 8005bce:	e7e6      	b.n	8005b9e <_printf_i+0x182>
 8005bd0:	4615      	mov	r5, r2
 8005bd2:	e7bb      	b.n	8005b4c <_printf_i+0x130>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	6826      	ldr	r6, [r4, #0]
 8005bd8:	6961      	ldr	r1, [r4, #20]
 8005bda:	1d18      	adds	r0, r3, #4
 8005bdc:	6028      	str	r0, [r5, #0]
 8005bde:	0635      	lsls	r5, r6, #24
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	d501      	bpl.n	8005be8 <_printf_i+0x1cc>
 8005be4:	6019      	str	r1, [r3, #0]
 8005be6:	e002      	b.n	8005bee <_printf_i+0x1d2>
 8005be8:	0670      	lsls	r0, r6, #25
 8005bea:	d5fb      	bpl.n	8005be4 <_printf_i+0x1c8>
 8005bec:	8019      	strh	r1, [r3, #0]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	4615      	mov	r5, r2
 8005bf4:	e7ba      	b.n	8005b6c <_printf_i+0x150>
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	1d1a      	adds	r2, r3, #4
 8005bfa:	602a      	str	r2, [r5, #0]
 8005bfc:	681d      	ldr	r5, [r3, #0]
 8005bfe:	6862      	ldr	r2, [r4, #4]
 8005c00:	2100      	movs	r1, #0
 8005c02:	4628      	mov	r0, r5
 8005c04:	f7fa faec 	bl	80001e0 <memchr>
 8005c08:	b108      	cbz	r0, 8005c0e <_printf_i+0x1f2>
 8005c0a:	1b40      	subs	r0, r0, r5
 8005c0c:	6060      	str	r0, [r4, #4]
 8005c0e:	6863      	ldr	r3, [r4, #4]
 8005c10:	6123      	str	r3, [r4, #16]
 8005c12:	2300      	movs	r3, #0
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c18:	e7a8      	b.n	8005b6c <_printf_i+0x150>
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	47d0      	blx	sl
 8005c24:	3001      	adds	r0, #1
 8005c26:	d0ab      	beq.n	8005b80 <_printf_i+0x164>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	079b      	lsls	r3, r3, #30
 8005c2c:	d413      	bmi.n	8005c56 <_printf_i+0x23a>
 8005c2e:	68e0      	ldr	r0, [r4, #12]
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	4298      	cmp	r0, r3
 8005c34:	bfb8      	it	lt
 8005c36:	4618      	movlt	r0, r3
 8005c38:	e7a4      	b.n	8005b84 <_printf_i+0x168>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	47d0      	blx	sl
 8005c44:	3001      	adds	r0, #1
 8005c46:	d09b      	beq.n	8005b80 <_printf_i+0x164>
 8005c48:	3501      	adds	r5, #1
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	9903      	ldr	r1, [sp, #12]
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	dcf2      	bgt.n	8005c3a <_printf_i+0x21e>
 8005c54:	e7eb      	b.n	8005c2e <_printf_i+0x212>
 8005c56:	2500      	movs	r5, #0
 8005c58:	f104 0619 	add.w	r6, r4, #25
 8005c5c:	e7f5      	b.n	8005c4a <_printf_i+0x22e>
 8005c5e:	bf00      	nop
 8005c60:	0800893a 	.word	0x0800893a
 8005c64:	0800894b 	.word	0x0800894b

08005c68 <siprintf>:
 8005c68:	b40e      	push	{r1, r2, r3}
 8005c6a:	b500      	push	{lr}
 8005c6c:	b09c      	sub	sp, #112	; 0x70
 8005c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c70:	9002      	str	r0, [sp, #8]
 8005c72:	9006      	str	r0, [sp, #24]
 8005c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c78:	4809      	ldr	r0, [pc, #36]	; (8005ca0 <siprintf+0x38>)
 8005c7a:	9107      	str	r1, [sp, #28]
 8005c7c:	9104      	str	r1, [sp, #16]
 8005c7e:	4909      	ldr	r1, [pc, #36]	; (8005ca4 <siprintf+0x3c>)
 8005c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c84:	9105      	str	r1, [sp, #20]
 8005c86:	6800      	ldr	r0, [r0, #0]
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	a902      	add	r1, sp, #8
 8005c8c:	f001 fb68 	bl	8007360 <_svfiprintf_r>
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	b01c      	add	sp, #112	; 0x70
 8005c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c9c:	b003      	add	sp, #12
 8005c9e:	4770      	bx	lr
 8005ca0:	2000000c 	.word	0x2000000c
 8005ca4:	ffff0208 	.word	0xffff0208

08005ca8 <quorem>:
 8005ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	6903      	ldr	r3, [r0, #16]
 8005cae:	690c      	ldr	r4, [r1, #16]
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	f2c0 8081 	blt.w	8005dba <quorem+0x112>
 8005cb8:	3c01      	subs	r4, #1
 8005cba:	f101 0814 	add.w	r8, r1, #20
 8005cbe:	f100 0514 	add.w	r5, r0, #20
 8005cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ccc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ce0:	d331      	bcc.n	8005d46 <quorem+0x9e>
 8005ce2:	f04f 0e00 	mov.w	lr, #0
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	46ac      	mov	ip, r5
 8005cea:	46f2      	mov	sl, lr
 8005cec:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cf0:	b293      	uxth	r3, r2
 8005cf2:	fb06 e303 	mla	r3, r6, r3, lr
 8005cf6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	ebaa 0303 	sub.w	r3, sl, r3
 8005d00:	f8dc a000 	ldr.w	sl, [ip]
 8005d04:	0c12      	lsrs	r2, r2, #16
 8005d06:	fa13 f38a 	uxtah	r3, r3, sl
 8005d0a:	fb06 e202 	mla	r2, r6, r2, lr
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	9b00      	ldr	r3, [sp, #0]
 8005d12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d16:	b292      	uxth	r2, r2
 8005d18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d20:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d24:	4581      	cmp	r9, r0
 8005d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d2a:	f84c 3b04 	str.w	r3, [ip], #4
 8005d2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d32:	d2db      	bcs.n	8005cec <quorem+0x44>
 8005d34:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d38:	b92b      	cbnz	r3, 8005d46 <quorem+0x9e>
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	3b04      	subs	r3, #4
 8005d3e:	429d      	cmp	r5, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	d32e      	bcc.n	8005da2 <quorem+0xfa>
 8005d44:	613c      	str	r4, [r7, #16]
 8005d46:	4638      	mov	r0, r7
 8005d48:	f001 f8b6 	bl	8006eb8 <__mcmp>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	db24      	blt.n	8005d9a <quorem+0xf2>
 8005d50:	3601      	adds	r6, #1
 8005d52:	4628      	mov	r0, r5
 8005d54:	f04f 0c00 	mov.w	ip, #0
 8005d58:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d5c:	f8d0 e000 	ldr.w	lr, [r0]
 8005d60:	b293      	uxth	r3, r2
 8005d62:	ebac 0303 	sub.w	r3, ip, r3
 8005d66:	0c12      	lsrs	r2, r2, #16
 8005d68:	fa13 f38e 	uxtah	r3, r3, lr
 8005d6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d7a:	45c1      	cmp	r9, r8
 8005d7c:	f840 3b04 	str.w	r3, [r0], #4
 8005d80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d84:	d2e8      	bcs.n	8005d58 <quorem+0xb0>
 8005d86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d8e:	b922      	cbnz	r2, 8005d9a <quorem+0xf2>
 8005d90:	3b04      	subs	r3, #4
 8005d92:	429d      	cmp	r5, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	d30a      	bcc.n	8005dae <quorem+0x106>
 8005d98:	613c      	str	r4, [r7, #16]
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	b003      	add	sp, #12
 8005d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	3b04      	subs	r3, #4
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	d1cc      	bne.n	8005d44 <quorem+0x9c>
 8005daa:	3c01      	subs	r4, #1
 8005dac:	e7c7      	b.n	8005d3e <quorem+0x96>
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	d1f0      	bne.n	8005d98 <quorem+0xf0>
 8005db6:	3c01      	subs	r4, #1
 8005db8:	e7eb      	b.n	8005d92 <quorem+0xea>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e7ee      	b.n	8005d9c <quorem+0xf4>
	...

08005dc0 <_dtoa_r>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	ed2d 8b04 	vpush	{d8-d9}
 8005dc8:	ec57 6b10 	vmov	r6, r7, d0
 8005dcc:	b093      	sub	sp, #76	; 0x4c
 8005dce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005dd4:	9106      	str	r1, [sp, #24]
 8005dd6:	ee10 aa10 	vmov	sl, s0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8005dde:	930c      	str	r3, [sp, #48]	; 0x30
 8005de0:	46bb      	mov	fp, r7
 8005de2:	b975      	cbnz	r5, 8005e02 <_dtoa_r+0x42>
 8005de4:	2010      	movs	r0, #16
 8005de6:	f000 fddd 	bl	80069a4 <malloc>
 8005dea:	4602      	mov	r2, r0
 8005dec:	6260      	str	r0, [r4, #36]	; 0x24
 8005dee:	b920      	cbnz	r0, 8005dfa <_dtoa_r+0x3a>
 8005df0:	4ba7      	ldr	r3, [pc, #668]	; (8006090 <_dtoa_r+0x2d0>)
 8005df2:	21ea      	movs	r1, #234	; 0xea
 8005df4:	48a7      	ldr	r0, [pc, #668]	; (8006094 <_dtoa_r+0x2d4>)
 8005df6:	f001 fbc3 	bl	8007580 <__assert_func>
 8005dfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dfe:	6005      	str	r5, [r0, #0]
 8005e00:	60c5      	str	r5, [r0, #12]
 8005e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	b151      	cbz	r1, 8005e1e <_dtoa_r+0x5e>
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	604a      	str	r2, [r1, #4]
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	4093      	lsls	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 fe0e 	bl	8006a34 <_Bfree>
 8005e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	1e3b      	subs	r3, r7, #0
 8005e20:	bfaa      	itet	ge
 8005e22:	2300      	movge	r3, #0
 8005e24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e28:	f8c8 3000 	strge.w	r3, [r8]
 8005e2c:	4b9a      	ldr	r3, [pc, #616]	; (8006098 <_dtoa_r+0x2d8>)
 8005e2e:	bfbc      	itt	lt
 8005e30:	2201      	movlt	r2, #1
 8005e32:	f8c8 2000 	strlt.w	r2, [r8]
 8005e36:	ea33 030b 	bics.w	r3, r3, fp
 8005e3a:	d11b      	bne.n	8005e74 <_dtoa_r+0xb4>
 8005e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e48:	4333      	orrs	r3, r6
 8005e4a:	f000 8592 	beq.w	8006972 <_dtoa_r+0xbb2>
 8005e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e50:	b963      	cbnz	r3, 8005e6c <_dtoa_r+0xac>
 8005e52:	4b92      	ldr	r3, [pc, #584]	; (800609c <_dtoa_r+0x2dc>)
 8005e54:	e022      	b.n	8005e9c <_dtoa_r+0xdc>
 8005e56:	4b92      	ldr	r3, [pc, #584]	; (80060a0 <_dtoa_r+0x2e0>)
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	9801      	ldr	r0, [sp, #4]
 8005e62:	b013      	add	sp, #76	; 0x4c
 8005e64:	ecbd 8b04 	vpop	{d8-d9}
 8005e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6c:	4b8b      	ldr	r3, [pc, #556]	; (800609c <_dtoa_r+0x2dc>)
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	3303      	adds	r3, #3
 8005e72:	e7f3      	b.n	8005e5c <_dtoa_r+0x9c>
 8005e74:	2200      	movs	r2, #0
 8005e76:	2300      	movs	r3, #0
 8005e78:	4650      	mov	r0, sl
 8005e7a:	4659      	mov	r1, fp
 8005e7c:	f7fa fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e80:	ec4b ab19 	vmov	d9, sl, fp
 8005e84:	4680      	mov	r8, r0
 8005e86:	b158      	cbz	r0, 8005ea0 <_dtoa_r+0xe0>
 8005e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 856b 	beq.w	800696c <_dtoa_r+0xbac>
 8005e96:	4883      	ldr	r0, [pc, #524]	; (80060a4 <_dtoa_r+0x2e4>)
 8005e98:	6018      	str	r0, [r3, #0]
 8005e9a:	1e43      	subs	r3, r0, #1
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	e7df      	b.n	8005e60 <_dtoa_r+0xa0>
 8005ea0:	ec4b ab10 	vmov	d0, sl, fp
 8005ea4:	aa10      	add	r2, sp, #64	; 0x40
 8005ea6:	a911      	add	r1, sp, #68	; 0x44
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f001 f8ab 	bl	8007004 <__d2b>
 8005eae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005eb2:	ee08 0a10 	vmov	s16, r0
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	f000 8084 	beq.w	8005fc4 <_dtoa_r+0x204>
 8005ebc:	ee19 3a90 	vmov	r3, s19
 8005ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ec4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ec8:	4656      	mov	r6, sl
 8005eca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ed2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ed6:	4b74      	ldr	r3, [pc, #464]	; (80060a8 <_dtoa_r+0x2e8>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4630      	mov	r0, r6
 8005edc:	4639      	mov	r1, r7
 8005ede:	f7fa f9d3 	bl	8000288 <__aeabi_dsub>
 8005ee2:	a365      	add	r3, pc, #404	; (adr r3, 8006078 <_dtoa_r+0x2b8>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa fb86 	bl	80005f8 <__aeabi_dmul>
 8005eec:	a364      	add	r3, pc, #400	; (adr r3, 8006080 <_dtoa_r+0x2c0>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa f9cb 	bl	800028c <__adddf3>
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	4628      	mov	r0, r5
 8005efa:	460f      	mov	r7, r1
 8005efc:	f7fa fb12 	bl	8000524 <__aeabi_i2d>
 8005f00:	a361      	add	r3, pc, #388	; (adr r3, 8006088 <_dtoa_r+0x2c8>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa fb77 	bl	80005f8 <__aeabi_dmul>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4630      	mov	r0, r6
 8005f10:	4639      	mov	r1, r7
 8005f12:	f7fa f9bb 	bl	800028c <__adddf3>
 8005f16:	4606      	mov	r6, r0
 8005f18:	460f      	mov	r7, r1
 8005f1a:	f7fa fe1d 	bl	8000b58 <__aeabi_d2iz>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	9000      	str	r0, [sp, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa fdd8 	bl	8000adc <__aeabi_dcmplt>
 8005f2c:	b150      	cbz	r0, 8005f44 <_dtoa_r+0x184>
 8005f2e:	9800      	ldr	r0, [sp, #0]
 8005f30:	f7fa faf8 	bl	8000524 <__aeabi_i2d>
 8005f34:	4632      	mov	r2, r6
 8005f36:	463b      	mov	r3, r7
 8005f38:	f7fa fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f3c:	b910      	cbnz	r0, 8005f44 <_dtoa_r+0x184>
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	9b00      	ldr	r3, [sp, #0]
 8005f46:	2b16      	cmp	r3, #22
 8005f48:	d85a      	bhi.n	8006000 <_dtoa_r+0x240>
 8005f4a:	9a00      	ldr	r2, [sp, #0]
 8005f4c:	4b57      	ldr	r3, [pc, #348]	; (80060ac <_dtoa_r+0x2ec>)
 8005f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	ec51 0b19 	vmov	r0, r1, d9
 8005f5a:	f7fa fdbf 	bl	8000adc <__aeabi_dcmplt>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d050      	beq.n	8006004 <_dtoa_r+0x244>
 8005f62:	9b00      	ldr	r3, [sp, #0]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f6e:	1b5d      	subs	r5, r3, r5
 8005f70:	1e6b      	subs	r3, r5, #1
 8005f72:	9305      	str	r3, [sp, #20]
 8005f74:	bf45      	ittet	mi
 8005f76:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f7a:	9304      	strmi	r3, [sp, #16]
 8005f7c:	2300      	movpl	r3, #0
 8005f7e:	2300      	movmi	r3, #0
 8005f80:	bf4c      	ite	mi
 8005f82:	9305      	strmi	r3, [sp, #20]
 8005f84:	9304      	strpl	r3, [sp, #16]
 8005f86:	9b00      	ldr	r3, [sp, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	db3d      	blt.n	8006008 <_dtoa_r+0x248>
 8005f8c:	9b05      	ldr	r3, [sp, #20]
 8005f8e:	9a00      	ldr	r2, [sp, #0]
 8005f90:	920a      	str	r2, [sp, #40]	; 0x28
 8005f92:	4413      	add	r3, r2
 8005f94:	9305      	str	r3, [sp, #20]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9307      	str	r3, [sp, #28]
 8005f9a:	9b06      	ldr	r3, [sp, #24]
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	f200 8089 	bhi.w	80060b4 <_dtoa_r+0x2f4>
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	bfc4      	itt	gt
 8005fa6:	3b04      	subgt	r3, #4
 8005fa8:	9306      	strgt	r3, [sp, #24]
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	f1a3 0302 	sub.w	r3, r3, #2
 8005fb0:	bfcc      	ite	gt
 8005fb2:	2500      	movgt	r5, #0
 8005fb4:	2501      	movle	r5, #1
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	f200 8087 	bhi.w	80060ca <_dtoa_r+0x30a>
 8005fbc:	e8df f003 	tbb	[pc, r3]
 8005fc0:	59383a2d 	.word	0x59383a2d
 8005fc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fc8:	441d      	add	r5, r3
 8005fca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	bfc1      	itttt	gt
 8005fd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fda:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fde:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fe2:	bfda      	itte	le
 8005fe4:	f1c3 0320 	rsble	r3, r3, #32
 8005fe8:	fa06 f003 	lslle.w	r0, r6, r3
 8005fec:	4318      	orrgt	r0, r3
 8005fee:	f7fa fa89 	bl	8000504 <__aeabi_ui2d>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ffa:	3d01      	subs	r5, #1
 8005ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8005ffe:	e76a      	b.n	8005ed6 <_dtoa_r+0x116>
 8006000:	2301      	movs	r3, #1
 8006002:	e7b2      	b.n	8005f6a <_dtoa_r+0x1aa>
 8006004:	900b      	str	r0, [sp, #44]	; 0x2c
 8006006:	e7b1      	b.n	8005f6c <_dtoa_r+0x1ac>
 8006008:	9b04      	ldr	r3, [sp, #16]
 800600a:	9a00      	ldr	r2, [sp, #0]
 800600c:	1a9b      	subs	r3, r3, r2
 800600e:	9304      	str	r3, [sp, #16]
 8006010:	4253      	negs	r3, r2
 8006012:	9307      	str	r3, [sp, #28]
 8006014:	2300      	movs	r3, #0
 8006016:	930a      	str	r3, [sp, #40]	; 0x28
 8006018:	e7bf      	b.n	8005f9a <_dtoa_r+0x1da>
 800601a:	2300      	movs	r3, #0
 800601c:	9308      	str	r3, [sp, #32]
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	dc55      	bgt.n	80060d0 <_dtoa_r+0x310>
 8006024:	2301      	movs	r3, #1
 8006026:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800602a:	461a      	mov	r2, r3
 800602c:	9209      	str	r2, [sp, #36]	; 0x24
 800602e:	e00c      	b.n	800604a <_dtoa_r+0x28a>
 8006030:	2301      	movs	r3, #1
 8006032:	e7f3      	b.n	800601c <_dtoa_r+0x25c>
 8006034:	2300      	movs	r3, #0
 8006036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006038:	9308      	str	r3, [sp, #32]
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	4413      	add	r3, r2
 800603e:	9302      	str	r3, [sp, #8]
 8006040:	3301      	adds	r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	bfb8      	it	lt
 8006048:	2301      	movlt	r3, #1
 800604a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800604c:	2200      	movs	r2, #0
 800604e:	6042      	str	r2, [r0, #4]
 8006050:	2204      	movs	r2, #4
 8006052:	f102 0614 	add.w	r6, r2, #20
 8006056:	429e      	cmp	r6, r3
 8006058:	6841      	ldr	r1, [r0, #4]
 800605a:	d93d      	bls.n	80060d8 <_dtoa_r+0x318>
 800605c:	4620      	mov	r0, r4
 800605e:	f000 fca9 	bl	80069b4 <_Balloc>
 8006062:	9001      	str	r0, [sp, #4]
 8006064:	2800      	cmp	r0, #0
 8006066:	d13b      	bne.n	80060e0 <_dtoa_r+0x320>
 8006068:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <_dtoa_r+0x2f0>)
 800606a:	4602      	mov	r2, r0
 800606c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006070:	e6c0      	b.n	8005df4 <_dtoa_r+0x34>
 8006072:	2301      	movs	r3, #1
 8006074:	e7df      	b.n	8006036 <_dtoa_r+0x276>
 8006076:	bf00      	nop
 8006078:	636f4361 	.word	0x636f4361
 800607c:	3fd287a7 	.word	0x3fd287a7
 8006080:	8b60c8b3 	.word	0x8b60c8b3
 8006084:	3fc68a28 	.word	0x3fc68a28
 8006088:	509f79fb 	.word	0x509f79fb
 800608c:	3fd34413 	.word	0x3fd34413
 8006090:	08008969 	.word	0x08008969
 8006094:	08008980 	.word	0x08008980
 8006098:	7ff00000 	.word	0x7ff00000
 800609c:	08008965 	.word	0x08008965
 80060a0:	0800895c 	.word	0x0800895c
 80060a4:	08008939 	.word	0x08008939
 80060a8:	3ff80000 	.word	0x3ff80000
 80060ac:	08008a70 	.word	0x08008a70
 80060b0:	080089db 	.word	0x080089db
 80060b4:	2501      	movs	r5, #1
 80060b6:	2300      	movs	r3, #0
 80060b8:	9306      	str	r3, [sp, #24]
 80060ba:	9508      	str	r5, [sp, #32]
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295
 80060c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2312      	movs	r3, #18
 80060c8:	e7b0      	b.n	800602c <_dtoa_r+0x26c>
 80060ca:	2301      	movs	r3, #1
 80060cc:	9308      	str	r3, [sp, #32]
 80060ce:	e7f5      	b.n	80060bc <_dtoa_r+0x2fc>
 80060d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060d6:	e7b8      	b.n	800604a <_dtoa_r+0x28a>
 80060d8:	3101      	adds	r1, #1
 80060da:	6041      	str	r1, [r0, #4]
 80060dc:	0052      	lsls	r2, r2, #1
 80060de:	e7b8      	b.n	8006052 <_dtoa_r+0x292>
 80060e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e2:	9a01      	ldr	r2, [sp, #4]
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	9b03      	ldr	r3, [sp, #12]
 80060e8:	2b0e      	cmp	r3, #14
 80060ea:	f200 809d 	bhi.w	8006228 <_dtoa_r+0x468>
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	f000 809a 	beq.w	8006228 <_dtoa_r+0x468>
 80060f4:	9b00      	ldr	r3, [sp, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dd32      	ble.n	8006160 <_dtoa_r+0x3a0>
 80060fa:	4ab7      	ldr	r2, [pc, #732]	; (80063d8 <_dtoa_r+0x618>)
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006104:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006108:	9b00      	ldr	r3, [sp, #0]
 800610a:	05d8      	lsls	r0, r3, #23
 800610c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006110:	d516      	bpl.n	8006140 <_dtoa_r+0x380>
 8006112:	4bb2      	ldr	r3, [pc, #712]	; (80063dc <_dtoa_r+0x61c>)
 8006114:	ec51 0b19 	vmov	r0, r1, d9
 8006118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800611c:	f7fa fb96 	bl	800084c <__aeabi_ddiv>
 8006120:	f007 070f 	and.w	r7, r7, #15
 8006124:	4682      	mov	sl, r0
 8006126:	468b      	mov	fp, r1
 8006128:	2503      	movs	r5, #3
 800612a:	4eac      	ldr	r6, [pc, #688]	; (80063dc <_dtoa_r+0x61c>)
 800612c:	b957      	cbnz	r7, 8006144 <_dtoa_r+0x384>
 800612e:	4642      	mov	r2, r8
 8006130:	464b      	mov	r3, r9
 8006132:	4650      	mov	r0, sl
 8006134:	4659      	mov	r1, fp
 8006136:	f7fa fb89 	bl	800084c <__aeabi_ddiv>
 800613a:	4682      	mov	sl, r0
 800613c:	468b      	mov	fp, r1
 800613e:	e028      	b.n	8006192 <_dtoa_r+0x3d2>
 8006140:	2502      	movs	r5, #2
 8006142:	e7f2      	b.n	800612a <_dtoa_r+0x36a>
 8006144:	07f9      	lsls	r1, r7, #31
 8006146:	d508      	bpl.n	800615a <_dtoa_r+0x39a>
 8006148:	4640      	mov	r0, r8
 800614a:	4649      	mov	r1, r9
 800614c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006150:	f7fa fa52 	bl	80005f8 <__aeabi_dmul>
 8006154:	3501      	adds	r5, #1
 8006156:	4680      	mov	r8, r0
 8006158:	4689      	mov	r9, r1
 800615a:	107f      	asrs	r7, r7, #1
 800615c:	3608      	adds	r6, #8
 800615e:	e7e5      	b.n	800612c <_dtoa_r+0x36c>
 8006160:	f000 809b 	beq.w	800629a <_dtoa_r+0x4da>
 8006164:	9b00      	ldr	r3, [sp, #0]
 8006166:	4f9d      	ldr	r7, [pc, #628]	; (80063dc <_dtoa_r+0x61c>)
 8006168:	425e      	negs	r6, r3
 800616a:	4b9b      	ldr	r3, [pc, #620]	; (80063d8 <_dtoa_r+0x618>)
 800616c:	f006 020f 	and.w	r2, r6, #15
 8006170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	ec51 0b19 	vmov	r0, r1, d9
 800617c:	f7fa fa3c 	bl	80005f8 <__aeabi_dmul>
 8006180:	1136      	asrs	r6, r6, #4
 8006182:	4682      	mov	sl, r0
 8006184:	468b      	mov	fp, r1
 8006186:	2300      	movs	r3, #0
 8006188:	2502      	movs	r5, #2
 800618a:	2e00      	cmp	r6, #0
 800618c:	d17a      	bne.n	8006284 <_dtoa_r+0x4c4>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1d3      	bne.n	800613a <_dtoa_r+0x37a>
 8006192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8082 	beq.w	800629e <_dtoa_r+0x4de>
 800619a:	4b91      	ldr	r3, [pc, #580]	; (80063e0 <_dtoa_r+0x620>)
 800619c:	2200      	movs	r2, #0
 800619e:	4650      	mov	r0, sl
 80061a0:	4659      	mov	r1, fp
 80061a2:	f7fa fc9b 	bl	8000adc <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d079      	beq.n	800629e <_dtoa_r+0x4de>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d076      	beq.n	800629e <_dtoa_r+0x4de>
 80061b0:	9b02      	ldr	r3, [sp, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd36      	ble.n	8006224 <_dtoa_r+0x464>
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	4650      	mov	r0, sl
 80061ba:	4659      	mov	r1, fp
 80061bc:	1e5f      	subs	r7, r3, #1
 80061be:	2200      	movs	r2, #0
 80061c0:	4b88      	ldr	r3, [pc, #544]	; (80063e4 <_dtoa_r+0x624>)
 80061c2:	f7fa fa19 	bl	80005f8 <__aeabi_dmul>
 80061c6:	9e02      	ldr	r6, [sp, #8]
 80061c8:	4682      	mov	sl, r0
 80061ca:	468b      	mov	fp, r1
 80061cc:	3501      	adds	r5, #1
 80061ce:	4628      	mov	r0, r5
 80061d0:	f7fa f9a8 	bl	8000524 <__aeabi_i2d>
 80061d4:	4652      	mov	r2, sl
 80061d6:	465b      	mov	r3, fp
 80061d8:	f7fa fa0e 	bl	80005f8 <__aeabi_dmul>
 80061dc:	4b82      	ldr	r3, [pc, #520]	; (80063e8 <_dtoa_r+0x628>)
 80061de:	2200      	movs	r2, #0
 80061e0:	f7fa f854 	bl	800028c <__adddf3>
 80061e4:	46d0      	mov	r8, sl
 80061e6:	46d9      	mov	r9, fp
 80061e8:	4682      	mov	sl, r0
 80061ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061ee:	2e00      	cmp	r6, #0
 80061f0:	d158      	bne.n	80062a4 <_dtoa_r+0x4e4>
 80061f2:	4b7e      	ldr	r3, [pc, #504]	; (80063ec <_dtoa_r+0x62c>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	4640      	mov	r0, r8
 80061f8:	4649      	mov	r1, r9
 80061fa:	f7fa f845 	bl	8000288 <__aeabi_dsub>
 80061fe:	4652      	mov	r2, sl
 8006200:	465b      	mov	r3, fp
 8006202:	4680      	mov	r8, r0
 8006204:	4689      	mov	r9, r1
 8006206:	f7fa fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800620a:	2800      	cmp	r0, #0
 800620c:	f040 8295 	bne.w	800673a <_dtoa_r+0x97a>
 8006210:	4652      	mov	r2, sl
 8006212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006216:	4640      	mov	r0, r8
 8006218:	4649      	mov	r1, r9
 800621a:	f7fa fc5f 	bl	8000adc <__aeabi_dcmplt>
 800621e:	2800      	cmp	r0, #0
 8006220:	f040 8289 	bne.w	8006736 <_dtoa_r+0x976>
 8006224:	ec5b ab19 	vmov	sl, fp, d9
 8006228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800622a:	2b00      	cmp	r3, #0
 800622c:	f2c0 8148 	blt.w	80064c0 <_dtoa_r+0x700>
 8006230:	9a00      	ldr	r2, [sp, #0]
 8006232:	2a0e      	cmp	r2, #14
 8006234:	f300 8144 	bgt.w	80064c0 <_dtoa_r+0x700>
 8006238:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <_dtoa_r+0x618>)
 800623a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800623e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	f280 80d5 	bge.w	80063f4 <_dtoa_r+0x634>
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f300 80d1 	bgt.w	80063f4 <_dtoa_r+0x634>
 8006252:	f040 826f 	bne.w	8006734 <_dtoa_r+0x974>
 8006256:	4b65      	ldr	r3, [pc, #404]	; (80063ec <_dtoa_r+0x62c>)
 8006258:	2200      	movs	r2, #0
 800625a:	4640      	mov	r0, r8
 800625c:	4649      	mov	r1, r9
 800625e:	f7fa f9cb 	bl	80005f8 <__aeabi_dmul>
 8006262:	4652      	mov	r2, sl
 8006264:	465b      	mov	r3, fp
 8006266:	f7fa fc4d 	bl	8000b04 <__aeabi_dcmpge>
 800626a:	9e03      	ldr	r6, [sp, #12]
 800626c:	4637      	mov	r7, r6
 800626e:	2800      	cmp	r0, #0
 8006270:	f040 8245 	bne.w	80066fe <_dtoa_r+0x93e>
 8006274:	9d01      	ldr	r5, [sp, #4]
 8006276:	2331      	movs	r3, #49	; 0x31
 8006278:	f805 3b01 	strb.w	r3, [r5], #1
 800627c:	9b00      	ldr	r3, [sp, #0]
 800627e:	3301      	adds	r3, #1
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	e240      	b.n	8006706 <_dtoa_r+0x946>
 8006284:	07f2      	lsls	r2, r6, #31
 8006286:	d505      	bpl.n	8006294 <_dtoa_r+0x4d4>
 8006288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628c:	f7fa f9b4 	bl	80005f8 <__aeabi_dmul>
 8006290:	3501      	adds	r5, #1
 8006292:	2301      	movs	r3, #1
 8006294:	1076      	asrs	r6, r6, #1
 8006296:	3708      	adds	r7, #8
 8006298:	e777      	b.n	800618a <_dtoa_r+0x3ca>
 800629a:	2502      	movs	r5, #2
 800629c:	e779      	b.n	8006192 <_dtoa_r+0x3d2>
 800629e:	9f00      	ldr	r7, [sp, #0]
 80062a0:	9e03      	ldr	r6, [sp, #12]
 80062a2:	e794      	b.n	80061ce <_dtoa_r+0x40e>
 80062a4:	9901      	ldr	r1, [sp, #4]
 80062a6:	4b4c      	ldr	r3, [pc, #304]	; (80063d8 <_dtoa_r+0x618>)
 80062a8:	4431      	add	r1, r6
 80062aa:	910d      	str	r1, [sp, #52]	; 0x34
 80062ac:	9908      	ldr	r1, [sp, #32]
 80062ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062b6:	2900      	cmp	r1, #0
 80062b8:	d043      	beq.n	8006342 <_dtoa_r+0x582>
 80062ba:	494d      	ldr	r1, [pc, #308]	; (80063f0 <_dtoa_r+0x630>)
 80062bc:	2000      	movs	r0, #0
 80062be:	f7fa fac5 	bl	800084c <__aeabi_ddiv>
 80062c2:	4652      	mov	r2, sl
 80062c4:	465b      	mov	r3, fp
 80062c6:	f7f9 ffdf 	bl	8000288 <__aeabi_dsub>
 80062ca:	9d01      	ldr	r5, [sp, #4]
 80062cc:	4682      	mov	sl, r0
 80062ce:	468b      	mov	fp, r1
 80062d0:	4649      	mov	r1, r9
 80062d2:	4640      	mov	r0, r8
 80062d4:	f7fa fc40 	bl	8000b58 <__aeabi_d2iz>
 80062d8:	4606      	mov	r6, r0
 80062da:	f7fa f923 	bl	8000524 <__aeabi_i2d>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7f9 ffcf 	bl	8000288 <__aeabi_dsub>
 80062ea:	3630      	adds	r6, #48	; 0x30
 80062ec:	f805 6b01 	strb.w	r6, [r5], #1
 80062f0:	4652      	mov	r2, sl
 80062f2:	465b      	mov	r3, fp
 80062f4:	4680      	mov	r8, r0
 80062f6:	4689      	mov	r9, r1
 80062f8:	f7fa fbf0 	bl	8000adc <__aeabi_dcmplt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d163      	bne.n	80063c8 <_dtoa_r+0x608>
 8006300:	4642      	mov	r2, r8
 8006302:	464b      	mov	r3, r9
 8006304:	4936      	ldr	r1, [pc, #216]	; (80063e0 <_dtoa_r+0x620>)
 8006306:	2000      	movs	r0, #0
 8006308:	f7f9 ffbe 	bl	8000288 <__aeabi_dsub>
 800630c:	4652      	mov	r2, sl
 800630e:	465b      	mov	r3, fp
 8006310:	f7fa fbe4 	bl	8000adc <__aeabi_dcmplt>
 8006314:	2800      	cmp	r0, #0
 8006316:	f040 80b5 	bne.w	8006484 <_dtoa_r+0x6c4>
 800631a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800631c:	429d      	cmp	r5, r3
 800631e:	d081      	beq.n	8006224 <_dtoa_r+0x464>
 8006320:	4b30      	ldr	r3, [pc, #192]	; (80063e4 <_dtoa_r+0x624>)
 8006322:	2200      	movs	r2, #0
 8006324:	4650      	mov	r0, sl
 8006326:	4659      	mov	r1, fp
 8006328:	f7fa f966 	bl	80005f8 <__aeabi_dmul>
 800632c:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <_dtoa_r+0x624>)
 800632e:	4682      	mov	sl, r0
 8006330:	468b      	mov	fp, r1
 8006332:	4640      	mov	r0, r8
 8006334:	4649      	mov	r1, r9
 8006336:	2200      	movs	r2, #0
 8006338:	f7fa f95e 	bl	80005f8 <__aeabi_dmul>
 800633c:	4680      	mov	r8, r0
 800633e:	4689      	mov	r9, r1
 8006340:	e7c6      	b.n	80062d0 <_dtoa_r+0x510>
 8006342:	4650      	mov	r0, sl
 8006344:	4659      	mov	r1, fp
 8006346:	f7fa f957 	bl	80005f8 <__aeabi_dmul>
 800634a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800634c:	9d01      	ldr	r5, [sp, #4]
 800634e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006350:	4682      	mov	sl, r0
 8006352:	468b      	mov	fp, r1
 8006354:	4649      	mov	r1, r9
 8006356:	4640      	mov	r0, r8
 8006358:	f7fa fbfe 	bl	8000b58 <__aeabi_d2iz>
 800635c:	4606      	mov	r6, r0
 800635e:	f7fa f8e1 	bl	8000524 <__aeabi_i2d>
 8006362:	3630      	adds	r6, #48	; 0x30
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7f9 ff8c 	bl	8000288 <__aeabi_dsub>
 8006370:	f805 6b01 	strb.w	r6, [r5], #1
 8006374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006376:	429d      	cmp	r5, r3
 8006378:	4680      	mov	r8, r0
 800637a:	4689      	mov	r9, r1
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	d124      	bne.n	80063cc <_dtoa_r+0x60c>
 8006382:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <_dtoa_r+0x630>)
 8006384:	4650      	mov	r0, sl
 8006386:	4659      	mov	r1, fp
 8006388:	f7f9 ff80 	bl	800028c <__adddf3>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7fa fbc0 	bl	8000b18 <__aeabi_dcmpgt>
 8006398:	2800      	cmp	r0, #0
 800639a:	d173      	bne.n	8006484 <_dtoa_r+0x6c4>
 800639c:	4652      	mov	r2, sl
 800639e:	465b      	mov	r3, fp
 80063a0:	4913      	ldr	r1, [pc, #76]	; (80063f0 <_dtoa_r+0x630>)
 80063a2:	2000      	movs	r0, #0
 80063a4:	f7f9 ff70 	bl	8000288 <__aeabi_dsub>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4640      	mov	r0, r8
 80063ae:	4649      	mov	r1, r9
 80063b0:	f7fa fb94 	bl	8000adc <__aeabi_dcmplt>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	f43f af35 	beq.w	8006224 <_dtoa_r+0x464>
 80063ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063bc:	1e6b      	subs	r3, r5, #1
 80063be:	930f      	str	r3, [sp, #60]	; 0x3c
 80063c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d0f8      	beq.n	80063ba <_dtoa_r+0x5fa>
 80063c8:	9700      	str	r7, [sp, #0]
 80063ca:	e049      	b.n	8006460 <_dtoa_r+0x6a0>
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <_dtoa_r+0x624>)
 80063ce:	f7fa f913 	bl	80005f8 <__aeabi_dmul>
 80063d2:	4680      	mov	r8, r0
 80063d4:	4689      	mov	r9, r1
 80063d6:	e7bd      	b.n	8006354 <_dtoa_r+0x594>
 80063d8:	08008a70 	.word	0x08008a70
 80063dc:	08008a48 	.word	0x08008a48
 80063e0:	3ff00000 	.word	0x3ff00000
 80063e4:	40240000 	.word	0x40240000
 80063e8:	401c0000 	.word	0x401c0000
 80063ec:	40140000 	.word	0x40140000
 80063f0:	3fe00000 	.word	0x3fe00000
 80063f4:	9d01      	ldr	r5, [sp, #4]
 80063f6:	4656      	mov	r6, sl
 80063f8:	465f      	mov	r7, fp
 80063fa:	4642      	mov	r2, r8
 80063fc:	464b      	mov	r3, r9
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7fa fa23 	bl	800084c <__aeabi_ddiv>
 8006406:	f7fa fba7 	bl	8000b58 <__aeabi_d2iz>
 800640a:	4682      	mov	sl, r0
 800640c:	f7fa f88a 	bl	8000524 <__aeabi_i2d>
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	f7fa f8f0 	bl	80005f8 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006424:	f7f9 ff30 	bl	8000288 <__aeabi_dsub>
 8006428:	f805 6b01 	strb.w	r6, [r5], #1
 800642c:	9e01      	ldr	r6, [sp, #4]
 800642e:	9f03      	ldr	r7, [sp, #12]
 8006430:	1bae      	subs	r6, r5, r6
 8006432:	42b7      	cmp	r7, r6
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	d135      	bne.n	80064a6 <_dtoa_r+0x6e6>
 800643a:	f7f9 ff27 	bl	800028c <__adddf3>
 800643e:	4642      	mov	r2, r8
 8006440:	464b      	mov	r3, r9
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	f7fa fb67 	bl	8000b18 <__aeabi_dcmpgt>
 800644a:	b9d0      	cbnz	r0, 8006482 <_dtoa_r+0x6c2>
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	4630      	mov	r0, r6
 8006452:	4639      	mov	r1, r7
 8006454:	f7fa fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006458:	b110      	cbz	r0, 8006460 <_dtoa_r+0x6a0>
 800645a:	f01a 0f01 	tst.w	sl, #1
 800645e:	d110      	bne.n	8006482 <_dtoa_r+0x6c2>
 8006460:	4620      	mov	r0, r4
 8006462:	ee18 1a10 	vmov	r1, s16
 8006466:	f000 fae5 	bl	8006a34 <_Bfree>
 800646a:	2300      	movs	r3, #0
 800646c:	9800      	ldr	r0, [sp, #0]
 800646e:	702b      	strb	r3, [r5, #0]
 8006470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006472:	3001      	adds	r0, #1
 8006474:	6018      	str	r0, [r3, #0]
 8006476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006478:	2b00      	cmp	r3, #0
 800647a:	f43f acf1 	beq.w	8005e60 <_dtoa_r+0xa0>
 800647e:	601d      	str	r5, [r3, #0]
 8006480:	e4ee      	b.n	8005e60 <_dtoa_r+0xa0>
 8006482:	9f00      	ldr	r7, [sp, #0]
 8006484:	462b      	mov	r3, r5
 8006486:	461d      	mov	r5, r3
 8006488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800648c:	2a39      	cmp	r2, #57	; 0x39
 800648e:	d106      	bne.n	800649e <_dtoa_r+0x6de>
 8006490:	9a01      	ldr	r2, [sp, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d1f7      	bne.n	8006486 <_dtoa_r+0x6c6>
 8006496:	9901      	ldr	r1, [sp, #4]
 8006498:	2230      	movs	r2, #48	; 0x30
 800649a:	3701      	adds	r7, #1
 800649c:	700a      	strb	r2, [r1, #0]
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	3201      	adds	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e790      	b.n	80063c8 <_dtoa_r+0x608>
 80064a6:	4ba6      	ldr	r3, [pc, #664]	; (8006740 <_dtoa_r+0x980>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	f7fa f8a5 	bl	80005f8 <__aeabi_dmul>
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	4606      	mov	r6, r0
 80064b4:	460f      	mov	r7, r1
 80064b6:	f7fa fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d09d      	beq.n	80063fa <_dtoa_r+0x63a>
 80064be:	e7cf      	b.n	8006460 <_dtoa_r+0x6a0>
 80064c0:	9a08      	ldr	r2, [sp, #32]
 80064c2:	2a00      	cmp	r2, #0
 80064c4:	f000 80d7 	beq.w	8006676 <_dtoa_r+0x8b6>
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	2a01      	cmp	r2, #1
 80064cc:	f300 80ba 	bgt.w	8006644 <_dtoa_r+0x884>
 80064d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	f000 80b2 	beq.w	800663c <_dtoa_r+0x87c>
 80064d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064dc:	9e07      	ldr	r6, [sp, #28]
 80064de:	9d04      	ldr	r5, [sp, #16]
 80064e0:	9a04      	ldr	r2, [sp, #16]
 80064e2:	441a      	add	r2, r3
 80064e4:	9204      	str	r2, [sp, #16]
 80064e6:	9a05      	ldr	r2, [sp, #20]
 80064e8:	2101      	movs	r1, #1
 80064ea:	441a      	add	r2, r3
 80064ec:	4620      	mov	r0, r4
 80064ee:	9205      	str	r2, [sp, #20]
 80064f0:	f000 fb58 	bl	8006ba4 <__i2b>
 80064f4:	4607      	mov	r7, r0
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	dd0c      	ble.n	8006514 <_dtoa_r+0x754>
 80064fa:	9b05      	ldr	r3, [sp, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	dd09      	ble.n	8006514 <_dtoa_r+0x754>
 8006500:	42ab      	cmp	r3, r5
 8006502:	9a04      	ldr	r2, [sp, #16]
 8006504:	bfa8      	it	ge
 8006506:	462b      	movge	r3, r5
 8006508:	1ad2      	subs	r2, r2, r3
 800650a:	9204      	str	r2, [sp, #16]
 800650c:	9a05      	ldr	r2, [sp, #20]
 800650e:	1aed      	subs	r5, r5, r3
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	9305      	str	r3, [sp, #20]
 8006514:	9b07      	ldr	r3, [sp, #28]
 8006516:	b31b      	cbz	r3, 8006560 <_dtoa_r+0x7a0>
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80af 	beq.w	800667e <_dtoa_r+0x8be>
 8006520:	2e00      	cmp	r6, #0
 8006522:	dd13      	ble.n	800654c <_dtoa_r+0x78c>
 8006524:	4639      	mov	r1, r7
 8006526:	4632      	mov	r2, r6
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fbfb 	bl	8006d24 <__pow5mult>
 800652e:	ee18 2a10 	vmov	r2, s16
 8006532:	4601      	mov	r1, r0
 8006534:	4607      	mov	r7, r0
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fb4a 	bl	8006bd0 <__multiply>
 800653c:	ee18 1a10 	vmov	r1, s16
 8006540:	4680      	mov	r8, r0
 8006542:	4620      	mov	r0, r4
 8006544:	f000 fa76 	bl	8006a34 <_Bfree>
 8006548:	ee08 8a10 	vmov	s16, r8
 800654c:	9b07      	ldr	r3, [sp, #28]
 800654e:	1b9a      	subs	r2, r3, r6
 8006550:	d006      	beq.n	8006560 <_dtoa_r+0x7a0>
 8006552:	ee18 1a10 	vmov	r1, s16
 8006556:	4620      	mov	r0, r4
 8006558:	f000 fbe4 	bl	8006d24 <__pow5mult>
 800655c:	ee08 0a10 	vmov	s16, r0
 8006560:	2101      	movs	r1, #1
 8006562:	4620      	mov	r0, r4
 8006564:	f000 fb1e 	bl	8006ba4 <__i2b>
 8006568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656a:	2b00      	cmp	r3, #0
 800656c:	4606      	mov	r6, r0
 800656e:	f340 8088 	ble.w	8006682 <_dtoa_r+0x8c2>
 8006572:	461a      	mov	r2, r3
 8006574:	4601      	mov	r1, r0
 8006576:	4620      	mov	r0, r4
 8006578:	f000 fbd4 	bl	8006d24 <__pow5mult>
 800657c:	9b06      	ldr	r3, [sp, #24]
 800657e:	2b01      	cmp	r3, #1
 8006580:	4606      	mov	r6, r0
 8006582:	f340 8081 	ble.w	8006688 <_dtoa_r+0x8c8>
 8006586:	f04f 0800 	mov.w	r8, #0
 800658a:	6933      	ldr	r3, [r6, #16]
 800658c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006590:	6918      	ldr	r0, [r3, #16]
 8006592:	f000 fab7 	bl	8006b04 <__hi0bits>
 8006596:	f1c0 0020 	rsb	r0, r0, #32
 800659a:	9b05      	ldr	r3, [sp, #20]
 800659c:	4418      	add	r0, r3
 800659e:	f010 001f 	ands.w	r0, r0, #31
 80065a2:	f000 8092 	beq.w	80066ca <_dtoa_r+0x90a>
 80065a6:	f1c0 0320 	rsb	r3, r0, #32
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	f340 808a 	ble.w	80066c4 <_dtoa_r+0x904>
 80065b0:	f1c0 001c 	rsb	r0, r0, #28
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	4403      	add	r3, r0
 80065b8:	9304      	str	r3, [sp, #16]
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	4403      	add	r3, r0
 80065be:	4405      	add	r5, r0
 80065c0:	9305      	str	r3, [sp, #20]
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dd07      	ble.n	80065d8 <_dtoa_r+0x818>
 80065c8:	ee18 1a10 	vmov	r1, s16
 80065cc:	461a      	mov	r2, r3
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fc02 	bl	8006dd8 <__lshift>
 80065d4:	ee08 0a10 	vmov	s16, r0
 80065d8:	9b05      	ldr	r3, [sp, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dd05      	ble.n	80065ea <_dtoa_r+0x82a>
 80065de:	4631      	mov	r1, r6
 80065e0:	461a      	mov	r2, r3
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 fbf8 	bl	8006dd8 <__lshift>
 80065e8:	4606      	mov	r6, r0
 80065ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d06e      	beq.n	80066ce <_dtoa_r+0x90e>
 80065f0:	ee18 0a10 	vmov	r0, s16
 80065f4:	4631      	mov	r1, r6
 80065f6:	f000 fc5f 	bl	8006eb8 <__mcmp>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	da67      	bge.n	80066ce <_dtoa_r+0x90e>
 80065fe:	9b00      	ldr	r3, [sp, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	ee18 1a10 	vmov	r1, s16
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	220a      	movs	r2, #10
 800660a:	2300      	movs	r3, #0
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fa33 	bl	8006a78 <__multadd>
 8006612:	9b08      	ldr	r3, [sp, #32]
 8006614:	ee08 0a10 	vmov	s16, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 81b1 	beq.w	8006980 <_dtoa_r+0xbc0>
 800661e:	2300      	movs	r3, #0
 8006620:	4639      	mov	r1, r7
 8006622:	220a      	movs	r2, #10
 8006624:	4620      	mov	r0, r4
 8006626:	f000 fa27 	bl	8006a78 <__multadd>
 800662a:	9b02      	ldr	r3, [sp, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	4607      	mov	r7, r0
 8006630:	f300 808e 	bgt.w	8006750 <_dtoa_r+0x990>
 8006634:	9b06      	ldr	r3, [sp, #24]
 8006636:	2b02      	cmp	r3, #2
 8006638:	dc51      	bgt.n	80066de <_dtoa_r+0x91e>
 800663a:	e089      	b.n	8006750 <_dtoa_r+0x990>
 800663c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800663e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006642:	e74b      	b.n	80064dc <_dtoa_r+0x71c>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	1e5e      	subs	r6, r3, #1
 8006648:	9b07      	ldr	r3, [sp, #28]
 800664a:	42b3      	cmp	r3, r6
 800664c:	bfbf      	itttt	lt
 800664e:	9b07      	ldrlt	r3, [sp, #28]
 8006650:	9607      	strlt	r6, [sp, #28]
 8006652:	1af2      	sublt	r2, r6, r3
 8006654:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006656:	bfb6      	itet	lt
 8006658:	189b      	addlt	r3, r3, r2
 800665a:	1b9e      	subge	r6, r3, r6
 800665c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800665e:	9b03      	ldr	r3, [sp, #12]
 8006660:	bfb8      	it	lt
 8006662:	2600      	movlt	r6, #0
 8006664:	2b00      	cmp	r3, #0
 8006666:	bfb7      	itett	lt
 8006668:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800666c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006670:	1a9d      	sublt	r5, r3, r2
 8006672:	2300      	movlt	r3, #0
 8006674:	e734      	b.n	80064e0 <_dtoa_r+0x720>
 8006676:	9e07      	ldr	r6, [sp, #28]
 8006678:	9d04      	ldr	r5, [sp, #16]
 800667a:	9f08      	ldr	r7, [sp, #32]
 800667c:	e73b      	b.n	80064f6 <_dtoa_r+0x736>
 800667e:	9a07      	ldr	r2, [sp, #28]
 8006680:	e767      	b.n	8006552 <_dtoa_r+0x792>
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	2b01      	cmp	r3, #1
 8006686:	dc18      	bgt.n	80066ba <_dtoa_r+0x8fa>
 8006688:	f1ba 0f00 	cmp.w	sl, #0
 800668c:	d115      	bne.n	80066ba <_dtoa_r+0x8fa>
 800668e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006692:	b993      	cbnz	r3, 80066ba <_dtoa_r+0x8fa>
 8006694:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006698:	0d1b      	lsrs	r3, r3, #20
 800669a:	051b      	lsls	r3, r3, #20
 800669c:	b183      	cbz	r3, 80066c0 <_dtoa_r+0x900>
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	3301      	adds	r3, #1
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	9b05      	ldr	r3, [sp, #20]
 80066a6:	3301      	adds	r3, #1
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	f04f 0801 	mov.w	r8, #1
 80066ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f af6a 	bne.w	800658a <_dtoa_r+0x7ca>
 80066b6:	2001      	movs	r0, #1
 80066b8:	e76f      	b.n	800659a <_dtoa_r+0x7da>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	e7f6      	b.n	80066ae <_dtoa_r+0x8ee>
 80066c0:	4698      	mov	r8, r3
 80066c2:	e7f4      	b.n	80066ae <_dtoa_r+0x8ee>
 80066c4:	f43f af7d 	beq.w	80065c2 <_dtoa_r+0x802>
 80066c8:	4618      	mov	r0, r3
 80066ca:	301c      	adds	r0, #28
 80066cc:	e772      	b.n	80065b4 <_dtoa_r+0x7f4>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dc37      	bgt.n	8006744 <_dtoa_r+0x984>
 80066d4:	9b06      	ldr	r3, [sp, #24]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	dd34      	ble.n	8006744 <_dtoa_r+0x984>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	9302      	str	r3, [sp, #8]
 80066de:	9b02      	ldr	r3, [sp, #8]
 80066e0:	b96b      	cbnz	r3, 80066fe <_dtoa_r+0x93e>
 80066e2:	4631      	mov	r1, r6
 80066e4:	2205      	movs	r2, #5
 80066e6:	4620      	mov	r0, r4
 80066e8:	f000 f9c6 	bl	8006a78 <__multadd>
 80066ec:	4601      	mov	r1, r0
 80066ee:	4606      	mov	r6, r0
 80066f0:	ee18 0a10 	vmov	r0, s16
 80066f4:	f000 fbe0 	bl	8006eb8 <__mcmp>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f73f adbb 	bgt.w	8006274 <_dtoa_r+0x4b4>
 80066fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006700:	9d01      	ldr	r5, [sp, #4]
 8006702:	43db      	mvns	r3, r3
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	4631      	mov	r1, r6
 800670c:	4620      	mov	r0, r4
 800670e:	f000 f991 	bl	8006a34 <_Bfree>
 8006712:	2f00      	cmp	r7, #0
 8006714:	f43f aea4 	beq.w	8006460 <_dtoa_r+0x6a0>
 8006718:	f1b8 0f00 	cmp.w	r8, #0
 800671c:	d005      	beq.n	800672a <_dtoa_r+0x96a>
 800671e:	45b8      	cmp	r8, r7
 8006720:	d003      	beq.n	800672a <_dtoa_r+0x96a>
 8006722:	4641      	mov	r1, r8
 8006724:	4620      	mov	r0, r4
 8006726:	f000 f985 	bl	8006a34 <_Bfree>
 800672a:	4639      	mov	r1, r7
 800672c:	4620      	mov	r0, r4
 800672e:	f000 f981 	bl	8006a34 <_Bfree>
 8006732:	e695      	b.n	8006460 <_dtoa_r+0x6a0>
 8006734:	2600      	movs	r6, #0
 8006736:	4637      	mov	r7, r6
 8006738:	e7e1      	b.n	80066fe <_dtoa_r+0x93e>
 800673a:	9700      	str	r7, [sp, #0]
 800673c:	4637      	mov	r7, r6
 800673e:	e599      	b.n	8006274 <_dtoa_r+0x4b4>
 8006740:	40240000 	.word	0x40240000
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 80ca 	beq.w	80068e0 <_dtoa_r+0xb20>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	9302      	str	r3, [sp, #8]
 8006750:	2d00      	cmp	r5, #0
 8006752:	dd05      	ble.n	8006760 <_dtoa_r+0x9a0>
 8006754:	4639      	mov	r1, r7
 8006756:	462a      	mov	r2, r5
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fb3d 	bl	8006dd8 <__lshift>
 800675e:	4607      	mov	r7, r0
 8006760:	f1b8 0f00 	cmp.w	r8, #0
 8006764:	d05b      	beq.n	800681e <_dtoa_r+0xa5e>
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4620      	mov	r0, r4
 800676a:	f000 f923 	bl	80069b4 <_Balloc>
 800676e:	4605      	mov	r5, r0
 8006770:	b928      	cbnz	r0, 800677e <_dtoa_r+0x9be>
 8006772:	4b87      	ldr	r3, [pc, #540]	; (8006990 <_dtoa_r+0xbd0>)
 8006774:	4602      	mov	r2, r0
 8006776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800677a:	f7ff bb3b 	b.w	8005df4 <_dtoa_r+0x34>
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	3202      	adds	r2, #2
 8006782:	0092      	lsls	r2, r2, #2
 8006784:	f107 010c 	add.w	r1, r7, #12
 8006788:	300c      	adds	r0, #12
 800678a:	f7fe fded 	bl	8005368 <memcpy>
 800678e:	2201      	movs	r2, #1
 8006790:	4629      	mov	r1, r5
 8006792:	4620      	mov	r0, r4
 8006794:	f000 fb20 	bl	8006dd8 <__lshift>
 8006798:	9b01      	ldr	r3, [sp, #4]
 800679a:	f103 0901 	add.w	r9, r3, #1
 800679e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	9305      	str	r3, [sp, #20]
 80067a6:	f00a 0301 	and.w	r3, sl, #1
 80067aa:	46b8      	mov	r8, r7
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	4607      	mov	r7, r0
 80067b0:	4631      	mov	r1, r6
 80067b2:	ee18 0a10 	vmov	r0, s16
 80067b6:	f7ff fa77 	bl	8005ca8 <quorem>
 80067ba:	4641      	mov	r1, r8
 80067bc:	9002      	str	r0, [sp, #8]
 80067be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067c2:	ee18 0a10 	vmov	r0, s16
 80067c6:	f000 fb77 	bl	8006eb8 <__mcmp>
 80067ca:	463a      	mov	r2, r7
 80067cc:	9003      	str	r0, [sp, #12]
 80067ce:	4631      	mov	r1, r6
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fb8d 	bl	8006ef0 <__mdiff>
 80067d6:	68c2      	ldr	r2, [r0, #12]
 80067d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80067dc:	4605      	mov	r5, r0
 80067de:	bb02      	cbnz	r2, 8006822 <_dtoa_r+0xa62>
 80067e0:	4601      	mov	r1, r0
 80067e2:	ee18 0a10 	vmov	r0, s16
 80067e6:	f000 fb67 	bl	8006eb8 <__mcmp>
 80067ea:	4602      	mov	r2, r0
 80067ec:	4629      	mov	r1, r5
 80067ee:	4620      	mov	r0, r4
 80067f0:	9207      	str	r2, [sp, #28]
 80067f2:	f000 f91f 	bl	8006a34 <_Bfree>
 80067f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067fa:	ea43 0102 	orr.w	r1, r3, r2
 80067fe:	9b04      	ldr	r3, [sp, #16]
 8006800:	430b      	orrs	r3, r1
 8006802:	464d      	mov	r5, r9
 8006804:	d10f      	bne.n	8006826 <_dtoa_r+0xa66>
 8006806:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800680a:	d02a      	beq.n	8006862 <_dtoa_r+0xaa2>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd02      	ble.n	8006818 <_dtoa_r+0xa58>
 8006812:	9b02      	ldr	r3, [sp, #8]
 8006814:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006818:	f88b a000 	strb.w	sl, [fp]
 800681c:	e775      	b.n	800670a <_dtoa_r+0x94a>
 800681e:	4638      	mov	r0, r7
 8006820:	e7ba      	b.n	8006798 <_dtoa_r+0x9d8>
 8006822:	2201      	movs	r2, #1
 8006824:	e7e2      	b.n	80067ec <_dtoa_r+0xa2c>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	db04      	blt.n	8006836 <_dtoa_r+0xa76>
 800682c:	9906      	ldr	r1, [sp, #24]
 800682e:	430b      	orrs	r3, r1
 8006830:	9904      	ldr	r1, [sp, #16]
 8006832:	430b      	orrs	r3, r1
 8006834:	d122      	bne.n	800687c <_dtoa_r+0xabc>
 8006836:	2a00      	cmp	r2, #0
 8006838:	ddee      	ble.n	8006818 <_dtoa_r+0xa58>
 800683a:	ee18 1a10 	vmov	r1, s16
 800683e:	2201      	movs	r2, #1
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fac9 	bl	8006dd8 <__lshift>
 8006846:	4631      	mov	r1, r6
 8006848:	ee08 0a10 	vmov	s16, r0
 800684c:	f000 fb34 	bl	8006eb8 <__mcmp>
 8006850:	2800      	cmp	r0, #0
 8006852:	dc03      	bgt.n	800685c <_dtoa_r+0xa9c>
 8006854:	d1e0      	bne.n	8006818 <_dtoa_r+0xa58>
 8006856:	f01a 0f01 	tst.w	sl, #1
 800685a:	d0dd      	beq.n	8006818 <_dtoa_r+0xa58>
 800685c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006860:	d1d7      	bne.n	8006812 <_dtoa_r+0xa52>
 8006862:	2339      	movs	r3, #57	; 0x39
 8006864:	f88b 3000 	strb.w	r3, [fp]
 8006868:	462b      	mov	r3, r5
 800686a:	461d      	mov	r5, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006872:	2a39      	cmp	r2, #57	; 0x39
 8006874:	d071      	beq.n	800695a <_dtoa_r+0xb9a>
 8006876:	3201      	adds	r2, #1
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e746      	b.n	800670a <_dtoa_r+0x94a>
 800687c:	2a00      	cmp	r2, #0
 800687e:	dd07      	ble.n	8006890 <_dtoa_r+0xad0>
 8006880:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006884:	d0ed      	beq.n	8006862 <_dtoa_r+0xaa2>
 8006886:	f10a 0301 	add.w	r3, sl, #1
 800688a:	f88b 3000 	strb.w	r3, [fp]
 800688e:	e73c      	b.n	800670a <_dtoa_r+0x94a>
 8006890:	9b05      	ldr	r3, [sp, #20]
 8006892:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006896:	4599      	cmp	r9, r3
 8006898:	d047      	beq.n	800692a <_dtoa_r+0xb6a>
 800689a:	ee18 1a10 	vmov	r1, s16
 800689e:	2300      	movs	r3, #0
 80068a0:	220a      	movs	r2, #10
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 f8e8 	bl	8006a78 <__multadd>
 80068a8:	45b8      	cmp	r8, r7
 80068aa:	ee08 0a10 	vmov	s16, r0
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	f04f 020a 	mov.w	r2, #10
 80068b6:	4641      	mov	r1, r8
 80068b8:	4620      	mov	r0, r4
 80068ba:	d106      	bne.n	80068ca <_dtoa_r+0xb0a>
 80068bc:	f000 f8dc 	bl	8006a78 <__multadd>
 80068c0:	4680      	mov	r8, r0
 80068c2:	4607      	mov	r7, r0
 80068c4:	f109 0901 	add.w	r9, r9, #1
 80068c8:	e772      	b.n	80067b0 <_dtoa_r+0x9f0>
 80068ca:	f000 f8d5 	bl	8006a78 <__multadd>
 80068ce:	4639      	mov	r1, r7
 80068d0:	4680      	mov	r8, r0
 80068d2:	2300      	movs	r3, #0
 80068d4:	220a      	movs	r2, #10
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 f8ce 	bl	8006a78 <__multadd>
 80068dc:	4607      	mov	r7, r0
 80068de:	e7f1      	b.n	80068c4 <_dtoa_r+0xb04>
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	9302      	str	r3, [sp, #8]
 80068e4:	9d01      	ldr	r5, [sp, #4]
 80068e6:	ee18 0a10 	vmov	r0, s16
 80068ea:	4631      	mov	r1, r6
 80068ec:	f7ff f9dc 	bl	8005ca8 <quorem>
 80068f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	f805 ab01 	strb.w	sl, [r5], #1
 80068fa:	1aea      	subs	r2, r5, r3
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	4293      	cmp	r3, r2
 8006900:	dd09      	ble.n	8006916 <_dtoa_r+0xb56>
 8006902:	ee18 1a10 	vmov	r1, s16
 8006906:	2300      	movs	r3, #0
 8006908:	220a      	movs	r2, #10
 800690a:	4620      	mov	r0, r4
 800690c:	f000 f8b4 	bl	8006a78 <__multadd>
 8006910:	ee08 0a10 	vmov	s16, r0
 8006914:	e7e7      	b.n	80068e6 <_dtoa_r+0xb26>
 8006916:	9b02      	ldr	r3, [sp, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	bfc8      	it	gt
 800691c:	461d      	movgt	r5, r3
 800691e:	9b01      	ldr	r3, [sp, #4]
 8006920:	bfd8      	it	le
 8006922:	2501      	movle	r5, #1
 8006924:	441d      	add	r5, r3
 8006926:	f04f 0800 	mov.w	r8, #0
 800692a:	ee18 1a10 	vmov	r1, s16
 800692e:	2201      	movs	r2, #1
 8006930:	4620      	mov	r0, r4
 8006932:	f000 fa51 	bl	8006dd8 <__lshift>
 8006936:	4631      	mov	r1, r6
 8006938:	ee08 0a10 	vmov	s16, r0
 800693c:	f000 fabc 	bl	8006eb8 <__mcmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	dc91      	bgt.n	8006868 <_dtoa_r+0xaa8>
 8006944:	d102      	bne.n	800694c <_dtoa_r+0xb8c>
 8006946:	f01a 0f01 	tst.w	sl, #1
 800694a:	d18d      	bne.n	8006868 <_dtoa_r+0xaa8>
 800694c:	462b      	mov	r3, r5
 800694e:	461d      	mov	r5, r3
 8006950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006954:	2a30      	cmp	r2, #48	; 0x30
 8006956:	d0fa      	beq.n	800694e <_dtoa_r+0xb8e>
 8006958:	e6d7      	b.n	800670a <_dtoa_r+0x94a>
 800695a:	9a01      	ldr	r2, [sp, #4]
 800695c:	429a      	cmp	r2, r3
 800695e:	d184      	bne.n	800686a <_dtoa_r+0xaaa>
 8006960:	9b00      	ldr	r3, [sp, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	2331      	movs	r3, #49	; 0x31
 8006968:	7013      	strb	r3, [r2, #0]
 800696a:	e6ce      	b.n	800670a <_dtoa_r+0x94a>
 800696c:	4b09      	ldr	r3, [pc, #36]	; (8006994 <_dtoa_r+0xbd4>)
 800696e:	f7ff ba95 	b.w	8005e9c <_dtoa_r+0xdc>
 8006972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006974:	2b00      	cmp	r3, #0
 8006976:	f47f aa6e 	bne.w	8005e56 <_dtoa_r+0x96>
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <_dtoa_r+0xbd8>)
 800697c:	f7ff ba8e 	b.w	8005e9c <_dtoa_r+0xdc>
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	dcae      	bgt.n	80068e4 <_dtoa_r+0xb24>
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	2b02      	cmp	r3, #2
 800698a:	f73f aea8 	bgt.w	80066de <_dtoa_r+0x91e>
 800698e:	e7a9      	b.n	80068e4 <_dtoa_r+0xb24>
 8006990:	080089db 	.word	0x080089db
 8006994:	08008938 	.word	0x08008938
 8006998:	0800895c 	.word	0x0800895c

0800699c <_localeconv_r>:
 800699c:	4800      	ldr	r0, [pc, #0]	; (80069a0 <_localeconv_r+0x4>)
 800699e:	4770      	bx	lr
 80069a0:	20000160 	.word	0x20000160

080069a4 <malloc>:
 80069a4:	4b02      	ldr	r3, [pc, #8]	; (80069b0 <malloc+0xc>)
 80069a6:	4601      	mov	r1, r0
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	f000 bc09 	b.w	80071c0 <_malloc_r>
 80069ae:	bf00      	nop
 80069b0:	2000000c 	.word	0x2000000c

080069b4 <_Balloc>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069b8:	4604      	mov	r4, r0
 80069ba:	460d      	mov	r5, r1
 80069bc:	b976      	cbnz	r6, 80069dc <_Balloc+0x28>
 80069be:	2010      	movs	r0, #16
 80069c0:	f7ff fff0 	bl	80069a4 <malloc>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6260      	str	r0, [r4, #36]	; 0x24
 80069c8:	b920      	cbnz	r0, 80069d4 <_Balloc+0x20>
 80069ca:	4b18      	ldr	r3, [pc, #96]	; (8006a2c <_Balloc+0x78>)
 80069cc:	4818      	ldr	r0, [pc, #96]	; (8006a30 <_Balloc+0x7c>)
 80069ce:	2166      	movs	r1, #102	; 0x66
 80069d0:	f000 fdd6 	bl	8007580 <__assert_func>
 80069d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d8:	6006      	str	r6, [r0, #0]
 80069da:	60c6      	str	r6, [r0, #12]
 80069dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069de:	68f3      	ldr	r3, [r6, #12]
 80069e0:	b183      	cbz	r3, 8006a04 <_Balloc+0x50>
 80069e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ea:	b9b8      	cbnz	r0, 8006a1c <_Balloc+0x68>
 80069ec:	2101      	movs	r1, #1
 80069ee:	fa01 f605 	lsl.w	r6, r1, r5
 80069f2:	1d72      	adds	r2, r6, #5
 80069f4:	0092      	lsls	r2, r2, #2
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fb60 	bl	80070bc <_calloc_r>
 80069fc:	b160      	cbz	r0, 8006a18 <_Balloc+0x64>
 80069fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a02:	e00e      	b.n	8006a22 <_Balloc+0x6e>
 8006a04:	2221      	movs	r2, #33	; 0x21
 8006a06:	2104      	movs	r1, #4
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fb57 	bl	80070bc <_calloc_r>
 8006a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a10:	60f0      	str	r0, [r6, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e4      	bne.n	80069e2 <_Balloc+0x2e>
 8006a18:	2000      	movs	r0, #0
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	6802      	ldr	r2, [r0, #0]
 8006a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a22:	2300      	movs	r3, #0
 8006a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a28:	e7f7      	b.n	8006a1a <_Balloc+0x66>
 8006a2a:	bf00      	nop
 8006a2c:	08008969 	.word	0x08008969
 8006a30:	080089ec 	.word	0x080089ec

08006a34 <_Bfree>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a38:	4605      	mov	r5, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	b976      	cbnz	r6, 8006a5c <_Bfree+0x28>
 8006a3e:	2010      	movs	r0, #16
 8006a40:	f7ff ffb0 	bl	80069a4 <malloc>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6268      	str	r0, [r5, #36]	; 0x24
 8006a48:	b920      	cbnz	r0, 8006a54 <_Bfree+0x20>
 8006a4a:	4b09      	ldr	r3, [pc, #36]	; (8006a70 <_Bfree+0x3c>)
 8006a4c:	4809      	ldr	r0, [pc, #36]	; (8006a74 <_Bfree+0x40>)
 8006a4e:	218a      	movs	r1, #138	; 0x8a
 8006a50:	f000 fd96 	bl	8007580 <__assert_func>
 8006a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a58:	6006      	str	r6, [r0, #0]
 8006a5a:	60c6      	str	r6, [r0, #12]
 8006a5c:	b13c      	cbz	r4, 8006a6e <_Bfree+0x3a>
 8006a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a60:	6862      	ldr	r2, [r4, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a68:	6021      	str	r1, [r4, #0]
 8006a6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	08008969 	.word	0x08008969
 8006a74:	080089ec 	.word	0x080089ec

08006a78 <__multadd>:
 8006a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	690d      	ldr	r5, [r1, #16]
 8006a7e:	4607      	mov	r7, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	461e      	mov	r6, r3
 8006a84:	f101 0c14 	add.w	ip, r1, #20
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a8e:	b299      	uxth	r1, r3
 8006a90:	fb02 6101 	mla	r1, r2, r1, r6
 8006a94:	0c1e      	lsrs	r6, r3, #16
 8006a96:	0c0b      	lsrs	r3, r1, #16
 8006a98:	fb02 3306 	mla	r3, r2, r6, r3
 8006a9c:	b289      	uxth	r1, r1
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aa4:	4285      	cmp	r5, r0
 8006aa6:	f84c 1b04 	str.w	r1, [ip], #4
 8006aaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aae:	dcec      	bgt.n	8006a8a <__multadd+0x12>
 8006ab0:	b30e      	cbz	r6, 8006af6 <__multadd+0x7e>
 8006ab2:	68a3      	ldr	r3, [r4, #8]
 8006ab4:	42ab      	cmp	r3, r5
 8006ab6:	dc19      	bgt.n	8006aec <__multadd+0x74>
 8006ab8:	6861      	ldr	r1, [r4, #4]
 8006aba:	4638      	mov	r0, r7
 8006abc:	3101      	adds	r1, #1
 8006abe:	f7ff ff79 	bl	80069b4 <_Balloc>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	b928      	cbnz	r0, 8006ad2 <__multadd+0x5a>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <__multadd+0x84>)
 8006aca:	480d      	ldr	r0, [pc, #52]	; (8006b00 <__multadd+0x88>)
 8006acc:	21b5      	movs	r1, #181	; 0xb5
 8006ace:	f000 fd57 	bl	8007580 <__assert_func>
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	3202      	adds	r2, #2
 8006ad6:	f104 010c 	add.w	r1, r4, #12
 8006ada:	0092      	lsls	r2, r2, #2
 8006adc:	300c      	adds	r0, #12
 8006ade:	f7fe fc43 	bl	8005368 <memcpy>
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f7ff ffa5 	bl	8006a34 <_Bfree>
 8006aea:	4644      	mov	r4, r8
 8006aec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af0:	3501      	adds	r5, #1
 8006af2:	615e      	str	r6, [r3, #20]
 8006af4:	6125      	str	r5, [r4, #16]
 8006af6:	4620      	mov	r0, r4
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	080089db 	.word	0x080089db
 8006b00:	080089ec 	.word	0x080089ec

08006b04 <__hi0bits>:
 8006b04:	0c03      	lsrs	r3, r0, #16
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	b9d3      	cbnz	r3, 8006b40 <__hi0bits+0x3c>
 8006b0a:	0400      	lsls	r0, r0, #16
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b12:	bf04      	itt	eq
 8006b14:	0200      	lsleq	r0, r0, #8
 8006b16:	3308      	addeq	r3, #8
 8006b18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b1c:	bf04      	itt	eq
 8006b1e:	0100      	lsleq	r0, r0, #4
 8006b20:	3304      	addeq	r3, #4
 8006b22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b26:	bf04      	itt	eq
 8006b28:	0080      	lsleq	r0, r0, #2
 8006b2a:	3302      	addeq	r3, #2
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	db05      	blt.n	8006b3c <__hi0bits+0x38>
 8006b30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b34:	f103 0301 	add.w	r3, r3, #1
 8006b38:	bf08      	it	eq
 8006b3a:	2320      	moveq	r3, #32
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	4770      	bx	lr
 8006b40:	2300      	movs	r3, #0
 8006b42:	e7e4      	b.n	8006b0e <__hi0bits+0xa>

08006b44 <__lo0bits>:
 8006b44:	6803      	ldr	r3, [r0, #0]
 8006b46:	f013 0207 	ands.w	r2, r3, #7
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	d00b      	beq.n	8006b66 <__lo0bits+0x22>
 8006b4e:	07da      	lsls	r2, r3, #31
 8006b50:	d423      	bmi.n	8006b9a <__lo0bits+0x56>
 8006b52:	0798      	lsls	r0, r3, #30
 8006b54:	bf49      	itett	mi
 8006b56:	085b      	lsrmi	r3, r3, #1
 8006b58:	089b      	lsrpl	r3, r3, #2
 8006b5a:	2001      	movmi	r0, #1
 8006b5c:	600b      	strmi	r3, [r1, #0]
 8006b5e:	bf5c      	itt	pl
 8006b60:	600b      	strpl	r3, [r1, #0]
 8006b62:	2002      	movpl	r0, #2
 8006b64:	4770      	bx	lr
 8006b66:	b298      	uxth	r0, r3
 8006b68:	b9a8      	cbnz	r0, 8006b96 <__lo0bits+0x52>
 8006b6a:	0c1b      	lsrs	r3, r3, #16
 8006b6c:	2010      	movs	r0, #16
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	b90a      	cbnz	r2, 8006b76 <__lo0bits+0x32>
 8006b72:	3008      	adds	r0, #8
 8006b74:	0a1b      	lsrs	r3, r3, #8
 8006b76:	071a      	lsls	r2, r3, #28
 8006b78:	bf04      	itt	eq
 8006b7a:	091b      	lsreq	r3, r3, #4
 8006b7c:	3004      	addeq	r0, #4
 8006b7e:	079a      	lsls	r2, r3, #30
 8006b80:	bf04      	itt	eq
 8006b82:	089b      	lsreq	r3, r3, #2
 8006b84:	3002      	addeq	r0, #2
 8006b86:	07da      	lsls	r2, r3, #31
 8006b88:	d403      	bmi.n	8006b92 <__lo0bits+0x4e>
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	f100 0001 	add.w	r0, r0, #1
 8006b90:	d005      	beq.n	8006b9e <__lo0bits+0x5a>
 8006b92:	600b      	str	r3, [r1, #0]
 8006b94:	4770      	bx	lr
 8006b96:	4610      	mov	r0, r2
 8006b98:	e7e9      	b.n	8006b6e <__lo0bits+0x2a>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	4770      	bx	lr
 8006b9e:	2020      	movs	r0, #32
 8006ba0:	4770      	bx	lr
	...

08006ba4 <__i2b>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	2101      	movs	r1, #1
 8006baa:	f7ff ff03 	bl	80069b4 <_Balloc>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	b928      	cbnz	r0, 8006bbe <__i2b+0x1a>
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <__i2b+0x24>)
 8006bb4:	4805      	ldr	r0, [pc, #20]	; (8006bcc <__i2b+0x28>)
 8006bb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bba:	f000 fce1 	bl	8007580 <__assert_func>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	6144      	str	r4, [r0, #20]
 8006bc2:	6103      	str	r3, [r0, #16]
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	bf00      	nop
 8006bc8:	080089db 	.word	0x080089db
 8006bcc:	080089ec 	.word	0x080089ec

08006bd0 <__multiply>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4691      	mov	r9, r2
 8006bd6:	690a      	ldr	r2, [r1, #16]
 8006bd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	bfb8      	it	lt
 8006be0:	460b      	movlt	r3, r1
 8006be2:	460c      	mov	r4, r1
 8006be4:	bfbc      	itt	lt
 8006be6:	464c      	movlt	r4, r9
 8006be8:	4699      	movlt	r9, r3
 8006bea:	6927      	ldr	r7, [r4, #16]
 8006bec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bf0:	68a3      	ldr	r3, [r4, #8]
 8006bf2:	6861      	ldr	r1, [r4, #4]
 8006bf4:	eb07 060a 	add.w	r6, r7, sl
 8006bf8:	42b3      	cmp	r3, r6
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	bfb8      	it	lt
 8006bfe:	3101      	addlt	r1, #1
 8006c00:	f7ff fed8 	bl	80069b4 <_Balloc>
 8006c04:	b930      	cbnz	r0, 8006c14 <__multiply+0x44>
 8006c06:	4602      	mov	r2, r0
 8006c08:	4b44      	ldr	r3, [pc, #272]	; (8006d1c <__multiply+0x14c>)
 8006c0a:	4845      	ldr	r0, [pc, #276]	; (8006d20 <__multiply+0x150>)
 8006c0c:	f240 115d 	movw	r1, #349	; 0x15d
 8006c10:	f000 fcb6 	bl	8007580 <__assert_func>
 8006c14:	f100 0514 	add.w	r5, r0, #20
 8006c18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4543      	cmp	r3, r8
 8006c22:	d321      	bcc.n	8006c68 <__multiply+0x98>
 8006c24:	f104 0314 	add.w	r3, r4, #20
 8006c28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c2c:	f109 0314 	add.w	r3, r9, #20
 8006c30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c34:	9202      	str	r2, [sp, #8]
 8006c36:	1b3a      	subs	r2, r7, r4
 8006c38:	3a15      	subs	r2, #21
 8006c3a:	f022 0203 	bic.w	r2, r2, #3
 8006c3e:	3204      	adds	r2, #4
 8006c40:	f104 0115 	add.w	r1, r4, #21
 8006c44:	428f      	cmp	r7, r1
 8006c46:	bf38      	it	cc
 8006c48:	2204      	movcc	r2, #4
 8006c4a:	9201      	str	r2, [sp, #4]
 8006c4c:	9a02      	ldr	r2, [sp, #8]
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d80c      	bhi.n	8006c6e <__multiply+0x9e>
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	dd03      	ble.n	8006c60 <__multiply+0x90>
 8006c58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d05a      	beq.n	8006d16 <__multiply+0x146>
 8006c60:	6106      	str	r6, [r0, #16]
 8006c62:	b005      	add	sp, #20
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	f843 2b04 	str.w	r2, [r3], #4
 8006c6c:	e7d8      	b.n	8006c20 <__multiply+0x50>
 8006c6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c72:	f1ba 0f00 	cmp.w	sl, #0
 8006c76:	d024      	beq.n	8006cc2 <__multiply+0xf2>
 8006c78:	f104 0e14 	add.w	lr, r4, #20
 8006c7c:	46a9      	mov	r9, r5
 8006c7e:	f04f 0c00 	mov.w	ip, #0
 8006c82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c86:	f8d9 1000 	ldr.w	r1, [r9]
 8006c8a:	fa1f fb82 	uxth.w	fp, r2
 8006c8e:	b289      	uxth	r1, r1
 8006c90:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c98:	f8d9 2000 	ldr.w	r2, [r9]
 8006c9c:	4461      	add	r1, ip
 8006c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ca2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ca6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006caa:	b289      	uxth	r1, r1
 8006cac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cb0:	4577      	cmp	r7, lr
 8006cb2:	f849 1b04 	str.w	r1, [r9], #4
 8006cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cba:	d8e2      	bhi.n	8006c82 <__multiply+0xb2>
 8006cbc:	9a01      	ldr	r2, [sp, #4]
 8006cbe:	f845 c002 	str.w	ip, [r5, r2]
 8006cc2:	9a03      	ldr	r2, [sp, #12]
 8006cc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	f1b9 0f00 	cmp.w	r9, #0
 8006cce:	d020      	beq.n	8006d12 <__multiply+0x142>
 8006cd0:	6829      	ldr	r1, [r5, #0]
 8006cd2:	f104 0c14 	add.w	ip, r4, #20
 8006cd6:	46ae      	mov	lr, r5
 8006cd8:	f04f 0a00 	mov.w	sl, #0
 8006cdc:	f8bc b000 	ldrh.w	fp, [ip]
 8006ce0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ce4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ce8:	4492      	add	sl, r2
 8006cea:	b289      	uxth	r1, r1
 8006cec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006cf0:	f84e 1b04 	str.w	r1, [lr], #4
 8006cf4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006cf8:	f8be 1000 	ldrh.w	r1, [lr]
 8006cfc:	0c12      	lsrs	r2, r2, #16
 8006cfe:	fb09 1102 	mla	r1, r9, r2, r1
 8006d02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d06:	4567      	cmp	r7, ip
 8006d08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d0c:	d8e6      	bhi.n	8006cdc <__multiply+0x10c>
 8006d0e:	9a01      	ldr	r2, [sp, #4]
 8006d10:	50a9      	str	r1, [r5, r2]
 8006d12:	3504      	adds	r5, #4
 8006d14:	e79a      	b.n	8006c4c <__multiply+0x7c>
 8006d16:	3e01      	subs	r6, #1
 8006d18:	e79c      	b.n	8006c54 <__multiply+0x84>
 8006d1a:	bf00      	nop
 8006d1c:	080089db 	.word	0x080089db
 8006d20:	080089ec 	.word	0x080089ec

08006d24 <__pow5mult>:
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	4615      	mov	r5, r2
 8006d2a:	f012 0203 	ands.w	r2, r2, #3
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	d007      	beq.n	8006d44 <__pow5mult+0x20>
 8006d34:	4c25      	ldr	r4, [pc, #148]	; (8006dcc <__pow5mult+0xa8>)
 8006d36:	3a01      	subs	r2, #1
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d3e:	f7ff fe9b 	bl	8006a78 <__multadd>
 8006d42:	4607      	mov	r7, r0
 8006d44:	10ad      	asrs	r5, r5, #2
 8006d46:	d03d      	beq.n	8006dc4 <__pow5mult+0xa0>
 8006d48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d4a:	b97c      	cbnz	r4, 8006d6c <__pow5mult+0x48>
 8006d4c:	2010      	movs	r0, #16
 8006d4e:	f7ff fe29 	bl	80069a4 <malloc>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6270      	str	r0, [r6, #36]	; 0x24
 8006d56:	b928      	cbnz	r0, 8006d64 <__pow5mult+0x40>
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <__pow5mult+0xac>)
 8006d5a:	481e      	ldr	r0, [pc, #120]	; (8006dd4 <__pow5mult+0xb0>)
 8006d5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d60:	f000 fc0e 	bl	8007580 <__assert_func>
 8006d64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d68:	6004      	str	r4, [r0, #0]
 8006d6a:	60c4      	str	r4, [r0, #12]
 8006d6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d74:	b94c      	cbnz	r4, 8006d8a <__pow5mult+0x66>
 8006d76:	f240 2171 	movw	r1, #625	; 0x271
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f7ff ff12 	bl	8006ba4 <__i2b>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d86:	4604      	mov	r4, r0
 8006d88:	6003      	str	r3, [r0, #0]
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	07eb      	lsls	r3, r5, #31
 8006d90:	d50a      	bpl.n	8006da8 <__pow5mult+0x84>
 8006d92:	4639      	mov	r1, r7
 8006d94:	4622      	mov	r2, r4
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ff1a 	bl	8006bd0 <__multiply>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4680      	mov	r8, r0
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7ff fe47 	bl	8006a34 <_Bfree>
 8006da6:	4647      	mov	r7, r8
 8006da8:	106d      	asrs	r5, r5, #1
 8006daa:	d00b      	beq.n	8006dc4 <__pow5mult+0xa0>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	b938      	cbnz	r0, 8006dc0 <__pow5mult+0x9c>
 8006db0:	4622      	mov	r2, r4
 8006db2:	4621      	mov	r1, r4
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7ff ff0b 	bl	8006bd0 <__multiply>
 8006dba:	6020      	str	r0, [r4, #0]
 8006dbc:	f8c0 9000 	str.w	r9, [r0]
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	e7e4      	b.n	8006d8e <__pow5mult+0x6a>
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dca:	bf00      	nop
 8006dcc:	08008b38 	.word	0x08008b38
 8006dd0:	08008969 	.word	0x08008969
 8006dd4:	080089ec 	.word	0x080089ec

08006dd8 <__lshift>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	460c      	mov	r4, r1
 8006dde:	6849      	ldr	r1, [r1, #4]
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	4607      	mov	r7, r0
 8006dea:	4691      	mov	r9, r2
 8006dec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006df0:	f108 0601 	add.w	r6, r8, #1
 8006df4:	42b3      	cmp	r3, r6
 8006df6:	db0b      	blt.n	8006e10 <__lshift+0x38>
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f7ff fddb 	bl	80069b4 <_Balloc>
 8006dfe:	4605      	mov	r5, r0
 8006e00:	b948      	cbnz	r0, 8006e16 <__lshift+0x3e>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4b2a      	ldr	r3, [pc, #168]	; (8006eb0 <__lshift+0xd8>)
 8006e06:	482b      	ldr	r0, [pc, #172]	; (8006eb4 <__lshift+0xdc>)
 8006e08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e0c:	f000 fbb8 	bl	8007580 <__assert_func>
 8006e10:	3101      	adds	r1, #1
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	e7ee      	b.n	8006df4 <__lshift+0x1c>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f100 0114 	add.w	r1, r0, #20
 8006e1c:	f100 0210 	add.w	r2, r0, #16
 8006e20:	4618      	mov	r0, r3
 8006e22:	4553      	cmp	r3, sl
 8006e24:	db37      	blt.n	8006e96 <__lshift+0xbe>
 8006e26:	6920      	ldr	r0, [r4, #16]
 8006e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e2c:	f104 0314 	add.w	r3, r4, #20
 8006e30:	f019 091f 	ands.w	r9, r9, #31
 8006e34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e3c:	d02f      	beq.n	8006e9e <__lshift+0xc6>
 8006e3e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e42:	468a      	mov	sl, r1
 8006e44:	f04f 0c00 	mov.w	ip, #0
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	fa02 f209 	lsl.w	r2, r2, r9
 8006e4e:	ea42 020c 	orr.w	r2, r2, ip
 8006e52:	f84a 2b04 	str.w	r2, [sl], #4
 8006e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5a:	4298      	cmp	r0, r3
 8006e5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e60:	d8f2      	bhi.n	8006e48 <__lshift+0x70>
 8006e62:	1b03      	subs	r3, r0, r4
 8006e64:	3b15      	subs	r3, #21
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	f104 0215 	add.w	r2, r4, #21
 8006e70:	4290      	cmp	r0, r2
 8006e72:	bf38      	it	cc
 8006e74:	2304      	movcc	r3, #4
 8006e76:	f841 c003 	str.w	ip, [r1, r3]
 8006e7a:	f1bc 0f00 	cmp.w	ip, #0
 8006e7e:	d001      	beq.n	8006e84 <__lshift+0xac>
 8006e80:	f108 0602 	add.w	r6, r8, #2
 8006e84:	3e01      	subs	r6, #1
 8006e86:	4638      	mov	r0, r7
 8006e88:	612e      	str	r6, [r5, #16]
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	f7ff fdd2 	bl	8006a34 <_Bfree>
 8006e90:	4628      	mov	r0, r5
 8006e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e96:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	e7c1      	b.n	8006e22 <__lshift+0x4a>
 8006e9e:	3904      	subs	r1, #4
 8006ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ea8:	4298      	cmp	r0, r3
 8006eaa:	d8f9      	bhi.n	8006ea0 <__lshift+0xc8>
 8006eac:	e7ea      	b.n	8006e84 <__lshift+0xac>
 8006eae:	bf00      	nop
 8006eb0:	080089db 	.word	0x080089db
 8006eb4:	080089ec 	.word	0x080089ec

08006eb8 <__mcmp>:
 8006eb8:	b530      	push	{r4, r5, lr}
 8006eba:	6902      	ldr	r2, [r0, #16]
 8006ebc:	690c      	ldr	r4, [r1, #16]
 8006ebe:	1b12      	subs	r2, r2, r4
 8006ec0:	d10e      	bne.n	8006ee0 <__mcmp+0x28>
 8006ec2:	f100 0314 	add.w	r3, r0, #20
 8006ec6:	3114      	adds	r1, #20
 8006ec8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ecc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ed0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ed4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ed8:	42a5      	cmp	r5, r4
 8006eda:	d003      	beq.n	8006ee4 <__mcmp+0x2c>
 8006edc:	d305      	bcc.n	8006eea <__mcmp+0x32>
 8006ede:	2201      	movs	r2, #1
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	4283      	cmp	r3, r0
 8006ee6:	d3f3      	bcc.n	8006ed0 <__mcmp+0x18>
 8006ee8:	e7fa      	b.n	8006ee0 <__mcmp+0x28>
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	e7f7      	b.n	8006ee0 <__mcmp+0x28>

08006ef0 <__mdiff>:
 8006ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	4611      	mov	r1, r2
 8006efa:	4620      	mov	r0, r4
 8006efc:	4690      	mov	r8, r2
 8006efe:	f7ff ffdb 	bl	8006eb8 <__mcmp>
 8006f02:	1e05      	subs	r5, r0, #0
 8006f04:	d110      	bne.n	8006f28 <__mdiff+0x38>
 8006f06:	4629      	mov	r1, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff fd53 	bl	80069b4 <_Balloc>
 8006f0e:	b930      	cbnz	r0, 8006f1e <__mdiff+0x2e>
 8006f10:	4b3a      	ldr	r3, [pc, #232]	; (8006ffc <__mdiff+0x10c>)
 8006f12:	4602      	mov	r2, r0
 8006f14:	f240 2132 	movw	r1, #562	; 0x232
 8006f18:	4839      	ldr	r0, [pc, #228]	; (8007000 <__mdiff+0x110>)
 8006f1a:	f000 fb31 	bl	8007580 <__assert_func>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f28:	bfa4      	itt	ge
 8006f2a:	4643      	movge	r3, r8
 8006f2c:	46a0      	movge	r8, r4
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f34:	bfa6      	itte	ge
 8006f36:	461c      	movge	r4, r3
 8006f38:	2500      	movge	r5, #0
 8006f3a:	2501      	movlt	r5, #1
 8006f3c:	f7ff fd3a 	bl	80069b4 <_Balloc>
 8006f40:	b920      	cbnz	r0, 8006f4c <__mdiff+0x5c>
 8006f42:	4b2e      	ldr	r3, [pc, #184]	; (8006ffc <__mdiff+0x10c>)
 8006f44:	4602      	mov	r2, r0
 8006f46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f4a:	e7e5      	b.n	8006f18 <__mdiff+0x28>
 8006f4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f50:	6926      	ldr	r6, [r4, #16]
 8006f52:	60c5      	str	r5, [r0, #12]
 8006f54:	f104 0914 	add.w	r9, r4, #20
 8006f58:	f108 0514 	add.w	r5, r8, #20
 8006f5c:	f100 0e14 	add.w	lr, r0, #20
 8006f60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f68:	f108 0210 	add.w	r2, r8, #16
 8006f6c:	46f2      	mov	sl, lr
 8006f6e:	2100      	movs	r1, #0
 8006f70:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f78:	fa1f f883 	uxth.w	r8, r3
 8006f7c:	fa11 f18b 	uxtah	r1, r1, fp
 8006f80:	0c1b      	lsrs	r3, r3, #16
 8006f82:	eba1 0808 	sub.w	r8, r1, r8
 8006f86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f8e:	fa1f f888 	uxth.w	r8, r8
 8006f92:	1419      	asrs	r1, r3, #16
 8006f94:	454e      	cmp	r6, r9
 8006f96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f9a:	f84a 3b04 	str.w	r3, [sl], #4
 8006f9e:	d8e7      	bhi.n	8006f70 <__mdiff+0x80>
 8006fa0:	1b33      	subs	r3, r6, r4
 8006fa2:	3b15      	subs	r3, #21
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	3304      	adds	r3, #4
 8006faa:	3415      	adds	r4, #21
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	bf38      	it	cc
 8006fb0:	2304      	movcc	r3, #4
 8006fb2:	441d      	add	r5, r3
 8006fb4:	4473      	add	r3, lr
 8006fb6:	469e      	mov	lr, r3
 8006fb8:	462e      	mov	r6, r5
 8006fba:	4566      	cmp	r6, ip
 8006fbc:	d30e      	bcc.n	8006fdc <__mdiff+0xec>
 8006fbe:	f10c 0203 	add.w	r2, ip, #3
 8006fc2:	1b52      	subs	r2, r2, r5
 8006fc4:	f022 0203 	bic.w	r2, r2, #3
 8006fc8:	3d03      	subs	r5, #3
 8006fca:	45ac      	cmp	ip, r5
 8006fcc:	bf38      	it	cc
 8006fce:	2200      	movcc	r2, #0
 8006fd0:	441a      	add	r2, r3
 8006fd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fd6:	b17b      	cbz	r3, 8006ff8 <__mdiff+0x108>
 8006fd8:	6107      	str	r7, [r0, #16]
 8006fda:	e7a3      	b.n	8006f24 <__mdiff+0x34>
 8006fdc:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fe0:	fa11 f288 	uxtah	r2, r1, r8
 8006fe4:	1414      	asrs	r4, r2, #16
 8006fe6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fea:	b292      	uxth	r2, r2
 8006fec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ff0:	f84e 2b04 	str.w	r2, [lr], #4
 8006ff4:	1421      	asrs	r1, r4, #16
 8006ff6:	e7e0      	b.n	8006fba <__mdiff+0xca>
 8006ff8:	3f01      	subs	r7, #1
 8006ffa:	e7ea      	b.n	8006fd2 <__mdiff+0xe2>
 8006ffc:	080089db 	.word	0x080089db
 8007000:	080089ec 	.word	0x080089ec

08007004 <__d2b>:
 8007004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007008:	4689      	mov	r9, r1
 800700a:	2101      	movs	r1, #1
 800700c:	ec57 6b10 	vmov	r6, r7, d0
 8007010:	4690      	mov	r8, r2
 8007012:	f7ff fccf 	bl	80069b4 <_Balloc>
 8007016:	4604      	mov	r4, r0
 8007018:	b930      	cbnz	r0, 8007028 <__d2b+0x24>
 800701a:	4602      	mov	r2, r0
 800701c:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <__d2b+0xb0>)
 800701e:	4826      	ldr	r0, [pc, #152]	; (80070b8 <__d2b+0xb4>)
 8007020:	f240 310a 	movw	r1, #778	; 0x30a
 8007024:	f000 faac 	bl	8007580 <__assert_func>
 8007028:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800702c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007030:	bb35      	cbnz	r5, 8007080 <__d2b+0x7c>
 8007032:	2e00      	cmp	r6, #0
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	d028      	beq.n	800708a <__d2b+0x86>
 8007038:	4668      	mov	r0, sp
 800703a:	9600      	str	r6, [sp, #0]
 800703c:	f7ff fd82 	bl	8006b44 <__lo0bits>
 8007040:	9900      	ldr	r1, [sp, #0]
 8007042:	b300      	cbz	r0, 8007086 <__d2b+0x82>
 8007044:	9a01      	ldr	r2, [sp, #4]
 8007046:	f1c0 0320 	rsb	r3, r0, #32
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	430b      	orrs	r3, r1
 8007050:	40c2      	lsrs	r2, r0
 8007052:	6163      	str	r3, [r4, #20]
 8007054:	9201      	str	r2, [sp, #4]
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	61a3      	str	r3, [r4, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	bf14      	ite	ne
 800705e:	2202      	movne	r2, #2
 8007060:	2201      	moveq	r2, #1
 8007062:	6122      	str	r2, [r4, #16]
 8007064:	b1d5      	cbz	r5, 800709c <__d2b+0x98>
 8007066:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800706a:	4405      	add	r5, r0
 800706c:	f8c9 5000 	str.w	r5, [r9]
 8007070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007074:	f8c8 0000 	str.w	r0, [r8]
 8007078:	4620      	mov	r0, r4
 800707a:	b003      	add	sp, #12
 800707c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007084:	e7d5      	b.n	8007032 <__d2b+0x2e>
 8007086:	6161      	str	r1, [r4, #20]
 8007088:	e7e5      	b.n	8007056 <__d2b+0x52>
 800708a:	a801      	add	r0, sp, #4
 800708c:	f7ff fd5a 	bl	8006b44 <__lo0bits>
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	6163      	str	r3, [r4, #20]
 8007094:	2201      	movs	r2, #1
 8007096:	6122      	str	r2, [r4, #16]
 8007098:	3020      	adds	r0, #32
 800709a:	e7e3      	b.n	8007064 <__d2b+0x60>
 800709c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070a4:	f8c9 0000 	str.w	r0, [r9]
 80070a8:	6918      	ldr	r0, [r3, #16]
 80070aa:	f7ff fd2b 	bl	8006b04 <__hi0bits>
 80070ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070b2:	e7df      	b.n	8007074 <__d2b+0x70>
 80070b4:	080089db 	.word	0x080089db
 80070b8:	080089ec 	.word	0x080089ec

080070bc <_calloc_r>:
 80070bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070be:	fba1 2402 	umull	r2, r4, r1, r2
 80070c2:	b94c      	cbnz	r4, 80070d8 <_calloc_r+0x1c>
 80070c4:	4611      	mov	r1, r2
 80070c6:	9201      	str	r2, [sp, #4]
 80070c8:	f000 f87a 	bl	80071c0 <_malloc_r>
 80070cc:	9a01      	ldr	r2, [sp, #4]
 80070ce:	4605      	mov	r5, r0
 80070d0:	b930      	cbnz	r0, 80070e0 <_calloc_r+0x24>
 80070d2:	4628      	mov	r0, r5
 80070d4:	b003      	add	sp, #12
 80070d6:	bd30      	pop	{r4, r5, pc}
 80070d8:	220c      	movs	r2, #12
 80070da:	6002      	str	r2, [r0, #0]
 80070dc:	2500      	movs	r5, #0
 80070de:	e7f8      	b.n	80070d2 <_calloc_r+0x16>
 80070e0:	4621      	mov	r1, r4
 80070e2:	f7fe f94f 	bl	8005384 <memset>
 80070e6:	e7f4      	b.n	80070d2 <_calloc_r+0x16>

080070e8 <_free_r>:
 80070e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ea:	2900      	cmp	r1, #0
 80070ec:	d044      	beq.n	8007178 <_free_r+0x90>
 80070ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f2:	9001      	str	r0, [sp, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f1a1 0404 	sub.w	r4, r1, #4
 80070fa:	bfb8      	it	lt
 80070fc:	18e4      	addlt	r4, r4, r3
 80070fe:	f000 fa9b 	bl	8007638 <__malloc_lock>
 8007102:	4a1e      	ldr	r2, [pc, #120]	; (800717c <_free_r+0x94>)
 8007104:	9801      	ldr	r0, [sp, #4]
 8007106:	6813      	ldr	r3, [r2, #0]
 8007108:	b933      	cbnz	r3, 8007118 <_free_r+0x30>
 800710a:	6063      	str	r3, [r4, #4]
 800710c:	6014      	str	r4, [r2, #0]
 800710e:	b003      	add	sp, #12
 8007110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007114:	f000 ba96 	b.w	8007644 <__malloc_unlock>
 8007118:	42a3      	cmp	r3, r4
 800711a:	d908      	bls.n	800712e <_free_r+0x46>
 800711c:	6825      	ldr	r5, [r4, #0]
 800711e:	1961      	adds	r1, r4, r5
 8007120:	428b      	cmp	r3, r1
 8007122:	bf01      	itttt	eq
 8007124:	6819      	ldreq	r1, [r3, #0]
 8007126:	685b      	ldreq	r3, [r3, #4]
 8007128:	1949      	addeq	r1, r1, r5
 800712a:	6021      	streq	r1, [r4, #0]
 800712c:	e7ed      	b.n	800710a <_free_r+0x22>
 800712e:	461a      	mov	r2, r3
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	b10b      	cbz	r3, 8007138 <_free_r+0x50>
 8007134:	42a3      	cmp	r3, r4
 8007136:	d9fa      	bls.n	800712e <_free_r+0x46>
 8007138:	6811      	ldr	r1, [r2, #0]
 800713a:	1855      	adds	r5, r2, r1
 800713c:	42a5      	cmp	r5, r4
 800713e:	d10b      	bne.n	8007158 <_free_r+0x70>
 8007140:	6824      	ldr	r4, [r4, #0]
 8007142:	4421      	add	r1, r4
 8007144:	1854      	adds	r4, r2, r1
 8007146:	42a3      	cmp	r3, r4
 8007148:	6011      	str	r1, [r2, #0]
 800714a:	d1e0      	bne.n	800710e <_free_r+0x26>
 800714c:	681c      	ldr	r4, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	6053      	str	r3, [r2, #4]
 8007152:	4421      	add	r1, r4
 8007154:	6011      	str	r1, [r2, #0]
 8007156:	e7da      	b.n	800710e <_free_r+0x26>
 8007158:	d902      	bls.n	8007160 <_free_r+0x78>
 800715a:	230c      	movs	r3, #12
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	e7d6      	b.n	800710e <_free_r+0x26>
 8007160:	6825      	ldr	r5, [r4, #0]
 8007162:	1961      	adds	r1, r4, r5
 8007164:	428b      	cmp	r3, r1
 8007166:	bf04      	itt	eq
 8007168:	6819      	ldreq	r1, [r3, #0]
 800716a:	685b      	ldreq	r3, [r3, #4]
 800716c:	6063      	str	r3, [r4, #4]
 800716e:	bf04      	itt	eq
 8007170:	1949      	addeq	r1, r1, r5
 8007172:	6021      	streq	r1, [r4, #0]
 8007174:	6054      	str	r4, [r2, #4]
 8007176:	e7ca      	b.n	800710e <_free_r+0x26>
 8007178:	b003      	add	sp, #12
 800717a:	bd30      	pop	{r4, r5, pc}
 800717c:	200004e4 	.word	0x200004e4

08007180 <sbrk_aligned>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4e0e      	ldr	r6, [pc, #56]	; (80071bc <sbrk_aligned+0x3c>)
 8007184:	460c      	mov	r4, r1
 8007186:	6831      	ldr	r1, [r6, #0]
 8007188:	4605      	mov	r5, r0
 800718a:	b911      	cbnz	r1, 8007192 <sbrk_aligned+0x12>
 800718c:	f000 f9e8 	bl	8007560 <_sbrk_r>
 8007190:	6030      	str	r0, [r6, #0]
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f000 f9e3 	bl	8007560 <_sbrk_r>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d00a      	beq.n	80071b4 <sbrk_aligned+0x34>
 800719e:	1cc4      	adds	r4, r0, #3
 80071a0:	f024 0403 	bic.w	r4, r4, #3
 80071a4:	42a0      	cmp	r0, r4
 80071a6:	d007      	beq.n	80071b8 <sbrk_aligned+0x38>
 80071a8:	1a21      	subs	r1, r4, r0
 80071aa:	4628      	mov	r0, r5
 80071ac:	f000 f9d8 	bl	8007560 <_sbrk_r>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d101      	bne.n	80071b8 <sbrk_aligned+0x38>
 80071b4:	f04f 34ff 	mov.w	r4, #4294967295
 80071b8:	4620      	mov	r0, r4
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	200004e8 	.word	0x200004e8

080071c0 <_malloc_r>:
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	1ccd      	adds	r5, r1, #3
 80071c6:	f025 0503 	bic.w	r5, r5, #3
 80071ca:	3508      	adds	r5, #8
 80071cc:	2d0c      	cmp	r5, #12
 80071ce:	bf38      	it	cc
 80071d0:	250c      	movcc	r5, #12
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	4607      	mov	r7, r0
 80071d6:	db01      	blt.n	80071dc <_malloc_r+0x1c>
 80071d8:	42a9      	cmp	r1, r5
 80071da:	d905      	bls.n	80071e8 <_malloc_r+0x28>
 80071dc:	230c      	movs	r3, #12
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	2600      	movs	r6, #0
 80071e2:	4630      	mov	r0, r6
 80071e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e8:	4e2e      	ldr	r6, [pc, #184]	; (80072a4 <_malloc_r+0xe4>)
 80071ea:	f000 fa25 	bl	8007638 <__malloc_lock>
 80071ee:	6833      	ldr	r3, [r6, #0]
 80071f0:	461c      	mov	r4, r3
 80071f2:	bb34      	cbnz	r4, 8007242 <_malloc_r+0x82>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4638      	mov	r0, r7
 80071f8:	f7ff ffc2 	bl	8007180 <sbrk_aligned>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	4604      	mov	r4, r0
 8007200:	d14d      	bne.n	800729e <_malloc_r+0xde>
 8007202:	6834      	ldr	r4, [r6, #0]
 8007204:	4626      	mov	r6, r4
 8007206:	2e00      	cmp	r6, #0
 8007208:	d140      	bne.n	800728c <_malloc_r+0xcc>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	4631      	mov	r1, r6
 800720e:	4638      	mov	r0, r7
 8007210:	eb04 0803 	add.w	r8, r4, r3
 8007214:	f000 f9a4 	bl	8007560 <_sbrk_r>
 8007218:	4580      	cmp	r8, r0
 800721a:	d13a      	bne.n	8007292 <_malloc_r+0xd2>
 800721c:	6821      	ldr	r1, [r4, #0]
 800721e:	3503      	adds	r5, #3
 8007220:	1a6d      	subs	r5, r5, r1
 8007222:	f025 0503 	bic.w	r5, r5, #3
 8007226:	3508      	adds	r5, #8
 8007228:	2d0c      	cmp	r5, #12
 800722a:	bf38      	it	cc
 800722c:	250c      	movcc	r5, #12
 800722e:	4629      	mov	r1, r5
 8007230:	4638      	mov	r0, r7
 8007232:	f7ff ffa5 	bl	8007180 <sbrk_aligned>
 8007236:	3001      	adds	r0, #1
 8007238:	d02b      	beq.n	8007292 <_malloc_r+0xd2>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	442b      	add	r3, r5
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	e00e      	b.n	8007260 <_malloc_r+0xa0>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	1b52      	subs	r2, r2, r5
 8007246:	d41e      	bmi.n	8007286 <_malloc_r+0xc6>
 8007248:	2a0b      	cmp	r2, #11
 800724a:	d916      	bls.n	800727a <_malloc_r+0xba>
 800724c:	1961      	adds	r1, r4, r5
 800724e:	42a3      	cmp	r3, r4
 8007250:	6025      	str	r5, [r4, #0]
 8007252:	bf18      	it	ne
 8007254:	6059      	strne	r1, [r3, #4]
 8007256:	6863      	ldr	r3, [r4, #4]
 8007258:	bf08      	it	eq
 800725a:	6031      	streq	r1, [r6, #0]
 800725c:	5162      	str	r2, [r4, r5]
 800725e:	604b      	str	r3, [r1, #4]
 8007260:	4638      	mov	r0, r7
 8007262:	f104 060b 	add.w	r6, r4, #11
 8007266:	f000 f9ed 	bl	8007644 <__malloc_unlock>
 800726a:	f026 0607 	bic.w	r6, r6, #7
 800726e:	1d23      	adds	r3, r4, #4
 8007270:	1af2      	subs	r2, r6, r3
 8007272:	d0b6      	beq.n	80071e2 <_malloc_r+0x22>
 8007274:	1b9b      	subs	r3, r3, r6
 8007276:	50a3      	str	r3, [r4, r2]
 8007278:	e7b3      	b.n	80071e2 <_malloc_r+0x22>
 800727a:	6862      	ldr	r2, [r4, #4]
 800727c:	42a3      	cmp	r3, r4
 800727e:	bf0c      	ite	eq
 8007280:	6032      	streq	r2, [r6, #0]
 8007282:	605a      	strne	r2, [r3, #4]
 8007284:	e7ec      	b.n	8007260 <_malloc_r+0xa0>
 8007286:	4623      	mov	r3, r4
 8007288:	6864      	ldr	r4, [r4, #4]
 800728a:	e7b2      	b.n	80071f2 <_malloc_r+0x32>
 800728c:	4634      	mov	r4, r6
 800728e:	6876      	ldr	r6, [r6, #4]
 8007290:	e7b9      	b.n	8007206 <_malloc_r+0x46>
 8007292:	230c      	movs	r3, #12
 8007294:	603b      	str	r3, [r7, #0]
 8007296:	4638      	mov	r0, r7
 8007298:	f000 f9d4 	bl	8007644 <__malloc_unlock>
 800729c:	e7a1      	b.n	80071e2 <_malloc_r+0x22>
 800729e:	6025      	str	r5, [r4, #0]
 80072a0:	e7de      	b.n	8007260 <_malloc_r+0xa0>
 80072a2:	bf00      	nop
 80072a4:	200004e4 	.word	0x200004e4

080072a8 <__ssputs_r>:
 80072a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ac:	688e      	ldr	r6, [r1, #8]
 80072ae:	429e      	cmp	r6, r3
 80072b0:	4682      	mov	sl, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	4690      	mov	r8, r2
 80072b6:	461f      	mov	r7, r3
 80072b8:	d838      	bhi.n	800732c <__ssputs_r+0x84>
 80072ba:	898a      	ldrh	r2, [r1, #12]
 80072bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072c0:	d032      	beq.n	8007328 <__ssputs_r+0x80>
 80072c2:	6825      	ldr	r5, [r4, #0]
 80072c4:	6909      	ldr	r1, [r1, #16]
 80072c6:	eba5 0901 	sub.w	r9, r5, r1
 80072ca:	6965      	ldr	r5, [r4, #20]
 80072cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072d4:	3301      	adds	r3, #1
 80072d6:	444b      	add	r3, r9
 80072d8:	106d      	asrs	r5, r5, #1
 80072da:	429d      	cmp	r5, r3
 80072dc:	bf38      	it	cc
 80072de:	461d      	movcc	r5, r3
 80072e0:	0553      	lsls	r3, r2, #21
 80072e2:	d531      	bpl.n	8007348 <__ssputs_r+0xa0>
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7ff ff6b 	bl	80071c0 <_malloc_r>
 80072ea:	4606      	mov	r6, r0
 80072ec:	b950      	cbnz	r0, 8007304 <__ssputs_r+0x5c>
 80072ee:	230c      	movs	r3, #12
 80072f0:	f8ca 3000 	str.w	r3, [sl]
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007304:	6921      	ldr	r1, [r4, #16]
 8007306:	464a      	mov	r2, r9
 8007308:	f7fe f82e 	bl	8005368 <memcpy>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	6126      	str	r6, [r4, #16]
 800731a:	6165      	str	r5, [r4, #20]
 800731c:	444e      	add	r6, r9
 800731e:	eba5 0509 	sub.w	r5, r5, r9
 8007322:	6026      	str	r6, [r4, #0]
 8007324:	60a5      	str	r5, [r4, #8]
 8007326:	463e      	mov	r6, r7
 8007328:	42be      	cmp	r6, r7
 800732a:	d900      	bls.n	800732e <__ssputs_r+0x86>
 800732c:	463e      	mov	r6, r7
 800732e:	6820      	ldr	r0, [r4, #0]
 8007330:	4632      	mov	r2, r6
 8007332:	4641      	mov	r1, r8
 8007334:	f000 f966 	bl	8007604 <memmove>
 8007338:	68a3      	ldr	r3, [r4, #8]
 800733a:	1b9b      	subs	r3, r3, r6
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	4433      	add	r3, r6
 8007342:	6023      	str	r3, [r4, #0]
 8007344:	2000      	movs	r0, #0
 8007346:	e7db      	b.n	8007300 <__ssputs_r+0x58>
 8007348:	462a      	mov	r2, r5
 800734a:	f000 f981 	bl	8007650 <_realloc_r>
 800734e:	4606      	mov	r6, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	d1e1      	bne.n	8007318 <__ssputs_r+0x70>
 8007354:	6921      	ldr	r1, [r4, #16]
 8007356:	4650      	mov	r0, sl
 8007358:	f7ff fec6 	bl	80070e8 <_free_r>
 800735c:	e7c7      	b.n	80072ee <__ssputs_r+0x46>
	...

08007360 <_svfiprintf_r>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	4698      	mov	r8, r3
 8007366:	898b      	ldrh	r3, [r1, #12]
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	b09d      	sub	sp, #116	; 0x74
 800736c:	4607      	mov	r7, r0
 800736e:	460d      	mov	r5, r1
 8007370:	4614      	mov	r4, r2
 8007372:	d50e      	bpl.n	8007392 <_svfiprintf_r+0x32>
 8007374:	690b      	ldr	r3, [r1, #16]
 8007376:	b963      	cbnz	r3, 8007392 <_svfiprintf_r+0x32>
 8007378:	2140      	movs	r1, #64	; 0x40
 800737a:	f7ff ff21 	bl	80071c0 <_malloc_r>
 800737e:	6028      	str	r0, [r5, #0]
 8007380:	6128      	str	r0, [r5, #16]
 8007382:	b920      	cbnz	r0, 800738e <_svfiprintf_r+0x2e>
 8007384:	230c      	movs	r3, #12
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	e0d1      	b.n	8007532 <_svfiprintf_r+0x1d2>
 800738e:	2340      	movs	r3, #64	; 0x40
 8007390:	616b      	str	r3, [r5, #20]
 8007392:	2300      	movs	r3, #0
 8007394:	9309      	str	r3, [sp, #36]	; 0x24
 8007396:	2320      	movs	r3, #32
 8007398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800739c:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a0:	2330      	movs	r3, #48	; 0x30
 80073a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800754c <_svfiprintf_r+0x1ec>
 80073a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073aa:	f04f 0901 	mov.w	r9, #1
 80073ae:	4623      	mov	r3, r4
 80073b0:	469a      	mov	sl, r3
 80073b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073b6:	b10a      	cbz	r2, 80073bc <_svfiprintf_r+0x5c>
 80073b8:	2a25      	cmp	r2, #37	; 0x25
 80073ba:	d1f9      	bne.n	80073b0 <_svfiprintf_r+0x50>
 80073bc:	ebba 0b04 	subs.w	fp, sl, r4
 80073c0:	d00b      	beq.n	80073da <_svfiprintf_r+0x7a>
 80073c2:	465b      	mov	r3, fp
 80073c4:	4622      	mov	r2, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	4638      	mov	r0, r7
 80073ca:	f7ff ff6d 	bl	80072a8 <__ssputs_r>
 80073ce:	3001      	adds	r0, #1
 80073d0:	f000 80aa 	beq.w	8007528 <_svfiprintf_r+0x1c8>
 80073d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073d6:	445a      	add	r2, fp
 80073d8:	9209      	str	r2, [sp, #36]	; 0x24
 80073da:	f89a 3000 	ldrb.w	r3, [sl]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80a2 	beq.w	8007528 <_svfiprintf_r+0x1c8>
 80073e4:	2300      	movs	r3, #0
 80073e6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ee:	f10a 0a01 	add.w	sl, sl, #1
 80073f2:	9304      	str	r3, [sp, #16]
 80073f4:	9307      	str	r3, [sp, #28]
 80073f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073fa:	931a      	str	r3, [sp, #104]	; 0x68
 80073fc:	4654      	mov	r4, sl
 80073fe:	2205      	movs	r2, #5
 8007400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007404:	4851      	ldr	r0, [pc, #324]	; (800754c <_svfiprintf_r+0x1ec>)
 8007406:	f7f8 feeb 	bl	80001e0 <memchr>
 800740a:	9a04      	ldr	r2, [sp, #16]
 800740c:	b9d8      	cbnz	r0, 8007446 <_svfiprintf_r+0xe6>
 800740e:	06d0      	lsls	r0, r2, #27
 8007410:	bf44      	itt	mi
 8007412:	2320      	movmi	r3, #32
 8007414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007418:	0711      	lsls	r1, r2, #28
 800741a:	bf44      	itt	mi
 800741c:	232b      	movmi	r3, #43	; 0x2b
 800741e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007422:	f89a 3000 	ldrb.w	r3, [sl]
 8007426:	2b2a      	cmp	r3, #42	; 0x2a
 8007428:	d015      	beq.n	8007456 <_svfiprintf_r+0xf6>
 800742a:	9a07      	ldr	r2, [sp, #28]
 800742c:	4654      	mov	r4, sl
 800742e:	2000      	movs	r0, #0
 8007430:	f04f 0c0a 	mov.w	ip, #10
 8007434:	4621      	mov	r1, r4
 8007436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800743a:	3b30      	subs	r3, #48	; 0x30
 800743c:	2b09      	cmp	r3, #9
 800743e:	d94e      	bls.n	80074de <_svfiprintf_r+0x17e>
 8007440:	b1b0      	cbz	r0, 8007470 <_svfiprintf_r+0x110>
 8007442:	9207      	str	r2, [sp, #28]
 8007444:	e014      	b.n	8007470 <_svfiprintf_r+0x110>
 8007446:	eba0 0308 	sub.w	r3, r0, r8
 800744a:	fa09 f303 	lsl.w	r3, r9, r3
 800744e:	4313      	orrs	r3, r2
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	46a2      	mov	sl, r4
 8007454:	e7d2      	b.n	80073fc <_svfiprintf_r+0x9c>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	1d19      	adds	r1, r3, #4
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	9103      	str	r1, [sp, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	bfbb      	ittet	lt
 8007462:	425b      	neglt	r3, r3
 8007464:	f042 0202 	orrlt.w	r2, r2, #2
 8007468:	9307      	strge	r3, [sp, #28]
 800746a:	9307      	strlt	r3, [sp, #28]
 800746c:	bfb8      	it	lt
 800746e:	9204      	strlt	r2, [sp, #16]
 8007470:	7823      	ldrb	r3, [r4, #0]
 8007472:	2b2e      	cmp	r3, #46	; 0x2e
 8007474:	d10c      	bne.n	8007490 <_svfiprintf_r+0x130>
 8007476:	7863      	ldrb	r3, [r4, #1]
 8007478:	2b2a      	cmp	r3, #42	; 0x2a
 800747a:	d135      	bne.n	80074e8 <_svfiprintf_r+0x188>
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	9203      	str	r2, [sp, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	bfb8      	it	lt
 8007488:	f04f 33ff 	movlt.w	r3, #4294967295
 800748c:	3402      	adds	r4, #2
 800748e:	9305      	str	r3, [sp, #20]
 8007490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800755c <_svfiprintf_r+0x1fc>
 8007494:	7821      	ldrb	r1, [r4, #0]
 8007496:	2203      	movs	r2, #3
 8007498:	4650      	mov	r0, sl
 800749a:	f7f8 fea1 	bl	80001e0 <memchr>
 800749e:	b140      	cbz	r0, 80074b2 <_svfiprintf_r+0x152>
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	eba0 000a 	sub.w	r0, r0, sl
 80074a6:	fa03 f000 	lsl.w	r0, r3, r0
 80074aa:	9b04      	ldr	r3, [sp, #16]
 80074ac:	4303      	orrs	r3, r0
 80074ae:	3401      	adds	r4, #1
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b6:	4826      	ldr	r0, [pc, #152]	; (8007550 <_svfiprintf_r+0x1f0>)
 80074b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074bc:	2206      	movs	r2, #6
 80074be:	f7f8 fe8f 	bl	80001e0 <memchr>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d038      	beq.n	8007538 <_svfiprintf_r+0x1d8>
 80074c6:	4b23      	ldr	r3, [pc, #140]	; (8007554 <_svfiprintf_r+0x1f4>)
 80074c8:	bb1b      	cbnz	r3, 8007512 <_svfiprintf_r+0x1b2>
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	3307      	adds	r3, #7
 80074ce:	f023 0307 	bic.w	r3, r3, #7
 80074d2:	3308      	adds	r3, #8
 80074d4:	9303      	str	r3, [sp, #12]
 80074d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d8:	4433      	add	r3, r6
 80074da:	9309      	str	r3, [sp, #36]	; 0x24
 80074dc:	e767      	b.n	80073ae <_svfiprintf_r+0x4e>
 80074de:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e2:	460c      	mov	r4, r1
 80074e4:	2001      	movs	r0, #1
 80074e6:	e7a5      	b.n	8007434 <_svfiprintf_r+0xd4>
 80074e8:	2300      	movs	r3, #0
 80074ea:	3401      	adds	r4, #1
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	4619      	mov	r1, r3
 80074f0:	f04f 0c0a 	mov.w	ip, #10
 80074f4:	4620      	mov	r0, r4
 80074f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074fa:	3a30      	subs	r2, #48	; 0x30
 80074fc:	2a09      	cmp	r2, #9
 80074fe:	d903      	bls.n	8007508 <_svfiprintf_r+0x1a8>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0c5      	beq.n	8007490 <_svfiprintf_r+0x130>
 8007504:	9105      	str	r1, [sp, #20]
 8007506:	e7c3      	b.n	8007490 <_svfiprintf_r+0x130>
 8007508:	fb0c 2101 	mla	r1, ip, r1, r2
 800750c:	4604      	mov	r4, r0
 800750e:	2301      	movs	r3, #1
 8007510:	e7f0      	b.n	80074f4 <_svfiprintf_r+0x194>
 8007512:	ab03      	add	r3, sp, #12
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	462a      	mov	r2, r5
 8007518:	4b0f      	ldr	r3, [pc, #60]	; (8007558 <_svfiprintf_r+0x1f8>)
 800751a:	a904      	add	r1, sp, #16
 800751c:	4638      	mov	r0, r7
 800751e:	f7fd ffd9 	bl	80054d4 <_printf_float>
 8007522:	1c42      	adds	r2, r0, #1
 8007524:	4606      	mov	r6, r0
 8007526:	d1d6      	bne.n	80074d6 <_svfiprintf_r+0x176>
 8007528:	89ab      	ldrh	r3, [r5, #12]
 800752a:	065b      	lsls	r3, r3, #25
 800752c:	f53f af2c 	bmi.w	8007388 <_svfiprintf_r+0x28>
 8007530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007532:	b01d      	add	sp, #116	; 0x74
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	ab03      	add	r3, sp, #12
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	462a      	mov	r2, r5
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <_svfiprintf_r+0x1f8>)
 8007540:	a904      	add	r1, sp, #16
 8007542:	4638      	mov	r0, r7
 8007544:	f7fe fa6a 	bl	8005a1c <_printf_i>
 8007548:	e7eb      	b.n	8007522 <_svfiprintf_r+0x1c2>
 800754a:	bf00      	nop
 800754c:	08008b44 	.word	0x08008b44
 8007550:	08008b4e 	.word	0x08008b4e
 8007554:	080054d5 	.word	0x080054d5
 8007558:	080072a9 	.word	0x080072a9
 800755c:	08008b4a 	.word	0x08008b4a

08007560 <_sbrk_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d06      	ldr	r5, [pc, #24]	; (800757c <_sbrk_r+0x1c>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7fa f9a0 	bl	80018b0 <_sbrk>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_sbrk_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_sbrk_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	200004ec 	.word	0x200004ec

08007580 <__assert_func>:
 8007580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007582:	4614      	mov	r4, r2
 8007584:	461a      	mov	r2, r3
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <__assert_func+0x2c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4605      	mov	r5, r0
 800758c:	68d8      	ldr	r0, [r3, #12]
 800758e:	b14c      	cbz	r4, 80075a4 <__assert_func+0x24>
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <__assert_func+0x30>)
 8007592:	9100      	str	r1, [sp, #0]
 8007594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007598:	4906      	ldr	r1, [pc, #24]	; (80075b4 <__assert_func+0x34>)
 800759a:	462b      	mov	r3, r5
 800759c:	f000 f80e 	bl	80075bc <fiprintf>
 80075a0:	f000 faac 	bl	8007afc <abort>
 80075a4:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <__assert_func+0x38>)
 80075a6:	461c      	mov	r4, r3
 80075a8:	e7f3      	b.n	8007592 <__assert_func+0x12>
 80075aa:	bf00      	nop
 80075ac:	2000000c 	.word	0x2000000c
 80075b0:	08008b55 	.word	0x08008b55
 80075b4:	08008b62 	.word	0x08008b62
 80075b8:	08008b90 	.word	0x08008b90

080075bc <fiprintf>:
 80075bc:	b40e      	push	{r1, r2, r3}
 80075be:	b503      	push	{r0, r1, lr}
 80075c0:	4601      	mov	r1, r0
 80075c2:	ab03      	add	r3, sp, #12
 80075c4:	4805      	ldr	r0, [pc, #20]	; (80075dc <fiprintf+0x20>)
 80075c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	f000 f897 	bl	8007700 <_vfiprintf_r>
 80075d2:	b002      	add	sp, #8
 80075d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d8:	b003      	add	sp, #12
 80075da:	4770      	bx	lr
 80075dc:	2000000c 	.word	0x2000000c

080075e0 <__ascii_mbtowc>:
 80075e0:	b082      	sub	sp, #8
 80075e2:	b901      	cbnz	r1, 80075e6 <__ascii_mbtowc+0x6>
 80075e4:	a901      	add	r1, sp, #4
 80075e6:	b142      	cbz	r2, 80075fa <__ascii_mbtowc+0x1a>
 80075e8:	b14b      	cbz	r3, 80075fe <__ascii_mbtowc+0x1e>
 80075ea:	7813      	ldrb	r3, [r2, #0]
 80075ec:	600b      	str	r3, [r1, #0]
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	1e10      	subs	r0, r2, #0
 80075f2:	bf18      	it	ne
 80075f4:	2001      	movne	r0, #1
 80075f6:	b002      	add	sp, #8
 80075f8:	4770      	bx	lr
 80075fa:	4610      	mov	r0, r2
 80075fc:	e7fb      	b.n	80075f6 <__ascii_mbtowc+0x16>
 80075fe:	f06f 0001 	mvn.w	r0, #1
 8007602:	e7f8      	b.n	80075f6 <__ascii_mbtowc+0x16>

08007604 <memmove>:
 8007604:	4288      	cmp	r0, r1
 8007606:	b510      	push	{r4, lr}
 8007608:	eb01 0402 	add.w	r4, r1, r2
 800760c:	d902      	bls.n	8007614 <memmove+0x10>
 800760e:	4284      	cmp	r4, r0
 8007610:	4623      	mov	r3, r4
 8007612:	d807      	bhi.n	8007624 <memmove+0x20>
 8007614:	1e43      	subs	r3, r0, #1
 8007616:	42a1      	cmp	r1, r4
 8007618:	d008      	beq.n	800762c <memmove+0x28>
 800761a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800761e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007622:	e7f8      	b.n	8007616 <memmove+0x12>
 8007624:	4402      	add	r2, r0
 8007626:	4601      	mov	r1, r0
 8007628:	428a      	cmp	r2, r1
 800762a:	d100      	bne.n	800762e <memmove+0x2a>
 800762c:	bd10      	pop	{r4, pc}
 800762e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007636:	e7f7      	b.n	8007628 <memmove+0x24>

08007638 <__malloc_lock>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__malloc_lock+0x8>)
 800763a:	f000 bc1f 	b.w	8007e7c <__retarget_lock_acquire_recursive>
 800763e:	bf00      	nop
 8007640:	200004f0 	.word	0x200004f0

08007644 <__malloc_unlock>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__malloc_unlock+0x8>)
 8007646:	f000 bc1a 	b.w	8007e7e <__retarget_lock_release_recursive>
 800764a:	bf00      	nop
 800764c:	200004f0 	.word	0x200004f0

08007650 <_realloc_r>:
 8007650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007654:	4680      	mov	r8, r0
 8007656:	4614      	mov	r4, r2
 8007658:	460e      	mov	r6, r1
 800765a:	b921      	cbnz	r1, 8007666 <_realloc_r+0x16>
 800765c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007660:	4611      	mov	r1, r2
 8007662:	f7ff bdad 	b.w	80071c0 <_malloc_r>
 8007666:	b92a      	cbnz	r2, 8007674 <_realloc_r+0x24>
 8007668:	f7ff fd3e 	bl	80070e8 <_free_r>
 800766c:	4625      	mov	r5, r4
 800766e:	4628      	mov	r0, r5
 8007670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007674:	f000 fc6a 	bl	8007f4c <_malloc_usable_size_r>
 8007678:	4284      	cmp	r4, r0
 800767a:	4607      	mov	r7, r0
 800767c:	d802      	bhi.n	8007684 <_realloc_r+0x34>
 800767e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007682:	d812      	bhi.n	80076aa <_realloc_r+0x5a>
 8007684:	4621      	mov	r1, r4
 8007686:	4640      	mov	r0, r8
 8007688:	f7ff fd9a 	bl	80071c0 <_malloc_r>
 800768c:	4605      	mov	r5, r0
 800768e:	2800      	cmp	r0, #0
 8007690:	d0ed      	beq.n	800766e <_realloc_r+0x1e>
 8007692:	42bc      	cmp	r4, r7
 8007694:	4622      	mov	r2, r4
 8007696:	4631      	mov	r1, r6
 8007698:	bf28      	it	cs
 800769a:	463a      	movcs	r2, r7
 800769c:	f7fd fe64 	bl	8005368 <memcpy>
 80076a0:	4631      	mov	r1, r6
 80076a2:	4640      	mov	r0, r8
 80076a4:	f7ff fd20 	bl	80070e8 <_free_r>
 80076a8:	e7e1      	b.n	800766e <_realloc_r+0x1e>
 80076aa:	4635      	mov	r5, r6
 80076ac:	e7df      	b.n	800766e <_realloc_r+0x1e>

080076ae <__sfputc_r>:
 80076ae:	6893      	ldr	r3, [r2, #8]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	b410      	push	{r4}
 80076b6:	6093      	str	r3, [r2, #8]
 80076b8:	da08      	bge.n	80076cc <__sfputc_r+0x1e>
 80076ba:	6994      	ldr	r4, [r2, #24]
 80076bc:	42a3      	cmp	r3, r4
 80076be:	db01      	blt.n	80076c4 <__sfputc_r+0x16>
 80076c0:	290a      	cmp	r1, #10
 80076c2:	d103      	bne.n	80076cc <__sfputc_r+0x1e>
 80076c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c8:	f000 b94a 	b.w	8007960 <__swbuf_r>
 80076cc:	6813      	ldr	r3, [r2, #0]
 80076ce:	1c58      	adds	r0, r3, #1
 80076d0:	6010      	str	r0, [r2, #0]
 80076d2:	7019      	strb	r1, [r3, #0]
 80076d4:	4608      	mov	r0, r1
 80076d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076da:	4770      	bx	lr

080076dc <__sfputs_r>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	4606      	mov	r6, r0
 80076e0:	460f      	mov	r7, r1
 80076e2:	4614      	mov	r4, r2
 80076e4:	18d5      	adds	r5, r2, r3
 80076e6:	42ac      	cmp	r4, r5
 80076e8:	d101      	bne.n	80076ee <__sfputs_r+0x12>
 80076ea:	2000      	movs	r0, #0
 80076ec:	e007      	b.n	80076fe <__sfputs_r+0x22>
 80076ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f2:	463a      	mov	r2, r7
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff ffda 	bl	80076ae <__sfputc_r>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	d1f3      	bne.n	80076e6 <__sfputs_r+0xa>
 80076fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007700 <_vfiprintf_r>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	460d      	mov	r5, r1
 8007706:	b09d      	sub	sp, #116	; 0x74
 8007708:	4614      	mov	r4, r2
 800770a:	4698      	mov	r8, r3
 800770c:	4606      	mov	r6, r0
 800770e:	b118      	cbz	r0, 8007718 <_vfiprintf_r+0x18>
 8007710:	6983      	ldr	r3, [r0, #24]
 8007712:	b90b      	cbnz	r3, 8007718 <_vfiprintf_r+0x18>
 8007714:	f000 fb14 	bl	8007d40 <__sinit>
 8007718:	4b89      	ldr	r3, [pc, #548]	; (8007940 <_vfiprintf_r+0x240>)
 800771a:	429d      	cmp	r5, r3
 800771c:	d11b      	bne.n	8007756 <_vfiprintf_r+0x56>
 800771e:	6875      	ldr	r5, [r6, #4]
 8007720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007722:	07d9      	lsls	r1, r3, #31
 8007724:	d405      	bmi.n	8007732 <_vfiprintf_r+0x32>
 8007726:	89ab      	ldrh	r3, [r5, #12]
 8007728:	059a      	lsls	r2, r3, #22
 800772a:	d402      	bmi.n	8007732 <_vfiprintf_r+0x32>
 800772c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800772e:	f000 fba5 	bl	8007e7c <__retarget_lock_acquire_recursive>
 8007732:	89ab      	ldrh	r3, [r5, #12]
 8007734:	071b      	lsls	r3, r3, #28
 8007736:	d501      	bpl.n	800773c <_vfiprintf_r+0x3c>
 8007738:	692b      	ldr	r3, [r5, #16]
 800773a:	b9eb      	cbnz	r3, 8007778 <_vfiprintf_r+0x78>
 800773c:	4629      	mov	r1, r5
 800773e:	4630      	mov	r0, r6
 8007740:	f000 f96e 	bl	8007a20 <__swsetup_r>
 8007744:	b1c0      	cbz	r0, 8007778 <_vfiprintf_r+0x78>
 8007746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007748:	07dc      	lsls	r4, r3, #31
 800774a:	d50e      	bpl.n	800776a <_vfiprintf_r+0x6a>
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	b01d      	add	sp, #116	; 0x74
 8007752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007756:	4b7b      	ldr	r3, [pc, #492]	; (8007944 <_vfiprintf_r+0x244>)
 8007758:	429d      	cmp	r5, r3
 800775a:	d101      	bne.n	8007760 <_vfiprintf_r+0x60>
 800775c:	68b5      	ldr	r5, [r6, #8]
 800775e:	e7df      	b.n	8007720 <_vfiprintf_r+0x20>
 8007760:	4b79      	ldr	r3, [pc, #484]	; (8007948 <_vfiprintf_r+0x248>)
 8007762:	429d      	cmp	r5, r3
 8007764:	bf08      	it	eq
 8007766:	68f5      	ldreq	r5, [r6, #12]
 8007768:	e7da      	b.n	8007720 <_vfiprintf_r+0x20>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	0598      	lsls	r0, r3, #22
 800776e:	d4ed      	bmi.n	800774c <_vfiprintf_r+0x4c>
 8007770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007772:	f000 fb84 	bl	8007e7e <__retarget_lock_release_recursive>
 8007776:	e7e9      	b.n	800774c <_vfiprintf_r+0x4c>
 8007778:	2300      	movs	r3, #0
 800777a:	9309      	str	r3, [sp, #36]	; 0x24
 800777c:	2320      	movs	r3, #32
 800777e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007782:	f8cd 800c 	str.w	r8, [sp, #12]
 8007786:	2330      	movs	r3, #48	; 0x30
 8007788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800794c <_vfiprintf_r+0x24c>
 800778c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007790:	f04f 0901 	mov.w	r9, #1
 8007794:	4623      	mov	r3, r4
 8007796:	469a      	mov	sl, r3
 8007798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800779c:	b10a      	cbz	r2, 80077a2 <_vfiprintf_r+0xa2>
 800779e:	2a25      	cmp	r2, #37	; 0x25
 80077a0:	d1f9      	bne.n	8007796 <_vfiprintf_r+0x96>
 80077a2:	ebba 0b04 	subs.w	fp, sl, r4
 80077a6:	d00b      	beq.n	80077c0 <_vfiprintf_r+0xc0>
 80077a8:	465b      	mov	r3, fp
 80077aa:	4622      	mov	r2, r4
 80077ac:	4629      	mov	r1, r5
 80077ae:	4630      	mov	r0, r6
 80077b0:	f7ff ff94 	bl	80076dc <__sfputs_r>
 80077b4:	3001      	adds	r0, #1
 80077b6:	f000 80aa 	beq.w	800790e <_vfiprintf_r+0x20e>
 80077ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077bc:	445a      	add	r2, fp
 80077be:	9209      	str	r2, [sp, #36]	; 0x24
 80077c0:	f89a 3000 	ldrb.w	r3, [sl]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80a2 	beq.w	800790e <_vfiprintf_r+0x20e>
 80077ca:	2300      	movs	r3, #0
 80077cc:	f04f 32ff 	mov.w	r2, #4294967295
 80077d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077d4:	f10a 0a01 	add.w	sl, sl, #1
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	9307      	str	r3, [sp, #28]
 80077dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e0:	931a      	str	r3, [sp, #104]	; 0x68
 80077e2:	4654      	mov	r4, sl
 80077e4:	2205      	movs	r2, #5
 80077e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ea:	4858      	ldr	r0, [pc, #352]	; (800794c <_vfiprintf_r+0x24c>)
 80077ec:	f7f8 fcf8 	bl	80001e0 <memchr>
 80077f0:	9a04      	ldr	r2, [sp, #16]
 80077f2:	b9d8      	cbnz	r0, 800782c <_vfiprintf_r+0x12c>
 80077f4:	06d1      	lsls	r1, r2, #27
 80077f6:	bf44      	itt	mi
 80077f8:	2320      	movmi	r3, #32
 80077fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077fe:	0713      	lsls	r3, r2, #28
 8007800:	bf44      	itt	mi
 8007802:	232b      	movmi	r3, #43	; 0x2b
 8007804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007808:	f89a 3000 	ldrb.w	r3, [sl]
 800780c:	2b2a      	cmp	r3, #42	; 0x2a
 800780e:	d015      	beq.n	800783c <_vfiprintf_r+0x13c>
 8007810:	9a07      	ldr	r2, [sp, #28]
 8007812:	4654      	mov	r4, sl
 8007814:	2000      	movs	r0, #0
 8007816:	f04f 0c0a 	mov.w	ip, #10
 800781a:	4621      	mov	r1, r4
 800781c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007820:	3b30      	subs	r3, #48	; 0x30
 8007822:	2b09      	cmp	r3, #9
 8007824:	d94e      	bls.n	80078c4 <_vfiprintf_r+0x1c4>
 8007826:	b1b0      	cbz	r0, 8007856 <_vfiprintf_r+0x156>
 8007828:	9207      	str	r2, [sp, #28]
 800782a:	e014      	b.n	8007856 <_vfiprintf_r+0x156>
 800782c:	eba0 0308 	sub.w	r3, r0, r8
 8007830:	fa09 f303 	lsl.w	r3, r9, r3
 8007834:	4313      	orrs	r3, r2
 8007836:	9304      	str	r3, [sp, #16]
 8007838:	46a2      	mov	sl, r4
 800783a:	e7d2      	b.n	80077e2 <_vfiprintf_r+0xe2>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	1d19      	adds	r1, r3, #4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	9103      	str	r1, [sp, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	bfbb      	ittet	lt
 8007848:	425b      	neglt	r3, r3
 800784a:	f042 0202 	orrlt.w	r2, r2, #2
 800784e:	9307      	strge	r3, [sp, #28]
 8007850:	9307      	strlt	r3, [sp, #28]
 8007852:	bfb8      	it	lt
 8007854:	9204      	strlt	r2, [sp, #16]
 8007856:	7823      	ldrb	r3, [r4, #0]
 8007858:	2b2e      	cmp	r3, #46	; 0x2e
 800785a:	d10c      	bne.n	8007876 <_vfiprintf_r+0x176>
 800785c:	7863      	ldrb	r3, [r4, #1]
 800785e:	2b2a      	cmp	r3, #42	; 0x2a
 8007860:	d135      	bne.n	80078ce <_vfiprintf_r+0x1ce>
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	1d1a      	adds	r2, r3, #4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	9203      	str	r2, [sp, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	bfb8      	it	lt
 800786e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007872:	3402      	adds	r4, #2
 8007874:	9305      	str	r3, [sp, #20]
 8007876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800795c <_vfiprintf_r+0x25c>
 800787a:	7821      	ldrb	r1, [r4, #0]
 800787c:	2203      	movs	r2, #3
 800787e:	4650      	mov	r0, sl
 8007880:	f7f8 fcae 	bl	80001e0 <memchr>
 8007884:	b140      	cbz	r0, 8007898 <_vfiprintf_r+0x198>
 8007886:	2340      	movs	r3, #64	; 0x40
 8007888:	eba0 000a 	sub.w	r0, r0, sl
 800788c:	fa03 f000 	lsl.w	r0, r3, r0
 8007890:	9b04      	ldr	r3, [sp, #16]
 8007892:	4303      	orrs	r3, r0
 8007894:	3401      	adds	r4, #1
 8007896:	9304      	str	r3, [sp, #16]
 8007898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789c:	482c      	ldr	r0, [pc, #176]	; (8007950 <_vfiprintf_r+0x250>)
 800789e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078a2:	2206      	movs	r2, #6
 80078a4:	f7f8 fc9c 	bl	80001e0 <memchr>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d03f      	beq.n	800792c <_vfiprintf_r+0x22c>
 80078ac:	4b29      	ldr	r3, [pc, #164]	; (8007954 <_vfiprintf_r+0x254>)
 80078ae:	bb1b      	cbnz	r3, 80078f8 <_vfiprintf_r+0x1f8>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	3307      	adds	r3, #7
 80078b4:	f023 0307 	bic.w	r3, r3, #7
 80078b8:	3308      	adds	r3, #8
 80078ba:	9303      	str	r3, [sp, #12]
 80078bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078be:	443b      	add	r3, r7
 80078c0:	9309      	str	r3, [sp, #36]	; 0x24
 80078c2:	e767      	b.n	8007794 <_vfiprintf_r+0x94>
 80078c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80078c8:	460c      	mov	r4, r1
 80078ca:	2001      	movs	r0, #1
 80078cc:	e7a5      	b.n	800781a <_vfiprintf_r+0x11a>
 80078ce:	2300      	movs	r3, #0
 80078d0:	3401      	adds	r4, #1
 80078d2:	9305      	str	r3, [sp, #20]
 80078d4:	4619      	mov	r1, r3
 80078d6:	f04f 0c0a 	mov.w	ip, #10
 80078da:	4620      	mov	r0, r4
 80078dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e0:	3a30      	subs	r2, #48	; 0x30
 80078e2:	2a09      	cmp	r2, #9
 80078e4:	d903      	bls.n	80078ee <_vfiprintf_r+0x1ee>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0c5      	beq.n	8007876 <_vfiprintf_r+0x176>
 80078ea:	9105      	str	r1, [sp, #20]
 80078ec:	e7c3      	b.n	8007876 <_vfiprintf_r+0x176>
 80078ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f2:	4604      	mov	r4, r0
 80078f4:	2301      	movs	r3, #1
 80078f6:	e7f0      	b.n	80078da <_vfiprintf_r+0x1da>
 80078f8:	ab03      	add	r3, sp, #12
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	462a      	mov	r2, r5
 80078fe:	4b16      	ldr	r3, [pc, #88]	; (8007958 <_vfiprintf_r+0x258>)
 8007900:	a904      	add	r1, sp, #16
 8007902:	4630      	mov	r0, r6
 8007904:	f7fd fde6 	bl	80054d4 <_printf_float>
 8007908:	4607      	mov	r7, r0
 800790a:	1c78      	adds	r0, r7, #1
 800790c:	d1d6      	bne.n	80078bc <_vfiprintf_r+0x1bc>
 800790e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007910:	07d9      	lsls	r1, r3, #31
 8007912:	d405      	bmi.n	8007920 <_vfiprintf_r+0x220>
 8007914:	89ab      	ldrh	r3, [r5, #12]
 8007916:	059a      	lsls	r2, r3, #22
 8007918:	d402      	bmi.n	8007920 <_vfiprintf_r+0x220>
 800791a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800791c:	f000 faaf 	bl	8007e7e <__retarget_lock_release_recursive>
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	065b      	lsls	r3, r3, #25
 8007924:	f53f af12 	bmi.w	800774c <_vfiprintf_r+0x4c>
 8007928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800792a:	e711      	b.n	8007750 <_vfiprintf_r+0x50>
 800792c:	ab03      	add	r3, sp, #12
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	462a      	mov	r2, r5
 8007932:	4b09      	ldr	r3, [pc, #36]	; (8007958 <_vfiprintf_r+0x258>)
 8007934:	a904      	add	r1, sp, #16
 8007936:	4630      	mov	r0, r6
 8007938:	f7fe f870 	bl	8005a1c <_printf_i>
 800793c:	e7e4      	b.n	8007908 <_vfiprintf_r+0x208>
 800793e:	bf00      	nop
 8007940:	08008cbc 	.word	0x08008cbc
 8007944:	08008cdc 	.word	0x08008cdc
 8007948:	08008c9c 	.word	0x08008c9c
 800794c:	08008b44 	.word	0x08008b44
 8007950:	08008b4e 	.word	0x08008b4e
 8007954:	080054d5 	.word	0x080054d5
 8007958:	080076dd 	.word	0x080076dd
 800795c:	08008b4a 	.word	0x08008b4a

08007960 <__swbuf_r>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	460e      	mov	r6, r1
 8007964:	4614      	mov	r4, r2
 8007966:	4605      	mov	r5, r0
 8007968:	b118      	cbz	r0, 8007972 <__swbuf_r+0x12>
 800796a:	6983      	ldr	r3, [r0, #24]
 800796c:	b90b      	cbnz	r3, 8007972 <__swbuf_r+0x12>
 800796e:	f000 f9e7 	bl	8007d40 <__sinit>
 8007972:	4b21      	ldr	r3, [pc, #132]	; (80079f8 <__swbuf_r+0x98>)
 8007974:	429c      	cmp	r4, r3
 8007976:	d12b      	bne.n	80079d0 <__swbuf_r+0x70>
 8007978:	686c      	ldr	r4, [r5, #4]
 800797a:	69a3      	ldr	r3, [r4, #24]
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	071a      	lsls	r2, r3, #28
 8007982:	d52f      	bpl.n	80079e4 <__swbuf_r+0x84>
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	b36b      	cbz	r3, 80079e4 <__swbuf_r+0x84>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	6820      	ldr	r0, [r4, #0]
 800798c:	1ac0      	subs	r0, r0, r3
 800798e:	6963      	ldr	r3, [r4, #20]
 8007990:	b2f6      	uxtb	r6, r6
 8007992:	4283      	cmp	r3, r0
 8007994:	4637      	mov	r7, r6
 8007996:	dc04      	bgt.n	80079a2 <__swbuf_r+0x42>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f93c 	bl	8007c18 <_fflush_r>
 80079a0:	bb30      	cbnz	r0, 80079f0 <__swbuf_r+0x90>
 80079a2:	68a3      	ldr	r3, [r4, #8]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	60a3      	str	r3, [r4, #8]
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	6022      	str	r2, [r4, #0]
 80079ae:	701e      	strb	r6, [r3, #0]
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	3001      	adds	r0, #1
 80079b4:	4283      	cmp	r3, r0
 80079b6:	d004      	beq.n	80079c2 <__swbuf_r+0x62>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	07db      	lsls	r3, r3, #31
 80079bc:	d506      	bpl.n	80079cc <__swbuf_r+0x6c>
 80079be:	2e0a      	cmp	r6, #10
 80079c0:	d104      	bne.n	80079cc <__swbuf_r+0x6c>
 80079c2:	4621      	mov	r1, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	f000 f927 	bl	8007c18 <_fflush_r>
 80079ca:	b988      	cbnz	r0, 80079f0 <__swbuf_r+0x90>
 80079cc:	4638      	mov	r0, r7
 80079ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d0:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <__swbuf_r+0x9c>)
 80079d2:	429c      	cmp	r4, r3
 80079d4:	d101      	bne.n	80079da <__swbuf_r+0x7a>
 80079d6:	68ac      	ldr	r4, [r5, #8]
 80079d8:	e7cf      	b.n	800797a <__swbuf_r+0x1a>
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <__swbuf_r+0xa0>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	bf08      	it	eq
 80079e0:	68ec      	ldreq	r4, [r5, #12]
 80079e2:	e7ca      	b.n	800797a <__swbuf_r+0x1a>
 80079e4:	4621      	mov	r1, r4
 80079e6:	4628      	mov	r0, r5
 80079e8:	f000 f81a 	bl	8007a20 <__swsetup_r>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d0cb      	beq.n	8007988 <__swbuf_r+0x28>
 80079f0:	f04f 37ff 	mov.w	r7, #4294967295
 80079f4:	e7ea      	b.n	80079cc <__swbuf_r+0x6c>
 80079f6:	bf00      	nop
 80079f8:	08008cbc 	.word	0x08008cbc
 80079fc:	08008cdc 	.word	0x08008cdc
 8007a00:	08008c9c 	.word	0x08008c9c

08007a04 <__ascii_wctomb>:
 8007a04:	b149      	cbz	r1, 8007a1a <__ascii_wctomb+0x16>
 8007a06:	2aff      	cmp	r2, #255	; 0xff
 8007a08:	bf85      	ittet	hi
 8007a0a:	238a      	movhi	r3, #138	; 0x8a
 8007a0c:	6003      	strhi	r3, [r0, #0]
 8007a0e:	700a      	strbls	r2, [r1, #0]
 8007a10:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a14:	bf98      	it	ls
 8007a16:	2001      	movls	r0, #1
 8007a18:	4770      	bx	lr
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4770      	bx	lr
	...

08007a20 <__swsetup_r>:
 8007a20:	4b32      	ldr	r3, [pc, #200]	; (8007aec <__swsetup_r+0xcc>)
 8007a22:	b570      	push	{r4, r5, r6, lr}
 8007a24:	681d      	ldr	r5, [r3, #0]
 8007a26:	4606      	mov	r6, r0
 8007a28:	460c      	mov	r4, r1
 8007a2a:	b125      	cbz	r5, 8007a36 <__swsetup_r+0x16>
 8007a2c:	69ab      	ldr	r3, [r5, #24]
 8007a2e:	b913      	cbnz	r3, 8007a36 <__swsetup_r+0x16>
 8007a30:	4628      	mov	r0, r5
 8007a32:	f000 f985 	bl	8007d40 <__sinit>
 8007a36:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <__swsetup_r+0xd0>)
 8007a38:	429c      	cmp	r4, r3
 8007a3a:	d10f      	bne.n	8007a5c <__swsetup_r+0x3c>
 8007a3c:	686c      	ldr	r4, [r5, #4]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a44:	0719      	lsls	r1, r3, #28
 8007a46:	d42c      	bmi.n	8007aa2 <__swsetup_r+0x82>
 8007a48:	06dd      	lsls	r5, r3, #27
 8007a4a:	d411      	bmi.n	8007a70 <__swsetup_r+0x50>
 8007a4c:	2309      	movs	r3, #9
 8007a4e:	6033      	str	r3, [r6, #0]
 8007a50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	e03e      	b.n	8007ada <__swsetup_r+0xba>
 8007a5c:	4b25      	ldr	r3, [pc, #148]	; (8007af4 <__swsetup_r+0xd4>)
 8007a5e:	429c      	cmp	r4, r3
 8007a60:	d101      	bne.n	8007a66 <__swsetup_r+0x46>
 8007a62:	68ac      	ldr	r4, [r5, #8]
 8007a64:	e7eb      	b.n	8007a3e <__swsetup_r+0x1e>
 8007a66:	4b24      	ldr	r3, [pc, #144]	; (8007af8 <__swsetup_r+0xd8>)
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	bf08      	it	eq
 8007a6c:	68ec      	ldreq	r4, [r5, #12]
 8007a6e:	e7e6      	b.n	8007a3e <__swsetup_r+0x1e>
 8007a70:	0758      	lsls	r0, r3, #29
 8007a72:	d512      	bpl.n	8007a9a <__swsetup_r+0x7a>
 8007a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a76:	b141      	cbz	r1, 8007a8a <__swsetup_r+0x6a>
 8007a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a7c:	4299      	cmp	r1, r3
 8007a7e:	d002      	beq.n	8007a86 <__swsetup_r+0x66>
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7ff fb31 	bl	80070e8 <_free_r>
 8007a86:	2300      	movs	r3, #0
 8007a88:	6363      	str	r3, [r4, #52]	; 0x34
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	2300      	movs	r3, #0
 8007a94:	6063      	str	r3, [r4, #4]
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	f043 0308 	orr.w	r3, r3, #8
 8007aa0:	81a3      	strh	r3, [r4, #12]
 8007aa2:	6923      	ldr	r3, [r4, #16]
 8007aa4:	b94b      	cbnz	r3, 8007aba <__swsetup_r+0x9a>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab0:	d003      	beq.n	8007aba <__swsetup_r+0x9a>
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 fa09 	bl	8007ecc <__smakebuf_r>
 8007aba:	89a0      	ldrh	r0, [r4, #12]
 8007abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac0:	f010 0301 	ands.w	r3, r0, #1
 8007ac4:	d00a      	beq.n	8007adc <__swsetup_r+0xbc>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	6963      	ldr	r3, [r4, #20]
 8007acc:	425b      	negs	r3, r3
 8007ace:	61a3      	str	r3, [r4, #24]
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	b943      	cbnz	r3, 8007ae6 <__swsetup_r+0xc6>
 8007ad4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ad8:	d1ba      	bne.n	8007a50 <__swsetup_r+0x30>
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	0781      	lsls	r1, r0, #30
 8007ade:	bf58      	it	pl
 8007ae0:	6963      	ldrpl	r3, [r4, #20]
 8007ae2:	60a3      	str	r3, [r4, #8]
 8007ae4:	e7f4      	b.n	8007ad0 <__swsetup_r+0xb0>
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	e7f7      	b.n	8007ada <__swsetup_r+0xba>
 8007aea:	bf00      	nop
 8007aec:	2000000c 	.word	0x2000000c
 8007af0:	08008cbc 	.word	0x08008cbc
 8007af4:	08008cdc 	.word	0x08008cdc
 8007af8:	08008c9c 	.word	0x08008c9c

08007afc <abort>:
 8007afc:	b508      	push	{r3, lr}
 8007afe:	2006      	movs	r0, #6
 8007b00:	f000 fa54 	bl	8007fac <raise>
 8007b04:	2001      	movs	r0, #1
 8007b06:	f7f9 fe5b 	bl	80017c0 <_exit>
	...

08007b0c <__sflush_r>:
 8007b0c:	898a      	ldrh	r2, [r1, #12]
 8007b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	4605      	mov	r5, r0
 8007b14:	0710      	lsls	r0, r2, #28
 8007b16:	460c      	mov	r4, r1
 8007b18:	d458      	bmi.n	8007bcc <__sflush_r+0xc0>
 8007b1a:	684b      	ldr	r3, [r1, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dc05      	bgt.n	8007b2c <__sflush_r+0x20>
 8007b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dc02      	bgt.n	8007b2c <__sflush_r+0x20>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	d0f9      	beq.n	8007b26 <__sflush_r+0x1a>
 8007b32:	2300      	movs	r3, #0
 8007b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b38:	682f      	ldr	r7, [r5, #0]
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	d032      	beq.n	8007ba4 <__sflush_r+0x98>
 8007b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	075a      	lsls	r2, r3, #29
 8007b44:	d505      	bpl.n	8007b52 <__sflush_r+0x46>
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	1ac0      	subs	r0, r0, r3
 8007b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b4c:	b10b      	cbz	r3, 8007b52 <__sflush_r+0x46>
 8007b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b50:	1ac0      	subs	r0, r0, r3
 8007b52:	2300      	movs	r3, #0
 8007b54:	4602      	mov	r2, r0
 8007b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b58:	6a21      	ldr	r1, [r4, #32]
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47b0      	blx	r6
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	d106      	bne.n	8007b72 <__sflush_r+0x66>
 8007b64:	6829      	ldr	r1, [r5, #0]
 8007b66:	291d      	cmp	r1, #29
 8007b68:	d82c      	bhi.n	8007bc4 <__sflush_r+0xb8>
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <__sflush_r+0x108>)
 8007b6c:	40ca      	lsrs	r2, r1
 8007b6e:	07d6      	lsls	r6, r2, #31
 8007b70:	d528      	bpl.n	8007bc4 <__sflush_r+0xb8>
 8007b72:	2200      	movs	r2, #0
 8007b74:	6062      	str	r2, [r4, #4]
 8007b76:	04d9      	lsls	r1, r3, #19
 8007b78:	6922      	ldr	r2, [r4, #16]
 8007b7a:	6022      	str	r2, [r4, #0]
 8007b7c:	d504      	bpl.n	8007b88 <__sflush_r+0x7c>
 8007b7e:	1c42      	adds	r2, r0, #1
 8007b80:	d101      	bne.n	8007b86 <__sflush_r+0x7a>
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	b903      	cbnz	r3, 8007b88 <__sflush_r+0x7c>
 8007b86:	6560      	str	r0, [r4, #84]	; 0x54
 8007b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b8a:	602f      	str	r7, [r5, #0]
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d0ca      	beq.n	8007b26 <__sflush_r+0x1a>
 8007b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b94:	4299      	cmp	r1, r3
 8007b96:	d002      	beq.n	8007b9e <__sflush_r+0x92>
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f7ff faa5 	bl	80070e8 <_free_r>
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ba2:	e7c1      	b.n	8007b28 <__sflush_r+0x1c>
 8007ba4:	6a21      	ldr	r1, [r4, #32]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b0      	blx	r6
 8007bac:	1c41      	adds	r1, r0, #1
 8007bae:	d1c7      	bne.n	8007b40 <__sflush_r+0x34>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0c4      	beq.n	8007b40 <__sflush_r+0x34>
 8007bb6:	2b1d      	cmp	r3, #29
 8007bb8:	d001      	beq.n	8007bbe <__sflush_r+0xb2>
 8007bba:	2b16      	cmp	r3, #22
 8007bbc:	d101      	bne.n	8007bc2 <__sflush_r+0xb6>
 8007bbe:	602f      	str	r7, [r5, #0]
 8007bc0:	e7b1      	b.n	8007b26 <__sflush_r+0x1a>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	e7ad      	b.n	8007b28 <__sflush_r+0x1c>
 8007bcc:	690f      	ldr	r7, [r1, #16]
 8007bce:	2f00      	cmp	r7, #0
 8007bd0:	d0a9      	beq.n	8007b26 <__sflush_r+0x1a>
 8007bd2:	0793      	lsls	r3, r2, #30
 8007bd4:	680e      	ldr	r6, [r1, #0]
 8007bd6:	bf08      	it	eq
 8007bd8:	694b      	ldreq	r3, [r1, #20]
 8007bda:	600f      	str	r7, [r1, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	2300      	movne	r3, #0
 8007be0:	eba6 0807 	sub.w	r8, r6, r7
 8007be4:	608b      	str	r3, [r1, #8]
 8007be6:	f1b8 0f00 	cmp.w	r8, #0
 8007bea:	dd9c      	ble.n	8007b26 <__sflush_r+0x1a>
 8007bec:	6a21      	ldr	r1, [r4, #32]
 8007bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bf0:	4643      	mov	r3, r8
 8007bf2:	463a      	mov	r2, r7
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b0      	blx	r6
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	dc06      	bgt.n	8007c0a <__sflush_r+0xfe>
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	e78e      	b.n	8007b28 <__sflush_r+0x1c>
 8007c0a:	4407      	add	r7, r0
 8007c0c:	eba8 0800 	sub.w	r8, r8, r0
 8007c10:	e7e9      	b.n	8007be6 <__sflush_r+0xda>
 8007c12:	bf00      	nop
 8007c14:	20400001 	.word	0x20400001

08007c18 <_fflush_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b913      	cbnz	r3, 8007c28 <_fflush_r+0x10>
 8007c22:	2500      	movs	r5, #0
 8007c24:	4628      	mov	r0, r5
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	b118      	cbz	r0, 8007c32 <_fflush_r+0x1a>
 8007c2a:	6983      	ldr	r3, [r0, #24]
 8007c2c:	b90b      	cbnz	r3, 8007c32 <_fflush_r+0x1a>
 8007c2e:	f000 f887 	bl	8007d40 <__sinit>
 8007c32:	4b14      	ldr	r3, [pc, #80]	; (8007c84 <_fflush_r+0x6c>)
 8007c34:	429c      	cmp	r4, r3
 8007c36:	d11b      	bne.n	8007c70 <_fflush_r+0x58>
 8007c38:	686c      	ldr	r4, [r5, #4]
 8007c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0ef      	beq.n	8007c22 <_fflush_r+0xa>
 8007c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c44:	07d0      	lsls	r0, r2, #31
 8007c46:	d404      	bmi.n	8007c52 <_fflush_r+0x3a>
 8007c48:	0599      	lsls	r1, r3, #22
 8007c4a:	d402      	bmi.n	8007c52 <_fflush_r+0x3a>
 8007c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c4e:	f000 f915 	bl	8007e7c <__retarget_lock_acquire_recursive>
 8007c52:	4628      	mov	r0, r5
 8007c54:	4621      	mov	r1, r4
 8007c56:	f7ff ff59 	bl	8007b0c <__sflush_r>
 8007c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c5c:	07da      	lsls	r2, r3, #31
 8007c5e:	4605      	mov	r5, r0
 8007c60:	d4e0      	bmi.n	8007c24 <_fflush_r+0xc>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	059b      	lsls	r3, r3, #22
 8007c66:	d4dd      	bmi.n	8007c24 <_fflush_r+0xc>
 8007c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6a:	f000 f908 	bl	8007e7e <__retarget_lock_release_recursive>
 8007c6e:	e7d9      	b.n	8007c24 <_fflush_r+0xc>
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <_fflush_r+0x70>)
 8007c72:	429c      	cmp	r4, r3
 8007c74:	d101      	bne.n	8007c7a <_fflush_r+0x62>
 8007c76:	68ac      	ldr	r4, [r5, #8]
 8007c78:	e7df      	b.n	8007c3a <_fflush_r+0x22>
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <_fflush_r+0x74>)
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	bf08      	it	eq
 8007c80:	68ec      	ldreq	r4, [r5, #12]
 8007c82:	e7da      	b.n	8007c3a <_fflush_r+0x22>
 8007c84:	08008cbc 	.word	0x08008cbc
 8007c88:	08008cdc 	.word	0x08008cdc
 8007c8c:	08008c9c 	.word	0x08008c9c

08007c90 <std>:
 8007c90:	2300      	movs	r3, #0
 8007c92:	b510      	push	{r4, lr}
 8007c94:	4604      	mov	r4, r0
 8007c96:	e9c0 3300 	strd	r3, r3, [r0]
 8007c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c9e:	6083      	str	r3, [r0, #8]
 8007ca0:	8181      	strh	r1, [r0, #12]
 8007ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8007ca4:	81c2      	strh	r2, [r0, #14]
 8007ca6:	6183      	str	r3, [r0, #24]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	2208      	movs	r2, #8
 8007cac:	305c      	adds	r0, #92	; 0x5c
 8007cae:	f7fd fb69 	bl	8005384 <memset>
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <std+0x38>)
 8007cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <std+0x3c>)
 8007cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cba:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <std+0x40>)
 8007cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <std+0x44>)
 8007cc0:	6224      	str	r4, [r4, #32]
 8007cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08007fe5 	.word	0x08007fe5
 8007ccc:	08008007 	.word	0x08008007
 8007cd0:	0800803f 	.word	0x0800803f
 8007cd4:	08008063 	.word	0x08008063

08007cd8 <_cleanup_r>:
 8007cd8:	4901      	ldr	r1, [pc, #4]	; (8007ce0 <_cleanup_r+0x8>)
 8007cda:	f000 b8af 	b.w	8007e3c <_fwalk_reent>
 8007cde:	bf00      	nop
 8007ce0:	08007c19 	.word	0x08007c19

08007ce4 <__sfmoreglue>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	2268      	movs	r2, #104	; 0x68
 8007ce8:	1e4d      	subs	r5, r1, #1
 8007cea:	4355      	muls	r5, r2
 8007cec:	460e      	mov	r6, r1
 8007cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cf2:	f7ff fa65 	bl	80071c0 <_malloc_r>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	b140      	cbz	r0, 8007d0c <__sfmoreglue+0x28>
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8007d00:	300c      	adds	r0, #12
 8007d02:	60a0      	str	r0, [r4, #8]
 8007d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d08:	f7fd fb3c 	bl	8005384 <memset>
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}

08007d10 <__sfp_lock_acquire>:
 8007d10:	4801      	ldr	r0, [pc, #4]	; (8007d18 <__sfp_lock_acquire+0x8>)
 8007d12:	f000 b8b3 	b.w	8007e7c <__retarget_lock_acquire_recursive>
 8007d16:	bf00      	nop
 8007d18:	200004f1 	.word	0x200004f1

08007d1c <__sfp_lock_release>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	; (8007d24 <__sfp_lock_release+0x8>)
 8007d1e:	f000 b8ae 	b.w	8007e7e <__retarget_lock_release_recursive>
 8007d22:	bf00      	nop
 8007d24:	200004f1 	.word	0x200004f1

08007d28 <__sinit_lock_acquire>:
 8007d28:	4801      	ldr	r0, [pc, #4]	; (8007d30 <__sinit_lock_acquire+0x8>)
 8007d2a:	f000 b8a7 	b.w	8007e7c <__retarget_lock_acquire_recursive>
 8007d2e:	bf00      	nop
 8007d30:	200004f2 	.word	0x200004f2

08007d34 <__sinit_lock_release>:
 8007d34:	4801      	ldr	r0, [pc, #4]	; (8007d3c <__sinit_lock_release+0x8>)
 8007d36:	f000 b8a2 	b.w	8007e7e <__retarget_lock_release_recursive>
 8007d3a:	bf00      	nop
 8007d3c:	200004f2 	.word	0x200004f2

08007d40 <__sinit>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4604      	mov	r4, r0
 8007d44:	f7ff fff0 	bl	8007d28 <__sinit_lock_acquire>
 8007d48:	69a3      	ldr	r3, [r4, #24]
 8007d4a:	b11b      	cbz	r3, 8007d54 <__sinit+0x14>
 8007d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d50:	f7ff bff0 	b.w	8007d34 <__sinit_lock_release>
 8007d54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d58:	6523      	str	r3, [r4, #80]	; 0x50
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <__sinit+0x68>)
 8007d5c:	4a13      	ldr	r2, [pc, #76]	; (8007dac <__sinit+0x6c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d62:	42a3      	cmp	r3, r4
 8007d64:	bf04      	itt	eq
 8007d66:	2301      	moveq	r3, #1
 8007d68:	61a3      	streq	r3, [r4, #24]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 f820 	bl	8007db0 <__sfp>
 8007d70:	6060      	str	r0, [r4, #4]
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 f81c 	bl	8007db0 <__sfp>
 8007d78:	60a0      	str	r0, [r4, #8]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 f818 	bl	8007db0 <__sfp>
 8007d80:	2200      	movs	r2, #0
 8007d82:	60e0      	str	r0, [r4, #12]
 8007d84:	2104      	movs	r1, #4
 8007d86:	6860      	ldr	r0, [r4, #4]
 8007d88:	f7ff ff82 	bl	8007c90 <std>
 8007d8c:	68a0      	ldr	r0, [r4, #8]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	2109      	movs	r1, #9
 8007d92:	f7ff ff7d 	bl	8007c90 <std>
 8007d96:	68e0      	ldr	r0, [r4, #12]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	2112      	movs	r1, #18
 8007d9c:	f7ff ff78 	bl	8007c90 <std>
 8007da0:	2301      	movs	r3, #1
 8007da2:	61a3      	str	r3, [r4, #24]
 8007da4:	e7d2      	b.n	8007d4c <__sinit+0xc>
 8007da6:	bf00      	nop
 8007da8:	08008924 	.word	0x08008924
 8007dac:	08007cd9 	.word	0x08007cd9

08007db0 <__sfp>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	4607      	mov	r7, r0
 8007db4:	f7ff ffac 	bl	8007d10 <__sfp_lock_acquire>
 8007db8:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <__sfp+0x84>)
 8007dba:	681e      	ldr	r6, [r3, #0]
 8007dbc:	69b3      	ldr	r3, [r6, #24]
 8007dbe:	b913      	cbnz	r3, 8007dc6 <__sfp+0x16>
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7ff ffbd 	bl	8007d40 <__sinit>
 8007dc6:	3648      	adds	r6, #72	; 0x48
 8007dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	d503      	bpl.n	8007dd8 <__sfp+0x28>
 8007dd0:	6833      	ldr	r3, [r6, #0]
 8007dd2:	b30b      	cbz	r3, 8007e18 <__sfp+0x68>
 8007dd4:	6836      	ldr	r6, [r6, #0]
 8007dd6:	e7f7      	b.n	8007dc8 <__sfp+0x18>
 8007dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ddc:	b9d5      	cbnz	r5, 8007e14 <__sfp+0x64>
 8007dde:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <__sfp+0x88>)
 8007de0:	60e3      	str	r3, [r4, #12]
 8007de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007de6:	6665      	str	r5, [r4, #100]	; 0x64
 8007de8:	f000 f847 	bl	8007e7a <__retarget_lock_init_recursive>
 8007dec:	f7ff ff96 	bl	8007d1c <__sfp_lock_release>
 8007df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007df8:	6025      	str	r5, [r4, #0]
 8007dfa:	61a5      	str	r5, [r4, #24]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e04:	f7fd fabe 	bl	8005384 <memset>
 8007e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e10:	4620      	mov	r0, r4
 8007e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e14:	3468      	adds	r4, #104	; 0x68
 8007e16:	e7d9      	b.n	8007dcc <__sfp+0x1c>
 8007e18:	2104      	movs	r1, #4
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	f7ff ff62 	bl	8007ce4 <__sfmoreglue>
 8007e20:	4604      	mov	r4, r0
 8007e22:	6030      	str	r0, [r6, #0]
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d1d5      	bne.n	8007dd4 <__sfp+0x24>
 8007e28:	f7ff ff78 	bl	8007d1c <__sfp_lock_release>
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	603b      	str	r3, [r7, #0]
 8007e30:	e7ee      	b.n	8007e10 <__sfp+0x60>
 8007e32:	bf00      	nop
 8007e34:	08008924 	.word	0x08008924
 8007e38:	ffff0001 	.word	0xffff0001

08007e3c <_fwalk_reent>:
 8007e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	4606      	mov	r6, r0
 8007e42:	4688      	mov	r8, r1
 8007e44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e48:	2700      	movs	r7, #0
 8007e4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e4e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e52:	d505      	bpl.n	8007e60 <_fwalk_reent+0x24>
 8007e54:	6824      	ldr	r4, [r4, #0]
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d1f7      	bne.n	8007e4a <_fwalk_reent+0xe>
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e60:	89ab      	ldrh	r3, [r5, #12]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d907      	bls.n	8007e76 <_fwalk_reent+0x3a>
 8007e66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	d003      	beq.n	8007e76 <_fwalk_reent+0x3a>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4630      	mov	r0, r6
 8007e72:	47c0      	blx	r8
 8007e74:	4307      	orrs	r7, r0
 8007e76:	3568      	adds	r5, #104	; 0x68
 8007e78:	e7e9      	b.n	8007e4e <_fwalk_reent+0x12>

08007e7a <__retarget_lock_init_recursive>:
 8007e7a:	4770      	bx	lr

08007e7c <__retarget_lock_acquire_recursive>:
 8007e7c:	4770      	bx	lr

08007e7e <__retarget_lock_release_recursive>:
 8007e7e:	4770      	bx	lr

08007e80 <__swhatbuf_r>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	460e      	mov	r6, r1
 8007e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	b096      	sub	sp, #88	; 0x58
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	461d      	mov	r5, r3
 8007e90:	da08      	bge.n	8007ea4 <__swhatbuf_r+0x24>
 8007e92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	602a      	str	r2, [r5, #0]
 8007e9a:	061a      	lsls	r2, r3, #24
 8007e9c:	d410      	bmi.n	8007ec0 <__swhatbuf_r+0x40>
 8007e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ea2:	e00e      	b.n	8007ec2 <__swhatbuf_r+0x42>
 8007ea4:	466a      	mov	r2, sp
 8007ea6:	f000 f903 	bl	80080b0 <_fstat_r>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	dbf1      	blt.n	8007e92 <__swhatbuf_r+0x12>
 8007eae:	9a01      	ldr	r2, [sp, #4]
 8007eb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007eb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eb8:	425a      	negs	r2, r3
 8007eba:	415a      	adcs	r2, r3
 8007ebc:	602a      	str	r2, [r5, #0]
 8007ebe:	e7ee      	b.n	8007e9e <__swhatbuf_r+0x1e>
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	b016      	add	sp, #88	; 0x58
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ecc <__smakebuf_r>:
 8007ecc:	898b      	ldrh	r3, [r1, #12]
 8007ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ed0:	079d      	lsls	r5, r3, #30
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	d507      	bpl.n	8007ee8 <__smakebuf_r+0x1c>
 8007ed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	6123      	str	r3, [r4, #16]
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	6163      	str	r3, [r4, #20]
 8007ee4:	b002      	add	sp, #8
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	ab01      	add	r3, sp, #4
 8007eea:	466a      	mov	r2, sp
 8007eec:	f7ff ffc8 	bl	8007e80 <__swhatbuf_r>
 8007ef0:	9900      	ldr	r1, [sp, #0]
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff f963 	bl	80071c0 <_malloc_r>
 8007efa:	b948      	cbnz	r0, 8007f10 <__smakebuf_r+0x44>
 8007efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f00:	059a      	lsls	r2, r3, #22
 8007f02:	d4ef      	bmi.n	8007ee4 <__smakebuf_r+0x18>
 8007f04:	f023 0303 	bic.w	r3, r3, #3
 8007f08:	f043 0302 	orr.w	r3, r3, #2
 8007f0c:	81a3      	strh	r3, [r4, #12]
 8007f0e:	e7e3      	b.n	8007ed8 <__smakebuf_r+0xc>
 8007f10:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <__smakebuf_r+0x7c>)
 8007f12:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	6020      	str	r0, [r4, #0]
 8007f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	9b00      	ldr	r3, [sp, #0]
 8007f20:	6163      	str	r3, [r4, #20]
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	6120      	str	r0, [r4, #16]
 8007f26:	b15b      	cbz	r3, 8007f40 <__smakebuf_r+0x74>
 8007f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f000 f8d1 	bl	80080d4 <_isatty_r>
 8007f32:	b128      	cbz	r0, 8007f40 <__smakebuf_r+0x74>
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	f043 0301 	orr.w	r3, r3, #1
 8007f3e:	81a3      	strh	r3, [r4, #12]
 8007f40:	89a0      	ldrh	r0, [r4, #12]
 8007f42:	4305      	orrs	r5, r0
 8007f44:	81a5      	strh	r5, [r4, #12]
 8007f46:	e7cd      	b.n	8007ee4 <__smakebuf_r+0x18>
 8007f48:	08007cd9 	.word	0x08007cd9

08007f4c <_malloc_usable_size_r>:
 8007f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f50:	1f18      	subs	r0, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfbc      	itt	lt
 8007f56:	580b      	ldrlt	r3, [r1, r0]
 8007f58:	18c0      	addlt	r0, r0, r3
 8007f5a:	4770      	bx	lr

08007f5c <_raise_r>:
 8007f5c:	291f      	cmp	r1, #31
 8007f5e:	b538      	push	{r3, r4, r5, lr}
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	d904      	bls.n	8007f70 <_raise_r+0x14>
 8007f66:	2316      	movs	r3, #22
 8007f68:	6003      	str	r3, [r0, #0]
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f72:	b112      	cbz	r2, 8007f7a <_raise_r+0x1e>
 8007f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f78:	b94b      	cbnz	r3, 8007f8e <_raise_r+0x32>
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f830 	bl	8007fe0 <_getpid_r>
 8007f80:	462a      	mov	r2, r5
 8007f82:	4601      	mov	r1, r0
 8007f84:	4620      	mov	r0, r4
 8007f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8a:	f000 b817 	b.w	8007fbc <_kill_r>
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d00a      	beq.n	8007fa8 <_raise_r+0x4c>
 8007f92:	1c59      	adds	r1, r3, #1
 8007f94:	d103      	bne.n	8007f9e <_raise_r+0x42>
 8007f96:	2316      	movs	r3, #22
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	e7e7      	b.n	8007f6e <_raise_r+0x12>
 8007f9e:	2400      	movs	r4, #0
 8007fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	4798      	blx	r3
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e7e0      	b.n	8007f6e <_raise_r+0x12>

08007fac <raise>:
 8007fac:	4b02      	ldr	r3, [pc, #8]	; (8007fb8 <raise+0xc>)
 8007fae:	4601      	mov	r1, r0
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f7ff bfd3 	b.w	8007f5c <_raise_r>
 8007fb6:	bf00      	nop
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <_kill_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d07      	ldr	r5, [pc, #28]	; (8007fdc <_kill_r+0x20>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f7f9 fbe9 	bl	80017a0 <_kill>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d102      	bne.n	8007fd8 <_kill_r+0x1c>
 8007fd2:	682b      	ldr	r3, [r5, #0]
 8007fd4:	b103      	cbz	r3, 8007fd8 <_kill_r+0x1c>
 8007fd6:	6023      	str	r3, [r4, #0]
 8007fd8:	bd38      	pop	{r3, r4, r5, pc}
 8007fda:	bf00      	nop
 8007fdc:	200004ec 	.word	0x200004ec

08007fe0 <_getpid_r>:
 8007fe0:	f7f9 bbd6 	b.w	8001790 <_getpid>

08007fe4 <__sread>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fec:	f000 f894 	bl	8008118 <_read_r>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	bfab      	itete	ge
 8007ff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff8:	181b      	addge	r3, r3, r0
 8007ffa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ffe:	bfac      	ite	ge
 8008000:	6563      	strge	r3, [r4, #84]	; 0x54
 8008002:	81a3      	strhlt	r3, [r4, #12]
 8008004:	bd10      	pop	{r4, pc}

08008006 <__swrite>:
 8008006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800a:	461f      	mov	r7, r3
 800800c:	898b      	ldrh	r3, [r1, #12]
 800800e:	05db      	lsls	r3, r3, #23
 8008010:	4605      	mov	r5, r0
 8008012:	460c      	mov	r4, r1
 8008014:	4616      	mov	r6, r2
 8008016:	d505      	bpl.n	8008024 <__swrite+0x1e>
 8008018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801c:	2302      	movs	r3, #2
 800801e:	2200      	movs	r2, #0
 8008020:	f000 f868 	bl	80080f4 <_lseek_r>
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800802a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	4632      	mov	r2, r6
 8008032:	463b      	mov	r3, r7
 8008034:	4628      	mov	r0, r5
 8008036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800803a:	f000 b817 	b.w	800806c <_write_r>

0800803e <__sseek>:
 800803e:	b510      	push	{r4, lr}
 8008040:	460c      	mov	r4, r1
 8008042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008046:	f000 f855 	bl	80080f4 <_lseek_r>
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	bf15      	itete	ne
 8008050:	6560      	strne	r0, [r4, #84]	; 0x54
 8008052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800805a:	81a3      	strheq	r3, [r4, #12]
 800805c:	bf18      	it	ne
 800805e:	81a3      	strhne	r3, [r4, #12]
 8008060:	bd10      	pop	{r4, pc}

08008062 <__sclose>:
 8008062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008066:	f000 b813 	b.w	8008090 <_close_r>
	...

0800806c <_write_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d07      	ldr	r5, [pc, #28]	; (800808c <_write_r+0x20>)
 8008070:	4604      	mov	r4, r0
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	2200      	movs	r2, #0
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7f9 fbc7 	bl	800180e <_write>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_write_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_write_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	200004ec 	.word	0x200004ec

08008090 <_close_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	; (80080ac <_close_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7f9 fbd3 	bl	8001846 <_close>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_close_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_close_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	200004ec 	.word	0x200004ec

080080b0 <_fstat_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	; (80080d0 <_fstat_r+0x20>)
 80080b4:	2300      	movs	r3, #0
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	4611      	mov	r1, r2
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	f7f9 fbce 	bl	800185e <_fstat>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d102      	bne.n	80080cc <_fstat_r+0x1c>
 80080c6:	682b      	ldr	r3, [r5, #0]
 80080c8:	b103      	cbz	r3, 80080cc <_fstat_r+0x1c>
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	bd38      	pop	{r3, r4, r5, pc}
 80080ce:	bf00      	nop
 80080d0:	200004ec 	.word	0x200004ec

080080d4 <_isatty_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d06      	ldr	r5, [pc, #24]	; (80080f0 <_isatty_r+0x1c>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7f9 fbcd 	bl	800187e <_isatty>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_isatty_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_isatty_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	200004ec 	.word	0x200004ec

080080f4 <_lseek_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d07      	ldr	r5, [pc, #28]	; (8008114 <_lseek_r+0x20>)
 80080f8:	4604      	mov	r4, r0
 80080fa:	4608      	mov	r0, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	2200      	movs	r2, #0
 8008100:	602a      	str	r2, [r5, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f7f9 fbc6 	bl	8001894 <_lseek>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d102      	bne.n	8008112 <_lseek_r+0x1e>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	b103      	cbz	r3, 8008112 <_lseek_r+0x1e>
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	200004ec 	.word	0x200004ec

08008118 <_read_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	; (8008138 <_read_r+0x20>)
 800811c:	4604      	mov	r4, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7f9 fb54 	bl	80017d4 <_read>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_read_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_read_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	200004ec 	.word	0x200004ec

0800813c <_init>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr

08008148 <_fini>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr


N_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800d3b0  0800d3b0  0001d3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db80  0800db80  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800db80  0800db80  0001db80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db88  0800db88  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db88  0800db88  0001db88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db8c  0800db8c  0001db8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800db90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  200001e0  0800dd70  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800dd70  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dd4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003438  00000000  00000000  00033fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00037420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  000382f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265df  00000000  00000000  00039050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181ba  00000000  00000000  0005f62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9da3  00000000  00000000  000777e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015158c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  001515dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d398 	.word	0x0800d398

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800d398 	.word	0x0800d398

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <application>:
#include "app_config.h"
#include "com_config.h"
struct data d;

void application(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	Configurator();
 800105c:	f000 fa6a 	bl	8001534 <Configurator>
//	strcpy(d.CH4, "ADC4");
//	strcpy(d.Status1, "GPIO1");
//	strcpy(d.Status2, "GPIO2");
//	strcpy(d.Status3, "GPIO3");
//	strcpy(d.Status4, "GPIO4");
	get_time(&d);
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <application+0x24>)
 8001062:	f000 fa17 	bl	8001494 <get_time>
    ADC_handler(&d);
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <application+0x24>)
 8001068:	f000 f830 	bl	80010cc <ADC_handler>
	DataToGsm(&d);
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <application+0x24>)
 800106e:	f000 f89f 	bl	80011b0 <DataToGsm>
	terminal(&d);
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <application+0x24>)
 8001074:	f000 fe44 	bl	8001d00 <terminal>


}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001fc 	.word	0x200001fc

08001080 <voltage_cal>:
uint16_t raw_value;

//float adc1_value,adc2_value,adc3_value,adc4_value;

float voltage_cal(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	 raw_value = adc_value();
 8001084:	f001 f880 	bl	8002188 <adc_value>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <voltage_cal+0x48>)
 800108e:	801a      	strh	r2, [r3, #0]
	return (raw_value * (3.3 / 4095));
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <voltage_cal+0x48>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa75 	bl	8000584 <__aeabi_i2d>
 800109a:	a309      	add	r3, pc, #36	; (adr r3, 80010c0 <voltage_cal+0x40>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fada 	bl	8000658 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fdcc 	bl	8000c48 <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	ee07 3a90 	vmov	s15, r3
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	f3af 8000 	nop.w
 80010c0:	e734d9b4 	.word	0xe734d9b4
 80010c4:	3f4a680c 	.word	0x3f4a680c
 80010c8:	20000258 	.word	0x20000258

080010cc <ADC_handler>:

void ADC_handler(struct data *d)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if(adcChnlChecker[0] == 1)
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <ADC_handler+0xe0>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10f      	bne.n	80010fc <ADC_handler+0x30>
	{

		ADC_select_CH1();
 80010dc:	f000 ff5e 	bl	8001f9c <ADC_select_CH1>
		adc_start();
 80010e0:	f001 f83c 	bl	800215c <adc_start>
		adc_conversion();
 80010e4:	f001 f844 	bl	8002170 <adc_conversion>
		d->adc1_value = voltage_cal();
 80010e8:	f7ff ffca 	bl	8001080 <voltage_cal>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	edc3 7a07 	vstr	s15, [r3, #28]
		adc_stop();
 80010f6:	f001 f853 	bl	80021a0 <adc_stop>
 80010fa:	e005      	b.n	8001108 <ADC_handler+0x3c>
	}
	else if (adcChnlChecker[0] == 0)
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <ADC_handler+0xe0>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <ADC_handler+0x3c>
	{
		ADC_select_CH1();
 8001104:	f000 ff4a 	bl	8001f9c <ADC_select_CH1>
	}

	if(adcChnlChecker[1] == 1)
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <ADC_handler+0xe0>)
 800110a:	785b      	ldrb	r3, [r3, #1]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10f      	bne.n	8001130 <ADC_handler+0x64>
	{
		ADC_select_CH2();
 8001110:	f000 ff7c 	bl	800200c <ADC_select_CH2>
		adc_start();
 8001114:	f001 f822 	bl	800215c <adc_start>
		adc_conversion();
 8001118:	f001 f82a 	bl	8002170 <adc_conversion>
		d->adc2_value = voltage_cal();
 800111c:	f7ff ffb0 	bl	8001080 <voltage_cal>
 8001120:	eef0 7a40 	vmov.f32	s15, s0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edc3 7a08 	vstr	s15, [r3, #32]
		adc_stop();
 800112a:	f001 f839 	bl	80021a0 <adc_stop>
 800112e:	e005      	b.n	800113c <ADC_handler+0x70>
	}
	else if (adcChnlChecker[1] == 0)
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <ADC_handler+0xe0>)
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <ADC_handler+0x70>
	{
		ADC_select_CH2();
 8001138:	f000 ff68 	bl	800200c <ADC_select_CH2>
	}

	if(adcChnlChecker[2] == 1)
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <ADC_handler+0xe0>)
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d10f      	bne.n	8001164 <ADC_handler+0x98>
	{
		ADC_select_CH3();
 8001144:	f000 ff9a 	bl	800207c <ADC_select_CH3>
		adc_start();
 8001148:	f001 f808 	bl	800215c <adc_start>
		adc_conversion();
 800114c:	f001 f810 	bl	8002170 <adc_conversion>
		d->adc3_value = voltage_cal();
 8001150:	f7ff ff96 	bl	8001080 <voltage_cal>
 8001154:	eef0 7a40 	vmov.f32	s15, s0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		adc_stop();
 800115e:	f001 f81f 	bl	80021a0 <adc_stop>
 8001162:	e005      	b.n	8001170 <ADC_handler+0xa4>
	}
	else if (adcChnlChecker[2] == 0)
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <ADC_handler+0xe0>)
 8001166:	789b      	ldrb	r3, [r3, #2]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <ADC_handler+0xa4>
	{
		ADC_select_CH3();
 800116c:	f000 ff86 	bl	800207c <ADC_select_CH3>
	}

	if(adcChnlChecker[3] == 1)
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <ADC_handler+0xe0>)
 8001172:	78db      	ldrb	r3, [r3, #3]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10f      	bne.n	8001198 <ADC_handler+0xcc>
	{
		ADC_select_CH4();
 8001178:	f000 ffb8 	bl	80020ec <ADC_select_CH4>
		adc_start();
 800117c:	f000 ffee 	bl	800215c <adc_start>
		adc_conversion();
 8001180:	f000 fff6 	bl	8002170 <adc_conversion>
		d->adc4_value = voltage_cal();
 8001184:	f7ff ff7c 	bl	8001080 <voltage_cal>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		adc_stop();
 8001192:	f001 f805 	bl	80021a0 <adc_stop>
	{
		ADC_select_CH4();
	}
//	adc_stop();

}
 8001196:	e005      	b.n	80011a4 <ADC_handler+0xd8>
	else if (adcChnlChecker[3] == 0)
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <ADC_handler+0xe0>)
 800119a:	78db      	ldrb	r3, [r3, #3]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <ADC_handler+0xd8>
		ADC_select_CH4();
 80011a0:	f000 ffa4 	bl	80020ec <ADC_select_CH4>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000314 	.word	0x20000314

080011b0 <DataToGsm>:


UART_HandleTypeDef huart2;

void DataToGsm(struct data *d)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af06      	add	r7, sp, #24
 80011b6:	6078      	str	r0, [r7, #4]

	uint8_t New_value=d->minutes;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	73fb      	strb	r3, [r7, #15]

	//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf((char*)buffer_Time,"%02d:%02d:%02d",d->hour,d->minutes,d->seconds);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	461a      	mov	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	4619      	mov	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	460b      	mov	r3, r1
 80011d2:	495c      	ldr	r1, [pc, #368]	; (8001344 <DataToGsm+0x194>)
 80011d4:	485c      	ldr	r0, [pc, #368]	; (8001348 <DataToGsm+0x198>)
 80011d6:	f008 fb65 	bl	80098a4 <siprintf>
	sprintf((char*)buffer_Date,"%02d/%02d/%02d",d->dayofmonth,d->month,d->year);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	795b      	ldrb	r3, [r3, #5]
 80011e4:	4619      	mov	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	799b      	ldrb	r3, [r3, #6]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	460b      	mov	r3, r1
 80011ee:	4957      	ldr	r1, [pc, #348]	; (800134c <DataToGsm+0x19c>)
 80011f0:	4857      	ldr	r0, [pc, #348]	; (8001350 <DataToGsm+0x1a0>)
 80011f2:	f008 fb57 	bl	80098a4 <siprintf>

	//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);
	sprintf((char*)CH1,"%f",d->adc1_value);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9d4 	bl	80005a8 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4953      	ldr	r1, [pc, #332]	; (8001354 <DataToGsm+0x1a4>)
 8001206:	4854      	ldr	r0, [pc, #336]	; (8001358 <DataToGsm+0x1a8>)
 8001208:	f008 fb4c 	bl	80098a4 <siprintf>
	sprintf((char*)CH2,"%f",d->adc2_value);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f9c9 	bl	80005a8 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	494e      	ldr	r1, [pc, #312]	; (8001354 <DataToGsm+0x1a4>)
 800121c:	484f      	ldr	r0, [pc, #316]	; (800135c <DataToGsm+0x1ac>)
 800121e:	f008 fb41 	bl	80098a4 <siprintf>
	sprintf((char*)CH3,"%f",d->adc3_value);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9be 	bl	80005a8 <__aeabi_f2d>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4948      	ldr	r1, [pc, #288]	; (8001354 <DataToGsm+0x1a4>)
 8001232:	484b      	ldr	r0, [pc, #300]	; (8001360 <DataToGsm+0x1b0>)
 8001234:	f008 fb36 	bl	80098a4 <siprintf>
	sprintf((char*)CH4,"%f",d->adc4_value);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f9b3 	bl	80005a8 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4943      	ldr	r1, [pc, #268]	; (8001354 <DataToGsm+0x1a4>)
 8001248:	4846      	ldr	r0, [pc, #280]	; (8001364 <DataToGsm+0x1b4>)
 800124a:	f008 fb2b 	bl	80098a4 <siprintf>

	if(d->GPIO[0]==1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001254:	2b01      	cmp	r3, #1
 8001256:	d107      	bne.n	8001268 <DataToGsm+0xb8>
	{
		strcpy(d->Status1, "High");
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3331      	adds	r3, #49	; 0x31
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <DataToGsm+0x1b8>)
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	6018      	str	r0, [r3, #0]
 8001262:	7912      	ldrb	r2, [r2, #4]
 8001264:	711a      	strb	r2, [r3, #4]
 8001266:	e004      	b.n	8001272 <DataToGsm+0xc2>
	}
	else
	{
		strcpy(d->Status1, "Low");
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3331      	adds	r3, #49	; 0x31
 800126c:	4a3f      	ldr	r2, [pc, #252]	; (800136c <DataToGsm+0x1bc>)
 800126e:	6810      	ldr	r0, [r2, #0]
 8001270:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[1]==1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <DataToGsm+0xdc>
	{
		strcpy(d->Status2, "High");
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	333b      	adds	r3, #59	; 0x3b
 8001280:	4a39      	ldr	r2, [pc, #228]	; (8001368 <DataToGsm+0x1b8>)
 8001282:	6810      	ldr	r0, [r2, #0]
 8001284:	6018      	str	r0, [r3, #0]
 8001286:	7912      	ldrb	r2, [r2, #4]
 8001288:	711a      	strb	r2, [r3, #4]
 800128a:	e004      	b.n	8001296 <DataToGsm+0xe6>
	}
	else
	{
		strcpy(d->Status2, "Low");
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	333b      	adds	r3, #59	; 0x3b
 8001290:	4a36      	ldr	r2, [pc, #216]	; (800136c <DataToGsm+0x1bc>)
 8001292:	6810      	ldr	r0, [r2, #0]
 8001294:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[2]==1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800129c:	2b01      	cmp	r3, #1
 800129e:	d107      	bne.n	80012b0 <DataToGsm+0x100>
	{
		strcpy(d->Status3, "High");
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3345      	adds	r3, #69	; 0x45
 80012a4:	4a30      	ldr	r2, [pc, #192]	; (8001368 <DataToGsm+0x1b8>)
 80012a6:	6810      	ldr	r0, [r2, #0]
 80012a8:	6018      	str	r0, [r3, #0]
 80012aa:	7912      	ldrb	r2, [r2, #4]
 80012ac:	711a      	strb	r2, [r3, #4]
 80012ae:	e004      	b.n	80012ba <DataToGsm+0x10a>
	}
	else
	{
		strcpy(d->Status3, "Low");
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3345      	adds	r3, #69	; 0x45
 80012b4:	4a2d      	ldr	r2, [pc, #180]	; (800136c <DataToGsm+0x1bc>)
 80012b6:	6810      	ldr	r0, [r2, #0]
 80012b8:	6018      	str	r0, [r3, #0]
	}

	if(d->GPIO[3]==1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <DataToGsm+0x124>
	{
		strcpy(d->Status4, "High");
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	334f      	adds	r3, #79	; 0x4f
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <DataToGsm+0x1b8>)
 80012ca:	6810      	ldr	r0, [r2, #0]
 80012cc:	6018      	str	r0, [r3, #0]
 80012ce:	7912      	ldrb	r2, [r2, #4]
 80012d0:	711a      	strb	r2, [r3, #4]
 80012d2:	e004      	b.n	80012de <DataToGsm+0x12e>
	}
	else
	{
		strcpy(d->Status4, "Low");
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	334f      	adds	r3, #79	; 0x4f
 80012d8:	4a24      	ldr	r2, [pc, #144]	; (800136c <DataToGsm+0x1bc>)
 80012da:	6810      	ldr	r0, [r2, #0]
 80012dc:	6018      	str	r0, [r3, #0]
	}


	if (New_value != Old_value) {
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <DataToGsm+0x1c0>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d005      	beq.n	80012f4 <DataToGsm+0x144>
	        count++;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <DataToGsm+0x1c4>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <DataToGsm+0x1c4>)
 80012f2:	701a      	strb	r2, [r3, #0]
	    }

	if (count >= d->scan_time) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <DataToGsm+0x1c4>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d818      	bhi.n	8001334 <DataToGsm+0x184>
	        // Transmit data
	        DataToCloud(buffer_Time, buffer_Date, CH1, CH2, CH3, CH4, d->Status1, d->Status2, d->Status3, d->Status4);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3331      	adds	r3, #49	; 0x31
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	323b      	adds	r2, #59	; 0x3b
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	3145      	adds	r1, #69	; 0x45
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	304f      	adds	r0, #79	; 0x4f
 8001312:	9005      	str	r0, [sp, #20]
 8001314:	9104      	str	r1, [sp, #16]
 8001316:	9203      	str	r2, [sp, #12]
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <DataToGsm+0x1b4>)
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <DataToGsm+0x1b0>)
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <DataToGsm+0x1ac>)
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <DataToGsm+0x1a8>)
 8001326:	490a      	ldr	r1, [pc, #40]	; (8001350 <DataToGsm+0x1a0>)
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <DataToGsm+0x198>)
 800132a:	f000 ffb3 	bl	8002294 <DataToCloud>
	        count = 0; // Reset the counter after transmission
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <DataToGsm+0x1c4>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	    }
	Old_value = New_value;
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <DataToGsm+0x1c0>)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	7013      	strb	r3, [r2, #0]

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800d3b0 	.word	0x0800d3b0
 8001348:	2000025c 	.word	0x2000025c
 800134c:	0800d3c0 	.word	0x0800d3c0
 8001350:	2000026c 	.word	0x2000026c
 8001354:	0800d3d0 	.word	0x0800d3d0
 8001358:	2000027c 	.word	0x2000027c
 800135c:	20000288 	.word	0x20000288
 8001360:	20000294 	.word	0x20000294
 8001364:	200002a0 	.word	0x200002a0
 8001368:	0800d3d4 	.word	0x0800d3d4
 800136c:	0800d3dc 	.word	0x0800d3dc
 8001370:	200002aa 	.word	0x200002aa
 8001374:	200002ab 	.word	0x200002ab

08001378 <dec_bcd>:
#define RTC_add 0xD0

//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <dec_bcd+0x48>)
 8001384:	fb82 1203 	smull	r1, r2, r2, r3
 8001388:	1092      	asrs	r2, r2, #2
 800138a:	17db      	asrs	r3, r3, #31
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <dec_bcd+0x48>)
 8001398:	fb83 1302 	smull	r1, r3, r3, r2
 800139c:	1099      	asrs	r1, r3, #2
 800139e:	17d3      	asrs	r3, r2, #31
 80013a0:	1ac9      	subs	r1, r1, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	1ad1      	subs	r1, r2, r3
 80013ac:	b2cb      	uxtb	r3, r1
 80013ae:	4403      	add	r3, r0
 80013b0:	b2db      	uxtb	r3, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	66666667 	.word	0x66666667

080013c4 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	4413      	add	r3, r2
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <set_time>:




void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	4604      	mov	r4, r0
 80013fc:	4608      	mov	r0, r1
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	4623      	mov	r3, r4
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	4603      	mov	r3, r0
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	460b      	mov	r3, r1
 800140c:	717b      	strb	r3, [r7, #5]
 800140e:	4613      	mov	r3, r2
 8001410:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffaf 	bl	8001378 <dec_bcd>
 800141a:	4603      	mov	r3, r0
 800141c:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ffa9 	bl	8001378 <dec_bcd>
 8001426:	4603      	mov	r3, r0
 8001428:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ffa3 	bl	8001378 <dec_bcd>
 8001432:	4603      	mov	r3, r0
 8001434:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff9d 	bl	8001378 <dec_bcd>
 800143e:	4603      	mov	r3, r0
 8001440:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 8001442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff96 	bl	8001378 <dec_bcd>
 800144c:	4603      	mov	r3, r0
 800144e:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8001450:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff8f 	bl	8001378 <dec_bcd>
 800145a:	4603      	mov	r3, r0
 800145c:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 800145e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff88 	bl	8001378 <dec_bcd>
 8001468:	4603      	mov	r3, r0
 800146a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2307      	movs	r3, #7
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	2200      	movs	r2, #0
 8001480:	21d0      	movs	r1, #208	; 0xd0
 8001482:	4803      	ldr	r0, [pc, #12]	; (8001490 <set_time+0x9c>)
 8001484:	f003 f82a 	bl	80044dc <HAL_I2C_Mem_Write>
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	20000550 	.word	0x20000550

08001494 <get_time>:



void get_time(struct data *d)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	2307      	movs	r3, #7
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2200      	movs	r2, #0
 80014b0:	21d0      	movs	r1, #208	; 0xd0
 80014b2:	481f      	ldr	r0, [pc, #124]	; (8001530 <get_time+0x9c>)
 80014b4:	f003 f90c 	bl	80046d0 <HAL_I2C_Mem_Read>
	d->seconds=bcd_dec(get_time[0]);
 80014b8:	7a3b      	ldrb	r3, [r7, #8]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff82 	bl	80013c4 <bcd_dec>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	701a      	strb	r2, [r3, #0]
	d->minutes=bcd_dec(get_time[1]);
 80014c8:	7a7b      	ldrb	r3, [r7, #9]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff7a 	bl	80013c4 <bcd_dec>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	705a      	strb	r2, [r3, #1]
	d->hour=bcd_dec(get_time[2]);
 80014d8:	7abb      	ldrb	r3, [r7, #10]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff72 	bl	80013c4 <bcd_dec>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	709a      	strb	r2, [r3, #2]
	d->dayofweek=bcd_dec(get_time[3]);
 80014e8:	7afb      	ldrb	r3, [r7, #11]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff6a 	bl	80013c4 <bcd_dec>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	70da      	strb	r2, [r3, #3]
	d->dayofmonth=bcd_dec(get_time[4]);
 80014f8:	7b3b      	ldrb	r3, [r7, #12]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff62 	bl	80013c4 <bcd_dec>
 8001500:	4603      	mov	r3, r0
 8001502:	b2da      	uxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	711a      	strb	r2, [r3, #4]
	d->month=bcd_dec(get_time[5]);
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff5a 	bl	80013c4 <bcd_dec>
 8001510:	4603      	mov	r3, r0
 8001512:	b2da      	uxtb	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	715a      	strb	r2, [r3, #5]
	d->year=bcd_dec(get_time[6]);
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff52 	bl	80013c4 <bcd_dec>
 8001520:	4603      	mov	r3, r0
 8001522:	b2da      	uxtb	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	719a      	strb	r2, [r3, #6]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000550 	.word	0x20000550

08001534 <Configurator>:
uint8_t rxBuffer;  // UART receive buffer
CircularQueue rxQueue;// Circular queue for storing received data
static char command[20];  // Temporary storage for a single command

void Configurator()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	data_receive();
 8001538:	f001 f944 	bl	80027c4 <data_receive>
//		flag=0;
//	}
//
//	if (flag)

	Process_Commands();
 800153c:	f000 f82e 	bl	800159c <Process_Commands>
	reset_output(&d);
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <Configurator+0x24>)
 8001542:	f000 f8b3 	bl	80016ac <reset_output>
	set_output(&d);
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <Configurator+0x24>)
 8001548:	f000 f86a 	bl	8001620 <set_output>
	read_pinstatus(&d);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <Configurator+0x24>)
 800154e:	f000 f8f3 	bl	8001738 <read_pinstatus>
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001fc 	.word	0x200001fc

0800155c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <HAL_UART_RxCpltCallback+0x30>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10a      	bne.n	8001584 <HAL_UART_RxCpltCallback+0x28>
    {
        // Enqueue received bytes into the circular queue

            if (!CircularQueue_Enqueue(&rxQueue, rxBuffer))
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_UART_RxCpltCallback+0x34>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <HAL_UART_RxCpltCallback+0x38>)
 8001576:	f000 fc4f 	bl	8001e18 <CircularQueue_Enqueue>
            {
                // Handle queue overflow if necessary (optional)
            }

        // Restart UART reception for the next chunk of data
        HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);
 800157a:	2201      	movs	r2, #1
 800157c:	4904      	ldr	r1, [pc, #16]	; (8001590 <HAL_UART_RxCpltCallback+0x34>)
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <HAL_UART_RxCpltCallback+0x3c>)
 8001580:	f006 fa0e 	bl	80079a0 <HAL_UART_Receive_IT>
    }
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40011000 	.word	0x40011000
 8001590:	20000318 	.word	0x20000318
 8001594:	2000031c 	.word	0x2000031c
 8001598:	200002b0 	.word	0x200002b0

0800159c <Process_Commands>:

void Process_Commands(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	    static uint8_t cmdIndex = 0;  // Persistent index to track the current command
	    uint8_t byte;

    while (!CircularQueue_IsEmpty(&rxQueue)) {
 80015a2:	e028      	b.n	80015f6 <Process_Commands+0x5a>
        CircularQueue_Dequeue(&rxQueue, &byte);
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	4619      	mov	r1, r3
 80015a8:	481a      	ldr	r0, [pc, #104]	; (8001614 <Process_Commands+0x78>)
 80015aa:	f000 fc5e 	bl	8001e6a <CircularQueue_Dequeue>

        // Add byte to the command
        if (byte != ';') {
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b3b      	cmp	r3, #59	; 0x3b
 80015b2:	d012      	beq.n	80015da <Process_Commands+0x3e>
            if (cmdIndex < sizeof(command) - 1) {
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <Process_Commands+0x7c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b12      	cmp	r3, #18
 80015ba:	d80a      	bhi.n	80015d2 <Process_Commands+0x36>
                command[cmdIndex++] = byte;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <Process_Commands+0x7c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	b2d1      	uxtb	r1, r2
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <Process_Commands+0x7c>)
 80015c6:	7011      	strb	r1, [r2, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	79f9      	ldrb	r1, [r7, #7]
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <Process_Commands+0x80>)
 80015ce:	5499      	strb	r1, [r3, r2]
 80015d0:	e011      	b.n	80015f6 <Process_Commands+0x5a>
            } else {
                // Handle command overflow (optional)
                cmdIndex = 0;  // Reset on overflow
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <Process_Commands+0x7c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e00d      	b.n	80015f6 <Process_Commands+0x5a>
            }
        } else {
            // Command completed when '\n' is received
            command[cmdIndex] = '\0';  // Null-terminate the command
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <Process_Commands+0x7c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <Process_Commands+0x80>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	5499      	strb	r1, [r3, r2]
            cmdIndex = 0;
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <Process_Commands+0x7c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]

            // Process the command
            extract_data(command);
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <Process_Commands+0x80>)
 80015ee:	f000 f8e5 	bl	80017bc <extract_data>
            pin_config();
 80015f2:	f000 f929 	bl	8001848 <pin_config>
    while (!CircularQueue_IsEmpty(&rxQueue)) {
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <Process_Commands+0x78>)
 80015f8:	f000 fbf9 	bl	8001dee <CircularQueue_IsEmpty>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1cd      	bne.n	80015a4 <Process_Commands+0x8>
        }
    }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000031c 	.word	0x2000031c
 8001618:	200003b4 	.word	0x200003b4
 800161c:	200003a0 	.word	0x200003a0

08001620 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

void set_output(struct data *d)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <set_output+0x80>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <set_output+0x24>
	{
		d->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2104      	movs	r1, #4
 8001634:	481b      	ldr	r0, [pc, #108]	; (80016a4 <set_output+0x84>)
 8001636:	f001 f8e7 	bl	8002808 <write_gpio>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(config[1] == 0)
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <set_output+0x80>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <set_output+0x40>
	{
		d->GPIO[1] = write_gpio(GPIOC,GPIO_PIN_1, PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	2102      	movs	r1, #2
 8001650:	4815      	ldr	r0, [pc, #84]	; (80016a8 <set_output+0x88>)
 8001652:	f001 f8d9 	bl	8002808 <write_gpio>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	if(config[2] == 0)
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <set_output+0x80>)
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <set_output+0x5c>
	{
		d->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2110      	movs	r1, #16
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <set_output+0x84>)
 800166e:	f001 f8cb 	bl	8002808 <write_gpio>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if(config[3] == 0)
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <set_output+0x80>)
 800167e:	78db      	ldrb	r3, [r3, #3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <set_output+0x78>
	{
		d->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	2120      	movs	r1, #32
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <set_output+0x84>)
 800168a:	f001 f8bd 	bl	8002808 <write_gpio>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000310 	.word	0x20000310
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800

080016ac <reset_output>:

void reset_output(struct data *d1)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	if(config[0] == 0)
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <reset_output+0x80>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <reset_output+0x24>
	{
		d1->GPIO[0] = write_gpio(GPIOB,GPIO_PIN_2, PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2104      	movs	r1, #4
 80016c0:	481b      	ldr	r0, [pc, #108]	; (8001730 <reset_output+0x84>)
 80016c2:	f001 f8a1 	bl	8002808 <write_gpio>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(config[1] == 0)
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <reset_output+0x80>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <reset_output+0x40>
	{
		d1->GPIO[1]=write_gpio(GPIOC,GPIO_PIN_1, PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2102      	movs	r1, #2
 80016dc:	4815      	ldr	r0, [pc, #84]	; (8001734 <reset_output+0x88>)
 80016de:	f001 f893 	bl	8002808 <write_gpio>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	if(config[2] == 0)
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <reset_output+0x80>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <reset_output+0x5c>
	{
		d1->GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2110      	movs	r1, #16
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <reset_output+0x84>)
 80016fa:	f001 f885 	bl	8002808 <write_gpio>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if(config[3] == 0)
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <reset_output+0x80>)
 800170a:	78db      	ldrb	r3, [r3, #3]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <reset_output+0x78>
	{
		d1->GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2120      	movs	r1, #32
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <reset_output+0x84>)
 8001716:	f001 f877 	bl	8002808 <write_gpio>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000310 	.word	0x20000310
 8001730:	40020400 	.word	0x40020400
 8001734:	40020800 	.word	0x40020800

08001738 <read_pinstatus>:

void read_pinstatus(struct data *d2)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if(config[0]==1)
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <read_pinstatus+0x78>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <read_pinstatus+0x22>
	{
		d2->GPIO[0]=read_gpio( GPIOB,GPIO_PIN_2);
 8001748:	2104      	movs	r1, #4
 800174a:	481a      	ldr	r0, [pc, #104]	; (80017b4 <read_pinstatus+0x7c>)
 800174c:	f001 f84c 	bl	80027e8 <read_gpio>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if(config[1]==1)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <read_pinstatus+0x78>)
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <read_pinstatus+0x3c>
	{
		d2->GPIO[1]=read_gpio(GPIOC,GPIO_PIN_1);
 8001762:	2102      	movs	r1, #2
 8001764:	4814      	ldr	r0, [pc, #80]	; (80017b8 <read_pinstatus+0x80>)
 8001766:	f001 f83f 	bl	80027e8 <read_gpio>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	if(config[2]==1)
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <read_pinstatus+0x78>)
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <read_pinstatus+0x56>
	{
		d2->GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 800177c:	2110      	movs	r1, #16
 800177e:	480d      	ldr	r0, [pc, #52]	; (80017b4 <read_pinstatus+0x7c>)
 8001780:	f001 f832 	bl	80027e8 <read_gpio>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	if(config[3]==1)
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <read_pinstatus+0x78>)
 8001790:	78db      	ldrb	r3, [r3, #3]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <read_pinstatus+0x70>
	{
		d2->GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 8001796:	2120      	movs	r1, #32
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <read_pinstatus+0x7c>)
 800179a:	f001 f825 	bl	80027e8 <read_gpio>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	//	 return d->GPIO;
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000310 	.word	0x20000310
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020800 	.word	0x40020800

080017bc <extract_data>:


void extract_data(char* command)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	token = strtok(command, ",");
 80017c4:	491a      	ldr	r1, [pc, #104]	; (8001830 <extract_data+0x74>)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f008 fed2 	bl	800a570 <strtok>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a19      	ldr	r2, [pc, #100]	; (8001834 <extract_data+0x78>)
 80017d0:	6013      	str	r3, [r2, #0]


	if (token != NULL)
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <extract_data+0x78>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d014      	beq.n	8001804 <extract_data+0x48>
	{
		strncpy(arr1, token, sizeof(arr1) - 1);
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <extract_data+0x78>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2209      	movs	r2, #9
 80017e0:	4619      	mov	r1, r3
 80017e2:	4815      	ldr	r0, [pc, #84]	; (8001838 <extract_data+0x7c>)
 80017e4:	f008 f886 	bl	80098f4 <strncpy>

		arr1[sizeof(arr1) - 1] = '\0';// Ensure null-termination
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <extract_data+0x7c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr1,arr1);
 80017ee:	4912      	ldr	r1, [pc, #72]	; (8001838 <extract_data+0x7c>)
 80017f0:	4812      	ldr	r0, [pc, #72]	; (800183c <extract_data+0x80>)
 80017f2:	f008 f877 	bl	80098e4 <strcpy>


		token = strtok(NULL, ",");
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <extract_data+0x74>)
 80017f8:	2000      	movs	r0, #0
 80017fa:	f008 feb9 	bl	800a570 <strtok>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <extract_data+0x78>)
 8001802:	6013      	str	r3, [r2, #0]
	}

	// Get the second token and store it in arr2
	if (token != NULL)
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <extract_data+0x78>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <extract_data+0x6c>
	{
		strncpy(arr2, token, sizeof(arr2) - 1);
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <extract_data+0x78>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2209      	movs	r2, #9
 8001812:	4619      	mov	r1, r3
 8001814:	480a      	ldr	r0, [pc, #40]	; (8001840 <extract_data+0x84>)
 8001816:	f008 f86d 	bl	80098f4 <strncpy>

		arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <extract_data+0x84>)
 800181c:	2200      	movs	r2, #0
 800181e:	725a      	strb	r2, [r3, #9]
		strcpy(d.arr2,arr2);
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <extract_data+0x84>)
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <extract_data+0x88>)
 8001824:	f008 f85e 	bl	80098e4 <strcpy>

		//token = strtok(NULL, ",");
	}


}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	0800d3e0 	.word	0x0800d3e0
 8001834:	2000030c 	.word	0x2000030c
 8001838:	200002f4 	.word	0x200002f4
 800183c:	20000203 	.word	0x20000203
 8001840:	20000300 	.word	0x20000300
 8001844:	2000020d 	.word	0x2000020d

08001848 <pin_config>:


void pin_config()
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af04      	add	r7, sp, #16

	if(strcmp(arr1,"B2")==0)
 800184e:	49a8      	ldr	r1, [pc, #672]	; (8001af0 <pin_config+0x2a8>)
 8001850:	48a8      	ldr	r0, [pc, #672]	; (8001af4 <pin_config+0x2ac>)
 8001852:	f7fe fcdd 	bl	8000210 <strcmp>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <pin_config+0x1c>
	{
		switch_val=1;
 800185c:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <pin_config+0x2b0>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e056      	b.n	8001912 <pin_config+0xca>
	}

	else if(strcmp(arr1,"C1")==0)
 8001864:	49a5      	ldr	r1, [pc, #660]	; (8001afc <pin_config+0x2b4>)
 8001866:	48a3      	ldr	r0, [pc, #652]	; (8001af4 <pin_config+0x2ac>)
 8001868:	f7fe fcd2 	bl	8000210 <strcmp>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <pin_config+0x32>
	{
		switch_val=2;
 8001872:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <pin_config+0x2b0>)
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e04b      	b.n	8001912 <pin_config+0xca>
	}

	else if(strcmp(arr1,"B4")==0)
 800187a:	49a1      	ldr	r1, [pc, #644]	; (8001b00 <pin_config+0x2b8>)
 800187c:	489d      	ldr	r0, [pc, #628]	; (8001af4 <pin_config+0x2ac>)
 800187e:	f7fe fcc7 	bl	8000210 <strcmp>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d103      	bne.n	8001890 <pin_config+0x48>
	{
		switch_val=3;
 8001888:	4b9b      	ldr	r3, [pc, #620]	; (8001af8 <pin_config+0x2b0>)
 800188a:	2203      	movs	r2, #3
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e040      	b.n	8001912 <pin_config+0xca>
	}

	else if(strcmp(arr1,"B5")==0)
 8001890:	499c      	ldr	r1, [pc, #624]	; (8001b04 <pin_config+0x2bc>)
 8001892:	4898      	ldr	r0, [pc, #608]	; (8001af4 <pin_config+0x2ac>)
 8001894:	f7fe fcbc 	bl	8000210 <strcmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <pin_config+0x5e>
	{
		switch_val=4;
 800189e:	4b96      	ldr	r3, [pc, #600]	; (8001af8 <pin_config+0x2b0>)
 80018a0:	2204      	movs	r2, #4
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e035      	b.n	8001912 <pin_config+0xca>
	}

	else if(strcmp(arr1,"ADC1")==0)
 80018a6:	4998      	ldr	r1, [pc, #608]	; (8001b08 <pin_config+0x2c0>)
 80018a8:	4892      	ldr	r0, [pc, #584]	; (8001af4 <pin_config+0x2ac>)
 80018aa:	f7fe fcb1 	bl	8000210 <strcmp>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <pin_config+0x74>
	{
		switch_val=5;
 80018b4:	4b90      	ldr	r3, [pc, #576]	; (8001af8 <pin_config+0x2b0>)
 80018b6:	2205      	movs	r2, #5
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e02a      	b.n	8001912 <pin_config+0xca>
	}
	else if(strcmp(arr1,"DISABLE")==0)
 80018bc:	4993      	ldr	r1, [pc, #588]	; (8001b0c <pin_config+0x2c4>)
 80018be:	488d      	ldr	r0, [pc, #564]	; (8001af4 <pin_config+0x2ac>)
 80018c0:	f7fe fca6 	bl	8000210 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <pin_config+0x8a>
	{
		switch_val=6;
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <pin_config+0x2b0>)
 80018cc:	2206      	movs	r2, #6
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e01f      	b.n	8001912 <pin_config+0xca>
	}

	else if(strcmp(arr1,"TIME")==0)
 80018d2:	498f      	ldr	r1, [pc, #572]	; (8001b10 <pin_config+0x2c8>)
 80018d4:	4887      	ldr	r0, [pc, #540]	; (8001af4 <pin_config+0x2ac>)
 80018d6:	f7fe fc9b 	bl	8000210 <strcmp>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <pin_config+0xa0>
	{
		switch_val=7;
 80018e0:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <pin_config+0x2b0>)
 80018e2:	2207      	movs	r2, #7
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e014      	b.n	8001912 <pin_config+0xca>
	}

	else if(strcmp(arr1,"DATE")==0)
 80018e8:	498a      	ldr	r1, [pc, #552]	; (8001b14 <pin_config+0x2cc>)
 80018ea:	4882      	ldr	r0, [pc, #520]	; (8001af4 <pin_config+0x2ac>)
 80018ec:	f7fe fc90 	bl	8000210 <strcmp>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <pin_config+0xb6>
	{
		switch_val=8;
 80018f6:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <pin_config+0x2b0>)
 80018f8:	2208      	movs	r2, #8
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e009      	b.n	8001912 <pin_config+0xca>
	}

	else if(strcmp(arr1,"SCANTIME")==0)
 80018fe:	4986      	ldr	r1, [pc, #536]	; (8001b18 <pin_config+0x2d0>)
 8001900:	487c      	ldr	r0, [pc, #496]	; (8001af4 <pin_config+0x2ac>)
 8001902:	f7fe fc85 	bl	8000210 <strcmp>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <pin_config+0xca>
	{
		switch_val=9;
 800190c:	4b7a      	ldr	r3, [pc, #488]	; (8001af8 <pin_config+0x2b0>)
 800190e:	2209      	movs	r2, #9
 8001910:	601a      	str	r2, [r3, #0]
	}


	switch(switch_val)
 8001912:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <pin_config+0x2b0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 81e0 	bhi.w	8001cde <pin_config+0x496>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <pin_config+0xdc>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001949 	.word	0x08001949
 8001928:	0800198b 	.word	0x0800198b
 800192c:	080019cd 	.word	0x080019cd
 8001930:	08001a0f 	.word	0x08001a0f
 8001934:	08001a51 	.word	0x08001a51
 8001938:	08001abb 	.word	0x08001abb
 800193c:	08001b7f 	.word	0x08001b7f
 8001940:	08001c17 	.word	0x08001c17
 8001944:	08001cb7 	.word	0x08001cb7
	{

	case 1:
		if(strcmp(arr2,"OUTPUT")==0)
 8001948:	4974      	ldr	r1, [pc, #464]	; (8001b1c <pin_config+0x2d4>)
 800194a:	4875      	ldr	r0, [pc, #468]	; (8001b20 <pin_config+0x2d8>)
 800194c:	f7fe fc60 	bl	8000210 <strcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <pin_config+0x120>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,OUTPUT);
 8001956:	2200      	movs	r2, #0
 8001958:	2104      	movs	r1, #4
 800195a:	4872      	ldr	r0, [pc, #456]	; (8001b24 <pin_config+0x2dc>)
 800195c:	f000 fe90 	bl	8002680 <user_GPIO_Init>
			config[0] = 0;
 8001960:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <pin_config+0x2e0>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
			config[0] = 1;
		}
		break;
 8001966:	e1af      	b.n	8001cc8 <pin_config+0x480>
		else if(strcmp(arr2,"INPUT")==0)
 8001968:	4970      	ldr	r1, [pc, #448]	; (8001b2c <pin_config+0x2e4>)
 800196a:	486d      	ldr	r0, [pc, #436]	; (8001b20 <pin_config+0x2d8>)
 800196c:	f7fe fc50 	bl	8000210 <strcmp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 81a8 	bne.w	8001cc8 <pin_config+0x480>
			user_GPIO_Init(GPIOB,GPIO_PIN_2,INPUT);
 8001978:	2201      	movs	r2, #1
 800197a:	2104      	movs	r1, #4
 800197c:	4869      	ldr	r0, [pc, #420]	; (8001b24 <pin_config+0x2dc>)
 800197e:	f000 fe7f 	bl	8002680 <user_GPIO_Init>
			config[0] = 1;
 8001982:	4b69      	ldr	r3, [pc, #420]	; (8001b28 <pin_config+0x2e0>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
		break;
 8001988:	e19e      	b.n	8001cc8 <pin_config+0x480>

	case 2:
		if(strcmp(arr2,"OUTPUT")==0)
 800198a:	4964      	ldr	r1, [pc, #400]	; (8001b1c <pin_config+0x2d4>)
 800198c:	4864      	ldr	r0, [pc, #400]	; (8001b20 <pin_config+0x2d8>)
 800198e:	f7fe fc3f 	bl	8000210 <strcmp>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d108      	bne.n	80019aa <pin_config+0x162>
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,OUTPUT);
 8001998:	2200      	movs	r2, #0
 800199a:	2102      	movs	r1, #2
 800199c:	4864      	ldr	r0, [pc, #400]	; (8001b30 <pin_config+0x2e8>)
 800199e:	f000 fe6f 	bl	8002680 <user_GPIO_Init>
			config[1]=0;
 80019a2:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <pin_config+0x2e0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	705a      	strb	r2, [r3, #1]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
			config[1]=1;
		}
		break;
 80019a8:	e190      	b.n	8001ccc <pin_config+0x484>
		else if(strcmp(arr2,"INPUT")==0)
 80019aa:	4960      	ldr	r1, [pc, #384]	; (8001b2c <pin_config+0x2e4>)
 80019ac:	485c      	ldr	r0, [pc, #368]	; (8001b20 <pin_config+0x2d8>)
 80019ae:	f7fe fc2f 	bl	8000210 <strcmp>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8189 	bne.w	8001ccc <pin_config+0x484>
			user_GPIO_Init(GPIOC,GPIO_PIN_1,INPUT);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2102      	movs	r1, #2
 80019be:	485c      	ldr	r0, [pc, #368]	; (8001b30 <pin_config+0x2e8>)
 80019c0:	f000 fe5e 	bl	8002680 <user_GPIO_Init>
			config[1]=1;
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <pin_config+0x2e0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	705a      	strb	r2, [r3, #1]
		break;
 80019ca:	e17f      	b.n	8001ccc <pin_config+0x484>

	case 3:
		if(strcmp(arr2,"OUTPUT")==0)
 80019cc:	4953      	ldr	r1, [pc, #332]	; (8001b1c <pin_config+0x2d4>)
 80019ce:	4854      	ldr	r0, [pc, #336]	; (8001b20 <pin_config+0x2d8>)
 80019d0:	f7fe fc1e 	bl	8000210 <strcmp>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d108      	bne.n	80019ec <pin_config+0x1a4>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 80019da:	2200      	movs	r2, #0
 80019dc:	2110      	movs	r1, #16
 80019de:	4851      	ldr	r0, [pc, #324]	; (8001b24 <pin_config+0x2dc>)
 80019e0:	f000 fe4e 	bl	8002680 <user_GPIO_Init>
			config[2]=0;
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <pin_config+0x2e0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	709a      	strb	r2, [r3, #2]
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			config[2]=1;
		}

		break;
 80019ea:	e171      	b.n	8001cd0 <pin_config+0x488>
		else if(strcmp(arr2,"INPUT")==0)
 80019ec:	494f      	ldr	r1, [pc, #316]	; (8001b2c <pin_config+0x2e4>)
 80019ee:	484c      	ldr	r0, [pc, #304]	; (8001b20 <pin_config+0x2d8>)
 80019f0:	f7fe fc0e 	bl	8000210 <strcmp>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 816a 	bne.w	8001cd0 <pin_config+0x488>
			user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2110      	movs	r1, #16
 8001a00:	4848      	ldr	r0, [pc, #288]	; (8001b24 <pin_config+0x2dc>)
 8001a02:	f000 fe3d 	bl	8002680 <user_GPIO_Init>
			config[2]=1;
 8001a06:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <pin_config+0x2e0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	709a      	strb	r2, [r3, #2]
		break;
 8001a0c:	e160      	b.n	8001cd0 <pin_config+0x488>

	case 4:
		if(strcmp(arr2,"OUTPUT")==0)
 8001a0e:	4943      	ldr	r1, [pc, #268]	; (8001b1c <pin_config+0x2d4>)
 8001a10:	4843      	ldr	r0, [pc, #268]	; (8001b20 <pin_config+0x2d8>)
 8001a12:	f7fe fbfd 	bl	8000210 <strcmp>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d108      	bne.n	8001a2e <pin_config+0x1e6>
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2120      	movs	r1, #32
 8001a20:	4840      	ldr	r0, [pc, #256]	; (8001b24 <pin_config+0x2dc>)
 8001a22:	f000 fe2d 	bl	8002680 <user_GPIO_Init>
			config[3]=0;
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <pin_config+0x2e0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	70da      	strb	r2, [r3, #3]
		else if(strcmp(arr2,"INPUT")==0)
		{
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			config[3]=1;
		}
		break;
 8001a2c:	e152      	b.n	8001cd4 <pin_config+0x48c>
		else if(strcmp(arr2,"INPUT")==0)
 8001a2e:	493f      	ldr	r1, [pc, #252]	; (8001b2c <pin_config+0x2e4>)
 8001a30:	483b      	ldr	r0, [pc, #236]	; (8001b20 <pin_config+0x2d8>)
 8001a32:	f7fe fbed 	bl	8000210 <strcmp>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 814b 	bne.w	8001cd4 <pin_config+0x48c>
			user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2120      	movs	r1, #32
 8001a42:	4838      	ldr	r0, [pc, #224]	; (8001b24 <pin_config+0x2dc>)
 8001a44:	f000 fe1c 	bl	8002680 <user_GPIO_Init>
			config[3]=1;
 8001a48:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <pin_config+0x2e0>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	70da      	strb	r2, [r3, #3]
		break;
 8001a4e:	e141      	b.n	8001cd4 <pin_config+0x48c>

	case 5:
		if(strcmp(arr2,"CH1")==0)
 8001a50:	4938      	ldr	r1, [pc, #224]	; (8001b34 <pin_config+0x2ec>)
 8001a52:	4833      	ldr	r0, [pc, #204]	; (8001b20 <pin_config+0x2d8>)
 8001a54:	f7fe fbdc 	bl	8000210 <strcmp>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <pin_config+0x222>
		{
			ADC_select_CH1();
 8001a5e:	f000 fa9d 	bl	8001f9c <ADC_select_CH1>
			adcChnlChecker[0] = 1;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <pin_config+0x2f0>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
//		}
//		else
//		{
//			__NOP();
//		}
		break;
 8001a68:	e136      	b.n	8001cd8 <pin_config+0x490>
		else if(strcmp(arr2,"CH2")==0)
 8001a6a:	4934      	ldr	r1, [pc, #208]	; (8001b3c <pin_config+0x2f4>)
 8001a6c:	482c      	ldr	r0, [pc, #176]	; (8001b20 <pin_config+0x2d8>)
 8001a6e:	f7fe fbcf 	bl	8000210 <strcmp>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <pin_config+0x23c>
			ADC_select_CH2();
 8001a78:	f000 fac8 	bl	800200c <ADC_select_CH2>
			adcChnlChecker[1] = 1;
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <pin_config+0x2f0>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	705a      	strb	r2, [r3, #1]
		break;
 8001a82:	e129      	b.n	8001cd8 <pin_config+0x490>
		else if(strcmp(arr2,"CH3")==0)
 8001a84:	492e      	ldr	r1, [pc, #184]	; (8001b40 <pin_config+0x2f8>)
 8001a86:	4826      	ldr	r0, [pc, #152]	; (8001b20 <pin_config+0x2d8>)
 8001a88:	f7fe fbc2 	bl	8000210 <strcmp>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <pin_config+0x256>
			ADC_select_CH3();
 8001a92:	f000 faf3 	bl	800207c <ADC_select_CH3>
			adcChnlChecker[2] = 1;
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <pin_config+0x2f0>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	709a      	strb	r2, [r3, #2]
		break;
 8001a9c:	e11c      	b.n	8001cd8 <pin_config+0x490>
		else if(strcmp(arr2,"CH4")==0)
 8001a9e:	4929      	ldr	r1, [pc, #164]	; (8001b44 <pin_config+0x2fc>)
 8001aa0:	481f      	ldr	r0, [pc, #124]	; (8001b20 <pin_config+0x2d8>)
 8001aa2:	f7fe fbb5 	bl	8000210 <strcmp>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 8115 	bne.w	8001cd8 <pin_config+0x490>
			ADC_select_CH4();
 8001aae:	f000 fb1d 	bl	80020ec <ADC_select_CH4>
			adcChnlChecker[3] = 1;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <pin_config+0x2f0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	70da      	strb	r2, [r3, #3]
		break;
 8001ab8:	e10e      	b.n	8001cd8 <pin_config+0x490>

	case 6:
		if(strcmp(arr2,"CH1")==0)
 8001aba:	491e      	ldr	r1, [pc, #120]	; (8001b34 <pin_config+0x2ec>)
 8001abc:	4818      	ldr	r0, [pc, #96]	; (8001b20 <pin_config+0x2d8>)
 8001abe:	f7fe fba7 	bl	8000210 <strcmp>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <pin_config+0x28c>
		{
			ADC_select_CH1();
 8001ac8:	f000 fa68 	bl	8001f9c <ADC_select_CH1>
			adcChnlChecker[0] = 0;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <pin_config+0x2f0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
		{
			ADC_select_CH4();
			adcChnlChecker[3] = 0;
		}

        break;
 8001ad2:	e103      	b.n	8001cdc <pin_config+0x494>
		else if(strcmp(arr2,"CH2")==0)
 8001ad4:	4919      	ldr	r1, [pc, #100]	; (8001b3c <pin_config+0x2f4>)
 8001ad6:	4812      	ldr	r0, [pc, #72]	; (8001b20 <pin_config+0x2d8>)
 8001ad8:	f7fe fb9a 	bl	8000210 <strcmp>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d132      	bne.n	8001b48 <pin_config+0x300>
			ADC_select_CH2();
 8001ae2:	f000 fa93 	bl	800200c <ADC_select_CH2>
			adcChnlChecker[1] = 0;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <pin_config+0x2f0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	705a      	strb	r2, [r3, #1]
        break;
 8001aec:	e0f6      	b.n	8001cdc <pin_config+0x494>
 8001aee:	bf00      	nop
 8001af0:	0800d3e4 	.word	0x0800d3e4
 8001af4:	200002f4 	.word	0x200002f4
 8001af8:	200002ac 	.word	0x200002ac
 8001afc:	0800d3e8 	.word	0x0800d3e8
 8001b00:	0800d3ec 	.word	0x0800d3ec
 8001b04:	0800d3f0 	.word	0x0800d3f0
 8001b08:	0800d3f4 	.word	0x0800d3f4
 8001b0c:	0800d3fc 	.word	0x0800d3fc
 8001b10:	0800d404 	.word	0x0800d404
 8001b14:	0800d40c 	.word	0x0800d40c
 8001b18:	0800d414 	.word	0x0800d414
 8001b1c:	0800d420 	.word	0x0800d420
 8001b20:	20000300 	.word	0x20000300
 8001b24:	40020400 	.word	0x40020400
 8001b28:	20000310 	.word	0x20000310
 8001b2c:	0800d428 	.word	0x0800d428
 8001b30:	40020800 	.word	0x40020800
 8001b34:	0800d430 	.word	0x0800d430
 8001b38:	20000314 	.word	0x20000314
 8001b3c:	0800d434 	.word	0x0800d434
 8001b40:	0800d438 	.word	0x0800d438
 8001b44:	0800d43c 	.word	0x0800d43c
		else if(strcmp(arr2,"CH3")==0)
 8001b48:	4966      	ldr	r1, [pc, #408]	; (8001ce4 <pin_config+0x49c>)
 8001b4a:	4867      	ldr	r0, [pc, #412]	; (8001ce8 <pin_config+0x4a0>)
 8001b4c:	f7fe fb60 	bl	8000210 <strcmp>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <pin_config+0x31a>
			ADC_select_CH3();
 8001b56:	f000 fa91 	bl	800207c <ADC_select_CH3>
			adcChnlChecker[2] = 0;
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <pin_config+0x4a4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	709a      	strb	r2, [r3, #2]
        break;
 8001b60:	e0bc      	b.n	8001cdc <pin_config+0x494>
		else if(strcmp(arr2,"CH4")==0)
 8001b62:	4963      	ldr	r1, [pc, #396]	; (8001cf0 <pin_config+0x4a8>)
 8001b64:	4860      	ldr	r0, [pc, #384]	; (8001ce8 <pin_config+0x4a0>)
 8001b66:	f7fe fb53 	bl	8000210 <strcmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 80b5 	bne.w	8001cdc <pin_config+0x494>
			ADC_select_CH4();
 8001b72:	f000 fabb 	bl	80020ec <ADC_select_CH4>
			adcChnlChecker[3] = 0;
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <pin_config+0x4a4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	70da      	strb	r2, [r3, #3]
        break;
 8001b7c:	e0ae      	b.n	8001cdc <pin_config+0x494>

	case 7:

		token = strtok(arr2, ":");
 8001b7e:	495d      	ldr	r1, [pc, #372]	; (8001cf4 <pin_config+0x4ac>)
 8001b80:	4859      	ldr	r0, [pc, #356]	; (8001ce8 <pin_config+0x4a0>)
 8001b82:	f008 fcf5 	bl	800a570 <strtok>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a5b      	ldr	r2, [pc, #364]	; (8001cf8 <pin_config+0x4b0>)
 8001b8a:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8001b8c:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <pin_config+0x4b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00f      	beq.n	8001bb4 <pin_config+0x36c>
		{
			d.hour = atoi(token);
 8001b94:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <pin_config+0x4b0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f006 fe99 	bl	80088d0 <atoi>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <pin_config+0x4b4>)
 8001ba4:	709a      	strb	r2, [r3, #2]
			token = strtok(NULL, ":");
 8001ba6:	4953      	ldr	r1, [pc, #332]	; (8001cf4 <pin_config+0x4ac>)
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f008 fce1 	bl	800a570 <strtok>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a51      	ldr	r2, [pc, #324]	; (8001cf8 <pin_config+0x4b0>)
 8001bb2:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <pin_config+0x4b0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00f      	beq.n	8001bdc <pin_config+0x394>
		{
			d.minutes = atoi(token);
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <pin_config+0x4b0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f006 fe85 	bl	80088d0 <atoi>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <pin_config+0x4b4>)
 8001bcc:	705a      	strb	r2, [r3, #1]
			token = strtok(NULL, ":");
 8001bce:	4949      	ldr	r1, [pc, #292]	; (8001cf4 <pin_config+0x4ac>)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f008 fccd 	bl	800a570 <strtok>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <pin_config+0x4b0>)
 8001bda:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <pin_config+0x4b0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <pin_config+0x3ae>
		{
			d.seconds = atoi(token);
 8001be4:	4b44      	ldr	r3, [pc, #272]	; (8001cf8 <pin_config+0x4b0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 fe71 	bl	80088d0 <atoi>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <pin_config+0x4b4>)
 8001bf4:	701a      	strb	r2, [r3, #0]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,0,0,0);
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <pin_config+0x4b4>)
 8001bf8:	7818      	ldrb	r0, [r3, #0]
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <pin_config+0x4b4>)
 8001bfc:	7859      	ldrb	r1, [r3, #1]
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <pin_config+0x4b4>)
 8001c00:	789a      	ldrb	r2, [r3, #2]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	2300      	movs	r3, #0
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f7ff fbf0 	bl	80013f4 <set_time>

		break;
 8001c14:	e063      	b.n	8001cde <pin_config+0x496>

	case 8:

		token = strtok(arr2, ":");
 8001c16:	4937      	ldr	r1, [pc, #220]	; (8001cf4 <pin_config+0x4ac>)
 8001c18:	4833      	ldr	r0, [pc, #204]	; (8001ce8 <pin_config+0x4a0>)
 8001c1a:	f008 fca9 	bl	800a570 <strtok>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a35      	ldr	r2, [pc, #212]	; (8001cf8 <pin_config+0x4b0>)
 8001c22:	6013      	str	r3, [r2, #0]

		// Get the first token and convert to integer
		if (token != NULL)
 8001c24:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <pin_config+0x4b0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00f      	beq.n	8001c4c <pin_config+0x404>
		{
			d.dayofmonth = atoi(token);
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <pin_config+0x4b0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f006 fe4d 	bl	80088d0 <atoi>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <pin_config+0x4b4>)
 8001c3c:	711a      	strb	r2, [r3, #4]
			token = strtok(NULL, ":");
 8001c3e:	492d      	ldr	r1, [pc, #180]	; (8001cf4 <pin_config+0x4ac>)
 8001c40:	2000      	movs	r0, #0
 8001c42:	f008 fc95 	bl	800a570 <strtok>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <pin_config+0x4b0>)
 8001c4a:	6013      	str	r3, [r2, #0]
		}

		// Get the second token and convert to integer
		if (token != NULL)
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <pin_config+0x4b0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00f      	beq.n	8001c74 <pin_config+0x42c>
		{
			d.month = atoi(token);
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <pin_config+0x4b0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fe39 	bl	80088d0 <atoi>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <pin_config+0x4b4>)
 8001c64:	715a      	strb	r2, [r3, #5]
			token = strtok(NULL, ":");
 8001c66:	4923      	ldr	r1, [pc, #140]	; (8001cf4 <pin_config+0x4ac>)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f008 fc81 	bl	800a570 <strtok>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <pin_config+0x4b0>)
 8001c72:	6013      	str	r3, [r2, #0]
		}

		// Get the third token and convert to integer
		if (token != NULL)
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <pin_config+0x4b0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <pin_config+0x446>
		{
			d.year = atoi(token);
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <pin_config+0x4b0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f006 fe25 	bl	80088d0 <atoi>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <pin_config+0x4b4>)
 8001c8c:	719a      	strb	r2, [r3, #6]
		}
		//				 Set_Time(time);

		set_time(d.seconds,d.minutes,d.hour,1,d.dayofmonth,d.month,d.year);
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <pin_config+0x4b4>)
 8001c90:	7818      	ldrb	r0, [r3, #0]
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <pin_config+0x4b4>)
 8001c94:	785c      	ldrb	r4, [r3, #1]
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <pin_config+0x4b4>)
 8001c98:	789d      	ldrb	r5, [r3, #2]
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <pin_config+0x4b4>)
 8001c9c:	791b      	ldrb	r3, [r3, #4]
 8001c9e:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <pin_config+0x4b4>)
 8001ca0:	7952      	ldrb	r2, [r2, #5]
 8001ca2:	4916      	ldr	r1, [pc, #88]	; (8001cfc <pin_config+0x4b4>)
 8001ca4:	7989      	ldrb	r1, [r1, #6]
 8001ca6:	9102      	str	r1, [sp, #8]
 8001ca8:	9201      	str	r2, [sp, #4]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	462a      	mov	r2, r5
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	f7ff fb9f 	bl	80013f4 <set_time>


	case 9:
		d.scan_time = (uint8_t)atoi(arr2);
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <pin_config+0x4a0>)
 8001cb8:	f006 fe0a 	bl	80088d0 <atoi>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <pin_config+0x4b4>)
 8001cc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8001cc6:	e00a      	b.n	8001cde <pin_config+0x496>
		break;
 8001cc8:	bf00      	nop
 8001cca:	e008      	b.n	8001cde <pin_config+0x496>
		break;
 8001ccc:	bf00      	nop
 8001cce:	e006      	b.n	8001cde <pin_config+0x496>
		break;
 8001cd0:	bf00      	nop
 8001cd2:	e004      	b.n	8001cde <pin_config+0x496>
		break;
 8001cd4:	bf00      	nop
 8001cd6:	e002      	b.n	8001cde <pin_config+0x496>
		break;
 8001cd8:	bf00      	nop
 8001cda:	e000      	b.n	8001cde <pin_config+0x496>
        break;
 8001cdc:	bf00      	nop

	}
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	0800d438 	.word	0x0800d438
 8001ce8:	20000300 	.word	0x20000300
 8001cec:	20000314 	.word	0x20000314
 8001cf0:	0800d43c 	.word	0x0800d43c
 8001cf4:	0800d440 	.word	0x0800d440
 8001cf8:	2000030c 	.word	0x2000030c
 8001cfc:	200001fc 	.word	0x200001fc

08001d00 <terminal>:
extern char CH4[10];



void terminal(struct data *d)
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b08f      	sub	sp, #60	; 0x3c
 8001d04:	af0c      	add	r7, sp, #48	; 0x30
 8001d06:	6078      	str	r0, [r7, #4]
	sprintf((char*)buf,"TIME:%02d:%02d:%02d DATE:%02d/%02d/%02d CH1:%s CH2:%s CH3:%s CH4:%s GPIO1:%s GPIO2:%s GPIO3:%s GPIO4:%s\r\n",d->hour,d->minutes,d->seconds,d->dayofmonth,d->month,d->year,CH1,CH2,CH3,CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	789b      	ldrb	r3, [r3, #2]
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	785b      	ldrb	r3, [r3, #1]
 8001d12:	469e      	mov	lr, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461c      	mov	r4, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	791b      	ldrb	r3, [r3, #4]
 8001d1e:	461d      	mov	r5, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	795b      	ldrb	r3, [r3, #5]
 8001d24:	461e      	mov	r6, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	799b      	ldrb	r3, [r3, #6]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3331      	adds	r3, #49	; 0x31
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	323b      	adds	r2, #59	; 0x3b
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	3145      	adds	r1, #69	; 0x45
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	304f      	adds	r0, #79	; 0x4f
 8001d3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8001d3e:	910a      	str	r1, [sp, #40]	; 0x28
 8001d40:	9209      	str	r2, [sp, #36]	; 0x24
 8001d42:	9308      	str	r3, [sp, #32]
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <terminal+0x78>)
 8001d46:	9307      	str	r3, [sp, #28]
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <terminal+0x7c>)
 8001d4a:	9306      	str	r3, [sp, #24]
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <terminal+0x80>)
 8001d4e:	9305      	str	r3, [sp, #20]
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <terminal+0x84>)
 8001d52:	9304      	str	r3, [sp, #16]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	9303      	str	r3, [sp, #12]
 8001d58:	9602      	str	r6, [sp, #8]
 8001d5a:	9501      	str	r5, [sp, #4]
 8001d5c:	9400      	str	r4, [sp, #0]
 8001d5e:	4673      	mov	r3, lr
 8001d60:	4662      	mov	r2, ip
 8001d62:	4909      	ldr	r1, [pc, #36]	; (8001d88 <terminal+0x88>)
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <terminal+0x8c>)
 8001d66:	f007 fd9d 	bl	80098a4 <siprintf>
//	sprintf((char*)buf2,"%02d:%02d:%02d\r\n",d->dayofmonth,d->month,d->year);
	uart3_tx(buf);
 8001d6a:	4808      	ldr	r0, [pc, #32]	; (8001d8c <terminal+0x8c>)
 8001d6c:	f000 fd60 	bl	8002830 <uart3_tx>
//	HAL_Delay(100);

}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d78:	200002a0 	.word	0x200002a0
 8001d7c:	20000294 	.word	0x20000294
 8001d80:	20000288 	.word	0x20000288
 8001d84:	2000027c 	.word	0x2000027c
 8001d88:	0800d444 	.word	0x0800d444
 8001d8c:	200003b8 	.word	0x200003b8

08001d90 <CircularQueue_Init>:
 */


#include "circular_queue.h"

void CircularQueue_Init(CircularQueue *queue) {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    queue->tail = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <CircularQueue_IsFull>:

bool CircularQueue_IsFull(CircularQueue *queue) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    return ((queue->head + 1) % BUFFER_SIZE) == queue->tail;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	425a      	negs	r2, r3
 8001dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dce:	bf58      	it	pl
 8001dd0:	4253      	negpl	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	f8b2 2082 	ldrh.w	r2, [r2, #130]	; 0x82
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <CircularQueue_IsEmpty>:

bool CircularQueue_IsEmpty(CircularQueue *queue) {
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
    return queue->head == queue->tail;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001e02:	429a      	cmp	r2, r3
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <CircularQueue_Enqueue>:

bool CircularQueue_Enqueue(CircularQueue *queue, uint8_t data) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
    if (CircularQueue_IsFull(queue)) {
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffc5 	bl	8001db4 <CircularQueue_IsFull>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <CircularQueue_Enqueue+0x1c>
        return false;  // Queue is full
 8001e30:	2300      	movs	r3, #0
 8001e32:	e016      	b.n	8001e62 <CircularQueue_Enqueue+0x4a>
    }
    queue->buffer[queue->head] = data;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	545a      	strb	r2, [r3, r1]
    queue->head = (queue->head + 1) % BUFFER_SIZE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001e48:	3301      	adds	r3, #1
 8001e4a:	425a      	negs	r2, r3
 8001e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e54:	bf58      	it	pl
 8001e56:	4253      	negpl	r3, r2
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    return true;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <CircularQueue_Dequeue>:

bool CircularQueue_Dequeue(CircularQueue *queue, uint8_t *data) {
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
    if (CircularQueue_IsEmpty(queue)) {
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffba 	bl	8001dee <CircularQueue_IsEmpty>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <CircularQueue_Dequeue+0x1a>
        return false;  // Queue is empty
 8001e80:	2300      	movs	r3, #0
 8001e82:	e017      	b.n	8001eb4 <CircularQueue_Dequeue+0x4a>
    }
    *data = queue->buffer[queue->tail];
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	5c9a      	ldrb	r2, [r3, r2]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	701a      	strb	r2, [r3, #0]
    queue->tail = (queue->tail + 1) % BUFFER_SIZE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	425a      	negs	r2, r3
 8001e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ea6:	bf58      	it	pl
 8001ea8:	4253      	negpl	r3, r2
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    return true;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <USER_ADC1_Init>:
//	 */
//	HAL_RCCEx_EnableMSIPLLMode();
//}

void USER_ADC1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	//
	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8001ec0:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <USER_ADC1_Init+0x6c>)
 8001ec4:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001ec8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ecc:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <USER_ADC1_Init+0x70>)
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 4;
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001efc:	2204      	movs	r2, #4
 8001efe:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <USER_ADC1_Init+0x68>)
 8001f10:	f001 f8e0 	bl	80030d4 <HAL_ADC_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <USER_ADC1_Init+0x62>
	  {
	    Error_Handler();
 8001f1a:	f000 fce7 	bl	80028ec <Error_Handler>
//	  }
	  /* USER CODE BEGIN ADC1_Init 2 */
	//
	  /* USER CODE END ADC1_Init 2 */

	}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000508 	.word	0x20000508
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	0f000001 	.word	0x0f000001

08001f30 <USER_GPIO_Init>:


void USER_GPIO_Init(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <USER_GPIO_Init+0x68>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800

08001f9c <ADC_select_CH1>:
//ADC_ChannelConfTypeDef sConfig = {0};

void ADC_select_CH1(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 8001fa0:	4916      	ldr	r1, [pc, #88]	; (8001ffc <ADC_select_CH1+0x60>)
 8001fa2:	4817      	ldr	r0, [pc, #92]	; (8002000 <ADC_select_CH1+0x64>)
 8001fa4:	f7fe f934 	bl	8000210 <strcmp>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d112      	bne.n	8001fd4 <ADC_select_CH1+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_5;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <ADC_select_CH1+0x68>)
 8001fb0:	2205      	movs	r2, #5
 8001fb2:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <ADC_select_CH1+0x68>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <ADC_select_CH1+0x68>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc0:	4910      	ldr	r1, [pc, #64]	; (8002004 <ADC_select_CH1+0x68>)
 8001fc2:	4811      	ldr	r0, [pc, #68]	; (8002008 <ADC_select_CH1+0x6c>)
 8001fc4:	f001 fb96 	bl	80036f4 <HAL_ADC_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d014      	beq.n	8001ff8 <ADC_select_CH1+0x5c>
		{
			Error_Handler();
 8001fce:	f000 fc8d 	bl	80028ec <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 8001fd2:	e011      	b.n	8001ff8 <ADC_select_CH1+0x5c>
	sConfig.Channel = ADC_CHANNEL_5;
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <ADC_select_CH1+0x68>)
 8001fd6:	2205      	movs	r2, #5
 8001fd8:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <ADC_select_CH1+0x68>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <ADC_select_CH1+0x68>)
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe6:	4907      	ldr	r1, [pc, #28]	; (8002004 <ADC_select_CH1+0x68>)
 8001fe8:	4807      	ldr	r0, [pc, #28]	; (8002008 <ADC_select_CH1+0x6c>)
 8001fea:	f001 fb83 	bl	80036f4 <HAL_ADC_ConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <ADC_select_CH1+0x5c>
		    Error_Handler();
 8001ff4:	f000 fc7a 	bl	80028ec <Error_Handler>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	0800d4b0 	.word	0x0800d4b0
 8002000:	200002f4 	.word	0x200002f4
 8002004:	20000480 	.word	0x20000480
 8002008:	20000508 	.word	0x20000508

0800200c <ADC_select_CH2>:

void ADC_select_CH2(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 8002010:	4916      	ldr	r1, [pc, #88]	; (800206c <ADC_select_CH2+0x60>)
 8002012:	4817      	ldr	r0, [pc, #92]	; (8002070 <ADC_select_CH2+0x64>)
 8002014:	f7fe f8fc 	bl	8000210 <strcmp>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <ADC_select_CH2+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_6;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <ADC_select_CH2+0x68>)
 8002020:	2206      	movs	r2, #6
 8002022:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <ADC_select_CH2+0x68>)
 8002026:	2200      	movs	r2, #0
 8002028:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <ADC_select_CH2+0x68>)
 800202c:	2207      	movs	r2, #7
 800202e:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002030:	4910      	ldr	r1, [pc, #64]	; (8002074 <ADC_select_CH2+0x68>)
 8002032:	4811      	ldr	r0, [pc, #68]	; (8002078 <ADC_select_CH2+0x6c>)
 8002034:	f001 fb5e 	bl	80036f4 <HAL_ADC_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d014      	beq.n	8002068 <ADC_select_CH2+0x5c>
		{
			Error_Handler();
 800203e:	f000 fc55 	bl	80028ec <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 8002042:	e011      	b.n	8002068 <ADC_select_CH2+0x5c>
	sConfig.Channel = ADC_CHANNEL_6;
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <ADC_select_CH2+0x68>)
 8002046:	2206      	movs	r2, #6
 8002048:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <ADC_select_CH2+0x68>)
 800204c:	2201      	movs	r2, #1
 800204e:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <ADC_select_CH2+0x68>)
 8002052:	2207      	movs	r2, #7
 8002054:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002056:	4907      	ldr	r1, [pc, #28]	; (8002074 <ADC_select_CH2+0x68>)
 8002058:	4807      	ldr	r0, [pc, #28]	; (8002078 <ADC_select_CH2+0x6c>)
 800205a:	f001 fb4b 	bl	80036f4 <HAL_ADC_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <ADC_select_CH2+0x5c>
		    Error_Handler();
 8002064:	f000 fc42 	bl	80028ec <Error_Handler>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	0800d4b0 	.word	0x0800d4b0
 8002070:	200002f4 	.word	0x200002f4
 8002074:	20000480 	.word	0x20000480
 8002078:	20000508 	.word	0x20000508

0800207c <ADC_select_CH3>:


void ADC_select_CH3(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <ADC_select_CH3+0x60>)
 8002082:	4817      	ldr	r0, [pc, #92]	; (80020e0 <ADC_select_CH3+0x64>)
 8002084:	f7fe f8c4 	bl	8000210 <strcmp>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d112      	bne.n	80020b4 <ADC_select_CH3+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_9;
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <ADC_select_CH3+0x68>)
 8002090:	2209      	movs	r2, #9
 8002092:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <ADC_select_CH3+0x68>)
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <ADC_select_CH3+0x68>)
 800209c:	2207      	movs	r2, #7
 800209e:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a0:	4910      	ldr	r1, [pc, #64]	; (80020e4 <ADC_select_CH3+0x68>)
 80020a2:	4811      	ldr	r0, [pc, #68]	; (80020e8 <ADC_select_CH3+0x6c>)
 80020a4:	f001 fb26 	bl	80036f4 <HAL_ADC_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d014      	beq.n	80020d8 <ADC_select_CH3+0x5c>
		{
			Error_Handler();
 80020ae:	f000 fc1d 	bl	80028ec <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 80020b2:	e011      	b.n	80020d8 <ADC_select_CH3+0x5c>
	sConfig.Channel = ADC_CHANNEL_9;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <ADC_select_CH3+0x68>)
 80020b6:	2209      	movs	r2, #9
 80020b8:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <ADC_select_CH3+0x68>)
 80020bc:	2201      	movs	r2, #1
 80020be:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <ADC_select_CH3+0x68>)
 80020c2:	2207      	movs	r2, #7
 80020c4:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c6:	4907      	ldr	r1, [pc, #28]	; (80020e4 <ADC_select_CH3+0x68>)
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <ADC_select_CH3+0x6c>)
 80020ca:	f001 fb13 	bl	80036f4 <HAL_ADC_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <ADC_select_CH3+0x5c>
		    Error_Handler();
 80020d4:	f000 fc0a 	bl	80028ec <Error_Handler>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800d4b0 	.word	0x0800d4b0
 80020e0:	200002f4 	.word	0x200002f4
 80020e4:	20000480 	.word	0x20000480
 80020e8:	20000508 	.word	0x20000508

080020ec <ADC_select_CH4>:


void ADC_select_CH4(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	if(strcmp(arr1,"DISABLE")==0)
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <ADC_select_CH4+0x60>)
 80020f2:	4817      	ldr	r0, [pc, #92]	; (8002150 <ADC_select_CH4+0x64>)
 80020f4:	f7fe f88c 	bl	8000210 <strcmp>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d112      	bne.n	8002124 <ADC_select_CH4+0x38>
	{
		sConfig.Channel = ADC_CHANNEL_10;
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <ADC_select_CH4+0x68>)
 8002100:	220a      	movs	r2, #10
 8002102:	601a      	str	r2, [r3, #0]
		sConfig.Rank = 0;
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <ADC_select_CH4+0x68>)
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <ADC_select_CH4+0x68>)
 800210c:	2207      	movs	r2, #7
 800210e:	609a      	str	r2, [r3, #8]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002110:	4910      	ldr	r1, [pc, #64]	; (8002154 <ADC_select_CH4+0x68>)
 8002112:	4811      	ldr	r0, [pc, #68]	; (8002158 <ADC_select_CH4+0x6c>)
 8002114:	f001 faee 	bl	80036f4 <HAL_ADC_ConfigChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d014      	beq.n	8002148 <ADC_select_CH4+0x5c>
		{
			Error_Handler();
 800211e:	f000 fbe5 	bl	80028ec <Error_Handler>
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
		  {
		    Error_Handler();
		  }
	}
}
 8002122:	e011      	b.n	8002148 <ADC_select_CH4+0x5c>
	sConfig.Channel = ADC_CHANNEL_10;
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <ADC_select_CH4+0x68>)
 8002126:	220a      	movs	r2, #10
 8002128:	601a      	str	r2, [r3, #0]
		  sConfig.Rank = 1;
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <ADC_select_CH4+0x68>)
 800212c:	2201      	movs	r2, #1
 800212e:	605a      	str	r2, [r3, #4]
		  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <ADC_select_CH4+0x68>)
 8002132:	2207      	movs	r2, #7
 8002134:	609a      	str	r2, [r3, #8]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002136:	4907      	ldr	r1, [pc, #28]	; (8002154 <ADC_select_CH4+0x68>)
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <ADC_select_CH4+0x6c>)
 800213a:	f001 fadb 	bl	80036f4 <HAL_ADC_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <ADC_select_CH4+0x5c>
		    Error_Handler();
 8002144:	f000 fbd2 	bl	80028ec <Error_Handler>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	0800d4b0 	.word	0x0800d4b0
 8002150:	200002f4 	.word	0x200002f4
 8002154:	20000480 	.word	0x20000480
 8002158:	20000508 	.word	0x20000508

0800215c <adc_start>:
//}



void adc_start(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <adc_start+0x10>)
 8002162:	f000 fffb 	bl	800315c <HAL_ADC_Start>
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000508 	.word	0x20000508

08002170 <adc_conversion>:

void adc_conversion(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1,1000);
 8002174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <adc_conversion+0x14>)
 800217a:	f001 f8f4 	bl	8003366 <HAL_ADC_PollForConversion>
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000508 	.word	0x20000508

08002188 <adc_value>:

uint16_t adc_value(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <adc_value+0x14>)
 800218e:	f001 fa85 	bl	800369c <HAL_ADC_GetValue>
 8002192:	4603      	mov	r3, r0
 8002194:	b29b      	uxth	r3, r3
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000508 	.word	0x20000508

080021a0 <adc_stop>:

void adc_stop(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <adc_stop+0x10>)
 80021a6:	f001 f8ab 	bl	8003300 <HAL_ADC_Stop>
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000508 	.word	0x20000508

080021b4 <UART4_Init>:

extern UART_HandleTypeDef huart4;


void UART4_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	  /* USER CODE END UART4_Init 0 */

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  huart4.Instance = UART4;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <UART4_Init+0x4c>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <UART4_Init+0x50>)
 80021bc:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 115200;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <UART4_Init+0x4c>)
 80021c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c4:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <UART4_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <UART4_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <UART4_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <UART4_Init+0x4c>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <UART4_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <UART4_Init+0x4c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <UART4_Init+0x4c>)
 80021ec:	f005 fab4 	bl	8007758 <HAL_UART_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <UART4_Init+0x46>
	  {
	    Error_Handler();
 80021f6:	f000 fb79 	bl	80028ec <Error_Handler>
	  }
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */

	}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200005a4 	.word	0x200005a4
 8002204:	40004c00 	.word	0x40004c00

08002208 <GsmCommands>:




void GsmCommands(uint8_t* cmd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart4, cmd, strlen((char*)cmd));
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe f807 	bl	8000224 <strlen>
 8002216:	4603      	mov	r3, r0
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <GsmCommands+0x34>)
 8002220:	f005 fb79 	bl	8007916 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart4, Reply, max_buf_len);
 8002224:	2264      	movs	r2, #100	; 0x64
 8002226:	4906      	ldr	r1, [pc, #24]	; (8002240 <GsmCommands+0x38>)
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <GsmCommands+0x34>)
 800222a:	f005 fbb9 	bl	80079a0 <HAL_UART_Receive_IT>
	HAL_Delay(100);
 800222e:	2064      	movs	r0, #100	; 0x64
 8002230:	f000 ff2c 	bl	800308c <HAL_Delay>

}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200005a4 	.word	0x200005a4
 8002240:	20000490 	.word	0x20000490

08002244 <Gsm_Init>:



void Gsm_Init()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

//	HAL_Delay(2000);


	GsmCommands((uint8_t*)"AT\r\n");
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <Gsm_Init+0x34>)
 800224a:	f7ff ffdd 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 800224e:	480b      	ldr	r0, [pc, #44]	; (800227c <Gsm_Init+0x38>)
 8002250:	f7ff ffda 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8002254:	480a      	ldr	r0, [pc, #40]	; (8002280 <Gsm_Init+0x3c>)
 8002256:	f7ff ffd7 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 800225a:	480a      	ldr	r0, [pc, #40]	; (8002284 <Gsm_Init+0x40>)
 800225c:	f7ff ffd4 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=0,1\r\n");
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <Gsm_Init+0x44>)
 8002262:	f7ff ffd1 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 8002266:	4809      	ldr	r0, [pc, #36]	; (800228c <Gsm_Init+0x48>)
 8002268:	f7ff ffce 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 800226c:	4808      	ldr	r0, [pc, #32]	; (8002290 <Gsm_Init+0x4c>)
 800226e:	f7ff ffcb 	bl	8002208 <GsmCommands>

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	0800d4b8 	.word	0x0800d4b8
 800227c:	0800d4c0 	.word	0x0800d4c0
 8002280:	0800d4cc 	.word	0x0800d4cc
 8002284:	0800d4d8 	.word	0x0800d4d8
 8002288:	0800d4e8 	.word	0x0800d4e8
 800228c:	0800d4f8 	.word	0x0800d4f8
 8002290:	0800d518 	.word	0x0800d518

08002294 <DataToCloud>:


void DataToCloud(char* Time,char* Date,char* Ch1,char* Ch2,char* Ch3,char* Ch4,char* D1,char* D2,char* D3,char* D4)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800229a:	af0a      	add	r7, sp, #40	; 0x28
 800229c:	f507 740c 	add.w	r4, r7, #560	; 0x230
 80022a0:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 80022a4:	6020      	str	r0, [r4, #0]
 80022a6:	f507 700c 	add.w	r0, r7, #560	; 0x230
 80022aa:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 80022ae:	6001      	str	r1, [r0, #0]
 80022b0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80022b4:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 80022b8:	600a      	str	r2, [r1, #0]
 80022ba:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80022be:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 80022c2:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 80022c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80022c8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	f000 f8a9 	bl	8002424 <url_encode>
 80022d2:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
	char* encoded_Date = url_encode(Date);
 80022d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80022da:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	f000 f8a0 	bl	8002424 <url_encode>
 80022e4:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	char* encoded_Ch1 = url_encode(Ch1);
 80022e8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80022ec:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	f000 f897 	bl	8002424 <url_encode>
 80022f6:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch2 = url_encode(Ch2);
 80022fa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80022fe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	f000 f88e 	bl	8002424 <url_encode>
 8002308:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch3 = url_encode(Ch3);
 800230c:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8002310:	f000 f888 	bl	8002424 <url_encode>
 8002314:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch4 = url_encode(Ch4);
 8002318:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800231c:	f000 f882 	bl	8002424 <url_encode>
 8002320:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_D1 = url_encode(D1);
 8002324:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8002328:	f000 f87c 	bl	8002424 <url_encode>
 800232c:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D2 = url_encode(D2);
 8002330:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8002334:	f000 f876 	bl	8002424 <url_encode>
 8002338:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D3 = url_encode(D3);
 800233c:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8002340:	f000 f870 	bl	8002424 <url_encode>
 8002344:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D4 = url_encode(D4);
 8002348:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 800234c:	f000 f86a 	bl	8002424 <url_encode>
 8002350:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8002354:	482f      	ldr	r0, [pc, #188]	; (8002414 <DataToCloud+0x180>)
 8002356:	f7ff ff57 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800235a:	482f      	ldr	r0, [pc, #188]	; (8002418 <DataToCloud+0x184>)
 800235c:	f7ff ff54 	bl	8002208 <GsmCommands>


	snprintf((char*)AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbzPv_TJnae6QKLqHwXthUaTTCcSmzs7utHLzxuxEwJn_Ez4w8QNMexw4w2BpS754KAHzg/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s&field10=%s\"\r\n",encoded_Time, encoded_Date, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8002360:	f107 0014 	add.w	r0, r7, #20
 8002364:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002368:	9308      	str	r3, [sp, #32]
 800236a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800236e:	9307      	str	r3, [sp, #28]
 8002370:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002374:	9306      	str	r3, [sp, #24]
 8002376:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800237a:	9305      	str	r3, [sp, #20]
 800237c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002380:	9304      	str	r3, [sp, #16]
 8002382:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002386:	9303      	str	r3, [sp, #12]
 8002388:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <DataToCloud+0x188>)
 80023a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80023a4:	f007 fa4a 	bl	800983c <sniprintf>
	GsmCommands((uint8_t*)AT_RTCcloud_data);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff2b 	bl	8002208 <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 80023b2:	481b      	ldr	r0, [pc, #108]	; (8002420 <DataToCloud+0x18c>)
 80023b4:	f7ff ff28 	bl	8002208 <GsmCommands>

	free(encoded_Time);
 80023b8:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80023bc:	f006 fabe 	bl	800893c <free>
	free(encoded_Date);
 80023c0:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80023c4:	f006 faba 	bl	800893c <free>
	free(encoded_Ch1);
 80023c8:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80023cc:	f006 fab6 	bl	800893c <free>
	free(encoded_Ch2);
 80023d0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80023d4:	f006 fab2 	bl	800893c <free>
	free(encoded_Ch3);
 80023d8:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80023dc:	f006 faae 	bl	800893c <free>
	free(encoded_Ch4);
 80023e0:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 80023e4:	f006 faaa 	bl	800893c <free>
	free(encoded_D1);
 80023e8:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80023ec:	f006 faa6 	bl	800893c <free>
	free(encoded_D2);
 80023f0:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 80023f4:	f006 faa2 	bl	800893c <free>
	free(encoded_D3);
 80023f8:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80023fc:	f006 fa9e 	bl	800893c <free>
	free(encoded_D4);
 8002400:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8002404:	f006 fa9a 	bl	800893c <free>

}
 8002408:	bf00      	nop
 800240a:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	bf00      	nop
 8002414:	0800d528 	.word	0x0800d528
 8002418:	0800d538 	.word	0x0800d538
 800241c:	0800d548 	.word	0x0800d548
 8002420:	0800d638 	.word	0x0800d638

08002424 <url_encode>:



char* url_encode(const char* str)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <url_encode+0xc8>)
 800242e:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7fd fef7 	bl	8000224 <strlen>
 8002436:	4602      	mov	r2, r0
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	3301      	adds	r3, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f006 fa73 	bl	800892c <malloc>
 8002446:	4603      	mov	r3, r0
 8002448:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	617b      	str	r3, [r7, #20]

	while (*str) {
 800244e:	e040      	b.n	80024d2 <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <url_encode+0xcc>)
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <url_encode+0x60>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b2d      	cmp	r3, #45	; 0x2d
 800246a:	d00b      	beq.n	8002484 <url_encode+0x60>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b5f      	cmp	r3, #95	; 0x5f
 8002472:	d007      	beq.n	8002484 <url_encode+0x60>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b2e      	cmp	r3, #46	; 0x2e
 800247a:	d003      	beq.n	8002484 <url_encode+0x60>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b7e      	cmp	r3, #126	; 0x7e
 8002482:	d106      	bne.n	8002492 <url_encode+0x6e>
			*ptr++ = *str;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	617a      	str	r2, [r7, #20]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e01c      	b.n	80024cc <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	617a      	str	r2, [r7, #20]
 8002498:	2225      	movs	r2, #37	; 0x25
 800249a:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	441a      	add	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	1c59      	adds	r1, r3, #1
 80024b0:	6179      	str	r1, [r7, #20]
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	441a      	add	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1c59      	adds	r1, r3, #1
 80024c6:	6179      	str	r1, [r7, #20]
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	701a      	strb	r2, [r3, #0]
		}
		str++;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3301      	adds	r3, #1
 80024d0:	607b      	str	r3, [r7, #4]
	while (*str) {
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ba      	bne.n	8002450 <url_encode+0x2c>
	}
	*ptr = '\0';
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	return encoded;
 80024e0:	68fb      	ldr	r3, [r7, #12]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	0800d64c 	.word	0x0800d64c
 80024f0:	0800d678 	.word	0x0800d678

080024f4 <USER_I2C1_Init>:




void USER_I2C1_Init()
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <USER_I2C1_Init+0x50>)
 80024fa:	4a13      	ldr	r2, [pc, #76]	; (8002548 <USER_I2C1_Init+0x54>)
 80024fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <USER_I2C1_Init+0x50>)
 8002500:	4a12      	ldr	r2, [pc, #72]	; (800254c <USER_I2C1_Init+0x58>)
 8002502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <USER_I2C1_Init+0x50>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <USER_I2C1_Init+0x50>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <USER_I2C1_Init+0x50>)
 8002512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002516:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <USER_I2C1_Init+0x50>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <USER_I2C1_Init+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <USER_I2C1_Init+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <USER_I2C1_Init+0x50>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002530:	4804      	ldr	r0, [pc, #16]	; (8002544 <USER_I2C1_Init+0x50>)
 8002532:	f001 fe8f 	bl	8004254 <HAL_I2C_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <USER_I2C1_Init+0x4c>
  {
    Error_Handler();
 800253c:	f000 f9d6 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000550 	.word	0x20000550
 8002548:	40005400 	.word	0x40005400
 800254c:	000186a0 	.word	0x000186a0

08002550 <SystemClock_Config>:
extern UART_HandleTypeDef huart1;
GPIO_InitTypeDef GPIO_InitStruct = {0};
uint8_t GPIO[4];

void SystemClock_Config(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b094      	sub	sp, #80	; 0x50
 8002554:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	2234      	movs	r2, #52	; 0x34
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f006 f9f4 	bl	800894c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <SystemClock_Config+0xd4>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <SystemClock_Config+0xd4>)
 800257e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <SystemClock_Config+0xd4>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002590:	2300      	movs	r3, #0
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <SystemClock_Config+0xd8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800259c:	4a22      	ldr	r2, [pc, #136]	; (8002628 <SystemClock_Config+0xd8>)
 800259e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b20      	ldr	r3, [pc, #128]	; (8002628 <SystemClock_Config+0xd8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025b0:	2302      	movs	r3, #2
 80025b2:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025b4:	2301      	movs	r3, #1
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025b8:	2310      	movs	r3, #16
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025bc:	2302      	movs	r3, #2
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 16;
 80025c4:	2310      	movs	r3, #16
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 80025c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025ce:	2304      	movs	r3, #4
 80025d0:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025d2:	2302      	movs	r3, #2
 80025d4:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 80025d6:	2302      	movs	r3, #2
 80025d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fe1c 	bl	800721c <HAL_RCC_OscConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <SystemClock_Config+0x9e>
	  {
	    Error_Handler();
 80025ea:	f000 f97f 	bl	80028ec <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ee:	230f      	movs	r3, #15
 80025f0:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f2:	2302      	movs	r3, #2
 80025f4:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	2102      	movs	r1, #2
 800260a:	4618      	mov	r0, r3
 800260c:	f004 fabc 	bl	8006b88 <HAL_RCC_ClockConfig>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <SystemClock_Config+0xca>
	  {
	    Error_Handler();
 8002616:	f000 f969 	bl	80028ec <Error_Handler>
	  }
	}
 800261a:	bf00      	nop
 800261c:	3750      	adds	r7, #80	; 0x50
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40007000 	.word	0x40007000

0800262c <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
 {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	   /* USER CODE END USART1_Init 0 */

	   /* USER CODE BEGIN USART1_Init 1 */

	   /* USER CODE END USART1_Init 1 */
	   huart1.Instance = USART1;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <user_USART1_UART_Init+0x4c>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <user_USART1_UART_Init+0x50>)
 8002634:	601a      	str	r2, [r3, #0]
	   huart1.Init.BaudRate = 115200;
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <user_USART1_UART_Init+0x4c>)
 8002638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800263c:	605a      	str	r2, [r3, #4]
	   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <user_USART1_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
	   huart1.Init.StopBits = UART_STOPBITS_1;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <user_USART1_UART_Init+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
	   huart1.Init.Parity = UART_PARITY_NONE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <user_USART1_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
	   huart1.Init.Mode = UART_MODE_TX_RX;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <user_USART1_UART_Init+0x4c>)
 8002652:	220c      	movs	r2, #12
 8002654:	615a      	str	r2, [r3, #20]
	   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <user_USART1_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
	   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <user_USART1_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
	   if (HAL_UART_Init(&huart1) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <user_USART1_UART_Init+0x4c>)
 8002664:	f005 f878 	bl	8007758 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <user_USART1_UART_Init+0x46>
	   {
	     Error_Handler();
 800266e:	f000 f93d 	bl	80028ec <Error_Handler>
	   }
	   /* USER CODE BEGIN USART1_Init 2 */

	   /* USER CODE END USART1_Init 2 */

	 }
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200002b0 	.word	0x200002b0
 800267c:	40011000 	.word	0x40011000

08002680 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <user_GPIO_Init+0xb8>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <user_GPIO_Init+0xb8>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6313      	str	r3, [r2, #48]	; 0x30
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <user_GPIO_Init+0xb8>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <user_GPIO_Init+0xb8>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <user_GPIO_Init+0xb8>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <user_GPIO_Init+0xb8>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <user_GPIO_Init+0xb8>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <user_GPIO_Init+0xb8>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <user_GPIO_Init+0xb8>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 80026e4:	787a      	ldrb	r2, [r7, #1]
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	4619      	mov	r1, r3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f001 fd98 	bl	8004220 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <user_GPIO_Init+0x84>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 80026f6:	787a      	ldrb	r2, [r7, #1]
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f81f 	bl	8002740 <gpio_output>
 8002702:	e008      	b.n	8002716 <user_GPIO_Init+0x96>
     }
     else if(PIN_mode == INPUT)
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d105      	bne.n	8002716 <user_GPIO_Init+0x96>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 800270a:	787a      	ldrb	r2, [r7, #1]
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f837 	bl	8002784 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <user_GPIO_Init+0xbc>)
 8002718:	2202      	movs	r2, #2
 800271a:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <user_GPIO_Init+0xbc>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <user_GPIO_Init+0xbc>)
 8002724:	2203      	movs	r2, #3
 8002726:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <user_GPIO_Init+0xbc>)
 800272a:	2207      	movs	r2, #7
 800272c:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	200004f4 	.word	0x200004f4

08002740 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 030c 	add.w	r3, r7, #12
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 fba6 	bl	8003ec8 <HAL_GPIO_Init>
 }
 800277c:	bf00      	nop
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f001 fb86 	bl	8003ec8 <HAL_GPIO_Init>
 }
 80027bc:	bf00      	nop
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <data_receive>:




void data_receive()
 {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive_IT(&huart1, &rxBuffer,1) == HAL_ERROR)
 80027c8:	2201      	movs	r2, #1
 80027ca:	4905      	ldr	r1, [pc, #20]	; (80027e0 <data_receive+0x1c>)
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <data_receive+0x20>)
 80027ce:	f005 f8e7 	bl	80079a0 <HAL_UART_Receive_IT>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <data_receive+0x18>
	 {
			 Error_Handler();
 80027d8:	f000 f888 	bl	80028ec <Error_Handler>
	 }
 }
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000318 	.word	0x20000318
 80027e4:	200002b0 	.word	0x200002b0

080027e8 <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	4619      	mov	r1, r3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f001 fcf9 	bl	80041f0 <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0

 }
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8002818:	787a      	ldrb	r2, [r7, #1]
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	4619      	mov	r1, r3
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f001 fcfe 	bl	8004220 <HAL_GPIO_WritePin>
    return PinState;
 8002824:	787b      	ldrb	r3, [r7, #1]
 }
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <uart3_tx>:


extern UART_HandleTypeDef huart3;

void uart3_tx(uint8_t* buf)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7fd fcf3 	bl	8000224 <strlen>
 800283e:	4603      	mov	r3, r0
 8002840:	b29a      	uxth	r2, r3
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <uart3_tx+0x2c>)
 800284a:	f004 ffd2 	bl	80077f2 <HAL_UART_Transmit>
	 HAL_Delay(100);
 800284e:	2064      	movs	r0, #100	; 0x64
 8002850:	f000 fc1c 	bl	800308c <HAL_Delay>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200005e8 	.word	0x200005e8

08002860 <USER_USART3_UART_Init>:


void USER_USART3_UART_Init()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <USER_USART3_UART_Init+0x50>)
 8002868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 800286c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <USER_USART3_UART_Init+0x4c>)
 8002898:	f004 ff5e 	bl	8007758 <HAL_UART_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <USER_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028a2:	f000 f823 	bl	80028ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200005e8 	.word	0x200005e8
 80028b0:	40004800 	.word	0x40004800

080028b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b8:	f000 fb76 	bl	8002fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028bc:	f7ff fe48 	bl	8002550 <SystemClock_Config>
//  MX_UART4_Init();
//  MX_USART1_UART_Init();
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
//  MX_GPIO_Init();
    USER_GPIO_Init();
 80028c0:	f7ff fb36 	bl	8001f30 <USER_GPIO_Init>
    USER_I2C1_Init();
 80028c4:	f7ff fe16 	bl	80024f4 <USER_I2C1_Init>
    USER_USART3_UART_Init();
 80028c8:	f7ff ffca 	bl	8002860 <USER_USART3_UART_Init>
    user_USART1_UART_Init();
 80028cc:	f7ff feae 	bl	800262c <user_USART1_UART_Init>
    UART4_Init();
 80028d0:	f7ff fc70 	bl	80021b4 <UART4_Init>
    USER_ADC1_Init();
 80028d4:	f7ff faf2 	bl	8001ebc <USER_ADC1_Init>
    CircularQueue_Init(&rxQueue);
 80028d8:	4803      	ldr	r0, [pc, #12]	; (80028e8 <main+0x34>)
 80028da:	f7ff fa59 	bl	8001d90 <CircularQueue_Init>
    Gsm_Init();
 80028de:	f7ff fcb1 	bl	8002244 <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  application();
 80028e2:	f7fe fbb9 	bl	8001058 <application>
 80028e6:	e7fc      	b.n	80028e2 <main+0x2e>
 80028e8:	2000031c 	.word	0x2000031c

080028ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f0:	b672      	cpsid	i
}
 80028f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <Error_Handler+0x8>
	...

080028f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_MspInit+0x4c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <HAL_MspInit+0x4c>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_MspInit+0x4c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_MspInit+0x4c>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_MspInit+0x4c>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_MspInit+0x4c>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002936:	2007      	movs	r0, #7
 8002938:	f001 f9e4 	bl	8003d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a35      	ldr	r2, [pc, #212]	; (8002a3c <HAL_ADC_MspInit+0xf4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d163      	bne.n	8002a32 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_ADC_MspInit+0xf8>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029de:	2303      	movs	r3, #3
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	4815      	ldr	r0, [pc, #84]	; (8002a44 <HAL_ADC_MspInit+0xfc>)
 80029ee:	f001 fa6b 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029f2:	2360      	movs	r3, #96	; 0x60
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	4619      	mov	r1, r3
 8002a04:	4810      	ldr	r0, [pc, #64]	; (8002a48 <HAL_ADC_MspInit+0x100>)
 8002a06:	f001 fa5f 	bl	8003ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480b      	ldr	r0, [pc, #44]	; (8002a4c <HAL_ADC_MspInit+0x104>)
 8002a1e:	f001 fa53 	bl	8003ec8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2012      	movs	r0, #18
 8002a28:	f001 f977 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a2c:	2012      	movs	r0, #18
 8002a2e:	f001 f990 	bl	8003d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a32:	bf00      	nop
 8002a34:	3730      	adds	r7, #48	; 0x30
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40012000 	.word	0x40012000
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400

08002a50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_I2C_MspInit+0xa4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d13c      	bne.n	8002aec <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_I2C_MspInit+0xa8>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_I2C_MspInit+0xa8>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_I2C_MspInit+0xa8>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a94:	2312      	movs	r3, #18
 8002a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4814      	ldr	r0, [pc, #80]	; (8002afc <HAL_I2C_MspInit+0xac>)
 8002aac:	f001 fa0c 	bl	8003ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_I2C_MspInit+0xa8>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_I2C_MspInit+0xa8>)
 8002aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002abe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_I2C_MspInit+0xa8>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	201f      	movs	r0, #31
 8002ad2:	f001 f922 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002ad6:	201f      	movs	r0, #31
 8002ad8:	f001 f93b 	bl	8003d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2020      	movs	r0, #32
 8002ae2:	f001 f91a 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002ae6:	2020      	movs	r0, #32
 8002ae8:	f001 f933 	bl	8003d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40005400 	.word	0x40005400
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020400 	.word	0x40020400

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a67      	ldr	r2, [pc, #412]	; (8002cbc <HAL_UART_MspInit+0x1bc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d134      	bne.n	8002b8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	4b66      	ldr	r3, [pc, #408]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a65      	ldr	r2, [pc, #404]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a5e      	ldr	r2, [pc, #376]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	4853      	ldr	r0, [pc, #332]	; (8002cc4 <HAL_UART_MspInit+0x1c4>)
 8002b76:	f001 f9a7 	bl	8003ec8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2034      	movs	r0, #52	; 0x34
 8002b80:	f001 f8cb 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b84:	2034      	movs	r0, #52	; 0x34
 8002b86:	f001 f8e4 	bl	8003d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b8a:	e092      	b.n	8002cb2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_UART_MspInit+0x1c8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d135      	bne.n	8002c02 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002ba0:	f043 0310 	orr.w	r3, r3, #16
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a41      	ldr	r2, [pc, #260]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be0:	2307      	movs	r3, #7
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	4619      	mov	r1, r3
 8002bea:	4836      	ldr	r0, [pc, #216]	; (8002cc4 <HAL_UART_MspInit+0x1c4>)
 8002bec:	f001 f96c 	bl	8003ec8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	2025      	movs	r0, #37	; 0x25
 8002bf6:	f001 f890 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bfa:	2025      	movs	r0, #37	; 0x25
 8002bfc:	f001 f8a9 	bl	8003d52 <HAL_NVIC_EnableIRQ>
}
 8002c00:	e057      	b.n	8002cb2 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <HAL_UART_MspInit+0x1cc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d152      	bne.n	8002cb2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6313      	str	r3, [r2, #48]	; 0x30
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_UART_MspInit+0x1c0>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c60:	2320      	movs	r3, #32
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c70:	2307      	movs	r3, #7
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4815      	ldr	r0, [pc, #84]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002c7c:	f001 f924 	bl	8003ec8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c92:	2307      	movs	r3, #7
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <HAL_UART_MspInit+0x1d4>)
 8002c9e:	f001 f913 	bl	8003ec8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2027      	movs	r0, #39	; 0x27
 8002ca8:	f001 f837 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cac:	2027      	movs	r0, #39	; 0x27
 8002cae:	f001 f850 	bl	8003d52 <HAL_NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3738      	adds	r7, #56	; 0x38
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40004c00 	.word	0x40004c00
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40011000 	.word	0x40011000
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020400 	.word	0x40020400

08002cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <NMI_Handler+0x4>

08002cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce2:	e7fe      	b.n	8002ce2 <HardFault_Handler+0x4>

08002ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <MemManage_Handler+0x4>

08002cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <BusFault_Handler+0x4>

08002cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <UsageFault_Handler+0x4>

08002cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d24:	f000 f992 	bl	800304c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <ADC_IRQHandler+0x10>)
 8002d32:	f000 fba3 	bl	800347c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000508 	.word	0x20000508

08002d40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <I2C1_EV_IRQHandler+0x10>)
 8002d46:	f001 fee9 	bl	8004b1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000550 	.word	0x20000550

08002d54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <I2C1_ER_IRQHandler+0x10>)
 8002d5a:	f002 f850 	bl	8004dfe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000550 	.word	0x20000550

08002d68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <USART1_IRQHandler+0x10>)
 8002d6e:	f004 fe47 	bl	8007a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200002b0 	.word	0x200002b0

08002d7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <USART3_IRQHandler+0x10>)
 8002d82:	f004 fe3d 	bl	8007a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200005e8 	.word	0x200005e8

08002d90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <UART4_IRQHandler+0x10>)
 8002d96:	f004 fe33 	bl	8007a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200005a4 	.word	0x200005a4

08002da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return 1;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_kill>:

int _kill(int pid, int sig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dbe:	f005 fd8b 	bl	80088d8 <__errno>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2216      	movs	r2, #22
 8002dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_exit>:

void _exit (int status)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ffe7 	bl	8002db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002de6:	e7fe      	b.n	8002de6 <_exit+0x12>

08002de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e00a      	b.n	8002e10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dfa:	f3af 8000 	nop.w
 8002dfe:	4601      	mov	r1, r0
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	60ba      	str	r2, [r7, #8]
 8002e06:	b2ca      	uxtb	r2, r1
 8002e08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	dbf0      	blt.n	8002dfa <_read+0x12>
  }

  return len;
 8002e18:	687b      	ldr	r3, [r7, #4]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e009      	b.n	8002e48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dbf1      	blt.n	8002e34 <_write+0x12>
  }
  return len;
 8002e50:	687b      	ldr	r3, [r7, #4]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_close>:

int _close(int file)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e82:	605a      	str	r2, [r3, #4]
  return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_isatty>:

int _isatty(int file)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <_sbrk+0x5c>)
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <_sbrk+0x60>)
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <_sbrk+0x64>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <_sbrk+0x68>)
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d207      	bcs.n	8002f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef4:	f005 fcf0 	bl	80088d8 <__errno>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	220c      	movs	r2, #12
 8002efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e009      	b.n	8002f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <_sbrk+0x64>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <_sbrk+0x64>)
 8002f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20020000 	.word	0x20020000
 8002f24:	00000400 	.word	0x00000400
 8002f28:	2000062c 	.word	0x2000062c
 8002f2c:	20000648 	.word	0x20000648

08002f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <SystemInit+0x20>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <SystemInit+0x20>)
 8002f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f58:	480d      	ldr	r0, [pc, #52]	; (8002f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f5a:	490e      	ldr	r1, [pc, #56]	; (8002f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f5c:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f70:	4c0b      	ldr	r4, [pc, #44]	; (8002fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f7e:	f7ff ffd7 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f82:	f005 fcaf 	bl	80088e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f86:	f7ff fc95 	bl	80028b4 <main>
  bx  lr    
 8002f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002f98:	0800db90 	.word	0x0800db90
  ldr r2, =_sbss
 8002f9c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002fa0:	20000644 	.word	0x20000644

08002fa4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <CAN1_RX0_IRQHandler>
	...

08002fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_Init+0x40>)
 8002fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_Init+0x40>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <HAL_Init+0x40>)
 8002fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_Init+0x40>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <HAL_Init+0x40>)
 8002fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd0:	2003      	movs	r0, #3
 8002fd2:	f000 fe97 	bl	8003d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f000 f808 	bl	8002fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fdc:	f7ff fc8c 	bl	80028f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00

08002fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_InitTick+0x54>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_InitTick+0x58>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003002:	fbb3 f3f1 	udiv	r3, r3, r1
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	4618      	mov	r0, r3
 800300c:	f000 feaf 	bl	8003d6e <HAL_SYSTICK_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e00e      	b.n	8003038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d80a      	bhi.n	8003036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f000 fe77 	bl	8003d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <HAL_InitTick+0x5c>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000000 	.word	0x20000000
 8003044:	20000008 	.word	0x20000008
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x20>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_IncTick+0x24>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_IncTick+0x24>)
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000008 	.word	0x20000008
 8003070:	20000630 	.word	0x20000630

08003074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_GetTick+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000630 	.word	0x20000630

0800308c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003094:	f7ff ffee 	bl	8003074 <HAL_GetTick>
 8003098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d005      	beq.n	80030b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_Delay+0x44>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030b2:	bf00      	nop
 80030b4:	f7ff ffde 	bl	8003074 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d8f7      	bhi.n	80030b4 <HAL_Delay+0x28>
  {
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000008 	.word	0x20000008

080030d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e033      	b.n	8003152 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fc28 	bl	8002948 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d118      	bne.n	8003144 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800311a:	f023 0302 	bic.w	r3, r3, #2
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fc16 	bl	8003958 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
 8003142:	e001      	b.n	8003148 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Start+0x1a>
 8003172:	2302      	movs	r3, #2
 8003174:	e0b2      	b.n	80032dc <HAL_ADC_Start+0x180>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d018      	beq.n	80031be <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800319c:	4b52      	ldr	r3, [pc, #328]	; (80032e8 <HAL_ADC_Start+0x18c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a52      	ldr	r2, [pc, #328]	; (80032ec <HAL_ADC_Start+0x190>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9a      	lsrs	r2, r3, #18
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031b0:	e002      	b.n	80031b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f9      	bne.n	80031b2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d17a      	bne.n	80032c2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d106      	bne.n	800321a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f023 0206 	bic.w	r2, r3, #6
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
 8003218:	e002      	b.n	8003220 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003228:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <HAL_ADC_Start+0x194>)
 800322a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003234:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12a      	bne.n	8003298 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <HAL_ADC_Start+0x198>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d015      	beq.n	8003278 <HAL_ADC_Start+0x11c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <HAL_ADC_Start+0x19c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d105      	bne.n	8003262 <HAL_ADC_Start+0x106>
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <HAL_ADC_Start+0x194>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_ADC_Start+0x1a0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d136      	bne.n	80032da <HAL_ADC_Start+0x17e>
 800326c:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_ADC_Start+0x194>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d130      	bne.n	80032da <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d129      	bne.n	80032da <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	e020      	b.n	80032da <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <HAL_ADC_Start+0x198>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d11b      	bne.n	80032da <HAL_ADC_Start+0x17e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d114      	bne.n	80032da <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	e00b      	b.n	80032da <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f043 0210 	orr.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000000 	.word	0x20000000
 80032ec:	431bde83 	.word	0x431bde83
 80032f0:	40012300 	.word	0x40012300
 80032f4:	40012000 	.word	0x40012000
 80032f8:	40012100 	.word	0x40012100
 80032fc:	40012200 	.word	0x40012200

08003300 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Stop+0x16>
 8003312:	2302      	movs	r3, #2
 8003314:	e021      	b.n	800335a <HAL_ADC_Stop+0x5a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d113      	bne.n	80033ac <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d10b      	bne.n	80033ac <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e063      	b.n	8003474 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033ac:	f7ff fe62 	bl	8003074 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033b2:	e021      	b.n	80033f8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d01d      	beq.n	80033f8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d007      	beq.n	80033d2 <HAL_ADC_PollForConversion+0x6c>
 80033c2:	f7ff fe57 	bl	8003074 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d212      	bcs.n	80033f8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d00b      	beq.n	80033f8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e03d      	b.n	8003474 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d1d6      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0212 	mvn.w	r2, #18
 800340e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d123      	bne.n	8003472 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11f      	bne.n	8003472 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800344a:	2b00      	cmp	r3, #0
 800344c:	d111      	bne.n	8003472 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d049      	beq.n	8003546 <HAL_ADC_IRQHandler+0xca>
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d046      	beq.n	8003546 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d12b      	bne.n	8003536 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d127      	bne.n	8003536 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d119      	bne.n	8003536 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0220 	bic.w	r2, r2, #32
 8003510:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8bd 	bl	80036b6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0212 	mvn.w	r2, #18
 8003544:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d057      	beq.n	800360c <HAL_ADC_IRQHandler+0x190>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d054      	beq.n	800360c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d139      	bne.n	80035fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d12b      	bne.n	80035fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d124      	bne.n	80035fc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11d      	bne.n	80035fc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d119      	bne.n	80035fc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 faa7 	bl	8003b50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 020c 	mvn.w	r2, #12
 800360a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <HAL_ADC_IRQHandler+0x1d6>
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d014      	beq.n	8003652 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10d      	bne.n	8003652 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f841 	bl	80036ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0201 	mvn.w	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003660:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <HAL_ADC_IRQHandler+0x218>
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d012      	beq.n	8003694 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f06f 0220 	mvn.w	r2, #32
 8003682:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f82a 	bl	80036de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f06f 0220 	mvn.w	r2, #32
 8003692:	601a      	str	r2, [r3, #0]
  }
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x1c>
 800370c:	2302      	movs	r3, #2
 800370e:	e113      	b.n	8003938 <HAL_ADC_ConfigChannel+0x244>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b09      	cmp	r3, #9
 800371e:	d925      	bls.n	800376c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68d9      	ldr	r1, [r3, #12]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	3b1e      	subs	r3, #30
 8003736:	2207      	movs	r2, #7
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43da      	mvns	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	400a      	ands	r2, r1
 8003744:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68d9      	ldr	r1, [r3, #12]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	4618      	mov	r0, r3
 8003758:	4603      	mov	r3, r0
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4403      	add	r3, r0
 800375e:	3b1e      	subs	r3, #30
 8003760:	409a      	lsls	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e022      	b.n	80037b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6919      	ldr	r1, [r3, #16]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	2207      	movs	r2, #7
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	400a      	ands	r2, r1
 800378e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6919      	ldr	r1, [r3, #16]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	4618      	mov	r0, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4403      	add	r3, r0
 80037a8:	409a      	lsls	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d824      	bhi.n	8003804 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	3b05      	subs	r3, #5
 80037cc:	221f      	movs	r2, #31
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43da      	mvns	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	400a      	ands	r2, r1
 80037da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	4618      	mov	r0, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	3b05      	subs	r3, #5
 80037f6:	fa00 f203 	lsl.w	r2, r0, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	635a      	str	r2, [r3, #52]	; 0x34
 8003802:	e04c      	b.n	800389e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d824      	bhi.n	8003856 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	3b23      	subs	r3, #35	; 0x23
 800381e:	221f      	movs	r2, #31
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43da      	mvns	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	400a      	ands	r2, r1
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	4618      	mov	r0, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	3b23      	subs	r3, #35	; 0x23
 8003848:	fa00 f203 	lsl.w	r2, r0, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
 8003854:	e023      	b.n	800389e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	3b41      	subs	r3, #65	; 0x41
 8003868:	221f      	movs	r2, #31
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	400a      	ands	r2, r1
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	4618      	mov	r0, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	3b41      	subs	r3, #65	; 0x41
 8003892:	fa00 f203 	lsl.w	r2, r0, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800389e:	4b29      	ldr	r3, [pc, #164]	; (8003944 <HAL_ADC_ConfigChannel+0x250>)
 80038a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a28      	ldr	r2, [pc, #160]	; (8003948 <HAL_ADC_ConfigChannel+0x254>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10f      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x1d8>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b12      	cmp	r3, #18
 80038b2:	d10b      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_ADC_ConfigChannel+0x254>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d12b      	bne.n	800392e <HAL_ADC_ConfigChannel+0x23a>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <HAL_ADC_ConfigChannel+0x258>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <HAL_ADC_ConfigChannel+0x1f4>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b11      	cmp	r3, #17
 80038e6:	d122      	bne.n	800392e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_ADC_ConfigChannel+0x258>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d111      	bne.n	800392e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <HAL_ADC_ConfigChannel+0x25c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_ADC_ConfigChannel+0x260>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	0c9a      	lsrs	r2, r3, #18
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003920:	e002      	b.n	8003928 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3b01      	subs	r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f9      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40012300 	.word	0x40012300
 8003948:	40012000 	.word	0x40012000
 800394c:	10000012 	.word	0x10000012
 8003950:	20000000 	.word	0x20000000
 8003954:	431bde83 	.word	0x431bde83

08003958 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003960:	4b79      	ldr	r3, [pc, #484]	; (8003b48 <ADC_Init+0x1f0>)
 8003962:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	431a      	orrs	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800398c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	021a      	lsls	r2, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6899      	ldr	r1, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	4a58      	ldr	r2, [pc, #352]	; (8003b4c <ADC_Init+0x1f4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	e00f      	b.n	8003a56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0202 	bic.w	r2, r2, #2
 8003a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6899      	ldr	r1, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e1b      	ldrb	r3, [r3, #24]
 8003a70:	005a      	lsls	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	035a      	lsls	r2, r3, #13
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	e007      	b.n	8003acc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	051a      	lsls	r2, r3, #20
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b0e:	025a      	lsls	r2, r3, #9
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	029a      	lsls	r2, r3, #10
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012300 	.word	0x40012300
 8003b4c:	0f000001 	.word	0x0f000001

08003b50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b80:	4013      	ands	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b96:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	60d3      	str	r3, [r2, #12]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	f003 0307 	and.w	r3, r3, #7
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	db0b      	blt.n	8003bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	4907      	ldr	r1, [pc, #28]	; (8003c00 <__NVIC_EnableIRQ+0x38>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2001      	movs	r0, #1
 8003bea:	fa00 f202 	lsl.w	r2, r0, r2
 8003bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	e000e100 	.word	0xe000e100

08003c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db0a      	blt.n	8003c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	490c      	ldr	r1, [pc, #48]	; (8003c50 <__NVIC_SetPriority+0x4c>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	440b      	add	r3, r1
 8003c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c2c:	e00a      	b.n	8003c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4908      	ldr	r1, [pc, #32]	; (8003c54 <__NVIC_SetPriority+0x50>)
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	761a      	strb	r2, [r3, #24]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000e100 	.word	0xe000e100
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	bf28      	it	cs
 8003c76:	2304      	movcs	r3, #4
 8003c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d902      	bls.n	8003c88 <NVIC_EncodePriority+0x30>
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3b03      	subs	r3, #3
 8003c86:	e000      	b.n	8003c8a <NVIC_EncodePriority+0x32>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43d9      	mvns	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb0:	4313      	orrs	r3, r2
         );
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd0:	d301      	bcc.n	8003cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00f      	b.n	8003cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <SysTick_Config+0x40>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cde:	210f      	movs	r1, #15
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	f7ff ff8e 	bl	8003c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <SysTick_Config+0x40>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <SysTick_Config+0x40>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	e000e010 	.word	0xe000e010

08003d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff29 	bl	8003b64 <__NVIC_SetPriorityGrouping>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d2c:	f7ff ff3e 	bl	8003bac <__NVIC_GetPriorityGrouping>
 8003d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f7ff ff8e 	bl	8003c58 <NVIC_EncodePriority>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff5d 	bl	8003c04 <__NVIC_SetPriority>
}
 8003d4a:	bf00      	nop
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff31 	bl	8003bc8 <__NVIC_EnableIRQ>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff ffa2 	bl	8003cc0 <SysTick_Config>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d94:	f7ff f96e 	bl	8003074 <HAL_GetTick>
 8003d98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d008      	beq.n	8003db8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2280      	movs	r2, #128	; 0x80
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e052      	b.n	8003e5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0216 	bic.w	r2, r2, #22
 8003dc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <HAL_DMA_Abort+0x62>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0208 	bic.w	r2, r2, #8
 8003df6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e08:	e013      	b.n	8003e32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e0a:	f7ff f933 	bl	8003074 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b05      	cmp	r3, #5
 8003e16:	d90c      	bls.n	8003e32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2203      	movs	r2, #3
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e015      	b.n	8003e5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e4      	bne.n	8003e0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	223f      	movs	r2, #63	; 0x3f
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d004      	beq.n	8003e84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e00c      	b.n	8003e9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2205      	movs	r2, #5
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb8:	b2db      	uxtb	r3, r3
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e165      	b.n	80041b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	f040 8154 	bne.w	80041aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d005      	beq.n	8003f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d130      	bne.n	8003f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2203      	movs	r2, #3
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f50:	2201      	movs	r2, #1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 0201 	and.w	r2, r3, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d017      	beq.n	8003fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d123      	bne.n	800400c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	08da      	lsrs	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3208      	adds	r2, #8
 8003fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	220f      	movs	r2, #15
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	08da      	lsrs	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3208      	adds	r2, #8
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0203 	and.w	r2, r3, #3
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80ae 	beq.w	80041aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b5d      	ldr	r3, [pc, #372]	; (80041c8 <HAL_GPIO_Init+0x300>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4a5c      	ldr	r2, [pc, #368]	; (80041c8 <HAL_GPIO_Init+0x300>)
 8004058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	4b5a      	ldr	r3, [pc, #360]	; (80041c8 <HAL_GPIO_Init+0x300>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800406a:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_GPIO_Init+0x304>)
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	3302      	adds	r3, #2
 8004072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a4f      	ldr	r2, [pc, #316]	; (80041d0 <HAL_GPIO_Init+0x308>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d025      	beq.n	80040e2 <HAL_GPIO_Init+0x21a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4e      	ldr	r2, [pc, #312]	; (80041d4 <HAL_GPIO_Init+0x30c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01f      	beq.n	80040de <HAL_GPIO_Init+0x216>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4d      	ldr	r2, [pc, #308]	; (80041d8 <HAL_GPIO_Init+0x310>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d019      	beq.n	80040da <HAL_GPIO_Init+0x212>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a4c      	ldr	r2, [pc, #304]	; (80041dc <HAL_GPIO_Init+0x314>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <HAL_GPIO_Init+0x20e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4b      	ldr	r2, [pc, #300]	; (80041e0 <HAL_GPIO_Init+0x318>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00d      	beq.n	80040d2 <HAL_GPIO_Init+0x20a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a4a      	ldr	r2, [pc, #296]	; (80041e4 <HAL_GPIO_Init+0x31c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <HAL_GPIO_Init+0x206>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a49      	ldr	r2, [pc, #292]	; (80041e8 <HAL_GPIO_Init+0x320>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_GPIO_Init+0x202>
 80040c6:	2306      	movs	r3, #6
 80040c8:	e00c      	b.n	80040e4 <HAL_GPIO_Init+0x21c>
 80040ca:	2307      	movs	r3, #7
 80040cc:	e00a      	b.n	80040e4 <HAL_GPIO_Init+0x21c>
 80040ce:	2305      	movs	r3, #5
 80040d0:	e008      	b.n	80040e4 <HAL_GPIO_Init+0x21c>
 80040d2:	2304      	movs	r3, #4
 80040d4:	e006      	b.n	80040e4 <HAL_GPIO_Init+0x21c>
 80040d6:	2303      	movs	r3, #3
 80040d8:	e004      	b.n	80040e4 <HAL_GPIO_Init+0x21c>
 80040da:	2302      	movs	r3, #2
 80040dc:	e002      	b.n	80040e4 <HAL_GPIO_Init+0x21c>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_GPIO_Init+0x21c>
 80040e2:	2300      	movs	r3, #0
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	f002 0203 	and.w	r2, r2, #3
 80040ea:	0092      	lsls	r2, r2, #2
 80040ec:	4093      	lsls	r3, r2
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f4:	4935      	ldr	r1, [pc, #212]	; (80041cc <HAL_GPIO_Init+0x304>)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	3302      	adds	r3, #2
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004126:	4a31      	ldr	r2, [pc, #196]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800412c:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <HAL_GPIO_Init+0x324>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004156:	4b25      	ldr	r3, [pc, #148]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_GPIO_Init+0x324>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <HAL_GPIO_Init+0x324>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <HAL_GPIO_Init+0x324>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b0f      	cmp	r3, #15
 80041b4:	f67f ae96 	bls.w	8003ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3724      	adds	r7, #36	; 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40020000 	.word	0x40020000
 80041d4:	40020400 	.word	0x40020400
 80041d8:	40020800 	.word	0x40020800
 80041dc:	40020c00 	.word	0x40020c00
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40021400 	.word	0x40021400
 80041e8:	40021800 	.word	0x40021800
 80041ec:	40013c00 	.word	0x40013c00

080041f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e001      	b.n	8004212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
 800422c:	4613      	mov	r3, r2
 800422e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004230:	787b      	ldrb	r3, [r7, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800423c:	e003      	b.n	8004246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	041a      	lsls	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	619a      	str	r2, [r3, #24]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e12b      	b.n	80044be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fe fbe8 	bl	8002a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042b8:	f002 fd58 	bl	8006d6c <HAL_RCC_GetPCLK1Freq>
 80042bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4a81      	ldr	r2, [pc, #516]	; (80044c8 <HAL_I2C_Init+0x274>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d807      	bhi.n	80042d8 <HAL_I2C_Init+0x84>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a80      	ldr	r2, [pc, #512]	; (80044cc <HAL_I2C_Init+0x278>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bf94      	ite	ls
 80042d0:	2301      	movls	r3, #1
 80042d2:	2300      	movhi	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e006      	b.n	80042e6 <HAL_I2C_Init+0x92>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a7d      	ldr	r2, [pc, #500]	; (80044d0 <HAL_I2C_Init+0x27c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	bf94      	ite	ls
 80042e0:	2301      	movls	r3, #1
 80042e2:	2300      	movhi	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e0e7      	b.n	80044be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a78      	ldr	r2, [pc, #480]	; (80044d4 <HAL_I2C_Init+0x280>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	0c9b      	lsrs	r3, r3, #18
 80042f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a6a      	ldr	r2, [pc, #424]	; (80044c8 <HAL_I2C_Init+0x274>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d802      	bhi.n	8004328 <HAL_I2C_Init+0xd4>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3301      	adds	r3, #1
 8004326:	e009      	b.n	800433c <HAL_I2C_Init+0xe8>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	4a69      	ldr	r2, [pc, #420]	; (80044d8 <HAL_I2C_Init+0x284>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	3301      	adds	r3, #1
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	430b      	orrs	r3, r1
 8004342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800434e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	495c      	ldr	r1, [pc, #368]	; (80044c8 <HAL_I2C_Init+0x274>)
 8004358:	428b      	cmp	r3, r1
 800435a:	d819      	bhi.n	8004390 <HAL_I2C_Init+0x13c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e59      	subs	r1, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fbb1 f3f3 	udiv	r3, r1, r3
 800436a:	1c59      	adds	r1, r3, #1
 800436c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004370:	400b      	ands	r3, r1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_I2C_Init+0x138>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1e59      	subs	r1, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	fbb1 f3f3 	udiv	r3, r1, r3
 8004384:	3301      	adds	r3, #1
 8004386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438a:	e051      	b.n	8004430 <HAL_I2C_Init+0x1dc>
 800438c:	2304      	movs	r3, #4
 800438e:	e04f      	b.n	8004430 <HAL_I2C_Init+0x1dc>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d111      	bne.n	80043bc <HAL_I2C_Init+0x168>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e58      	subs	r0, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	440b      	add	r3, r1
 80043a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043aa:	3301      	adds	r3, #1
 80043ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e012      	b.n	80043e2 <HAL_I2C_Init+0x18e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e58      	subs	r0, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	0099      	lsls	r1, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d2:	3301      	adds	r3, #1
 80043d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_Init+0x196>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e022      	b.n	8004430 <HAL_I2C_Init+0x1dc>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10e      	bne.n	8004410 <HAL_I2C_Init+0x1bc>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1e58      	subs	r0, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	440b      	add	r3, r1
 8004400:	fbb0 f3f3 	udiv	r3, r0, r3
 8004404:	3301      	adds	r3, #1
 8004406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800440a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440e:	e00f      	b.n	8004430 <HAL_I2C_Init+0x1dc>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1e58      	subs	r0, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	0099      	lsls	r1, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	fbb0 f3f3 	udiv	r3, r0, r3
 8004426:	3301      	adds	r3, #1
 8004428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	6809      	ldr	r1, [r1, #0]
 8004434:	4313      	orrs	r3, r2
 8004436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69da      	ldr	r2, [r3, #28]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800445e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6911      	ldr	r1, [r2, #16]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68d2      	ldr	r2, [r2, #12]
 800446a:	4311      	orrs	r1, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	430b      	orrs	r3, r1
 8004472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	000186a0 	.word	0x000186a0
 80044cc:	001e847f 	.word	0x001e847f
 80044d0:	003d08ff 	.word	0x003d08ff
 80044d4:	431bde83 	.word	0x431bde83
 80044d8:	10624dd3 	.word	0x10624dd3

080044dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	4608      	mov	r0, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	461a      	mov	r2, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	460b      	mov	r3, r1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044f6:	f7fe fdbd 	bl	8003074 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b20      	cmp	r3, #32
 8004506:	f040 80d9 	bne.w	80046bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	2319      	movs	r3, #25
 8004510:	2201      	movs	r2, #1
 8004512:	496d      	ldr	r1, [pc, #436]	; (80046c8 <HAL_I2C_Mem_Write+0x1ec>)
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f002 f90d 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
 8004522:	e0cc      	b.n	80046be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_I2C_Mem_Write+0x56>
 800452e:	2302      	movs	r3, #2
 8004530:	e0c5      	b.n	80046be <HAL_I2C_Mem_Write+0x1e2>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d007      	beq.n	8004558 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2221      	movs	r2, #33	; 0x21
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2240      	movs	r2, #64	; 0x40
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a3a      	ldr	r2, [r7, #32]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a4d      	ldr	r2, [pc, #308]	; (80046cc <HAL_I2C_Mem_Write+0x1f0>)
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800459a:	88f8      	ldrh	r0, [r7, #6]
 800459c:	893a      	ldrh	r2, [r7, #8]
 800459e:	8979      	ldrh	r1, [r7, #10]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	4603      	mov	r3, r0
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f001 fe9c 	bl	80062e8 <I2C_RequestMemoryWrite>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d052      	beq.n	800465c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e081      	b.n	80046be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f002 f98e 	bl	80068e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e06b      	b.n	80046be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b04      	cmp	r3, #4
 8004622:	d11b      	bne.n	800465c <HAL_I2C_Mem_Write+0x180>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d017      	beq.n	800465c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1aa      	bne.n	80045ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f002 f97a 	bl	8006962 <I2C_WaitOnBTFFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	2b04      	cmp	r3, #4
 800467a:	d107      	bne.n	800468c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800468a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e016      	b.n	80046be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	00100002 	.word	0x00100002
 80046cc:	ffff0000 	.word	0xffff0000

080046d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	; 0x30
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ea:	f7fe fcc3 	bl	8003074 <HAL_GetTick>
 80046ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	f040 8208 	bne.w	8004b0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	497b      	ldr	r1, [pc, #492]	; (80048f4 <HAL_I2C_Mem_Read+0x224>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f002 f813 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	e1fb      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Mem_Read+0x56>
 8004722:	2302      	movs	r3, #2
 8004724:	e1f4      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2222      	movs	r2, #34	; 0x22
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a5b      	ldr	r2, [pc, #364]	; (80048f8 <HAL_I2C_Mem_Read+0x228>)
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800478e:	88f8      	ldrh	r0, [r7, #6]
 8004790:	893a      	ldrh	r2, [r7, #8]
 8004792:	8979      	ldrh	r1, [r7, #10]
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f001 fe38 	bl	8006414 <I2C_RequestMemoryRead>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e1b0      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d113      	bne.n	80047de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	623b      	str	r3, [r7, #32]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e184      	b.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d11b      	bne.n	800481e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e164      	b.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b02      	cmp	r3, #2
 8004824:	d11b      	bne.n	800485e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004834:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	e144      	b.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004874:	e138      	b.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	2b03      	cmp	r3, #3
 800487c:	f200 80f1 	bhi.w	8004a62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	2b01      	cmp	r3, #1
 8004886:	d123      	bne.n	80048d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f002 f8db 	bl	8006a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e139      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ce:	e10b      	b.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d14e      	bne.n	8004976 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	2200      	movs	r2, #0
 80048e0:	4906      	ldr	r1, [pc, #24]	; (80048fc <HAL_I2C_Mem_Read+0x22c>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f001 ff26 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e10e      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
 80048f2:	bf00      	nop
 80048f4:	00100002 	.word	0x00100002
 80048f8:	ffff0000 	.word	0xffff0000
 80048fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004974:	e0b8      	b.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	2200      	movs	r2, #0
 800497e:	4966      	ldr	r1, [pc, #408]	; (8004b18 <HAL_I2C_Mem_Read+0x448>)
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 fed7 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0bf      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	2200      	movs	r2, #0
 80049da:	494f      	ldr	r1, [pc, #316]	; (8004b18 <HAL_I2C_Mem_Read+0x448>)
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f001 fea9 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e091      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a60:	e042      	b.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 ffee 	bl	8006a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e04c      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d118      	bne.n	8004ae8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f47f aec2 	bne.w	8004876 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
  }
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3728      	adds	r7, #40	; 0x28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	00010004 	.word	0x00010004

08004b1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d003      	beq.n	8004b54 <HAL_I2C_EV_IRQHandler+0x38>
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	f040 80c1 	bne.w	8004cd6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10d      	bne.n	8004b8a <HAL_I2C_EV_IRQHandler+0x6e>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b74:	d003      	beq.n	8004b7e <HAL_I2C_EV_IRQHandler+0x62>
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_EV_IRQHandler+0x66>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_I2C_EV_IRQHandler+0x68>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f000 8132 	beq.w	8004dee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00c      	beq.n	8004bae <HAL_I2C_EV_IRQHandler+0x92>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	0a5b      	lsrs	r3, r3, #9
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 ffd6 	bl	8006b52 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fd83 	bl	80056b2 <I2C_Master_SB>
 8004bac:	e092      	b.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	08db      	lsrs	r3, r3, #3
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <HAL_I2C_EV_IRQHandler+0xb2>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	0a5b      	lsrs	r3, r3, #9
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fdf9 	bl	80057be <I2C_Master_ADD10>
 8004bcc:	e082      	b.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_I2C_EV_IRQHandler+0xd2>
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	0a5b      	lsrs	r3, r3, #9
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fe13 	bl	8005812 <I2C_Master_ADDR>
 8004bec:	e072      	b.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d03b      	beq.n	8004c72 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c08:	f000 80f3 	beq.w	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	09db      	lsrs	r3, r3, #7
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00f      	beq.n	8004c38 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	0a9b      	lsrs	r3, r3, #10
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9f3 	bl	800501c <I2C_MasterTransmit_TXE>
 8004c36:	e04d      	b.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80d6 	beq.w	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80cf 	beq.w	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c54:	7bbb      	ldrb	r3, [r7, #14]
 8004c56:	2b21      	cmp	r3, #33	; 0x21
 8004c58:	d103      	bne.n	8004c62 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa7a 	bl	8005154 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c60:	e0c7      	b.n	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	f040 80c4 	bne.w	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fae8 	bl	8005240 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c70:	e0bf      	b.n	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c80:	f000 80b7 	beq.w	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00f      	beq.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x194>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	0a9b      	lsrs	r3, r3, #10
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x194>
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb5d 	bl	8005368 <I2C_MasterReceive_RXNE>
 8004cae:	e011      	b.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 809a 	beq.w	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	0a5b      	lsrs	r3, r3, #9
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8093 	beq.w	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fc06 	bl	80054de <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd2:	e08e      	b.n	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cd4:	e08d      	b.n	8004df2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e007      	b.n	8004cf8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d012      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0x20e>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	0a5b      	lsrs	r3, r3, #9
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 ffc4 	bl	8005cb0 <I2C_Slave_ADDR>
 8004d28:	e066      	b.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_I2C_EV_IRQHandler+0x22e>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	0a5b      	lsrs	r3, r3, #9
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fffe 	bl	8005d44 <I2C_Slave_STOPF>
 8004d48:	e056      	b.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d4a:	7bbb      	ldrb	r3, [r7, #14]
 8004d4c:	2b21      	cmp	r3, #33	; 0x21
 8004d4e:	d002      	beq.n	8004d56 <HAL_I2C_EV_IRQHandler+0x23a>
 8004d50:	7bbb      	ldrb	r3, [r7, #14]
 8004d52:	2b29      	cmp	r3, #41	; 0x29
 8004d54:	d125      	bne.n	8004da2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	09db      	lsrs	r3, r3, #7
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00f      	beq.n	8004d82 <HAL_I2C_EV_IRQHandler+0x266>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	0a9b      	lsrs	r3, r3, #10
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_I2C_EV_IRQHandler+0x266>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	089b      	lsrs	r3, r3, #2
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 feda 	bl	8005b34 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d80:	e039      	b.n	8004df6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	089b      	lsrs	r3, r3, #2
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d033      	beq.n	8004df6 <HAL_I2C_EV_IRQHandler+0x2da>
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	0a5b      	lsrs	r3, r3, #9
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d02d      	beq.n	8004df6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 ff07 	bl	8005bae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004da0:	e029      	b.n	8004df6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	099b      	lsrs	r3, r3, #6
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x2b2>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	0a9b      	lsrs	r3, r3, #10
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x2b2>
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 ff12 	bl	8005bf0 <I2C_SlaveReceive_RXNE>
 8004dcc:	e014      	b.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00e      	beq.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	0a5b      	lsrs	r3, r3, #9
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 ff40 	bl	8005c6c <I2C_SlaveReceive_BTF>
 8004dec:	e004      	b.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004df6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b08a      	sub	sp, #40	; 0x28
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e20:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00e      	beq.n	8004e4c <HAL_I2C_ER_IRQHandler+0x4e>
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	0a1b      	lsrs	r3, r3, #8
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e4a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	0a5b      	lsrs	r3, r3, #9
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <HAL_I2C_ER_IRQHandler+0x78>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	f043 0302 	orr.w	r3, r3, #2
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004e74:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	0a9b      	lsrs	r3, r3, #10
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d03f      	beq.n	8004f02 <HAL_I2C_ER_IRQHandler+0x104>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	0a1b      	lsrs	r3, r3, #8
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d039      	beq.n	8004f02 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004e8e:	7efb      	ldrb	r3, [r7, #27]
 8004e90:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ea8:	7ebb      	ldrb	r3, [r7, #26]
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d112      	bne.n	8004ed4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10f      	bne.n	8004ed4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	2b21      	cmp	r3, #33	; 0x21
 8004eb8:	d008      	beq.n	8004ecc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b29      	cmp	r3, #41	; 0x29
 8004ebe:	d005      	beq.n	8004ecc <HAL_I2C_ER_IRQHandler+0xce>
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b28      	cmp	r3, #40	; 0x28
 8004ec4:	d106      	bne.n	8004ed4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b21      	cmp	r3, #33	; 0x21
 8004eca:	d103      	bne.n	8004ed4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f001 f869 	bl	8005fa4 <I2C_Slave_AF>
 8004ed2:	e016      	b.n	8004f02 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004edc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ee6:	7efb      	ldrb	r3, [r7, #27]
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d002      	beq.n	8004ef2 <HAL_I2C_ER_IRQHandler+0xf4>
 8004eec:	7efb      	ldrb	r3, [r7, #27]
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d107      	bne.n	8004f02 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f00:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	0adb      	lsrs	r3, r3, #11
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <HAL_I2C_ER_IRQHandler+0x12e>
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	f043 0308 	orr.w	r3, r3, #8
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004f2a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 f8a0 	bl	8006084 <I2C_ITError>
  }
}
 8004f44:	bf00      	nop
 8004f46:	3728      	adds	r7, #40	; 0x28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005032:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	d150      	bne.n	80050e4 <I2C_MasterTransmit_TXE+0xc8>
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b21      	cmp	r3, #33	; 0x21
 8005046:	d14d      	bne.n	80050e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b08      	cmp	r3, #8
 800504c:	d01d      	beq.n	800508a <I2C_MasterTransmit_TXE+0x6e>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b20      	cmp	r3, #32
 8005052:	d01a      	beq.n	800508a <I2C_MasterTransmit_TXE+0x6e>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800505a:	d016      	beq.n	800508a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800506a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2211      	movs	r2, #17
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff ff62 	bl	8004f4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005088:	e060      	b.n	800514c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005098:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d107      	bne.n	80050d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ff7d 	bl	8004fcc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050d2:	e03b      	b.n	800514c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff ff35 	bl	8004f4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050e2:	e033      	b.n	800514c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b21      	cmp	r3, #33	; 0x21
 80050e8:	d005      	beq.n	80050f6 <I2C_MasterTransmit_TXE+0xda>
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d12d      	bne.n	800514c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b22      	cmp	r3, #34	; 0x22
 80050f4:	d12a      	bne.n	800514c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005110:	e01c      	b.n	800514c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d103      	bne.n	8005126 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f88e 	bl	8005240 <I2C_MemoryTransmit_TXE_BTF>
}
 8005124:	e012      	b.n	800514c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800514a:	e7ff      	b.n	800514c <I2C_MasterTransmit_TXE+0x130>
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b21      	cmp	r3, #33	; 0x21
 800516c:	d164      	bne.n	8005238 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d012      	beq.n	800519e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	781a      	ldrb	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800519c:	e04c      	b.n	8005238 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d01d      	beq.n	80051e0 <I2C_MasterTransmit_BTF+0x8c>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d01a      	beq.n	80051e0 <I2C_MasterTransmit_BTF+0x8c>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b0:	d016      	beq.n	80051e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2211      	movs	r2, #17
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff feb7 	bl	8004f4c <HAL_I2C_MasterTxCpltCallback>
}
 80051de:	e02b      	b.n	8005238 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d107      	bne.n	800522a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fed2 	bl	8004fcc <HAL_I2C_MemTxCpltCallback>
}
 8005228:	e006      	b.n	8005238 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fe8a 	bl	8004f4c <HAL_I2C_MasterTxCpltCallback>
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11d      	bne.n	8005294 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10b      	bne.n	8005278 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005264:	b2da      	uxtb	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005270:	1c9a      	adds	r2, r3, #2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005276:	e073      	b.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527c:	b29b      	uxth	r3, r3
 800527e:	121b      	asrs	r3, r3, #8
 8005280:	b2da      	uxtb	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005292:	e065      	b.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10b      	bne.n	80052b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052b2:	e055      	b.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d151      	bne.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b22      	cmp	r3, #34	; 0x22
 80052c0:	d10d      	bne.n	80052de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052dc:	e040      	b.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b21      	cmp	r3, #33	; 0x21
 80052ec:	d112      	bne.n	8005314 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005312:	e025      	b.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d120      	bne.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	2b21      	cmp	r3, #33	; 0x21
 8005322:	d11d      	bne.n	8005360 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005332:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005342:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fe36 	bl	8004fcc <HAL_I2C_MemTxCpltCallback>
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b22      	cmp	r3, #34	; 0x22
 800537a:	f040 80ac 	bne.w	80054d6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d921      	bls.n	80053d0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	f040 808c 	bne.w	80054d6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053cc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80053ce:	e082      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d075      	beq.n	80054c4 <I2C_MasterReceive_RXNE+0x15c>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d002      	beq.n	80053e4 <I2C_MasterReceive_RXNE+0x7c>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d16f      	bne.n	80054c4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 fafd 	bl	80069e4 <I2C_WaitOnSTOPRequestThroughIT>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d142      	bne.n	8005476 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800540e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d10a      	bne.n	8005460 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fdc1 	bl	8004fe0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800545e:	e03a      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2212      	movs	r2, #18
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fd76 	bl	8004f60 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005474:	e02f      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005484:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fd99 	bl	8004ff4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054c2:	e008      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	605a      	str	r2, [r3, #4]
}
 80054d4:	e7ff      	b.n	80054d6 <I2C_MasterReceive_RXNE+0x16e>
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d11b      	bne.n	800552e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005504:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800552c:	e0bd      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b03      	cmp	r3, #3
 8005536:	d129      	bne.n	800558c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005546:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d00a      	beq.n	8005564 <I2C_MasterReceive_BTF+0x86>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d007      	beq.n	8005564 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005562:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800558a:	e08e      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d176      	bne.n	8005684 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d002      	beq.n	80055a2 <I2C_MasterReceive_BTF+0xc4>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d108      	bne.n	80055b4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e019      	b.n	80055e8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d002      	beq.n	80055c0 <I2C_MasterReceive_BTF+0xe2>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d108      	bne.n	80055d2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	e00a      	b.n	80055e8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d007      	beq.n	80055e8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005642:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d10a      	bne.n	800566e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fcba 	bl	8004fe0 <HAL_I2C_MemRxCpltCallback>
}
 800566c:	e01d      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2212      	movs	r2, #18
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff fc6f 	bl	8004f60 <HAL_I2C_MasterRxCpltCallback>
}
 8005682:	e012      	b.n	80056aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d117      	bne.n	80056f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80056e0:	e067      	b.n	80057b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]
}
 80056f4:	e05d      	b.n	80057b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fe:	d133      	bne.n	8005768 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b21      	cmp	r3, #33	; 0x21
 800570a:	d109      	bne.n	8005720 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800571c:	611a      	str	r2, [r3, #16]
 800571e:	e008      	b.n	8005732 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <I2C_Master_SB+0x92>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d108      	bne.n	8005756 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	d032      	beq.n	80057b2 <I2C_Master_SB+0x100>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02d      	beq.n	80057b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005764:	605a      	str	r2, [r3, #4]
}
 8005766:	e024      	b.n	80057b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10e      	bne.n	800578e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005774:	b29b      	uxth	r3, r3
 8005776:	11db      	asrs	r3, r3, #7
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f003 0306 	and.w	r3, r3, #6
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f063 030f 	orn	r3, r3, #15
 8005784:	b2da      	uxtb	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	611a      	str	r2, [r3, #16]
}
 800578c:	e011      	b.n	80057b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	2b01      	cmp	r3, #1
 8005794:	d10d      	bne.n	80057b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579a:	b29b      	uxth	r3, r3
 800579c:	11db      	asrs	r3, r3, #7
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 0306 	and.w	r3, r3, #6
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f063 030e 	orn	r3, r3, #14
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	611a      	str	r2, [r3, #16]
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <I2C_Master_ADD10+0x26>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d108      	bne.n	80057f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <I2C_Master_ADD10+0x48>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005804:	605a      	str	r2, [r3, #4]
  }
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005812:	b480      	push	{r7}
 8005814:	b091      	sub	sp, #68	; 0x44
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005820:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b22      	cmp	r3, #34	; 0x22
 800583a:	f040 8169 	bne.w	8005b10 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <I2C_Master_ADDR+0x54>
 8005846:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d10b      	bne.n	8005866 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584e:	2300      	movs	r3, #0
 8005850:	633b      	str	r3, [r7, #48]	; 0x30
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	633b      	str	r3, [r7, #48]	; 0x30
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	e160      	b.n	8005b28 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	2b00      	cmp	r3, #0
 800586c:	d11d      	bne.n	80058aa <I2C_Master_ADDR+0x98>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005876:	d118      	bne.n	80058aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005878:	2300      	movs	r3, #0
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800589c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50
 80058a8:	e13e      	b.n	8005b28 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d113      	bne.n	80058dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b4:	2300      	movs	r3, #0
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e115      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	f040 808a 	bne.w	80059fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058ee:	d137      	bne.n	8005960 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800590e:	d113      	bne.n	8005938 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	e0e7      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	623b      	str	r3, [r7, #32]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	623b      	str	r3, [r7, #32]
 800594c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e0d3      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	2b08      	cmp	r3, #8
 8005964:	d02e      	beq.n	80059c4 <I2C_Master_ADDR+0x1b2>
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	2b20      	cmp	r3, #32
 800596a:	d02b      	beq.n	80059c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	2b12      	cmp	r3, #18
 8005970:	d102      	bne.n	8005978 <I2C_Master_ADDR+0x166>
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	2b01      	cmp	r3, #1
 8005976:	d125      	bne.n	80059c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	2b04      	cmp	r3, #4
 800597c:	d00e      	beq.n	800599c <I2C_Master_ADDR+0x18a>
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	2b02      	cmp	r3, #2
 8005982:	d00b      	beq.n	800599c <I2C_Master_ADDR+0x18a>
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	2b10      	cmp	r3, #16
 8005988:	d008      	beq.n	800599c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e007      	b.n	80059ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	e0a1      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	e085      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d14d      	bne.n	8005aa2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d016      	beq.n	8005a3a <I2C_Master_ADDR+0x228>
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d013      	beq.n	8005a3a <I2C_Master_ADDR+0x228>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d010      	beq.n	8005a3a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e007      	b.n	8005a4a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a48:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a58:	d117      	bne.n	8005a8a <I2C_Master_ADDR+0x278>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a60:	d00b      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d008      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d005      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d002      	beq.n	8005a7a <I2C_Master_ADDR+0x268>
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d107      	bne.n	8005a8a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a88:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	e032      	b.n	8005b08 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ab0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac0:	d117      	bne.n	8005af2 <I2C_Master_ADDR+0x2e0>
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ac8:	d00b      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d008      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d005      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d002      	beq.n	8005ae2 <I2C_Master_ADDR+0x2d0>
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d107      	bne.n	8005af2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005af0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b0e:	e00b      	b.n	8005b28 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
}
 8005b26:	e7ff      	b.n	8005b28 <I2C_Master_ADDR+0x316>
 8005b28:	bf00      	nop
 8005b2a:	3744      	adds	r7, #68	; 0x44
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02b      	beq.n	8005ba6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d114      	bne.n	8005ba6 <I2C_SlaveTransmit_TXE+0x72>
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b29      	cmp	r3, #41	; 0x29
 8005b80:	d111      	bne.n	8005ba6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b90:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2221      	movs	r2, #33	; 0x21
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2228      	movs	r2, #40	; 0x28
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff f9e7 	bl	8004f74 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d011      	beq.n	8005be4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	781a      	ldrb	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02c      	beq.n	8005c64 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d114      	bne.n	8005c64 <I2C_SlaveReceive_RXNE+0x74>
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3e:	d111      	bne.n	8005c64 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2222      	movs	r2, #34	; 0x22
 8005c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2228      	movs	r2, #40	; 0x28
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff f992 	bl	8004f88 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d012      	beq.n	8005ca4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cca:	2b28      	cmp	r3, #40	; 0x28
 8005ccc:	d127      	bne.n	8005d1e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	09db      	lsrs	r3, r3, #7
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	81bb      	strh	r3, [r7, #12]
 8005d00:	e002      	b.n	8005d08 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d10:	89ba      	ldrh	r2, [r7, #12]
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff f940 	bl	8004f9c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d1c:	e00e      	b.n	8005d3c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d52:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d62:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005d64:	2300      	movs	r3, #0
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d90:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da0:	d172      	bne.n	8005e88 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b22      	cmp	r3, #34	; 0x22
 8005da6:	d002      	beq.n	8005dae <I2C_Slave_STOPF+0x6a>
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dac:	d135      	bne.n	8005e1a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f043 0204 	orr.w	r2, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe f85f 	bl	8003eaa <HAL_DMA_GetState>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d049      	beq.n	8005e86 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	4a69      	ldr	r2, [pc, #420]	; (8005f9c <I2C_Slave_STOPF+0x258>)
 8005df8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe f831 	bl	8003e66 <HAL_DMA_Abort_IT>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d03d      	beq.n	8005e86 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e18:	e035      	b.n	8005e86 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f043 0204 	orr.w	r2, r3, #4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe f829 	bl	8003eaa <HAL_DMA_GetState>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d014      	beq.n	8005e88 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	4a4e      	ldr	r2, [pc, #312]	; (8005f9c <I2C_Slave_STOPF+0x258>)
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd fffb 	bl	8003e66 <HAL_DMA_Abort_IT>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	e000      	b.n	8005e88 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e86:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d03e      	beq.n	8005f10 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d112      	bne.n	8005ec6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d112      	bne.n	8005efa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	f043 0204 	orr.w	r2, r3, #4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8b3 	bl	8006084 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f1e:	e039      	b.n	8005f94 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b2a      	cmp	r3, #42	; 0x2a
 8005f24:	d109      	bne.n	8005f3a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2228      	movs	r2, #40	; 0x28
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff f827 	bl	8004f88 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b28      	cmp	r3, #40	; 0x28
 8005f44:	d111      	bne.n	8005f6a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <I2C_Slave_STOPF+0x25c>)
 8005f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff f828 	bl	8004fb8 <HAL_I2C_ListenCpltCallback>
}
 8005f68:	e014      	b.n	8005f94 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	2b22      	cmp	r3, #34	; 0x22
 8005f70:	d002      	beq.n	8005f78 <I2C_Slave_STOPF+0x234>
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b22      	cmp	r3, #34	; 0x22
 8005f76:	d10d      	bne.n	8005f94 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fe fffa 	bl	8004f88 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	080065e5 	.word	0x080065e5
 8005fa0:	ffff0000 	.word	0xffff0000

08005fa4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d002      	beq.n	8005fc6 <I2C_Slave_AF+0x22>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d129      	bne.n	800601a <I2C_Slave_AF+0x76>
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b28      	cmp	r3, #40	; 0x28
 8005fca:	d126      	bne.n	800601a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a2c      	ldr	r2, [pc, #176]	; (8006080 <I2C_Slave_AF+0xdc>)
 8005fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fe0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fe ffd0 	bl	8004fb8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006018:	e02e      	b.n	8006078 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b21      	cmp	r3, #33	; 0x21
 800601e:	d126      	bne.n	800606e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a17      	ldr	r2, [pc, #92]	; (8006080 <I2C_Slave_AF+0xdc>)
 8006024:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2221      	movs	r2, #33	; 0x21
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800604a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006054:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006064:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fe ff84 	bl	8004f74 <HAL_I2C_SlaveTxCpltCallback>
}
 800606c:	e004      	b.n	8006078 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006076:	615a      	str	r2, [r3, #20]
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	ffff0000 	.word	0xffff0000

08006084 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006092:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d002      	beq.n	80060a8 <I2C_ITError+0x24>
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d10a      	bne.n	80060be <I2C_ITError+0x3a>
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b22      	cmp	r3, #34	; 0x22
 80060ac:	d107      	bne.n	80060be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060c4:	2b28      	cmp	r3, #40	; 0x28
 80060c6:	d107      	bne.n	80060d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2228      	movs	r2, #40	; 0x28
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060d6:	e015      	b.n	8006104 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e6:	d00a      	beq.n	80060fe <I2C_ITError+0x7a>
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b60      	cmp	r3, #96	; 0x60
 80060ec:	d007      	beq.n	80060fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d162      	bne.n	80061da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006122:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	d020      	beq.n	8006174 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006136:	4a6a      	ldr	r2, [pc, #424]	; (80062e0 <I2C_ITError+0x25c>)
 8006138:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd fe91 	bl	8003e66 <HAL_DMA_Abort_IT>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 8089 	beq.w	800625e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0201 	bic.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800616e:	4610      	mov	r0, r2
 8006170:	4798      	blx	r3
 8006172:	e074      	b.n	800625e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	4a59      	ldr	r2, [pc, #356]	; (80062e0 <I2C_ITError+0x25c>)
 800617a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd fe70 	bl	8003e66 <HAL_DMA_Abort_IT>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d068      	beq.n	800625e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d10b      	bne.n	80061b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
 80061d8:	e041      	b.n	800625e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b60      	cmp	r3, #96	; 0x60
 80061e4:	d125      	bne.n	8006232 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d10b      	bne.n	800621a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fe feec 	bl	8005008 <HAL_I2C_AbortCpltCallback>
 8006230:	e015      	b.n	800625e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d10b      	bne.n	8006258 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7fe fecb 	bl	8004ff4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10e      	bne.n	800628c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800629a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d113      	bne.n	80062d8 <I2C_ITError+0x254>
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b28      	cmp	r3, #40	; 0x28
 80062b4:	d110      	bne.n	80062d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <I2C_ITError+0x260>)
 80062ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fe fe70 	bl	8004fb8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	080065e5 	.word	0x080065e5
 80062e4:	ffff0000 	.word	0xffff0000

080062e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	4608      	mov	r0, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	817b      	strh	r3, [r7, #10]
 80062fa:	460b      	mov	r3, r1
 80062fc:	813b      	strh	r3, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006310:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	2200      	movs	r2, #0
 800631a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 fa08 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006338:	d103      	bne.n	8006342 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e05f      	b.n	8006406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006346:	897b      	ldrh	r3, [r7, #10]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006354:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	6a3a      	ldr	r2, [r7, #32]
 800635a:	492d      	ldr	r1, [pc, #180]	; (8006410 <I2C_RequestMemoryWrite+0x128>)
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fa40 	bl	80067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e04c      	b.n	8006406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006384:	6a39      	ldr	r1, [r7, #32]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 faaa 	bl	80068e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00d      	beq.n	80063ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2b04      	cmp	r3, #4
 8006398:	d107      	bne.n	80063aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02b      	b.n	8006406 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d105      	bne.n	80063c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	611a      	str	r2, [r3, #16]
 80063be:	e021      	b.n	8006404 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063c0:	893b      	ldrh	r3, [r7, #8]
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	6a39      	ldr	r1, [r7, #32]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fa84 	bl	80068e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d107      	bne.n	80063f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e005      	b.n	8006406 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063fa:	893b      	ldrh	r3, [r7, #8]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	00010002 	.word	0x00010002

08006414 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af02      	add	r7, sp, #8
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4603      	mov	r3, r0
 8006424:	817b      	strh	r3, [r7, #10]
 8006426:	460b      	mov	r3, r1
 8006428:	813b      	strh	r3, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800643c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	2200      	movs	r2, #0
 8006456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f96a 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006474:	d103      	bne.n	800647e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800647c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e0aa      	b.n	80065d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006482:	897b      	ldrh	r3, [r7, #10]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006490:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	6a3a      	ldr	r2, [r7, #32]
 8006496:	4952      	ldr	r1, [pc, #328]	; (80065e0 <I2C_RequestMemoryRead+0x1cc>)
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f9a2 	bl	80067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e097      	b.n	80065d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c0:	6a39      	ldr	r1, [r7, #32]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 fa0c 	bl	80068e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d107      	bne.n	80064e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e076      	b.n	80065d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d105      	bne.n	80064fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064f0:	893b      	ldrh	r3, [r7, #8]
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	611a      	str	r2, [r3, #16]
 80064fa:	e021      	b.n	8006540 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064fc:	893b      	ldrh	r3, [r7, #8]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	b29b      	uxth	r3, r3
 8006502:	b2da      	uxtb	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	6a39      	ldr	r1, [r7, #32]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f9e6 	bl	80068e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	2b04      	cmp	r3, #4
 8006520:	d107      	bne.n	8006532 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006530:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e050      	b.n	80065d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006536:	893b      	ldrh	r3, [r7, #8]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	6a39      	ldr	r1, [r7, #32]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f9cb 	bl	80068e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00d      	beq.n	800656c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b04      	cmp	r3, #4
 8006556:	d107      	bne.n	8006568 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006566:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e035      	b.n	80065d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800657a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	2200      	movs	r2, #0
 8006584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f8d3 	bl	8006734 <I2C_WaitOnFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00d      	beq.n	80065b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	d103      	bne.n	80065ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e013      	b.n	80065d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065b0:	897b      	ldrh	r3, [r7, #10]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	6a3a      	ldr	r2, [r7, #32]
 80065c4:	4906      	ldr	r1, [pc, #24]	; (80065e0 <I2C_RequestMemoryRead+0x1cc>)
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f90b 	bl	80067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	00010002 	.word	0x00010002

080065e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80065fe:	4b4b      	ldr	r3, [pc, #300]	; (800672c <I2C_DMAAbort+0x148>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	4a4a      	ldr	r2, [pc, #296]	; (8006730 <I2C_DMAAbort+0x14c>)
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	0a1a      	lsrs	r2, r3, #8
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	00da      	lsls	r2, r3, #3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800662a:	e00a      	b.n	8006642 <I2C_DMAAbort+0x5e>
    }
    count--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3b01      	subs	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800663c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006640:	d0ea      	beq.n	8006618 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664e:	2200      	movs	r2, #0
 8006650:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	2200      	movs	r2, #0
 8006660:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006670:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	2200      	movs	r2, #0
 8006686:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	2200      	movs	r2, #0
 8006696:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0201 	bic.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b60      	cmp	r3, #96	; 0x60
 80066b2:	d10e      	bne.n	80066d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2200      	movs	r2, #0
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066ca:	6978      	ldr	r0, [r7, #20]
 80066cc:	f7fe fc9c 	bl	8005008 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066d0:	e027      	b.n	8006722 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066d2:	7cfb      	ldrb	r3, [r7, #19]
 80066d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066d8:	2b28      	cmp	r3, #40	; 0x28
 80066da:	d117      	bne.n	800670c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2200      	movs	r2, #0
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2228      	movs	r2, #40	; 0x28
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800670a:	e007      	b.n	800671c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800671c:	6978      	ldr	r0, [r7, #20]
 800671e:	f7fe fc69 	bl	8004ff4 <HAL_I2C_ErrorCallback>
}
 8006722:	bf00      	nop
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000000 	.word	0x20000000
 8006730:	14f8b589 	.word	0x14f8b589

08006734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	4613      	mov	r3, r2
 8006742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006744:	e025      	b.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d021      	beq.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674e:	f7fc fc91 	bl	8003074 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e023      	b.n	80067da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d10d      	bne.n	80067b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	43da      	mvns	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	bf0c      	ite	eq
 80067ae:	2301      	moveq	r3, #1
 80067b0:	2300      	movne	r3, #0
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	e00c      	b.n	80067d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	43da      	mvns	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d0b6      	beq.n	8006746 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067f0:	e051      	b.n	8006896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006800:	d123      	bne.n	800684a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006810:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800681a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f043 0204 	orr.w	r2, r3, #4
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e046      	b.n	80068d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d021      	beq.n	8006896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006852:	f7fc fc0f 	bl	8003074 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d116      	bne.n	8006896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e020      	b.n	80068d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d10c      	bne.n	80068ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	43da      	mvns	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bf14      	ite	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	2300      	moveq	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	e00b      	b.n	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	43da      	mvns	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d18d      	bne.n	80067f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ec:	e02d      	b.n	800694a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f900 	bl	8006af4 <I2C_IsAcknowledgeFailed>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e02d      	b.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006904:	d021      	beq.n	800694a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006906:	f7fc fbb5 	bl	8003074 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	429a      	cmp	r2, r3
 8006914:	d302      	bcc.n	800691c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d116      	bne.n	800694a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e007      	b.n	800695a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006954:	2b80      	cmp	r3, #128	; 0x80
 8006956:	d1ca      	bne.n	80068ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800696e:	e02d      	b.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f8bf 	bl	8006af4 <I2C_IsAcknowledgeFailed>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e02d      	b.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d021      	beq.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006988:	f7fc fb74 	bl	8003074 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	429a      	cmp	r2, r3
 8006996:	d302      	bcc.n	800699e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d116      	bne.n	80069cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e007      	b.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d1ca      	bne.n	8006970 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80069f0:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	08db      	lsrs	r3, r3, #3
 80069f6:	4a13      	ldr	r2, [pc, #76]	; (8006a44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	0a1a      	lsrs	r2, r3, #8
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f043 0220 	orr.w	r2, r3, #32
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e008      	b.n	8006a34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a30:	d0e9      	beq.n	8006a06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	20000000 	.word	0x20000000
 8006a44:	14f8b589 	.word	0x14f8b589

08006a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a54:	e042      	b.n	8006adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d119      	bne.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0210 	mvn.w	r2, #16
 8006a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e029      	b.n	8006aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a98:	f7fc faec 	bl	8003074 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d302      	bcc.n	8006aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d116      	bne.n	8006adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	f043 0220 	orr.w	r2, r3, #32
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e007      	b.n	8006aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d1b5      	bne.n	8006a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0a:	d11b      	bne.n	8006b44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	f043 0204 	orr.w	r2, r3, #4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b62:	d103      	bne.n	8006b6c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b6a:	e007      	b.n	8006b7c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b74:	d102      	bne.n	8006b7c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2208      	movs	r2, #8
 8006b7a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0cc      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b9c:	4b68      	ldr	r3, [pc, #416]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d90c      	bls.n	8006bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006baa:	4b65      	ldr	r3, [pc, #404]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	4b63      	ldr	r3, [pc, #396]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d001      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0b8      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d020      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bdc:	4b59      	ldr	r3, [pc, #356]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	4a58      	ldr	r2, [pc, #352]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bf4:	4b53      	ldr	r3, [pc, #332]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	4a52      	ldr	r2, [pc, #328]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c00:	4b50      	ldr	r3, [pc, #320]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	494d      	ldr	r1, [pc, #308]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d044      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d107      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c26:	4b47      	ldr	r3, [pc, #284]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d119      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e07f      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d003      	beq.n	8006c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d107      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c46:	4b3f      	ldr	r3, [pc, #252]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e06f      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c56:	4b3b      	ldr	r3, [pc, #236]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e067      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c66:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f023 0203 	bic.w	r2, r3, #3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4934      	ldr	r1, [pc, #208]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c78:	f7fc f9fc 	bl	8003074 <HAL_GetTick>
 8006c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c7e:	e00a      	b.n	8006c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c80:	f7fc f9f8 	bl	8003074 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e04f      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c96:	4b2b      	ldr	r3, [pc, #172]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 020c 	and.w	r2, r3, #12
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d1eb      	bne.n	8006c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca8:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d20c      	bcs.n	8006cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb6:	4b22      	ldr	r3, [pc, #136]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e032      	b.n	8006d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cdc:	4b19      	ldr	r3, [pc, #100]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4916      	ldr	r1, [pc, #88]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cfa:	4b12      	ldr	r3, [pc, #72]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	490e      	ldr	r1, [pc, #56]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d0e:	f000 f855 	bl	8006dbc <HAL_RCC_GetSysClockFreq>
 8006d12:	4602      	mov	r2, r0
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <HAL_RCC_ClockConfig+0x1bc>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	490a      	ldr	r1, [pc, #40]	; (8006d48 <HAL_RCC_ClockConfig+0x1c0>)
 8006d20:	5ccb      	ldrb	r3, [r1, r3]
 8006d22:	fa22 f303 	lsr.w	r3, r2, r3
 8006d26:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <HAL_RCC_ClockConfig+0x1c4>)
 8006d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <HAL_RCC_ClockConfig+0x1c8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fc f95c 	bl	8002fec <HAL_InitTick>

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40023c00 	.word	0x40023c00
 8006d44:	40023800 	.word	0x40023800
 8006d48:	0800d660 	.word	0x0800d660
 8006d4c:	20000000 	.word	0x20000000
 8006d50:	20000004 	.word	0x20000004

08006d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000000 	.word	0x20000000

08006d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d70:	f7ff fff0 	bl	8006d54 <HAL_RCC_GetHCLKFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	0a9b      	lsrs	r3, r3, #10
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	4903      	ldr	r1, [pc, #12]	; (8006d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d82:	5ccb      	ldrb	r3, [r1, r3]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	0800d670 	.word	0x0800d670

08006d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d98:	f7ff ffdc 	bl	8006d54 <HAL_RCC_GetHCLKFreq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	0b5b      	lsrs	r3, r3, #13
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	4903      	ldr	r1, [pc, #12]	; (8006db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006daa:	5ccb      	ldrb	r3, [r1, r3]
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40023800 	.word	0x40023800
 8006db8:	0800d670 	.word	0x0800d670

08006dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc0:	b0ae      	sub	sp, #184	; 0xb8
 8006dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006de2:	4bcb      	ldr	r3, [pc, #812]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
 8006dea:	2b0c      	cmp	r3, #12
 8006dec:	f200 8206 	bhi.w	80071fc <HAL_RCC_GetSysClockFreq+0x440>
 8006df0:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df6:	bf00      	nop
 8006df8:	08006e2d 	.word	0x08006e2d
 8006dfc:	080071fd 	.word	0x080071fd
 8006e00:	080071fd 	.word	0x080071fd
 8006e04:	080071fd 	.word	0x080071fd
 8006e08:	08006e35 	.word	0x08006e35
 8006e0c:	080071fd 	.word	0x080071fd
 8006e10:	080071fd 	.word	0x080071fd
 8006e14:	080071fd 	.word	0x080071fd
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	080071fd 	.word	0x080071fd
 8006e20:	080071fd 	.word	0x080071fd
 8006e24:	080071fd 	.word	0x080071fd
 8006e28:	0800702d 	.word	0x0800702d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e2c:	4bb9      	ldr	r3, [pc, #740]	; (8007114 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006e32:	e1e7      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e34:	4bb8      	ldr	r3, [pc, #736]	; (8007118 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006e3a:	e1e3      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e3c:	4bb4      	ldr	r3, [pc, #720]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e48:	4bb1      	ldr	r3, [pc, #708]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d071      	beq.n	8006f38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e54:	4bae      	ldr	r3, [pc, #696]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	099b      	lsrs	r3, r3, #6
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e60:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e70:	2300      	movs	r3, #0
 8006e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	f04f 0000 	mov.w	r0, #0
 8006e82:	f04f 0100 	mov.w	r1, #0
 8006e86:	0159      	lsls	r1, r3, #5
 8006e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e8c:	0150      	lsls	r0, r2, #5
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4621      	mov	r1, r4
 8006e94:	1a51      	subs	r1, r2, r1
 8006e96:	6439      	str	r1, [r7, #64]	; 0x40
 8006e98:	4629      	mov	r1, r5
 8006e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006eac:	4649      	mov	r1, r9
 8006eae:	018b      	lsls	r3, r1, #6
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	018a      	lsls	r2, r1, #6
 8006eba:	4641      	mov	r1, r8
 8006ebc:	1a51      	subs	r1, r2, r1
 8006ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	00cb      	lsls	r3, r1, #3
 8006ed8:	4641      	mov	r1, r8
 8006eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ede:	4641      	mov	r1, r8
 8006ee0:	00ca      	lsls	r2, r1, #3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4622      	mov	r2, r4
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
 8006eee:	462b      	mov	r3, r5
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	eb42 0303 	adc.w	r3, r2, r3
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f04:	4629      	mov	r1, r5
 8006f06:	024b      	lsls	r3, r1, #9
 8006f08:	4621      	mov	r1, r4
 8006f0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f0e:	4621      	mov	r1, r4
 8006f10:	024a      	lsls	r2, r1, #9
 8006f12:	4610      	mov	r0, r2
 8006f14:	4619      	mov	r1, r3
 8006f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006f28:	f7f9 fede 	bl	8000ce8 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4613      	mov	r3, r2
 8006f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f36:	e067      	b.n	8007008 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f38:	4b75      	ldr	r3, [pc, #468]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f52:	2300      	movs	r3, #0
 8006f54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	f04f 0000 	mov.w	r0, #0
 8006f62:	f04f 0100 	mov.w	r1, #0
 8006f66:	0159      	lsls	r1, r3, #5
 8006f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f6c:	0150      	lsls	r0, r2, #5
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4621      	mov	r1, r4
 8006f74:	1a51      	subs	r1, r2, r1
 8006f76:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f78:	4629      	mov	r1, r5
 8006f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	018b      	lsls	r3, r1, #6
 8006f90:	4641      	mov	r1, r8
 8006f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f96:	4641      	mov	r1, r8
 8006f98:	018a      	lsls	r2, r1, #6
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fba:	4692      	mov	sl, r2
 8006fbc:	469b      	mov	fp, r3
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	eb1a 0303 	adds.w	r3, sl, r3
 8006fc4:	623b      	str	r3, [r7, #32]
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006fda:	4629      	mov	r1, r5
 8006fdc:	028b      	lsls	r3, r1, #10
 8006fde:	4621      	mov	r1, r4
 8006fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	028a      	lsls	r2, r1, #10
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4619      	mov	r1, r3
 8006fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff4:	677a      	str	r2, [r7, #116]	; 0x74
 8006ff6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006ffa:	f7f9 fe75 	bl	8000ce8 <__aeabi_uldivmod>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4613      	mov	r3, r2
 8007004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007008:	4b41      	ldr	r3, [pc, #260]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	3301      	adds	r3, #1
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800701a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800701e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007022:	fbb2 f3f3 	udiv	r3, r2, r3
 8007026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800702a:	e0eb      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800702c:	4b38      	ldr	r3, [pc, #224]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007038:	4b35      	ldr	r3, [pc, #212]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d06b      	beq.n	800711c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007044:	4b32      	ldr	r3, [pc, #200]	; (8007110 <HAL_RCC_GetSysClockFreq+0x354>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	099b      	lsrs	r3, r3, #6
 800704a:	2200      	movs	r2, #0
 800704c:	66bb      	str	r3, [r7, #104]	; 0x68
 800704e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	663b      	str	r3, [r7, #96]	; 0x60
 8007058:	2300      	movs	r3, #0
 800705a:	667b      	str	r3, [r7, #100]	; 0x64
 800705c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007060:	4622      	mov	r2, r4
 8007062:	462b      	mov	r3, r5
 8007064:	f04f 0000 	mov.w	r0, #0
 8007068:	f04f 0100 	mov.w	r1, #0
 800706c:	0159      	lsls	r1, r3, #5
 800706e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007072:	0150      	lsls	r0, r2, #5
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4621      	mov	r1, r4
 800707a:	1a51      	subs	r1, r2, r1
 800707c:	61b9      	str	r1, [r7, #24]
 800707e:	4629      	mov	r1, r5
 8007080:	eb63 0301 	sbc.w	r3, r3, r1
 8007084:	61fb      	str	r3, [r7, #28]
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	f04f 0300 	mov.w	r3, #0
 800708e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007092:	4659      	mov	r1, fp
 8007094:	018b      	lsls	r3, r1, #6
 8007096:	4651      	mov	r1, sl
 8007098:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800709c:	4651      	mov	r1, sl
 800709e:	018a      	lsls	r2, r1, #6
 80070a0:	4651      	mov	r1, sl
 80070a2:	ebb2 0801 	subs.w	r8, r2, r1
 80070a6:	4659      	mov	r1, fp
 80070a8:	eb63 0901 	sbc.w	r9, r3, r1
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070c0:	4690      	mov	r8, r2
 80070c2:	4699      	mov	r9, r3
 80070c4:	4623      	mov	r3, r4
 80070c6:	eb18 0303 	adds.w	r3, r8, r3
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	462b      	mov	r3, r5
 80070ce:	eb49 0303 	adc.w	r3, r9, r3
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80070e0:	4629      	mov	r1, r5
 80070e2:	024b      	lsls	r3, r1, #9
 80070e4:	4621      	mov	r1, r4
 80070e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070ea:	4621      	mov	r1, r4
 80070ec:	024a      	lsls	r2, r1, #9
 80070ee:	4610      	mov	r0, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070f6:	2200      	movs	r2, #0
 80070f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80070fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80070fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007100:	f7f9 fdf2 	bl	8000ce8 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4613      	mov	r3, r2
 800710a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800710e:	e065      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x420>
 8007110:	40023800 	.word	0x40023800
 8007114:	00f42400 	.word	0x00f42400
 8007118:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800711c:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <HAL_RCC_GetSysClockFreq+0x458>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	099b      	lsrs	r3, r3, #6
 8007122:	2200      	movs	r2, #0
 8007124:	4618      	mov	r0, r3
 8007126:	4611      	mov	r1, r2
 8007128:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800712c:	653b      	str	r3, [r7, #80]	; 0x50
 800712e:	2300      	movs	r3, #0
 8007130:	657b      	str	r3, [r7, #84]	; 0x54
 8007132:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007136:	4642      	mov	r2, r8
 8007138:	464b      	mov	r3, r9
 800713a:	f04f 0000 	mov.w	r0, #0
 800713e:	f04f 0100 	mov.w	r1, #0
 8007142:	0159      	lsls	r1, r3, #5
 8007144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007148:	0150      	lsls	r0, r2, #5
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4641      	mov	r1, r8
 8007150:	1a51      	subs	r1, r2, r1
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	4649      	mov	r1, r9
 8007156:	eb63 0301 	sbc.w	r3, r3, r1
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	f04f 0300 	mov.w	r3, #0
 8007164:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007168:	4659      	mov	r1, fp
 800716a:	018b      	lsls	r3, r1, #6
 800716c:	4651      	mov	r1, sl
 800716e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007172:	4651      	mov	r1, sl
 8007174:	018a      	lsls	r2, r1, #6
 8007176:	4651      	mov	r1, sl
 8007178:	1a54      	subs	r4, r2, r1
 800717a:	4659      	mov	r1, fp
 800717c:	eb63 0501 	sbc.w	r5, r3, r1
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	00eb      	lsls	r3, r5, #3
 800718a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800718e:	00e2      	lsls	r2, r4, #3
 8007190:	4614      	mov	r4, r2
 8007192:	461d      	mov	r5, r3
 8007194:	4643      	mov	r3, r8
 8007196:	18e3      	adds	r3, r4, r3
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	464b      	mov	r3, r9
 800719c:	eb45 0303 	adc.w	r3, r5, r3
 80071a0:	607b      	str	r3, [r7, #4]
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071ae:	4629      	mov	r1, r5
 80071b0:	028b      	lsls	r3, r1, #10
 80071b2:	4621      	mov	r1, r4
 80071b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071b8:	4621      	mov	r1, r4
 80071ba:	028a      	lsls	r2, r1, #10
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071c4:	2200      	movs	r2, #0
 80071c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80071ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071ce:	f7f9 fd8b 	bl	8000ce8 <__aeabi_uldivmod>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4613      	mov	r3, r2
 80071d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <HAL_RCC_GetSysClockFreq+0x458>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	0f1b      	lsrs	r3, r3, #28
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80071ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80071fa:	e003      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_RCC_GetSysClockFreq+0x45c>)
 80071fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007208:	4618      	mov	r0, r3
 800720a:	37b8      	adds	r7, #184	; 0xb8
 800720c:	46bd      	mov	sp, r7
 800720e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800
 8007218:	00f42400 	.word	0x00f42400

0800721c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e28d      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 8083 	beq.w	8007342 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800723c:	4b94      	ldr	r3, [pc, #592]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 030c 	and.w	r3, r3, #12
 8007244:	2b04      	cmp	r3, #4
 8007246:	d019      	beq.n	800727c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007248:	4b91      	ldr	r3, [pc, #580]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007250:	2b08      	cmp	r3, #8
 8007252:	d106      	bne.n	8007262 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007254:	4b8e      	ldr	r3, [pc, #568]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800725c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007260:	d00c      	beq.n	800727c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007262:	4b8b      	ldr	r3, [pc, #556]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800726a:	2b0c      	cmp	r3, #12
 800726c:	d112      	bne.n	8007294 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800726e:	4b88      	ldr	r3, [pc, #544]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800727a:	d10b      	bne.n	8007294 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800727c:	4b84      	ldr	r3, [pc, #528]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d05b      	beq.n	8007340 <HAL_RCC_OscConfig+0x124>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d157      	bne.n	8007340 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e25a      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729c:	d106      	bne.n	80072ac <HAL_RCC_OscConfig+0x90>
 800729e:	4b7c      	ldr	r3, [pc, #496]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a7b      	ldr	r2, [pc, #492]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	e01d      	b.n	80072e8 <HAL_RCC_OscConfig+0xcc>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072b4:	d10c      	bne.n	80072d0 <HAL_RCC_OscConfig+0xb4>
 80072b6:	4b76      	ldr	r3, [pc, #472]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a75      	ldr	r2, [pc, #468]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	4b73      	ldr	r3, [pc, #460]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a72      	ldr	r2, [pc, #456]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	e00b      	b.n	80072e8 <HAL_RCC_OscConfig+0xcc>
 80072d0:	4b6f      	ldr	r3, [pc, #444]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a6e      	ldr	r2, [pc, #440]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	4b6c      	ldr	r3, [pc, #432]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a6b      	ldr	r2, [pc, #428]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80072e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d013      	beq.n	8007318 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7fb fec0 	bl	8003074 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072f6:	e008      	b.n	800730a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072f8:	f7fb febc 	bl	8003074 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b64      	cmp	r3, #100	; 0x64
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e21f      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730a:	4b61      	ldr	r3, [pc, #388]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0f0      	beq.n	80072f8 <HAL_RCC_OscConfig+0xdc>
 8007316:	e014      	b.n	8007342 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fb feac 	bl	8003074 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007320:	f7fb fea8 	bl	8003074 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b64      	cmp	r3, #100	; 0x64
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e20b      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007332:	4b57      	ldr	r3, [pc, #348]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f0      	bne.n	8007320 <HAL_RCC_OscConfig+0x104>
 800733e:	e000      	b.n	8007342 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d06f      	beq.n	800742e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800734e:	4b50      	ldr	r3, [pc, #320]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 030c 	and.w	r3, r3, #12
 8007356:	2b00      	cmp	r3, #0
 8007358:	d017      	beq.n	800738a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800735a:	4b4d      	ldr	r3, [pc, #308]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007362:	2b08      	cmp	r3, #8
 8007364:	d105      	bne.n	8007372 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007366:	4b4a      	ldr	r3, [pc, #296]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007372:	4b47      	ldr	r3, [pc, #284]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800737a:	2b0c      	cmp	r3, #12
 800737c:	d11c      	bne.n	80073b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800737e:	4b44      	ldr	r3, [pc, #272]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d116      	bne.n	80073b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800738a:	4b41      	ldr	r3, [pc, #260]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_RCC_OscConfig+0x186>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d001      	beq.n	80073a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e1d3      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a2:	4b3b      	ldr	r3, [pc, #236]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4937      	ldr	r1, [pc, #220]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073b6:	e03a      	b.n	800742e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d020      	beq.n	8007402 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073c0:	4b34      	ldr	r3, [pc, #208]	; (8007494 <HAL_RCC_OscConfig+0x278>)
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c6:	f7fb fe55 	bl	8003074 <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073cc:	e008      	b.n	80073e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073ce:	f7fb fe51 	bl	8003074 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e1b4      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e0:	4b2b      	ldr	r3, [pc, #172]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f0      	beq.n	80073ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ec:	4b28      	ldr	r3, [pc, #160]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	4925      	ldr	r1, [pc, #148]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	600b      	str	r3, [r1, #0]
 8007400:	e015      	b.n	800742e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <HAL_RCC_OscConfig+0x278>)
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007408:	f7fb fe34 	bl	8003074 <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007410:	f7fb fe30 	bl	8003074 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e193      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007422:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1f0      	bne.n	8007410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d036      	beq.n	80074a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d016      	beq.n	8007470 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007444:	2201      	movs	r2, #1
 8007446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007448:	f7fb fe14 	bl	8003074 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007450:	f7fb fe10 	bl	8003074 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e173      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <HAL_RCC_OscConfig+0x274>)
 8007464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f0      	beq.n	8007450 <HAL_RCC_OscConfig+0x234>
 800746e:	e01b      	b.n	80074a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007470:	4b09      	ldr	r3, [pc, #36]	; (8007498 <HAL_RCC_OscConfig+0x27c>)
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007476:	f7fb fdfd 	bl	8003074 <HAL_GetTick>
 800747a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800747c:	e00e      	b.n	800749c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800747e:	f7fb fdf9 	bl	8003074 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d907      	bls.n	800749c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e15c      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
 8007490:	40023800 	.word	0x40023800
 8007494:	42470000 	.word	0x42470000
 8007498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800749c:	4b8a      	ldr	r3, [pc, #552]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 800749e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1ea      	bne.n	800747e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8097 	beq.w	80075e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074ba:	4b83      	ldr	r3, [pc, #524]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10f      	bne.n	80074e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	4b7f      	ldr	r3, [pc, #508]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	4a7e      	ldr	r2, [pc, #504]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80074d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d4:	6413      	str	r3, [r2, #64]	; 0x40
 80074d6:	4b7c      	ldr	r3, [pc, #496]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074de:	60bb      	str	r3, [r7, #8]
 80074e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e6:	4b79      	ldr	r3, [pc, #484]	; (80076cc <HAL_RCC_OscConfig+0x4b0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d118      	bne.n	8007524 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074f2:	4b76      	ldr	r3, [pc, #472]	; (80076cc <HAL_RCC_OscConfig+0x4b0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a75      	ldr	r2, [pc, #468]	; (80076cc <HAL_RCC_OscConfig+0x4b0>)
 80074f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074fe:	f7fb fdb9 	bl	8003074 <HAL_GetTick>
 8007502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007504:	e008      	b.n	8007518 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007506:	f7fb fdb5 	bl	8003074 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e118      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007518:	4b6c      	ldr	r3, [pc, #432]	; (80076cc <HAL_RCC_OscConfig+0x4b0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f0      	beq.n	8007506 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d106      	bne.n	800753a <HAL_RCC_OscConfig+0x31e>
 800752c:	4b66      	ldr	r3, [pc, #408]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 800752e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007530:	4a65      	ldr	r2, [pc, #404]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	6713      	str	r3, [r2, #112]	; 0x70
 8007538:	e01c      	b.n	8007574 <HAL_RCC_OscConfig+0x358>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b05      	cmp	r3, #5
 8007540:	d10c      	bne.n	800755c <HAL_RCC_OscConfig+0x340>
 8007542:	4b61      	ldr	r3, [pc, #388]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007546:	4a60      	ldr	r2, [pc, #384]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007548:	f043 0304 	orr.w	r3, r3, #4
 800754c:	6713      	str	r3, [r2, #112]	; 0x70
 800754e:	4b5e      	ldr	r3, [pc, #376]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007552:	4a5d      	ldr	r2, [pc, #372]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	6713      	str	r3, [r2, #112]	; 0x70
 800755a:	e00b      	b.n	8007574 <HAL_RCC_OscConfig+0x358>
 800755c:	4b5a      	ldr	r3, [pc, #360]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	4a59      	ldr	r2, [pc, #356]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	6713      	str	r3, [r2, #112]	; 0x70
 8007568:	4b57      	ldr	r3, [pc, #348]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 800756a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756c:	4a56      	ldr	r2, [pc, #344]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 800756e:	f023 0304 	bic.w	r3, r3, #4
 8007572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d015      	beq.n	80075a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757c:	f7fb fd7a 	bl	8003074 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007582:	e00a      	b.n	800759a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007584:	f7fb fd76 	bl	8003074 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007592:	4293      	cmp	r3, r2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e0d7      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759a:	4b4b      	ldr	r3, [pc, #300]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0ee      	beq.n	8007584 <HAL_RCC_OscConfig+0x368>
 80075a6:	e014      	b.n	80075d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a8:	f7fb fd64 	bl	8003074 <HAL_GetTick>
 80075ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075ae:	e00a      	b.n	80075c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075b0:	f7fb fd60 	bl	8003074 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e0c1      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075c6:	4b40      	ldr	r3, [pc, #256]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1ee      	bne.n	80075b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d105      	bne.n	80075e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075d8:	4b3b      	ldr	r3, [pc, #236]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	4a3a      	ldr	r2, [pc, #232]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80075de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 80ad 	beq.w	8007748 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075ee:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 030c 	and.w	r3, r3, #12
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d060      	beq.n	80076bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d145      	bne.n	800768e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007602:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <HAL_RCC_OscConfig+0x4b4>)
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fb fd34 	bl	8003074 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007610:	f7fb fd30 	bl	8003074 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e093      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007622:	4b29      	ldr	r3, [pc, #164]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f0      	bne.n	8007610 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69da      	ldr	r2, [r3, #28]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	019b      	lsls	r3, r3, #6
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007644:	085b      	lsrs	r3, r3, #1
 8007646:	3b01      	subs	r3, #1
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	061b      	lsls	r3, r3, #24
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	071b      	lsls	r3, r3, #28
 800765a:	491b      	ldr	r1, [pc, #108]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 800765c:	4313      	orrs	r3, r2
 800765e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <HAL_RCC_OscConfig+0x4b4>)
 8007662:	2201      	movs	r2, #1
 8007664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007666:	f7fb fd05 	bl	8003074 <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766c:	e008      	b.n	8007680 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800766e:	f7fb fd01 	bl	8003074 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e064      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007680:	4b11      	ldr	r3, [pc, #68]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f0      	beq.n	800766e <HAL_RCC_OscConfig+0x452>
 800768c:	e05c      	b.n	8007748 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800768e:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <HAL_RCC_OscConfig+0x4b4>)
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fb fcee 	bl	8003074 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800769c:	f7fb fcea 	bl	8003074 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e04d      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ae:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <HAL_RCC_OscConfig+0x4ac>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x480>
 80076ba:	e045      	b.n	8007748 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d107      	bne.n	80076d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e040      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
 80076c8:	40023800 	.word	0x40023800
 80076cc:	40007000 	.word	0x40007000
 80076d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076d4:	4b1f      	ldr	r3, [pc, #124]	; (8007754 <HAL_RCC_OscConfig+0x538>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d030      	beq.n	8007744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d129      	bne.n	8007744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d122      	bne.n	8007744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007704:	4013      	ands	r3, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800770a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800770c:	4293      	cmp	r3, r2
 800770e:	d119      	bne.n	8007744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	3b01      	subs	r3, #1
 800771e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007720:	429a      	cmp	r2, r3
 8007722:	d10f      	bne.n	8007744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007730:	429a      	cmp	r2, r3
 8007732:	d107      	bne.n	8007744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007740:	429a      	cmp	r2, r3
 8007742:	d001      	beq.n	8007748 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40023800 	.word	0x40023800

08007758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e03f      	b.n	80077ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fb f9be 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2224      	movs	r2, #36	; 0x24
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800779a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fe23 	bl	80083e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b08a      	sub	sp, #40	; 0x28
 80077f6:	af02      	add	r7, sp, #8
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b20      	cmp	r3, #32
 8007810:	d17c      	bne.n	800790c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_UART_Transmit+0x2c>
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e075      	b.n	800790e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_UART_Transmit+0x3e>
 800782c:	2302      	movs	r3, #2
 800782e:	e06e      	b.n	800790e <HAL_UART_Transmit+0x11c>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2221      	movs	r2, #33	; 0x21
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007846:	f7fb fc15 	bl	8003074 <HAL_GetTick>
 800784a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	88fa      	ldrh	r2, [r7, #6]
 8007856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007860:	d108      	bne.n	8007874 <HAL_UART_Transmit+0x82>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	e003      	b.n	800787c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007884:	e02a      	b.n	80078dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	2180      	movs	r1, #128	; 0x80
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fb63 	bl	8007f5c <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e036      	b.n	800790e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	3302      	adds	r3, #2
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e007      	b.n	80078ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	781a      	ldrb	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	3301      	adds	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1cf      	bne.n	8007886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2140      	movs	r1, #64	; 0x40
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fb33 	bl	8007f5c <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e006      	b.n	800790e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	e000      	b.n	800790e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800790c:	2302      	movs	r3, #2
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	3720      	adds	r7, #32
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	4613      	mov	r3, r2
 8007922:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b20      	cmp	r3, #32
 800792e:	d130      	bne.n	8007992 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <HAL_UART_Transmit_IT+0x26>
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e029      	b.n	8007994 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d101      	bne.n	800794e <HAL_UART_Transmit_IT+0x38>
 800794a:	2302      	movs	r3, #2
 800794c:	e022      	b.n	8007994 <HAL_UART_Transmit_IT+0x7e>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	88fa      	ldrh	r2, [r7, #6]
 8007960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	88fa      	ldrh	r2, [r7, #6]
 8007966:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2221      	movs	r2, #33	; 0x21
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800798c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	e000      	b.n	8007994 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007992:	2302      	movs	r3, #2
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d11d      	bne.n	80079f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_UART_Receive_IT+0x26>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e016      	b.n	80079f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_UART_Receive_IT+0x38>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e00f      	b.n	80079f8 <HAL_UART_Receive_IT+0x58>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079e6:	88fb      	ldrh	r3, [r7, #6]
 80079e8:	461a      	mov	r2, r3
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fb23 	bl	8008038 <UART_Start_Receive_IT>
 80079f2:	4603      	mov	r3, r0
 80079f4:	e000      	b.n	80079f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b0ba      	sub	sp, #232	; 0xe8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10f      	bne.n	8007a66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d009      	beq.n	8007a66 <HAL_UART_IRQHandler+0x66>
 8007a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fc07 	bl	8008272 <UART_Receive_IT>
      return;
 8007a64:	e256      	b.n	8007f14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80de 	beq.w	8007c2c <HAL_UART_IRQHandler+0x22c>
 8007a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d106      	bne.n	8007a8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80d1 	beq.w	8007c2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_UART_IRQHandler+0xae>
 8007a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	f043 0201 	orr.w	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xd2>
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	f043 0202 	orr.w	r2, r3, #2
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <HAL_UART_IRQHandler+0xf6>
 8007ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	f043 0204 	orr.w	r2, r3, #4
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d011      	beq.n	8007b26 <HAL_UART_IRQHandler+0x126>
 8007b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d105      	bne.n	8007b1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f043 0208 	orr.w	r2, r3, #8
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 81ed 	beq.w	8007f0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <HAL_UART_IRQHandler+0x14e>
 8007b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fb92 	bl	8008272 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b58:	2b40      	cmp	r3, #64	; 0x40
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2301      	moveq	r3, #1
 8007b5e:	2300      	movne	r3, #0
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <HAL_UART_IRQHandler+0x17a>
 8007b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d04f      	beq.n	8007c1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa9a 	bl	80080b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8a:	2b40      	cmp	r3, #64	; 0x40
 8007b8c:	d141      	bne.n	8007c12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3314      	adds	r3, #20
 8007b94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3314      	adds	r3, #20
 8007bb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1d9      	bne.n	8007b8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d013      	beq.n	8007c0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	4a7d      	ldr	r2, [pc, #500]	; (8007ddc <HAL_UART_IRQHandler+0x3dc>)
 8007be8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fc f939 	bl	8003e66 <HAL_DMA_Abort_IT>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d016      	beq.n	8007c28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e00e      	b.n	8007c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f990 	bl	8007f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e00a      	b.n	8007c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f98c 	bl	8007f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	e006      	b.n	8007c28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f988 	bl	8007f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c26:	e170      	b.n	8007f0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c28:	bf00      	nop
    return;
 8007c2a:	e16e      	b.n	8007f0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	f040 814a 	bne.w	8007eca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3a:	f003 0310 	and.w	r3, r3, #16
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 8143 	beq.w	8007eca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 813c 	beq.w	8007eca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c52:	2300      	movs	r3, #0
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	f040 80b4 	bne.w	8007de0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8140 	beq.w	8007f0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c96:	429a      	cmp	r2, r3
 8007c98:	f080 8139 	bcs.w	8007f0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cae:	f000 8088 	beq.w	8007dc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d9      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3314      	adds	r3, #20
 8007d04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3314      	adds	r3, #20
 8007d1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e1      	bne.n	8007cfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3314      	adds	r3, #20
 8007d40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3314      	adds	r3, #20
 8007d5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e3      	bne.n	8007d3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	330c      	adds	r3, #12
 8007d86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8a:	e853 3f00 	ldrex	r3, [r3]
 8007d8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d92:	f023 0310 	bic.w	r3, r3, #16
 8007d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	330c      	adds	r3, #12
 8007da0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007da4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007da6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007daa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e3      	bne.n	8007d80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fb ffe2 	bl	8003d86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8b6 	bl	8007f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dd8:	e099      	b.n	8007f0e <HAL_UART_IRQHandler+0x50e>
 8007dda:	bf00      	nop
 8007ddc:	0800817b 	.word	0x0800817b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 808b 	beq.w	8007f12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8086 	beq.w	8007f12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	330c      	adds	r3, #12
 8007e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	330c      	adds	r3, #12
 8007e26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e2a:	647a      	str	r2, [r7, #68]	; 0x44
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e3      	bne.n	8007e06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3314      	adds	r3, #20
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	f023 0301 	bic.w	r3, r3, #1
 8007e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3314      	adds	r3, #20
 8007e5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e62:	633a      	str	r2, [r7, #48]	; 0x30
 8007e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e3      	bne.n	8007e3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	330c      	adds	r3, #12
 8007e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0310 	bic.w	r3, r3, #16
 8007e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ea8:	61fa      	str	r2, [r7, #28]
 8007eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e3      	bne.n	8007e84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f83e 	bl	8007f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ec8:	e023      	b.n	8007f12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d009      	beq.n	8007eea <HAL_UART_IRQHandler+0x4ea>
 8007ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f95d 	bl	80081a2 <UART_Transmit_IT>
    return;
 8007ee8:	e014      	b.n	8007f14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00e      	beq.n	8007f14 <HAL_UART_IRQHandler+0x514>
 8007ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f99d 	bl	8008242 <UART_EndTransmit_IT>
    return;
 8007f08:	e004      	b.n	8007f14 <HAL_UART_IRQHandler+0x514>
    return;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <HAL_UART_IRQHandler+0x514>
      return;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <HAL_UART_IRQHandler+0x514>
      return;
 8007f12:	bf00      	nop
  }
}
 8007f14:	37e8      	adds	r7, #232	; 0xe8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop

08007f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b090      	sub	sp, #64	; 0x40
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6c:	e050      	b.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f74:	d04c      	beq.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d007      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f7c:	f7fb f87a 	bl	8003074 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d241      	bcs.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fac:	637a      	str	r2, [r7, #52]	; 0x34
 8007fae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e5      	bne.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fe0:	623a      	str	r2, [r7, #32]
 8007fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	69f9      	ldr	r1, [r7, #28]
 8007fe6:	6a3a      	ldr	r2, [r7, #32]
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e00f      	b.n	8008030 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	4013      	ands	r3, r2
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	429a      	cmp	r2, r3
 800801e:	bf0c      	ite	eq
 8008020:	2301      	moveq	r3, #1
 8008022:	2300      	movne	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	429a      	cmp	r2, r3
 800802c:	d09f      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3740      	adds	r7, #64	; 0x40
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	4613      	mov	r3, r2
 8008044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	88fa      	ldrh	r2, [r7, #6]
 8008056:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2222      	movs	r2, #34	; 0x22
 8008062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008084:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695a      	ldr	r2, [r3, #20]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0220 	orr.w	r2, r2, #32
 80080a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b095      	sub	sp, #84	; 0x54
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	330c      	adds	r3, #12
 80080da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080dc:	643a      	str	r2, [r7, #64]	; 0x40
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e5      	bne.n	80080bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3314      	adds	r3, #20
 80080f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	f023 0301 	bic.w	r3, r3, #1
 8008106:	64bb      	str	r3, [r7, #72]	; 0x48
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3314      	adds	r3, #20
 800810e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	2b01      	cmp	r3, #1
 800812a:	d119      	bne.n	8008160 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	60bb      	str	r3, [r7, #8]
   return(result);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f023 0310 	bic.w	r3, r3, #16
 8008142:	647b      	str	r3, [r7, #68]	; 0x44
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800814c:	61ba      	str	r2, [r7, #24]
 800814e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6979      	ldr	r1, [r7, #20]
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	613b      	str	r3, [r7, #16]
   return(result);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e5      	bne.n	800812c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800816e:	bf00      	nop
 8008170:	3754      	adds	r7, #84	; 0x54
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff fecb 	bl	8007f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b085      	sub	sp, #20
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b21      	cmp	r3, #33	; 0x21
 80081b4:	d13e      	bne.n	8008234 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081be:	d114      	bne.n	80081ea <UART_Transmit_IT+0x48>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d110      	bne.n	80081ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	1c9a      	adds	r2, r3, #2
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	621a      	str	r2, [r3, #32]
 80081e8:	e008      	b.n	80081fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	1c59      	adds	r1, r3, #1
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6211      	str	r1, [r2, #32]
 80081f4:	781a      	ldrb	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008200:	b29b      	uxth	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	b29b      	uxth	r3, r3
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4619      	mov	r1, r3
 800820a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10f      	bne.n	8008230 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800821e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800822e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	e000      	b.n	8008236 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008234:	2302      	movs	r3, #2
  }
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008258:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff fe5a 	bl	8007f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b08c      	sub	sp, #48	; 0x30
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b22      	cmp	r3, #34	; 0x22
 8008284:	f040 80ab 	bne.w	80083de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008290:	d117      	bne.n	80082c2 <UART_Receive_IT+0x50>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d113      	bne.n	80082c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	1c9a      	adds	r2, r3, #2
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	629a      	str	r2, [r3, #40]	; 0x28
 80082c0:	e026      	b.n	8008310 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d4:	d007      	beq.n	80082e6 <UART_Receive_IT+0x74>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10a      	bne.n	80082f4 <UART_Receive_IT+0x82>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	e008      	b.n	8008306 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008300:	b2da      	uxtb	r2, r3
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008314:	b29b      	uxth	r3, r3
 8008316:	3b01      	subs	r3, #1
 8008318:	b29b      	uxth	r3, r3
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	4619      	mov	r1, r3
 800831e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008320:	2b00      	cmp	r3, #0
 8008322:	d15a      	bne.n	80083da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0220 	bic.w	r2, r2, #32
 8008332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695a      	ldr	r2, [r3, #20]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0201 	bic.w	r2, r2, #1
 8008352:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2220      	movs	r2, #32
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008360:	2b01      	cmp	r3, #1
 8008362:	d135      	bne.n	80083d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	330c      	adds	r3, #12
 8008370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	613b      	str	r3, [r7, #16]
   return(result);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f023 0310 	bic.w	r3, r3, #16
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	330c      	adds	r3, #12
 8008388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800838a:	623a      	str	r2, [r7, #32]
 800838c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	69f9      	ldr	r1, [r7, #28]
 8008390:	6a3a      	ldr	r2, [r7, #32]
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	61bb      	str	r3, [r7, #24]
   return(result);
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e5      	bne.n	800836a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0310 	and.w	r3, r3, #16
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d10a      	bne.n	80083c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ac:	2300      	movs	r3, #0
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff fdbb 	bl	8007f44 <HAL_UARTEx_RxEventCallback>
 80083ce:	e002      	b.n	80083d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7f9 f8c3 	bl	800155c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e002      	b.n	80083e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	e000      	b.n	80083e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80083de:	2302      	movs	r3, #2
  }
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3730      	adds	r7, #48	; 0x30
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083ec:	b0c0      	sub	sp, #256	; 0x100
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008404:	68d9      	ldr	r1, [r3, #12]
 8008406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	ea40 0301 	orr.w	r3, r0, r1
 8008410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	431a      	orrs	r2, r3
 8008420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	431a      	orrs	r2, r3
 8008428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008440:	f021 010c 	bic.w	r1, r1, #12
 8008444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800844e:	430b      	orrs	r3, r1
 8008450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800845e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008462:	6999      	ldr	r1, [r3, #24]
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	ea40 0301 	orr.w	r3, r0, r1
 800846e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	4b8f      	ldr	r3, [pc, #572]	; (80086b4 <UART_SetConfig+0x2cc>)
 8008478:	429a      	cmp	r2, r3
 800847a:	d005      	beq.n	8008488 <UART_SetConfig+0xa0>
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b8d      	ldr	r3, [pc, #564]	; (80086b8 <UART_SetConfig+0x2d0>)
 8008484:	429a      	cmp	r2, r3
 8008486:	d104      	bne.n	8008492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008488:	f7fe fc84 	bl	8006d94 <HAL_RCC_GetPCLK2Freq>
 800848c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008490:	e003      	b.n	800849a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008492:	f7fe fc6b 	bl	8006d6c <HAL_RCC_GetPCLK1Freq>
 8008496:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800849a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a4:	f040 810c 	bne.w	80086c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084ba:	4622      	mov	r2, r4
 80084bc:	462b      	mov	r3, r5
 80084be:	1891      	adds	r1, r2, r2
 80084c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80084c2:	415b      	adcs	r3, r3
 80084c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084ca:	4621      	mov	r1, r4
 80084cc:	eb12 0801 	adds.w	r8, r2, r1
 80084d0:	4629      	mov	r1, r5
 80084d2:	eb43 0901 	adc.w	r9, r3, r1
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084ea:	4690      	mov	r8, r2
 80084ec:	4699      	mov	r9, r3
 80084ee:	4623      	mov	r3, r4
 80084f0:	eb18 0303 	adds.w	r3, r8, r3
 80084f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084f8:	462b      	mov	r3, r5
 80084fa:	eb49 0303 	adc.w	r3, r9, r3
 80084fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800850e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008516:	460b      	mov	r3, r1
 8008518:	18db      	adds	r3, r3, r3
 800851a:	653b      	str	r3, [r7, #80]	; 0x50
 800851c:	4613      	mov	r3, r2
 800851e:	eb42 0303 	adc.w	r3, r2, r3
 8008522:	657b      	str	r3, [r7, #84]	; 0x54
 8008524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800852c:	f7f8 fbdc 	bl	8000ce8 <__aeabi_uldivmod>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4b61      	ldr	r3, [pc, #388]	; (80086bc <UART_SetConfig+0x2d4>)
 8008536:	fba3 2302 	umull	r2, r3, r3, r2
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	011c      	lsls	r4, r3, #4
 800853e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008542:	2200      	movs	r2, #0
 8008544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008548:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800854c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008550:	4642      	mov	r2, r8
 8008552:	464b      	mov	r3, r9
 8008554:	1891      	adds	r1, r2, r2
 8008556:	64b9      	str	r1, [r7, #72]	; 0x48
 8008558:	415b      	adcs	r3, r3
 800855a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800855c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008560:	4641      	mov	r1, r8
 8008562:	eb12 0a01 	adds.w	sl, r2, r1
 8008566:	4649      	mov	r1, r9
 8008568:	eb43 0b01 	adc.w	fp, r3, r1
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800857c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008580:	4692      	mov	sl, r2
 8008582:	469b      	mov	fp, r3
 8008584:	4643      	mov	r3, r8
 8008586:	eb1a 0303 	adds.w	r3, sl, r3
 800858a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800858e:	464b      	mov	r3, r9
 8008590:	eb4b 0303 	adc.w	r3, fp, r3
 8008594:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80085a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085ac:	460b      	mov	r3, r1
 80085ae:	18db      	adds	r3, r3, r3
 80085b0:	643b      	str	r3, [r7, #64]	; 0x40
 80085b2:	4613      	mov	r3, r2
 80085b4:	eb42 0303 	adc.w	r3, r2, r3
 80085b8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085c2:	f7f8 fb91 	bl	8000ce8 <__aeabi_uldivmod>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4611      	mov	r1, r2
 80085cc:	4b3b      	ldr	r3, [pc, #236]	; (80086bc <UART_SetConfig+0x2d4>)
 80085ce:	fba3 2301 	umull	r2, r3, r3, r1
 80085d2:	095b      	lsrs	r3, r3, #5
 80085d4:	2264      	movs	r2, #100	; 0x64
 80085d6:	fb02 f303 	mul.w	r3, r2, r3
 80085da:	1acb      	subs	r3, r1, r3
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085e2:	4b36      	ldr	r3, [pc, #216]	; (80086bc <UART_SetConfig+0x2d4>)
 80085e4:	fba3 2302 	umull	r2, r3, r3, r2
 80085e8:	095b      	lsrs	r3, r3, #5
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085f0:	441c      	add	r4, r3
 80085f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	1891      	adds	r1, r2, r2
 800860a:	63b9      	str	r1, [r7, #56]	; 0x38
 800860c:	415b      	adcs	r3, r3
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008614:	4641      	mov	r1, r8
 8008616:	1851      	adds	r1, r2, r1
 8008618:	6339      	str	r1, [r7, #48]	; 0x30
 800861a:	4649      	mov	r1, r9
 800861c:	414b      	adcs	r3, r1
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800862c:	4659      	mov	r1, fp
 800862e:	00cb      	lsls	r3, r1, #3
 8008630:	4651      	mov	r1, sl
 8008632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008636:	4651      	mov	r1, sl
 8008638:	00ca      	lsls	r2, r1, #3
 800863a:	4610      	mov	r0, r2
 800863c:	4619      	mov	r1, r3
 800863e:	4603      	mov	r3, r0
 8008640:	4642      	mov	r2, r8
 8008642:	189b      	adds	r3, r3, r2
 8008644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008648:	464b      	mov	r3, r9
 800864a:	460a      	mov	r2, r1
 800864c:	eb42 0303 	adc.w	r3, r2, r3
 8008650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008660:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008668:	460b      	mov	r3, r1
 800866a:	18db      	adds	r3, r3, r3
 800866c:	62bb      	str	r3, [r7, #40]	; 0x28
 800866e:	4613      	mov	r3, r2
 8008670:	eb42 0303 	adc.w	r3, r2, r3
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800867a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800867e:	f7f8 fb33 	bl	8000ce8 <__aeabi_uldivmod>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <UART_SetConfig+0x2d4>)
 8008688:	fba3 1302 	umull	r1, r3, r3, r2
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	2164      	movs	r1, #100	; 0x64
 8008690:	fb01 f303 	mul.w	r3, r1, r3
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	3332      	adds	r3, #50	; 0x32
 800869a:	4a08      	ldr	r2, [pc, #32]	; (80086bc <UART_SetConfig+0x2d4>)
 800869c:	fba2 2303 	umull	r2, r3, r2, r3
 80086a0:	095b      	lsrs	r3, r3, #5
 80086a2:	f003 0207 	and.w	r2, r3, #7
 80086a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4422      	add	r2, r4
 80086ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086b0:	e105      	b.n	80088be <UART_SetConfig+0x4d6>
 80086b2:	bf00      	nop
 80086b4:	40011000 	.word	0x40011000
 80086b8:	40011400 	.word	0x40011400
 80086bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80086d2:	4642      	mov	r2, r8
 80086d4:	464b      	mov	r3, r9
 80086d6:	1891      	adds	r1, r2, r2
 80086d8:	6239      	str	r1, [r7, #32]
 80086da:	415b      	adcs	r3, r3
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
 80086de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086e2:	4641      	mov	r1, r8
 80086e4:	1854      	adds	r4, r2, r1
 80086e6:	4649      	mov	r1, r9
 80086e8:	eb43 0501 	adc.w	r5, r3, r1
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	00eb      	lsls	r3, r5, #3
 80086f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086fa:	00e2      	lsls	r2, r4, #3
 80086fc:	4614      	mov	r4, r2
 80086fe:	461d      	mov	r5, r3
 8008700:	4643      	mov	r3, r8
 8008702:	18e3      	adds	r3, r4, r3
 8008704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008708:	464b      	mov	r3, r9
 800870a:	eb45 0303 	adc.w	r3, r5, r3
 800870e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800871e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008722:	f04f 0200 	mov.w	r2, #0
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800872e:	4629      	mov	r1, r5
 8008730:	008b      	lsls	r3, r1, #2
 8008732:	4621      	mov	r1, r4
 8008734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008738:	4621      	mov	r1, r4
 800873a:	008a      	lsls	r2, r1, #2
 800873c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008740:	f7f8 fad2 	bl	8000ce8 <__aeabi_uldivmod>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4b60      	ldr	r3, [pc, #384]	; (80088cc <UART_SetConfig+0x4e4>)
 800874a:	fba3 2302 	umull	r2, r3, r3, r2
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	011c      	lsls	r4, r3, #4
 8008752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008756:	2200      	movs	r2, #0
 8008758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800875c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008764:	4642      	mov	r2, r8
 8008766:	464b      	mov	r3, r9
 8008768:	1891      	adds	r1, r2, r2
 800876a:	61b9      	str	r1, [r7, #24]
 800876c:	415b      	adcs	r3, r3
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008774:	4641      	mov	r1, r8
 8008776:	1851      	adds	r1, r2, r1
 8008778:	6139      	str	r1, [r7, #16]
 800877a:	4649      	mov	r1, r9
 800877c:	414b      	adcs	r3, r1
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800878c:	4659      	mov	r1, fp
 800878e:	00cb      	lsls	r3, r1, #3
 8008790:	4651      	mov	r1, sl
 8008792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008796:	4651      	mov	r1, sl
 8008798:	00ca      	lsls	r2, r1, #3
 800879a:	4610      	mov	r0, r2
 800879c:	4619      	mov	r1, r3
 800879e:	4603      	mov	r3, r0
 80087a0:	4642      	mov	r2, r8
 80087a2:	189b      	adds	r3, r3, r2
 80087a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087a8:	464b      	mov	r3, r9
 80087aa:	460a      	mov	r2, r1
 80087ac:	eb42 0303 	adc.w	r3, r2, r3
 80087b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80087be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	f04f 0300 	mov.w	r3, #0
 80087c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087cc:	4649      	mov	r1, r9
 80087ce:	008b      	lsls	r3, r1, #2
 80087d0:	4641      	mov	r1, r8
 80087d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087d6:	4641      	mov	r1, r8
 80087d8:	008a      	lsls	r2, r1, #2
 80087da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80087de:	f7f8 fa83 	bl	8000ce8 <__aeabi_uldivmod>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4b39      	ldr	r3, [pc, #228]	; (80088cc <UART_SetConfig+0x4e4>)
 80087e8:	fba3 1302 	umull	r1, r3, r3, r2
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	2164      	movs	r1, #100	; 0x64
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	3332      	adds	r3, #50	; 0x32
 80087fa:	4a34      	ldr	r2, [pc, #208]	; (80088cc <UART_SetConfig+0x4e4>)
 80087fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008806:	441c      	add	r4, r3
 8008808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880c:	2200      	movs	r2, #0
 800880e:	673b      	str	r3, [r7, #112]	; 0x70
 8008810:	677a      	str	r2, [r7, #116]	; 0x74
 8008812:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008816:	4642      	mov	r2, r8
 8008818:	464b      	mov	r3, r9
 800881a:	1891      	adds	r1, r2, r2
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	415b      	adcs	r3, r3
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008826:	4641      	mov	r1, r8
 8008828:	1851      	adds	r1, r2, r1
 800882a:	6039      	str	r1, [r7, #0]
 800882c:	4649      	mov	r1, r9
 800882e:	414b      	adcs	r3, r1
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	f04f 0200 	mov.w	r2, #0
 8008836:	f04f 0300 	mov.w	r3, #0
 800883a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800883e:	4659      	mov	r1, fp
 8008840:	00cb      	lsls	r3, r1, #3
 8008842:	4651      	mov	r1, sl
 8008844:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008848:	4651      	mov	r1, sl
 800884a:	00ca      	lsls	r2, r1, #3
 800884c:	4610      	mov	r0, r2
 800884e:	4619      	mov	r1, r3
 8008850:	4603      	mov	r3, r0
 8008852:	4642      	mov	r2, r8
 8008854:	189b      	adds	r3, r3, r2
 8008856:	66bb      	str	r3, [r7, #104]	; 0x68
 8008858:	464b      	mov	r3, r9
 800885a:	460a      	mov	r2, r1
 800885c:	eb42 0303 	adc.w	r3, r2, r3
 8008860:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	663b      	str	r3, [r7, #96]	; 0x60
 800886c:	667a      	str	r2, [r7, #100]	; 0x64
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800887a:	4649      	mov	r1, r9
 800887c:	008b      	lsls	r3, r1, #2
 800887e:	4641      	mov	r1, r8
 8008880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008884:	4641      	mov	r1, r8
 8008886:	008a      	lsls	r2, r1, #2
 8008888:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800888c:	f7f8 fa2c 	bl	8000ce8 <__aeabi_uldivmod>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <UART_SetConfig+0x4e4>)
 8008896:	fba3 1302 	umull	r1, r3, r3, r2
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	2164      	movs	r1, #100	; 0x64
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	3332      	adds	r3, #50	; 0x32
 80088a8:	4a08      	ldr	r2, [pc, #32]	; (80088cc <UART_SetConfig+0x4e4>)
 80088aa:	fba2 2303 	umull	r2, r3, r2, r3
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	f003 020f 	and.w	r2, r3, #15
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4422      	add	r2, r4
 80088bc:	609a      	str	r2, [r3, #8]
}
 80088be:	bf00      	nop
 80088c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088c4:	46bd      	mov	sp, r7
 80088c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ca:	bf00      	nop
 80088cc:	51eb851f 	.word	0x51eb851f

080088d0 <atoi>:
 80088d0:	220a      	movs	r2, #10
 80088d2:	2100      	movs	r1, #0
 80088d4:	f001 bf2c 	b.w	800a730 <strtol>

080088d8 <__errno>:
 80088d8:	4b01      	ldr	r3, [pc, #4]	; (80088e0 <__errno+0x8>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	2000000c 	.word	0x2000000c

080088e4 <__libc_init_array>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4d0d      	ldr	r5, [pc, #52]	; (800891c <__libc_init_array+0x38>)
 80088e8:	4c0d      	ldr	r4, [pc, #52]	; (8008920 <__libc_init_array+0x3c>)
 80088ea:	1b64      	subs	r4, r4, r5
 80088ec:	10a4      	asrs	r4, r4, #2
 80088ee:	2600      	movs	r6, #0
 80088f0:	42a6      	cmp	r6, r4
 80088f2:	d109      	bne.n	8008908 <__libc_init_array+0x24>
 80088f4:	4d0b      	ldr	r5, [pc, #44]	; (8008924 <__libc_init_array+0x40>)
 80088f6:	4c0c      	ldr	r4, [pc, #48]	; (8008928 <__libc_init_array+0x44>)
 80088f8:	f004 fd4e 	bl	800d398 <_init>
 80088fc:	1b64      	subs	r4, r4, r5
 80088fe:	10a4      	asrs	r4, r4, #2
 8008900:	2600      	movs	r6, #0
 8008902:	42a6      	cmp	r6, r4
 8008904:	d105      	bne.n	8008912 <__libc_init_array+0x2e>
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	f855 3b04 	ldr.w	r3, [r5], #4
 800890c:	4798      	blx	r3
 800890e:	3601      	adds	r6, #1
 8008910:	e7ee      	b.n	80088f0 <__libc_init_array+0xc>
 8008912:	f855 3b04 	ldr.w	r3, [r5], #4
 8008916:	4798      	blx	r3
 8008918:	3601      	adds	r6, #1
 800891a:	e7f2      	b.n	8008902 <__libc_init_array+0x1e>
 800891c:	0800db88 	.word	0x0800db88
 8008920:	0800db88 	.word	0x0800db88
 8008924:	0800db88 	.word	0x0800db88
 8008928:	0800db8c 	.word	0x0800db8c

0800892c <malloc>:
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <malloc+0xc>)
 800892e:	4601      	mov	r1, r0
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	f000 b87f 	b.w	8008a34 <_malloc_r>
 8008936:	bf00      	nop
 8008938:	2000000c 	.word	0x2000000c

0800893c <free>:
 800893c:	4b02      	ldr	r3, [pc, #8]	; (8008948 <free+0xc>)
 800893e:	4601      	mov	r1, r0
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	f000 b80b 	b.w	800895c <_free_r>
 8008946:	bf00      	nop
 8008948:	2000000c 	.word	0x2000000c

0800894c <memset>:
 800894c:	4402      	add	r2, r0
 800894e:	4603      	mov	r3, r0
 8008950:	4293      	cmp	r3, r2
 8008952:	d100      	bne.n	8008956 <memset+0xa>
 8008954:	4770      	bx	lr
 8008956:	f803 1b01 	strb.w	r1, [r3], #1
 800895a:	e7f9      	b.n	8008950 <memset+0x4>

0800895c <_free_r>:
 800895c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800895e:	2900      	cmp	r1, #0
 8008960:	d044      	beq.n	80089ec <_free_r+0x90>
 8008962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008966:	9001      	str	r0, [sp, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	f1a1 0404 	sub.w	r4, r1, #4
 800896e:	bfb8      	it	lt
 8008970:	18e4      	addlt	r4, r4, r3
 8008972:	f003 f925 	bl	800bbc0 <__malloc_lock>
 8008976:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <_free_r+0x94>)
 8008978:	9801      	ldr	r0, [sp, #4]
 800897a:	6813      	ldr	r3, [r2, #0]
 800897c:	b933      	cbnz	r3, 800898c <_free_r+0x30>
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	6014      	str	r4, [r2, #0]
 8008982:	b003      	add	sp, #12
 8008984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008988:	f003 b920 	b.w	800bbcc <__malloc_unlock>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d908      	bls.n	80089a2 <_free_r+0x46>
 8008990:	6825      	ldr	r5, [r4, #0]
 8008992:	1961      	adds	r1, r4, r5
 8008994:	428b      	cmp	r3, r1
 8008996:	bf01      	itttt	eq
 8008998:	6819      	ldreq	r1, [r3, #0]
 800899a:	685b      	ldreq	r3, [r3, #4]
 800899c:	1949      	addeq	r1, r1, r5
 800899e:	6021      	streq	r1, [r4, #0]
 80089a0:	e7ed      	b.n	800897e <_free_r+0x22>
 80089a2:	461a      	mov	r2, r3
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	b10b      	cbz	r3, 80089ac <_free_r+0x50>
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d9fa      	bls.n	80089a2 <_free_r+0x46>
 80089ac:	6811      	ldr	r1, [r2, #0]
 80089ae:	1855      	adds	r5, r2, r1
 80089b0:	42a5      	cmp	r5, r4
 80089b2:	d10b      	bne.n	80089cc <_free_r+0x70>
 80089b4:	6824      	ldr	r4, [r4, #0]
 80089b6:	4421      	add	r1, r4
 80089b8:	1854      	adds	r4, r2, r1
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	6011      	str	r1, [r2, #0]
 80089be:	d1e0      	bne.n	8008982 <_free_r+0x26>
 80089c0:	681c      	ldr	r4, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	6053      	str	r3, [r2, #4]
 80089c6:	4421      	add	r1, r4
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	e7da      	b.n	8008982 <_free_r+0x26>
 80089cc:	d902      	bls.n	80089d4 <_free_r+0x78>
 80089ce:	230c      	movs	r3, #12
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	e7d6      	b.n	8008982 <_free_r+0x26>
 80089d4:	6825      	ldr	r5, [r4, #0]
 80089d6:	1961      	adds	r1, r4, r5
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf04      	itt	eq
 80089dc:	6819      	ldreq	r1, [r3, #0]
 80089de:	685b      	ldreq	r3, [r3, #4]
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	bf04      	itt	eq
 80089e4:	1949      	addeq	r1, r1, r5
 80089e6:	6021      	streq	r1, [r4, #0]
 80089e8:	6054      	str	r4, [r2, #4]
 80089ea:	e7ca      	b.n	8008982 <_free_r+0x26>
 80089ec:	b003      	add	sp, #12
 80089ee:	bd30      	pop	{r4, r5, pc}
 80089f0:	20000634 	.word	0x20000634

080089f4 <sbrk_aligned>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	4e0e      	ldr	r6, [pc, #56]	; (8008a30 <sbrk_aligned+0x3c>)
 80089f8:	460c      	mov	r4, r1
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	4605      	mov	r5, r0
 80089fe:	b911      	cbnz	r1, 8008a06 <sbrk_aligned+0x12>
 8008a00:	f000 ff06 	bl	8009810 <_sbrk_r>
 8008a04:	6030      	str	r0, [r6, #0]
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 ff01 	bl	8009810 <_sbrk_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d00a      	beq.n	8008a28 <sbrk_aligned+0x34>
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d007      	beq.n	8008a2c <sbrk_aligned+0x38>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 fef6 	bl	8009810 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d101      	bne.n	8008a2c <sbrk_aligned+0x38>
 8008a28:	f04f 34ff 	mov.w	r4, #4294967295
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	20000638 	.word	0x20000638

08008a34 <_malloc_r>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	1ccd      	adds	r5, r1, #3
 8008a3a:	f025 0503 	bic.w	r5, r5, #3
 8008a3e:	3508      	adds	r5, #8
 8008a40:	2d0c      	cmp	r5, #12
 8008a42:	bf38      	it	cc
 8008a44:	250c      	movcc	r5, #12
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	4607      	mov	r7, r0
 8008a4a:	db01      	blt.n	8008a50 <_malloc_r+0x1c>
 8008a4c:	42a9      	cmp	r1, r5
 8008a4e:	d905      	bls.n	8008a5c <_malloc_r+0x28>
 8008a50:	230c      	movs	r3, #12
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	2600      	movs	r6, #0
 8008a56:	4630      	mov	r0, r6
 8008a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a5c:	4e2e      	ldr	r6, [pc, #184]	; (8008b18 <_malloc_r+0xe4>)
 8008a5e:	f003 f8af 	bl	800bbc0 <__malloc_lock>
 8008a62:	6833      	ldr	r3, [r6, #0]
 8008a64:	461c      	mov	r4, r3
 8008a66:	bb34      	cbnz	r4, 8008ab6 <_malloc_r+0x82>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7ff ffc2 	bl	80089f4 <sbrk_aligned>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	4604      	mov	r4, r0
 8008a74:	d14d      	bne.n	8008b12 <_malloc_r+0xde>
 8008a76:	6834      	ldr	r4, [r6, #0]
 8008a78:	4626      	mov	r6, r4
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d140      	bne.n	8008b00 <_malloc_r+0xcc>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	4631      	mov	r1, r6
 8008a82:	4638      	mov	r0, r7
 8008a84:	eb04 0803 	add.w	r8, r4, r3
 8008a88:	f000 fec2 	bl	8009810 <_sbrk_r>
 8008a8c:	4580      	cmp	r8, r0
 8008a8e:	d13a      	bne.n	8008b06 <_malloc_r+0xd2>
 8008a90:	6821      	ldr	r1, [r4, #0]
 8008a92:	3503      	adds	r5, #3
 8008a94:	1a6d      	subs	r5, r5, r1
 8008a96:	f025 0503 	bic.w	r5, r5, #3
 8008a9a:	3508      	adds	r5, #8
 8008a9c:	2d0c      	cmp	r5, #12
 8008a9e:	bf38      	it	cc
 8008aa0:	250c      	movcc	r5, #12
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff ffa5 	bl	80089f4 <sbrk_aligned>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d02b      	beq.n	8008b06 <_malloc_r+0xd2>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	442b      	add	r3, r5
 8008ab2:	6023      	str	r3, [r4, #0]
 8008ab4:	e00e      	b.n	8008ad4 <_malloc_r+0xa0>
 8008ab6:	6822      	ldr	r2, [r4, #0]
 8008ab8:	1b52      	subs	r2, r2, r5
 8008aba:	d41e      	bmi.n	8008afa <_malloc_r+0xc6>
 8008abc:	2a0b      	cmp	r2, #11
 8008abe:	d916      	bls.n	8008aee <_malloc_r+0xba>
 8008ac0:	1961      	adds	r1, r4, r5
 8008ac2:	42a3      	cmp	r3, r4
 8008ac4:	6025      	str	r5, [r4, #0]
 8008ac6:	bf18      	it	ne
 8008ac8:	6059      	strne	r1, [r3, #4]
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	bf08      	it	eq
 8008ace:	6031      	streq	r1, [r6, #0]
 8008ad0:	5162      	str	r2, [r4, r5]
 8008ad2:	604b      	str	r3, [r1, #4]
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f104 060b 	add.w	r6, r4, #11
 8008ada:	f003 f877 	bl	800bbcc <__malloc_unlock>
 8008ade:	f026 0607 	bic.w	r6, r6, #7
 8008ae2:	1d23      	adds	r3, r4, #4
 8008ae4:	1af2      	subs	r2, r6, r3
 8008ae6:	d0b6      	beq.n	8008a56 <_malloc_r+0x22>
 8008ae8:	1b9b      	subs	r3, r3, r6
 8008aea:	50a3      	str	r3, [r4, r2]
 8008aec:	e7b3      	b.n	8008a56 <_malloc_r+0x22>
 8008aee:	6862      	ldr	r2, [r4, #4]
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	bf0c      	ite	eq
 8008af4:	6032      	streq	r2, [r6, #0]
 8008af6:	605a      	strne	r2, [r3, #4]
 8008af8:	e7ec      	b.n	8008ad4 <_malloc_r+0xa0>
 8008afa:	4623      	mov	r3, r4
 8008afc:	6864      	ldr	r4, [r4, #4]
 8008afe:	e7b2      	b.n	8008a66 <_malloc_r+0x32>
 8008b00:	4634      	mov	r4, r6
 8008b02:	6876      	ldr	r6, [r6, #4]
 8008b04:	e7b9      	b.n	8008a7a <_malloc_r+0x46>
 8008b06:	230c      	movs	r3, #12
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	f003 f85e 	bl	800bbcc <__malloc_unlock>
 8008b10:	e7a1      	b.n	8008a56 <_malloc_r+0x22>
 8008b12:	6025      	str	r5, [r4, #0]
 8008b14:	e7de      	b.n	8008ad4 <_malloc_r+0xa0>
 8008b16:	bf00      	nop
 8008b18:	20000634 	.word	0x20000634

08008b1c <__cvt>:
 8008b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	ec55 4b10 	vmov	r4, r5, d0
 8008b24:	2d00      	cmp	r5, #0
 8008b26:	460e      	mov	r6, r1
 8008b28:	4619      	mov	r1, r3
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	bfbb      	ittet	lt
 8008b2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b32:	461d      	movlt	r5, r3
 8008b34:	2300      	movge	r3, #0
 8008b36:	232d      	movlt	r3, #45	; 0x2d
 8008b38:	700b      	strb	r3, [r1, #0]
 8008b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b40:	4691      	mov	r9, r2
 8008b42:	f023 0820 	bic.w	r8, r3, #32
 8008b46:	bfbc      	itt	lt
 8008b48:	4622      	movlt	r2, r4
 8008b4a:	4614      	movlt	r4, r2
 8008b4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b50:	d005      	beq.n	8008b5e <__cvt+0x42>
 8008b52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b56:	d100      	bne.n	8008b5a <__cvt+0x3e>
 8008b58:	3601      	adds	r6, #1
 8008b5a:	2102      	movs	r1, #2
 8008b5c:	e000      	b.n	8008b60 <__cvt+0x44>
 8008b5e:	2103      	movs	r1, #3
 8008b60:	ab03      	add	r3, sp, #12
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	ab02      	add	r3, sp, #8
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	ec45 4b10 	vmov	d0, r4, r5
 8008b6c:	4653      	mov	r3, sl
 8008b6e:	4632      	mov	r2, r6
 8008b70:	f001 fe92 	bl	800a898 <_dtoa_r>
 8008b74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b78:	4607      	mov	r7, r0
 8008b7a:	d102      	bne.n	8008b82 <__cvt+0x66>
 8008b7c:	f019 0f01 	tst.w	r9, #1
 8008b80:	d022      	beq.n	8008bc8 <__cvt+0xac>
 8008b82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b86:	eb07 0906 	add.w	r9, r7, r6
 8008b8a:	d110      	bne.n	8008bae <__cvt+0x92>
 8008b8c:	783b      	ldrb	r3, [r7, #0]
 8008b8e:	2b30      	cmp	r3, #48	; 0x30
 8008b90:	d10a      	bne.n	8008ba8 <__cvt+0x8c>
 8008b92:	2200      	movs	r2, #0
 8008b94:	2300      	movs	r3, #0
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 ffc5 	bl	8000b28 <__aeabi_dcmpeq>
 8008b9e:	b918      	cbnz	r0, 8008ba8 <__cvt+0x8c>
 8008ba0:	f1c6 0601 	rsb	r6, r6, #1
 8008ba4:	f8ca 6000 	str.w	r6, [sl]
 8008ba8:	f8da 3000 	ldr.w	r3, [sl]
 8008bac:	4499      	add	r9, r3
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7f7 ffb7 	bl	8000b28 <__aeabi_dcmpeq>
 8008bba:	b108      	cbz	r0, 8008bc0 <__cvt+0xa4>
 8008bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bc0:	2230      	movs	r2, #48	; 0x30
 8008bc2:	9b03      	ldr	r3, [sp, #12]
 8008bc4:	454b      	cmp	r3, r9
 8008bc6:	d307      	bcc.n	8008bd8 <__cvt+0xbc>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bcc:	1bdb      	subs	r3, r3, r7
 8008bce:	4638      	mov	r0, r7
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	b004      	add	sp, #16
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	1c59      	adds	r1, r3, #1
 8008bda:	9103      	str	r1, [sp, #12]
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e7f0      	b.n	8008bc2 <__cvt+0xa6>

08008be0 <__exponent>:
 8008be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008be2:	4603      	mov	r3, r0
 8008be4:	2900      	cmp	r1, #0
 8008be6:	bfb8      	it	lt
 8008be8:	4249      	neglt	r1, r1
 8008bea:	f803 2b02 	strb.w	r2, [r3], #2
 8008bee:	bfb4      	ite	lt
 8008bf0:	222d      	movlt	r2, #45	; 0x2d
 8008bf2:	222b      	movge	r2, #43	; 0x2b
 8008bf4:	2909      	cmp	r1, #9
 8008bf6:	7042      	strb	r2, [r0, #1]
 8008bf8:	dd2a      	ble.n	8008c50 <__exponent+0x70>
 8008bfa:	f10d 0407 	add.w	r4, sp, #7
 8008bfe:	46a4      	mov	ip, r4
 8008c00:	270a      	movs	r7, #10
 8008c02:	46a6      	mov	lr, r4
 8008c04:	460a      	mov	r2, r1
 8008c06:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c0a:	fb07 1516 	mls	r5, r7, r6, r1
 8008c0e:	3530      	adds	r5, #48	; 0x30
 8008c10:	2a63      	cmp	r2, #99	; 0x63
 8008c12:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	dcf1      	bgt.n	8008c02 <__exponent+0x22>
 8008c1e:	3130      	adds	r1, #48	; 0x30
 8008c20:	f1ae 0502 	sub.w	r5, lr, #2
 8008c24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c28:	1c44      	adds	r4, r0, #1
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	4561      	cmp	r1, ip
 8008c2e:	d30a      	bcc.n	8008c46 <__exponent+0x66>
 8008c30:	f10d 0209 	add.w	r2, sp, #9
 8008c34:	eba2 020e 	sub.w	r2, r2, lr
 8008c38:	4565      	cmp	r5, ip
 8008c3a:	bf88      	it	hi
 8008c3c:	2200      	movhi	r2, #0
 8008c3e:	4413      	add	r3, r2
 8008c40:	1a18      	subs	r0, r3, r0
 8008c42:	b003      	add	sp, #12
 8008c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c4e:	e7ed      	b.n	8008c2c <__exponent+0x4c>
 8008c50:	2330      	movs	r3, #48	; 0x30
 8008c52:	3130      	adds	r1, #48	; 0x30
 8008c54:	7083      	strb	r3, [r0, #2]
 8008c56:	70c1      	strb	r1, [r0, #3]
 8008c58:	1d03      	adds	r3, r0, #4
 8008c5a:	e7f1      	b.n	8008c40 <__exponent+0x60>

08008c5c <_printf_float>:
 8008c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c60:	ed2d 8b02 	vpush	{d8}
 8008c64:	b08d      	sub	sp, #52	; 0x34
 8008c66:	460c      	mov	r4, r1
 8008c68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	461f      	mov	r7, r3
 8008c70:	4605      	mov	r5, r0
 8008c72:	f002 ff81 	bl	800bb78 <_localeconv_r>
 8008c76:	f8d0 a000 	ldr.w	sl, [r0]
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	f7f7 fad2 	bl	8000224 <strlen>
 8008c80:	2300      	movs	r3, #0
 8008c82:	930a      	str	r3, [sp, #40]	; 0x28
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	9305      	str	r3, [sp, #20]
 8008c88:	f8d8 3000 	ldr.w	r3, [r8]
 8008c8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c90:	3307      	adds	r3, #7
 8008c92:	f023 0307 	bic.w	r3, r3, #7
 8008c96:	f103 0208 	add.w	r2, r3, #8
 8008c9a:	f8c8 2000 	str.w	r2, [r8]
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ca6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008caa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cae:	9307      	str	r3, [sp, #28]
 8008cb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cb4:	ee08 0a10 	vmov	s16, r0
 8008cb8:	4b9f      	ldr	r3, [pc, #636]	; (8008f38 <_printf_float+0x2dc>)
 8008cba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc2:	f7f7 ff63 	bl	8000b8c <__aeabi_dcmpun>
 8008cc6:	bb88      	cbnz	r0, 8008d2c <_printf_float+0xd0>
 8008cc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ccc:	4b9a      	ldr	r3, [pc, #616]	; (8008f38 <_printf_float+0x2dc>)
 8008cce:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd2:	f7f7 ff3d 	bl	8000b50 <__aeabi_dcmple>
 8008cd6:	bb48      	cbnz	r0, 8008d2c <_printf_float+0xd0>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4640      	mov	r0, r8
 8008cde:	4649      	mov	r1, r9
 8008ce0:	f7f7 ff2c 	bl	8000b3c <__aeabi_dcmplt>
 8008ce4:	b110      	cbz	r0, 8008cec <_printf_float+0x90>
 8008ce6:	232d      	movs	r3, #45	; 0x2d
 8008ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cec:	4b93      	ldr	r3, [pc, #588]	; (8008f3c <_printf_float+0x2e0>)
 8008cee:	4894      	ldr	r0, [pc, #592]	; (8008f40 <_printf_float+0x2e4>)
 8008cf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008cf4:	bf94      	ite	ls
 8008cf6:	4698      	movls	r8, r3
 8008cf8:	4680      	movhi	r8, r0
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	9b05      	ldr	r3, [sp, #20]
 8008d00:	f023 0204 	bic.w	r2, r3, #4
 8008d04:	6022      	str	r2, [r4, #0]
 8008d06:	f04f 0900 	mov.w	r9, #0
 8008d0a:	9700      	str	r7, [sp, #0]
 8008d0c:	4633      	mov	r3, r6
 8008d0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d10:	4621      	mov	r1, r4
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 f9d8 	bl	80090c8 <_printf_common>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f040 8090 	bne.w	8008e3e <_printf_float+0x1e2>
 8008d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d22:	b00d      	add	sp, #52	; 0x34
 8008d24:	ecbd 8b02 	vpop	{d8}
 8008d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	4642      	mov	r2, r8
 8008d2e:	464b      	mov	r3, r9
 8008d30:	4640      	mov	r0, r8
 8008d32:	4649      	mov	r1, r9
 8008d34:	f7f7 ff2a 	bl	8000b8c <__aeabi_dcmpun>
 8008d38:	b140      	cbz	r0, 8008d4c <_printf_float+0xf0>
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bfbc      	itt	lt
 8008d40:	232d      	movlt	r3, #45	; 0x2d
 8008d42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d46:	487f      	ldr	r0, [pc, #508]	; (8008f44 <_printf_float+0x2e8>)
 8008d48:	4b7f      	ldr	r3, [pc, #508]	; (8008f48 <_printf_float+0x2ec>)
 8008d4a:	e7d1      	b.n	8008cf0 <_printf_float+0x94>
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d52:	9206      	str	r2, [sp, #24]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	d13f      	bne.n	8008dd8 <_printf_float+0x17c>
 8008d58:	2306      	movs	r3, #6
 8008d5a:	6063      	str	r3, [r4, #4]
 8008d5c:	9b05      	ldr	r3, [sp, #20]
 8008d5e:	6861      	ldr	r1, [r4, #4]
 8008d60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d64:	2300      	movs	r3, #0
 8008d66:	9303      	str	r3, [sp, #12]
 8008d68:	ab0a      	add	r3, sp, #40	; 0x28
 8008d6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d6e:	ab09      	add	r3, sp, #36	; 0x24
 8008d70:	ec49 8b10 	vmov	d0, r8, r9
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	6022      	str	r2, [r4, #0]
 8008d78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f7ff fecd 	bl	8008b1c <__cvt>
 8008d82:	9b06      	ldr	r3, [sp, #24]
 8008d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d86:	2b47      	cmp	r3, #71	; 0x47
 8008d88:	4680      	mov	r8, r0
 8008d8a:	d108      	bne.n	8008d9e <_printf_float+0x142>
 8008d8c:	1cc8      	adds	r0, r1, #3
 8008d8e:	db02      	blt.n	8008d96 <_printf_float+0x13a>
 8008d90:	6863      	ldr	r3, [r4, #4]
 8008d92:	4299      	cmp	r1, r3
 8008d94:	dd41      	ble.n	8008e1a <_printf_float+0x1be>
 8008d96:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d9a:	fa5f fb8b 	uxtb.w	fp, fp
 8008d9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008da2:	d820      	bhi.n	8008de6 <_printf_float+0x18a>
 8008da4:	3901      	subs	r1, #1
 8008da6:	465a      	mov	r2, fp
 8008da8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dac:	9109      	str	r1, [sp, #36]	; 0x24
 8008dae:	f7ff ff17 	bl	8008be0 <__exponent>
 8008db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008db4:	1813      	adds	r3, r2, r0
 8008db6:	2a01      	cmp	r2, #1
 8008db8:	4681      	mov	r9, r0
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	dc02      	bgt.n	8008dc4 <_printf_float+0x168>
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	07d2      	lsls	r2, r2, #31
 8008dc2:	d501      	bpl.n	8008dc8 <_printf_float+0x16c>
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d09c      	beq.n	8008d0a <_printf_float+0xae>
 8008dd0:	232d      	movs	r3, #45	; 0x2d
 8008dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd6:	e798      	b.n	8008d0a <_printf_float+0xae>
 8008dd8:	9a06      	ldr	r2, [sp, #24]
 8008dda:	2a47      	cmp	r2, #71	; 0x47
 8008ddc:	d1be      	bne.n	8008d5c <_printf_float+0x100>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1bc      	bne.n	8008d5c <_printf_float+0x100>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e7b9      	b.n	8008d5a <_printf_float+0xfe>
 8008de6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dea:	d118      	bne.n	8008e1e <_printf_float+0x1c2>
 8008dec:	2900      	cmp	r1, #0
 8008dee:	6863      	ldr	r3, [r4, #4]
 8008df0:	dd0b      	ble.n	8008e0a <_printf_float+0x1ae>
 8008df2:	6121      	str	r1, [r4, #16]
 8008df4:	b913      	cbnz	r3, 8008dfc <_printf_float+0x1a0>
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	07d0      	lsls	r0, r2, #31
 8008dfa:	d502      	bpl.n	8008e02 <_printf_float+0x1a6>
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	440b      	add	r3, r1
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e04:	f04f 0900 	mov.w	r9, #0
 8008e08:	e7de      	b.n	8008dc8 <_printf_float+0x16c>
 8008e0a:	b913      	cbnz	r3, 8008e12 <_printf_float+0x1b6>
 8008e0c:	6822      	ldr	r2, [r4, #0]
 8008e0e:	07d2      	lsls	r2, r2, #31
 8008e10:	d501      	bpl.n	8008e16 <_printf_float+0x1ba>
 8008e12:	3302      	adds	r3, #2
 8008e14:	e7f4      	b.n	8008e00 <_printf_float+0x1a4>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e7f2      	b.n	8008e00 <_printf_float+0x1a4>
 8008e1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e20:	4299      	cmp	r1, r3
 8008e22:	db05      	blt.n	8008e30 <_printf_float+0x1d4>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	6121      	str	r1, [r4, #16]
 8008e28:	07d8      	lsls	r0, r3, #31
 8008e2a:	d5ea      	bpl.n	8008e02 <_printf_float+0x1a6>
 8008e2c:	1c4b      	adds	r3, r1, #1
 8008e2e:	e7e7      	b.n	8008e00 <_printf_float+0x1a4>
 8008e30:	2900      	cmp	r1, #0
 8008e32:	bfd4      	ite	le
 8008e34:	f1c1 0202 	rsble	r2, r1, #2
 8008e38:	2201      	movgt	r2, #1
 8008e3a:	4413      	add	r3, r2
 8008e3c:	e7e0      	b.n	8008e00 <_printf_float+0x1a4>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	055a      	lsls	r2, r3, #21
 8008e42:	d407      	bmi.n	8008e54 <_printf_float+0x1f8>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	4642      	mov	r2, r8
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d12c      	bne.n	8008eac <_printf_float+0x250>
 8008e52:	e764      	b.n	8008d1e <_printf_float+0xc2>
 8008e54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e58:	f240 80e0 	bls.w	800901c <_printf_float+0x3c0>
 8008e5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e60:	2200      	movs	r2, #0
 8008e62:	2300      	movs	r3, #0
 8008e64:	f7f7 fe60 	bl	8000b28 <__aeabi_dcmpeq>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d034      	beq.n	8008ed6 <_printf_float+0x27a>
 8008e6c:	4a37      	ldr	r2, [pc, #220]	; (8008f4c <_printf_float+0x2f0>)
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4631      	mov	r1, r6
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b8      	blx	r7
 8008e76:	3001      	adds	r0, #1
 8008e78:	f43f af51 	beq.w	8008d1e <_printf_float+0xc2>
 8008e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e80:	429a      	cmp	r2, r3
 8008e82:	db02      	blt.n	8008e8a <_printf_float+0x22e>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	07d8      	lsls	r0, r3, #31
 8008e88:	d510      	bpl.n	8008eac <_printf_float+0x250>
 8008e8a:	ee18 3a10 	vmov	r3, s16
 8008e8e:	4652      	mov	r2, sl
 8008e90:	4631      	mov	r1, r6
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	f43f af41 	beq.w	8008d1e <_printf_float+0xc2>
 8008e9c:	f04f 0800 	mov.w	r8, #0
 8008ea0:	f104 091a 	add.w	r9, r4, #26
 8008ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	4543      	cmp	r3, r8
 8008eaa:	dc09      	bgt.n	8008ec0 <_printf_float+0x264>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	079b      	lsls	r3, r3, #30
 8008eb0:	f100 8105 	bmi.w	80090be <_printf_float+0x462>
 8008eb4:	68e0      	ldr	r0, [r4, #12]
 8008eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb8:	4298      	cmp	r0, r3
 8008eba:	bfb8      	it	lt
 8008ebc:	4618      	movlt	r0, r3
 8008ebe:	e730      	b.n	8008d22 <_printf_float+0xc6>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	464a      	mov	r2, r9
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f43f af27 	beq.w	8008d1e <_printf_float+0xc2>
 8008ed0:	f108 0801 	add.w	r8, r8, #1
 8008ed4:	e7e6      	b.n	8008ea4 <_printf_float+0x248>
 8008ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dc39      	bgt.n	8008f50 <_printf_float+0x2f4>
 8008edc:	4a1b      	ldr	r2, [pc, #108]	; (8008f4c <_printf_float+0x2f0>)
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f43f af19 	beq.w	8008d1e <_printf_float+0xc2>
 8008eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	d102      	bne.n	8008efa <_printf_float+0x29e>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	07d9      	lsls	r1, r3, #31
 8008ef8:	d5d8      	bpl.n	8008eac <_printf_float+0x250>
 8008efa:	ee18 3a10 	vmov	r3, s16
 8008efe:	4652      	mov	r2, sl
 8008f00:	4631      	mov	r1, r6
 8008f02:	4628      	mov	r0, r5
 8008f04:	47b8      	blx	r7
 8008f06:	3001      	adds	r0, #1
 8008f08:	f43f af09 	beq.w	8008d1e <_printf_float+0xc2>
 8008f0c:	f04f 0900 	mov.w	r9, #0
 8008f10:	f104 0a1a 	add.w	sl, r4, #26
 8008f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f16:	425b      	negs	r3, r3
 8008f18:	454b      	cmp	r3, r9
 8008f1a:	dc01      	bgt.n	8008f20 <_printf_float+0x2c4>
 8008f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1e:	e792      	b.n	8008e46 <_printf_float+0x1ea>
 8008f20:	2301      	movs	r3, #1
 8008f22:	4652      	mov	r2, sl
 8008f24:	4631      	mov	r1, r6
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b8      	blx	r7
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	f43f aef7 	beq.w	8008d1e <_printf_float+0xc2>
 8008f30:	f109 0901 	add.w	r9, r9, #1
 8008f34:	e7ee      	b.n	8008f14 <_printf_float+0x2b8>
 8008f36:	bf00      	nop
 8008f38:	7fefffff 	.word	0x7fefffff
 8008f3c:	0800d780 	.word	0x0800d780
 8008f40:	0800d784 	.word	0x0800d784
 8008f44:	0800d78c 	.word	0x0800d78c
 8008f48:	0800d788 	.word	0x0800d788
 8008f4c:	0800d790 	.word	0x0800d790
 8008f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f54:	429a      	cmp	r2, r3
 8008f56:	bfa8      	it	ge
 8008f58:	461a      	movge	r2, r3
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	4691      	mov	r9, r2
 8008f5e:	dc37      	bgt.n	8008fd0 <_printf_float+0x374>
 8008f60:	f04f 0b00 	mov.w	fp, #0
 8008f64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f68:	f104 021a 	add.w	r2, r4, #26
 8008f6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f6e:	9305      	str	r3, [sp, #20]
 8008f70:	eba3 0309 	sub.w	r3, r3, r9
 8008f74:	455b      	cmp	r3, fp
 8008f76:	dc33      	bgt.n	8008fe0 <_printf_float+0x384>
 8008f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	db3b      	blt.n	8008ff8 <_printf_float+0x39c>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07da      	lsls	r2, r3, #31
 8008f84:	d438      	bmi.n	8008ff8 <_printf_float+0x39c>
 8008f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f88:	9a05      	ldr	r2, [sp, #20]
 8008f8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f8c:	1a9a      	subs	r2, r3, r2
 8008f8e:	eba3 0901 	sub.w	r9, r3, r1
 8008f92:	4591      	cmp	r9, r2
 8008f94:	bfa8      	it	ge
 8008f96:	4691      	movge	r9, r2
 8008f98:	f1b9 0f00 	cmp.w	r9, #0
 8008f9c:	dc35      	bgt.n	800900a <_printf_float+0x3ae>
 8008f9e:	f04f 0800 	mov.w	r8, #0
 8008fa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fa6:	f104 0a1a 	add.w	sl, r4, #26
 8008faa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	eba3 0309 	sub.w	r3, r3, r9
 8008fb4:	4543      	cmp	r3, r8
 8008fb6:	f77f af79 	ble.w	8008eac <_printf_float+0x250>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	47b8      	blx	r7
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f43f aeaa 	beq.w	8008d1e <_printf_float+0xc2>
 8008fca:	f108 0801 	add.w	r8, r8, #1
 8008fce:	e7ec      	b.n	8008faa <_printf_float+0x34e>
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d1c0      	bne.n	8008f60 <_printf_float+0x304>
 8008fde:	e69e      	b.n	8008d1e <_printf_float+0xc2>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	9205      	str	r2, [sp, #20]
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	f43f ae97 	beq.w	8008d1e <_printf_float+0xc2>
 8008ff0:	9a05      	ldr	r2, [sp, #20]
 8008ff2:	f10b 0b01 	add.w	fp, fp, #1
 8008ff6:	e7b9      	b.n	8008f6c <_printf_float+0x310>
 8008ff8:	ee18 3a10 	vmov	r3, s16
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	d1be      	bne.n	8008f86 <_printf_float+0x32a>
 8009008:	e689      	b.n	8008d1e <_printf_float+0xc2>
 800900a:	9a05      	ldr	r2, [sp, #20]
 800900c:	464b      	mov	r3, r9
 800900e:	4442      	add	r2, r8
 8009010:	4631      	mov	r1, r6
 8009012:	4628      	mov	r0, r5
 8009014:	47b8      	blx	r7
 8009016:	3001      	adds	r0, #1
 8009018:	d1c1      	bne.n	8008f9e <_printf_float+0x342>
 800901a:	e680      	b.n	8008d1e <_printf_float+0xc2>
 800901c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800901e:	2a01      	cmp	r2, #1
 8009020:	dc01      	bgt.n	8009026 <_printf_float+0x3ca>
 8009022:	07db      	lsls	r3, r3, #31
 8009024:	d538      	bpl.n	8009098 <_printf_float+0x43c>
 8009026:	2301      	movs	r3, #1
 8009028:	4642      	mov	r2, r8
 800902a:	4631      	mov	r1, r6
 800902c:	4628      	mov	r0, r5
 800902e:	47b8      	blx	r7
 8009030:	3001      	adds	r0, #1
 8009032:	f43f ae74 	beq.w	8008d1e <_printf_float+0xc2>
 8009036:	ee18 3a10 	vmov	r3, s16
 800903a:	4652      	mov	r2, sl
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f ae6b 	beq.w	8008d1e <_printf_float+0xc2>
 8009048:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800904c:	2200      	movs	r2, #0
 800904e:	2300      	movs	r3, #0
 8009050:	f7f7 fd6a 	bl	8000b28 <__aeabi_dcmpeq>
 8009054:	b9d8      	cbnz	r0, 800908e <_printf_float+0x432>
 8009056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009058:	f108 0201 	add.w	r2, r8, #1
 800905c:	3b01      	subs	r3, #1
 800905e:	4631      	mov	r1, r6
 8009060:	4628      	mov	r0, r5
 8009062:	47b8      	blx	r7
 8009064:	3001      	adds	r0, #1
 8009066:	d10e      	bne.n	8009086 <_printf_float+0x42a>
 8009068:	e659      	b.n	8008d1e <_printf_float+0xc2>
 800906a:	2301      	movs	r3, #1
 800906c:	4652      	mov	r2, sl
 800906e:	4631      	mov	r1, r6
 8009070:	4628      	mov	r0, r5
 8009072:	47b8      	blx	r7
 8009074:	3001      	adds	r0, #1
 8009076:	f43f ae52 	beq.w	8008d1e <_printf_float+0xc2>
 800907a:	f108 0801 	add.w	r8, r8, #1
 800907e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009080:	3b01      	subs	r3, #1
 8009082:	4543      	cmp	r3, r8
 8009084:	dcf1      	bgt.n	800906a <_printf_float+0x40e>
 8009086:	464b      	mov	r3, r9
 8009088:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800908c:	e6dc      	b.n	8008e48 <_printf_float+0x1ec>
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	f104 0a1a 	add.w	sl, r4, #26
 8009096:	e7f2      	b.n	800907e <_printf_float+0x422>
 8009098:	2301      	movs	r3, #1
 800909a:	4642      	mov	r2, r8
 800909c:	e7df      	b.n	800905e <_printf_float+0x402>
 800909e:	2301      	movs	r3, #1
 80090a0:	464a      	mov	r2, r9
 80090a2:	4631      	mov	r1, r6
 80090a4:	4628      	mov	r0, r5
 80090a6:	47b8      	blx	r7
 80090a8:	3001      	adds	r0, #1
 80090aa:	f43f ae38 	beq.w	8008d1e <_printf_float+0xc2>
 80090ae:	f108 0801 	add.w	r8, r8, #1
 80090b2:	68e3      	ldr	r3, [r4, #12]
 80090b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090b6:	1a5b      	subs	r3, r3, r1
 80090b8:	4543      	cmp	r3, r8
 80090ba:	dcf0      	bgt.n	800909e <_printf_float+0x442>
 80090bc:	e6fa      	b.n	8008eb4 <_printf_float+0x258>
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	f104 0919 	add.w	r9, r4, #25
 80090c6:	e7f4      	b.n	80090b2 <_printf_float+0x456>

080090c8 <_printf_common>:
 80090c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	4616      	mov	r6, r2
 80090ce:	4699      	mov	r9, r3
 80090d0:	688a      	ldr	r2, [r1, #8]
 80090d2:	690b      	ldr	r3, [r1, #16]
 80090d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090d8:	4293      	cmp	r3, r2
 80090da:	bfb8      	it	lt
 80090dc:	4613      	movlt	r3, r2
 80090de:	6033      	str	r3, [r6, #0]
 80090e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090e4:	4607      	mov	r7, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	b10a      	cbz	r2, 80090ee <_printf_common+0x26>
 80090ea:	3301      	adds	r3, #1
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	0699      	lsls	r1, r3, #26
 80090f2:	bf42      	ittt	mi
 80090f4:	6833      	ldrmi	r3, [r6, #0]
 80090f6:	3302      	addmi	r3, #2
 80090f8:	6033      	strmi	r3, [r6, #0]
 80090fa:	6825      	ldr	r5, [r4, #0]
 80090fc:	f015 0506 	ands.w	r5, r5, #6
 8009100:	d106      	bne.n	8009110 <_printf_common+0x48>
 8009102:	f104 0a19 	add.w	sl, r4, #25
 8009106:	68e3      	ldr	r3, [r4, #12]
 8009108:	6832      	ldr	r2, [r6, #0]
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	42ab      	cmp	r3, r5
 800910e:	dc26      	bgt.n	800915e <_printf_common+0x96>
 8009110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009114:	1e13      	subs	r3, r2, #0
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	bf18      	it	ne
 800911a:	2301      	movne	r3, #1
 800911c:	0692      	lsls	r2, r2, #26
 800911e:	d42b      	bmi.n	8009178 <_printf_common+0xb0>
 8009120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009124:	4649      	mov	r1, r9
 8009126:	4638      	mov	r0, r7
 8009128:	47c0      	blx	r8
 800912a:	3001      	adds	r0, #1
 800912c:	d01e      	beq.n	800916c <_printf_common+0xa4>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	68e5      	ldr	r5, [r4, #12]
 8009132:	6832      	ldr	r2, [r6, #0]
 8009134:	f003 0306 	and.w	r3, r3, #6
 8009138:	2b04      	cmp	r3, #4
 800913a:	bf08      	it	eq
 800913c:	1aad      	subeq	r5, r5, r2
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	6922      	ldr	r2, [r4, #16]
 8009142:	bf0c      	ite	eq
 8009144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009148:	2500      	movne	r5, #0
 800914a:	4293      	cmp	r3, r2
 800914c:	bfc4      	itt	gt
 800914e:	1a9b      	subgt	r3, r3, r2
 8009150:	18ed      	addgt	r5, r5, r3
 8009152:	2600      	movs	r6, #0
 8009154:	341a      	adds	r4, #26
 8009156:	42b5      	cmp	r5, r6
 8009158:	d11a      	bne.n	8009190 <_printf_common+0xc8>
 800915a:	2000      	movs	r0, #0
 800915c:	e008      	b.n	8009170 <_printf_common+0xa8>
 800915e:	2301      	movs	r3, #1
 8009160:	4652      	mov	r2, sl
 8009162:	4649      	mov	r1, r9
 8009164:	4638      	mov	r0, r7
 8009166:	47c0      	blx	r8
 8009168:	3001      	adds	r0, #1
 800916a:	d103      	bne.n	8009174 <_printf_common+0xac>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009174:	3501      	adds	r5, #1
 8009176:	e7c6      	b.n	8009106 <_printf_common+0x3e>
 8009178:	18e1      	adds	r1, r4, r3
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	2030      	movs	r0, #48	; 0x30
 800917e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009182:	4422      	add	r2, r4
 8009184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800918c:	3302      	adds	r3, #2
 800918e:	e7c7      	b.n	8009120 <_printf_common+0x58>
 8009190:	2301      	movs	r3, #1
 8009192:	4622      	mov	r2, r4
 8009194:	4649      	mov	r1, r9
 8009196:	4638      	mov	r0, r7
 8009198:	47c0      	blx	r8
 800919a:	3001      	adds	r0, #1
 800919c:	d0e6      	beq.n	800916c <_printf_common+0xa4>
 800919e:	3601      	adds	r6, #1
 80091a0:	e7d9      	b.n	8009156 <_printf_common+0x8e>
	...

080091a4 <_printf_i>:
 80091a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091a8:	7e0f      	ldrb	r7, [r1, #24]
 80091aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091ac:	2f78      	cmp	r7, #120	; 0x78
 80091ae:	4691      	mov	r9, r2
 80091b0:	4680      	mov	r8, r0
 80091b2:	460c      	mov	r4, r1
 80091b4:	469a      	mov	sl, r3
 80091b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091ba:	d807      	bhi.n	80091cc <_printf_i+0x28>
 80091bc:	2f62      	cmp	r7, #98	; 0x62
 80091be:	d80a      	bhi.n	80091d6 <_printf_i+0x32>
 80091c0:	2f00      	cmp	r7, #0
 80091c2:	f000 80d8 	beq.w	8009376 <_printf_i+0x1d2>
 80091c6:	2f58      	cmp	r7, #88	; 0x58
 80091c8:	f000 80a3 	beq.w	8009312 <_printf_i+0x16e>
 80091cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091d4:	e03a      	b.n	800924c <_printf_i+0xa8>
 80091d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091da:	2b15      	cmp	r3, #21
 80091dc:	d8f6      	bhi.n	80091cc <_printf_i+0x28>
 80091de:	a101      	add	r1, pc, #4	; (adr r1, 80091e4 <_printf_i+0x40>)
 80091e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091e4:	0800923d 	.word	0x0800923d
 80091e8:	08009251 	.word	0x08009251
 80091ec:	080091cd 	.word	0x080091cd
 80091f0:	080091cd 	.word	0x080091cd
 80091f4:	080091cd 	.word	0x080091cd
 80091f8:	080091cd 	.word	0x080091cd
 80091fc:	08009251 	.word	0x08009251
 8009200:	080091cd 	.word	0x080091cd
 8009204:	080091cd 	.word	0x080091cd
 8009208:	080091cd 	.word	0x080091cd
 800920c:	080091cd 	.word	0x080091cd
 8009210:	0800935d 	.word	0x0800935d
 8009214:	08009281 	.word	0x08009281
 8009218:	0800933f 	.word	0x0800933f
 800921c:	080091cd 	.word	0x080091cd
 8009220:	080091cd 	.word	0x080091cd
 8009224:	0800937f 	.word	0x0800937f
 8009228:	080091cd 	.word	0x080091cd
 800922c:	08009281 	.word	0x08009281
 8009230:	080091cd 	.word	0x080091cd
 8009234:	080091cd 	.word	0x080091cd
 8009238:	08009347 	.word	0x08009347
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	1d1a      	adds	r2, r3, #4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	602a      	str	r2, [r5, #0]
 8009244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800924c:	2301      	movs	r3, #1
 800924e:	e0a3      	b.n	8009398 <_printf_i+0x1f4>
 8009250:	6820      	ldr	r0, [r4, #0]
 8009252:	6829      	ldr	r1, [r5, #0]
 8009254:	0606      	lsls	r6, r0, #24
 8009256:	f101 0304 	add.w	r3, r1, #4
 800925a:	d50a      	bpl.n	8009272 <_printf_i+0xce>
 800925c:	680e      	ldr	r6, [r1, #0]
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	2e00      	cmp	r6, #0
 8009262:	da03      	bge.n	800926c <_printf_i+0xc8>
 8009264:	232d      	movs	r3, #45	; 0x2d
 8009266:	4276      	negs	r6, r6
 8009268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800926c:	485e      	ldr	r0, [pc, #376]	; (80093e8 <_printf_i+0x244>)
 800926e:	230a      	movs	r3, #10
 8009270:	e019      	b.n	80092a6 <_printf_i+0x102>
 8009272:	680e      	ldr	r6, [r1, #0]
 8009274:	602b      	str	r3, [r5, #0]
 8009276:	f010 0f40 	tst.w	r0, #64	; 0x40
 800927a:	bf18      	it	ne
 800927c:	b236      	sxthne	r6, r6
 800927e:	e7ef      	b.n	8009260 <_printf_i+0xbc>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	6820      	ldr	r0, [r4, #0]
 8009284:	1d19      	adds	r1, r3, #4
 8009286:	6029      	str	r1, [r5, #0]
 8009288:	0601      	lsls	r1, r0, #24
 800928a:	d501      	bpl.n	8009290 <_printf_i+0xec>
 800928c:	681e      	ldr	r6, [r3, #0]
 800928e:	e002      	b.n	8009296 <_printf_i+0xf2>
 8009290:	0646      	lsls	r6, r0, #25
 8009292:	d5fb      	bpl.n	800928c <_printf_i+0xe8>
 8009294:	881e      	ldrh	r6, [r3, #0]
 8009296:	4854      	ldr	r0, [pc, #336]	; (80093e8 <_printf_i+0x244>)
 8009298:	2f6f      	cmp	r7, #111	; 0x6f
 800929a:	bf0c      	ite	eq
 800929c:	2308      	moveq	r3, #8
 800929e:	230a      	movne	r3, #10
 80092a0:	2100      	movs	r1, #0
 80092a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092a6:	6865      	ldr	r5, [r4, #4]
 80092a8:	60a5      	str	r5, [r4, #8]
 80092aa:	2d00      	cmp	r5, #0
 80092ac:	bfa2      	ittt	ge
 80092ae:	6821      	ldrge	r1, [r4, #0]
 80092b0:	f021 0104 	bicge.w	r1, r1, #4
 80092b4:	6021      	strge	r1, [r4, #0]
 80092b6:	b90e      	cbnz	r6, 80092bc <_printf_i+0x118>
 80092b8:	2d00      	cmp	r5, #0
 80092ba:	d04d      	beq.n	8009358 <_printf_i+0x1b4>
 80092bc:	4615      	mov	r5, r2
 80092be:	fbb6 f1f3 	udiv	r1, r6, r3
 80092c2:	fb03 6711 	mls	r7, r3, r1, r6
 80092c6:	5dc7      	ldrb	r7, [r0, r7]
 80092c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092cc:	4637      	mov	r7, r6
 80092ce:	42bb      	cmp	r3, r7
 80092d0:	460e      	mov	r6, r1
 80092d2:	d9f4      	bls.n	80092be <_printf_i+0x11a>
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d10b      	bne.n	80092f0 <_printf_i+0x14c>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	07de      	lsls	r6, r3, #31
 80092dc:	d508      	bpl.n	80092f0 <_printf_i+0x14c>
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	6861      	ldr	r1, [r4, #4]
 80092e2:	4299      	cmp	r1, r3
 80092e4:	bfde      	ittt	le
 80092e6:	2330      	movle	r3, #48	; 0x30
 80092e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092f0:	1b52      	subs	r2, r2, r5
 80092f2:	6122      	str	r2, [r4, #16]
 80092f4:	f8cd a000 	str.w	sl, [sp]
 80092f8:	464b      	mov	r3, r9
 80092fa:	aa03      	add	r2, sp, #12
 80092fc:	4621      	mov	r1, r4
 80092fe:	4640      	mov	r0, r8
 8009300:	f7ff fee2 	bl	80090c8 <_printf_common>
 8009304:	3001      	adds	r0, #1
 8009306:	d14c      	bne.n	80093a2 <_printf_i+0x1fe>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	b004      	add	sp, #16
 800930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009312:	4835      	ldr	r0, [pc, #212]	; (80093e8 <_printf_i+0x244>)
 8009314:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009318:	6829      	ldr	r1, [r5, #0]
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009320:	6029      	str	r1, [r5, #0]
 8009322:	061d      	lsls	r5, r3, #24
 8009324:	d514      	bpl.n	8009350 <_printf_i+0x1ac>
 8009326:	07df      	lsls	r7, r3, #31
 8009328:	bf44      	itt	mi
 800932a:	f043 0320 	orrmi.w	r3, r3, #32
 800932e:	6023      	strmi	r3, [r4, #0]
 8009330:	b91e      	cbnz	r6, 800933a <_printf_i+0x196>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	f023 0320 	bic.w	r3, r3, #32
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	2310      	movs	r3, #16
 800933c:	e7b0      	b.n	80092a0 <_printf_i+0xfc>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	f043 0320 	orr.w	r3, r3, #32
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	2378      	movs	r3, #120	; 0x78
 8009348:	4828      	ldr	r0, [pc, #160]	; (80093ec <_printf_i+0x248>)
 800934a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800934e:	e7e3      	b.n	8009318 <_printf_i+0x174>
 8009350:	0659      	lsls	r1, r3, #25
 8009352:	bf48      	it	mi
 8009354:	b2b6      	uxthmi	r6, r6
 8009356:	e7e6      	b.n	8009326 <_printf_i+0x182>
 8009358:	4615      	mov	r5, r2
 800935a:	e7bb      	b.n	80092d4 <_printf_i+0x130>
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	6826      	ldr	r6, [r4, #0]
 8009360:	6961      	ldr	r1, [r4, #20]
 8009362:	1d18      	adds	r0, r3, #4
 8009364:	6028      	str	r0, [r5, #0]
 8009366:	0635      	lsls	r5, r6, #24
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	d501      	bpl.n	8009370 <_printf_i+0x1cc>
 800936c:	6019      	str	r1, [r3, #0]
 800936e:	e002      	b.n	8009376 <_printf_i+0x1d2>
 8009370:	0670      	lsls	r0, r6, #25
 8009372:	d5fb      	bpl.n	800936c <_printf_i+0x1c8>
 8009374:	8019      	strh	r1, [r3, #0]
 8009376:	2300      	movs	r3, #0
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	4615      	mov	r5, r2
 800937c:	e7ba      	b.n	80092f4 <_printf_i+0x150>
 800937e:	682b      	ldr	r3, [r5, #0]
 8009380:	1d1a      	adds	r2, r3, #4
 8009382:	602a      	str	r2, [r5, #0]
 8009384:	681d      	ldr	r5, [r3, #0]
 8009386:	6862      	ldr	r2, [r4, #4]
 8009388:	2100      	movs	r1, #0
 800938a:	4628      	mov	r0, r5
 800938c:	f7f6 ff58 	bl	8000240 <memchr>
 8009390:	b108      	cbz	r0, 8009396 <_printf_i+0x1f2>
 8009392:	1b40      	subs	r0, r0, r5
 8009394:	6060      	str	r0, [r4, #4]
 8009396:	6863      	ldr	r3, [r4, #4]
 8009398:	6123      	str	r3, [r4, #16]
 800939a:	2300      	movs	r3, #0
 800939c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a0:	e7a8      	b.n	80092f4 <_printf_i+0x150>
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	462a      	mov	r2, r5
 80093a6:	4649      	mov	r1, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	47d0      	blx	sl
 80093ac:	3001      	adds	r0, #1
 80093ae:	d0ab      	beq.n	8009308 <_printf_i+0x164>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	079b      	lsls	r3, r3, #30
 80093b4:	d413      	bmi.n	80093de <_printf_i+0x23a>
 80093b6:	68e0      	ldr	r0, [r4, #12]
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	4298      	cmp	r0, r3
 80093bc:	bfb8      	it	lt
 80093be:	4618      	movlt	r0, r3
 80093c0:	e7a4      	b.n	800930c <_printf_i+0x168>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4632      	mov	r2, r6
 80093c6:	4649      	mov	r1, r9
 80093c8:	4640      	mov	r0, r8
 80093ca:	47d0      	blx	sl
 80093cc:	3001      	adds	r0, #1
 80093ce:	d09b      	beq.n	8009308 <_printf_i+0x164>
 80093d0:	3501      	adds	r5, #1
 80093d2:	68e3      	ldr	r3, [r4, #12]
 80093d4:	9903      	ldr	r1, [sp, #12]
 80093d6:	1a5b      	subs	r3, r3, r1
 80093d8:	42ab      	cmp	r3, r5
 80093da:	dcf2      	bgt.n	80093c2 <_printf_i+0x21e>
 80093dc:	e7eb      	b.n	80093b6 <_printf_i+0x212>
 80093de:	2500      	movs	r5, #0
 80093e0:	f104 0619 	add.w	r6, r4, #25
 80093e4:	e7f5      	b.n	80093d2 <_printf_i+0x22e>
 80093e6:	bf00      	nop
 80093e8:	0800d792 	.word	0x0800d792
 80093ec:	0800d7a3 	.word	0x0800d7a3

080093f0 <_scanf_float>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	b087      	sub	sp, #28
 80093f6:	4617      	mov	r7, r2
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	688b      	ldr	r3, [r1, #8]
 80093fc:	1e5a      	subs	r2, r3, #1
 80093fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009402:	bf83      	ittte	hi
 8009404:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009408:	195b      	addhi	r3, r3, r5
 800940a:	9302      	strhi	r3, [sp, #8]
 800940c:	2300      	movls	r3, #0
 800940e:	bf86      	itte	hi
 8009410:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009414:	608b      	strhi	r3, [r1, #8]
 8009416:	9302      	strls	r3, [sp, #8]
 8009418:	680b      	ldr	r3, [r1, #0]
 800941a:	468b      	mov	fp, r1
 800941c:	2500      	movs	r5, #0
 800941e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009422:	f84b 3b1c 	str.w	r3, [fp], #28
 8009426:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800942a:	4680      	mov	r8, r0
 800942c:	460c      	mov	r4, r1
 800942e:	465e      	mov	r6, fp
 8009430:	46aa      	mov	sl, r5
 8009432:	46a9      	mov	r9, r5
 8009434:	9501      	str	r5, [sp, #4]
 8009436:	68a2      	ldr	r2, [r4, #8]
 8009438:	b152      	cbz	r2, 8009450 <_scanf_float+0x60>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b4e      	cmp	r3, #78	; 0x4e
 8009440:	d864      	bhi.n	800950c <_scanf_float+0x11c>
 8009442:	2b40      	cmp	r3, #64	; 0x40
 8009444:	d83c      	bhi.n	80094c0 <_scanf_float+0xd0>
 8009446:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800944a:	b2c8      	uxtb	r0, r1
 800944c:	280e      	cmp	r0, #14
 800944e:	d93a      	bls.n	80094c6 <_scanf_float+0xd6>
 8009450:	f1b9 0f00 	cmp.w	r9, #0
 8009454:	d003      	beq.n	800945e <_scanf_float+0x6e>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009462:	f1ba 0f01 	cmp.w	sl, #1
 8009466:	f200 8113 	bhi.w	8009690 <_scanf_float+0x2a0>
 800946a:	455e      	cmp	r6, fp
 800946c:	f200 8105 	bhi.w	800967a <_scanf_float+0x28a>
 8009470:	2501      	movs	r5, #1
 8009472:	4628      	mov	r0, r5
 8009474:	b007      	add	sp, #28
 8009476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800947e:	2a0d      	cmp	r2, #13
 8009480:	d8e6      	bhi.n	8009450 <_scanf_float+0x60>
 8009482:	a101      	add	r1, pc, #4	; (adr r1, 8009488 <_scanf_float+0x98>)
 8009484:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009488:	080095c7 	.word	0x080095c7
 800948c:	08009451 	.word	0x08009451
 8009490:	08009451 	.word	0x08009451
 8009494:	08009451 	.word	0x08009451
 8009498:	08009627 	.word	0x08009627
 800949c:	080095ff 	.word	0x080095ff
 80094a0:	08009451 	.word	0x08009451
 80094a4:	08009451 	.word	0x08009451
 80094a8:	080095d5 	.word	0x080095d5
 80094ac:	08009451 	.word	0x08009451
 80094b0:	08009451 	.word	0x08009451
 80094b4:	08009451 	.word	0x08009451
 80094b8:	08009451 	.word	0x08009451
 80094bc:	0800958d 	.word	0x0800958d
 80094c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80094c4:	e7db      	b.n	800947e <_scanf_float+0x8e>
 80094c6:	290e      	cmp	r1, #14
 80094c8:	d8c2      	bhi.n	8009450 <_scanf_float+0x60>
 80094ca:	a001      	add	r0, pc, #4	; (adr r0, 80094d0 <_scanf_float+0xe0>)
 80094cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80094d0:	0800957f 	.word	0x0800957f
 80094d4:	08009451 	.word	0x08009451
 80094d8:	0800957f 	.word	0x0800957f
 80094dc:	08009613 	.word	0x08009613
 80094e0:	08009451 	.word	0x08009451
 80094e4:	0800952d 	.word	0x0800952d
 80094e8:	08009569 	.word	0x08009569
 80094ec:	08009569 	.word	0x08009569
 80094f0:	08009569 	.word	0x08009569
 80094f4:	08009569 	.word	0x08009569
 80094f8:	08009569 	.word	0x08009569
 80094fc:	08009569 	.word	0x08009569
 8009500:	08009569 	.word	0x08009569
 8009504:	08009569 	.word	0x08009569
 8009508:	08009569 	.word	0x08009569
 800950c:	2b6e      	cmp	r3, #110	; 0x6e
 800950e:	d809      	bhi.n	8009524 <_scanf_float+0x134>
 8009510:	2b60      	cmp	r3, #96	; 0x60
 8009512:	d8b2      	bhi.n	800947a <_scanf_float+0x8a>
 8009514:	2b54      	cmp	r3, #84	; 0x54
 8009516:	d077      	beq.n	8009608 <_scanf_float+0x218>
 8009518:	2b59      	cmp	r3, #89	; 0x59
 800951a:	d199      	bne.n	8009450 <_scanf_float+0x60>
 800951c:	2d07      	cmp	r5, #7
 800951e:	d197      	bne.n	8009450 <_scanf_float+0x60>
 8009520:	2508      	movs	r5, #8
 8009522:	e029      	b.n	8009578 <_scanf_float+0x188>
 8009524:	2b74      	cmp	r3, #116	; 0x74
 8009526:	d06f      	beq.n	8009608 <_scanf_float+0x218>
 8009528:	2b79      	cmp	r3, #121	; 0x79
 800952a:	e7f6      	b.n	800951a <_scanf_float+0x12a>
 800952c:	6821      	ldr	r1, [r4, #0]
 800952e:	05c8      	lsls	r0, r1, #23
 8009530:	d51a      	bpl.n	8009568 <_scanf_float+0x178>
 8009532:	9b02      	ldr	r3, [sp, #8]
 8009534:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009538:	6021      	str	r1, [r4, #0]
 800953a:	f109 0901 	add.w	r9, r9, #1
 800953e:	b11b      	cbz	r3, 8009548 <_scanf_float+0x158>
 8009540:	3b01      	subs	r3, #1
 8009542:	3201      	adds	r2, #1
 8009544:	9302      	str	r3, [sp, #8]
 8009546:	60a2      	str	r2, [r4, #8]
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	3b01      	subs	r3, #1
 800954c:	60a3      	str	r3, [r4, #8]
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3b01      	subs	r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	607b      	str	r3, [r7, #4]
 800955c:	f340 8084 	ble.w	8009668 <_scanf_float+0x278>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	603b      	str	r3, [r7, #0]
 8009566:	e766      	b.n	8009436 <_scanf_float+0x46>
 8009568:	eb1a 0f05 	cmn.w	sl, r5
 800956c:	f47f af70 	bne.w	8009450 <_scanf_float+0x60>
 8009570:	6822      	ldr	r2, [r4, #0]
 8009572:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009576:	6022      	str	r2, [r4, #0]
 8009578:	f806 3b01 	strb.w	r3, [r6], #1
 800957c:	e7e4      	b.n	8009548 <_scanf_float+0x158>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	0610      	lsls	r0, r2, #24
 8009582:	f57f af65 	bpl.w	8009450 <_scanf_float+0x60>
 8009586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800958a:	e7f4      	b.n	8009576 <_scanf_float+0x186>
 800958c:	f1ba 0f00 	cmp.w	sl, #0
 8009590:	d10e      	bne.n	80095b0 <_scanf_float+0x1c0>
 8009592:	f1b9 0f00 	cmp.w	r9, #0
 8009596:	d10e      	bne.n	80095b6 <_scanf_float+0x1c6>
 8009598:	6822      	ldr	r2, [r4, #0]
 800959a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800959e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095a2:	d108      	bne.n	80095b6 <_scanf_float+0x1c6>
 80095a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095a8:	6022      	str	r2, [r4, #0]
 80095aa:	f04f 0a01 	mov.w	sl, #1
 80095ae:	e7e3      	b.n	8009578 <_scanf_float+0x188>
 80095b0:	f1ba 0f02 	cmp.w	sl, #2
 80095b4:	d055      	beq.n	8009662 <_scanf_float+0x272>
 80095b6:	2d01      	cmp	r5, #1
 80095b8:	d002      	beq.n	80095c0 <_scanf_float+0x1d0>
 80095ba:	2d04      	cmp	r5, #4
 80095bc:	f47f af48 	bne.w	8009450 <_scanf_float+0x60>
 80095c0:	3501      	adds	r5, #1
 80095c2:	b2ed      	uxtb	r5, r5
 80095c4:	e7d8      	b.n	8009578 <_scanf_float+0x188>
 80095c6:	f1ba 0f01 	cmp.w	sl, #1
 80095ca:	f47f af41 	bne.w	8009450 <_scanf_float+0x60>
 80095ce:	f04f 0a02 	mov.w	sl, #2
 80095d2:	e7d1      	b.n	8009578 <_scanf_float+0x188>
 80095d4:	b97d      	cbnz	r5, 80095f6 <_scanf_float+0x206>
 80095d6:	f1b9 0f00 	cmp.w	r9, #0
 80095da:	f47f af3c 	bne.w	8009456 <_scanf_float+0x66>
 80095de:	6822      	ldr	r2, [r4, #0]
 80095e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095e8:	f47f af39 	bne.w	800945e <_scanf_float+0x6e>
 80095ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095f0:	6022      	str	r2, [r4, #0]
 80095f2:	2501      	movs	r5, #1
 80095f4:	e7c0      	b.n	8009578 <_scanf_float+0x188>
 80095f6:	2d03      	cmp	r5, #3
 80095f8:	d0e2      	beq.n	80095c0 <_scanf_float+0x1d0>
 80095fa:	2d05      	cmp	r5, #5
 80095fc:	e7de      	b.n	80095bc <_scanf_float+0x1cc>
 80095fe:	2d02      	cmp	r5, #2
 8009600:	f47f af26 	bne.w	8009450 <_scanf_float+0x60>
 8009604:	2503      	movs	r5, #3
 8009606:	e7b7      	b.n	8009578 <_scanf_float+0x188>
 8009608:	2d06      	cmp	r5, #6
 800960a:	f47f af21 	bne.w	8009450 <_scanf_float+0x60>
 800960e:	2507      	movs	r5, #7
 8009610:	e7b2      	b.n	8009578 <_scanf_float+0x188>
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	0591      	lsls	r1, r2, #22
 8009616:	f57f af1b 	bpl.w	8009450 <_scanf_float+0x60>
 800961a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800961e:	6022      	str	r2, [r4, #0]
 8009620:	f8cd 9004 	str.w	r9, [sp, #4]
 8009624:	e7a8      	b.n	8009578 <_scanf_float+0x188>
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800962c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009630:	d006      	beq.n	8009640 <_scanf_float+0x250>
 8009632:	0550      	lsls	r0, r2, #21
 8009634:	f57f af0c 	bpl.w	8009450 <_scanf_float+0x60>
 8009638:	f1b9 0f00 	cmp.w	r9, #0
 800963c:	f43f af0f 	beq.w	800945e <_scanf_float+0x6e>
 8009640:	0591      	lsls	r1, r2, #22
 8009642:	bf58      	it	pl
 8009644:	9901      	ldrpl	r1, [sp, #4]
 8009646:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800964a:	bf58      	it	pl
 800964c:	eba9 0101 	subpl.w	r1, r9, r1
 8009650:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009654:	bf58      	it	pl
 8009656:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800965a:	6022      	str	r2, [r4, #0]
 800965c:	f04f 0900 	mov.w	r9, #0
 8009660:	e78a      	b.n	8009578 <_scanf_float+0x188>
 8009662:	f04f 0a03 	mov.w	sl, #3
 8009666:	e787      	b.n	8009578 <_scanf_float+0x188>
 8009668:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800966c:	4639      	mov	r1, r7
 800966e:	4640      	mov	r0, r8
 8009670:	4798      	blx	r3
 8009672:	2800      	cmp	r0, #0
 8009674:	f43f aedf 	beq.w	8009436 <_scanf_float+0x46>
 8009678:	e6ea      	b.n	8009450 <_scanf_float+0x60>
 800967a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800967e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009682:	463a      	mov	r2, r7
 8009684:	4640      	mov	r0, r8
 8009686:	4798      	blx	r3
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	3b01      	subs	r3, #1
 800968c:	6123      	str	r3, [r4, #16]
 800968e:	e6ec      	b.n	800946a <_scanf_float+0x7a>
 8009690:	1e6b      	subs	r3, r5, #1
 8009692:	2b06      	cmp	r3, #6
 8009694:	d825      	bhi.n	80096e2 <_scanf_float+0x2f2>
 8009696:	2d02      	cmp	r5, #2
 8009698:	d836      	bhi.n	8009708 <_scanf_float+0x318>
 800969a:	455e      	cmp	r6, fp
 800969c:	f67f aee8 	bls.w	8009470 <_scanf_float+0x80>
 80096a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096a8:	463a      	mov	r2, r7
 80096aa:	4640      	mov	r0, r8
 80096ac:	4798      	blx	r3
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	6123      	str	r3, [r4, #16]
 80096b4:	e7f1      	b.n	800969a <_scanf_float+0x2aa>
 80096b6:	9802      	ldr	r0, [sp, #8]
 80096b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80096c0:	9002      	str	r0, [sp, #8]
 80096c2:	463a      	mov	r2, r7
 80096c4:	4640      	mov	r0, r8
 80096c6:	4798      	blx	r3
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	6123      	str	r3, [r4, #16]
 80096ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096d2:	fa5f fa8a 	uxtb.w	sl, sl
 80096d6:	f1ba 0f02 	cmp.w	sl, #2
 80096da:	d1ec      	bne.n	80096b6 <_scanf_float+0x2c6>
 80096dc:	3d03      	subs	r5, #3
 80096de:	b2ed      	uxtb	r5, r5
 80096e0:	1b76      	subs	r6, r6, r5
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	05da      	lsls	r2, r3, #23
 80096e6:	d52f      	bpl.n	8009748 <_scanf_float+0x358>
 80096e8:	055b      	lsls	r3, r3, #21
 80096ea:	d510      	bpl.n	800970e <_scanf_float+0x31e>
 80096ec:	455e      	cmp	r6, fp
 80096ee:	f67f aebf 	bls.w	8009470 <_scanf_float+0x80>
 80096f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096fa:	463a      	mov	r2, r7
 80096fc:	4640      	mov	r0, r8
 80096fe:	4798      	blx	r3
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	3b01      	subs	r3, #1
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	e7f1      	b.n	80096ec <_scanf_float+0x2fc>
 8009708:	46aa      	mov	sl, r5
 800970a:	9602      	str	r6, [sp, #8]
 800970c:	e7df      	b.n	80096ce <_scanf_float+0x2de>
 800970e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	2965      	cmp	r1, #101	; 0x65
 8009716:	f103 33ff 	add.w	r3, r3, #4294967295
 800971a:	f106 35ff 	add.w	r5, r6, #4294967295
 800971e:	6123      	str	r3, [r4, #16]
 8009720:	d00c      	beq.n	800973c <_scanf_float+0x34c>
 8009722:	2945      	cmp	r1, #69	; 0x45
 8009724:	d00a      	beq.n	800973c <_scanf_float+0x34c>
 8009726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800972a:	463a      	mov	r2, r7
 800972c:	4640      	mov	r0, r8
 800972e:	4798      	blx	r3
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009736:	3b01      	subs	r3, #1
 8009738:	1eb5      	subs	r5, r6, #2
 800973a:	6123      	str	r3, [r4, #16]
 800973c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009740:	463a      	mov	r2, r7
 8009742:	4640      	mov	r0, r8
 8009744:	4798      	blx	r3
 8009746:	462e      	mov	r6, r5
 8009748:	6825      	ldr	r5, [r4, #0]
 800974a:	f015 0510 	ands.w	r5, r5, #16
 800974e:	d159      	bne.n	8009804 <_scanf_float+0x414>
 8009750:	7035      	strb	r5, [r6, #0]
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800975c:	d11b      	bne.n	8009796 <_scanf_float+0x3a6>
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	454b      	cmp	r3, r9
 8009762:	eba3 0209 	sub.w	r2, r3, r9
 8009766:	d123      	bne.n	80097b0 <_scanf_float+0x3c0>
 8009768:	2200      	movs	r2, #0
 800976a:	4659      	mov	r1, fp
 800976c:	4640      	mov	r0, r8
 800976e:	f000 fef9 	bl	800a564 <_strtod_r>
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	f012 0f02 	tst.w	r2, #2
 800977a:	ec57 6b10 	vmov	r6, r7, d0
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	d021      	beq.n	80097c6 <_scanf_float+0x3d6>
 8009782:	9903      	ldr	r1, [sp, #12]
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	600a      	str	r2, [r1, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	e9c3 6700 	strd	r6, r7, [r3]
 800978e:	68e3      	ldr	r3, [r4, #12]
 8009790:	3301      	adds	r3, #1
 8009792:	60e3      	str	r3, [r4, #12]
 8009794:	e66d      	b.n	8009472 <_scanf_float+0x82>
 8009796:	9b04      	ldr	r3, [sp, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0e5      	beq.n	8009768 <_scanf_float+0x378>
 800979c:	9905      	ldr	r1, [sp, #20]
 800979e:	230a      	movs	r3, #10
 80097a0:	462a      	mov	r2, r5
 80097a2:	3101      	adds	r1, #1
 80097a4:	4640      	mov	r0, r8
 80097a6:	f000 ffc1 	bl	800a72c <_strtol_r>
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	9e05      	ldr	r6, [sp, #20]
 80097ae:	1ac2      	subs	r2, r0, r3
 80097b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80097b4:	429e      	cmp	r6, r3
 80097b6:	bf28      	it	cs
 80097b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80097bc:	4912      	ldr	r1, [pc, #72]	; (8009808 <_scanf_float+0x418>)
 80097be:	4630      	mov	r0, r6
 80097c0:	f000 f870 	bl	80098a4 <siprintf>
 80097c4:	e7d0      	b.n	8009768 <_scanf_float+0x378>
 80097c6:	9903      	ldr	r1, [sp, #12]
 80097c8:	f012 0f04 	tst.w	r2, #4
 80097cc:	f103 0204 	add.w	r2, r3, #4
 80097d0:	600a      	str	r2, [r1, #0]
 80097d2:	d1d9      	bne.n	8009788 <_scanf_float+0x398>
 80097d4:	f8d3 8000 	ldr.w	r8, [r3]
 80097d8:	ee10 2a10 	vmov	r2, s0
 80097dc:	ee10 0a10 	vmov	r0, s0
 80097e0:	463b      	mov	r3, r7
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f7 f9d2 	bl	8000b8c <__aeabi_dcmpun>
 80097e8:	b128      	cbz	r0, 80097f6 <_scanf_float+0x406>
 80097ea:	4808      	ldr	r0, [pc, #32]	; (800980c <_scanf_float+0x41c>)
 80097ec:	f000 f820 	bl	8009830 <nanf>
 80097f0:	ed88 0a00 	vstr	s0, [r8]
 80097f4:	e7cb      	b.n	800978e <_scanf_float+0x39e>
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f7 fa25 	bl	8000c48 <__aeabi_d2f>
 80097fe:	f8c8 0000 	str.w	r0, [r8]
 8009802:	e7c4      	b.n	800978e <_scanf_float+0x39e>
 8009804:	2500      	movs	r5, #0
 8009806:	e634      	b.n	8009472 <_scanf_float+0x82>
 8009808:	0800d7b4 	.word	0x0800d7b4
 800980c:	0800d8bf 	.word	0x0800d8bf

08009810 <_sbrk_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d06      	ldr	r5, [pc, #24]	; (800982c <_sbrk_r+0x1c>)
 8009814:	2300      	movs	r3, #0
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7f9 fb52 	bl	8002ec4 <_sbrk>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_sbrk_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_sbrk_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	2000063c 	.word	0x2000063c

08009830 <nanf>:
 8009830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009838 <nanf+0x8>
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	7fc00000 	.word	0x7fc00000

0800983c <sniprintf>:
 800983c:	b40c      	push	{r2, r3}
 800983e:	b530      	push	{r4, r5, lr}
 8009840:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <sniprintf+0x64>)
 8009842:	1e0c      	subs	r4, r1, #0
 8009844:	681d      	ldr	r5, [r3, #0]
 8009846:	b09d      	sub	sp, #116	; 0x74
 8009848:	da08      	bge.n	800985c <sniprintf+0x20>
 800984a:	238b      	movs	r3, #139	; 0x8b
 800984c:	602b      	str	r3, [r5, #0]
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	b01d      	add	sp, #116	; 0x74
 8009854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009858:	b002      	add	sp, #8
 800985a:	4770      	bx	lr
 800985c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009860:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009864:	bf14      	ite	ne
 8009866:	f104 33ff 	addne.w	r3, r4, #4294967295
 800986a:	4623      	moveq	r3, r4
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	9307      	str	r3, [sp, #28]
 8009870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009874:	9002      	str	r0, [sp, #8]
 8009876:	9006      	str	r0, [sp, #24]
 8009878:	f8ad 3016 	strh.w	r3, [sp, #22]
 800987c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800987e:	ab21      	add	r3, sp, #132	; 0x84
 8009880:	a902      	add	r1, sp, #8
 8009882:	4628      	mov	r0, r5
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	f002 fed9 	bl	800c63c <_svfiprintf_r>
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	bfbc      	itt	lt
 800988e:	238b      	movlt	r3, #139	; 0x8b
 8009890:	602b      	strlt	r3, [r5, #0]
 8009892:	2c00      	cmp	r4, #0
 8009894:	d0dd      	beq.n	8009852 <sniprintf+0x16>
 8009896:	9b02      	ldr	r3, [sp, #8]
 8009898:	2200      	movs	r2, #0
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e7d9      	b.n	8009852 <sniprintf+0x16>
 800989e:	bf00      	nop
 80098a0:	2000000c 	.word	0x2000000c

080098a4 <siprintf>:
 80098a4:	b40e      	push	{r1, r2, r3}
 80098a6:	b500      	push	{lr}
 80098a8:	b09c      	sub	sp, #112	; 0x70
 80098aa:	ab1d      	add	r3, sp, #116	; 0x74
 80098ac:	9002      	str	r0, [sp, #8]
 80098ae:	9006      	str	r0, [sp, #24]
 80098b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098b4:	4809      	ldr	r0, [pc, #36]	; (80098dc <siprintf+0x38>)
 80098b6:	9107      	str	r1, [sp, #28]
 80098b8:	9104      	str	r1, [sp, #16]
 80098ba:	4909      	ldr	r1, [pc, #36]	; (80098e0 <siprintf+0x3c>)
 80098bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c0:	9105      	str	r1, [sp, #20]
 80098c2:	6800      	ldr	r0, [r0, #0]
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	a902      	add	r1, sp, #8
 80098c8:	f002 feb8 	bl	800c63c <_svfiprintf_r>
 80098cc:	9b02      	ldr	r3, [sp, #8]
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	b01c      	add	sp, #112	; 0x70
 80098d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098d8:	b003      	add	sp, #12
 80098da:	4770      	bx	lr
 80098dc:	2000000c 	.word	0x2000000c
 80098e0:	ffff0208 	.word	0xffff0208

080098e4 <strcpy>:
 80098e4:	4603      	mov	r3, r0
 80098e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ea:	f803 2b01 	strb.w	r2, [r3], #1
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	d1f9      	bne.n	80098e6 <strcpy+0x2>
 80098f2:	4770      	bx	lr

080098f4 <strncpy>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	3901      	subs	r1, #1
 80098f8:	4603      	mov	r3, r0
 80098fa:	b132      	cbz	r2, 800990a <strncpy+0x16>
 80098fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009900:	f803 4b01 	strb.w	r4, [r3], #1
 8009904:	3a01      	subs	r2, #1
 8009906:	2c00      	cmp	r4, #0
 8009908:	d1f7      	bne.n	80098fa <strncpy+0x6>
 800990a:	441a      	add	r2, r3
 800990c:	2100      	movs	r1, #0
 800990e:	4293      	cmp	r3, r2
 8009910:	d100      	bne.n	8009914 <strncpy+0x20>
 8009912:	bd10      	pop	{r4, pc}
 8009914:	f803 1b01 	strb.w	r1, [r3], #1
 8009918:	e7f9      	b.n	800990e <strncpy+0x1a>

0800991a <sulp>:
 800991a:	b570      	push	{r4, r5, r6, lr}
 800991c:	4604      	mov	r4, r0
 800991e:	460d      	mov	r5, r1
 8009920:	ec45 4b10 	vmov	d0, r4, r5
 8009924:	4616      	mov	r6, r2
 8009926:	f002 fcc9 	bl	800c2bc <__ulp>
 800992a:	ec51 0b10 	vmov	r0, r1, d0
 800992e:	b17e      	cbz	r6, 8009950 <sulp+0x36>
 8009930:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009934:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009938:	2b00      	cmp	r3, #0
 800993a:	dd09      	ble.n	8009950 <sulp+0x36>
 800993c:	051b      	lsls	r3, r3, #20
 800993e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009942:	2400      	movs	r4, #0
 8009944:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009948:	4622      	mov	r2, r4
 800994a:	462b      	mov	r3, r5
 800994c:	f7f6 fe84 	bl	8000658 <__aeabi_dmul>
 8009950:	bd70      	pop	{r4, r5, r6, pc}
 8009952:	0000      	movs	r0, r0
 8009954:	0000      	movs	r0, r0
	...

08009958 <_strtod_l>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	ed2d 8b02 	vpush	{d8}
 8009960:	b09d      	sub	sp, #116	; 0x74
 8009962:	461f      	mov	r7, r3
 8009964:	2300      	movs	r3, #0
 8009966:	9318      	str	r3, [sp, #96]	; 0x60
 8009968:	4ba2      	ldr	r3, [pc, #648]	; (8009bf4 <_strtod_l+0x29c>)
 800996a:	9213      	str	r2, [sp, #76]	; 0x4c
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	9305      	str	r3, [sp, #20]
 8009970:	4604      	mov	r4, r0
 8009972:	4618      	mov	r0, r3
 8009974:	4688      	mov	r8, r1
 8009976:	f7f6 fc55 	bl	8000224 <strlen>
 800997a:	f04f 0a00 	mov.w	sl, #0
 800997e:	4605      	mov	r5, r0
 8009980:	f04f 0b00 	mov.w	fp, #0
 8009984:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800998a:	781a      	ldrb	r2, [r3, #0]
 800998c:	2a2b      	cmp	r2, #43	; 0x2b
 800998e:	d04e      	beq.n	8009a2e <_strtod_l+0xd6>
 8009990:	d83b      	bhi.n	8009a0a <_strtod_l+0xb2>
 8009992:	2a0d      	cmp	r2, #13
 8009994:	d834      	bhi.n	8009a00 <_strtod_l+0xa8>
 8009996:	2a08      	cmp	r2, #8
 8009998:	d834      	bhi.n	8009a04 <_strtod_l+0xac>
 800999a:	2a00      	cmp	r2, #0
 800999c:	d03e      	beq.n	8009a1c <_strtod_l+0xc4>
 800999e:	2300      	movs	r3, #0
 80099a0:	930a      	str	r3, [sp, #40]	; 0x28
 80099a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80099a4:	7833      	ldrb	r3, [r6, #0]
 80099a6:	2b30      	cmp	r3, #48	; 0x30
 80099a8:	f040 80b0 	bne.w	8009b0c <_strtod_l+0x1b4>
 80099ac:	7873      	ldrb	r3, [r6, #1]
 80099ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099b2:	2b58      	cmp	r3, #88	; 0x58
 80099b4:	d168      	bne.n	8009a88 <_strtod_l+0x130>
 80099b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	ab18      	add	r3, sp, #96	; 0x60
 80099bc:	9702      	str	r7, [sp, #8]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4a8d      	ldr	r2, [pc, #564]	; (8009bf8 <_strtod_l+0x2a0>)
 80099c2:	ab19      	add	r3, sp, #100	; 0x64
 80099c4:	a917      	add	r1, sp, #92	; 0x5c
 80099c6:	4620      	mov	r0, r4
 80099c8:	f001 fdce 	bl	800b568 <__gethex>
 80099cc:	f010 0707 	ands.w	r7, r0, #7
 80099d0:	4605      	mov	r5, r0
 80099d2:	d005      	beq.n	80099e0 <_strtod_l+0x88>
 80099d4:	2f06      	cmp	r7, #6
 80099d6:	d12c      	bne.n	8009a32 <_strtod_l+0xda>
 80099d8:	3601      	adds	r6, #1
 80099da:	2300      	movs	r3, #0
 80099dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80099de:	930a      	str	r3, [sp, #40]	; 0x28
 80099e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f040 8590 	bne.w	800a508 <_strtod_l+0xbb0>
 80099e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ea:	b1eb      	cbz	r3, 8009a28 <_strtod_l+0xd0>
 80099ec:	4652      	mov	r2, sl
 80099ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099f2:	ec43 2b10 	vmov	d0, r2, r3
 80099f6:	b01d      	add	sp, #116	; 0x74
 80099f8:	ecbd 8b02 	vpop	{d8}
 80099fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	2a20      	cmp	r2, #32
 8009a02:	d1cc      	bne.n	800999e <_strtod_l+0x46>
 8009a04:	3301      	adds	r3, #1
 8009a06:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a08:	e7be      	b.n	8009988 <_strtod_l+0x30>
 8009a0a:	2a2d      	cmp	r2, #45	; 0x2d
 8009a0c:	d1c7      	bne.n	800999e <_strtod_l+0x46>
 8009a0e:	2201      	movs	r2, #1
 8009a10:	920a      	str	r2, [sp, #40]	; 0x28
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a16:	785b      	ldrb	r3, [r3, #1]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1c2      	bne.n	80099a2 <_strtod_l+0x4a>
 8009a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f040 856e 	bne.w	800a504 <_strtod_l+0xbac>
 8009a28:	4652      	mov	r2, sl
 8009a2a:	465b      	mov	r3, fp
 8009a2c:	e7e1      	b.n	80099f2 <_strtod_l+0x9a>
 8009a2e:	2200      	movs	r2, #0
 8009a30:	e7ee      	b.n	8009a10 <_strtod_l+0xb8>
 8009a32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a34:	b13a      	cbz	r2, 8009a46 <_strtod_l+0xee>
 8009a36:	2135      	movs	r1, #53	; 0x35
 8009a38:	a81a      	add	r0, sp, #104	; 0x68
 8009a3a:	f002 fd4a 	bl	800c4d2 <__copybits>
 8009a3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a40:	4620      	mov	r0, r4
 8009a42:	f002 f909 	bl	800bc58 <_Bfree>
 8009a46:	3f01      	subs	r7, #1
 8009a48:	2f04      	cmp	r7, #4
 8009a4a:	d806      	bhi.n	8009a5a <_strtod_l+0x102>
 8009a4c:	e8df f007 	tbb	[pc, r7]
 8009a50:	1714030a 	.word	0x1714030a
 8009a54:	0a          	.byte	0x0a
 8009a55:	00          	.byte	0x00
 8009a56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009a5a:	0728      	lsls	r0, r5, #28
 8009a5c:	d5c0      	bpl.n	80099e0 <_strtod_l+0x88>
 8009a5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009a62:	e7bd      	b.n	80099e0 <_strtod_l+0x88>
 8009a64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a76:	e7f0      	b.n	8009a5a <_strtod_l+0x102>
 8009a78:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009bfc <_strtod_l+0x2a4>
 8009a7c:	e7ed      	b.n	8009a5a <_strtod_l+0x102>
 8009a7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009a82:	f04f 3aff 	mov.w	sl, #4294967295
 8009a86:	e7e8      	b.n	8009a5a <_strtod_l+0x102>
 8009a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a8e:	785b      	ldrb	r3, [r3, #1]
 8009a90:	2b30      	cmp	r3, #48	; 0x30
 8009a92:	d0f9      	beq.n	8009a88 <_strtod_l+0x130>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0a3      	beq.n	80099e0 <_strtod_l+0x88>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f04f 0900 	mov.w	r9, #0
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aa2:	9308      	str	r3, [sp, #32]
 8009aa4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009aa8:	464f      	mov	r7, r9
 8009aaa:	220a      	movs	r2, #10
 8009aac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009aae:	7806      	ldrb	r6, [r0, #0]
 8009ab0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009ab4:	b2d9      	uxtb	r1, r3
 8009ab6:	2909      	cmp	r1, #9
 8009ab8:	d92a      	bls.n	8009b10 <_strtod_l+0x1b8>
 8009aba:	9905      	ldr	r1, [sp, #20]
 8009abc:	462a      	mov	r2, r5
 8009abe:	f003 f81f 	bl	800cb00 <strncmp>
 8009ac2:	b398      	cbz	r0, 8009b2c <_strtod_l+0x1d4>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	463d      	mov	r5, r7
 8009aca:	9005      	str	r0, [sp, #20]
 8009acc:	4603      	mov	r3, r0
 8009ace:	2a65      	cmp	r2, #101	; 0x65
 8009ad0:	d001      	beq.n	8009ad6 <_strtod_l+0x17e>
 8009ad2:	2a45      	cmp	r2, #69	; 0x45
 8009ad4:	d118      	bne.n	8009b08 <_strtod_l+0x1b0>
 8009ad6:	b91d      	cbnz	r5, 8009ae0 <_strtod_l+0x188>
 8009ad8:	9a04      	ldr	r2, [sp, #16]
 8009ada:	4302      	orrs	r2, r0
 8009adc:	d09e      	beq.n	8009a1c <_strtod_l+0xc4>
 8009ade:	2500      	movs	r5, #0
 8009ae0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009ae4:	f108 0201 	add.w	r2, r8, #1
 8009ae8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009aea:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009aee:	2a2b      	cmp	r2, #43	; 0x2b
 8009af0:	d075      	beq.n	8009bde <_strtod_l+0x286>
 8009af2:	2a2d      	cmp	r2, #45	; 0x2d
 8009af4:	d07b      	beq.n	8009bee <_strtod_l+0x296>
 8009af6:	f04f 0c00 	mov.w	ip, #0
 8009afa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009afe:	2909      	cmp	r1, #9
 8009b00:	f240 8082 	bls.w	8009c08 <_strtod_l+0x2b0>
 8009b04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b08:	2600      	movs	r6, #0
 8009b0a:	e09d      	b.n	8009c48 <_strtod_l+0x2f0>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e7c4      	b.n	8009a9a <_strtod_l+0x142>
 8009b10:	2f08      	cmp	r7, #8
 8009b12:	bfd8      	it	le
 8009b14:	9907      	ldrle	r1, [sp, #28]
 8009b16:	f100 0001 	add.w	r0, r0, #1
 8009b1a:	bfda      	itte	le
 8009b1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b20:	9307      	strle	r3, [sp, #28]
 8009b22:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009b26:	3701      	adds	r7, #1
 8009b28:	9017      	str	r0, [sp, #92]	; 0x5c
 8009b2a:	e7bf      	b.n	8009aac <_strtod_l+0x154>
 8009b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b2e:	195a      	adds	r2, r3, r5
 8009b30:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b32:	5d5a      	ldrb	r2, [r3, r5]
 8009b34:	2f00      	cmp	r7, #0
 8009b36:	d037      	beq.n	8009ba8 <_strtod_l+0x250>
 8009b38:	9005      	str	r0, [sp, #20]
 8009b3a:	463d      	mov	r5, r7
 8009b3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009b40:	2b09      	cmp	r3, #9
 8009b42:	d912      	bls.n	8009b6a <_strtod_l+0x212>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e7c2      	b.n	8009ace <_strtod_l+0x176>
 8009b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b4e:	785a      	ldrb	r2, [r3, #1]
 8009b50:	3001      	adds	r0, #1
 8009b52:	2a30      	cmp	r2, #48	; 0x30
 8009b54:	d0f8      	beq.n	8009b48 <_strtod_l+0x1f0>
 8009b56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009b5a:	2b08      	cmp	r3, #8
 8009b5c:	f200 84d9 	bhi.w	800a512 <_strtod_l+0xbba>
 8009b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b62:	9005      	str	r0, [sp, #20]
 8009b64:	2000      	movs	r0, #0
 8009b66:	9308      	str	r3, [sp, #32]
 8009b68:	4605      	mov	r5, r0
 8009b6a:	3a30      	subs	r2, #48	; 0x30
 8009b6c:	f100 0301 	add.w	r3, r0, #1
 8009b70:	d014      	beq.n	8009b9c <_strtod_l+0x244>
 8009b72:	9905      	ldr	r1, [sp, #20]
 8009b74:	4419      	add	r1, r3
 8009b76:	9105      	str	r1, [sp, #20]
 8009b78:	462b      	mov	r3, r5
 8009b7a:	eb00 0e05 	add.w	lr, r0, r5
 8009b7e:	210a      	movs	r1, #10
 8009b80:	4573      	cmp	r3, lr
 8009b82:	d113      	bne.n	8009bac <_strtod_l+0x254>
 8009b84:	182b      	adds	r3, r5, r0
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	f105 0501 	add.w	r5, r5, #1
 8009b8c:	4405      	add	r5, r0
 8009b8e:	dc1c      	bgt.n	8009bca <_strtod_l+0x272>
 8009b90:	9907      	ldr	r1, [sp, #28]
 8009b92:	230a      	movs	r3, #10
 8009b94:	fb03 2301 	mla	r3, r3, r1, r2
 8009b98:	9307      	str	r3, [sp, #28]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b9e:	1c51      	adds	r1, r2, #1
 8009ba0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009ba2:	7852      	ldrb	r2, [r2, #1]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	e7c9      	b.n	8009b3c <_strtod_l+0x1e4>
 8009ba8:	4638      	mov	r0, r7
 8009baa:	e7d2      	b.n	8009b52 <_strtod_l+0x1fa>
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	dc04      	bgt.n	8009bba <_strtod_l+0x262>
 8009bb0:	9e07      	ldr	r6, [sp, #28]
 8009bb2:	434e      	muls	r6, r1
 8009bb4:	9607      	str	r6, [sp, #28]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	e7e2      	b.n	8009b80 <_strtod_l+0x228>
 8009bba:	f103 0c01 	add.w	ip, r3, #1
 8009bbe:	f1bc 0f10 	cmp.w	ip, #16
 8009bc2:	bfd8      	it	le
 8009bc4:	fb01 f909 	mulle.w	r9, r1, r9
 8009bc8:	e7f5      	b.n	8009bb6 <_strtod_l+0x25e>
 8009bca:	2d10      	cmp	r5, #16
 8009bcc:	bfdc      	itt	le
 8009bce:	230a      	movle	r3, #10
 8009bd0:	fb03 2909 	mlale	r9, r3, r9, r2
 8009bd4:	e7e1      	b.n	8009b9a <_strtod_l+0x242>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9305      	str	r3, [sp, #20]
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e77c      	b.n	8009ad8 <_strtod_l+0x180>
 8009bde:	f04f 0c00 	mov.w	ip, #0
 8009be2:	f108 0202 	add.w	r2, r8, #2
 8009be6:	9217      	str	r2, [sp, #92]	; 0x5c
 8009be8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009bec:	e785      	b.n	8009afa <_strtod_l+0x1a2>
 8009bee:	f04f 0c01 	mov.w	ip, #1
 8009bf2:	e7f6      	b.n	8009be2 <_strtod_l+0x28a>
 8009bf4:	0800d9a0 	.word	0x0800d9a0
 8009bf8:	0800d7bc 	.word	0x0800d7bc
 8009bfc:	7ff00000 	.word	0x7ff00000
 8009c00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c02:	1c51      	adds	r1, r2, #1
 8009c04:	9117      	str	r1, [sp, #92]	; 0x5c
 8009c06:	7852      	ldrb	r2, [r2, #1]
 8009c08:	2a30      	cmp	r2, #48	; 0x30
 8009c0a:	d0f9      	beq.n	8009c00 <_strtod_l+0x2a8>
 8009c0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009c10:	2908      	cmp	r1, #8
 8009c12:	f63f af79 	bhi.w	8009b08 <_strtod_l+0x1b0>
 8009c16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009c1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c1c:	9206      	str	r2, [sp, #24]
 8009c1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c20:	1c51      	adds	r1, r2, #1
 8009c22:	9117      	str	r1, [sp, #92]	; 0x5c
 8009c24:	7852      	ldrb	r2, [r2, #1]
 8009c26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009c2a:	2e09      	cmp	r6, #9
 8009c2c:	d937      	bls.n	8009c9e <_strtod_l+0x346>
 8009c2e:	9e06      	ldr	r6, [sp, #24]
 8009c30:	1b89      	subs	r1, r1, r6
 8009c32:	2908      	cmp	r1, #8
 8009c34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009c38:	dc02      	bgt.n	8009c40 <_strtod_l+0x2e8>
 8009c3a:	4576      	cmp	r6, lr
 8009c3c:	bfa8      	it	ge
 8009c3e:	4676      	movge	r6, lr
 8009c40:	f1bc 0f00 	cmp.w	ip, #0
 8009c44:	d000      	beq.n	8009c48 <_strtod_l+0x2f0>
 8009c46:	4276      	negs	r6, r6
 8009c48:	2d00      	cmp	r5, #0
 8009c4a:	d14d      	bne.n	8009ce8 <_strtod_l+0x390>
 8009c4c:	9904      	ldr	r1, [sp, #16]
 8009c4e:	4301      	orrs	r1, r0
 8009c50:	f47f aec6 	bne.w	80099e0 <_strtod_l+0x88>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f47f aee1 	bne.w	8009a1c <_strtod_l+0xc4>
 8009c5a:	2a69      	cmp	r2, #105	; 0x69
 8009c5c:	d027      	beq.n	8009cae <_strtod_l+0x356>
 8009c5e:	dc24      	bgt.n	8009caa <_strtod_l+0x352>
 8009c60:	2a49      	cmp	r2, #73	; 0x49
 8009c62:	d024      	beq.n	8009cae <_strtod_l+0x356>
 8009c64:	2a4e      	cmp	r2, #78	; 0x4e
 8009c66:	f47f aed9 	bne.w	8009a1c <_strtod_l+0xc4>
 8009c6a:	499f      	ldr	r1, [pc, #636]	; (8009ee8 <_strtod_l+0x590>)
 8009c6c:	a817      	add	r0, sp, #92	; 0x5c
 8009c6e:	f001 fed3 	bl	800ba18 <__match>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	f43f aed2 	beq.w	8009a1c <_strtod_l+0xc4>
 8009c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b28      	cmp	r3, #40	; 0x28
 8009c7e:	d12d      	bne.n	8009cdc <_strtod_l+0x384>
 8009c80:	499a      	ldr	r1, [pc, #616]	; (8009eec <_strtod_l+0x594>)
 8009c82:	aa1a      	add	r2, sp, #104	; 0x68
 8009c84:	a817      	add	r0, sp, #92	; 0x5c
 8009c86:	f001 fedb 	bl	800ba40 <__hexnan>
 8009c8a:	2805      	cmp	r0, #5
 8009c8c:	d126      	bne.n	8009cdc <_strtod_l+0x384>
 8009c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009c94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009c98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009c9c:	e6a0      	b.n	80099e0 <_strtod_l+0x88>
 8009c9e:	210a      	movs	r1, #10
 8009ca0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009ca4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009ca8:	e7b9      	b.n	8009c1e <_strtod_l+0x2c6>
 8009caa:	2a6e      	cmp	r2, #110	; 0x6e
 8009cac:	e7db      	b.n	8009c66 <_strtod_l+0x30e>
 8009cae:	4990      	ldr	r1, [pc, #576]	; (8009ef0 <_strtod_l+0x598>)
 8009cb0:	a817      	add	r0, sp, #92	; 0x5c
 8009cb2:	f001 feb1 	bl	800ba18 <__match>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f43f aeb0 	beq.w	8009a1c <_strtod_l+0xc4>
 8009cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cbe:	498d      	ldr	r1, [pc, #564]	; (8009ef4 <_strtod_l+0x59c>)
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	a817      	add	r0, sp, #92	; 0x5c
 8009cc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cc6:	f001 fea7 	bl	800ba18 <__match>
 8009cca:	b910      	cbnz	r0, 8009cd2 <_strtod_l+0x37a>
 8009ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cce:	3301      	adds	r3, #1
 8009cd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8009cd2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009f04 <_strtod_l+0x5ac>
 8009cd6:	f04f 0a00 	mov.w	sl, #0
 8009cda:	e681      	b.n	80099e0 <_strtod_l+0x88>
 8009cdc:	4886      	ldr	r0, [pc, #536]	; (8009ef8 <_strtod_l+0x5a0>)
 8009cde:	f002 ff07 	bl	800caf0 <nan>
 8009ce2:	ec5b ab10 	vmov	sl, fp, d0
 8009ce6:	e67b      	b.n	80099e0 <_strtod_l+0x88>
 8009ce8:	9b05      	ldr	r3, [sp, #20]
 8009cea:	9807      	ldr	r0, [sp, #28]
 8009cec:	1af3      	subs	r3, r6, r3
 8009cee:	2f00      	cmp	r7, #0
 8009cf0:	bf08      	it	eq
 8009cf2:	462f      	moveq	r7, r5
 8009cf4:	2d10      	cmp	r5, #16
 8009cf6:	9306      	str	r3, [sp, #24]
 8009cf8:	46a8      	mov	r8, r5
 8009cfa:	bfa8      	it	ge
 8009cfc:	f04f 0810 	movge.w	r8, #16
 8009d00:	f7f6 fc30 	bl	8000564 <__aeabi_ui2d>
 8009d04:	2d09      	cmp	r5, #9
 8009d06:	4682      	mov	sl, r0
 8009d08:	468b      	mov	fp, r1
 8009d0a:	dd13      	ble.n	8009d34 <_strtod_l+0x3dc>
 8009d0c:	4b7b      	ldr	r3, [pc, #492]	; (8009efc <_strtod_l+0x5a4>)
 8009d0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d16:	f7f6 fc9f 	bl	8000658 <__aeabi_dmul>
 8009d1a:	4682      	mov	sl, r0
 8009d1c:	4648      	mov	r0, r9
 8009d1e:	468b      	mov	fp, r1
 8009d20:	f7f6 fc20 	bl	8000564 <__aeabi_ui2d>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4650      	mov	r0, sl
 8009d2a:	4659      	mov	r1, fp
 8009d2c:	f7f6 fade 	bl	80002ec <__adddf3>
 8009d30:	4682      	mov	sl, r0
 8009d32:	468b      	mov	fp, r1
 8009d34:	2d0f      	cmp	r5, #15
 8009d36:	dc38      	bgt.n	8009daa <_strtod_l+0x452>
 8009d38:	9b06      	ldr	r3, [sp, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f43f ae50 	beq.w	80099e0 <_strtod_l+0x88>
 8009d40:	dd24      	ble.n	8009d8c <_strtod_l+0x434>
 8009d42:	2b16      	cmp	r3, #22
 8009d44:	dc0b      	bgt.n	8009d5e <_strtod_l+0x406>
 8009d46:	496d      	ldr	r1, [pc, #436]	; (8009efc <_strtod_l+0x5a4>)
 8009d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d50:	4652      	mov	r2, sl
 8009d52:	465b      	mov	r3, fp
 8009d54:	f7f6 fc80 	bl	8000658 <__aeabi_dmul>
 8009d58:	4682      	mov	sl, r0
 8009d5a:	468b      	mov	fp, r1
 8009d5c:	e640      	b.n	80099e0 <_strtod_l+0x88>
 8009d5e:	9a06      	ldr	r2, [sp, #24]
 8009d60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009d64:	4293      	cmp	r3, r2
 8009d66:	db20      	blt.n	8009daa <_strtod_l+0x452>
 8009d68:	4c64      	ldr	r4, [pc, #400]	; (8009efc <_strtod_l+0x5a4>)
 8009d6a:	f1c5 050f 	rsb	r5, r5, #15
 8009d6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d72:	4652      	mov	r2, sl
 8009d74:	465b      	mov	r3, fp
 8009d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d7a:	f7f6 fc6d 	bl	8000658 <__aeabi_dmul>
 8009d7e:	9b06      	ldr	r3, [sp, #24]
 8009d80:	1b5d      	subs	r5, r3, r5
 8009d82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d8a:	e7e3      	b.n	8009d54 <_strtod_l+0x3fc>
 8009d8c:	9b06      	ldr	r3, [sp, #24]
 8009d8e:	3316      	adds	r3, #22
 8009d90:	db0b      	blt.n	8009daa <_strtod_l+0x452>
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	1b9e      	subs	r6, r3, r6
 8009d96:	4b59      	ldr	r3, [pc, #356]	; (8009efc <_strtod_l+0x5a4>)
 8009d98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009d9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009da0:	4650      	mov	r0, sl
 8009da2:	4659      	mov	r1, fp
 8009da4:	f7f6 fd82 	bl	80008ac <__aeabi_ddiv>
 8009da8:	e7d6      	b.n	8009d58 <_strtod_l+0x400>
 8009daa:	9b06      	ldr	r3, [sp, #24]
 8009dac:	eba5 0808 	sub.w	r8, r5, r8
 8009db0:	4498      	add	r8, r3
 8009db2:	f1b8 0f00 	cmp.w	r8, #0
 8009db6:	dd74      	ble.n	8009ea2 <_strtod_l+0x54a>
 8009db8:	f018 030f 	ands.w	r3, r8, #15
 8009dbc:	d00a      	beq.n	8009dd4 <_strtod_l+0x47c>
 8009dbe:	494f      	ldr	r1, [pc, #316]	; (8009efc <_strtod_l+0x5a4>)
 8009dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dc4:	4652      	mov	r2, sl
 8009dc6:	465b      	mov	r3, fp
 8009dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dcc:	f7f6 fc44 	bl	8000658 <__aeabi_dmul>
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	468b      	mov	fp, r1
 8009dd4:	f038 080f 	bics.w	r8, r8, #15
 8009dd8:	d04f      	beq.n	8009e7a <_strtod_l+0x522>
 8009dda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009dde:	dd22      	ble.n	8009e26 <_strtod_l+0x4ce>
 8009de0:	2500      	movs	r5, #0
 8009de2:	462e      	mov	r6, r5
 8009de4:	9507      	str	r5, [sp, #28]
 8009de6:	9505      	str	r5, [sp, #20]
 8009de8:	2322      	movs	r3, #34	; 0x22
 8009dea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009f04 <_strtod_l+0x5ac>
 8009dee:	6023      	str	r3, [r4, #0]
 8009df0:	f04f 0a00 	mov.w	sl, #0
 8009df4:	9b07      	ldr	r3, [sp, #28]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f43f adf2 	beq.w	80099e0 <_strtod_l+0x88>
 8009dfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f001 ff2a 	bl	800bc58 <_Bfree>
 8009e04:	9905      	ldr	r1, [sp, #20]
 8009e06:	4620      	mov	r0, r4
 8009e08:	f001 ff26 	bl	800bc58 <_Bfree>
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f001 ff22 	bl	800bc58 <_Bfree>
 8009e14:	9907      	ldr	r1, [sp, #28]
 8009e16:	4620      	mov	r0, r4
 8009e18:	f001 ff1e 	bl	800bc58 <_Bfree>
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f001 ff1a 	bl	800bc58 <_Bfree>
 8009e24:	e5dc      	b.n	80099e0 <_strtod_l+0x88>
 8009e26:	4b36      	ldr	r3, [pc, #216]	; (8009f00 <_strtod_l+0x5a8>)
 8009e28:	9304      	str	r3, [sp, #16]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009e30:	4650      	mov	r0, sl
 8009e32:	4659      	mov	r1, fp
 8009e34:	4699      	mov	r9, r3
 8009e36:	f1b8 0f01 	cmp.w	r8, #1
 8009e3a:	dc21      	bgt.n	8009e80 <_strtod_l+0x528>
 8009e3c:	b10b      	cbz	r3, 8009e42 <_strtod_l+0x4ea>
 8009e3e:	4682      	mov	sl, r0
 8009e40:	468b      	mov	fp, r1
 8009e42:	4b2f      	ldr	r3, [pc, #188]	; (8009f00 <_strtod_l+0x5a8>)
 8009e44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009e48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009e4c:	4652      	mov	r2, sl
 8009e4e:	465b      	mov	r3, fp
 8009e50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009e54:	f7f6 fc00 	bl	8000658 <__aeabi_dmul>
 8009e58:	4b2a      	ldr	r3, [pc, #168]	; (8009f04 <_strtod_l+0x5ac>)
 8009e5a:	460a      	mov	r2, r1
 8009e5c:	400b      	ands	r3, r1
 8009e5e:	492a      	ldr	r1, [pc, #168]	; (8009f08 <_strtod_l+0x5b0>)
 8009e60:	428b      	cmp	r3, r1
 8009e62:	4682      	mov	sl, r0
 8009e64:	d8bc      	bhi.n	8009de0 <_strtod_l+0x488>
 8009e66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e6a:	428b      	cmp	r3, r1
 8009e6c:	bf86      	itte	hi
 8009e6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009f0c <_strtod_l+0x5b4>
 8009e72:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	e084      	b.n	8009f8a <_strtod_l+0x632>
 8009e80:	f018 0f01 	tst.w	r8, #1
 8009e84:	d005      	beq.n	8009e92 <_strtod_l+0x53a>
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fbe4 	bl	8000658 <__aeabi_dmul>
 8009e90:	2301      	movs	r3, #1
 8009e92:	9a04      	ldr	r2, [sp, #16]
 8009e94:	3208      	adds	r2, #8
 8009e96:	f109 0901 	add.w	r9, r9, #1
 8009e9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e9e:	9204      	str	r2, [sp, #16]
 8009ea0:	e7c9      	b.n	8009e36 <_strtod_l+0x4de>
 8009ea2:	d0ea      	beq.n	8009e7a <_strtod_l+0x522>
 8009ea4:	f1c8 0800 	rsb	r8, r8, #0
 8009ea8:	f018 020f 	ands.w	r2, r8, #15
 8009eac:	d00a      	beq.n	8009ec4 <_strtod_l+0x56c>
 8009eae:	4b13      	ldr	r3, [pc, #76]	; (8009efc <_strtod_l+0x5a4>)
 8009eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eb4:	4650      	mov	r0, sl
 8009eb6:	4659      	mov	r1, fp
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f7f6 fcf6 	bl	80008ac <__aeabi_ddiv>
 8009ec0:	4682      	mov	sl, r0
 8009ec2:	468b      	mov	fp, r1
 8009ec4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ec8:	d0d7      	beq.n	8009e7a <_strtod_l+0x522>
 8009eca:	f1b8 0f1f 	cmp.w	r8, #31
 8009ece:	dd1f      	ble.n	8009f10 <_strtod_l+0x5b8>
 8009ed0:	2500      	movs	r5, #0
 8009ed2:	462e      	mov	r6, r5
 8009ed4:	9507      	str	r5, [sp, #28]
 8009ed6:	9505      	str	r5, [sp, #20]
 8009ed8:	2322      	movs	r3, #34	; 0x22
 8009eda:	f04f 0a00 	mov.w	sl, #0
 8009ede:	f04f 0b00 	mov.w	fp, #0
 8009ee2:	6023      	str	r3, [r4, #0]
 8009ee4:	e786      	b.n	8009df4 <_strtod_l+0x49c>
 8009ee6:	bf00      	nop
 8009ee8:	0800d78d 	.word	0x0800d78d
 8009eec:	0800d7d0 	.word	0x0800d7d0
 8009ef0:	0800d785 	.word	0x0800d785
 8009ef4:	0800d8c3 	.word	0x0800d8c3
 8009ef8:	0800d8bf 	.word	0x0800d8bf
 8009efc:	0800da38 	.word	0x0800da38
 8009f00:	0800da10 	.word	0x0800da10
 8009f04:	7ff00000 	.word	0x7ff00000
 8009f08:	7ca00000 	.word	0x7ca00000
 8009f0c:	7fefffff 	.word	0x7fefffff
 8009f10:	f018 0310 	ands.w	r3, r8, #16
 8009f14:	bf18      	it	ne
 8009f16:	236a      	movne	r3, #106	; 0x6a
 8009f18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a2c8 <_strtod_l+0x970>
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	4650      	mov	r0, sl
 8009f20:	4659      	mov	r1, fp
 8009f22:	2300      	movs	r3, #0
 8009f24:	f018 0f01 	tst.w	r8, #1
 8009f28:	d004      	beq.n	8009f34 <_strtod_l+0x5dc>
 8009f2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f2e:	f7f6 fb93 	bl	8000658 <__aeabi_dmul>
 8009f32:	2301      	movs	r3, #1
 8009f34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009f38:	f109 0908 	add.w	r9, r9, #8
 8009f3c:	d1f2      	bne.n	8009f24 <_strtod_l+0x5cc>
 8009f3e:	b10b      	cbz	r3, 8009f44 <_strtod_l+0x5ec>
 8009f40:	4682      	mov	sl, r0
 8009f42:	468b      	mov	fp, r1
 8009f44:	9b04      	ldr	r3, [sp, #16]
 8009f46:	b1c3      	cbz	r3, 8009f7a <_strtod_l+0x622>
 8009f48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	4659      	mov	r1, fp
 8009f54:	dd11      	ble.n	8009f7a <_strtod_l+0x622>
 8009f56:	2b1f      	cmp	r3, #31
 8009f58:	f340 8124 	ble.w	800a1a4 <_strtod_l+0x84c>
 8009f5c:	2b34      	cmp	r3, #52	; 0x34
 8009f5e:	bfde      	ittt	le
 8009f60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009f64:	f04f 33ff 	movle.w	r3, #4294967295
 8009f68:	fa03 f202 	lslle.w	r2, r3, r2
 8009f6c:	f04f 0a00 	mov.w	sl, #0
 8009f70:	bfcc      	ite	gt
 8009f72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009f76:	ea02 0b01 	andle.w	fp, r2, r1
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4650      	mov	r0, sl
 8009f80:	4659      	mov	r1, fp
 8009f82:	f7f6 fdd1 	bl	8000b28 <__aeabi_dcmpeq>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d1a2      	bne.n	8009ed0 <_strtod_l+0x578>
 8009f8a:	9b07      	ldr	r3, [sp, #28]
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	9908      	ldr	r1, [sp, #32]
 8009f90:	462b      	mov	r3, r5
 8009f92:	463a      	mov	r2, r7
 8009f94:	4620      	mov	r0, r4
 8009f96:	f001 fec7 	bl	800bd28 <__s2b>
 8009f9a:	9007      	str	r0, [sp, #28]
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f43f af1f 	beq.w	8009de0 <_strtod_l+0x488>
 8009fa2:	9b05      	ldr	r3, [sp, #20]
 8009fa4:	1b9e      	subs	r6, r3, r6
 8009fa6:	9b06      	ldr	r3, [sp, #24]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bfb4      	ite	lt
 8009fac:	4633      	movlt	r3, r6
 8009fae:	2300      	movge	r3, #0
 8009fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8009fb2:	9b06      	ldr	r3, [sp, #24]
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009fba:	9312      	str	r3, [sp, #72]	; 0x48
 8009fbc:	462e      	mov	r6, r5
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	6859      	ldr	r1, [r3, #4]
 8009fc4:	f001 fe08 	bl	800bbd8 <_Balloc>
 8009fc8:	9005      	str	r0, [sp, #20]
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	f43f af0c 	beq.w	8009de8 <_strtod_l+0x490>
 8009fd0:	9b07      	ldr	r3, [sp, #28]
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	3202      	adds	r2, #2
 8009fd6:	f103 010c 	add.w	r1, r3, #12
 8009fda:	0092      	lsls	r2, r2, #2
 8009fdc:	300c      	adds	r0, #12
 8009fde:	f001 fde1 	bl	800bba4 <memcpy>
 8009fe2:	ec4b ab10 	vmov	d0, sl, fp
 8009fe6:	aa1a      	add	r2, sp, #104	; 0x68
 8009fe8:	a919      	add	r1, sp, #100	; 0x64
 8009fea:	4620      	mov	r0, r4
 8009fec:	f002 f9e2 	bl	800c3b4 <__d2b>
 8009ff0:	ec4b ab18 	vmov	d8, sl, fp
 8009ff4:	9018      	str	r0, [sp, #96]	; 0x60
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	f43f aef6 	beq.w	8009de8 <_strtod_l+0x490>
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	4620      	mov	r0, r4
 800a000:	f001 ff2c 	bl	800be5c <__i2b>
 800a004:	4606      	mov	r6, r0
 800a006:	2800      	cmp	r0, #0
 800a008:	f43f aeee 	beq.w	8009de8 <_strtod_l+0x490>
 800a00c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a00e:	9904      	ldr	r1, [sp, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	bfab      	itete	ge
 800a014:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a016:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a018:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a01a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a01e:	bfac      	ite	ge
 800a020:	eb03 0902 	addge.w	r9, r3, r2
 800a024:	1ad7      	sublt	r7, r2, r3
 800a026:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a028:	eba3 0801 	sub.w	r8, r3, r1
 800a02c:	4490      	add	r8, r2
 800a02e:	4ba1      	ldr	r3, [pc, #644]	; (800a2b4 <_strtod_l+0x95c>)
 800a030:	f108 38ff 	add.w	r8, r8, #4294967295
 800a034:	4598      	cmp	r8, r3
 800a036:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a03a:	f280 80c7 	bge.w	800a1cc <_strtod_l+0x874>
 800a03e:	eba3 0308 	sub.w	r3, r3, r8
 800a042:	2b1f      	cmp	r3, #31
 800a044:	eba2 0203 	sub.w	r2, r2, r3
 800a048:	f04f 0101 	mov.w	r1, #1
 800a04c:	f300 80b1 	bgt.w	800a1b2 <_strtod_l+0x85a>
 800a050:	fa01 f303 	lsl.w	r3, r1, r3
 800a054:	930d      	str	r3, [sp, #52]	; 0x34
 800a056:	2300      	movs	r3, #0
 800a058:	9308      	str	r3, [sp, #32]
 800a05a:	eb09 0802 	add.w	r8, r9, r2
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	45c1      	cmp	r9, r8
 800a062:	4417      	add	r7, r2
 800a064:	441f      	add	r7, r3
 800a066:	464b      	mov	r3, r9
 800a068:	bfa8      	it	ge
 800a06a:	4643      	movge	r3, r8
 800a06c:	42bb      	cmp	r3, r7
 800a06e:	bfa8      	it	ge
 800a070:	463b      	movge	r3, r7
 800a072:	2b00      	cmp	r3, #0
 800a074:	bfc2      	ittt	gt
 800a076:	eba8 0803 	subgt.w	r8, r8, r3
 800a07a:	1aff      	subgt	r7, r7, r3
 800a07c:	eba9 0903 	subgt.w	r9, r9, r3
 800a080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a082:	2b00      	cmp	r3, #0
 800a084:	dd17      	ble.n	800a0b6 <_strtod_l+0x75e>
 800a086:	4631      	mov	r1, r6
 800a088:	461a      	mov	r2, r3
 800a08a:	4620      	mov	r0, r4
 800a08c:	f001 ffa6 	bl	800bfdc <__pow5mult>
 800a090:	4606      	mov	r6, r0
 800a092:	2800      	cmp	r0, #0
 800a094:	f43f aea8 	beq.w	8009de8 <_strtod_l+0x490>
 800a098:	4601      	mov	r1, r0
 800a09a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a09c:	4620      	mov	r0, r4
 800a09e:	f001 fef3 	bl	800be88 <__multiply>
 800a0a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f43f ae9f 	beq.w	8009de8 <_strtod_l+0x490>
 800a0aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f001 fdd3 	bl	800bc58 <_Bfree>
 800a0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b4:	9318      	str	r3, [sp, #96]	; 0x60
 800a0b6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ba:	f300 808c 	bgt.w	800a1d6 <_strtod_l+0x87e>
 800a0be:	9b06      	ldr	r3, [sp, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dd08      	ble.n	800a0d6 <_strtod_l+0x77e>
 800a0c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0c6:	9905      	ldr	r1, [sp, #20]
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f001 ff87 	bl	800bfdc <__pow5mult>
 800a0ce:	9005      	str	r0, [sp, #20]
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	f43f ae89 	beq.w	8009de8 <_strtod_l+0x490>
 800a0d6:	2f00      	cmp	r7, #0
 800a0d8:	dd08      	ble.n	800a0ec <_strtod_l+0x794>
 800a0da:	9905      	ldr	r1, [sp, #20]
 800a0dc:	463a      	mov	r2, r7
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f001 ffd6 	bl	800c090 <__lshift>
 800a0e4:	9005      	str	r0, [sp, #20]
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f43f ae7e 	beq.w	8009de8 <_strtod_l+0x490>
 800a0ec:	f1b9 0f00 	cmp.w	r9, #0
 800a0f0:	dd08      	ble.n	800a104 <_strtod_l+0x7ac>
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	464a      	mov	r2, r9
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f001 ffca 	bl	800c090 <__lshift>
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f ae72 	beq.w	8009de8 <_strtod_l+0x490>
 800a104:	9a05      	ldr	r2, [sp, #20]
 800a106:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a108:	4620      	mov	r0, r4
 800a10a:	f002 f84d 	bl	800c1a8 <__mdiff>
 800a10e:	4605      	mov	r5, r0
 800a110:	2800      	cmp	r0, #0
 800a112:	f43f ae69 	beq.w	8009de8 <_strtod_l+0x490>
 800a116:	68c3      	ldr	r3, [r0, #12]
 800a118:	930b      	str	r3, [sp, #44]	; 0x2c
 800a11a:	2300      	movs	r3, #0
 800a11c:	60c3      	str	r3, [r0, #12]
 800a11e:	4631      	mov	r1, r6
 800a120:	f002 f826 	bl	800c170 <__mcmp>
 800a124:	2800      	cmp	r0, #0
 800a126:	da60      	bge.n	800a1ea <_strtod_l+0x892>
 800a128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a12a:	ea53 030a 	orrs.w	r3, r3, sl
 800a12e:	f040 8082 	bne.w	800a236 <_strtod_l+0x8de>
 800a132:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a136:	2b00      	cmp	r3, #0
 800a138:	d17d      	bne.n	800a236 <_strtod_l+0x8de>
 800a13a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a13e:	0d1b      	lsrs	r3, r3, #20
 800a140:	051b      	lsls	r3, r3, #20
 800a142:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a146:	d976      	bls.n	800a236 <_strtod_l+0x8de>
 800a148:	696b      	ldr	r3, [r5, #20]
 800a14a:	b913      	cbnz	r3, 800a152 <_strtod_l+0x7fa>
 800a14c:	692b      	ldr	r3, [r5, #16]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	dd71      	ble.n	800a236 <_strtod_l+0x8de>
 800a152:	4629      	mov	r1, r5
 800a154:	2201      	movs	r2, #1
 800a156:	4620      	mov	r0, r4
 800a158:	f001 ff9a 	bl	800c090 <__lshift>
 800a15c:	4631      	mov	r1, r6
 800a15e:	4605      	mov	r5, r0
 800a160:	f002 f806 	bl	800c170 <__mcmp>
 800a164:	2800      	cmp	r0, #0
 800a166:	dd66      	ble.n	800a236 <_strtod_l+0x8de>
 800a168:	9904      	ldr	r1, [sp, #16]
 800a16a:	4a53      	ldr	r2, [pc, #332]	; (800a2b8 <_strtod_l+0x960>)
 800a16c:	465b      	mov	r3, fp
 800a16e:	2900      	cmp	r1, #0
 800a170:	f000 8081 	beq.w	800a276 <_strtod_l+0x91e>
 800a174:	ea02 010b 	and.w	r1, r2, fp
 800a178:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a17c:	dc7b      	bgt.n	800a276 <_strtod_l+0x91e>
 800a17e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a182:	f77f aea9 	ble.w	8009ed8 <_strtod_l+0x580>
 800a186:	4b4d      	ldr	r3, [pc, #308]	; (800a2bc <_strtod_l+0x964>)
 800a188:	4650      	mov	r0, sl
 800a18a:	4659      	mov	r1, fp
 800a18c:	2200      	movs	r2, #0
 800a18e:	f7f6 fa63 	bl	8000658 <__aeabi_dmul>
 800a192:	460b      	mov	r3, r1
 800a194:	4303      	orrs	r3, r0
 800a196:	bf08      	it	eq
 800a198:	2322      	moveq	r3, #34	; 0x22
 800a19a:	4682      	mov	sl, r0
 800a19c:	468b      	mov	fp, r1
 800a19e:	bf08      	it	eq
 800a1a0:	6023      	streq	r3, [r4, #0]
 800a1a2:	e62b      	b.n	8009dfc <_strtod_l+0x4a4>
 800a1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ac:	ea03 0a0a 	and.w	sl, r3, sl
 800a1b0:	e6e3      	b.n	8009f7a <_strtod_l+0x622>
 800a1b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a1b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a1ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a1be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a1c2:	fa01 f308 	lsl.w	r3, r1, r8
 800a1c6:	9308      	str	r3, [sp, #32]
 800a1c8:	910d      	str	r1, [sp, #52]	; 0x34
 800a1ca:	e746      	b.n	800a05a <_strtod_l+0x702>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9308      	str	r3, [sp, #32]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a1d4:	e741      	b.n	800a05a <_strtod_l+0x702>
 800a1d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1d8:	4642      	mov	r2, r8
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f001 ff58 	bl	800c090 <__lshift>
 800a1e0:	9018      	str	r0, [sp, #96]	; 0x60
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	f47f af6b 	bne.w	800a0be <_strtod_l+0x766>
 800a1e8:	e5fe      	b.n	8009de8 <_strtod_l+0x490>
 800a1ea:	465f      	mov	r7, fp
 800a1ec:	d16e      	bne.n	800a2cc <_strtod_l+0x974>
 800a1ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1f4:	b342      	cbz	r2, 800a248 <_strtod_l+0x8f0>
 800a1f6:	4a32      	ldr	r2, [pc, #200]	; (800a2c0 <_strtod_l+0x968>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d128      	bne.n	800a24e <_strtod_l+0x8f6>
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	4651      	mov	r1, sl
 800a200:	b1eb      	cbz	r3, 800a23e <_strtod_l+0x8e6>
 800a202:	4b2d      	ldr	r3, [pc, #180]	; (800a2b8 <_strtod_l+0x960>)
 800a204:	403b      	ands	r3, r7
 800a206:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a20a:	f04f 32ff 	mov.w	r2, #4294967295
 800a20e:	d819      	bhi.n	800a244 <_strtod_l+0x8ec>
 800a210:	0d1b      	lsrs	r3, r3, #20
 800a212:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a216:	fa02 f303 	lsl.w	r3, r2, r3
 800a21a:	4299      	cmp	r1, r3
 800a21c:	d117      	bne.n	800a24e <_strtod_l+0x8f6>
 800a21e:	4b29      	ldr	r3, [pc, #164]	; (800a2c4 <_strtod_l+0x96c>)
 800a220:	429f      	cmp	r7, r3
 800a222:	d102      	bne.n	800a22a <_strtod_l+0x8d2>
 800a224:	3101      	adds	r1, #1
 800a226:	f43f addf 	beq.w	8009de8 <_strtod_l+0x490>
 800a22a:	4b23      	ldr	r3, [pc, #140]	; (800a2b8 <_strtod_l+0x960>)
 800a22c:	403b      	ands	r3, r7
 800a22e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a232:	f04f 0a00 	mov.w	sl, #0
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1a4      	bne.n	800a186 <_strtod_l+0x82e>
 800a23c:	e5de      	b.n	8009dfc <_strtod_l+0x4a4>
 800a23e:	f04f 33ff 	mov.w	r3, #4294967295
 800a242:	e7ea      	b.n	800a21a <_strtod_l+0x8c2>
 800a244:	4613      	mov	r3, r2
 800a246:	e7e8      	b.n	800a21a <_strtod_l+0x8c2>
 800a248:	ea53 030a 	orrs.w	r3, r3, sl
 800a24c:	d08c      	beq.n	800a168 <_strtod_l+0x810>
 800a24e:	9b08      	ldr	r3, [sp, #32]
 800a250:	b1db      	cbz	r3, 800a28a <_strtod_l+0x932>
 800a252:	423b      	tst	r3, r7
 800a254:	d0ef      	beq.n	800a236 <_strtod_l+0x8de>
 800a256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a258:	9a04      	ldr	r2, [sp, #16]
 800a25a:	4650      	mov	r0, sl
 800a25c:	4659      	mov	r1, fp
 800a25e:	b1c3      	cbz	r3, 800a292 <_strtod_l+0x93a>
 800a260:	f7ff fb5b 	bl	800991a <sulp>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	ec51 0b18 	vmov	r0, r1, d8
 800a26c:	f7f6 f83e 	bl	80002ec <__adddf3>
 800a270:	4682      	mov	sl, r0
 800a272:	468b      	mov	fp, r1
 800a274:	e7df      	b.n	800a236 <_strtod_l+0x8de>
 800a276:	4013      	ands	r3, r2
 800a278:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a27c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a280:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a284:	f04f 3aff 	mov.w	sl, #4294967295
 800a288:	e7d5      	b.n	800a236 <_strtod_l+0x8de>
 800a28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a28c:	ea13 0f0a 	tst.w	r3, sl
 800a290:	e7e0      	b.n	800a254 <_strtod_l+0x8fc>
 800a292:	f7ff fb42 	bl	800991a <sulp>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	ec51 0b18 	vmov	r0, r1, d8
 800a29e:	f7f6 f823 	bl	80002e8 <__aeabi_dsub>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	468b      	mov	fp, r1
 800a2aa:	f7f6 fc3d 	bl	8000b28 <__aeabi_dcmpeq>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d0c1      	beq.n	800a236 <_strtod_l+0x8de>
 800a2b2:	e611      	b.n	8009ed8 <_strtod_l+0x580>
 800a2b4:	fffffc02 	.word	0xfffffc02
 800a2b8:	7ff00000 	.word	0x7ff00000
 800a2bc:	39500000 	.word	0x39500000
 800a2c0:	000fffff 	.word	0x000fffff
 800a2c4:	7fefffff 	.word	0x7fefffff
 800a2c8:	0800d7e8 	.word	0x0800d7e8
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f002 f8cc 	bl	800c46c <__ratio>
 800a2d4:	ec59 8b10 	vmov	r8, r9, d0
 800a2d8:	ee10 0a10 	vmov	r0, s0
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	f7f6 fc34 	bl	8000b50 <__aeabi_dcmple>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d07a      	beq.n	800a3e2 <_strtod_l+0xa8a>
 800a2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d04a      	beq.n	800a388 <_strtod_l+0xa30>
 800a2f2:	4b95      	ldr	r3, [pc, #596]	; (800a548 <_strtod_l+0xbf0>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a548 <_strtod_l+0xbf0>
 800a2fe:	f04f 0800 	mov.w	r8, #0
 800a302:	4b92      	ldr	r3, [pc, #584]	; (800a54c <_strtod_l+0xbf4>)
 800a304:	403b      	ands	r3, r7
 800a306:	930d      	str	r3, [sp, #52]	; 0x34
 800a308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a30a:	4b91      	ldr	r3, [pc, #580]	; (800a550 <_strtod_l+0xbf8>)
 800a30c:	429a      	cmp	r2, r3
 800a30e:	f040 80b0 	bne.w	800a472 <_strtod_l+0xb1a>
 800a312:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a316:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a31a:	ec4b ab10 	vmov	d0, sl, fp
 800a31e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a322:	f001 ffcb 	bl	800c2bc <__ulp>
 800a326:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a32a:	ec53 2b10 	vmov	r2, r3, d0
 800a32e:	f7f6 f993 	bl	8000658 <__aeabi_dmul>
 800a332:	4652      	mov	r2, sl
 800a334:	465b      	mov	r3, fp
 800a336:	f7f5 ffd9 	bl	80002ec <__adddf3>
 800a33a:	460b      	mov	r3, r1
 800a33c:	4983      	ldr	r1, [pc, #524]	; (800a54c <_strtod_l+0xbf4>)
 800a33e:	4a85      	ldr	r2, [pc, #532]	; (800a554 <_strtod_l+0xbfc>)
 800a340:	4019      	ands	r1, r3
 800a342:	4291      	cmp	r1, r2
 800a344:	4682      	mov	sl, r0
 800a346:	d960      	bls.n	800a40a <_strtod_l+0xab2>
 800a348:	ee18 3a90 	vmov	r3, s17
 800a34c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a350:	4293      	cmp	r3, r2
 800a352:	d104      	bne.n	800a35e <_strtod_l+0xa06>
 800a354:	ee18 3a10 	vmov	r3, s16
 800a358:	3301      	adds	r3, #1
 800a35a:	f43f ad45 	beq.w	8009de8 <_strtod_l+0x490>
 800a35e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a560 <_strtod_l+0xc08>
 800a362:	f04f 3aff 	mov.w	sl, #4294967295
 800a366:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a368:	4620      	mov	r0, r4
 800a36a:	f001 fc75 	bl	800bc58 <_Bfree>
 800a36e:	9905      	ldr	r1, [sp, #20]
 800a370:	4620      	mov	r0, r4
 800a372:	f001 fc71 	bl	800bc58 <_Bfree>
 800a376:	4631      	mov	r1, r6
 800a378:	4620      	mov	r0, r4
 800a37a:	f001 fc6d 	bl	800bc58 <_Bfree>
 800a37e:	4629      	mov	r1, r5
 800a380:	4620      	mov	r0, r4
 800a382:	f001 fc69 	bl	800bc58 <_Bfree>
 800a386:	e61a      	b.n	8009fbe <_strtod_l+0x666>
 800a388:	f1ba 0f00 	cmp.w	sl, #0
 800a38c:	d11b      	bne.n	800a3c6 <_strtod_l+0xa6e>
 800a38e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a392:	b9f3      	cbnz	r3, 800a3d2 <_strtod_l+0xa7a>
 800a394:	4b6c      	ldr	r3, [pc, #432]	; (800a548 <_strtod_l+0xbf0>)
 800a396:	2200      	movs	r2, #0
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f6 fbce 	bl	8000b3c <__aeabi_dcmplt>
 800a3a0:	b9d0      	cbnz	r0, 800a3d8 <_strtod_l+0xa80>
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	4b6c      	ldr	r3, [pc, #432]	; (800a558 <_strtod_l+0xc00>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f7f6 f955 	bl	8000658 <__aeabi_dmul>
 800a3ae:	4680      	mov	r8, r0
 800a3b0:	4689      	mov	r9, r1
 800a3b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a3ba:	9315      	str	r3, [sp, #84]	; 0x54
 800a3bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a3c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3c4:	e79d      	b.n	800a302 <_strtod_l+0x9aa>
 800a3c6:	f1ba 0f01 	cmp.w	sl, #1
 800a3ca:	d102      	bne.n	800a3d2 <_strtod_l+0xa7a>
 800a3cc:	2f00      	cmp	r7, #0
 800a3ce:	f43f ad83 	beq.w	8009ed8 <_strtod_l+0x580>
 800a3d2:	4b62      	ldr	r3, [pc, #392]	; (800a55c <_strtod_l+0xc04>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	e78e      	b.n	800a2f6 <_strtod_l+0x99e>
 800a3d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a558 <_strtod_l+0xc00>
 800a3dc:	f04f 0800 	mov.w	r8, #0
 800a3e0:	e7e7      	b.n	800a3b2 <_strtod_l+0xa5a>
 800a3e2:	4b5d      	ldr	r3, [pc, #372]	; (800a558 <_strtod_l+0xc00>)
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f7f6 f935 	bl	8000658 <__aeabi_dmul>
 800a3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	4689      	mov	r9, r1
 800a3f4:	b933      	cbnz	r3, 800a404 <_strtod_l+0xaac>
 800a3f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3fa:	900e      	str	r0, [sp, #56]	; 0x38
 800a3fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a402:	e7dd      	b.n	800a3c0 <_strtod_l+0xa68>
 800a404:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a408:	e7f9      	b.n	800a3fe <_strtod_l+0xaa6>
 800a40a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a40e:	9b04      	ldr	r3, [sp, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1a8      	bne.n	800a366 <_strtod_l+0xa0e>
 800a414:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a41a:	0d1b      	lsrs	r3, r3, #20
 800a41c:	051b      	lsls	r3, r3, #20
 800a41e:	429a      	cmp	r2, r3
 800a420:	d1a1      	bne.n	800a366 <_strtod_l+0xa0e>
 800a422:	4640      	mov	r0, r8
 800a424:	4649      	mov	r1, r9
 800a426:	f7f6 fc77 	bl	8000d18 <__aeabi_d2lz>
 800a42a:	f7f6 f8e7 	bl	80005fc <__aeabi_l2d>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	f7f5 ff57 	bl	80002e8 <__aeabi_dsub>
 800a43a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a43c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a440:	ea43 030a 	orr.w	r3, r3, sl
 800a444:	4313      	orrs	r3, r2
 800a446:	4680      	mov	r8, r0
 800a448:	4689      	mov	r9, r1
 800a44a:	d055      	beq.n	800a4f8 <_strtod_l+0xba0>
 800a44c:	a336      	add	r3, pc, #216	; (adr r3, 800a528 <_strtod_l+0xbd0>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	f7f6 fb73 	bl	8000b3c <__aeabi_dcmplt>
 800a456:	2800      	cmp	r0, #0
 800a458:	f47f acd0 	bne.w	8009dfc <_strtod_l+0x4a4>
 800a45c:	a334      	add	r3, pc, #208	; (adr r3, 800a530 <_strtod_l+0xbd8>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f6 fb87 	bl	8000b78 <__aeabi_dcmpgt>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	f43f af7b 	beq.w	800a366 <_strtod_l+0xa0e>
 800a470:	e4c4      	b.n	8009dfc <_strtod_l+0x4a4>
 800a472:	9b04      	ldr	r3, [sp, #16]
 800a474:	b333      	cbz	r3, 800a4c4 <_strtod_l+0xb6c>
 800a476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a478:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a47c:	d822      	bhi.n	800a4c4 <_strtod_l+0xb6c>
 800a47e:	a32e      	add	r3, pc, #184	; (adr r3, 800a538 <_strtod_l+0xbe0>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f6 fb62 	bl	8000b50 <__aeabi_dcmple>
 800a48c:	b1a0      	cbz	r0, 800a4b8 <_strtod_l+0xb60>
 800a48e:	4649      	mov	r1, r9
 800a490:	4640      	mov	r0, r8
 800a492:	f7f6 fbb9 	bl	8000c08 <__aeabi_d2uiz>
 800a496:	2801      	cmp	r0, #1
 800a498:	bf38      	it	cc
 800a49a:	2001      	movcc	r0, #1
 800a49c:	f7f6 f862 	bl	8000564 <__aeabi_ui2d>
 800a4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4689      	mov	r9, r1
 800a4a6:	bb23      	cbnz	r3, 800a4f2 <_strtod_l+0xb9a>
 800a4a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4ac:	9010      	str	r0, [sp, #64]	; 0x40
 800a4ae:	9311      	str	r3, [sp, #68]	; 0x44
 800a4b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4c8:	eeb0 0a48 	vmov.f32	s0, s16
 800a4cc:	eef0 0a68 	vmov.f32	s1, s17
 800a4d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4d4:	f001 fef2 	bl	800c2bc <__ulp>
 800a4d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4dc:	ec53 2b10 	vmov	r2, r3, d0
 800a4e0:	f7f6 f8ba 	bl	8000658 <__aeabi_dmul>
 800a4e4:	ec53 2b18 	vmov	r2, r3, d8
 800a4e8:	f7f5 ff00 	bl	80002ec <__adddf3>
 800a4ec:	4682      	mov	sl, r0
 800a4ee:	468b      	mov	fp, r1
 800a4f0:	e78d      	b.n	800a40e <_strtod_l+0xab6>
 800a4f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a4f6:	e7db      	b.n	800a4b0 <_strtod_l+0xb58>
 800a4f8:	a311      	add	r3, pc, #68	; (adr r3, 800a540 <_strtod_l+0xbe8>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f6 fb1d 	bl	8000b3c <__aeabi_dcmplt>
 800a502:	e7b2      	b.n	800a46a <_strtod_l+0xb12>
 800a504:	2300      	movs	r3, #0
 800a506:	930a      	str	r3, [sp, #40]	; 0x28
 800a508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a50a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	f7ff ba6b 	b.w	80099e8 <_strtod_l+0x90>
 800a512:	2a65      	cmp	r2, #101	; 0x65
 800a514:	f43f ab5f 	beq.w	8009bd6 <_strtod_l+0x27e>
 800a518:	2a45      	cmp	r2, #69	; 0x45
 800a51a:	f43f ab5c 	beq.w	8009bd6 <_strtod_l+0x27e>
 800a51e:	2301      	movs	r3, #1
 800a520:	f7ff bb94 	b.w	8009c4c <_strtod_l+0x2f4>
 800a524:	f3af 8000 	nop.w
 800a528:	94a03595 	.word	0x94a03595
 800a52c:	3fdfffff 	.word	0x3fdfffff
 800a530:	35afe535 	.word	0x35afe535
 800a534:	3fe00000 	.word	0x3fe00000
 800a538:	ffc00000 	.word	0xffc00000
 800a53c:	41dfffff 	.word	0x41dfffff
 800a540:	94a03595 	.word	0x94a03595
 800a544:	3fcfffff 	.word	0x3fcfffff
 800a548:	3ff00000 	.word	0x3ff00000
 800a54c:	7ff00000 	.word	0x7ff00000
 800a550:	7fe00000 	.word	0x7fe00000
 800a554:	7c9fffff 	.word	0x7c9fffff
 800a558:	3fe00000 	.word	0x3fe00000
 800a55c:	bff00000 	.word	0xbff00000
 800a560:	7fefffff 	.word	0x7fefffff

0800a564 <_strtod_r>:
 800a564:	4b01      	ldr	r3, [pc, #4]	; (800a56c <_strtod_r+0x8>)
 800a566:	f7ff b9f7 	b.w	8009958 <_strtod_l>
 800a56a:	bf00      	nop
 800a56c:	20000074 	.word	0x20000074

0800a570 <strtok>:
 800a570:	4b16      	ldr	r3, [pc, #88]	; (800a5cc <strtok+0x5c>)
 800a572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a574:	681e      	ldr	r6, [r3, #0]
 800a576:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a578:	4605      	mov	r5, r0
 800a57a:	b9fc      	cbnz	r4, 800a5bc <strtok+0x4c>
 800a57c:	2050      	movs	r0, #80	; 0x50
 800a57e:	9101      	str	r1, [sp, #4]
 800a580:	f7fe f9d4 	bl	800892c <malloc>
 800a584:	9901      	ldr	r1, [sp, #4]
 800a586:	65b0      	str	r0, [r6, #88]	; 0x58
 800a588:	4602      	mov	r2, r0
 800a58a:	b920      	cbnz	r0, 800a596 <strtok+0x26>
 800a58c:	4b10      	ldr	r3, [pc, #64]	; (800a5d0 <strtok+0x60>)
 800a58e:	4811      	ldr	r0, [pc, #68]	; (800a5d4 <strtok+0x64>)
 800a590:	2157      	movs	r1, #87	; 0x57
 800a592:	f000 f8d7 	bl	800a744 <__assert_func>
 800a596:	e9c0 4400 	strd	r4, r4, [r0]
 800a59a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a59e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a5a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a5a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a5aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a5ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a5b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a5b6:	6184      	str	r4, [r0, #24]
 800a5b8:	7704      	strb	r4, [r0, #28]
 800a5ba:	6244      	str	r4, [r0, #36]	; 0x24
 800a5bc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	b002      	add	sp, #8
 800a5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a5c8:	f000 b806 	b.w	800a5d8 <__strtok_r>
 800a5cc:	2000000c 	.word	0x2000000c
 800a5d0:	0800d810 	.word	0x0800d810
 800a5d4:	0800d827 	.word	0x0800d827

0800a5d8 <__strtok_r>:
 800a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5da:	b908      	cbnz	r0, 800a5e0 <__strtok_r+0x8>
 800a5dc:	6810      	ldr	r0, [r2, #0]
 800a5de:	b188      	cbz	r0, 800a604 <__strtok_r+0x2c>
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a5ee:	b91e      	cbnz	r6, 800a5f8 <__strtok_r+0x20>
 800a5f0:	b965      	cbnz	r5, 800a60c <__strtok_r+0x34>
 800a5f2:	6015      	str	r5, [r2, #0]
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	e005      	b.n	800a604 <__strtok_r+0x2c>
 800a5f8:	42b5      	cmp	r5, r6
 800a5fa:	d1f6      	bne.n	800a5ea <__strtok_r+0x12>
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1f0      	bne.n	800a5e2 <__strtok_r+0xa>
 800a600:	6014      	str	r4, [r2, #0]
 800a602:	7003      	strb	r3, [r0, #0]
 800a604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a606:	461c      	mov	r4, r3
 800a608:	e00c      	b.n	800a624 <__strtok_r+0x4c>
 800a60a:	b915      	cbnz	r5, 800a612 <__strtok_r+0x3a>
 800a60c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a610:	460e      	mov	r6, r1
 800a612:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a616:	42ab      	cmp	r3, r5
 800a618:	d1f7      	bne.n	800a60a <__strtok_r+0x32>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0f3      	beq.n	800a606 <__strtok_r+0x2e>
 800a61e:	2300      	movs	r3, #0
 800a620:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a624:	6014      	str	r4, [r2, #0]
 800a626:	e7ed      	b.n	800a604 <__strtok_r+0x2c>

0800a628 <_strtol_l.constprop.0>:
 800a628:	2b01      	cmp	r3, #1
 800a62a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62e:	d001      	beq.n	800a634 <_strtol_l.constprop.0+0xc>
 800a630:	2b24      	cmp	r3, #36	; 0x24
 800a632:	d906      	bls.n	800a642 <_strtol_l.constprop.0+0x1a>
 800a634:	f7fe f950 	bl	80088d8 <__errno>
 800a638:	2316      	movs	r3, #22
 800a63a:	6003      	str	r3, [r0, #0]
 800a63c:	2000      	movs	r0, #0
 800a63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a642:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a728 <_strtol_l.constprop.0+0x100>
 800a646:	460d      	mov	r5, r1
 800a648:	462e      	mov	r6, r5
 800a64a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a64e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a652:	f017 0708 	ands.w	r7, r7, #8
 800a656:	d1f7      	bne.n	800a648 <_strtol_l.constprop.0+0x20>
 800a658:	2c2d      	cmp	r4, #45	; 0x2d
 800a65a:	d132      	bne.n	800a6c2 <_strtol_l.constprop.0+0x9a>
 800a65c:	782c      	ldrb	r4, [r5, #0]
 800a65e:	2701      	movs	r7, #1
 800a660:	1cb5      	adds	r5, r6, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d05b      	beq.n	800a71e <_strtol_l.constprop.0+0xf6>
 800a666:	2b10      	cmp	r3, #16
 800a668:	d109      	bne.n	800a67e <_strtol_l.constprop.0+0x56>
 800a66a:	2c30      	cmp	r4, #48	; 0x30
 800a66c:	d107      	bne.n	800a67e <_strtol_l.constprop.0+0x56>
 800a66e:	782c      	ldrb	r4, [r5, #0]
 800a670:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a674:	2c58      	cmp	r4, #88	; 0x58
 800a676:	d14d      	bne.n	800a714 <_strtol_l.constprop.0+0xec>
 800a678:	786c      	ldrb	r4, [r5, #1]
 800a67a:	2310      	movs	r3, #16
 800a67c:	3502      	adds	r5, #2
 800a67e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a682:	f108 38ff 	add.w	r8, r8, #4294967295
 800a686:	f04f 0c00 	mov.w	ip, #0
 800a68a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a68e:	4666      	mov	r6, ip
 800a690:	fb03 8a19 	mls	sl, r3, r9, r8
 800a694:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a698:	f1be 0f09 	cmp.w	lr, #9
 800a69c:	d816      	bhi.n	800a6cc <_strtol_l.constprop.0+0xa4>
 800a69e:	4674      	mov	r4, lr
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	dd24      	ble.n	800a6ee <_strtol_l.constprop.0+0xc6>
 800a6a4:	f1bc 0f00 	cmp.w	ip, #0
 800a6a8:	db1e      	blt.n	800a6e8 <_strtol_l.constprop.0+0xc0>
 800a6aa:	45b1      	cmp	r9, r6
 800a6ac:	d31c      	bcc.n	800a6e8 <_strtol_l.constprop.0+0xc0>
 800a6ae:	d101      	bne.n	800a6b4 <_strtol_l.constprop.0+0x8c>
 800a6b0:	45a2      	cmp	sl, r4
 800a6b2:	db19      	blt.n	800a6e8 <_strtol_l.constprop.0+0xc0>
 800a6b4:	fb06 4603 	mla	r6, r6, r3, r4
 800a6b8:	f04f 0c01 	mov.w	ip, #1
 800a6bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6c0:	e7e8      	b.n	800a694 <_strtol_l.constprop.0+0x6c>
 800a6c2:	2c2b      	cmp	r4, #43	; 0x2b
 800a6c4:	bf04      	itt	eq
 800a6c6:	782c      	ldrbeq	r4, [r5, #0]
 800a6c8:	1cb5      	addeq	r5, r6, #2
 800a6ca:	e7ca      	b.n	800a662 <_strtol_l.constprop.0+0x3a>
 800a6cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a6d0:	f1be 0f19 	cmp.w	lr, #25
 800a6d4:	d801      	bhi.n	800a6da <_strtol_l.constprop.0+0xb2>
 800a6d6:	3c37      	subs	r4, #55	; 0x37
 800a6d8:	e7e2      	b.n	800a6a0 <_strtol_l.constprop.0+0x78>
 800a6da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a6de:	f1be 0f19 	cmp.w	lr, #25
 800a6e2:	d804      	bhi.n	800a6ee <_strtol_l.constprop.0+0xc6>
 800a6e4:	3c57      	subs	r4, #87	; 0x57
 800a6e6:	e7db      	b.n	800a6a0 <_strtol_l.constprop.0+0x78>
 800a6e8:	f04f 3cff 	mov.w	ip, #4294967295
 800a6ec:	e7e6      	b.n	800a6bc <_strtol_l.constprop.0+0x94>
 800a6ee:	f1bc 0f00 	cmp.w	ip, #0
 800a6f2:	da05      	bge.n	800a700 <_strtol_l.constprop.0+0xd8>
 800a6f4:	2322      	movs	r3, #34	; 0x22
 800a6f6:	6003      	str	r3, [r0, #0]
 800a6f8:	4646      	mov	r6, r8
 800a6fa:	b942      	cbnz	r2, 800a70e <_strtol_l.constprop.0+0xe6>
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	e79e      	b.n	800a63e <_strtol_l.constprop.0+0x16>
 800a700:	b107      	cbz	r7, 800a704 <_strtol_l.constprop.0+0xdc>
 800a702:	4276      	negs	r6, r6
 800a704:	2a00      	cmp	r2, #0
 800a706:	d0f9      	beq.n	800a6fc <_strtol_l.constprop.0+0xd4>
 800a708:	f1bc 0f00 	cmp.w	ip, #0
 800a70c:	d000      	beq.n	800a710 <_strtol_l.constprop.0+0xe8>
 800a70e:	1e69      	subs	r1, r5, #1
 800a710:	6011      	str	r1, [r2, #0]
 800a712:	e7f3      	b.n	800a6fc <_strtol_l.constprop.0+0xd4>
 800a714:	2430      	movs	r4, #48	; 0x30
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1b1      	bne.n	800a67e <_strtol_l.constprop.0+0x56>
 800a71a:	2308      	movs	r3, #8
 800a71c:	e7af      	b.n	800a67e <_strtol_l.constprop.0+0x56>
 800a71e:	2c30      	cmp	r4, #48	; 0x30
 800a720:	d0a5      	beq.n	800a66e <_strtol_l.constprop.0+0x46>
 800a722:	230a      	movs	r3, #10
 800a724:	e7ab      	b.n	800a67e <_strtol_l.constprop.0+0x56>
 800a726:	bf00      	nop
 800a728:	0800d679 	.word	0x0800d679

0800a72c <_strtol_r>:
 800a72c:	f7ff bf7c 	b.w	800a628 <_strtol_l.constprop.0>

0800a730 <strtol>:
 800a730:	4613      	mov	r3, r2
 800a732:	460a      	mov	r2, r1
 800a734:	4601      	mov	r1, r0
 800a736:	4802      	ldr	r0, [pc, #8]	; (800a740 <strtol+0x10>)
 800a738:	6800      	ldr	r0, [r0, #0]
 800a73a:	f7ff bf75 	b.w	800a628 <_strtol_l.constprop.0>
 800a73e:	bf00      	nop
 800a740:	2000000c 	.word	0x2000000c

0800a744 <__assert_func>:
 800a744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a746:	4614      	mov	r4, r2
 800a748:	461a      	mov	r2, r3
 800a74a:	4b09      	ldr	r3, [pc, #36]	; (800a770 <__assert_func+0x2c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4605      	mov	r5, r0
 800a750:	68d8      	ldr	r0, [r3, #12]
 800a752:	b14c      	cbz	r4, 800a768 <__assert_func+0x24>
 800a754:	4b07      	ldr	r3, [pc, #28]	; (800a774 <__assert_func+0x30>)
 800a756:	9100      	str	r1, [sp, #0]
 800a758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a75c:	4906      	ldr	r1, [pc, #24]	; (800a778 <__assert_func+0x34>)
 800a75e:	462b      	mov	r3, r5
 800a760:	f000 fe88 	bl	800b474 <fiprintf>
 800a764:	f002 faae 	bl	800ccc4 <abort>
 800a768:	4b04      	ldr	r3, [pc, #16]	; (800a77c <__assert_func+0x38>)
 800a76a:	461c      	mov	r4, r3
 800a76c:	e7f3      	b.n	800a756 <__assert_func+0x12>
 800a76e:	bf00      	nop
 800a770:	2000000c 	.word	0x2000000c
 800a774:	0800d884 	.word	0x0800d884
 800a778:	0800d891 	.word	0x0800d891
 800a77c:	0800d8bf 	.word	0x0800d8bf

0800a780 <quorem>:
 800a780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	6903      	ldr	r3, [r0, #16]
 800a786:	690c      	ldr	r4, [r1, #16]
 800a788:	42a3      	cmp	r3, r4
 800a78a:	4607      	mov	r7, r0
 800a78c:	f2c0 8081 	blt.w	800a892 <quorem+0x112>
 800a790:	3c01      	subs	r4, #1
 800a792:	f101 0814 	add.w	r8, r1, #20
 800a796:	f100 0514 	add.w	r5, r0, #20
 800a79a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a79e:	9301      	str	r3, [sp, #4]
 800a7a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7b8:	d331      	bcc.n	800a81e <quorem+0x9e>
 800a7ba:	f04f 0e00 	mov.w	lr, #0
 800a7be:	4640      	mov	r0, r8
 800a7c0:	46ac      	mov	ip, r5
 800a7c2:	46f2      	mov	sl, lr
 800a7c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7c8:	b293      	uxth	r3, r2
 800a7ca:	fb06 e303 	mla	r3, r6, r3, lr
 800a7ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	ebaa 0303 	sub.w	r3, sl, r3
 800a7d8:	f8dc a000 	ldr.w	sl, [ip]
 800a7dc:	0c12      	lsrs	r2, r2, #16
 800a7de:	fa13 f38a 	uxtah	r3, r3, sl
 800a7e2:	fb06 e202 	mla	r2, r6, r2, lr
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	9b00      	ldr	r3, [sp, #0]
 800a7ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7ee:	b292      	uxth	r2, r2
 800a7f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7fc:	4581      	cmp	r9, r0
 800a7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a802:	f84c 3b04 	str.w	r3, [ip], #4
 800a806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a80a:	d2db      	bcs.n	800a7c4 <quorem+0x44>
 800a80c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a810:	b92b      	cbnz	r3, 800a81e <quorem+0x9e>
 800a812:	9b01      	ldr	r3, [sp, #4]
 800a814:	3b04      	subs	r3, #4
 800a816:	429d      	cmp	r5, r3
 800a818:	461a      	mov	r2, r3
 800a81a:	d32e      	bcc.n	800a87a <quorem+0xfa>
 800a81c:	613c      	str	r4, [r7, #16]
 800a81e:	4638      	mov	r0, r7
 800a820:	f001 fca6 	bl	800c170 <__mcmp>
 800a824:	2800      	cmp	r0, #0
 800a826:	db24      	blt.n	800a872 <quorem+0xf2>
 800a828:	3601      	adds	r6, #1
 800a82a:	4628      	mov	r0, r5
 800a82c:	f04f 0c00 	mov.w	ip, #0
 800a830:	f858 2b04 	ldr.w	r2, [r8], #4
 800a834:	f8d0 e000 	ldr.w	lr, [r0]
 800a838:	b293      	uxth	r3, r2
 800a83a:	ebac 0303 	sub.w	r3, ip, r3
 800a83e:	0c12      	lsrs	r2, r2, #16
 800a840:	fa13 f38e 	uxtah	r3, r3, lr
 800a844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a852:	45c1      	cmp	r9, r8
 800a854:	f840 3b04 	str.w	r3, [r0], #4
 800a858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a85c:	d2e8      	bcs.n	800a830 <quorem+0xb0>
 800a85e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a866:	b922      	cbnz	r2, 800a872 <quorem+0xf2>
 800a868:	3b04      	subs	r3, #4
 800a86a:	429d      	cmp	r5, r3
 800a86c:	461a      	mov	r2, r3
 800a86e:	d30a      	bcc.n	800a886 <quorem+0x106>
 800a870:	613c      	str	r4, [r7, #16]
 800a872:	4630      	mov	r0, r6
 800a874:	b003      	add	sp, #12
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	6812      	ldr	r2, [r2, #0]
 800a87c:	3b04      	subs	r3, #4
 800a87e:	2a00      	cmp	r2, #0
 800a880:	d1cc      	bne.n	800a81c <quorem+0x9c>
 800a882:	3c01      	subs	r4, #1
 800a884:	e7c7      	b.n	800a816 <quorem+0x96>
 800a886:	6812      	ldr	r2, [r2, #0]
 800a888:	3b04      	subs	r3, #4
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	d1f0      	bne.n	800a870 <quorem+0xf0>
 800a88e:	3c01      	subs	r4, #1
 800a890:	e7eb      	b.n	800a86a <quorem+0xea>
 800a892:	2000      	movs	r0, #0
 800a894:	e7ee      	b.n	800a874 <quorem+0xf4>
	...

0800a898 <_dtoa_r>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	ed2d 8b04 	vpush	{d8-d9}
 800a8a0:	ec57 6b10 	vmov	r6, r7, d0
 800a8a4:	b093      	sub	sp, #76	; 0x4c
 800a8a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8ac:	9106      	str	r1, [sp, #24]
 800a8ae:	ee10 aa10 	vmov	sl, s0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a8b8:	46bb      	mov	fp, r7
 800a8ba:	b975      	cbnz	r5, 800a8da <_dtoa_r+0x42>
 800a8bc:	2010      	movs	r0, #16
 800a8be:	f7fe f835 	bl	800892c <malloc>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	6260      	str	r0, [r4, #36]	; 0x24
 800a8c6:	b920      	cbnz	r0, 800a8d2 <_dtoa_r+0x3a>
 800a8c8:	4ba7      	ldr	r3, [pc, #668]	; (800ab68 <_dtoa_r+0x2d0>)
 800a8ca:	21ea      	movs	r1, #234	; 0xea
 800a8cc:	48a7      	ldr	r0, [pc, #668]	; (800ab6c <_dtoa_r+0x2d4>)
 800a8ce:	f7ff ff39 	bl	800a744 <__assert_func>
 800a8d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8d6:	6005      	str	r5, [r0, #0]
 800a8d8:	60c5      	str	r5, [r0, #12]
 800a8da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8dc:	6819      	ldr	r1, [r3, #0]
 800a8de:	b151      	cbz	r1, 800a8f6 <_dtoa_r+0x5e>
 800a8e0:	685a      	ldr	r2, [r3, #4]
 800a8e2:	604a      	str	r2, [r1, #4]
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4093      	lsls	r3, r2
 800a8e8:	608b      	str	r3, [r1, #8]
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f001 f9b4 	bl	800bc58 <_Bfree>
 800a8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	1e3b      	subs	r3, r7, #0
 800a8f8:	bfaa      	itet	ge
 800a8fa:	2300      	movge	r3, #0
 800a8fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a900:	f8c8 3000 	strge.w	r3, [r8]
 800a904:	4b9a      	ldr	r3, [pc, #616]	; (800ab70 <_dtoa_r+0x2d8>)
 800a906:	bfbc      	itt	lt
 800a908:	2201      	movlt	r2, #1
 800a90a:	f8c8 2000 	strlt.w	r2, [r8]
 800a90e:	ea33 030b 	bics.w	r3, r3, fp
 800a912:	d11b      	bne.n	800a94c <_dtoa_r+0xb4>
 800a914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a916:	f242 730f 	movw	r3, #9999	; 0x270f
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a920:	4333      	orrs	r3, r6
 800a922:	f000 8592 	beq.w	800b44a <_dtoa_r+0xbb2>
 800a926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a928:	b963      	cbnz	r3, 800a944 <_dtoa_r+0xac>
 800a92a:	4b92      	ldr	r3, [pc, #584]	; (800ab74 <_dtoa_r+0x2dc>)
 800a92c:	e022      	b.n	800a974 <_dtoa_r+0xdc>
 800a92e:	4b92      	ldr	r3, [pc, #584]	; (800ab78 <_dtoa_r+0x2e0>)
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	3308      	adds	r3, #8
 800a934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	9801      	ldr	r0, [sp, #4]
 800a93a:	b013      	add	sp, #76	; 0x4c
 800a93c:	ecbd 8b04 	vpop	{d8-d9}
 800a940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a944:	4b8b      	ldr	r3, [pc, #556]	; (800ab74 <_dtoa_r+0x2dc>)
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	3303      	adds	r3, #3
 800a94a:	e7f3      	b.n	800a934 <_dtoa_r+0x9c>
 800a94c:	2200      	movs	r2, #0
 800a94e:	2300      	movs	r3, #0
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	f7f6 f8e8 	bl	8000b28 <__aeabi_dcmpeq>
 800a958:	ec4b ab19 	vmov	d9, sl, fp
 800a95c:	4680      	mov	r8, r0
 800a95e:	b158      	cbz	r0, 800a978 <_dtoa_r+0xe0>
 800a960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a962:	2301      	movs	r3, #1
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 856b 	beq.w	800b444 <_dtoa_r+0xbac>
 800a96e:	4883      	ldr	r0, [pc, #524]	; (800ab7c <_dtoa_r+0x2e4>)
 800a970:	6018      	str	r0, [r3, #0]
 800a972:	1e43      	subs	r3, r0, #1
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	e7df      	b.n	800a938 <_dtoa_r+0xa0>
 800a978:	ec4b ab10 	vmov	d0, sl, fp
 800a97c:	aa10      	add	r2, sp, #64	; 0x40
 800a97e:	a911      	add	r1, sp, #68	; 0x44
 800a980:	4620      	mov	r0, r4
 800a982:	f001 fd17 	bl	800c3b4 <__d2b>
 800a986:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a98a:	ee08 0a10 	vmov	s16, r0
 800a98e:	2d00      	cmp	r5, #0
 800a990:	f000 8084 	beq.w	800aa9c <_dtoa_r+0x204>
 800a994:	ee19 3a90 	vmov	r3, s19
 800a998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a99c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a9a0:	4656      	mov	r6, sl
 800a9a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a9a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a9ae:	4b74      	ldr	r3, [pc, #464]	; (800ab80 <_dtoa_r+0x2e8>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	f7f5 fc97 	bl	80002e8 <__aeabi_dsub>
 800a9ba:	a365      	add	r3, pc, #404	; (adr r3, 800ab50 <_dtoa_r+0x2b8>)
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	f7f5 fe4a 	bl	8000658 <__aeabi_dmul>
 800a9c4:	a364      	add	r3, pc, #400	; (adr r3, 800ab58 <_dtoa_r+0x2c0>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f7f5 fc8f 	bl	80002ec <__adddf3>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	460f      	mov	r7, r1
 800a9d4:	f7f5 fdd6 	bl	8000584 <__aeabi_i2d>
 800a9d8:	a361      	add	r3, pc, #388	; (adr r3, 800ab60 <_dtoa_r+0x2c8>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fe3b 	bl	8000658 <__aeabi_dmul>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	f7f5 fc7f 	bl	80002ec <__adddf3>
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	f7f6 f8e1 	bl	8000bb8 <__aeabi_d2iz>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	9000      	str	r0, [sp, #0]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f6 f89c 	bl	8000b3c <__aeabi_dcmplt>
 800aa04:	b150      	cbz	r0, 800aa1c <_dtoa_r+0x184>
 800aa06:	9800      	ldr	r0, [sp, #0]
 800aa08:	f7f5 fdbc 	bl	8000584 <__aeabi_i2d>
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	463b      	mov	r3, r7
 800aa10:	f7f6 f88a 	bl	8000b28 <__aeabi_dcmpeq>
 800aa14:	b910      	cbnz	r0, 800aa1c <_dtoa_r+0x184>
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	2b16      	cmp	r3, #22
 800aa20:	d85a      	bhi.n	800aad8 <_dtoa_r+0x240>
 800aa22:	9a00      	ldr	r2, [sp, #0]
 800aa24:	4b57      	ldr	r3, [pc, #348]	; (800ab84 <_dtoa_r+0x2ec>)
 800aa26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	ec51 0b19 	vmov	r0, r1, d9
 800aa32:	f7f6 f883 	bl	8000b3c <__aeabi_dcmplt>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d050      	beq.n	800aadc <_dtoa_r+0x244>
 800aa3a:	9b00      	ldr	r3, [sp, #0]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	2300      	movs	r3, #0
 800aa42:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa46:	1b5d      	subs	r5, r3, r5
 800aa48:	1e6b      	subs	r3, r5, #1
 800aa4a:	9305      	str	r3, [sp, #20]
 800aa4c:	bf45      	ittet	mi
 800aa4e:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa52:	9304      	strmi	r3, [sp, #16]
 800aa54:	2300      	movpl	r3, #0
 800aa56:	2300      	movmi	r3, #0
 800aa58:	bf4c      	ite	mi
 800aa5a:	9305      	strmi	r3, [sp, #20]
 800aa5c:	9304      	strpl	r3, [sp, #16]
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	db3d      	blt.n	800aae0 <_dtoa_r+0x248>
 800aa64:	9b05      	ldr	r3, [sp, #20]
 800aa66:	9a00      	ldr	r2, [sp, #0]
 800aa68:	920a      	str	r2, [sp, #40]	; 0x28
 800aa6a:	4413      	add	r3, r2
 800aa6c:	9305      	str	r3, [sp, #20]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	9307      	str	r3, [sp, #28]
 800aa72:	9b06      	ldr	r3, [sp, #24]
 800aa74:	2b09      	cmp	r3, #9
 800aa76:	f200 8089 	bhi.w	800ab8c <_dtoa_r+0x2f4>
 800aa7a:	2b05      	cmp	r3, #5
 800aa7c:	bfc4      	itt	gt
 800aa7e:	3b04      	subgt	r3, #4
 800aa80:	9306      	strgt	r3, [sp, #24]
 800aa82:	9b06      	ldr	r3, [sp, #24]
 800aa84:	f1a3 0302 	sub.w	r3, r3, #2
 800aa88:	bfcc      	ite	gt
 800aa8a:	2500      	movgt	r5, #0
 800aa8c:	2501      	movle	r5, #1
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	f200 8087 	bhi.w	800aba2 <_dtoa_r+0x30a>
 800aa94:	e8df f003 	tbb	[pc, r3]
 800aa98:	59383a2d 	.word	0x59383a2d
 800aa9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aaa0:	441d      	add	r5, r3
 800aaa2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	bfc1      	itttt	gt
 800aaaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aaae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aab2:	fa0b f303 	lslgt.w	r3, fp, r3
 800aab6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aaba:	bfda      	itte	le
 800aabc:	f1c3 0320 	rsble	r3, r3, #32
 800aac0:	fa06 f003 	lslle.w	r0, r6, r3
 800aac4:	4318      	orrgt	r0, r3
 800aac6:	f7f5 fd4d 	bl	8000564 <__aeabi_ui2d>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4606      	mov	r6, r0
 800aace:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aad2:	3d01      	subs	r5, #1
 800aad4:	930e      	str	r3, [sp, #56]	; 0x38
 800aad6:	e76a      	b.n	800a9ae <_dtoa_r+0x116>
 800aad8:	2301      	movs	r3, #1
 800aada:	e7b2      	b.n	800aa42 <_dtoa_r+0x1aa>
 800aadc:	900b      	str	r0, [sp, #44]	; 0x2c
 800aade:	e7b1      	b.n	800aa44 <_dtoa_r+0x1ac>
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	9a00      	ldr	r2, [sp, #0]
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	9304      	str	r3, [sp, #16]
 800aae8:	4253      	negs	r3, r2
 800aaea:	9307      	str	r3, [sp, #28]
 800aaec:	2300      	movs	r3, #0
 800aaee:	930a      	str	r3, [sp, #40]	; 0x28
 800aaf0:	e7bf      	b.n	800aa72 <_dtoa_r+0x1da>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9308      	str	r3, [sp, #32]
 800aaf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dc55      	bgt.n	800aba8 <_dtoa_r+0x310>
 800aafc:	2301      	movs	r3, #1
 800aafe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab02:	461a      	mov	r2, r3
 800ab04:	9209      	str	r2, [sp, #36]	; 0x24
 800ab06:	e00c      	b.n	800ab22 <_dtoa_r+0x28a>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e7f3      	b.n	800aaf4 <_dtoa_r+0x25c>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab10:	9308      	str	r3, [sp, #32]
 800ab12:	9b00      	ldr	r3, [sp, #0]
 800ab14:	4413      	add	r3, r2
 800ab16:	9302      	str	r3, [sp, #8]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	9303      	str	r3, [sp, #12]
 800ab1e:	bfb8      	it	lt
 800ab20:	2301      	movlt	r3, #1
 800ab22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab24:	2200      	movs	r2, #0
 800ab26:	6042      	str	r2, [r0, #4]
 800ab28:	2204      	movs	r2, #4
 800ab2a:	f102 0614 	add.w	r6, r2, #20
 800ab2e:	429e      	cmp	r6, r3
 800ab30:	6841      	ldr	r1, [r0, #4]
 800ab32:	d93d      	bls.n	800abb0 <_dtoa_r+0x318>
 800ab34:	4620      	mov	r0, r4
 800ab36:	f001 f84f 	bl	800bbd8 <_Balloc>
 800ab3a:	9001      	str	r0, [sp, #4]
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d13b      	bne.n	800abb8 <_dtoa_r+0x320>
 800ab40:	4b11      	ldr	r3, [pc, #68]	; (800ab88 <_dtoa_r+0x2f0>)
 800ab42:	4602      	mov	r2, r0
 800ab44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab48:	e6c0      	b.n	800a8cc <_dtoa_r+0x34>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e7df      	b.n	800ab0e <_dtoa_r+0x276>
 800ab4e:	bf00      	nop
 800ab50:	636f4361 	.word	0x636f4361
 800ab54:	3fd287a7 	.word	0x3fd287a7
 800ab58:	8b60c8b3 	.word	0x8b60c8b3
 800ab5c:	3fc68a28 	.word	0x3fc68a28
 800ab60:	509f79fb 	.word	0x509f79fb
 800ab64:	3fd34413 	.word	0x3fd34413
 800ab68:	0800d810 	.word	0x0800d810
 800ab6c:	0800d8cd 	.word	0x0800d8cd
 800ab70:	7ff00000 	.word	0x7ff00000
 800ab74:	0800d8c9 	.word	0x0800d8c9
 800ab78:	0800d8c0 	.word	0x0800d8c0
 800ab7c:	0800d791 	.word	0x0800d791
 800ab80:	3ff80000 	.word	0x3ff80000
 800ab84:	0800da38 	.word	0x0800da38
 800ab88:	0800d928 	.word	0x0800d928
 800ab8c:	2501      	movs	r5, #1
 800ab8e:	2300      	movs	r3, #0
 800ab90:	9306      	str	r3, [sp, #24]
 800ab92:	9508      	str	r5, [sp, #32]
 800ab94:	f04f 33ff 	mov.w	r3, #4294967295
 800ab98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2312      	movs	r3, #18
 800aba0:	e7b0      	b.n	800ab04 <_dtoa_r+0x26c>
 800aba2:	2301      	movs	r3, #1
 800aba4:	9308      	str	r3, [sp, #32]
 800aba6:	e7f5      	b.n	800ab94 <_dtoa_r+0x2fc>
 800aba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abae:	e7b8      	b.n	800ab22 <_dtoa_r+0x28a>
 800abb0:	3101      	adds	r1, #1
 800abb2:	6041      	str	r1, [r0, #4]
 800abb4:	0052      	lsls	r2, r2, #1
 800abb6:	e7b8      	b.n	800ab2a <_dtoa_r+0x292>
 800abb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abba:	9a01      	ldr	r2, [sp, #4]
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	2b0e      	cmp	r3, #14
 800abc2:	f200 809d 	bhi.w	800ad00 <_dtoa_r+0x468>
 800abc6:	2d00      	cmp	r5, #0
 800abc8:	f000 809a 	beq.w	800ad00 <_dtoa_r+0x468>
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	dd32      	ble.n	800ac38 <_dtoa_r+0x3a0>
 800abd2:	4ab7      	ldr	r2, [pc, #732]	; (800aeb0 <_dtoa_r+0x618>)
 800abd4:	f003 030f 	and.w	r3, r3, #15
 800abd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abe0:	9b00      	ldr	r3, [sp, #0]
 800abe2:	05d8      	lsls	r0, r3, #23
 800abe4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800abe8:	d516      	bpl.n	800ac18 <_dtoa_r+0x380>
 800abea:	4bb2      	ldr	r3, [pc, #712]	; (800aeb4 <_dtoa_r+0x61c>)
 800abec:	ec51 0b19 	vmov	r0, r1, d9
 800abf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abf4:	f7f5 fe5a 	bl	80008ac <__aeabi_ddiv>
 800abf8:	f007 070f 	and.w	r7, r7, #15
 800abfc:	4682      	mov	sl, r0
 800abfe:	468b      	mov	fp, r1
 800ac00:	2503      	movs	r5, #3
 800ac02:	4eac      	ldr	r6, [pc, #688]	; (800aeb4 <_dtoa_r+0x61c>)
 800ac04:	b957      	cbnz	r7, 800ac1c <_dtoa_r+0x384>
 800ac06:	4642      	mov	r2, r8
 800ac08:	464b      	mov	r3, r9
 800ac0a:	4650      	mov	r0, sl
 800ac0c:	4659      	mov	r1, fp
 800ac0e:	f7f5 fe4d 	bl	80008ac <__aeabi_ddiv>
 800ac12:	4682      	mov	sl, r0
 800ac14:	468b      	mov	fp, r1
 800ac16:	e028      	b.n	800ac6a <_dtoa_r+0x3d2>
 800ac18:	2502      	movs	r5, #2
 800ac1a:	e7f2      	b.n	800ac02 <_dtoa_r+0x36a>
 800ac1c:	07f9      	lsls	r1, r7, #31
 800ac1e:	d508      	bpl.n	800ac32 <_dtoa_r+0x39a>
 800ac20:	4640      	mov	r0, r8
 800ac22:	4649      	mov	r1, r9
 800ac24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac28:	f7f5 fd16 	bl	8000658 <__aeabi_dmul>
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	4680      	mov	r8, r0
 800ac30:	4689      	mov	r9, r1
 800ac32:	107f      	asrs	r7, r7, #1
 800ac34:	3608      	adds	r6, #8
 800ac36:	e7e5      	b.n	800ac04 <_dtoa_r+0x36c>
 800ac38:	f000 809b 	beq.w	800ad72 <_dtoa_r+0x4da>
 800ac3c:	9b00      	ldr	r3, [sp, #0]
 800ac3e:	4f9d      	ldr	r7, [pc, #628]	; (800aeb4 <_dtoa_r+0x61c>)
 800ac40:	425e      	negs	r6, r3
 800ac42:	4b9b      	ldr	r3, [pc, #620]	; (800aeb0 <_dtoa_r+0x618>)
 800ac44:	f006 020f 	and.w	r2, r6, #15
 800ac48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac50:	ec51 0b19 	vmov	r0, r1, d9
 800ac54:	f7f5 fd00 	bl	8000658 <__aeabi_dmul>
 800ac58:	1136      	asrs	r6, r6, #4
 800ac5a:	4682      	mov	sl, r0
 800ac5c:	468b      	mov	fp, r1
 800ac5e:	2300      	movs	r3, #0
 800ac60:	2502      	movs	r5, #2
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	d17a      	bne.n	800ad5c <_dtoa_r+0x4c4>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1d3      	bne.n	800ac12 <_dtoa_r+0x37a>
 800ac6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 8082 	beq.w	800ad76 <_dtoa_r+0x4de>
 800ac72:	4b91      	ldr	r3, [pc, #580]	; (800aeb8 <_dtoa_r+0x620>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	4650      	mov	r0, sl
 800ac78:	4659      	mov	r1, fp
 800ac7a:	f7f5 ff5f 	bl	8000b3c <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d079      	beq.n	800ad76 <_dtoa_r+0x4de>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d076      	beq.n	800ad76 <_dtoa_r+0x4de>
 800ac88:	9b02      	ldr	r3, [sp, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dd36      	ble.n	800acfc <_dtoa_r+0x464>
 800ac8e:	9b00      	ldr	r3, [sp, #0]
 800ac90:	4650      	mov	r0, sl
 800ac92:	4659      	mov	r1, fp
 800ac94:	1e5f      	subs	r7, r3, #1
 800ac96:	2200      	movs	r2, #0
 800ac98:	4b88      	ldr	r3, [pc, #544]	; (800aebc <_dtoa_r+0x624>)
 800ac9a:	f7f5 fcdd 	bl	8000658 <__aeabi_dmul>
 800ac9e:	9e02      	ldr	r6, [sp, #8]
 800aca0:	4682      	mov	sl, r0
 800aca2:	468b      	mov	fp, r1
 800aca4:	3501      	adds	r5, #1
 800aca6:	4628      	mov	r0, r5
 800aca8:	f7f5 fc6c 	bl	8000584 <__aeabi_i2d>
 800acac:	4652      	mov	r2, sl
 800acae:	465b      	mov	r3, fp
 800acb0:	f7f5 fcd2 	bl	8000658 <__aeabi_dmul>
 800acb4:	4b82      	ldr	r3, [pc, #520]	; (800aec0 <_dtoa_r+0x628>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	f7f5 fb18 	bl	80002ec <__adddf3>
 800acbc:	46d0      	mov	r8, sl
 800acbe:	46d9      	mov	r9, fp
 800acc0:	4682      	mov	sl, r0
 800acc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800acc6:	2e00      	cmp	r6, #0
 800acc8:	d158      	bne.n	800ad7c <_dtoa_r+0x4e4>
 800acca:	4b7e      	ldr	r3, [pc, #504]	; (800aec4 <_dtoa_r+0x62c>)
 800accc:	2200      	movs	r2, #0
 800acce:	4640      	mov	r0, r8
 800acd0:	4649      	mov	r1, r9
 800acd2:	f7f5 fb09 	bl	80002e8 <__aeabi_dsub>
 800acd6:	4652      	mov	r2, sl
 800acd8:	465b      	mov	r3, fp
 800acda:	4680      	mov	r8, r0
 800acdc:	4689      	mov	r9, r1
 800acde:	f7f5 ff4b 	bl	8000b78 <__aeabi_dcmpgt>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f040 8295 	bne.w	800b212 <_dtoa_r+0x97a>
 800ace8:	4652      	mov	r2, sl
 800acea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800acee:	4640      	mov	r0, r8
 800acf0:	4649      	mov	r1, r9
 800acf2:	f7f5 ff23 	bl	8000b3c <__aeabi_dcmplt>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f040 8289 	bne.w	800b20e <_dtoa_r+0x976>
 800acfc:	ec5b ab19 	vmov	sl, fp, d9
 800ad00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f2c0 8148 	blt.w	800af98 <_dtoa_r+0x700>
 800ad08:	9a00      	ldr	r2, [sp, #0]
 800ad0a:	2a0e      	cmp	r2, #14
 800ad0c:	f300 8144 	bgt.w	800af98 <_dtoa_r+0x700>
 800ad10:	4b67      	ldr	r3, [pc, #412]	; (800aeb0 <_dtoa_r+0x618>)
 800ad12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f280 80d5 	bge.w	800aecc <_dtoa_r+0x634>
 800ad22:	9b03      	ldr	r3, [sp, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f300 80d1 	bgt.w	800aecc <_dtoa_r+0x634>
 800ad2a:	f040 826f 	bne.w	800b20c <_dtoa_r+0x974>
 800ad2e:	4b65      	ldr	r3, [pc, #404]	; (800aec4 <_dtoa_r+0x62c>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	4640      	mov	r0, r8
 800ad34:	4649      	mov	r1, r9
 800ad36:	f7f5 fc8f 	bl	8000658 <__aeabi_dmul>
 800ad3a:	4652      	mov	r2, sl
 800ad3c:	465b      	mov	r3, fp
 800ad3e:	f7f5 ff11 	bl	8000b64 <__aeabi_dcmpge>
 800ad42:	9e03      	ldr	r6, [sp, #12]
 800ad44:	4637      	mov	r7, r6
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f040 8245 	bne.w	800b1d6 <_dtoa_r+0x93e>
 800ad4c:	9d01      	ldr	r5, [sp, #4]
 800ad4e:	2331      	movs	r3, #49	; 0x31
 800ad50:	f805 3b01 	strb.w	r3, [r5], #1
 800ad54:	9b00      	ldr	r3, [sp, #0]
 800ad56:	3301      	adds	r3, #1
 800ad58:	9300      	str	r3, [sp, #0]
 800ad5a:	e240      	b.n	800b1de <_dtoa_r+0x946>
 800ad5c:	07f2      	lsls	r2, r6, #31
 800ad5e:	d505      	bpl.n	800ad6c <_dtoa_r+0x4d4>
 800ad60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad64:	f7f5 fc78 	bl	8000658 <__aeabi_dmul>
 800ad68:	3501      	adds	r5, #1
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	1076      	asrs	r6, r6, #1
 800ad6e:	3708      	adds	r7, #8
 800ad70:	e777      	b.n	800ac62 <_dtoa_r+0x3ca>
 800ad72:	2502      	movs	r5, #2
 800ad74:	e779      	b.n	800ac6a <_dtoa_r+0x3d2>
 800ad76:	9f00      	ldr	r7, [sp, #0]
 800ad78:	9e03      	ldr	r6, [sp, #12]
 800ad7a:	e794      	b.n	800aca6 <_dtoa_r+0x40e>
 800ad7c:	9901      	ldr	r1, [sp, #4]
 800ad7e:	4b4c      	ldr	r3, [pc, #304]	; (800aeb0 <_dtoa_r+0x618>)
 800ad80:	4431      	add	r1, r6
 800ad82:	910d      	str	r1, [sp, #52]	; 0x34
 800ad84:	9908      	ldr	r1, [sp, #32]
 800ad86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad8e:	2900      	cmp	r1, #0
 800ad90:	d043      	beq.n	800ae1a <_dtoa_r+0x582>
 800ad92:	494d      	ldr	r1, [pc, #308]	; (800aec8 <_dtoa_r+0x630>)
 800ad94:	2000      	movs	r0, #0
 800ad96:	f7f5 fd89 	bl	80008ac <__aeabi_ddiv>
 800ad9a:	4652      	mov	r2, sl
 800ad9c:	465b      	mov	r3, fp
 800ad9e:	f7f5 faa3 	bl	80002e8 <__aeabi_dsub>
 800ada2:	9d01      	ldr	r5, [sp, #4]
 800ada4:	4682      	mov	sl, r0
 800ada6:	468b      	mov	fp, r1
 800ada8:	4649      	mov	r1, r9
 800adaa:	4640      	mov	r0, r8
 800adac:	f7f5 ff04 	bl	8000bb8 <__aeabi_d2iz>
 800adb0:	4606      	mov	r6, r0
 800adb2:	f7f5 fbe7 	bl	8000584 <__aeabi_i2d>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4640      	mov	r0, r8
 800adbc:	4649      	mov	r1, r9
 800adbe:	f7f5 fa93 	bl	80002e8 <__aeabi_dsub>
 800adc2:	3630      	adds	r6, #48	; 0x30
 800adc4:	f805 6b01 	strb.w	r6, [r5], #1
 800adc8:	4652      	mov	r2, sl
 800adca:	465b      	mov	r3, fp
 800adcc:	4680      	mov	r8, r0
 800adce:	4689      	mov	r9, r1
 800add0:	f7f5 feb4 	bl	8000b3c <__aeabi_dcmplt>
 800add4:	2800      	cmp	r0, #0
 800add6:	d163      	bne.n	800aea0 <_dtoa_r+0x608>
 800add8:	4642      	mov	r2, r8
 800adda:	464b      	mov	r3, r9
 800addc:	4936      	ldr	r1, [pc, #216]	; (800aeb8 <_dtoa_r+0x620>)
 800adde:	2000      	movs	r0, #0
 800ade0:	f7f5 fa82 	bl	80002e8 <__aeabi_dsub>
 800ade4:	4652      	mov	r2, sl
 800ade6:	465b      	mov	r3, fp
 800ade8:	f7f5 fea8 	bl	8000b3c <__aeabi_dcmplt>
 800adec:	2800      	cmp	r0, #0
 800adee:	f040 80b5 	bne.w	800af5c <_dtoa_r+0x6c4>
 800adf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adf4:	429d      	cmp	r5, r3
 800adf6:	d081      	beq.n	800acfc <_dtoa_r+0x464>
 800adf8:	4b30      	ldr	r3, [pc, #192]	; (800aebc <_dtoa_r+0x624>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	4650      	mov	r0, sl
 800adfe:	4659      	mov	r1, fp
 800ae00:	f7f5 fc2a 	bl	8000658 <__aeabi_dmul>
 800ae04:	4b2d      	ldr	r3, [pc, #180]	; (800aebc <_dtoa_r+0x624>)
 800ae06:	4682      	mov	sl, r0
 800ae08:	468b      	mov	fp, r1
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f7f5 fc22 	bl	8000658 <__aeabi_dmul>
 800ae14:	4680      	mov	r8, r0
 800ae16:	4689      	mov	r9, r1
 800ae18:	e7c6      	b.n	800ada8 <_dtoa_r+0x510>
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	f7f5 fc1b 	bl	8000658 <__aeabi_dmul>
 800ae22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae24:	9d01      	ldr	r5, [sp, #4]
 800ae26:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae28:	4682      	mov	sl, r0
 800ae2a:	468b      	mov	fp, r1
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	4640      	mov	r0, r8
 800ae30:	f7f5 fec2 	bl	8000bb8 <__aeabi_d2iz>
 800ae34:	4606      	mov	r6, r0
 800ae36:	f7f5 fba5 	bl	8000584 <__aeabi_i2d>
 800ae3a:	3630      	adds	r6, #48	; 0x30
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 fa50 	bl	80002e8 <__aeabi_dsub>
 800ae48:	f805 6b01 	strb.w	r6, [r5], #1
 800ae4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae4e:	429d      	cmp	r5, r3
 800ae50:	4680      	mov	r8, r0
 800ae52:	4689      	mov	r9, r1
 800ae54:	f04f 0200 	mov.w	r2, #0
 800ae58:	d124      	bne.n	800aea4 <_dtoa_r+0x60c>
 800ae5a:	4b1b      	ldr	r3, [pc, #108]	; (800aec8 <_dtoa_r+0x630>)
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	4659      	mov	r1, fp
 800ae60:	f7f5 fa44 	bl	80002ec <__adddf3>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	4640      	mov	r0, r8
 800ae6a:	4649      	mov	r1, r9
 800ae6c:	f7f5 fe84 	bl	8000b78 <__aeabi_dcmpgt>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d173      	bne.n	800af5c <_dtoa_r+0x6c4>
 800ae74:	4652      	mov	r2, sl
 800ae76:	465b      	mov	r3, fp
 800ae78:	4913      	ldr	r1, [pc, #76]	; (800aec8 <_dtoa_r+0x630>)
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	f7f5 fa34 	bl	80002e8 <__aeabi_dsub>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4640      	mov	r0, r8
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7f5 fe58 	bl	8000b3c <__aeabi_dcmplt>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f43f af35 	beq.w	800acfc <_dtoa_r+0x464>
 800ae92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae94:	1e6b      	subs	r3, r5, #1
 800ae96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae9c:	2b30      	cmp	r3, #48	; 0x30
 800ae9e:	d0f8      	beq.n	800ae92 <_dtoa_r+0x5fa>
 800aea0:	9700      	str	r7, [sp, #0]
 800aea2:	e049      	b.n	800af38 <_dtoa_r+0x6a0>
 800aea4:	4b05      	ldr	r3, [pc, #20]	; (800aebc <_dtoa_r+0x624>)
 800aea6:	f7f5 fbd7 	bl	8000658 <__aeabi_dmul>
 800aeaa:	4680      	mov	r8, r0
 800aeac:	4689      	mov	r9, r1
 800aeae:	e7bd      	b.n	800ae2c <_dtoa_r+0x594>
 800aeb0:	0800da38 	.word	0x0800da38
 800aeb4:	0800da10 	.word	0x0800da10
 800aeb8:	3ff00000 	.word	0x3ff00000
 800aebc:	40240000 	.word	0x40240000
 800aec0:	401c0000 	.word	0x401c0000
 800aec4:	40140000 	.word	0x40140000
 800aec8:	3fe00000 	.word	0x3fe00000
 800aecc:	9d01      	ldr	r5, [sp, #4]
 800aece:	4656      	mov	r6, sl
 800aed0:	465f      	mov	r7, fp
 800aed2:	4642      	mov	r2, r8
 800aed4:	464b      	mov	r3, r9
 800aed6:	4630      	mov	r0, r6
 800aed8:	4639      	mov	r1, r7
 800aeda:	f7f5 fce7 	bl	80008ac <__aeabi_ddiv>
 800aede:	f7f5 fe6b 	bl	8000bb8 <__aeabi_d2iz>
 800aee2:	4682      	mov	sl, r0
 800aee4:	f7f5 fb4e 	bl	8000584 <__aeabi_i2d>
 800aee8:	4642      	mov	r2, r8
 800aeea:	464b      	mov	r3, r9
 800aeec:	f7f5 fbb4 	bl	8000658 <__aeabi_dmul>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4630      	mov	r0, r6
 800aef6:	4639      	mov	r1, r7
 800aef8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aefc:	f7f5 f9f4 	bl	80002e8 <__aeabi_dsub>
 800af00:	f805 6b01 	strb.w	r6, [r5], #1
 800af04:	9e01      	ldr	r6, [sp, #4]
 800af06:	9f03      	ldr	r7, [sp, #12]
 800af08:	1bae      	subs	r6, r5, r6
 800af0a:	42b7      	cmp	r7, r6
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	d135      	bne.n	800af7e <_dtoa_r+0x6e6>
 800af12:	f7f5 f9eb 	bl	80002ec <__adddf3>
 800af16:	4642      	mov	r2, r8
 800af18:	464b      	mov	r3, r9
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	f7f5 fe2b 	bl	8000b78 <__aeabi_dcmpgt>
 800af22:	b9d0      	cbnz	r0, 800af5a <_dtoa_r+0x6c2>
 800af24:	4642      	mov	r2, r8
 800af26:	464b      	mov	r3, r9
 800af28:	4630      	mov	r0, r6
 800af2a:	4639      	mov	r1, r7
 800af2c:	f7f5 fdfc 	bl	8000b28 <__aeabi_dcmpeq>
 800af30:	b110      	cbz	r0, 800af38 <_dtoa_r+0x6a0>
 800af32:	f01a 0f01 	tst.w	sl, #1
 800af36:	d110      	bne.n	800af5a <_dtoa_r+0x6c2>
 800af38:	4620      	mov	r0, r4
 800af3a:	ee18 1a10 	vmov	r1, s16
 800af3e:	f000 fe8b 	bl	800bc58 <_Bfree>
 800af42:	2300      	movs	r3, #0
 800af44:	9800      	ldr	r0, [sp, #0]
 800af46:	702b      	strb	r3, [r5, #0]
 800af48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af4a:	3001      	adds	r0, #1
 800af4c:	6018      	str	r0, [r3, #0]
 800af4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af50:	2b00      	cmp	r3, #0
 800af52:	f43f acf1 	beq.w	800a938 <_dtoa_r+0xa0>
 800af56:	601d      	str	r5, [r3, #0]
 800af58:	e4ee      	b.n	800a938 <_dtoa_r+0xa0>
 800af5a:	9f00      	ldr	r7, [sp, #0]
 800af5c:	462b      	mov	r3, r5
 800af5e:	461d      	mov	r5, r3
 800af60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af64:	2a39      	cmp	r2, #57	; 0x39
 800af66:	d106      	bne.n	800af76 <_dtoa_r+0x6de>
 800af68:	9a01      	ldr	r2, [sp, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d1f7      	bne.n	800af5e <_dtoa_r+0x6c6>
 800af6e:	9901      	ldr	r1, [sp, #4]
 800af70:	2230      	movs	r2, #48	; 0x30
 800af72:	3701      	adds	r7, #1
 800af74:	700a      	strb	r2, [r1, #0]
 800af76:	781a      	ldrb	r2, [r3, #0]
 800af78:	3201      	adds	r2, #1
 800af7a:	701a      	strb	r2, [r3, #0]
 800af7c:	e790      	b.n	800aea0 <_dtoa_r+0x608>
 800af7e:	4ba6      	ldr	r3, [pc, #664]	; (800b218 <_dtoa_r+0x980>)
 800af80:	2200      	movs	r2, #0
 800af82:	f7f5 fb69 	bl	8000658 <__aeabi_dmul>
 800af86:	2200      	movs	r2, #0
 800af88:	2300      	movs	r3, #0
 800af8a:	4606      	mov	r6, r0
 800af8c:	460f      	mov	r7, r1
 800af8e:	f7f5 fdcb 	bl	8000b28 <__aeabi_dcmpeq>
 800af92:	2800      	cmp	r0, #0
 800af94:	d09d      	beq.n	800aed2 <_dtoa_r+0x63a>
 800af96:	e7cf      	b.n	800af38 <_dtoa_r+0x6a0>
 800af98:	9a08      	ldr	r2, [sp, #32]
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	f000 80d7 	beq.w	800b14e <_dtoa_r+0x8b6>
 800afa0:	9a06      	ldr	r2, [sp, #24]
 800afa2:	2a01      	cmp	r2, #1
 800afa4:	f300 80ba 	bgt.w	800b11c <_dtoa_r+0x884>
 800afa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afaa:	2a00      	cmp	r2, #0
 800afac:	f000 80b2 	beq.w	800b114 <_dtoa_r+0x87c>
 800afb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afb4:	9e07      	ldr	r6, [sp, #28]
 800afb6:	9d04      	ldr	r5, [sp, #16]
 800afb8:	9a04      	ldr	r2, [sp, #16]
 800afba:	441a      	add	r2, r3
 800afbc:	9204      	str	r2, [sp, #16]
 800afbe:	9a05      	ldr	r2, [sp, #20]
 800afc0:	2101      	movs	r1, #1
 800afc2:	441a      	add	r2, r3
 800afc4:	4620      	mov	r0, r4
 800afc6:	9205      	str	r2, [sp, #20]
 800afc8:	f000 ff48 	bl	800be5c <__i2b>
 800afcc:	4607      	mov	r7, r0
 800afce:	2d00      	cmp	r5, #0
 800afd0:	dd0c      	ble.n	800afec <_dtoa_r+0x754>
 800afd2:	9b05      	ldr	r3, [sp, #20]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dd09      	ble.n	800afec <_dtoa_r+0x754>
 800afd8:	42ab      	cmp	r3, r5
 800afda:	9a04      	ldr	r2, [sp, #16]
 800afdc:	bfa8      	it	ge
 800afde:	462b      	movge	r3, r5
 800afe0:	1ad2      	subs	r2, r2, r3
 800afe2:	9204      	str	r2, [sp, #16]
 800afe4:	9a05      	ldr	r2, [sp, #20]
 800afe6:	1aed      	subs	r5, r5, r3
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	9305      	str	r3, [sp, #20]
 800afec:	9b07      	ldr	r3, [sp, #28]
 800afee:	b31b      	cbz	r3, 800b038 <_dtoa_r+0x7a0>
 800aff0:	9b08      	ldr	r3, [sp, #32]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 80af 	beq.w	800b156 <_dtoa_r+0x8be>
 800aff8:	2e00      	cmp	r6, #0
 800affa:	dd13      	ble.n	800b024 <_dtoa_r+0x78c>
 800affc:	4639      	mov	r1, r7
 800affe:	4632      	mov	r2, r6
 800b000:	4620      	mov	r0, r4
 800b002:	f000 ffeb 	bl	800bfdc <__pow5mult>
 800b006:	ee18 2a10 	vmov	r2, s16
 800b00a:	4601      	mov	r1, r0
 800b00c:	4607      	mov	r7, r0
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 ff3a 	bl	800be88 <__multiply>
 800b014:	ee18 1a10 	vmov	r1, s16
 800b018:	4680      	mov	r8, r0
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 fe1c 	bl	800bc58 <_Bfree>
 800b020:	ee08 8a10 	vmov	s16, r8
 800b024:	9b07      	ldr	r3, [sp, #28]
 800b026:	1b9a      	subs	r2, r3, r6
 800b028:	d006      	beq.n	800b038 <_dtoa_r+0x7a0>
 800b02a:	ee18 1a10 	vmov	r1, s16
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 ffd4 	bl	800bfdc <__pow5mult>
 800b034:	ee08 0a10 	vmov	s16, r0
 800b038:	2101      	movs	r1, #1
 800b03a:	4620      	mov	r0, r4
 800b03c:	f000 ff0e 	bl	800be5c <__i2b>
 800b040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b042:	2b00      	cmp	r3, #0
 800b044:	4606      	mov	r6, r0
 800b046:	f340 8088 	ble.w	800b15a <_dtoa_r+0x8c2>
 800b04a:	461a      	mov	r2, r3
 800b04c:	4601      	mov	r1, r0
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 ffc4 	bl	800bfdc <__pow5mult>
 800b054:	9b06      	ldr	r3, [sp, #24]
 800b056:	2b01      	cmp	r3, #1
 800b058:	4606      	mov	r6, r0
 800b05a:	f340 8081 	ble.w	800b160 <_dtoa_r+0x8c8>
 800b05e:	f04f 0800 	mov.w	r8, #0
 800b062:	6933      	ldr	r3, [r6, #16]
 800b064:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b068:	6918      	ldr	r0, [r3, #16]
 800b06a:	f000 fea7 	bl	800bdbc <__hi0bits>
 800b06e:	f1c0 0020 	rsb	r0, r0, #32
 800b072:	9b05      	ldr	r3, [sp, #20]
 800b074:	4418      	add	r0, r3
 800b076:	f010 001f 	ands.w	r0, r0, #31
 800b07a:	f000 8092 	beq.w	800b1a2 <_dtoa_r+0x90a>
 800b07e:	f1c0 0320 	rsb	r3, r0, #32
 800b082:	2b04      	cmp	r3, #4
 800b084:	f340 808a 	ble.w	800b19c <_dtoa_r+0x904>
 800b088:	f1c0 001c 	rsb	r0, r0, #28
 800b08c:	9b04      	ldr	r3, [sp, #16]
 800b08e:	4403      	add	r3, r0
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	9b05      	ldr	r3, [sp, #20]
 800b094:	4403      	add	r3, r0
 800b096:	4405      	add	r5, r0
 800b098:	9305      	str	r3, [sp, #20]
 800b09a:	9b04      	ldr	r3, [sp, #16]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd07      	ble.n	800b0b0 <_dtoa_r+0x818>
 800b0a0:	ee18 1a10 	vmov	r1, s16
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 fff2 	bl	800c090 <__lshift>
 800b0ac:	ee08 0a10 	vmov	s16, r0
 800b0b0:	9b05      	ldr	r3, [sp, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dd05      	ble.n	800b0c2 <_dtoa_r+0x82a>
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 ffe8 	bl	800c090 <__lshift>
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d06e      	beq.n	800b1a6 <_dtoa_r+0x90e>
 800b0c8:	ee18 0a10 	vmov	r0, s16
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	f001 f84f 	bl	800c170 <__mcmp>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	da67      	bge.n	800b1a6 <_dtoa_r+0x90e>
 800b0d6:	9b00      	ldr	r3, [sp, #0]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	ee18 1a10 	vmov	r1, s16
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	220a      	movs	r2, #10
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f000 fdd9 	bl	800bc9c <__multadd>
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	ee08 0a10 	vmov	s16, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 81b1 	beq.w	800b458 <_dtoa_r+0xbc0>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	4639      	mov	r1, r7
 800b0fa:	220a      	movs	r2, #10
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fdcd 	bl	800bc9c <__multadd>
 800b102:	9b02      	ldr	r3, [sp, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	4607      	mov	r7, r0
 800b108:	f300 808e 	bgt.w	800b228 <_dtoa_r+0x990>
 800b10c:	9b06      	ldr	r3, [sp, #24]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	dc51      	bgt.n	800b1b6 <_dtoa_r+0x91e>
 800b112:	e089      	b.n	800b228 <_dtoa_r+0x990>
 800b114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b11a:	e74b      	b.n	800afb4 <_dtoa_r+0x71c>
 800b11c:	9b03      	ldr	r3, [sp, #12]
 800b11e:	1e5e      	subs	r6, r3, #1
 800b120:	9b07      	ldr	r3, [sp, #28]
 800b122:	42b3      	cmp	r3, r6
 800b124:	bfbf      	itttt	lt
 800b126:	9b07      	ldrlt	r3, [sp, #28]
 800b128:	9607      	strlt	r6, [sp, #28]
 800b12a:	1af2      	sublt	r2, r6, r3
 800b12c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b12e:	bfb6      	itet	lt
 800b130:	189b      	addlt	r3, r3, r2
 800b132:	1b9e      	subge	r6, r3, r6
 800b134:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b136:	9b03      	ldr	r3, [sp, #12]
 800b138:	bfb8      	it	lt
 800b13a:	2600      	movlt	r6, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bfb7      	itett	lt
 800b140:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b144:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b148:	1a9d      	sublt	r5, r3, r2
 800b14a:	2300      	movlt	r3, #0
 800b14c:	e734      	b.n	800afb8 <_dtoa_r+0x720>
 800b14e:	9e07      	ldr	r6, [sp, #28]
 800b150:	9d04      	ldr	r5, [sp, #16]
 800b152:	9f08      	ldr	r7, [sp, #32]
 800b154:	e73b      	b.n	800afce <_dtoa_r+0x736>
 800b156:	9a07      	ldr	r2, [sp, #28]
 800b158:	e767      	b.n	800b02a <_dtoa_r+0x792>
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	dc18      	bgt.n	800b192 <_dtoa_r+0x8fa>
 800b160:	f1ba 0f00 	cmp.w	sl, #0
 800b164:	d115      	bne.n	800b192 <_dtoa_r+0x8fa>
 800b166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b16a:	b993      	cbnz	r3, 800b192 <_dtoa_r+0x8fa>
 800b16c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b170:	0d1b      	lsrs	r3, r3, #20
 800b172:	051b      	lsls	r3, r3, #20
 800b174:	b183      	cbz	r3, 800b198 <_dtoa_r+0x900>
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	3301      	adds	r3, #1
 800b17a:	9304      	str	r3, [sp, #16]
 800b17c:	9b05      	ldr	r3, [sp, #20]
 800b17e:	3301      	adds	r3, #1
 800b180:	9305      	str	r3, [sp, #20]
 800b182:	f04f 0801 	mov.w	r8, #1
 800b186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f47f af6a 	bne.w	800b062 <_dtoa_r+0x7ca>
 800b18e:	2001      	movs	r0, #1
 800b190:	e76f      	b.n	800b072 <_dtoa_r+0x7da>
 800b192:	f04f 0800 	mov.w	r8, #0
 800b196:	e7f6      	b.n	800b186 <_dtoa_r+0x8ee>
 800b198:	4698      	mov	r8, r3
 800b19a:	e7f4      	b.n	800b186 <_dtoa_r+0x8ee>
 800b19c:	f43f af7d 	beq.w	800b09a <_dtoa_r+0x802>
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	301c      	adds	r0, #28
 800b1a4:	e772      	b.n	800b08c <_dtoa_r+0x7f4>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	dc37      	bgt.n	800b21c <_dtoa_r+0x984>
 800b1ac:	9b06      	ldr	r3, [sp, #24]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	dd34      	ble.n	800b21c <_dtoa_r+0x984>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	9302      	str	r3, [sp, #8]
 800b1b6:	9b02      	ldr	r3, [sp, #8]
 800b1b8:	b96b      	cbnz	r3, 800b1d6 <_dtoa_r+0x93e>
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	2205      	movs	r2, #5
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 fd6c 	bl	800bc9c <__multadd>
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	ee18 0a10 	vmov	r0, s16
 800b1cc:	f000 ffd0 	bl	800c170 <__mcmp>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	f73f adbb 	bgt.w	800ad4c <_dtoa_r+0x4b4>
 800b1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d8:	9d01      	ldr	r5, [sp, #4]
 800b1da:	43db      	mvns	r3, r3
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f000 fd37 	bl	800bc58 <_Bfree>
 800b1ea:	2f00      	cmp	r7, #0
 800b1ec:	f43f aea4 	beq.w	800af38 <_dtoa_r+0x6a0>
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	d005      	beq.n	800b202 <_dtoa_r+0x96a>
 800b1f6:	45b8      	cmp	r8, r7
 800b1f8:	d003      	beq.n	800b202 <_dtoa_r+0x96a>
 800b1fa:	4641      	mov	r1, r8
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 fd2b 	bl	800bc58 <_Bfree>
 800b202:	4639      	mov	r1, r7
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fd27 	bl	800bc58 <_Bfree>
 800b20a:	e695      	b.n	800af38 <_dtoa_r+0x6a0>
 800b20c:	2600      	movs	r6, #0
 800b20e:	4637      	mov	r7, r6
 800b210:	e7e1      	b.n	800b1d6 <_dtoa_r+0x93e>
 800b212:	9700      	str	r7, [sp, #0]
 800b214:	4637      	mov	r7, r6
 800b216:	e599      	b.n	800ad4c <_dtoa_r+0x4b4>
 800b218:	40240000 	.word	0x40240000
 800b21c:	9b08      	ldr	r3, [sp, #32]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 80ca 	beq.w	800b3b8 <_dtoa_r+0xb20>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	9302      	str	r3, [sp, #8]
 800b228:	2d00      	cmp	r5, #0
 800b22a:	dd05      	ble.n	800b238 <_dtoa_r+0x9a0>
 800b22c:	4639      	mov	r1, r7
 800b22e:	462a      	mov	r2, r5
 800b230:	4620      	mov	r0, r4
 800b232:	f000 ff2d 	bl	800c090 <__lshift>
 800b236:	4607      	mov	r7, r0
 800b238:	f1b8 0f00 	cmp.w	r8, #0
 800b23c:	d05b      	beq.n	800b2f6 <_dtoa_r+0xa5e>
 800b23e:	6879      	ldr	r1, [r7, #4]
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fcc9 	bl	800bbd8 <_Balloc>
 800b246:	4605      	mov	r5, r0
 800b248:	b928      	cbnz	r0, 800b256 <_dtoa_r+0x9be>
 800b24a:	4b87      	ldr	r3, [pc, #540]	; (800b468 <_dtoa_r+0xbd0>)
 800b24c:	4602      	mov	r2, r0
 800b24e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b252:	f7ff bb3b 	b.w	800a8cc <_dtoa_r+0x34>
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	3202      	adds	r2, #2
 800b25a:	0092      	lsls	r2, r2, #2
 800b25c:	f107 010c 	add.w	r1, r7, #12
 800b260:	300c      	adds	r0, #12
 800b262:	f000 fc9f 	bl	800bba4 <memcpy>
 800b266:	2201      	movs	r2, #1
 800b268:	4629      	mov	r1, r5
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 ff10 	bl	800c090 <__lshift>
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	f103 0901 	add.w	r9, r3, #1
 800b276:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b27a:	4413      	add	r3, r2
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	f00a 0301 	and.w	r3, sl, #1
 800b282:	46b8      	mov	r8, r7
 800b284:	9304      	str	r3, [sp, #16]
 800b286:	4607      	mov	r7, r0
 800b288:	4631      	mov	r1, r6
 800b28a:	ee18 0a10 	vmov	r0, s16
 800b28e:	f7ff fa77 	bl	800a780 <quorem>
 800b292:	4641      	mov	r1, r8
 800b294:	9002      	str	r0, [sp, #8]
 800b296:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b29a:	ee18 0a10 	vmov	r0, s16
 800b29e:	f000 ff67 	bl	800c170 <__mcmp>
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	9003      	str	r0, [sp, #12]
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 ff7d 	bl	800c1a8 <__mdiff>
 800b2ae:	68c2      	ldr	r2, [r0, #12]
 800b2b0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b2b4:	4605      	mov	r5, r0
 800b2b6:	bb02      	cbnz	r2, 800b2fa <_dtoa_r+0xa62>
 800b2b8:	4601      	mov	r1, r0
 800b2ba:	ee18 0a10 	vmov	r0, s16
 800b2be:	f000 ff57 	bl	800c170 <__mcmp>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	9207      	str	r2, [sp, #28]
 800b2ca:	f000 fcc5 	bl	800bc58 <_Bfree>
 800b2ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b2d2:	ea43 0102 	orr.w	r1, r3, r2
 800b2d6:	9b04      	ldr	r3, [sp, #16]
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	464d      	mov	r5, r9
 800b2dc:	d10f      	bne.n	800b2fe <_dtoa_r+0xa66>
 800b2de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2e2:	d02a      	beq.n	800b33a <_dtoa_r+0xaa2>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	dd02      	ble.n	800b2f0 <_dtoa_r+0xa58>
 800b2ea:	9b02      	ldr	r3, [sp, #8]
 800b2ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b2f0:	f88b a000 	strb.w	sl, [fp]
 800b2f4:	e775      	b.n	800b1e2 <_dtoa_r+0x94a>
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	e7ba      	b.n	800b270 <_dtoa_r+0x9d8>
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	e7e2      	b.n	800b2c4 <_dtoa_r+0xa2c>
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	db04      	blt.n	800b30e <_dtoa_r+0xa76>
 800b304:	9906      	ldr	r1, [sp, #24]
 800b306:	430b      	orrs	r3, r1
 800b308:	9904      	ldr	r1, [sp, #16]
 800b30a:	430b      	orrs	r3, r1
 800b30c:	d122      	bne.n	800b354 <_dtoa_r+0xabc>
 800b30e:	2a00      	cmp	r2, #0
 800b310:	ddee      	ble.n	800b2f0 <_dtoa_r+0xa58>
 800b312:	ee18 1a10 	vmov	r1, s16
 800b316:	2201      	movs	r2, #1
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 feb9 	bl	800c090 <__lshift>
 800b31e:	4631      	mov	r1, r6
 800b320:	ee08 0a10 	vmov	s16, r0
 800b324:	f000 ff24 	bl	800c170 <__mcmp>
 800b328:	2800      	cmp	r0, #0
 800b32a:	dc03      	bgt.n	800b334 <_dtoa_r+0xa9c>
 800b32c:	d1e0      	bne.n	800b2f0 <_dtoa_r+0xa58>
 800b32e:	f01a 0f01 	tst.w	sl, #1
 800b332:	d0dd      	beq.n	800b2f0 <_dtoa_r+0xa58>
 800b334:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b338:	d1d7      	bne.n	800b2ea <_dtoa_r+0xa52>
 800b33a:	2339      	movs	r3, #57	; 0x39
 800b33c:	f88b 3000 	strb.w	r3, [fp]
 800b340:	462b      	mov	r3, r5
 800b342:	461d      	mov	r5, r3
 800b344:	3b01      	subs	r3, #1
 800b346:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b34a:	2a39      	cmp	r2, #57	; 0x39
 800b34c:	d071      	beq.n	800b432 <_dtoa_r+0xb9a>
 800b34e:	3201      	adds	r2, #1
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e746      	b.n	800b1e2 <_dtoa_r+0x94a>
 800b354:	2a00      	cmp	r2, #0
 800b356:	dd07      	ble.n	800b368 <_dtoa_r+0xad0>
 800b358:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b35c:	d0ed      	beq.n	800b33a <_dtoa_r+0xaa2>
 800b35e:	f10a 0301 	add.w	r3, sl, #1
 800b362:	f88b 3000 	strb.w	r3, [fp]
 800b366:	e73c      	b.n	800b1e2 <_dtoa_r+0x94a>
 800b368:	9b05      	ldr	r3, [sp, #20]
 800b36a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b36e:	4599      	cmp	r9, r3
 800b370:	d047      	beq.n	800b402 <_dtoa_r+0xb6a>
 800b372:	ee18 1a10 	vmov	r1, s16
 800b376:	2300      	movs	r3, #0
 800b378:	220a      	movs	r2, #10
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 fc8e 	bl	800bc9c <__multadd>
 800b380:	45b8      	cmp	r8, r7
 800b382:	ee08 0a10 	vmov	s16, r0
 800b386:	f04f 0300 	mov.w	r3, #0
 800b38a:	f04f 020a 	mov.w	r2, #10
 800b38e:	4641      	mov	r1, r8
 800b390:	4620      	mov	r0, r4
 800b392:	d106      	bne.n	800b3a2 <_dtoa_r+0xb0a>
 800b394:	f000 fc82 	bl	800bc9c <__multadd>
 800b398:	4680      	mov	r8, r0
 800b39a:	4607      	mov	r7, r0
 800b39c:	f109 0901 	add.w	r9, r9, #1
 800b3a0:	e772      	b.n	800b288 <_dtoa_r+0x9f0>
 800b3a2:	f000 fc7b 	bl	800bc9c <__multadd>
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	4680      	mov	r8, r0
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	220a      	movs	r2, #10
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f000 fc74 	bl	800bc9c <__multadd>
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	e7f1      	b.n	800b39c <_dtoa_r+0xb04>
 800b3b8:	9b03      	ldr	r3, [sp, #12]
 800b3ba:	9302      	str	r3, [sp, #8]
 800b3bc:	9d01      	ldr	r5, [sp, #4]
 800b3be:	ee18 0a10 	vmov	r0, s16
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	f7ff f9dc 	bl	800a780 <quorem>
 800b3c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	f805 ab01 	strb.w	sl, [r5], #1
 800b3d2:	1aea      	subs	r2, r5, r3
 800b3d4:	9b02      	ldr	r3, [sp, #8]
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	dd09      	ble.n	800b3ee <_dtoa_r+0xb56>
 800b3da:	ee18 1a10 	vmov	r1, s16
 800b3de:	2300      	movs	r3, #0
 800b3e0:	220a      	movs	r2, #10
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f000 fc5a 	bl	800bc9c <__multadd>
 800b3e8:	ee08 0a10 	vmov	s16, r0
 800b3ec:	e7e7      	b.n	800b3be <_dtoa_r+0xb26>
 800b3ee:	9b02      	ldr	r3, [sp, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bfc8      	it	gt
 800b3f4:	461d      	movgt	r5, r3
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	bfd8      	it	le
 800b3fa:	2501      	movle	r5, #1
 800b3fc:	441d      	add	r5, r3
 800b3fe:	f04f 0800 	mov.w	r8, #0
 800b402:	ee18 1a10 	vmov	r1, s16
 800b406:	2201      	movs	r2, #1
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fe41 	bl	800c090 <__lshift>
 800b40e:	4631      	mov	r1, r6
 800b410:	ee08 0a10 	vmov	s16, r0
 800b414:	f000 feac 	bl	800c170 <__mcmp>
 800b418:	2800      	cmp	r0, #0
 800b41a:	dc91      	bgt.n	800b340 <_dtoa_r+0xaa8>
 800b41c:	d102      	bne.n	800b424 <_dtoa_r+0xb8c>
 800b41e:	f01a 0f01 	tst.w	sl, #1
 800b422:	d18d      	bne.n	800b340 <_dtoa_r+0xaa8>
 800b424:	462b      	mov	r3, r5
 800b426:	461d      	mov	r5, r3
 800b428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b42c:	2a30      	cmp	r2, #48	; 0x30
 800b42e:	d0fa      	beq.n	800b426 <_dtoa_r+0xb8e>
 800b430:	e6d7      	b.n	800b1e2 <_dtoa_r+0x94a>
 800b432:	9a01      	ldr	r2, [sp, #4]
 800b434:	429a      	cmp	r2, r3
 800b436:	d184      	bne.n	800b342 <_dtoa_r+0xaaa>
 800b438:	9b00      	ldr	r3, [sp, #0]
 800b43a:	3301      	adds	r3, #1
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	2331      	movs	r3, #49	; 0x31
 800b440:	7013      	strb	r3, [r2, #0]
 800b442:	e6ce      	b.n	800b1e2 <_dtoa_r+0x94a>
 800b444:	4b09      	ldr	r3, [pc, #36]	; (800b46c <_dtoa_r+0xbd4>)
 800b446:	f7ff ba95 	b.w	800a974 <_dtoa_r+0xdc>
 800b44a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f47f aa6e 	bne.w	800a92e <_dtoa_r+0x96>
 800b452:	4b07      	ldr	r3, [pc, #28]	; (800b470 <_dtoa_r+0xbd8>)
 800b454:	f7ff ba8e 	b.w	800a974 <_dtoa_r+0xdc>
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	dcae      	bgt.n	800b3bc <_dtoa_r+0xb24>
 800b45e:	9b06      	ldr	r3, [sp, #24]
 800b460:	2b02      	cmp	r3, #2
 800b462:	f73f aea8 	bgt.w	800b1b6 <_dtoa_r+0x91e>
 800b466:	e7a9      	b.n	800b3bc <_dtoa_r+0xb24>
 800b468:	0800d928 	.word	0x0800d928
 800b46c:	0800d790 	.word	0x0800d790
 800b470:	0800d8c0 	.word	0x0800d8c0

0800b474 <fiprintf>:
 800b474:	b40e      	push	{r1, r2, r3}
 800b476:	b503      	push	{r0, r1, lr}
 800b478:	4601      	mov	r1, r0
 800b47a:	ab03      	add	r3, sp, #12
 800b47c:	4805      	ldr	r0, [pc, #20]	; (800b494 <fiprintf+0x20>)
 800b47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b482:	6800      	ldr	r0, [r0, #0]
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	f001 fa03 	bl	800c890 <_vfiprintf_r>
 800b48a:	b002      	add	sp, #8
 800b48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b490:	b003      	add	sp, #12
 800b492:	4770      	bx	lr
 800b494:	2000000c 	.word	0x2000000c

0800b498 <rshift>:
 800b498:	6903      	ldr	r3, [r0, #16]
 800b49a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b49e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4a6:	f100 0414 	add.w	r4, r0, #20
 800b4aa:	dd45      	ble.n	800b538 <rshift+0xa0>
 800b4ac:	f011 011f 	ands.w	r1, r1, #31
 800b4b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4b8:	d10c      	bne.n	800b4d4 <rshift+0x3c>
 800b4ba:	f100 0710 	add.w	r7, r0, #16
 800b4be:	4629      	mov	r1, r5
 800b4c0:	42b1      	cmp	r1, r6
 800b4c2:	d334      	bcc.n	800b52e <rshift+0x96>
 800b4c4:	1a9b      	subs	r3, r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	1eea      	subs	r2, r5, #3
 800b4ca:	4296      	cmp	r6, r2
 800b4cc:	bf38      	it	cc
 800b4ce:	2300      	movcc	r3, #0
 800b4d0:	4423      	add	r3, r4
 800b4d2:	e015      	b.n	800b500 <rshift+0x68>
 800b4d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b4d8:	f1c1 0820 	rsb	r8, r1, #32
 800b4dc:	40cf      	lsrs	r7, r1
 800b4de:	f105 0e04 	add.w	lr, r5, #4
 800b4e2:	46a1      	mov	r9, r4
 800b4e4:	4576      	cmp	r6, lr
 800b4e6:	46f4      	mov	ip, lr
 800b4e8:	d815      	bhi.n	800b516 <rshift+0x7e>
 800b4ea:	1a9a      	subs	r2, r3, r2
 800b4ec:	0092      	lsls	r2, r2, #2
 800b4ee:	3a04      	subs	r2, #4
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	42ae      	cmp	r6, r5
 800b4f4:	bf38      	it	cc
 800b4f6:	2200      	movcc	r2, #0
 800b4f8:	18a3      	adds	r3, r4, r2
 800b4fa:	50a7      	str	r7, [r4, r2]
 800b4fc:	b107      	cbz	r7, 800b500 <rshift+0x68>
 800b4fe:	3304      	adds	r3, #4
 800b500:	1b1a      	subs	r2, r3, r4
 800b502:	42a3      	cmp	r3, r4
 800b504:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b508:	bf08      	it	eq
 800b50a:	2300      	moveq	r3, #0
 800b50c:	6102      	str	r2, [r0, #16]
 800b50e:	bf08      	it	eq
 800b510:	6143      	streq	r3, [r0, #20]
 800b512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b516:	f8dc c000 	ldr.w	ip, [ip]
 800b51a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b51e:	ea4c 0707 	orr.w	r7, ip, r7
 800b522:	f849 7b04 	str.w	r7, [r9], #4
 800b526:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b52a:	40cf      	lsrs	r7, r1
 800b52c:	e7da      	b.n	800b4e4 <rshift+0x4c>
 800b52e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b532:	f847 cf04 	str.w	ip, [r7, #4]!
 800b536:	e7c3      	b.n	800b4c0 <rshift+0x28>
 800b538:	4623      	mov	r3, r4
 800b53a:	e7e1      	b.n	800b500 <rshift+0x68>

0800b53c <__hexdig_fun>:
 800b53c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b540:	2b09      	cmp	r3, #9
 800b542:	d802      	bhi.n	800b54a <__hexdig_fun+0xe>
 800b544:	3820      	subs	r0, #32
 800b546:	b2c0      	uxtb	r0, r0
 800b548:	4770      	bx	lr
 800b54a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d801      	bhi.n	800b556 <__hexdig_fun+0x1a>
 800b552:	3847      	subs	r0, #71	; 0x47
 800b554:	e7f7      	b.n	800b546 <__hexdig_fun+0xa>
 800b556:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b55a:	2b05      	cmp	r3, #5
 800b55c:	d801      	bhi.n	800b562 <__hexdig_fun+0x26>
 800b55e:	3827      	subs	r0, #39	; 0x27
 800b560:	e7f1      	b.n	800b546 <__hexdig_fun+0xa>
 800b562:	2000      	movs	r0, #0
 800b564:	4770      	bx	lr
	...

0800b568 <__gethex>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	ed2d 8b02 	vpush	{d8}
 800b570:	b089      	sub	sp, #36	; 0x24
 800b572:	ee08 0a10 	vmov	s16, r0
 800b576:	9304      	str	r3, [sp, #16]
 800b578:	4bb4      	ldr	r3, [pc, #720]	; (800b84c <__gethex+0x2e4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	4618      	mov	r0, r3
 800b580:	468b      	mov	fp, r1
 800b582:	4690      	mov	r8, r2
 800b584:	f7f4 fe4e 	bl	8000224 <strlen>
 800b588:	9b01      	ldr	r3, [sp, #4]
 800b58a:	f8db 2000 	ldr.w	r2, [fp]
 800b58e:	4403      	add	r3, r0
 800b590:	4682      	mov	sl, r0
 800b592:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b596:	9305      	str	r3, [sp, #20]
 800b598:	1c93      	adds	r3, r2, #2
 800b59a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b59e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b5a2:	32fe      	adds	r2, #254	; 0xfe
 800b5a4:	18d1      	adds	r1, r2, r3
 800b5a6:	461f      	mov	r7, r3
 800b5a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b5ac:	9100      	str	r1, [sp, #0]
 800b5ae:	2830      	cmp	r0, #48	; 0x30
 800b5b0:	d0f8      	beq.n	800b5a4 <__gethex+0x3c>
 800b5b2:	f7ff ffc3 	bl	800b53c <__hexdig_fun>
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d13a      	bne.n	800b632 <__gethex+0xca>
 800b5bc:	9901      	ldr	r1, [sp, #4]
 800b5be:	4652      	mov	r2, sl
 800b5c0:	4638      	mov	r0, r7
 800b5c2:	f001 fa9d 	bl	800cb00 <strncmp>
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d168      	bne.n	800b69e <__gethex+0x136>
 800b5cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b5d0:	eb07 060a 	add.w	r6, r7, sl
 800b5d4:	f7ff ffb2 	bl	800b53c <__hexdig_fun>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d062      	beq.n	800b6a2 <__gethex+0x13a>
 800b5dc:	4633      	mov	r3, r6
 800b5de:	7818      	ldrb	r0, [r3, #0]
 800b5e0:	2830      	cmp	r0, #48	; 0x30
 800b5e2:	461f      	mov	r7, r3
 800b5e4:	f103 0301 	add.w	r3, r3, #1
 800b5e8:	d0f9      	beq.n	800b5de <__gethex+0x76>
 800b5ea:	f7ff ffa7 	bl	800b53c <__hexdig_fun>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	fab0 f480 	clz	r4, r0
 800b5f4:	0964      	lsrs	r4, r4, #5
 800b5f6:	4635      	mov	r5, r6
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	463a      	mov	r2, r7
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	3201      	adds	r2, #1
 800b600:	7830      	ldrb	r0, [r6, #0]
 800b602:	f7ff ff9b 	bl	800b53c <__hexdig_fun>
 800b606:	2800      	cmp	r0, #0
 800b608:	d1f8      	bne.n	800b5fc <__gethex+0x94>
 800b60a:	9901      	ldr	r1, [sp, #4]
 800b60c:	4652      	mov	r2, sl
 800b60e:	4630      	mov	r0, r6
 800b610:	f001 fa76 	bl	800cb00 <strncmp>
 800b614:	b980      	cbnz	r0, 800b638 <__gethex+0xd0>
 800b616:	b94d      	cbnz	r5, 800b62c <__gethex+0xc4>
 800b618:	eb06 050a 	add.w	r5, r6, sl
 800b61c:	462a      	mov	r2, r5
 800b61e:	4616      	mov	r6, r2
 800b620:	3201      	adds	r2, #1
 800b622:	7830      	ldrb	r0, [r6, #0]
 800b624:	f7ff ff8a 	bl	800b53c <__hexdig_fun>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d1f8      	bne.n	800b61e <__gethex+0xb6>
 800b62c:	1bad      	subs	r5, r5, r6
 800b62e:	00ad      	lsls	r5, r5, #2
 800b630:	e004      	b.n	800b63c <__gethex+0xd4>
 800b632:	2400      	movs	r4, #0
 800b634:	4625      	mov	r5, r4
 800b636:	e7e0      	b.n	800b5fa <__gethex+0x92>
 800b638:	2d00      	cmp	r5, #0
 800b63a:	d1f7      	bne.n	800b62c <__gethex+0xc4>
 800b63c:	7833      	ldrb	r3, [r6, #0]
 800b63e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b642:	2b50      	cmp	r3, #80	; 0x50
 800b644:	d13b      	bne.n	800b6be <__gethex+0x156>
 800b646:	7873      	ldrb	r3, [r6, #1]
 800b648:	2b2b      	cmp	r3, #43	; 0x2b
 800b64a:	d02c      	beq.n	800b6a6 <__gethex+0x13e>
 800b64c:	2b2d      	cmp	r3, #45	; 0x2d
 800b64e:	d02e      	beq.n	800b6ae <__gethex+0x146>
 800b650:	1c71      	adds	r1, r6, #1
 800b652:	f04f 0900 	mov.w	r9, #0
 800b656:	7808      	ldrb	r0, [r1, #0]
 800b658:	f7ff ff70 	bl	800b53c <__hexdig_fun>
 800b65c:	1e43      	subs	r3, r0, #1
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b18      	cmp	r3, #24
 800b662:	d82c      	bhi.n	800b6be <__gethex+0x156>
 800b664:	f1a0 0210 	sub.w	r2, r0, #16
 800b668:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b66c:	f7ff ff66 	bl	800b53c <__hexdig_fun>
 800b670:	1e43      	subs	r3, r0, #1
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b18      	cmp	r3, #24
 800b676:	d91d      	bls.n	800b6b4 <__gethex+0x14c>
 800b678:	f1b9 0f00 	cmp.w	r9, #0
 800b67c:	d000      	beq.n	800b680 <__gethex+0x118>
 800b67e:	4252      	negs	r2, r2
 800b680:	4415      	add	r5, r2
 800b682:	f8cb 1000 	str.w	r1, [fp]
 800b686:	b1e4      	cbz	r4, 800b6c2 <__gethex+0x15a>
 800b688:	9b00      	ldr	r3, [sp, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bf14      	ite	ne
 800b68e:	2700      	movne	r7, #0
 800b690:	2706      	moveq	r7, #6
 800b692:	4638      	mov	r0, r7
 800b694:	b009      	add	sp, #36	; 0x24
 800b696:	ecbd 8b02 	vpop	{d8}
 800b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69e:	463e      	mov	r6, r7
 800b6a0:	4625      	mov	r5, r4
 800b6a2:	2401      	movs	r4, #1
 800b6a4:	e7ca      	b.n	800b63c <__gethex+0xd4>
 800b6a6:	f04f 0900 	mov.w	r9, #0
 800b6aa:	1cb1      	adds	r1, r6, #2
 800b6ac:	e7d3      	b.n	800b656 <__gethex+0xee>
 800b6ae:	f04f 0901 	mov.w	r9, #1
 800b6b2:	e7fa      	b.n	800b6aa <__gethex+0x142>
 800b6b4:	230a      	movs	r3, #10
 800b6b6:	fb03 0202 	mla	r2, r3, r2, r0
 800b6ba:	3a10      	subs	r2, #16
 800b6bc:	e7d4      	b.n	800b668 <__gethex+0x100>
 800b6be:	4631      	mov	r1, r6
 800b6c0:	e7df      	b.n	800b682 <__gethex+0x11a>
 800b6c2:	1bf3      	subs	r3, r6, r7
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	2b07      	cmp	r3, #7
 800b6ca:	dc0b      	bgt.n	800b6e4 <__gethex+0x17c>
 800b6cc:	ee18 0a10 	vmov	r0, s16
 800b6d0:	f000 fa82 	bl	800bbd8 <_Balloc>
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	b940      	cbnz	r0, 800b6ea <__gethex+0x182>
 800b6d8:	4b5d      	ldr	r3, [pc, #372]	; (800b850 <__gethex+0x2e8>)
 800b6da:	4602      	mov	r2, r0
 800b6dc:	21de      	movs	r1, #222	; 0xde
 800b6de:	485d      	ldr	r0, [pc, #372]	; (800b854 <__gethex+0x2ec>)
 800b6e0:	f7ff f830 	bl	800a744 <__assert_func>
 800b6e4:	3101      	adds	r1, #1
 800b6e6:	105b      	asrs	r3, r3, #1
 800b6e8:	e7ee      	b.n	800b6c8 <__gethex+0x160>
 800b6ea:	f100 0914 	add.w	r9, r0, #20
 800b6ee:	f04f 0b00 	mov.w	fp, #0
 800b6f2:	f1ca 0301 	rsb	r3, sl, #1
 800b6f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800b6fa:	f8cd b000 	str.w	fp, [sp]
 800b6fe:	9306      	str	r3, [sp, #24]
 800b700:	42b7      	cmp	r7, r6
 800b702:	d340      	bcc.n	800b786 <__gethex+0x21e>
 800b704:	9802      	ldr	r0, [sp, #8]
 800b706:	9b00      	ldr	r3, [sp, #0]
 800b708:	f840 3b04 	str.w	r3, [r0], #4
 800b70c:	eba0 0009 	sub.w	r0, r0, r9
 800b710:	1080      	asrs	r0, r0, #2
 800b712:	0146      	lsls	r6, r0, #5
 800b714:	6120      	str	r0, [r4, #16]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fb50 	bl	800bdbc <__hi0bits>
 800b71c:	1a30      	subs	r0, r6, r0
 800b71e:	f8d8 6000 	ldr.w	r6, [r8]
 800b722:	42b0      	cmp	r0, r6
 800b724:	dd63      	ble.n	800b7ee <__gethex+0x286>
 800b726:	1b87      	subs	r7, r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 fef4 	bl	800c518 <__any_on>
 800b730:	4682      	mov	sl, r0
 800b732:	b1a8      	cbz	r0, 800b760 <__gethex+0x1f8>
 800b734:	1e7b      	subs	r3, r7, #1
 800b736:	1159      	asrs	r1, r3, #5
 800b738:	f003 021f 	and.w	r2, r3, #31
 800b73c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b740:	f04f 0a01 	mov.w	sl, #1
 800b744:	fa0a f202 	lsl.w	r2, sl, r2
 800b748:	420a      	tst	r2, r1
 800b74a:	d009      	beq.n	800b760 <__gethex+0x1f8>
 800b74c:	4553      	cmp	r3, sl
 800b74e:	dd05      	ble.n	800b75c <__gethex+0x1f4>
 800b750:	1eb9      	subs	r1, r7, #2
 800b752:	4620      	mov	r0, r4
 800b754:	f000 fee0 	bl	800c518 <__any_on>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d145      	bne.n	800b7e8 <__gethex+0x280>
 800b75c:	f04f 0a02 	mov.w	sl, #2
 800b760:	4639      	mov	r1, r7
 800b762:	4620      	mov	r0, r4
 800b764:	f7ff fe98 	bl	800b498 <rshift>
 800b768:	443d      	add	r5, r7
 800b76a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b76e:	42ab      	cmp	r3, r5
 800b770:	da4c      	bge.n	800b80c <__gethex+0x2a4>
 800b772:	ee18 0a10 	vmov	r0, s16
 800b776:	4621      	mov	r1, r4
 800b778:	f000 fa6e 	bl	800bc58 <_Bfree>
 800b77c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b77e:	2300      	movs	r3, #0
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	27a3      	movs	r7, #163	; 0xa3
 800b784:	e785      	b.n	800b692 <__gethex+0x12a>
 800b786:	1e73      	subs	r3, r6, #1
 800b788:	9a05      	ldr	r2, [sp, #20]
 800b78a:	9303      	str	r3, [sp, #12]
 800b78c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b790:	4293      	cmp	r3, r2
 800b792:	d019      	beq.n	800b7c8 <__gethex+0x260>
 800b794:	f1bb 0f20 	cmp.w	fp, #32
 800b798:	d107      	bne.n	800b7aa <__gethex+0x242>
 800b79a:	9b02      	ldr	r3, [sp, #8]
 800b79c:	9a00      	ldr	r2, [sp, #0]
 800b79e:	f843 2b04 	str.w	r2, [r3], #4
 800b7a2:	9302      	str	r3, [sp, #8]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	469b      	mov	fp, r3
 800b7aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b7ae:	f7ff fec5 	bl	800b53c <__hexdig_fun>
 800b7b2:	9b00      	ldr	r3, [sp, #0]
 800b7b4:	f000 000f 	and.w	r0, r0, #15
 800b7b8:	fa00 f00b 	lsl.w	r0, r0, fp
 800b7bc:	4303      	orrs	r3, r0
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	f10b 0b04 	add.w	fp, fp, #4
 800b7c4:	9b03      	ldr	r3, [sp, #12]
 800b7c6:	e00d      	b.n	800b7e4 <__gethex+0x27c>
 800b7c8:	9b03      	ldr	r3, [sp, #12]
 800b7ca:	9a06      	ldr	r2, [sp, #24]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	42bb      	cmp	r3, r7
 800b7d0:	d3e0      	bcc.n	800b794 <__gethex+0x22c>
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	9901      	ldr	r1, [sp, #4]
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	4652      	mov	r2, sl
 800b7da:	f001 f991 	bl	800cb00 <strncmp>
 800b7de:	9b07      	ldr	r3, [sp, #28]
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d1d7      	bne.n	800b794 <__gethex+0x22c>
 800b7e4:	461e      	mov	r6, r3
 800b7e6:	e78b      	b.n	800b700 <__gethex+0x198>
 800b7e8:	f04f 0a03 	mov.w	sl, #3
 800b7ec:	e7b8      	b.n	800b760 <__gethex+0x1f8>
 800b7ee:	da0a      	bge.n	800b806 <__gethex+0x29e>
 800b7f0:	1a37      	subs	r7, r6, r0
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	ee18 0a10 	vmov	r0, s16
 800b7f8:	463a      	mov	r2, r7
 800b7fa:	f000 fc49 	bl	800c090 <__lshift>
 800b7fe:	1bed      	subs	r5, r5, r7
 800b800:	4604      	mov	r4, r0
 800b802:	f100 0914 	add.w	r9, r0, #20
 800b806:	f04f 0a00 	mov.w	sl, #0
 800b80a:	e7ae      	b.n	800b76a <__gethex+0x202>
 800b80c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b810:	42a8      	cmp	r0, r5
 800b812:	dd72      	ble.n	800b8fa <__gethex+0x392>
 800b814:	1b45      	subs	r5, r0, r5
 800b816:	42ae      	cmp	r6, r5
 800b818:	dc36      	bgt.n	800b888 <__gethex+0x320>
 800b81a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d02a      	beq.n	800b878 <__gethex+0x310>
 800b822:	2b03      	cmp	r3, #3
 800b824:	d02c      	beq.n	800b880 <__gethex+0x318>
 800b826:	2b01      	cmp	r3, #1
 800b828:	d11c      	bne.n	800b864 <__gethex+0x2fc>
 800b82a:	42ae      	cmp	r6, r5
 800b82c:	d11a      	bne.n	800b864 <__gethex+0x2fc>
 800b82e:	2e01      	cmp	r6, #1
 800b830:	d112      	bne.n	800b858 <__gethex+0x2f0>
 800b832:	9a04      	ldr	r2, [sp, #16]
 800b834:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	2301      	movs	r3, #1
 800b83c:	6123      	str	r3, [r4, #16]
 800b83e:	f8c9 3000 	str.w	r3, [r9]
 800b842:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b844:	2762      	movs	r7, #98	; 0x62
 800b846:	601c      	str	r4, [r3, #0]
 800b848:	e723      	b.n	800b692 <__gethex+0x12a>
 800b84a:	bf00      	nop
 800b84c:	0800d9a0 	.word	0x0800d9a0
 800b850:	0800d928 	.word	0x0800d928
 800b854:	0800d939 	.word	0x0800d939
 800b858:	1e71      	subs	r1, r6, #1
 800b85a:	4620      	mov	r0, r4
 800b85c:	f000 fe5c 	bl	800c518 <__any_on>
 800b860:	2800      	cmp	r0, #0
 800b862:	d1e6      	bne.n	800b832 <__gethex+0x2ca>
 800b864:	ee18 0a10 	vmov	r0, s16
 800b868:	4621      	mov	r1, r4
 800b86a:	f000 f9f5 	bl	800bc58 <_Bfree>
 800b86e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b870:	2300      	movs	r3, #0
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	2750      	movs	r7, #80	; 0x50
 800b876:	e70c      	b.n	800b692 <__gethex+0x12a>
 800b878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1f2      	bne.n	800b864 <__gethex+0x2fc>
 800b87e:	e7d8      	b.n	800b832 <__gethex+0x2ca>
 800b880:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1d5      	bne.n	800b832 <__gethex+0x2ca>
 800b886:	e7ed      	b.n	800b864 <__gethex+0x2fc>
 800b888:	1e6f      	subs	r7, r5, #1
 800b88a:	f1ba 0f00 	cmp.w	sl, #0
 800b88e:	d131      	bne.n	800b8f4 <__gethex+0x38c>
 800b890:	b127      	cbz	r7, 800b89c <__gethex+0x334>
 800b892:	4639      	mov	r1, r7
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fe3f 	bl	800c518 <__any_on>
 800b89a:	4682      	mov	sl, r0
 800b89c:	117b      	asrs	r3, r7, #5
 800b89e:	2101      	movs	r1, #1
 800b8a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b8a4:	f007 071f 	and.w	r7, r7, #31
 800b8a8:	fa01 f707 	lsl.w	r7, r1, r7
 800b8ac:	421f      	tst	r7, r3
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	bf18      	it	ne
 800b8b4:	f04a 0a02 	orrne.w	sl, sl, #2
 800b8b8:	1b76      	subs	r6, r6, r5
 800b8ba:	f7ff fded 	bl	800b498 <rshift>
 800b8be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b8c2:	2702      	movs	r7, #2
 800b8c4:	f1ba 0f00 	cmp.w	sl, #0
 800b8c8:	d048      	beq.n	800b95c <__gethex+0x3f4>
 800b8ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d015      	beq.n	800b8fe <__gethex+0x396>
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d017      	beq.n	800b906 <__gethex+0x39e>
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d109      	bne.n	800b8ee <__gethex+0x386>
 800b8da:	f01a 0f02 	tst.w	sl, #2
 800b8de:	d006      	beq.n	800b8ee <__gethex+0x386>
 800b8e0:	f8d9 0000 	ldr.w	r0, [r9]
 800b8e4:	ea4a 0a00 	orr.w	sl, sl, r0
 800b8e8:	f01a 0f01 	tst.w	sl, #1
 800b8ec:	d10e      	bne.n	800b90c <__gethex+0x3a4>
 800b8ee:	f047 0710 	orr.w	r7, r7, #16
 800b8f2:	e033      	b.n	800b95c <__gethex+0x3f4>
 800b8f4:	f04f 0a01 	mov.w	sl, #1
 800b8f8:	e7d0      	b.n	800b89c <__gethex+0x334>
 800b8fa:	2701      	movs	r7, #1
 800b8fc:	e7e2      	b.n	800b8c4 <__gethex+0x35c>
 800b8fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b900:	f1c3 0301 	rsb	r3, r3, #1
 800b904:	9315      	str	r3, [sp, #84]	; 0x54
 800b906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d0f0      	beq.n	800b8ee <__gethex+0x386>
 800b90c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b910:	f104 0314 	add.w	r3, r4, #20
 800b914:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b918:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b91c:	f04f 0c00 	mov.w	ip, #0
 800b920:	4618      	mov	r0, r3
 800b922:	f853 2b04 	ldr.w	r2, [r3], #4
 800b926:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b92a:	d01c      	beq.n	800b966 <__gethex+0x3fe>
 800b92c:	3201      	adds	r2, #1
 800b92e:	6002      	str	r2, [r0, #0]
 800b930:	2f02      	cmp	r7, #2
 800b932:	f104 0314 	add.w	r3, r4, #20
 800b936:	d13f      	bne.n	800b9b8 <__gethex+0x450>
 800b938:	f8d8 2000 	ldr.w	r2, [r8]
 800b93c:	3a01      	subs	r2, #1
 800b93e:	42b2      	cmp	r2, r6
 800b940:	d10a      	bne.n	800b958 <__gethex+0x3f0>
 800b942:	1171      	asrs	r1, r6, #5
 800b944:	2201      	movs	r2, #1
 800b946:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b94a:	f006 061f 	and.w	r6, r6, #31
 800b94e:	fa02 f606 	lsl.w	r6, r2, r6
 800b952:	421e      	tst	r6, r3
 800b954:	bf18      	it	ne
 800b956:	4617      	movne	r7, r2
 800b958:	f047 0720 	orr.w	r7, r7, #32
 800b95c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b95e:	601c      	str	r4, [r3, #0]
 800b960:	9b04      	ldr	r3, [sp, #16]
 800b962:	601d      	str	r5, [r3, #0]
 800b964:	e695      	b.n	800b692 <__gethex+0x12a>
 800b966:	4299      	cmp	r1, r3
 800b968:	f843 cc04 	str.w	ip, [r3, #-4]
 800b96c:	d8d8      	bhi.n	800b920 <__gethex+0x3b8>
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	459b      	cmp	fp, r3
 800b972:	db19      	blt.n	800b9a8 <__gethex+0x440>
 800b974:	6861      	ldr	r1, [r4, #4]
 800b976:	ee18 0a10 	vmov	r0, s16
 800b97a:	3101      	adds	r1, #1
 800b97c:	f000 f92c 	bl	800bbd8 <_Balloc>
 800b980:	4681      	mov	r9, r0
 800b982:	b918      	cbnz	r0, 800b98c <__gethex+0x424>
 800b984:	4b1a      	ldr	r3, [pc, #104]	; (800b9f0 <__gethex+0x488>)
 800b986:	4602      	mov	r2, r0
 800b988:	2184      	movs	r1, #132	; 0x84
 800b98a:	e6a8      	b.n	800b6de <__gethex+0x176>
 800b98c:	6922      	ldr	r2, [r4, #16]
 800b98e:	3202      	adds	r2, #2
 800b990:	f104 010c 	add.w	r1, r4, #12
 800b994:	0092      	lsls	r2, r2, #2
 800b996:	300c      	adds	r0, #12
 800b998:	f000 f904 	bl	800bba4 <memcpy>
 800b99c:	4621      	mov	r1, r4
 800b99e:	ee18 0a10 	vmov	r0, s16
 800b9a2:	f000 f959 	bl	800bc58 <_Bfree>
 800b9a6:	464c      	mov	r4, r9
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	1c5a      	adds	r2, r3, #1
 800b9ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9b0:	6122      	str	r2, [r4, #16]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	615a      	str	r2, [r3, #20]
 800b9b6:	e7bb      	b.n	800b930 <__gethex+0x3c8>
 800b9b8:	6922      	ldr	r2, [r4, #16]
 800b9ba:	455a      	cmp	r2, fp
 800b9bc:	dd0b      	ble.n	800b9d6 <__gethex+0x46e>
 800b9be:	2101      	movs	r1, #1
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f7ff fd69 	bl	800b498 <rshift>
 800b9c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9ca:	3501      	adds	r5, #1
 800b9cc:	42ab      	cmp	r3, r5
 800b9ce:	f6ff aed0 	blt.w	800b772 <__gethex+0x20a>
 800b9d2:	2701      	movs	r7, #1
 800b9d4:	e7c0      	b.n	800b958 <__gethex+0x3f0>
 800b9d6:	f016 061f 	ands.w	r6, r6, #31
 800b9da:	d0fa      	beq.n	800b9d2 <__gethex+0x46a>
 800b9dc:	4453      	add	r3, sl
 800b9de:	f1c6 0620 	rsb	r6, r6, #32
 800b9e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b9e6:	f000 f9e9 	bl	800bdbc <__hi0bits>
 800b9ea:	42b0      	cmp	r0, r6
 800b9ec:	dbe7      	blt.n	800b9be <__gethex+0x456>
 800b9ee:	e7f0      	b.n	800b9d2 <__gethex+0x46a>
 800b9f0:	0800d928 	.word	0x0800d928

0800b9f4 <L_shift>:
 800b9f4:	f1c2 0208 	rsb	r2, r2, #8
 800b9f8:	0092      	lsls	r2, r2, #2
 800b9fa:	b570      	push	{r4, r5, r6, lr}
 800b9fc:	f1c2 0620 	rsb	r6, r2, #32
 800ba00:	6843      	ldr	r3, [r0, #4]
 800ba02:	6804      	ldr	r4, [r0, #0]
 800ba04:	fa03 f506 	lsl.w	r5, r3, r6
 800ba08:	432c      	orrs	r4, r5
 800ba0a:	40d3      	lsrs	r3, r2
 800ba0c:	6004      	str	r4, [r0, #0]
 800ba0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba12:	4288      	cmp	r0, r1
 800ba14:	d3f4      	bcc.n	800ba00 <L_shift+0xc>
 800ba16:	bd70      	pop	{r4, r5, r6, pc}

0800ba18 <__match>:
 800ba18:	b530      	push	{r4, r5, lr}
 800ba1a:	6803      	ldr	r3, [r0, #0]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba22:	b914      	cbnz	r4, 800ba2a <__match+0x12>
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	2001      	movs	r0, #1
 800ba28:	bd30      	pop	{r4, r5, pc}
 800ba2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba32:	2d19      	cmp	r5, #25
 800ba34:	bf98      	it	ls
 800ba36:	3220      	addls	r2, #32
 800ba38:	42a2      	cmp	r2, r4
 800ba3a:	d0f0      	beq.n	800ba1e <__match+0x6>
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e7f3      	b.n	800ba28 <__match+0x10>

0800ba40 <__hexnan>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	680b      	ldr	r3, [r1, #0]
 800ba46:	115e      	asrs	r6, r3, #5
 800ba48:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba4c:	f013 031f 	ands.w	r3, r3, #31
 800ba50:	b087      	sub	sp, #28
 800ba52:	bf18      	it	ne
 800ba54:	3604      	addne	r6, #4
 800ba56:	2500      	movs	r5, #0
 800ba58:	1f37      	subs	r7, r6, #4
 800ba5a:	4690      	mov	r8, r2
 800ba5c:	6802      	ldr	r2, [r0, #0]
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	4682      	mov	sl, r0
 800ba62:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba66:	46b9      	mov	r9, r7
 800ba68:	463c      	mov	r4, r7
 800ba6a:	9502      	str	r5, [sp, #8]
 800ba6c:	46ab      	mov	fp, r5
 800ba6e:	7851      	ldrb	r1, [r2, #1]
 800ba70:	1c53      	adds	r3, r2, #1
 800ba72:	9303      	str	r3, [sp, #12]
 800ba74:	b341      	cbz	r1, 800bac8 <__hexnan+0x88>
 800ba76:	4608      	mov	r0, r1
 800ba78:	9205      	str	r2, [sp, #20]
 800ba7a:	9104      	str	r1, [sp, #16]
 800ba7c:	f7ff fd5e 	bl	800b53c <__hexdig_fun>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d14f      	bne.n	800bb24 <__hexnan+0xe4>
 800ba84:	9904      	ldr	r1, [sp, #16]
 800ba86:	9a05      	ldr	r2, [sp, #20]
 800ba88:	2920      	cmp	r1, #32
 800ba8a:	d818      	bhi.n	800babe <__hexnan+0x7e>
 800ba8c:	9b02      	ldr	r3, [sp, #8]
 800ba8e:	459b      	cmp	fp, r3
 800ba90:	dd13      	ble.n	800baba <__hexnan+0x7a>
 800ba92:	454c      	cmp	r4, r9
 800ba94:	d206      	bcs.n	800baa4 <__hexnan+0x64>
 800ba96:	2d07      	cmp	r5, #7
 800ba98:	dc04      	bgt.n	800baa4 <__hexnan+0x64>
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f7ff ffa8 	bl	800b9f4 <L_shift>
 800baa4:	4544      	cmp	r4, r8
 800baa6:	d950      	bls.n	800bb4a <__hexnan+0x10a>
 800baa8:	2300      	movs	r3, #0
 800baaa:	f1a4 0904 	sub.w	r9, r4, #4
 800baae:	f844 3c04 	str.w	r3, [r4, #-4]
 800bab2:	f8cd b008 	str.w	fp, [sp, #8]
 800bab6:	464c      	mov	r4, r9
 800bab8:	461d      	mov	r5, r3
 800baba:	9a03      	ldr	r2, [sp, #12]
 800babc:	e7d7      	b.n	800ba6e <__hexnan+0x2e>
 800babe:	2929      	cmp	r1, #41	; 0x29
 800bac0:	d156      	bne.n	800bb70 <__hexnan+0x130>
 800bac2:	3202      	adds	r2, #2
 800bac4:	f8ca 2000 	str.w	r2, [sl]
 800bac8:	f1bb 0f00 	cmp.w	fp, #0
 800bacc:	d050      	beq.n	800bb70 <__hexnan+0x130>
 800bace:	454c      	cmp	r4, r9
 800bad0:	d206      	bcs.n	800bae0 <__hexnan+0xa0>
 800bad2:	2d07      	cmp	r5, #7
 800bad4:	dc04      	bgt.n	800bae0 <__hexnan+0xa0>
 800bad6:	462a      	mov	r2, r5
 800bad8:	4649      	mov	r1, r9
 800bada:	4620      	mov	r0, r4
 800badc:	f7ff ff8a 	bl	800b9f4 <L_shift>
 800bae0:	4544      	cmp	r4, r8
 800bae2:	d934      	bls.n	800bb4e <__hexnan+0x10e>
 800bae4:	f1a8 0204 	sub.w	r2, r8, #4
 800bae8:	4623      	mov	r3, r4
 800baea:	f853 1b04 	ldr.w	r1, [r3], #4
 800baee:	f842 1f04 	str.w	r1, [r2, #4]!
 800baf2:	429f      	cmp	r7, r3
 800baf4:	d2f9      	bcs.n	800baea <__hexnan+0xaa>
 800baf6:	1b3b      	subs	r3, r7, r4
 800baf8:	f023 0303 	bic.w	r3, r3, #3
 800bafc:	3304      	adds	r3, #4
 800bafe:	3401      	adds	r4, #1
 800bb00:	3e03      	subs	r6, #3
 800bb02:	42b4      	cmp	r4, r6
 800bb04:	bf88      	it	hi
 800bb06:	2304      	movhi	r3, #4
 800bb08:	4443      	add	r3, r8
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f843 2b04 	str.w	r2, [r3], #4
 800bb10:	429f      	cmp	r7, r3
 800bb12:	d2fb      	bcs.n	800bb0c <__hexnan+0xcc>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	b91b      	cbnz	r3, 800bb20 <__hexnan+0xe0>
 800bb18:	4547      	cmp	r7, r8
 800bb1a:	d127      	bne.n	800bb6c <__hexnan+0x12c>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	603b      	str	r3, [r7, #0]
 800bb20:	2005      	movs	r0, #5
 800bb22:	e026      	b.n	800bb72 <__hexnan+0x132>
 800bb24:	3501      	adds	r5, #1
 800bb26:	2d08      	cmp	r5, #8
 800bb28:	f10b 0b01 	add.w	fp, fp, #1
 800bb2c:	dd06      	ble.n	800bb3c <__hexnan+0xfc>
 800bb2e:	4544      	cmp	r4, r8
 800bb30:	d9c3      	bls.n	800baba <__hexnan+0x7a>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb38:	2501      	movs	r5, #1
 800bb3a:	3c04      	subs	r4, #4
 800bb3c:	6822      	ldr	r2, [r4, #0]
 800bb3e:	f000 000f 	and.w	r0, r0, #15
 800bb42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bb46:	6022      	str	r2, [r4, #0]
 800bb48:	e7b7      	b.n	800baba <__hexnan+0x7a>
 800bb4a:	2508      	movs	r5, #8
 800bb4c:	e7b5      	b.n	800baba <__hexnan+0x7a>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0df      	beq.n	800bb14 <__hexnan+0xd4>
 800bb54:	f04f 32ff 	mov.w	r2, #4294967295
 800bb58:	f1c3 0320 	rsb	r3, r3, #32
 800bb5c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bb64:	401a      	ands	r2, r3
 800bb66:	f846 2c04 	str.w	r2, [r6, #-4]
 800bb6a:	e7d3      	b.n	800bb14 <__hexnan+0xd4>
 800bb6c:	3f04      	subs	r7, #4
 800bb6e:	e7d1      	b.n	800bb14 <__hexnan+0xd4>
 800bb70:	2004      	movs	r0, #4
 800bb72:	b007      	add	sp, #28
 800bb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb78 <_localeconv_r>:
 800bb78:	4800      	ldr	r0, [pc, #0]	; (800bb7c <_localeconv_r+0x4>)
 800bb7a:	4770      	bx	lr
 800bb7c:	20000164 	.word	0x20000164

0800bb80 <__ascii_mbtowc>:
 800bb80:	b082      	sub	sp, #8
 800bb82:	b901      	cbnz	r1, 800bb86 <__ascii_mbtowc+0x6>
 800bb84:	a901      	add	r1, sp, #4
 800bb86:	b142      	cbz	r2, 800bb9a <__ascii_mbtowc+0x1a>
 800bb88:	b14b      	cbz	r3, 800bb9e <__ascii_mbtowc+0x1e>
 800bb8a:	7813      	ldrb	r3, [r2, #0]
 800bb8c:	600b      	str	r3, [r1, #0]
 800bb8e:	7812      	ldrb	r2, [r2, #0]
 800bb90:	1e10      	subs	r0, r2, #0
 800bb92:	bf18      	it	ne
 800bb94:	2001      	movne	r0, #1
 800bb96:	b002      	add	sp, #8
 800bb98:	4770      	bx	lr
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	e7fb      	b.n	800bb96 <__ascii_mbtowc+0x16>
 800bb9e:	f06f 0001 	mvn.w	r0, #1
 800bba2:	e7f8      	b.n	800bb96 <__ascii_mbtowc+0x16>

0800bba4 <memcpy>:
 800bba4:	440a      	add	r2, r1
 800bba6:	4291      	cmp	r1, r2
 800bba8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbac:	d100      	bne.n	800bbb0 <memcpy+0xc>
 800bbae:	4770      	bx	lr
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbba:	4291      	cmp	r1, r2
 800bbbc:	d1f9      	bne.n	800bbb2 <memcpy+0xe>
 800bbbe:	bd10      	pop	{r4, pc}

0800bbc0 <__malloc_lock>:
 800bbc0:	4801      	ldr	r0, [pc, #4]	; (800bbc8 <__malloc_lock+0x8>)
 800bbc2:	f001 ba3f 	b.w	800d044 <__retarget_lock_acquire_recursive>
 800bbc6:	bf00      	nop
 800bbc8:	20000640 	.word	0x20000640

0800bbcc <__malloc_unlock>:
 800bbcc:	4801      	ldr	r0, [pc, #4]	; (800bbd4 <__malloc_unlock+0x8>)
 800bbce:	f001 ba3a 	b.w	800d046 <__retarget_lock_release_recursive>
 800bbd2:	bf00      	nop
 800bbd4:	20000640 	.word	0x20000640

0800bbd8 <_Balloc>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbdc:	4604      	mov	r4, r0
 800bbde:	460d      	mov	r5, r1
 800bbe0:	b976      	cbnz	r6, 800bc00 <_Balloc+0x28>
 800bbe2:	2010      	movs	r0, #16
 800bbe4:	f7fc fea2 	bl	800892c <malloc>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	6260      	str	r0, [r4, #36]	; 0x24
 800bbec:	b920      	cbnz	r0, 800bbf8 <_Balloc+0x20>
 800bbee:	4b18      	ldr	r3, [pc, #96]	; (800bc50 <_Balloc+0x78>)
 800bbf0:	4818      	ldr	r0, [pc, #96]	; (800bc54 <_Balloc+0x7c>)
 800bbf2:	2166      	movs	r1, #102	; 0x66
 800bbf4:	f7fe fda6 	bl	800a744 <__assert_func>
 800bbf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbfc:	6006      	str	r6, [r0, #0]
 800bbfe:	60c6      	str	r6, [r0, #12]
 800bc00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc02:	68f3      	ldr	r3, [r6, #12]
 800bc04:	b183      	cbz	r3, 800bc28 <_Balloc+0x50>
 800bc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc0e:	b9b8      	cbnz	r0, 800bc40 <_Balloc+0x68>
 800bc10:	2101      	movs	r1, #1
 800bc12:	fa01 f605 	lsl.w	r6, r1, r5
 800bc16:	1d72      	adds	r2, r6, #5
 800bc18:	0092      	lsls	r2, r2, #2
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fc9d 	bl	800c55a <_calloc_r>
 800bc20:	b160      	cbz	r0, 800bc3c <_Balloc+0x64>
 800bc22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc26:	e00e      	b.n	800bc46 <_Balloc+0x6e>
 800bc28:	2221      	movs	r2, #33	; 0x21
 800bc2a:	2104      	movs	r1, #4
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f000 fc94 	bl	800c55a <_calloc_r>
 800bc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc34:	60f0      	str	r0, [r6, #12]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e4      	bne.n	800bc06 <_Balloc+0x2e>
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}
 800bc40:	6802      	ldr	r2, [r0, #0]
 800bc42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc46:	2300      	movs	r3, #0
 800bc48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc4c:	e7f7      	b.n	800bc3e <_Balloc+0x66>
 800bc4e:	bf00      	nop
 800bc50:	0800d810 	.word	0x0800d810
 800bc54:	0800d9b4 	.word	0x0800d9b4

0800bc58 <_Bfree>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	b976      	cbnz	r6, 800bc80 <_Bfree+0x28>
 800bc62:	2010      	movs	r0, #16
 800bc64:	f7fc fe62 	bl	800892c <malloc>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	6268      	str	r0, [r5, #36]	; 0x24
 800bc6c:	b920      	cbnz	r0, 800bc78 <_Bfree+0x20>
 800bc6e:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <_Bfree+0x3c>)
 800bc70:	4809      	ldr	r0, [pc, #36]	; (800bc98 <_Bfree+0x40>)
 800bc72:	218a      	movs	r1, #138	; 0x8a
 800bc74:	f7fe fd66 	bl	800a744 <__assert_func>
 800bc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc7c:	6006      	str	r6, [r0, #0]
 800bc7e:	60c6      	str	r6, [r0, #12]
 800bc80:	b13c      	cbz	r4, 800bc92 <_Bfree+0x3a>
 800bc82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc84:	6862      	ldr	r2, [r4, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc8c:	6021      	str	r1, [r4, #0]
 800bc8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc92:	bd70      	pop	{r4, r5, r6, pc}
 800bc94:	0800d810 	.word	0x0800d810
 800bc98:	0800d9b4 	.word	0x0800d9b4

0800bc9c <__multadd>:
 800bc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca0:	690d      	ldr	r5, [r1, #16]
 800bca2:	4607      	mov	r7, r0
 800bca4:	460c      	mov	r4, r1
 800bca6:	461e      	mov	r6, r3
 800bca8:	f101 0c14 	add.w	ip, r1, #20
 800bcac:	2000      	movs	r0, #0
 800bcae:	f8dc 3000 	ldr.w	r3, [ip]
 800bcb2:	b299      	uxth	r1, r3
 800bcb4:	fb02 6101 	mla	r1, r2, r1, r6
 800bcb8:	0c1e      	lsrs	r6, r3, #16
 800bcba:	0c0b      	lsrs	r3, r1, #16
 800bcbc:	fb02 3306 	mla	r3, r2, r6, r3
 800bcc0:	b289      	uxth	r1, r1
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcc8:	4285      	cmp	r5, r0
 800bcca:	f84c 1b04 	str.w	r1, [ip], #4
 800bcce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcd2:	dcec      	bgt.n	800bcae <__multadd+0x12>
 800bcd4:	b30e      	cbz	r6, 800bd1a <__multadd+0x7e>
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	42ab      	cmp	r3, r5
 800bcda:	dc19      	bgt.n	800bd10 <__multadd+0x74>
 800bcdc:	6861      	ldr	r1, [r4, #4]
 800bcde:	4638      	mov	r0, r7
 800bce0:	3101      	adds	r1, #1
 800bce2:	f7ff ff79 	bl	800bbd8 <_Balloc>
 800bce6:	4680      	mov	r8, r0
 800bce8:	b928      	cbnz	r0, 800bcf6 <__multadd+0x5a>
 800bcea:	4602      	mov	r2, r0
 800bcec:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <__multadd+0x84>)
 800bcee:	480d      	ldr	r0, [pc, #52]	; (800bd24 <__multadd+0x88>)
 800bcf0:	21b5      	movs	r1, #181	; 0xb5
 800bcf2:	f7fe fd27 	bl	800a744 <__assert_func>
 800bcf6:	6922      	ldr	r2, [r4, #16]
 800bcf8:	3202      	adds	r2, #2
 800bcfa:	f104 010c 	add.w	r1, r4, #12
 800bcfe:	0092      	lsls	r2, r2, #2
 800bd00:	300c      	adds	r0, #12
 800bd02:	f7ff ff4f 	bl	800bba4 <memcpy>
 800bd06:	4621      	mov	r1, r4
 800bd08:	4638      	mov	r0, r7
 800bd0a:	f7ff ffa5 	bl	800bc58 <_Bfree>
 800bd0e:	4644      	mov	r4, r8
 800bd10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd14:	3501      	adds	r5, #1
 800bd16:	615e      	str	r6, [r3, #20]
 800bd18:	6125      	str	r5, [r4, #16]
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd20:	0800d928 	.word	0x0800d928
 800bd24:	0800d9b4 	.word	0x0800d9b4

0800bd28 <__s2b>:
 800bd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	4615      	mov	r5, r2
 800bd30:	461f      	mov	r7, r3
 800bd32:	2209      	movs	r2, #9
 800bd34:	3308      	adds	r3, #8
 800bd36:	4606      	mov	r6, r0
 800bd38:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	2201      	movs	r2, #1
 800bd40:	429a      	cmp	r2, r3
 800bd42:	db09      	blt.n	800bd58 <__s2b+0x30>
 800bd44:	4630      	mov	r0, r6
 800bd46:	f7ff ff47 	bl	800bbd8 <_Balloc>
 800bd4a:	b940      	cbnz	r0, 800bd5e <__s2b+0x36>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	4b19      	ldr	r3, [pc, #100]	; (800bdb4 <__s2b+0x8c>)
 800bd50:	4819      	ldr	r0, [pc, #100]	; (800bdb8 <__s2b+0x90>)
 800bd52:	21ce      	movs	r1, #206	; 0xce
 800bd54:	f7fe fcf6 	bl	800a744 <__assert_func>
 800bd58:	0052      	lsls	r2, r2, #1
 800bd5a:	3101      	adds	r1, #1
 800bd5c:	e7f0      	b.n	800bd40 <__s2b+0x18>
 800bd5e:	9b08      	ldr	r3, [sp, #32]
 800bd60:	6143      	str	r3, [r0, #20]
 800bd62:	2d09      	cmp	r5, #9
 800bd64:	f04f 0301 	mov.w	r3, #1
 800bd68:	6103      	str	r3, [r0, #16]
 800bd6a:	dd16      	ble.n	800bd9a <__s2b+0x72>
 800bd6c:	f104 0909 	add.w	r9, r4, #9
 800bd70:	46c8      	mov	r8, r9
 800bd72:	442c      	add	r4, r5
 800bd74:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd78:	4601      	mov	r1, r0
 800bd7a:	3b30      	subs	r3, #48	; 0x30
 800bd7c:	220a      	movs	r2, #10
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff ff8c 	bl	800bc9c <__multadd>
 800bd84:	45a0      	cmp	r8, r4
 800bd86:	d1f5      	bne.n	800bd74 <__s2b+0x4c>
 800bd88:	f1a5 0408 	sub.w	r4, r5, #8
 800bd8c:	444c      	add	r4, r9
 800bd8e:	1b2d      	subs	r5, r5, r4
 800bd90:	1963      	adds	r3, r4, r5
 800bd92:	42bb      	cmp	r3, r7
 800bd94:	db04      	blt.n	800bda0 <__s2b+0x78>
 800bd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9a:	340a      	adds	r4, #10
 800bd9c:	2509      	movs	r5, #9
 800bd9e:	e7f6      	b.n	800bd8e <__s2b+0x66>
 800bda0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bda4:	4601      	mov	r1, r0
 800bda6:	3b30      	subs	r3, #48	; 0x30
 800bda8:	220a      	movs	r2, #10
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7ff ff76 	bl	800bc9c <__multadd>
 800bdb0:	e7ee      	b.n	800bd90 <__s2b+0x68>
 800bdb2:	bf00      	nop
 800bdb4:	0800d928 	.word	0x0800d928
 800bdb8:	0800d9b4 	.word	0x0800d9b4

0800bdbc <__hi0bits>:
 800bdbc:	0c03      	lsrs	r3, r0, #16
 800bdbe:	041b      	lsls	r3, r3, #16
 800bdc0:	b9d3      	cbnz	r3, 800bdf8 <__hi0bits+0x3c>
 800bdc2:	0400      	lsls	r0, r0, #16
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdca:	bf04      	itt	eq
 800bdcc:	0200      	lsleq	r0, r0, #8
 800bdce:	3308      	addeq	r3, #8
 800bdd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdd4:	bf04      	itt	eq
 800bdd6:	0100      	lsleq	r0, r0, #4
 800bdd8:	3304      	addeq	r3, #4
 800bdda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdde:	bf04      	itt	eq
 800bde0:	0080      	lsleq	r0, r0, #2
 800bde2:	3302      	addeq	r3, #2
 800bde4:	2800      	cmp	r0, #0
 800bde6:	db05      	blt.n	800bdf4 <__hi0bits+0x38>
 800bde8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bdec:	f103 0301 	add.w	r3, r3, #1
 800bdf0:	bf08      	it	eq
 800bdf2:	2320      	moveq	r3, #32
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	4770      	bx	lr
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e7e4      	b.n	800bdc6 <__hi0bits+0xa>

0800bdfc <__lo0bits>:
 800bdfc:	6803      	ldr	r3, [r0, #0]
 800bdfe:	f013 0207 	ands.w	r2, r3, #7
 800be02:	4601      	mov	r1, r0
 800be04:	d00b      	beq.n	800be1e <__lo0bits+0x22>
 800be06:	07da      	lsls	r2, r3, #31
 800be08:	d423      	bmi.n	800be52 <__lo0bits+0x56>
 800be0a:	0798      	lsls	r0, r3, #30
 800be0c:	bf49      	itett	mi
 800be0e:	085b      	lsrmi	r3, r3, #1
 800be10:	089b      	lsrpl	r3, r3, #2
 800be12:	2001      	movmi	r0, #1
 800be14:	600b      	strmi	r3, [r1, #0]
 800be16:	bf5c      	itt	pl
 800be18:	600b      	strpl	r3, [r1, #0]
 800be1a:	2002      	movpl	r0, #2
 800be1c:	4770      	bx	lr
 800be1e:	b298      	uxth	r0, r3
 800be20:	b9a8      	cbnz	r0, 800be4e <__lo0bits+0x52>
 800be22:	0c1b      	lsrs	r3, r3, #16
 800be24:	2010      	movs	r0, #16
 800be26:	b2da      	uxtb	r2, r3
 800be28:	b90a      	cbnz	r2, 800be2e <__lo0bits+0x32>
 800be2a:	3008      	adds	r0, #8
 800be2c:	0a1b      	lsrs	r3, r3, #8
 800be2e:	071a      	lsls	r2, r3, #28
 800be30:	bf04      	itt	eq
 800be32:	091b      	lsreq	r3, r3, #4
 800be34:	3004      	addeq	r0, #4
 800be36:	079a      	lsls	r2, r3, #30
 800be38:	bf04      	itt	eq
 800be3a:	089b      	lsreq	r3, r3, #2
 800be3c:	3002      	addeq	r0, #2
 800be3e:	07da      	lsls	r2, r3, #31
 800be40:	d403      	bmi.n	800be4a <__lo0bits+0x4e>
 800be42:	085b      	lsrs	r3, r3, #1
 800be44:	f100 0001 	add.w	r0, r0, #1
 800be48:	d005      	beq.n	800be56 <__lo0bits+0x5a>
 800be4a:	600b      	str	r3, [r1, #0]
 800be4c:	4770      	bx	lr
 800be4e:	4610      	mov	r0, r2
 800be50:	e7e9      	b.n	800be26 <__lo0bits+0x2a>
 800be52:	2000      	movs	r0, #0
 800be54:	4770      	bx	lr
 800be56:	2020      	movs	r0, #32
 800be58:	4770      	bx	lr
	...

0800be5c <__i2b>:
 800be5c:	b510      	push	{r4, lr}
 800be5e:	460c      	mov	r4, r1
 800be60:	2101      	movs	r1, #1
 800be62:	f7ff feb9 	bl	800bbd8 <_Balloc>
 800be66:	4602      	mov	r2, r0
 800be68:	b928      	cbnz	r0, 800be76 <__i2b+0x1a>
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <__i2b+0x24>)
 800be6c:	4805      	ldr	r0, [pc, #20]	; (800be84 <__i2b+0x28>)
 800be6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be72:	f7fe fc67 	bl	800a744 <__assert_func>
 800be76:	2301      	movs	r3, #1
 800be78:	6144      	str	r4, [r0, #20]
 800be7a:	6103      	str	r3, [r0, #16]
 800be7c:	bd10      	pop	{r4, pc}
 800be7e:	bf00      	nop
 800be80:	0800d928 	.word	0x0800d928
 800be84:	0800d9b4 	.word	0x0800d9b4

0800be88 <__multiply>:
 800be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8c:	4691      	mov	r9, r2
 800be8e:	690a      	ldr	r2, [r1, #16]
 800be90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be94:	429a      	cmp	r2, r3
 800be96:	bfb8      	it	lt
 800be98:	460b      	movlt	r3, r1
 800be9a:	460c      	mov	r4, r1
 800be9c:	bfbc      	itt	lt
 800be9e:	464c      	movlt	r4, r9
 800bea0:	4699      	movlt	r9, r3
 800bea2:	6927      	ldr	r7, [r4, #16]
 800bea4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	6861      	ldr	r1, [r4, #4]
 800beac:	eb07 060a 	add.w	r6, r7, sl
 800beb0:	42b3      	cmp	r3, r6
 800beb2:	b085      	sub	sp, #20
 800beb4:	bfb8      	it	lt
 800beb6:	3101      	addlt	r1, #1
 800beb8:	f7ff fe8e 	bl	800bbd8 <_Balloc>
 800bebc:	b930      	cbnz	r0, 800becc <__multiply+0x44>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b44      	ldr	r3, [pc, #272]	; (800bfd4 <__multiply+0x14c>)
 800bec2:	4845      	ldr	r0, [pc, #276]	; (800bfd8 <__multiply+0x150>)
 800bec4:	f240 115d 	movw	r1, #349	; 0x15d
 800bec8:	f7fe fc3c 	bl	800a744 <__assert_func>
 800becc:	f100 0514 	add.w	r5, r0, #20
 800bed0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bed4:	462b      	mov	r3, r5
 800bed6:	2200      	movs	r2, #0
 800bed8:	4543      	cmp	r3, r8
 800beda:	d321      	bcc.n	800bf20 <__multiply+0x98>
 800bedc:	f104 0314 	add.w	r3, r4, #20
 800bee0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bee4:	f109 0314 	add.w	r3, r9, #20
 800bee8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800beec:	9202      	str	r2, [sp, #8]
 800beee:	1b3a      	subs	r2, r7, r4
 800bef0:	3a15      	subs	r2, #21
 800bef2:	f022 0203 	bic.w	r2, r2, #3
 800bef6:	3204      	adds	r2, #4
 800bef8:	f104 0115 	add.w	r1, r4, #21
 800befc:	428f      	cmp	r7, r1
 800befe:	bf38      	it	cc
 800bf00:	2204      	movcc	r2, #4
 800bf02:	9201      	str	r2, [sp, #4]
 800bf04:	9a02      	ldr	r2, [sp, #8]
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d80c      	bhi.n	800bf26 <__multiply+0x9e>
 800bf0c:	2e00      	cmp	r6, #0
 800bf0e:	dd03      	ble.n	800bf18 <__multiply+0x90>
 800bf10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d05a      	beq.n	800bfce <__multiply+0x146>
 800bf18:	6106      	str	r6, [r0, #16]
 800bf1a:	b005      	add	sp, #20
 800bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf20:	f843 2b04 	str.w	r2, [r3], #4
 800bf24:	e7d8      	b.n	800bed8 <__multiply+0x50>
 800bf26:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf2a:	f1ba 0f00 	cmp.w	sl, #0
 800bf2e:	d024      	beq.n	800bf7a <__multiply+0xf2>
 800bf30:	f104 0e14 	add.w	lr, r4, #20
 800bf34:	46a9      	mov	r9, r5
 800bf36:	f04f 0c00 	mov.w	ip, #0
 800bf3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf3e:	f8d9 1000 	ldr.w	r1, [r9]
 800bf42:	fa1f fb82 	uxth.w	fp, r2
 800bf46:	b289      	uxth	r1, r1
 800bf48:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf50:	f8d9 2000 	ldr.w	r2, [r9]
 800bf54:	4461      	add	r1, ip
 800bf56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf62:	b289      	uxth	r1, r1
 800bf64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf68:	4577      	cmp	r7, lr
 800bf6a:	f849 1b04 	str.w	r1, [r9], #4
 800bf6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf72:	d8e2      	bhi.n	800bf3a <__multiply+0xb2>
 800bf74:	9a01      	ldr	r2, [sp, #4]
 800bf76:	f845 c002 	str.w	ip, [r5, r2]
 800bf7a:	9a03      	ldr	r2, [sp, #12]
 800bf7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf80:	3304      	adds	r3, #4
 800bf82:	f1b9 0f00 	cmp.w	r9, #0
 800bf86:	d020      	beq.n	800bfca <__multiply+0x142>
 800bf88:	6829      	ldr	r1, [r5, #0]
 800bf8a:	f104 0c14 	add.w	ip, r4, #20
 800bf8e:	46ae      	mov	lr, r5
 800bf90:	f04f 0a00 	mov.w	sl, #0
 800bf94:	f8bc b000 	ldrh.w	fp, [ip]
 800bf98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf9c:	fb09 220b 	mla	r2, r9, fp, r2
 800bfa0:	4492      	add	sl, r2
 800bfa2:	b289      	uxth	r1, r1
 800bfa4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bfa8:	f84e 1b04 	str.w	r1, [lr], #4
 800bfac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bfb0:	f8be 1000 	ldrh.w	r1, [lr]
 800bfb4:	0c12      	lsrs	r2, r2, #16
 800bfb6:	fb09 1102 	mla	r1, r9, r2, r1
 800bfba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bfbe:	4567      	cmp	r7, ip
 800bfc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfc4:	d8e6      	bhi.n	800bf94 <__multiply+0x10c>
 800bfc6:	9a01      	ldr	r2, [sp, #4]
 800bfc8:	50a9      	str	r1, [r5, r2]
 800bfca:	3504      	adds	r5, #4
 800bfcc:	e79a      	b.n	800bf04 <__multiply+0x7c>
 800bfce:	3e01      	subs	r6, #1
 800bfd0:	e79c      	b.n	800bf0c <__multiply+0x84>
 800bfd2:	bf00      	nop
 800bfd4:	0800d928 	.word	0x0800d928
 800bfd8:	0800d9b4 	.word	0x0800d9b4

0800bfdc <__pow5mult>:
 800bfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfe0:	4615      	mov	r5, r2
 800bfe2:	f012 0203 	ands.w	r2, r2, #3
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	460f      	mov	r7, r1
 800bfea:	d007      	beq.n	800bffc <__pow5mult+0x20>
 800bfec:	4c25      	ldr	r4, [pc, #148]	; (800c084 <__pow5mult+0xa8>)
 800bfee:	3a01      	subs	r2, #1
 800bff0:	2300      	movs	r3, #0
 800bff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bff6:	f7ff fe51 	bl	800bc9c <__multadd>
 800bffa:	4607      	mov	r7, r0
 800bffc:	10ad      	asrs	r5, r5, #2
 800bffe:	d03d      	beq.n	800c07c <__pow5mult+0xa0>
 800c000:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c002:	b97c      	cbnz	r4, 800c024 <__pow5mult+0x48>
 800c004:	2010      	movs	r0, #16
 800c006:	f7fc fc91 	bl	800892c <malloc>
 800c00a:	4602      	mov	r2, r0
 800c00c:	6270      	str	r0, [r6, #36]	; 0x24
 800c00e:	b928      	cbnz	r0, 800c01c <__pow5mult+0x40>
 800c010:	4b1d      	ldr	r3, [pc, #116]	; (800c088 <__pow5mult+0xac>)
 800c012:	481e      	ldr	r0, [pc, #120]	; (800c08c <__pow5mult+0xb0>)
 800c014:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c018:	f7fe fb94 	bl	800a744 <__assert_func>
 800c01c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c020:	6004      	str	r4, [r0, #0]
 800c022:	60c4      	str	r4, [r0, #12]
 800c024:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c02c:	b94c      	cbnz	r4, 800c042 <__pow5mult+0x66>
 800c02e:	f240 2171 	movw	r1, #625	; 0x271
 800c032:	4630      	mov	r0, r6
 800c034:	f7ff ff12 	bl	800be5c <__i2b>
 800c038:	2300      	movs	r3, #0
 800c03a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c03e:	4604      	mov	r4, r0
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	f04f 0900 	mov.w	r9, #0
 800c046:	07eb      	lsls	r3, r5, #31
 800c048:	d50a      	bpl.n	800c060 <__pow5mult+0x84>
 800c04a:	4639      	mov	r1, r7
 800c04c:	4622      	mov	r2, r4
 800c04e:	4630      	mov	r0, r6
 800c050:	f7ff ff1a 	bl	800be88 <__multiply>
 800c054:	4639      	mov	r1, r7
 800c056:	4680      	mov	r8, r0
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff fdfd 	bl	800bc58 <_Bfree>
 800c05e:	4647      	mov	r7, r8
 800c060:	106d      	asrs	r5, r5, #1
 800c062:	d00b      	beq.n	800c07c <__pow5mult+0xa0>
 800c064:	6820      	ldr	r0, [r4, #0]
 800c066:	b938      	cbnz	r0, 800c078 <__pow5mult+0x9c>
 800c068:	4622      	mov	r2, r4
 800c06a:	4621      	mov	r1, r4
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7ff ff0b 	bl	800be88 <__multiply>
 800c072:	6020      	str	r0, [r4, #0]
 800c074:	f8c0 9000 	str.w	r9, [r0]
 800c078:	4604      	mov	r4, r0
 800c07a:	e7e4      	b.n	800c046 <__pow5mult+0x6a>
 800c07c:	4638      	mov	r0, r7
 800c07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c082:	bf00      	nop
 800c084:	0800db00 	.word	0x0800db00
 800c088:	0800d810 	.word	0x0800d810
 800c08c:	0800d9b4 	.word	0x0800d9b4

0800c090 <__lshift>:
 800c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	460c      	mov	r4, r1
 800c096:	6849      	ldr	r1, [r1, #4]
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c09e:	68a3      	ldr	r3, [r4, #8]
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	4691      	mov	r9, r2
 800c0a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0a8:	f108 0601 	add.w	r6, r8, #1
 800c0ac:	42b3      	cmp	r3, r6
 800c0ae:	db0b      	blt.n	800c0c8 <__lshift+0x38>
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f7ff fd91 	bl	800bbd8 <_Balloc>
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	b948      	cbnz	r0, 800c0ce <__lshift+0x3e>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	4b2a      	ldr	r3, [pc, #168]	; (800c168 <__lshift+0xd8>)
 800c0be:	482b      	ldr	r0, [pc, #172]	; (800c16c <__lshift+0xdc>)
 800c0c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c0c4:	f7fe fb3e 	bl	800a744 <__assert_func>
 800c0c8:	3101      	adds	r1, #1
 800c0ca:	005b      	lsls	r3, r3, #1
 800c0cc:	e7ee      	b.n	800c0ac <__lshift+0x1c>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f100 0114 	add.w	r1, r0, #20
 800c0d4:	f100 0210 	add.w	r2, r0, #16
 800c0d8:	4618      	mov	r0, r3
 800c0da:	4553      	cmp	r3, sl
 800c0dc:	db37      	blt.n	800c14e <__lshift+0xbe>
 800c0de:	6920      	ldr	r0, [r4, #16]
 800c0e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0e4:	f104 0314 	add.w	r3, r4, #20
 800c0e8:	f019 091f 	ands.w	r9, r9, #31
 800c0ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c0f4:	d02f      	beq.n	800c156 <__lshift+0xc6>
 800c0f6:	f1c9 0e20 	rsb	lr, r9, #32
 800c0fa:	468a      	mov	sl, r1
 800c0fc:	f04f 0c00 	mov.w	ip, #0
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	fa02 f209 	lsl.w	r2, r2, r9
 800c106:	ea42 020c 	orr.w	r2, r2, ip
 800c10a:	f84a 2b04 	str.w	r2, [sl], #4
 800c10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c112:	4298      	cmp	r0, r3
 800c114:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c118:	d8f2      	bhi.n	800c100 <__lshift+0x70>
 800c11a:	1b03      	subs	r3, r0, r4
 800c11c:	3b15      	subs	r3, #21
 800c11e:	f023 0303 	bic.w	r3, r3, #3
 800c122:	3304      	adds	r3, #4
 800c124:	f104 0215 	add.w	r2, r4, #21
 800c128:	4290      	cmp	r0, r2
 800c12a:	bf38      	it	cc
 800c12c:	2304      	movcc	r3, #4
 800c12e:	f841 c003 	str.w	ip, [r1, r3]
 800c132:	f1bc 0f00 	cmp.w	ip, #0
 800c136:	d001      	beq.n	800c13c <__lshift+0xac>
 800c138:	f108 0602 	add.w	r6, r8, #2
 800c13c:	3e01      	subs	r6, #1
 800c13e:	4638      	mov	r0, r7
 800c140:	612e      	str	r6, [r5, #16]
 800c142:	4621      	mov	r1, r4
 800c144:	f7ff fd88 	bl	800bc58 <_Bfree>
 800c148:	4628      	mov	r0, r5
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c152:	3301      	adds	r3, #1
 800c154:	e7c1      	b.n	800c0da <__lshift+0x4a>
 800c156:	3904      	subs	r1, #4
 800c158:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c160:	4298      	cmp	r0, r3
 800c162:	d8f9      	bhi.n	800c158 <__lshift+0xc8>
 800c164:	e7ea      	b.n	800c13c <__lshift+0xac>
 800c166:	bf00      	nop
 800c168:	0800d928 	.word	0x0800d928
 800c16c:	0800d9b4 	.word	0x0800d9b4

0800c170 <__mcmp>:
 800c170:	b530      	push	{r4, r5, lr}
 800c172:	6902      	ldr	r2, [r0, #16]
 800c174:	690c      	ldr	r4, [r1, #16]
 800c176:	1b12      	subs	r2, r2, r4
 800c178:	d10e      	bne.n	800c198 <__mcmp+0x28>
 800c17a:	f100 0314 	add.w	r3, r0, #20
 800c17e:	3114      	adds	r1, #20
 800c180:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c184:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c188:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c18c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c190:	42a5      	cmp	r5, r4
 800c192:	d003      	beq.n	800c19c <__mcmp+0x2c>
 800c194:	d305      	bcc.n	800c1a2 <__mcmp+0x32>
 800c196:	2201      	movs	r2, #1
 800c198:	4610      	mov	r0, r2
 800c19a:	bd30      	pop	{r4, r5, pc}
 800c19c:	4283      	cmp	r3, r0
 800c19e:	d3f3      	bcc.n	800c188 <__mcmp+0x18>
 800c1a0:	e7fa      	b.n	800c198 <__mcmp+0x28>
 800c1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a6:	e7f7      	b.n	800c198 <__mcmp+0x28>

0800c1a8 <__mdiff>:
 800c1a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	460c      	mov	r4, r1
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4690      	mov	r8, r2
 800c1b6:	f7ff ffdb 	bl	800c170 <__mcmp>
 800c1ba:	1e05      	subs	r5, r0, #0
 800c1bc:	d110      	bne.n	800c1e0 <__mdiff+0x38>
 800c1be:	4629      	mov	r1, r5
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f7ff fd09 	bl	800bbd8 <_Balloc>
 800c1c6:	b930      	cbnz	r0, 800c1d6 <__mdiff+0x2e>
 800c1c8:	4b3a      	ldr	r3, [pc, #232]	; (800c2b4 <__mdiff+0x10c>)
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	f240 2132 	movw	r1, #562	; 0x232
 800c1d0:	4839      	ldr	r0, [pc, #228]	; (800c2b8 <__mdiff+0x110>)
 800c1d2:	f7fe fab7 	bl	800a744 <__assert_func>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	bfa4      	itt	ge
 800c1e2:	4643      	movge	r3, r8
 800c1e4:	46a0      	movge	r8, r4
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1ec:	bfa6      	itte	ge
 800c1ee:	461c      	movge	r4, r3
 800c1f0:	2500      	movge	r5, #0
 800c1f2:	2501      	movlt	r5, #1
 800c1f4:	f7ff fcf0 	bl	800bbd8 <_Balloc>
 800c1f8:	b920      	cbnz	r0, 800c204 <__mdiff+0x5c>
 800c1fa:	4b2e      	ldr	r3, [pc, #184]	; (800c2b4 <__mdiff+0x10c>)
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c202:	e7e5      	b.n	800c1d0 <__mdiff+0x28>
 800c204:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c208:	6926      	ldr	r6, [r4, #16]
 800c20a:	60c5      	str	r5, [r0, #12]
 800c20c:	f104 0914 	add.w	r9, r4, #20
 800c210:	f108 0514 	add.w	r5, r8, #20
 800c214:	f100 0e14 	add.w	lr, r0, #20
 800c218:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c21c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c220:	f108 0210 	add.w	r2, r8, #16
 800c224:	46f2      	mov	sl, lr
 800c226:	2100      	movs	r1, #0
 800c228:	f859 3b04 	ldr.w	r3, [r9], #4
 800c22c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c230:	fa1f f883 	uxth.w	r8, r3
 800c234:	fa11 f18b 	uxtah	r1, r1, fp
 800c238:	0c1b      	lsrs	r3, r3, #16
 800c23a:	eba1 0808 	sub.w	r8, r1, r8
 800c23e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c242:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c246:	fa1f f888 	uxth.w	r8, r8
 800c24a:	1419      	asrs	r1, r3, #16
 800c24c:	454e      	cmp	r6, r9
 800c24e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c252:	f84a 3b04 	str.w	r3, [sl], #4
 800c256:	d8e7      	bhi.n	800c228 <__mdiff+0x80>
 800c258:	1b33      	subs	r3, r6, r4
 800c25a:	3b15      	subs	r3, #21
 800c25c:	f023 0303 	bic.w	r3, r3, #3
 800c260:	3304      	adds	r3, #4
 800c262:	3415      	adds	r4, #21
 800c264:	42a6      	cmp	r6, r4
 800c266:	bf38      	it	cc
 800c268:	2304      	movcc	r3, #4
 800c26a:	441d      	add	r5, r3
 800c26c:	4473      	add	r3, lr
 800c26e:	469e      	mov	lr, r3
 800c270:	462e      	mov	r6, r5
 800c272:	4566      	cmp	r6, ip
 800c274:	d30e      	bcc.n	800c294 <__mdiff+0xec>
 800c276:	f10c 0203 	add.w	r2, ip, #3
 800c27a:	1b52      	subs	r2, r2, r5
 800c27c:	f022 0203 	bic.w	r2, r2, #3
 800c280:	3d03      	subs	r5, #3
 800c282:	45ac      	cmp	ip, r5
 800c284:	bf38      	it	cc
 800c286:	2200      	movcc	r2, #0
 800c288:	441a      	add	r2, r3
 800c28a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c28e:	b17b      	cbz	r3, 800c2b0 <__mdiff+0x108>
 800c290:	6107      	str	r7, [r0, #16]
 800c292:	e7a3      	b.n	800c1dc <__mdiff+0x34>
 800c294:	f856 8b04 	ldr.w	r8, [r6], #4
 800c298:	fa11 f288 	uxtah	r2, r1, r8
 800c29c:	1414      	asrs	r4, r2, #16
 800c29e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c2a2:	b292      	uxth	r2, r2
 800c2a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c2a8:	f84e 2b04 	str.w	r2, [lr], #4
 800c2ac:	1421      	asrs	r1, r4, #16
 800c2ae:	e7e0      	b.n	800c272 <__mdiff+0xca>
 800c2b0:	3f01      	subs	r7, #1
 800c2b2:	e7ea      	b.n	800c28a <__mdiff+0xe2>
 800c2b4:	0800d928 	.word	0x0800d928
 800c2b8:	0800d9b4 	.word	0x0800d9b4

0800c2bc <__ulp>:
 800c2bc:	b082      	sub	sp, #8
 800c2be:	ed8d 0b00 	vstr	d0, [sp]
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	4912      	ldr	r1, [pc, #72]	; (800c310 <__ulp+0x54>)
 800c2c6:	4019      	ands	r1, r3
 800c2c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c2cc:	2900      	cmp	r1, #0
 800c2ce:	dd05      	ble.n	800c2dc <__ulp+0x20>
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	ec43 2b10 	vmov	d0, r2, r3
 800c2d8:	b002      	add	sp, #8
 800c2da:	4770      	bx	lr
 800c2dc:	4249      	negs	r1, r1
 800c2de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c2e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c2e6:	f04f 0200 	mov.w	r2, #0
 800c2ea:	f04f 0300 	mov.w	r3, #0
 800c2ee:	da04      	bge.n	800c2fa <__ulp+0x3e>
 800c2f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c2f4:	fa41 f300 	asr.w	r3, r1, r0
 800c2f8:	e7ec      	b.n	800c2d4 <__ulp+0x18>
 800c2fa:	f1a0 0114 	sub.w	r1, r0, #20
 800c2fe:	291e      	cmp	r1, #30
 800c300:	bfda      	itte	le
 800c302:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c306:	fa20 f101 	lsrle.w	r1, r0, r1
 800c30a:	2101      	movgt	r1, #1
 800c30c:	460a      	mov	r2, r1
 800c30e:	e7e1      	b.n	800c2d4 <__ulp+0x18>
 800c310:	7ff00000 	.word	0x7ff00000

0800c314 <__b2d>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	6905      	ldr	r5, [r0, #16]
 800c318:	f100 0714 	add.w	r7, r0, #20
 800c31c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c320:	1f2e      	subs	r6, r5, #4
 800c322:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff fd48 	bl	800bdbc <__hi0bits>
 800c32c:	f1c0 0320 	rsb	r3, r0, #32
 800c330:	280a      	cmp	r0, #10
 800c332:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c3b0 <__b2d+0x9c>
 800c336:	600b      	str	r3, [r1, #0]
 800c338:	dc14      	bgt.n	800c364 <__b2d+0x50>
 800c33a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c33e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c342:	42b7      	cmp	r7, r6
 800c344:	ea41 030c 	orr.w	r3, r1, ip
 800c348:	bf34      	ite	cc
 800c34a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c34e:	2100      	movcs	r1, #0
 800c350:	3015      	adds	r0, #21
 800c352:	fa04 f000 	lsl.w	r0, r4, r0
 800c356:	fa21 f10e 	lsr.w	r1, r1, lr
 800c35a:	ea40 0201 	orr.w	r2, r0, r1
 800c35e:	ec43 2b10 	vmov	d0, r2, r3
 800c362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c364:	42b7      	cmp	r7, r6
 800c366:	bf3a      	itte	cc
 800c368:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c36c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c370:	2100      	movcs	r1, #0
 800c372:	380b      	subs	r0, #11
 800c374:	d017      	beq.n	800c3a6 <__b2d+0x92>
 800c376:	f1c0 0c20 	rsb	ip, r0, #32
 800c37a:	fa04 f500 	lsl.w	r5, r4, r0
 800c37e:	42be      	cmp	r6, r7
 800c380:	fa21 f40c 	lsr.w	r4, r1, ip
 800c384:	ea45 0504 	orr.w	r5, r5, r4
 800c388:	bf8c      	ite	hi
 800c38a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c38e:	2400      	movls	r4, #0
 800c390:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c394:	fa01 f000 	lsl.w	r0, r1, r0
 800c398:	fa24 f40c 	lsr.w	r4, r4, ip
 800c39c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c3a0:	ea40 0204 	orr.w	r2, r0, r4
 800c3a4:	e7db      	b.n	800c35e <__b2d+0x4a>
 800c3a6:	ea44 030c 	orr.w	r3, r4, ip
 800c3aa:	460a      	mov	r2, r1
 800c3ac:	e7d7      	b.n	800c35e <__b2d+0x4a>
 800c3ae:	bf00      	nop
 800c3b0:	3ff00000 	.word	0x3ff00000

0800c3b4 <__d2b>:
 800c3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3b8:	4689      	mov	r9, r1
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	ec57 6b10 	vmov	r6, r7, d0
 800c3c0:	4690      	mov	r8, r2
 800c3c2:	f7ff fc09 	bl	800bbd8 <_Balloc>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	b930      	cbnz	r0, 800c3d8 <__d2b+0x24>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	4b25      	ldr	r3, [pc, #148]	; (800c464 <__d2b+0xb0>)
 800c3ce:	4826      	ldr	r0, [pc, #152]	; (800c468 <__d2b+0xb4>)
 800c3d0:	f240 310a 	movw	r1, #778	; 0x30a
 800c3d4:	f7fe f9b6 	bl	800a744 <__assert_func>
 800c3d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c3dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3e0:	bb35      	cbnz	r5, 800c430 <__d2b+0x7c>
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	d028      	beq.n	800c43a <__d2b+0x86>
 800c3e8:	4668      	mov	r0, sp
 800c3ea:	9600      	str	r6, [sp, #0]
 800c3ec:	f7ff fd06 	bl	800bdfc <__lo0bits>
 800c3f0:	9900      	ldr	r1, [sp, #0]
 800c3f2:	b300      	cbz	r0, 800c436 <__d2b+0x82>
 800c3f4:	9a01      	ldr	r2, [sp, #4]
 800c3f6:	f1c0 0320 	rsb	r3, r0, #32
 800c3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3fe:	430b      	orrs	r3, r1
 800c400:	40c2      	lsrs	r2, r0
 800c402:	6163      	str	r3, [r4, #20]
 800c404:	9201      	str	r2, [sp, #4]
 800c406:	9b01      	ldr	r3, [sp, #4]
 800c408:	61a3      	str	r3, [r4, #24]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bf14      	ite	ne
 800c40e:	2202      	movne	r2, #2
 800c410:	2201      	moveq	r2, #1
 800c412:	6122      	str	r2, [r4, #16]
 800c414:	b1d5      	cbz	r5, 800c44c <__d2b+0x98>
 800c416:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c41a:	4405      	add	r5, r0
 800c41c:	f8c9 5000 	str.w	r5, [r9]
 800c420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c424:	f8c8 0000 	str.w	r0, [r8]
 800c428:	4620      	mov	r0, r4
 800c42a:	b003      	add	sp, #12
 800c42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c434:	e7d5      	b.n	800c3e2 <__d2b+0x2e>
 800c436:	6161      	str	r1, [r4, #20]
 800c438:	e7e5      	b.n	800c406 <__d2b+0x52>
 800c43a:	a801      	add	r0, sp, #4
 800c43c:	f7ff fcde 	bl	800bdfc <__lo0bits>
 800c440:	9b01      	ldr	r3, [sp, #4]
 800c442:	6163      	str	r3, [r4, #20]
 800c444:	2201      	movs	r2, #1
 800c446:	6122      	str	r2, [r4, #16]
 800c448:	3020      	adds	r0, #32
 800c44a:	e7e3      	b.n	800c414 <__d2b+0x60>
 800c44c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c450:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c454:	f8c9 0000 	str.w	r0, [r9]
 800c458:	6918      	ldr	r0, [r3, #16]
 800c45a:	f7ff fcaf 	bl	800bdbc <__hi0bits>
 800c45e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c462:	e7df      	b.n	800c424 <__d2b+0x70>
 800c464:	0800d928 	.word	0x0800d928
 800c468:	0800d9b4 	.word	0x0800d9b4

0800c46c <__ratio>:
 800c46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	4688      	mov	r8, r1
 800c472:	4669      	mov	r1, sp
 800c474:	4681      	mov	r9, r0
 800c476:	f7ff ff4d 	bl	800c314 <__b2d>
 800c47a:	a901      	add	r1, sp, #4
 800c47c:	4640      	mov	r0, r8
 800c47e:	ec55 4b10 	vmov	r4, r5, d0
 800c482:	f7ff ff47 	bl	800c314 <__b2d>
 800c486:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c48a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c48e:	eba3 0c02 	sub.w	ip, r3, r2
 800c492:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c496:	1a9b      	subs	r3, r3, r2
 800c498:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c49c:	ec51 0b10 	vmov	r0, r1, d0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bfd6      	itet	le
 800c4a4:	460a      	movle	r2, r1
 800c4a6:	462a      	movgt	r2, r5
 800c4a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c4ac:	468b      	mov	fp, r1
 800c4ae:	462f      	mov	r7, r5
 800c4b0:	bfd4      	ite	le
 800c4b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c4b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	ee10 2a10 	vmov	r2, s0
 800c4c0:	465b      	mov	r3, fp
 800c4c2:	4639      	mov	r1, r7
 800c4c4:	f7f4 f9f2 	bl	80008ac <__aeabi_ddiv>
 800c4c8:	ec41 0b10 	vmov	d0, r0, r1
 800c4cc:	b003      	add	sp, #12
 800c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c4d2 <__copybits>:
 800c4d2:	3901      	subs	r1, #1
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	1149      	asrs	r1, r1, #5
 800c4d8:	6914      	ldr	r4, [r2, #16]
 800c4da:	3101      	adds	r1, #1
 800c4dc:	f102 0314 	add.w	r3, r2, #20
 800c4e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4e8:	1f05      	subs	r5, r0, #4
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	d30c      	bcc.n	800c508 <__copybits+0x36>
 800c4ee:	1aa3      	subs	r3, r4, r2
 800c4f0:	3b11      	subs	r3, #17
 800c4f2:	f023 0303 	bic.w	r3, r3, #3
 800c4f6:	3211      	adds	r2, #17
 800c4f8:	42a2      	cmp	r2, r4
 800c4fa:	bf88      	it	hi
 800c4fc:	2300      	movhi	r3, #0
 800c4fe:	4418      	add	r0, r3
 800c500:	2300      	movs	r3, #0
 800c502:	4288      	cmp	r0, r1
 800c504:	d305      	bcc.n	800c512 <__copybits+0x40>
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	f853 6b04 	ldr.w	r6, [r3], #4
 800c50c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c510:	e7eb      	b.n	800c4ea <__copybits+0x18>
 800c512:	f840 3b04 	str.w	r3, [r0], #4
 800c516:	e7f4      	b.n	800c502 <__copybits+0x30>

0800c518 <__any_on>:
 800c518:	f100 0214 	add.w	r2, r0, #20
 800c51c:	6900      	ldr	r0, [r0, #16]
 800c51e:	114b      	asrs	r3, r1, #5
 800c520:	4298      	cmp	r0, r3
 800c522:	b510      	push	{r4, lr}
 800c524:	db11      	blt.n	800c54a <__any_on+0x32>
 800c526:	dd0a      	ble.n	800c53e <__any_on+0x26>
 800c528:	f011 011f 	ands.w	r1, r1, #31
 800c52c:	d007      	beq.n	800c53e <__any_on+0x26>
 800c52e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c532:	fa24 f001 	lsr.w	r0, r4, r1
 800c536:	fa00 f101 	lsl.w	r1, r0, r1
 800c53a:	428c      	cmp	r4, r1
 800c53c:	d10b      	bne.n	800c556 <__any_on+0x3e>
 800c53e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c542:	4293      	cmp	r3, r2
 800c544:	d803      	bhi.n	800c54e <__any_on+0x36>
 800c546:	2000      	movs	r0, #0
 800c548:	bd10      	pop	{r4, pc}
 800c54a:	4603      	mov	r3, r0
 800c54c:	e7f7      	b.n	800c53e <__any_on+0x26>
 800c54e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c552:	2900      	cmp	r1, #0
 800c554:	d0f5      	beq.n	800c542 <__any_on+0x2a>
 800c556:	2001      	movs	r0, #1
 800c558:	e7f6      	b.n	800c548 <__any_on+0x30>

0800c55a <_calloc_r>:
 800c55a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55c:	fba1 2402 	umull	r2, r4, r1, r2
 800c560:	b94c      	cbnz	r4, 800c576 <_calloc_r+0x1c>
 800c562:	4611      	mov	r1, r2
 800c564:	9201      	str	r2, [sp, #4]
 800c566:	f7fc fa65 	bl	8008a34 <_malloc_r>
 800c56a:	9a01      	ldr	r2, [sp, #4]
 800c56c:	4605      	mov	r5, r0
 800c56e:	b930      	cbnz	r0, 800c57e <_calloc_r+0x24>
 800c570:	4628      	mov	r0, r5
 800c572:	b003      	add	sp, #12
 800c574:	bd30      	pop	{r4, r5, pc}
 800c576:	220c      	movs	r2, #12
 800c578:	6002      	str	r2, [r0, #0]
 800c57a:	2500      	movs	r5, #0
 800c57c:	e7f8      	b.n	800c570 <_calloc_r+0x16>
 800c57e:	4621      	mov	r1, r4
 800c580:	f7fc f9e4 	bl	800894c <memset>
 800c584:	e7f4      	b.n	800c570 <_calloc_r+0x16>

0800c586 <__ssputs_r>:
 800c586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c58a:	688e      	ldr	r6, [r1, #8]
 800c58c:	429e      	cmp	r6, r3
 800c58e:	4682      	mov	sl, r0
 800c590:	460c      	mov	r4, r1
 800c592:	4690      	mov	r8, r2
 800c594:	461f      	mov	r7, r3
 800c596:	d838      	bhi.n	800c60a <__ssputs_r+0x84>
 800c598:	898a      	ldrh	r2, [r1, #12]
 800c59a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c59e:	d032      	beq.n	800c606 <__ssputs_r+0x80>
 800c5a0:	6825      	ldr	r5, [r4, #0]
 800c5a2:	6909      	ldr	r1, [r1, #16]
 800c5a4:	eba5 0901 	sub.w	r9, r5, r1
 800c5a8:	6965      	ldr	r5, [r4, #20]
 800c5aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	444b      	add	r3, r9
 800c5b6:	106d      	asrs	r5, r5, #1
 800c5b8:	429d      	cmp	r5, r3
 800c5ba:	bf38      	it	cc
 800c5bc:	461d      	movcc	r5, r3
 800c5be:	0553      	lsls	r3, r2, #21
 800c5c0:	d531      	bpl.n	800c626 <__ssputs_r+0xa0>
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	f7fc fa36 	bl	8008a34 <_malloc_r>
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	b950      	cbnz	r0, 800c5e2 <__ssputs_r+0x5c>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	f8ca 3000 	str.w	r3, [sl]
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d8:	81a3      	strh	r3, [r4, #12]
 800c5da:	f04f 30ff 	mov.w	r0, #4294967295
 800c5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e2:	6921      	ldr	r1, [r4, #16]
 800c5e4:	464a      	mov	r2, r9
 800c5e6:	f7ff fadd 	bl	800bba4 <memcpy>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f4:	81a3      	strh	r3, [r4, #12]
 800c5f6:	6126      	str	r6, [r4, #16]
 800c5f8:	6165      	str	r5, [r4, #20]
 800c5fa:	444e      	add	r6, r9
 800c5fc:	eba5 0509 	sub.w	r5, r5, r9
 800c600:	6026      	str	r6, [r4, #0]
 800c602:	60a5      	str	r5, [r4, #8]
 800c604:	463e      	mov	r6, r7
 800c606:	42be      	cmp	r6, r7
 800c608:	d900      	bls.n	800c60c <__ssputs_r+0x86>
 800c60a:	463e      	mov	r6, r7
 800c60c:	6820      	ldr	r0, [r4, #0]
 800c60e:	4632      	mov	r2, r6
 800c610:	4641      	mov	r1, r8
 800c612:	f000 fd7f 	bl	800d114 <memmove>
 800c616:	68a3      	ldr	r3, [r4, #8]
 800c618:	1b9b      	subs	r3, r3, r6
 800c61a:	60a3      	str	r3, [r4, #8]
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	4433      	add	r3, r6
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	2000      	movs	r0, #0
 800c624:	e7db      	b.n	800c5de <__ssputs_r+0x58>
 800c626:	462a      	mov	r2, r5
 800c628:	f000 fd8e 	bl	800d148 <_realloc_r>
 800c62c:	4606      	mov	r6, r0
 800c62e:	2800      	cmp	r0, #0
 800c630:	d1e1      	bne.n	800c5f6 <__ssputs_r+0x70>
 800c632:	6921      	ldr	r1, [r4, #16]
 800c634:	4650      	mov	r0, sl
 800c636:	f7fc f991 	bl	800895c <_free_r>
 800c63a:	e7c7      	b.n	800c5cc <__ssputs_r+0x46>

0800c63c <_svfiprintf_r>:
 800c63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c640:	4698      	mov	r8, r3
 800c642:	898b      	ldrh	r3, [r1, #12]
 800c644:	061b      	lsls	r3, r3, #24
 800c646:	b09d      	sub	sp, #116	; 0x74
 800c648:	4607      	mov	r7, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	4614      	mov	r4, r2
 800c64e:	d50e      	bpl.n	800c66e <_svfiprintf_r+0x32>
 800c650:	690b      	ldr	r3, [r1, #16]
 800c652:	b963      	cbnz	r3, 800c66e <_svfiprintf_r+0x32>
 800c654:	2140      	movs	r1, #64	; 0x40
 800c656:	f7fc f9ed 	bl	8008a34 <_malloc_r>
 800c65a:	6028      	str	r0, [r5, #0]
 800c65c:	6128      	str	r0, [r5, #16]
 800c65e:	b920      	cbnz	r0, 800c66a <_svfiprintf_r+0x2e>
 800c660:	230c      	movs	r3, #12
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	f04f 30ff 	mov.w	r0, #4294967295
 800c668:	e0d1      	b.n	800c80e <_svfiprintf_r+0x1d2>
 800c66a:	2340      	movs	r3, #64	; 0x40
 800c66c:	616b      	str	r3, [r5, #20]
 800c66e:	2300      	movs	r3, #0
 800c670:	9309      	str	r3, [sp, #36]	; 0x24
 800c672:	2320      	movs	r3, #32
 800c674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c678:	f8cd 800c 	str.w	r8, [sp, #12]
 800c67c:	2330      	movs	r3, #48	; 0x30
 800c67e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c828 <_svfiprintf_r+0x1ec>
 800c682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c686:	f04f 0901 	mov.w	r9, #1
 800c68a:	4623      	mov	r3, r4
 800c68c:	469a      	mov	sl, r3
 800c68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c692:	b10a      	cbz	r2, 800c698 <_svfiprintf_r+0x5c>
 800c694:	2a25      	cmp	r2, #37	; 0x25
 800c696:	d1f9      	bne.n	800c68c <_svfiprintf_r+0x50>
 800c698:	ebba 0b04 	subs.w	fp, sl, r4
 800c69c:	d00b      	beq.n	800c6b6 <_svfiprintf_r+0x7a>
 800c69e:	465b      	mov	r3, fp
 800c6a0:	4622      	mov	r2, r4
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	f7ff ff6e 	bl	800c586 <__ssputs_r>
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	f000 80aa 	beq.w	800c804 <_svfiprintf_r+0x1c8>
 800c6b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b2:	445a      	add	r2, fp
 800c6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f000 80a2 	beq.w	800c804 <_svfiprintf_r+0x1c8>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ca:	f10a 0a01 	add.w	sl, sl, #1
 800c6ce:	9304      	str	r3, [sp, #16]
 800c6d0:	9307      	str	r3, [sp, #28]
 800c6d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c6d8:	4654      	mov	r4, sl
 800c6da:	2205      	movs	r2, #5
 800c6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e0:	4851      	ldr	r0, [pc, #324]	; (800c828 <_svfiprintf_r+0x1ec>)
 800c6e2:	f7f3 fdad 	bl	8000240 <memchr>
 800c6e6:	9a04      	ldr	r2, [sp, #16]
 800c6e8:	b9d8      	cbnz	r0, 800c722 <_svfiprintf_r+0xe6>
 800c6ea:	06d0      	lsls	r0, r2, #27
 800c6ec:	bf44      	itt	mi
 800c6ee:	2320      	movmi	r3, #32
 800c6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f4:	0711      	lsls	r1, r2, #28
 800c6f6:	bf44      	itt	mi
 800c6f8:	232b      	movmi	r3, #43	; 0x2b
 800c6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c702:	2b2a      	cmp	r3, #42	; 0x2a
 800c704:	d015      	beq.n	800c732 <_svfiprintf_r+0xf6>
 800c706:	9a07      	ldr	r2, [sp, #28]
 800c708:	4654      	mov	r4, sl
 800c70a:	2000      	movs	r0, #0
 800c70c:	f04f 0c0a 	mov.w	ip, #10
 800c710:	4621      	mov	r1, r4
 800c712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c716:	3b30      	subs	r3, #48	; 0x30
 800c718:	2b09      	cmp	r3, #9
 800c71a:	d94e      	bls.n	800c7ba <_svfiprintf_r+0x17e>
 800c71c:	b1b0      	cbz	r0, 800c74c <_svfiprintf_r+0x110>
 800c71e:	9207      	str	r2, [sp, #28]
 800c720:	e014      	b.n	800c74c <_svfiprintf_r+0x110>
 800c722:	eba0 0308 	sub.w	r3, r0, r8
 800c726:	fa09 f303 	lsl.w	r3, r9, r3
 800c72a:	4313      	orrs	r3, r2
 800c72c:	9304      	str	r3, [sp, #16]
 800c72e:	46a2      	mov	sl, r4
 800c730:	e7d2      	b.n	800c6d8 <_svfiprintf_r+0x9c>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	1d19      	adds	r1, r3, #4
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	9103      	str	r1, [sp, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	bfbb      	ittet	lt
 800c73e:	425b      	neglt	r3, r3
 800c740:	f042 0202 	orrlt.w	r2, r2, #2
 800c744:	9307      	strge	r3, [sp, #28]
 800c746:	9307      	strlt	r3, [sp, #28]
 800c748:	bfb8      	it	lt
 800c74a:	9204      	strlt	r2, [sp, #16]
 800c74c:	7823      	ldrb	r3, [r4, #0]
 800c74e:	2b2e      	cmp	r3, #46	; 0x2e
 800c750:	d10c      	bne.n	800c76c <_svfiprintf_r+0x130>
 800c752:	7863      	ldrb	r3, [r4, #1]
 800c754:	2b2a      	cmp	r3, #42	; 0x2a
 800c756:	d135      	bne.n	800c7c4 <_svfiprintf_r+0x188>
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	1d1a      	adds	r2, r3, #4
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	9203      	str	r2, [sp, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfb8      	it	lt
 800c764:	f04f 33ff 	movlt.w	r3, #4294967295
 800c768:	3402      	adds	r4, #2
 800c76a:	9305      	str	r3, [sp, #20]
 800c76c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c838 <_svfiprintf_r+0x1fc>
 800c770:	7821      	ldrb	r1, [r4, #0]
 800c772:	2203      	movs	r2, #3
 800c774:	4650      	mov	r0, sl
 800c776:	f7f3 fd63 	bl	8000240 <memchr>
 800c77a:	b140      	cbz	r0, 800c78e <_svfiprintf_r+0x152>
 800c77c:	2340      	movs	r3, #64	; 0x40
 800c77e:	eba0 000a 	sub.w	r0, r0, sl
 800c782:	fa03 f000 	lsl.w	r0, r3, r0
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	4303      	orrs	r3, r0
 800c78a:	3401      	adds	r4, #1
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c792:	4826      	ldr	r0, [pc, #152]	; (800c82c <_svfiprintf_r+0x1f0>)
 800c794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c798:	2206      	movs	r2, #6
 800c79a:	f7f3 fd51 	bl	8000240 <memchr>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d038      	beq.n	800c814 <_svfiprintf_r+0x1d8>
 800c7a2:	4b23      	ldr	r3, [pc, #140]	; (800c830 <_svfiprintf_r+0x1f4>)
 800c7a4:	bb1b      	cbnz	r3, 800c7ee <_svfiprintf_r+0x1b2>
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	3307      	adds	r3, #7
 800c7aa:	f023 0307 	bic.w	r3, r3, #7
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	9303      	str	r3, [sp, #12]
 800c7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b4:	4433      	add	r3, r6
 800c7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b8:	e767      	b.n	800c68a <_svfiprintf_r+0x4e>
 800c7ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7be:	460c      	mov	r4, r1
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	e7a5      	b.n	800c710 <_svfiprintf_r+0xd4>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	3401      	adds	r4, #1
 800c7c8:	9305      	str	r3, [sp, #20]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	f04f 0c0a 	mov.w	ip, #10
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7d6:	3a30      	subs	r2, #48	; 0x30
 800c7d8:	2a09      	cmp	r2, #9
 800c7da:	d903      	bls.n	800c7e4 <_svfiprintf_r+0x1a8>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0c5      	beq.n	800c76c <_svfiprintf_r+0x130>
 800c7e0:	9105      	str	r1, [sp, #20]
 800c7e2:	e7c3      	b.n	800c76c <_svfiprintf_r+0x130>
 800c7e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e7f0      	b.n	800c7d0 <_svfiprintf_r+0x194>
 800c7ee:	ab03      	add	r3, sp, #12
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	462a      	mov	r2, r5
 800c7f4:	4b0f      	ldr	r3, [pc, #60]	; (800c834 <_svfiprintf_r+0x1f8>)
 800c7f6:	a904      	add	r1, sp, #16
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7fc fa2f 	bl	8008c5c <_printf_float>
 800c7fe:	1c42      	adds	r2, r0, #1
 800c800:	4606      	mov	r6, r0
 800c802:	d1d6      	bne.n	800c7b2 <_svfiprintf_r+0x176>
 800c804:	89ab      	ldrh	r3, [r5, #12]
 800c806:	065b      	lsls	r3, r3, #25
 800c808:	f53f af2c 	bmi.w	800c664 <_svfiprintf_r+0x28>
 800c80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c80e:	b01d      	add	sp, #116	; 0x74
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c814:	ab03      	add	r3, sp, #12
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	462a      	mov	r2, r5
 800c81a:	4b06      	ldr	r3, [pc, #24]	; (800c834 <_svfiprintf_r+0x1f8>)
 800c81c:	a904      	add	r1, sp, #16
 800c81e:	4638      	mov	r0, r7
 800c820:	f7fc fcc0 	bl	80091a4 <_printf_i>
 800c824:	e7eb      	b.n	800c7fe <_svfiprintf_r+0x1c2>
 800c826:	bf00      	nop
 800c828:	0800db0c 	.word	0x0800db0c
 800c82c:	0800db16 	.word	0x0800db16
 800c830:	08008c5d 	.word	0x08008c5d
 800c834:	0800c587 	.word	0x0800c587
 800c838:	0800db12 	.word	0x0800db12

0800c83c <__sfputc_r>:
 800c83c:	6893      	ldr	r3, [r2, #8]
 800c83e:	3b01      	subs	r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	b410      	push	{r4}
 800c844:	6093      	str	r3, [r2, #8]
 800c846:	da08      	bge.n	800c85a <__sfputc_r+0x1e>
 800c848:	6994      	ldr	r4, [r2, #24]
 800c84a:	42a3      	cmp	r3, r4
 800c84c:	db01      	blt.n	800c852 <__sfputc_r+0x16>
 800c84e:	290a      	cmp	r1, #10
 800c850:	d103      	bne.n	800c85a <__sfputc_r+0x1e>
 800c852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c856:	f000 b967 	b.w	800cb28 <__swbuf_r>
 800c85a:	6813      	ldr	r3, [r2, #0]
 800c85c:	1c58      	adds	r0, r3, #1
 800c85e:	6010      	str	r0, [r2, #0]
 800c860:	7019      	strb	r1, [r3, #0]
 800c862:	4608      	mov	r0, r1
 800c864:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <__sfputs_r>:
 800c86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86c:	4606      	mov	r6, r0
 800c86e:	460f      	mov	r7, r1
 800c870:	4614      	mov	r4, r2
 800c872:	18d5      	adds	r5, r2, r3
 800c874:	42ac      	cmp	r4, r5
 800c876:	d101      	bne.n	800c87c <__sfputs_r+0x12>
 800c878:	2000      	movs	r0, #0
 800c87a:	e007      	b.n	800c88c <__sfputs_r+0x22>
 800c87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c880:	463a      	mov	r2, r7
 800c882:	4630      	mov	r0, r6
 800c884:	f7ff ffda 	bl	800c83c <__sfputc_r>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d1f3      	bne.n	800c874 <__sfputs_r+0xa>
 800c88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c890 <_vfiprintf_r>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	460d      	mov	r5, r1
 800c896:	b09d      	sub	sp, #116	; 0x74
 800c898:	4614      	mov	r4, r2
 800c89a:	4698      	mov	r8, r3
 800c89c:	4606      	mov	r6, r0
 800c89e:	b118      	cbz	r0, 800c8a8 <_vfiprintf_r+0x18>
 800c8a0:	6983      	ldr	r3, [r0, #24]
 800c8a2:	b90b      	cbnz	r3, 800c8a8 <_vfiprintf_r+0x18>
 800c8a4:	f000 fb30 	bl	800cf08 <__sinit>
 800c8a8:	4b89      	ldr	r3, [pc, #548]	; (800cad0 <_vfiprintf_r+0x240>)
 800c8aa:	429d      	cmp	r5, r3
 800c8ac:	d11b      	bne.n	800c8e6 <_vfiprintf_r+0x56>
 800c8ae:	6875      	ldr	r5, [r6, #4]
 800c8b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8b2:	07d9      	lsls	r1, r3, #31
 800c8b4:	d405      	bmi.n	800c8c2 <_vfiprintf_r+0x32>
 800c8b6:	89ab      	ldrh	r3, [r5, #12]
 800c8b8:	059a      	lsls	r2, r3, #22
 800c8ba:	d402      	bmi.n	800c8c2 <_vfiprintf_r+0x32>
 800c8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8be:	f000 fbc1 	bl	800d044 <__retarget_lock_acquire_recursive>
 800c8c2:	89ab      	ldrh	r3, [r5, #12]
 800c8c4:	071b      	lsls	r3, r3, #28
 800c8c6:	d501      	bpl.n	800c8cc <_vfiprintf_r+0x3c>
 800c8c8:	692b      	ldr	r3, [r5, #16]
 800c8ca:	b9eb      	cbnz	r3, 800c908 <_vfiprintf_r+0x78>
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f000 f98a 	bl	800cbe8 <__swsetup_r>
 800c8d4:	b1c0      	cbz	r0, 800c908 <_vfiprintf_r+0x78>
 800c8d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8d8:	07dc      	lsls	r4, r3, #31
 800c8da:	d50e      	bpl.n	800c8fa <_vfiprintf_r+0x6a>
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	b01d      	add	sp, #116	; 0x74
 800c8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e6:	4b7b      	ldr	r3, [pc, #492]	; (800cad4 <_vfiprintf_r+0x244>)
 800c8e8:	429d      	cmp	r5, r3
 800c8ea:	d101      	bne.n	800c8f0 <_vfiprintf_r+0x60>
 800c8ec:	68b5      	ldr	r5, [r6, #8]
 800c8ee:	e7df      	b.n	800c8b0 <_vfiprintf_r+0x20>
 800c8f0:	4b79      	ldr	r3, [pc, #484]	; (800cad8 <_vfiprintf_r+0x248>)
 800c8f2:	429d      	cmp	r5, r3
 800c8f4:	bf08      	it	eq
 800c8f6:	68f5      	ldreq	r5, [r6, #12]
 800c8f8:	e7da      	b.n	800c8b0 <_vfiprintf_r+0x20>
 800c8fa:	89ab      	ldrh	r3, [r5, #12]
 800c8fc:	0598      	lsls	r0, r3, #22
 800c8fe:	d4ed      	bmi.n	800c8dc <_vfiprintf_r+0x4c>
 800c900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c902:	f000 fba0 	bl	800d046 <__retarget_lock_release_recursive>
 800c906:	e7e9      	b.n	800c8dc <_vfiprintf_r+0x4c>
 800c908:	2300      	movs	r3, #0
 800c90a:	9309      	str	r3, [sp, #36]	; 0x24
 800c90c:	2320      	movs	r3, #32
 800c90e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c912:	f8cd 800c 	str.w	r8, [sp, #12]
 800c916:	2330      	movs	r3, #48	; 0x30
 800c918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cadc <_vfiprintf_r+0x24c>
 800c91c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c920:	f04f 0901 	mov.w	r9, #1
 800c924:	4623      	mov	r3, r4
 800c926:	469a      	mov	sl, r3
 800c928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c92c:	b10a      	cbz	r2, 800c932 <_vfiprintf_r+0xa2>
 800c92e:	2a25      	cmp	r2, #37	; 0x25
 800c930:	d1f9      	bne.n	800c926 <_vfiprintf_r+0x96>
 800c932:	ebba 0b04 	subs.w	fp, sl, r4
 800c936:	d00b      	beq.n	800c950 <_vfiprintf_r+0xc0>
 800c938:	465b      	mov	r3, fp
 800c93a:	4622      	mov	r2, r4
 800c93c:	4629      	mov	r1, r5
 800c93e:	4630      	mov	r0, r6
 800c940:	f7ff ff93 	bl	800c86a <__sfputs_r>
 800c944:	3001      	adds	r0, #1
 800c946:	f000 80aa 	beq.w	800ca9e <_vfiprintf_r+0x20e>
 800c94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c94c:	445a      	add	r2, fp
 800c94e:	9209      	str	r2, [sp, #36]	; 0x24
 800c950:	f89a 3000 	ldrb.w	r3, [sl]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 80a2 	beq.w	800ca9e <_vfiprintf_r+0x20e>
 800c95a:	2300      	movs	r3, #0
 800c95c:	f04f 32ff 	mov.w	r2, #4294967295
 800c960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c964:	f10a 0a01 	add.w	sl, sl, #1
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	9307      	str	r3, [sp, #28]
 800c96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c970:	931a      	str	r3, [sp, #104]	; 0x68
 800c972:	4654      	mov	r4, sl
 800c974:	2205      	movs	r2, #5
 800c976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97a:	4858      	ldr	r0, [pc, #352]	; (800cadc <_vfiprintf_r+0x24c>)
 800c97c:	f7f3 fc60 	bl	8000240 <memchr>
 800c980:	9a04      	ldr	r2, [sp, #16]
 800c982:	b9d8      	cbnz	r0, 800c9bc <_vfiprintf_r+0x12c>
 800c984:	06d1      	lsls	r1, r2, #27
 800c986:	bf44      	itt	mi
 800c988:	2320      	movmi	r3, #32
 800c98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c98e:	0713      	lsls	r3, r2, #28
 800c990:	bf44      	itt	mi
 800c992:	232b      	movmi	r3, #43	; 0x2b
 800c994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c998:	f89a 3000 	ldrb.w	r3, [sl]
 800c99c:	2b2a      	cmp	r3, #42	; 0x2a
 800c99e:	d015      	beq.n	800c9cc <_vfiprintf_r+0x13c>
 800c9a0:	9a07      	ldr	r2, [sp, #28]
 800c9a2:	4654      	mov	r4, sl
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f04f 0c0a 	mov.w	ip, #10
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b0:	3b30      	subs	r3, #48	; 0x30
 800c9b2:	2b09      	cmp	r3, #9
 800c9b4:	d94e      	bls.n	800ca54 <_vfiprintf_r+0x1c4>
 800c9b6:	b1b0      	cbz	r0, 800c9e6 <_vfiprintf_r+0x156>
 800c9b8:	9207      	str	r2, [sp, #28]
 800c9ba:	e014      	b.n	800c9e6 <_vfiprintf_r+0x156>
 800c9bc:	eba0 0308 	sub.w	r3, r0, r8
 800c9c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	9304      	str	r3, [sp, #16]
 800c9c8:	46a2      	mov	sl, r4
 800c9ca:	e7d2      	b.n	800c972 <_vfiprintf_r+0xe2>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	1d19      	adds	r1, r3, #4
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	9103      	str	r1, [sp, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bfbb      	ittet	lt
 800c9d8:	425b      	neglt	r3, r3
 800c9da:	f042 0202 	orrlt.w	r2, r2, #2
 800c9de:	9307      	strge	r3, [sp, #28]
 800c9e0:	9307      	strlt	r3, [sp, #28]
 800c9e2:	bfb8      	it	lt
 800c9e4:	9204      	strlt	r2, [sp, #16]
 800c9e6:	7823      	ldrb	r3, [r4, #0]
 800c9e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ea:	d10c      	bne.n	800ca06 <_vfiprintf_r+0x176>
 800c9ec:	7863      	ldrb	r3, [r4, #1]
 800c9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f0:	d135      	bne.n	800ca5e <_vfiprintf_r+0x1ce>
 800c9f2:	9b03      	ldr	r3, [sp, #12]
 800c9f4:	1d1a      	adds	r2, r3, #4
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	9203      	str	r2, [sp, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bfb8      	it	lt
 800c9fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca02:	3402      	adds	r4, #2
 800ca04:	9305      	str	r3, [sp, #20]
 800ca06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800caec <_vfiprintf_r+0x25c>
 800ca0a:	7821      	ldrb	r1, [r4, #0]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	4650      	mov	r0, sl
 800ca10:	f7f3 fc16 	bl	8000240 <memchr>
 800ca14:	b140      	cbz	r0, 800ca28 <_vfiprintf_r+0x198>
 800ca16:	2340      	movs	r3, #64	; 0x40
 800ca18:	eba0 000a 	sub.w	r0, r0, sl
 800ca1c:	fa03 f000 	lsl.w	r0, r3, r0
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	4303      	orrs	r3, r0
 800ca24:	3401      	adds	r4, #1
 800ca26:	9304      	str	r3, [sp, #16]
 800ca28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2c:	482c      	ldr	r0, [pc, #176]	; (800cae0 <_vfiprintf_r+0x250>)
 800ca2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca32:	2206      	movs	r2, #6
 800ca34:	f7f3 fc04 	bl	8000240 <memchr>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d03f      	beq.n	800cabc <_vfiprintf_r+0x22c>
 800ca3c:	4b29      	ldr	r3, [pc, #164]	; (800cae4 <_vfiprintf_r+0x254>)
 800ca3e:	bb1b      	cbnz	r3, 800ca88 <_vfiprintf_r+0x1f8>
 800ca40:	9b03      	ldr	r3, [sp, #12]
 800ca42:	3307      	adds	r3, #7
 800ca44:	f023 0307 	bic.w	r3, r3, #7
 800ca48:	3308      	adds	r3, #8
 800ca4a:	9303      	str	r3, [sp, #12]
 800ca4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca4e:	443b      	add	r3, r7
 800ca50:	9309      	str	r3, [sp, #36]	; 0x24
 800ca52:	e767      	b.n	800c924 <_vfiprintf_r+0x94>
 800ca54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca58:	460c      	mov	r4, r1
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	e7a5      	b.n	800c9aa <_vfiprintf_r+0x11a>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	3401      	adds	r4, #1
 800ca62:	9305      	str	r3, [sp, #20]
 800ca64:	4619      	mov	r1, r3
 800ca66:	f04f 0c0a 	mov.w	ip, #10
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca70:	3a30      	subs	r2, #48	; 0x30
 800ca72:	2a09      	cmp	r2, #9
 800ca74:	d903      	bls.n	800ca7e <_vfiprintf_r+0x1ee>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0c5      	beq.n	800ca06 <_vfiprintf_r+0x176>
 800ca7a:	9105      	str	r1, [sp, #20]
 800ca7c:	e7c3      	b.n	800ca06 <_vfiprintf_r+0x176>
 800ca7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca82:	4604      	mov	r4, r0
 800ca84:	2301      	movs	r3, #1
 800ca86:	e7f0      	b.n	800ca6a <_vfiprintf_r+0x1da>
 800ca88:	ab03      	add	r3, sp, #12
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	462a      	mov	r2, r5
 800ca8e:	4b16      	ldr	r3, [pc, #88]	; (800cae8 <_vfiprintf_r+0x258>)
 800ca90:	a904      	add	r1, sp, #16
 800ca92:	4630      	mov	r0, r6
 800ca94:	f7fc f8e2 	bl	8008c5c <_printf_float>
 800ca98:	4607      	mov	r7, r0
 800ca9a:	1c78      	adds	r0, r7, #1
 800ca9c:	d1d6      	bne.n	800ca4c <_vfiprintf_r+0x1bc>
 800ca9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa0:	07d9      	lsls	r1, r3, #31
 800caa2:	d405      	bmi.n	800cab0 <_vfiprintf_r+0x220>
 800caa4:	89ab      	ldrh	r3, [r5, #12]
 800caa6:	059a      	lsls	r2, r3, #22
 800caa8:	d402      	bmi.n	800cab0 <_vfiprintf_r+0x220>
 800caaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caac:	f000 facb 	bl	800d046 <__retarget_lock_release_recursive>
 800cab0:	89ab      	ldrh	r3, [r5, #12]
 800cab2:	065b      	lsls	r3, r3, #25
 800cab4:	f53f af12 	bmi.w	800c8dc <_vfiprintf_r+0x4c>
 800cab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caba:	e711      	b.n	800c8e0 <_vfiprintf_r+0x50>
 800cabc:	ab03      	add	r3, sp, #12
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	462a      	mov	r2, r5
 800cac2:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <_vfiprintf_r+0x258>)
 800cac4:	a904      	add	r1, sp, #16
 800cac6:	4630      	mov	r0, r6
 800cac8:	f7fc fb6c 	bl	80091a4 <_printf_i>
 800cacc:	e7e4      	b.n	800ca98 <_vfiprintf_r+0x208>
 800cace:	bf00      	nop
 800cad0:	0800db40 	.word	0x0800db40
 800cad4:	0800db60 	.word	0x0800db60
 800cad8:	0800db20 	.word	0x0800db20
 800cadc:	0800db0c 	.word	0x0800db0c
 800cae0:	0800db16 	.word	0x0800db16
 800cae4:	08008c5d 	.word	0x08008c5d
 800cae8:	0800c86b 	.word	0x0800c86b
 800caec:	0800db12 	.word	0x0800db12

0800caf0 <nan>:
 800caf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800caf8 <nan+0x8>
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	00000000 	.word	0x00000000
 800cafc:	7ff80000 	.word	0x7ff80000

0800cb00 <strncmp>:
 800cb00:	b510      	push	{r4, lr}
 800cb02:	b17a      	cbz	r2, 800cb24 <strncmp+0x24>
 800cb04:	4603      	mov	r3, r0
 800cb06:	3901      	subs	r1, #1
 800cb08:	1884      	adds	r4, r0, r2
 800cb0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb12:	4290      	cmp	r0, r2
 800cb14:	d101      	bne.n	800cb1a <strncmp+0x1a>
 800cb16:	42a3      	cmp	r3, r4
 800cb18:	d101      	bne.n	800cb1e <strncmp+0x1e>
 800cb1a:	1a80      	subs	r0, r0, r2
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d1f3      	bne.n	800cb0a <strncmp+0xa>
 800cb22:	e7fa      	b.n	800cb1a <strncmp+0x1a>
 800cb24:	4610      	mov	r0, r2
 800cb26:	e7f9      	b.n	800cb1c <strncmp+0x1c>

0800cb28 <__swbuf_r>:
 800cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2a:	460e      	mov	r6, r1
 800cb2c:	4614      	mov	r4, r2
 800cb2e:	4605      	mov	r5, r0
 800cb30:	b118      	cbz	r0, 800cb3a <__swbuf_r+0x12>
 800cb32:	6983      	ldr	r3, [r0, #24]
 800cb34:	b90b      	cbnz	r3, 800cb3a <__swbuf_r+0x12>
 800cb36:	f000 f9e7 	bl	800cf08 <__sinit>
 800cb3a:	4b21      	ldr	r3, [pc, #132]	; (800cbc0 <__swbuf_r+0x98>)
 800cb3c:	429c      	cmp	r4, r3
 800cb3e:	d12b      	bne.n	800cb98 <__swbuf_r+0x70>
 800cb40:	686c      	ldr	r4, [r5, #4]
 800cb42:	69a3      	ldr	r3, [r4, #24]
 800cb44:	60a3      	str	r3, [r4, #8]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	071a      	lsls	r2, r3, #28
 800cb4a:	d52f      	bpl.n	800cbac <__swbuf_r+0x84>
 800cb4c:	6923      	ldr	r3, [r4, #16]
 800cb4e:	b36b      	cbz	r3, 800cbac <__swbuf_r+0x84>
 800cb50:	6923      	ldr	r3, [r4, #16]
 800cb52:	6820      	ldr	r0, [r4, #0]
 800cb54:	1ac0      	subs	r0, r0, r3
 800cb56:	6963      	ldr	r3, [r4, #20]
 800cb58:	b2f6      	uxtb	r6, r6
 800cb5a:	4283      	cmp	r3, r0
 800cb5c:	4637      	mov	r7, r6
 800cb5e:	dc04      	bgt.n	800cb6a <__swbuf_r+0x42>
 800cb60:	4621      	mov	r1, r4
 800cb62:	4628      	mov	r0, r5
 800cb64:	f000 f93c 	bl	800cde0 <_fflush_r>
 800cb68:	bb30      	cbnz	r0, 800cbb8 <__swbuf_r+0x90>
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	60a3      	str	r3, [r4, #8]
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	1c5a      	adds	r2, r3, #1
 800cb74:	6022      	str	r2, [r4, #0]
 800cb76:	701e      	strb	r6, [r3, #0]
 800cb78:	6963      	ldr	r3, [r4, #20]
 800cb7a:	3001      	adds	r0, #1
 800cb7c:	4283      	cmp	r3, r0
 800cb7e:	d004      	beq.n	800cb8a <__swbuf_r+0x62>
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	07db      	lsls	r3, r3, #31
 800cb84:	d506      	bpl.n	800cb94 <__swbuf_r+0x6c>
 800cb86:	2e0a      	cmp	r6, #10
 800cb88:	d104      	bne.n	800cb94 <__swbuf_r+0x6c>
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f000 f927 	bl	800cde0 <_fflush_r>
 800cb92:	b988      	cbnz	r0, 800cbb8 <__swbuf_r+0x90>
 800cb94:	4638      	mov	r0, r7
 800cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb98:	4b0a      	ldr	r3, [pc, #40]	; (800cbc4 <__swbuf_r+0x9c>)
 800cb9a:	429c      	cmp	r4, r3
 800cb9c:	d101      	bne.n	800cba2 <__swbuf_r+0x7a>
 800cb9e:	68ac      	ldr	r4, [r5, #8]
 800cba0:	e7cf      	b.n	800cb42 <__swbuf_r+0x1a>
 800cba2:	4b09      	ldr	r3, [pc, #36]	; (800cbc8 <__swbuf_r+0xa0>)
 800cba4:	429c      	cmp	r4, r3
 800cba6:	bf08      	it	eq
 800cba8:	68ec      	ldreq	r4, [r5, #12]
 800cbaa:	e7ca      	b.n	800cb42 <__swbuf_r+0x1a>
 800cbac:	4621      	mov	r1, r4
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f000 f81a 	bl	800cbe8 <__swsetup_r>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d0cb      	beq.n	800cb50 <__swbuf_r+0x28>
 800cbb8:	f04f 37ff 	mov.w	r7, #4294967295
 800cbbc:	e7ea      	b.n	800cb94 <__swbuf_r+0x6c>
 800cbbe:	bf00      	nop
 800cbc0:	0800db40 	.word	0x0800db40
 800cbc4:	0800db60 	.word	0x0800db60
 800cbc8:	0800db20 	.word	0x0800db20

0800cbcc <__ascii_wctomb>:
 800cbcc:	b149      	cbz	r1, 800cbe2 <__ascii_wctomb+0x16>
 800cbce:	2aff      	cmp	r2, #255	; 0xff
 800cbd0:	bf85      	ittet	hi
 800cbd2:	238a      	movhi	r3, #138	; 0x8a
 800cbd4:	6003      	strhi	r3, [r0, #0]
 800cbd6:	700a      	strbls	r2, [r1, #0]
 800cbd8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbdc:	bf98      	it	ls
 800cbde:	2001      	movls	r0, #1
 800cbe0:	4770      	bx	lr
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <__swsetup_r>:
 800cbe8:	4b32      	ldr	r3, [pc, #200]	; (800ccb4 <__swsetup_r+0xcc>)
 800cbea:	b570      	push	{r4, r5, r6, lr}
 800cbec:	681d      	ldr	r5, [r3, #0]
 800cbee:	4606      	mov	r6, r0
 800cbf0:	460c      	mov	r4, r1
 800cbf2:	b125      	cbz	r5, 800cbfe <__swsetup_r+0x16>
 800cbf4:	69ab      	ldr	r3, [r5, #24]
 800cbf6:	b913      	cbnz	r3, 800cbfe <__swsetup_r+0x16>
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	f000 f985 	bl	800cf08 <__sinit>
 800cbfe:	4b2e      	ldr	r3, [pc, #184]	; (800ccb8 <__swsetup_r+0xd0>)
 800cc00:	429c      	cmp	r4, r3
 800cc02:	d10f      	bne.n	800cc24 <__swsetup_r+0x3c>
 800cc04:	686c      	ldr	r4, [r5, #4]
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc0c:	0719      	lsls	r1, r3, #28
 800cc0e:	d42c      	bmi.n	800cc6a <__swsetup_r+0x82>
 800cc10:	06dd      	lsls	r5, r3, #27
 800cc12:	d411      	bmi.n	800cc38 <__swsetup_r+0x50>
 800cc14:	2309      	movs	r3, #9
 800cc16:	6033      	str	r3, [r6, #0]
 800cc18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc1c:	81a3      	strh	r3, [r4, #12]
 800cc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc22:	e03e      	b.n	800cca2 <__swsetup_r+0xba>
 800cc24:	4b25      	ldr	r3, [pc, #148]	; (800ccbc <__swsetup_r+0xd4>)
 800cc26:	429c      	cmp	r4, r3
 800cc28:	d101      	bne.n	800cc2e <__swsetup_r+0x46>
 800cc2a:	68ac      	ldr	r4, [r5, #8]
 800cc2c:	e7eb      	b.n	800cc06 <__swsetup_r+0x1e>
 800cc2e:	4b24      	ldr	r3, [pc, #144]	; (800ccc0 <__swsetup_r+0xd8>)
 800cc30:	429c      	cmp	r4, r3
 800cc32:	bf08      	it	eq
 800cc34:	68ec      	ldreq	r4, [r5, #12]
 800cc36:	e7e6      	b.n	800cc06 <__swsetup_r+0x1e>
 800cc38:	0758      	lsls	r0, r3, #29
 800cc3a:	d512      	bpl.n	800cc62 <__swsetup_r+0x7a>
 800cc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc3e:	b141      	cbz	r1, 800cc52 <__swsetup_r+0x6a>
 800cc40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc44:	4299      	cmp	r1, r3
 800cc46:	d002      	beq.n	800cc4e <__swsetup_r+0x66>
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f7fb fe87 	bl	800895c <_free_r>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6363      	str	r3, [r4, #52]	; 0x34
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	6063      	str	r3, [r4, #4]
 800cc5e:	6923      	ldr	r3, [r4, #16]
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	f043 0308 	orr.w	r3, r3, #8
 800cc68:	81a3      	strh	r3, [r4, #12]
 800cc6a:	6923      	ldr	r3, [r4, #16]
 800cc6c:	b94b      	cbnz	r3, 800cc82 <__swsetup_r+0x9a>
 800cc6e:	89a3      	ldrh	r3, [r4, #12]
 800cc70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc78:	d003      	beq.n	800cc82 <__swsetup_r+0x9a>
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f000 fa09 	bl	800d094 <__smakebuf_r>
 800cc82:	89a0      	ldrh	r0, [r4, #12]
 800cc84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc88:	f010 0301 	ands.w	r3, r0, #1
 800cc8c:	d00a      	beq.n	800cca4 <__swsetup_r+0xbc>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60a3      	str	r3, [r4, #8]
 800cc92:	6963      	ldr	r3, [r4, #20]
 800cc94:	425b      	negs	r3, r3
 800cc96:	61a3      	str	r3, [r4, #24]
 800cc98:	6923      	ldr	r3, [r4, #16]
 800cc9a:	b943      	cbnz	r3, 800ccae <__swsetup_r+0xc6>
 800cc9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cca0:	d1ba      	bne.n	800cc18 <__swsetup_r+0x30>
 800cca2:	bd70      	pop	{r4, r5, r6, pc}
 800cca4:	0781      	lsls	r1, r0, #30
 800cca6:	bf58      	it	pl
 800cca8:	6963      	ldrpl	r3, [r4, #20]
 800ccaa:	60a3      	str	r3, [r4, #8]
 800ccac:	e7f4      	b.n	800cc98 <__swsetup_r+0xb0>
 800ccae:	2000      	movs	r0, #0
 800ccb0:	e7f7      	b.n	800cca2 <__swsetup_r+0xba>
 800ccb2:	bf00      	nop
 800ccb4:	2000000c 	.word	0x2000000c
 800ccb8:	0800db40 	.word	0x0800db40
 800ccbc:	0800db60 	.word	0x0800db60
 800ccc0:	0800db20 	.word	0x0800db20

0800ccc4 <abort>:
 800ccc4:	b508      	push	{r3, lr}
 800ccc6:	2006      	movs	r0, #6
 800ccc8:	f000 fa96 	bl	800d1f8 <raise>
 800cccc:	2001      	movs	r0, #1
 800ccce:	f7f6 f881 	bl	8002dd4 <_exit>
	...

0800ccd4 <__sflush_r>:
 800ccd4:	898a      	ldrh	r2, [r1, #12]
 800ccd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccda:	4605      	mov	r5, r0
 800ccdc:	0710      	lsls	r0, r2, #28
 800ccde:	460c      	mov	r4, r1
 800cce0:	d458      	bmi.n	800cd94 <__sflush_r+0xc0>
 800cce2:	684b      	ldr	r3, [r1, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dc05      	bgt.n	800ccf4 <__sflush_r+0x20>
 800cce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	dc02      	bgt.n	800ccf4 <__sflush_r+0x20>
 800ccee:	2000      	movs	r0, #0
 800ccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccf6:	2e00      	cmp	r6, #0
 800ccf8:	d0f9      	beq.n	800ccee <__sflush_r+0x1a>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd00:	682f      	ldr	r7, [r5, #0]
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	d032      	beq.n	800cd6c <__sflush_r+0x98>
 800cd06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	075a      	lsls	r2, r3, #29
 800cd0c:	d505      	bpl.n	800cd1a <__sflush_r+0x46>
 800cd0e:	6863      	ldr	r3, [r4, #4]
 800cd10:	1ac0      	subs	r0, r0, r3
 800cd12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd14:	b10b      	cbz	r3, 800cd1a <__sflush_r+0x46>
 800cd16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd18:	1ac0      	subs	r0, r0, r3
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd20:	6a21      	ldr	r1, [r4, #32]
 800cd22:	4628      	mov	r0, r5
 800cd24:	47b0      	blx	r6
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	d106      	bne.n	800cd3a <__sflush_r+0x66>
 800cd2c:	6829      	ldr	r1, [r5, #0]
 800cd2e:	291d      	cmp	r1, #29
 800cd30:	d82c      	bhi.n	800cd8c <__sflush_r+0xb8>
 800cd32:	4a2a      	ldr	r2, [pc, #168]	; (800cddc <__sflush_r+0x108>)
 800cd34:	40ca      	lsrs	r2, r1
 800cd36:	07d6      	lsls	r6, r2, #31
 800cd38:	d528      	bpl.n	800cd8c <__sflush_r+0xb8>
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	6062      	str	r2, [r4, #4]
 800cd3e:	04d9      	lsls	r1, r3, #19
 800cd40:	6922      	ldr	r2, [r4, #16]
 800cd42:	6022      	str	r2, [r4, #0]
 800cd44:	d504      	bpl.n	800cd50 <__sflush_r+0x7c>
 800cd46:	1c42      	adds	r2, r0, #1
 800cd48:	d101      	bne.n	800cd4e <__sflush_r+0x7a>
 800cd4a:	682b      	ldr	r3, [r5, #0]
 800cd4c:	b903      	cbnz	r3, 800cd50 <__sflush_r+0x7c>
 800cd4e:	6560      	str	r0, [r4, #84]	; 0x54
 800cd50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd52:	602f      	str	r7, [r5, #0]
 800cd54:	2900      	cmp	r1, #0
 800cd56:	d0ca      	beq.n	800ccee <__sflush_r+0x1a>
 800cd58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	d002      	beq.n	800cd66 <__sflush_r+0x92>
 800cd60:	4628      	mov	r0, r5
 800cd62:	f7fb fdfb 	bl	800895c <_free_r>
 800cd66:	2000      	movs	r0, #0
 800cd68:	6360      	str	r0, [r4, #52]	; 0x34
 800cd6a:	e7c1      	b.n	800ccf0 <__sflush_r+0x1c>
 800cd6c:	6a21      	ldr	r1, [r4, #32]
 800cd6e:	2301      	movs	r3, #1
 800cd70:	4628      	mov	r0, r5
 800cd72:	47b0      	blx	r6
 800cd74:	1c41      	adds	r1, r0, #1
 800cd76:	d1c7      	bne.n	800cd08 <__sflush_r+0x34>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d0c4      	beq.n	800cd08 <__sflush_r+0x34>
 800cd7e:	2b1d      	cmp	r3, #29
 800cd80:	d001      	beq.n	800cd86 <__sflush_r+0xb2>
 800cd82:	2b16      	cmp	r3, #22
 800cd84:	d101      	bne.n	800cd8a <__sflush_r+0xb6>
 800cd86:	602f      	str	r7, [r5, #0]
 800cd88:	e7b1      	b.n	800ccee <__sflush_r+0x1a>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd90:	81a3      	strh	r3, [r4, #12]
 800cd92:	e7ad      	b.n	800ccf0 <__sflush_r+0x1c>
 800cd94:	690f      	ldr	r7, [r1, #16]
 800cd96:	2f00      	cmp	r7, #0
 800cd98:	d0a9      	beq.n	800ccee <__sflush_r+0x1a>
 800cd9a:	0793      	lsls	r3, r2, #30
 800cd9c:	680e      	ldr	r6, [r1, #0]
 800cd9e:	bf08      	it	eq
 800cda0:	694b      	ldreq	r3, [r1, #20]
 800cda2:	600f      	str	r7, [r1, #0]
 800cda4:	bf18      	it	ne
 800cda6:	2300      	movne	r3, #0
 800cda8:	eba6 0807 	sub.w	r8, r6, r7
 800cdac:	608b      	str	r3, [r1, #8]
 800cdae:	f1b8 0f00 	cmp.w	r8, #0
 800cdb2:	dd9c      	ble.n	800ccee <__sflush_r+0x1a>
 800cdb4:	6a21      	ldr	r1, [r4, #32]
 800cdb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdb8:	4643      	mov	r3, r8
 800cdba:	463a      	mov	r2, r7
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	47b0      	blx	r6
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	dc06      	bgt.n	800cdd2 <__sflush_r+0xfe>
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdca:	81a3      	strh	r3, [r4, #12]
 800cdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd0:	e78e      	b.n	800ccf0 <__sflush_r+0x1c>
 800cdd2:	4407      	add	r7, r0
 800cdd4:	eba8 0800 	sub.w	r8, r8, r0
 800cdd8:	e7e9      	b.n	800cdae <__sflush_r+0xda>
 800cdda:	bf00      	nop
 800cddc:	20400001 	.word	0x20400001

0800cde0 <_fflush_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	690b      	ldr	r3, [r1, #16]
 800cde4:	4605      	mov	r5, r0
 800cde6:	460c      	mov	r4, r1
 800cde8:	b913      	cbnz	r3, 800cdf0 <_fflush_r+0x10>
 800cdea:	2500      	movs	r5, #0
 800cdec:	4628      	mov	r0, r5
 800cdee:	bd38      	pop	{r3, r4, r5, pc}
 800cdf0:	b118      	cbz	r0, 800cdfa <_fflush_r+0x1a>
 800cdf2:	6983      	ldr	r3, [r0, #24]
 800cdf4:	b90b      	cbnz	r3, 800cdfa <_fflush_r+0x1a>
 800cdf6:	f000 f887 	bl	800cf08 <__sinit>
 800cdfa:	4b14      	ldr	r3, [pc, #80]	; (800ce4c <_fflush_r+0x6c>)
 800cdfc:	429c      	cmp	r4, r3
 800cdfe:	d11b      	bne.n	800ce38 <_fflush_r+0x58>
 800ce00:	686c      	ldr	r4, [r5, #4]
 800ce02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d0ef      	beq.n	800cdea <_fflush_r+0xa>
 800ce0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce0c:	07d0      	lsls	r0, r2, #31
 800ce0e:	d404      	bmi.n	800ce1a <_fflush_r+0x3a>
 800ce10:	0599      	lsls	r1, r3, #22
 800ce12:	d402      	bmi.n	800ce1a <_fflush_r+0x3a>
 800ce14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce16:	f000 f915 	bl	800d044 <__retarget_lock_acquire_recursive>
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	f7ff ff59 	bl	800ccd4 <__sflush_r>
 800ce22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce24:	07da      	lsls	r2, r3, #31
 800ce26:	4605      	mov	r5, r0
 800ce28:	d4e0      	bmi.n	800cdec <_fflush_r+0xc>
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	059b      	lsls	r3, r3, #22
 800ce2e:	d4dd      	bmi.n	800cdec <_fflush_r+0xc>
 800ce30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce32:	f000 f908 	bl	800d046 <__retarget_lock_release_recursive>
 800ce36:	e7d9      	b.n	800cdec <_fflush_r+0xc>
 800ce38:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <_fflush_r+0x70>)
 800ce3a:	429c      	cmp	r4, r3
 800ce3c:	d101      	bne.n	800ce42 <_fflush_r+0x62>
 800ce3e:	68ac      	ldr	r4, [r5, #8]
 800ce40:	e7df      	b.n	800ce02 <_fflush_r+0x22>
 800ce42:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <_fflush_r+0x74>)
 800ce44:	429c      	cmp	r4, r3
 800ce46:	bf08      	it	eq
 800ce48:	68ec      	ldreq	r4, [r5, #12]
 800ce4a:	e7da      	b.n	800ce02 <_fflush_r+0x22>
 800ce4c:	0800db40 	.word	0x0800db40
 800ce50:	0800db60 	.word	0x0800db60
 800ce54:	0800db20 	.word	0x0800db20

0800ce58 <std>:
 800ce58:	2300      	movs	r3, #0
 800ce5a:	b510      	push	{r4, lr}
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ce62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce66:	6083      	str	r3, [r0, #8]
 800ce68:	8181      	strh	r1, [r0, #12]
 800ce6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ce6c:	81c2      	strh	r2, [r0, #14]
 800ce6e:	6183      	str	r3, [r0, #24]
 800ce70:	4619      	mov	r1, r3
 800ce72:	2208      	movs	r2, #8
 800ce74:	305c      	adds	r0, #92	; 0x5c
 800ce76:	f7fb fd69 	bl	800894c <memset>
 800ce7a:	4b05      	ldr	r3, [pc, #20]	; (800ce90 <std+0x38>)
 800ce7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ce7e:	4b05      	ldr	r3, [pc, #20]	; (800ce94 <std+0x3c>)
 800ce80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce82:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <std+0x40>)
 800ce84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce86:	4b05      	ldr	r3, [pc, #20]	; (800ce9c <std+0x44>)
 800ce88:	6224      	str	r4, [r4, #32]
 800ce8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ce8c:	bd10      	pop	{r4, pc}
 800ce8e:	bf00      	nop
 800ce90:	0800d231 	.word	0x0800d231
 800ce94:	0800d253 	.word	0x0800d253
 800ce98:	0800d28b 	.word	0x0800d28b
 800ce9c:	0800d2af 	.word	0x0800d2af

0800cea0 <_cleanup_r>:
 800cea0:	4901      	ldr	r1, [pc, #4]	; (800cea8 <_cleanup_r+0x8>)
 800cea2:	f000 b8af 	b.w	800d004 <_fwalk_reent>
 800cea6:	bf00      	nop
 800cea8:	0800cde1 	.word	0x0800cde1

0800ceac <__sfmoreglue>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	2268      	movs	r2, #104	; 0x68
 800ceb0:	1e4d      	subs	r5, r1, #1
 800ceb2:	4355      	muls	r5, r2
 800ceb4:	460e      	mov	r6, r1
 800ceb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ceba:	f7fb fdbb 	bl	8008a34 <_malloc_r>
 800cebe:	4604      	mov	r4, r0
 800cec0:	b140      	cbz	r0, 800ced4 <__sfmoreglue+0x28>
 800cec2:	2100      	movs	r1, #0
 800cec4:	e9c0 1600 	strd	r1, r6, [r0]
 800cec8:	300c      	adds	r0, #12
 800ceca:	60a0      	str	r0, [r4, #8]
 800cecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ced0:	f7fb fd3c 	bl	800894c <memset>
 800ced4:	4620      	mov	r0, r4
 800ced6:	bd70      	pop	{r4, r5, r6, pc}

0800ced8 <__sfp_lock_acquire>:
 800ced8:	4801      	ldr	r0, [pc, #4]	; (800cee0 <__sfp_lock_acquire+0x8>)
 800ceda:	f000 b8b3 	b.w	800d044 <__retarget_lock_acquire_recursive>
 800cede:	bf00      	nop
 800cee0:	20000641 	.word	0x20000641

0800cee4 <__sfp_lock_release>:
 800cee4:	4801      	ldr	r0, [pc, #4]	; (800ceec <__sfp_lock_release+0x8>)
 800cee6:	f000 b8ae 	b.w	800d046 <__retarget_lock_release_recursive>
 800ceea:	bf00      	nop
 800ceec:	20000641 	.word	0x20000641

0800cef0 <__sinit_lock_acquire>:
 800cef0:	4801      	ldr	r0, [pc, #4]	; (800cef8 <__sinit_lock_acquire+0x8>)
 800cef2:	f000 b8a7 	b.w	800d044 <__retarget_lock_acquire_recursive>
 800cef6:	bf00      	nop
 800cef8:	20000642 	.word	0x20000642

0800cefc <__sinit_lock_release>:
 800cefc:	4801      	ldr	r0, [pc, #4]	; (800cf04 <__sinit_lock_release+0x8>)
 800cefe:	f000 b8a2 	b.w	800d046 <__retarget_lock_release_recursive>
 800cf02:	bf00      	nop
 800cf04:	20000642 	.word	0x20000642

0800cf08 <__sinit>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	f7ff fff0 	bl	800cef0 <__sinit_lock_acquire>
 800cf10:	69a3      	ldr	r3, [r4, #24]
 800cf12:	b11b      	cbz	r3, 800cf1c <__sinit+0x14>
 800cf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf18:	f7ff bff0 	b.w	800cefc <__sinit_lock_release>
 800cf1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf20:	6523      	str	r3, [r4, #80]	; 0x50
 800cf22:	4b13      	ldr	r3, [pc, #76]	; (800cf70 <__sinit+0x68>)
 800cf24:	4a13      	ldr	r2, [pc, #76]	; (800cf74 <__sinit+0x6c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf2a:	42a3      	cmp	r3, r4
 800cf2c:	bf04      	itt	eq
 800cf2e:	2301      	moveq	r3, #1
 800cf30:	61a3      	streq	r3, [r4, #24]
 800cf32:	4620      	mov	r0, r4
 800cf34:	f000 f820 	bl	800cf78 <__sfp>
 800cf38:	6060      	str	r0, [r4, #4]
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f000 f81c 	bl	800cf78 <__sfp>
 800cf40:	60a0      	str	r0, [r4, #8]
 800cf42:	4620      	mov	r0, r4
 800cf44:	f000 f818 	bl	800cf78 <__sfp>
 800cf48:	2200      	movs	r2, #0
 800cf4a:	60e0      	str	r0, [r4, #12]
 800cf4c:	2104      	movs	r1, #4
 800cf4e:	6860      	ldr	r0, [r4, #4]
 800cf50:	f7ff ff82 	bl	800ce58 <std>
 800cf54:	68a0      	ldr	r0, [r4, #8]
 800cf56:	2201      	movs	r2, #1
 800cf58:	2109      	movs	r1, #9
 800cf5a:	f7ff ff7d 	bl	800ce58 <std>
 800cf5e:	68e0      	ldr	r0, [r4, #12]
 800cf60:	2202      	movs	r2, #2
 800cf62:	2112      	movs	r1, #18
 800cf64:	f7ff ff78 	bl	800ce58 <std>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	61a3      	str	r3, [r4, #24]
 800cf6c:	e7d2      	b.n	800cf14 <__sinit+0xc>
 800cf6e:	bf00      	nop
 800cf70:	0800d77c 	.word	0x0800d77c
 800cf74:	0800cea1 	.word	0x0800cea1

0800cf78 <__sfp>:
 800cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	f7ff ffac 	bl	800ced8 <__sfp_lock_acquire>
 800cf80:	4b1e      	ldr	r3, [pc, #120]	; (800cffc <__sfp+0x84>)
 800cf82:	681e      	ldr	r6, [r3, #0]
 800cf84:	69b3      	ldr	r3, [r6, #24]
 800cf86:	b913      	cbnz	r3, 800cf8e <__sfp+0x16>
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f7ff ffbd 	bl	800cf08 <__sinit>
 800cf8e:	3648      	adds	r6, #72	; 0x48
 800cf90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf94:	3b01      	subs	r3, #1
 800cf96:	d503      	bpl.n	800cfa0 <__sfp+0x28>
 800cf98:	6833      	ldr	r3, [r6, #0]
 800cf9a:	b30b      	cbz	r3, 800cfe0 <__sfp+0x68>
 800cf9c:	6836      	ldr	r6, [r6, #0]
 800cf9e:	e7f7      	b.n	800cf90 <__sfp+0x18>
 800cfa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfa4:	b9d5      	cbnz	r5, 800cfdc <__sfp+0x64>
 800cfa6:	4b16      	ldr	r3, [pc, #88]	; (800d000 <__sfp+0x88>)
 800cfa8:	60e3      	str	r3, [r4, #12]
 800cfaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfae:	6665      	str	r5, [r4, #100]	; 0x64
 800cfb0:	f000 f847 	bl	800d042 <__retarget_lock_init_recursive>
 800cfb4:	f7ff ff96 	bl	800cee4 <__sfp_lock_release>
 800cfb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cfbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cfc0:	6025      	str	r5, [r4, #0]
 800cfc2:	61a5      	str	r5, [r4, #24]
 800cfc4:	2208      	movs	r2, #8
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cfcc:	f7fb fcbe 	bl	800894c <memset>
 800cfd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cfd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cfd8:	4620      	mov	r0, r4
 800cfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfdc:	3468      	adds	r4, #104	; 0x68
 800cfde:	e7d9      	b.n	800cf94 <__sfp+0x1c>
 800cfe0:	2104      	movs	r1, #4
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f7ff ff62 	bl	800ceac <__sfmoreglue>
 800cfe8:	4604      	mov	r4, r0
 800cfea:	6030      	str	r0, [r6, #0]
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d1d5      	bne.n	800cf9c <__sfp+0x24>
 800cff0:	f7ff ff78 	bl	800cee4 <__sfp_lock_release>
 800cff4:	230c      	movs	r3, #12
 800cff6:	603b      	str	r3, [r7, #0]
 800cff8:	e7ee      	b.n	800cfd8 <__sfp+0x60>
 800cffa:	bf00      	nop
 800cffc:	0800d77c 	.word	0x0800d77c
 800d000:	ffff0001 	.word	0xffff0001

0800d004 <_fwalk_reent>:
 800d004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d008:	4606      	mov	r6, r0
 800d00a:	4688      	mov	r8, r1
 800d00c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d010:	2700      	movs	r7, #0
 800d012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d016:	f1b9 0901 	subs.w	r9, r9, #1
 800d01a:	d505      	bpl.n	800d028 <_fwalk_reent+0x24>
 800d01c:	6824      	ldr	r4, [r4, #0]
 800d01e:	2c00      	cmp	r4, #0
 800d020:	d1f7      	bne.n	800d012 <_fwalk_reent+0xe>
 800d022:	4638      	mov	r0, r7
 800d024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d028:	89ab      	ldrh	r3, [r5, #12]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d907      	bls.n	800d03e <_fwalk_reent+0x3a>
 800d02e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d032:	3301      	adds	r3, #1
 800d034:	d003      	beq.n	800d03e <_fwalk_reent+0x3a>
 800d036:	4629      	mov	r1, r5
 800d038:	4630      	mov	r0, r6
 800d03a:	47c0      	blx	r8
 800d03c:	4307      	orrs	r7, r0
 800d03e:	3568      	adds	r5, #104	; 0x68
 800d040:	e7e9      	b.n	800d016 <_fwalk_reent+0x12>

0800d042 <__retarget_lock_init_recursive>:
 800d042:	4770      	bx	lr

0800d044 <__retarget_lock_acquire_recursive>:
 800d044:	4770      	bx	lr

0800d046 <__retarget_lock_release_recursive>:
 800d046:	4770      	bx	lr

0800d048 <__swhatbuf_r>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	460e      	mov	r6, r1
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	2900      	cmp	r1, #0
 800d052:	b096      	sub	sp, #88	; 0x58
 800d054:	4614      	mov	r4, r2
 800d056:	461d      	mov	r5, r3
 800d058:	da08      	bge.n	800d06c <__swhatbuf_r+0x24>
 800d05a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	602a      	str	r2, [r5, #0]
 800d062:	061a      	lsls	r2, r3, #24
 800d064:	d410      	bmi.n	800d088 <__swhatbuf_r+0x40>
 800d066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d06a:	e00e      	b.n	800d08a <__swhatbuf_r+0x42>
 800d06c:	466a      	mov	r2, sp
 800d06e:	f000 f945 	bl	800d2fc <_fstat_r>
 800d072:	2800      	cmp	r0, #0
 800d074:	dbf1      	blt.n	800d05a <__swhatbuf_r+0x12>
 800d076:	9a01      	ldr	r2, [sp, #4]
 800d078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d080:	425a      	negs	r2, r3
 800d082:	415a      	adcs	r2, r3
 800d084:	602a      	str	r2, [r5, #0]
 800d086:	e7ee      	b.n	800d066 <__swhatbuf_r+0x1e>
 800d088:	2340      	movs	r3, #64	; 0x40
 800d08a:	2000      	movs	r0, #0
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	b016      	add	sp, #88	; 0x58
 800d090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d094 <__smakebuf_r>:
 800d094:	898b      	ldrh	r3, [r1, #12]
 800d096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d098:	079d      	lsls	r5, r3, #30
 800d09a:	4606      	mov	r6, r0
 800d09c:	460c      	mov	r4, r1
 800d09e:	d507      	bpl.n	800d0b0 <__smakebuf_r+0x1c>
 800d0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0a4:	6023      	str	r3, [r4, #0]
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	6163      	str	r3, [r4, #20]
 800d0ac:	b002      	add	sp, #8
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
 800d0b0:	ab01      	add	r3, sp, #4
 800d0b2:	466a      	mov	r2, sp
 800d0b4:	f7ff ffc8 	bl	800d048 <__swhatbuf_r>
 800d0b8:	9900      	ldr	r1, [sp, #0]
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f7fb fcb9 	bl	8008a34 <_malloc_r>
 800d0c2:	b948      	cbnz	r0, 800d0d8 <__smakebuf_r+0x44>
 800d0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0c8:	059a      	lsls	r2, r3, #22
 800d0ca:	d4ef      	bmi.n	800d0ac <__smakebuf_r+0x18>
 800d0cc:	f023 0303 	bic.w	r3, r3, #3
 800d0d0:	f043 0302 	orr.w	r3, r3, #2
 800d0d4:	81a3      	strh	r3, [r4, #12]
 800d0d6:	e7e3      	b.n	800d0a0 <__smakebuf_r+0xc>
 800d0d8:	4b0d      	ldr	r3, [pc, #52]	; (800d110 <__smakebuf_r+0x7c>)
 800d0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	6020      	str	r0, [r4, #0]
 800d0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e4:	81a3      	strh	r3, [r4, #12]
 800d0e6:	9b00      	ldr	r3, [sp, #0]
 800d0e8:	6163      	str	r3, [r4, #20]
 800d0ea:	9b01      	ldr	r3, [sp, #4]
 800d0ec:	6120      	str	r0, [r4, #16]
 800d0ee:	b15b      	cbz	r3, 800d108 <__smakebuf_r+0x74>
 800d0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f000 f913 	bl	800d320 <_isatty_r>
 800d0fa:	b128      	cbz	r0, 800d108 <__smakebuf_r+0x74>
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	f023 0303 	bic.w	r3, r3, #3
 800d102:	f043 0301 	orr.w	r3, r3, #1
 800d106:	81a3      	strh	r3, [r4, #12]
 800d108:	89a0      	ldrh	r0, [r4, #12]
 800d10a:	4305      	orrs	r5, r0
 800d10c:	81a5      	strh	r5, [r4, #12]
 800d10e:	e7cd      	b.n	800d0ac <__smakebuf_r+0x18>
 800d110:	0800cea1 	.word	0x0800cea1

0800d114 <memmove>:
 800d114:	4288      	cmp	r0, r1
 800d116:	b510      	push	{r4, lr}
 800d118:	eb01 0402 	add.w	r4, r1, r2
 800d11c:	d902      	bls.n	800d124 <memmove+0x10>
 800d11e:	4284      	cmp	r4, r0
 800d120:	4623      	mov	r3, r4
 800d122:	d807      	bhi.n	800d134 <memmove+0x20>
 800d124:	1e43      	subs	r3, r0, #1
 800d126:	42a1      	cmp	r1, r4
 800d128:	d008      	beq.n	800d13c <memmove+0x28>
 800d12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d12e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d132:	e7f8      	b.n	800d126 <memmove+0x12>
 800d134:	4402      	add	r2, r0
 800d136:	4601      	mov	r1, r0
 800d138:	428a      	cmp	r2, r1
 800d13a:	d100      	bne.n	800d13e <memmove+0x2a>
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d146:	e7f7      	b.n	800d138 <memmove+0x24>

0800d148 <_realloc_r>:
 800d148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14c:	4680      	mov	r8, r0
 800d14e:	4614      	mov	r4, r2
 800d150:	460e      	mov	r6, r1
 800d152:	b921      	cbnz	r1, 800d15e <_realloc_r+0x16>
 800d154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d158:	4611      	mov	r1, r2
 800d15a:	f7fb bc6b 	b.w	8008a34 <_malloc_r>
 800d15e:	b92a      	cbnz	r2, 800d16c <_realloc_r+0x24>
 800d160:	f7fb fbfc 	bl	800895c <_free_r>
 800d164:	4625      	mov	r5, r4
 800d166:	4628      	mov	r0, r5
 800d168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d16c:	f000 f8fa 	bl	800d364 <_malloc_usable_size_r>
 800d170:	4284      	cmp	r4, r0
 800d172:	4607      	mov	r7, r0
 800d174:	d802      	bhi.n	800d17c <_realloc_r+0x34>
 800d176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d17a:	d812      	bhi.n	800d1a2 <_realloc_r+0x5a>
 800d17c:	4621      	mov	r1, r4
 800d17e:	4640      	mov	r0, r8
 800d180:	f7fb fc58 	bl	8008a34 <_malloc_r>
 800d184:	4605      	mov	r5, r0
 800d186:	2800      	cmp	r0, #0
 800d188:	d0ed      	beq.n	800d166 <_realloc_r+0x1e>
 800d18a:	42bc      	cmp	r4, r7
 800d18c:	4622      	mov	r2, r4
 800d18e:	4631      	mov	r1, r6
 800d190:	bf28      	it	cs
 800d192:	463a      	movcs	r2, r7
 800d194:	f7fe fd06 	bl	800bba4 <memcpy>
 800d198:	4631      	mov	r1, r6
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7fb fbde 	bl	800895c <_free_r>
 800d1a0:	e7e1      	b.n	800d166 <_realloc_r+0x1e>
 800d1a2:	4635      	mov	r5, r6
 800d1a4:	e7df      	b.n	800d166 <_realloc_r+0x1e>

0800d1a6 <_raise_r>:
 800d1a6:	291f      	cmp	r1, #31
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	460d      	mov	r5, r1
 800d1ae:	d904      	bls.n	800d1ba <_raise_r+0x14>
 800d1b0:	2316      	movs	r3, #22
 800d1b2:	6003      	str	r3, [r0, #0]
 800d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1bc:	b112      	cbz	r2, 800d1c4 <_raise_r+0x1e>
 800d1be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1c2:	b94b      	cbnz	r3, 800d1d8 <_raise_r+0x32>
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f000 f831 	bl	800d22c <_getpid_r>
 800d1ca:	462a      	mov	r2, r5
 800d1cc:	4601      	mov	r1, r0
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1d4:	f000 b818 	b.w	800d208 <_kill_r>
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d00a      	beq.n	800d1f2 <_raise_r+0x4c>
 800d1dc:	1c59      	adds	r1, r3, #1
 800d1de:	d103      	bne.n	800d1e8 <_raise_r+0x42>
 800d1e0:	2316      	movs	r3, #22
 800d1e2:	6003      	str	r3, [r0, #0]
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	e7e7      	b.n	800d1b8 <_raise_r+0x12>
 800d1e8:	2400      	movs	r4, #0
 800d1ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	4798      	blx	r3
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	e7e0      	b.n	800d1b8 <_raise_r+0x12>
	...

0800d1f8 <raise>:
 800d1f8:	4b02      	ldr	r3, [pc, #8]	; (800d204 <raise+0xc>)
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	6818      	ldr	r0, [r3, #0]
 800d1fe:	f7ff bfd2 	b.w	800d1a6 <_raise_r>
 800d202:	bf00      	nop
 800d204:	2000000c 	.word	0x2000000c

0800d208 <_kill_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4d07      	ldr	r5, [pc, #28]	; (800d228 <_kill_r+0x20>)
 800d20c:	2300      	movs	r3, #0
 800d20e:	4604      	mov	r4, r0
 800d210:	4608      	mov	r0, r1
 800d212:	4611      	mov	r1, r2
 800d214:	602b      	str	r3, [r5, #0]
 800d216:	f7f5 fdcd 	bl	8002db4 <_kill>
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	d102      	bne.n	800d224 <_kill_r+0x1c>
 800d21e:	682b      	ldr	r3, [r5, #0]
 800d220:	b103      	cbz	r3, 800d224 <_kill_r+0x1c>
 800d222:	6023      	str	r3, [r4, #0]
 800d224:	bd38      	pop	{r3, r4, r5, pc}
 800d226:	bf00      	nop
 800d228:	2000063c 	.word	0x2000063c

0800d22c <_getpid_r>:
 800d22c:	f7f5 bdba 	b.w	8002da4 <_getpid>

0800d230 <__sread>:
 800d230:	b510      	push	{r4, lr}
 800d232:	460c      	mov	r4, r1
 800d234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d238:	f000 f89c 	bl	800d374 <_read_r>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	bfab      	itete	ge
 800d240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d242:	89a3      	ldrhlt	r3, [r4, #12]
 800d244:	181b      	addge	r3, r3, r0
 800d246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d24a:	bfac      	ite	ge
 800d24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d24e:	81a3      	strhlt	r3, [r4, #12]
 800d250:	bd10      	pop	{r4, pc}

0800d252 <__swrite>:
 800d252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d256:	461f      	mov	r7, r3
 800d258:	898b      	ldrh	r3, [r1, #12]
 800d25a:	05db      	lsls	r3, r3, #23
 800d25c:	4605      	mov	r5, r0
 800d25e:	460c      	mov	r4, r1
 800d260:	4616      	mov	r6, r2
 800d262:	d505      	bpl.n	800d270 <__swrite+0x1e>
 800d264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d268:	2302      	movs	r3, #2
 800d26a:	2200      	movs	r2, #0
 800d26c:	f000 f868 	bl	800d340 <_lseek_r>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d27a:	81a3      	strh	r3, [r4, #12]
 800d27c:	4632      	mov	r2, r6
 800d27e:	463b      	mov	r3, r7
 800d280:	4628      	mov	r0, r5
 800d282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d286:	f000 b817 	b.w	800d2b8 <_write_r>

0800d28a <__sseek>:
 800d28a:	b510      	push	{r4, lr}
 800d28c:	460c      	mov	r4, r1
 800d28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d292:	f000 f855 	bl	800d340 <_lseek_r>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	bf15      	itete	ne
 800d29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2a6:	81a3      	strheq	r3, [r4, #12]
 800d2a8:	bf18      	it	ne
 800d2aa:	81a3      	strhne	r3, [r4, #12]
 800d2ac:	bd10      	pop	{r4, pc}

0800d2ae <__sclose>:
 800d2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b2:	f000 b813 	b.w	800d2dc <_close_r>
	...

0800d2b8 <_write_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4d07      	ldr	r5, [pc, #28]	; (800d2d8 <_write_r+0x20>)
 800d2bc:	4604      	mov	r4, r0
 800d2be:	4608      	mov	r0, r1
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	602a      	str	r2, [r5, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	f7f5 fdab 	bl	8002e22 <_write>
 800d2cc:	1c43      	adds	r3, r0, #1
 800d2ce:	d102      	bne.n	800d2d6 <_write_r+0x1e>
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	b103      	cbz	r3, 800d2d6 <_write_r+0x1e>
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	bd38      	pop	{r3, r4, r5, pc}
 800d2d8:	2000063c 	.word	0x2000063c

0800d2dc <_close_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	4d06      	ldr	r5, [pc, #24]	; (800d2f8 <_close_r+0x1c>)
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	f7f5 fdb7 	bl	8002e5a <_close>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_close_r+0x1a>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_close_r+0x1a>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	2000063c 	.word	0x2000063c

0800d2fc <_fstat_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	; (800d31c <_fstat_r+0x20>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f5 fdb2 	bl	8002e72 <_fstat>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_fstat_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_fstat_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	2000063c 	.word	0x2000063c

0800d320 <_isatty_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4d06      	ldr	r5, [pc, #24]	; (800d33c <_isatty_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	602b      	str	r3, [r5, #0]
 800d32c:	f7f5 fdb1 	bl	8002e92 <_isatty>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_isatty_r+0x1a>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_isatty_r+0x1a>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	2000063c 	.word	0x2000063c

0800d340 <_lseek_r>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	4d07      	ldr	r5, [pc, #28]	; (800d360 <_lseek_r+0x20>)
 800d344:	4604      	mov	r4, r0
 800d346:	4608      	mov	r0, r1
 800d348:	4611      	mov	r1, r2
 800d34a:	2200      	movs	r2, #0
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	f7f5 fdaa 	bl	8002ea8 <_lseek>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_lseek_r+0x1e>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_lseek_r+0x1e>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	2000063c 	.word	0x2000063c

0800d364 <_malloc_usable_size_r>:
 800d364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d368:	1f18      	subs	r0, r3, #4
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bfbc      	itt	lt
 800d36e:	580b      	ldrlt	r3, [r1, r0]
 800d370:	18c0      	addlt	r0, r0, r3
 800d372:	4770      	bx	lr

0800d374 <_read_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d07      	ldr	r5, [pc, #28]	; (800d394 <_read_r+0x20>)
 800d378:	4604      	mov	r4, r0
 800d37a:	4608      	mov	r0, r1
 800d37c:	4611      	mov	r1, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	602a      	str	r2, [r5, #0]
 800d382:	461a      	mov	r2, r3
 800d384:	f7f5 fd30 	bl	8002de8 <_read>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_read_r+0x1e>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_read_r+0x1e>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	2000063c 	.word	0x2000063c

0800d398 <_init>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	bf00      	nop
 800d39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d39e:	bc08      	pop	{r3}
 800d3a0:	469e      	mov	lr, r3
 800d3a2:	4770      	bx	lr

0800d3a4 <_fini>:
 800d3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a6:	bf00      	nop
 800d3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3aa:	bc08      	pop	{r3}
 800d3ac:	469e      	mov	lr, r3
 800d3ae:	4770      	bx	lr

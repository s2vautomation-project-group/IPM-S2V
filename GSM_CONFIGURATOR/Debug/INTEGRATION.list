
INTEGRATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007800  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e5c  08007e5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e64  08007e64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000070  08007edc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08007edc  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001356a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7a  00000000  00000000  0003360a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00036388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00037288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022590  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ca8  00000000  00000000  0005a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4488  00000000  00000000  0006e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000485c  00000000  00000000  00132760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007978 	.word	0x08007978

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007978 	.word	0x08007978

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <DataToGsm>:
//
//}


void DataToGsm()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	uint8_t sec=d.sec;
 80005aa:	4b35      	ldr	r3, [pc, #212]	; (8000680 <DataToGsm+0xdc>)
 80005ac:	789b      	ldrb	r3, [r3, #2]
 80005ae:	71fb      	strb	r3, [r7, #7]
	//	uint8_t ST=d.scan_time;
	//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf(buffer_Time,"%02d:%02d:%02d",d.hr,d.min,d.sec);
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <DataToGsm+0xdc>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <DataToGsm+0xdc>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <DataToGsm+0xdc>)
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	460b      	mov	r3, r1
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <DataToGsm+0xe0>)
 80005c6:	4830      	ldr	r0, [pc, #192]	; (8000688 <DataToGsm+0xe4>)
 80005c8:	f005 fffc 	bl	80065c4 <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)0x1, 1, HAL_MAX_DELAY);
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	2201      	movs	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	482d      	ldr	r0, [pc, #180]	; (800068c <DataToGsm+0xe8>)
 80005d6:	f004 fa21 	bl	8004a1c <HAL_UART_Transmit>


	if(d.GPIO[0]=='1')
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <DataToGsm+0xdc>)
 80005dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80005e0:	2b31      	cmp	r3, #49	; 0x31
 80005e2:	d106      	bne.n	80005f2 <DataToGsm+0x4e>
	{
		strcpy(d.Status1, "High");
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <DataToGsm+0xec>)
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <DataToGsm+0xf0>)
 80005e8:	6810      	ldr	r0, [r2, #0]
 80005ea:	6018      	str	r0, [r3, #0]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	711a      	strb	r2, [r3, #4]
 80005f0:	e003      	b.n	80005fa <DataToGsm+0x56>
	}
	else
	{
		strcpy(d.Status1, "Low");
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <DataToGsm+0xec>)
 80005f4:	4a28      	ldr	r2, [pc, #160]	; (8000698 <DataToGsm+0xf4>)
 80005f6:	6810      	ldr	r0, [r2, #0]
 80005f8:	6018      	str	r0, [r3, #0]
	}

	if(d.GPIO[1]=='1')
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <DataToGsm+0xdc>)
 80005fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000600:	2b31      	cmp	r3, #49	; 0x31
 8000602:	d106      	bne.n	8000612 <DataToGsm+0x6e>
	{
		strcpy(d.Status2, "High");
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <DataToGsm+0xf8>)
 8000606:	4a23      	ldr	r2, [pc, #140]	; (8000694 <DataToGsm+0xf0>)
 8000608:	6810      	ldr	r0, [r2, #0]
 800060a:	6018      	str	r0, [r3, #0]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	711a      	strb	r2, [r3, #4]
 8000610:	e003      	b.n	800061a <DataToGsm+0x76>
	}
	else
	{
		strcpy(d.Status2, "Low");
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <DataToGsm+0xf8>)
 8000614:	4a20      	ldr	r2, [pc, #128]	; (8000698 <DataToGsm+0xf4>)
 8000616:	6810      	ldr	r0, [r2, #0]
 8000618:	6018      	str	r0, [r3, #0]
	}

	if(d.GPIO[2]=='1')
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <DataToGsm+0xdc>)
 800061c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000620:	2b31      	cmp	r3, #49	; 0x31
 8000622:	d106      	bne.n	8000632 <DataToGsm+0x8e>
	{
		strcpy(d.Status3, "High");
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <DataToGsm+0xfc>)
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <DataToGsm+0xf0>)
 8000628:	6810      	ldr	r0, [r2, #0]
 800062a:	6018      	str	r0, [r3, #0]
 800062c:	7912      	ldrb	r2, [r2, #4]
 800062e:	711a      	strb	r2, [r3, #4]
 8000630:	e003      	b.n	800063a <DataToGsm+0x96>
	}
	else
	{
		strcpy(d.Status3, "Low");
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <DataToGsm+0xfc>)
 8000634:	4a18      	ldr	r2, [pc, #96]	; (8000698 <DataToGsm+0xf4>)
 8000636:	6810      	ldr	r0, [r2, #0]
 8000638:	6018      	str	r0, [r3, #0]
	}

	if(d.GPIO[3]=='1')
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <DataToGsm+0xdc>)
 800063c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000640:	2b31      	cmp	r3, #49	; 0x31
 8000642:	d106      	bne.n	8000652 <DataToGsm+0xae>
	{
		strcpy(d.Status4, "High");
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <DataToGsm+0x100>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <DataToGsm+0xf0>)
 8000648:	6810      	ldr	r0, [r2, #0]
 800064a:	6018      	str	r0, [r3, #0]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	711a      	strb	r2, [r3, #4]
 8000650:	e003      	b.n	800065a <DataToGsm+0xb6>
	}
	else
	{
		strcpy(d.Status4, "Low");
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <DataToGsm+0x100>)
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <DataToGsm+0xf4>)
 8000656:	6810      	ldr	r0, [r2, #0]
 8000658:	6018      	str	r0, [r3, #0]





	if(sec==59)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b3b      	cmp	r3, #59	; 0x3b
 800065e:	d104      	bne.n	800066a <DataToGsm+0xc6>
	{
		count=count+1;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <DataToGsm+0x104>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <DataToGsm+0x104>)
 8000668:	6013      	str	r3, [r2, #0]

	}


	if(count==1)
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <DataToGsm+0x104>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d102      	bne.n	8000678 <DataToGsm+0xd4>
	{
		//		DataToCloud(buffer_Time,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);
		count=0;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <DataToGsm+0x104>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
	}


}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000160 	.word	0x20000160
 8000684:	08007990 	.word	0x08007990
 8000688:	2000008c 	.word	0x2000008c
 800068c:	20000250 	.word	0x20000250
 8000690:	20000190 	.word	0x20000190
 8000694:	080079a0 	.word	0x080079a0
 8000698:	080079a8 	.word	0x080079a8
 800069c:	2000019a 	.word	0x2000019a
 80006a0:	200001a4 	.word	0x200001a4
 80006a4:	200001ae 	.word	0x200001ae
 80006a8:	2000009c 	.word	0x2000009c

080006ac <Configurator>:
char config[4];
uint8_t s[4];
struct data d;

 void Configurator()
 {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	 data_receive();
 80006b0:	f000 fbc0 	bl	8000e34 <data_receive>

		  if (tx_data[0] != '\0')
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <Configurator+0x48>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d003      	beq.n	80006c4 <Configurator+0x18>
		   {
		     flag = 1; // Set flag to indicate data has been received
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <Configurator+0x4c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e002      	b.n	80006ca <Configurator+0x1e>
		   }
		   else
		   {
			   flag=0;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <Configurator+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
		   }

           if (flag)
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <Configurator+0x4c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d005      	beq.n	80006de <Configurator+0x32>
           {
	        extract_data();
 80006d2:	f000 f8e7 	bl	80008a4 <extract_data>
	        pin_config();
 80006d6:	f000 f91d 	bl	8000914 <pin_config>
	        clear_buffer();
 80006da:	f000 f811 	bl	8000700 <clear_buffer>
           }
           reset_output();
 80006de:	f000 f85d 	bl	800079c <reset_output>
           	set_output();
 80006e2:	f000 f819 	bl	8000718 <set_output>
//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

            pin_status = read_pinstatus();
 80006e6:	f000 f89b 	bl	8000820 <read_pinstatus>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a03      	ldr	r2, [pc, #12]	; (80006fc <Configurator+0x50>)
 80006ee:	6013      	str	r3, [r2, #0]
            //status_transmit();
            //DataTOgsm(d);


 }
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000a4 	.word	0x200000a4
 80006f8:	20000154 	.word	0x20000154
 80006fc:	20000158 	.word	0x20000158

08000700 <clear_buffer>:

 void clear_buffer()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 8000704:	220f      	movs	r2, #15
 8000706:	2100      	movs	r1, #0
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <clear_buffer+0x14>)
 800070a:	f005 fe63 	bl	80063d4 <memset>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000a4 	.word	0x200000a4

08000718 <set_output>:
//
//   HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, 20);
// }

 void set_output()
 {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	 if(config[0] == 0)
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <set_output+0x78>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d109      	bne.n	8000738 <set_output+0x20>
	{
		 d.GPIO[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <set_output+0x7c>)
 800072a:	f000 fba7 	bl	8000e7c <write_gpio>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <set_output+0x80>)
 8000734:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	if(config[1] == 0)
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <set_output+0x78>)
 800073a:	785b      	ldrb	r3, [r3, #1]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d109      	bne.n	8000754 <set_output+0x3c>
	{
		d.GPIO[1] = write_gpio(GPIOB,GPIO_PIN_1, PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2102      	movs	r1, #2
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <set_output+0x7c>)
 8000746:	f000 fb99 	bl	8000e7c <write_gpio>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <set_output+0x80>)
 8000750:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(config[2] == 0)
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <set_output+0x78>)
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d109      	bne.n	8000770 <set_output+0x58>
	{
		d.GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <set_output+0x7c>)
 8000762:	f000 fb8b 	bl	8000e7c <write_gpio>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <set_output+0x80>)
 800076c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}

	if(config[3] == 0)
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <set_output+0x78>)
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <set_output+0x74>
	{
		d.GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2120      	movs	r1, #32
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <set_output+0x7c>)
 800077e:	f000 fb7d 	bl	8000e7c <write_gpio>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <set_output+0x80>)
 8000788:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
 }
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000015c 	.word	0x2000015c
 8000794:	48000400 	.word	0x48000400
 8000798:	20000160 	.word	0x20000160

0800079c <reset_output>:

 void reset_output()
  {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
 	 if(config[0] == 0)
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <reset_output+0x78>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d109      	bne.n	80007bc <reset_output+0x20>
 	{
 		d.GPIO[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2101      	movs	r1, #1
 80007ac:	481a      	ldr	r0, [pc, #104]	; (8000818 <reset_output+0x7c>)
 80007ae:	f000 fb65 	bl	8000e7c <write_gpio>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <reset_output+0x80>)
 80007b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 	}

 	if(config[1] == 0)
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <reset_output+0x78>)
 80007be:	785b      	ldrb	r3, [r3, #1]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d109      	bne.n	80007d8 <reset_output+0x3c>
 	{
 		d.GPIO[1]=write_gpio(GPIOB,GPIO_PIN_1, PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2102      	movs	r1, #2
 80007c8:	4813      	ldr	r0, [pc, #76]	; (8000818 <reset_output+0x7c>)
 80007ca:	f000 fb57 	bl	8000e7c <write_gpio>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <reset_output+0x80>)
 80007d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 	}

 	if(config[2] == 0)
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <reset_output+0x78>)
 80007da:	789b      	ldrb	r3, [r3, #2]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d109      	bne.n	80007f4 <reset_output+0x58>
 	{
 		d.GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2110      	movs	r1, #16
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <reset_output+0x7c>)
 80007e6:	f000 fb49 	bl	8000e7c <write_gpio>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <reset_output+0x80>)
 80007f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 	}

 	if(config[3] == 0)
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <reset_output+0x78>)
 80007f6:	78db      	ldrb	r3, [r3, #3]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d109      	bne.n	8000810 <reset_output+0x74>
 	{
 		d.GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <reset_output+0x7c>)
 8000802:	f000 fb3b 	bl	8000e7c <write_gpio>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <reset_output+0x80>)
 800080c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 	}
  }
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000015c 	.word	0x2000015c
 8000818:	48000400 	.word	0x48000400
 800081c:	20000160 	.word	0x20000160

08000820 <read_pinstatus>:

 uint8_t* read_pinstatus()
 {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	 if(config[0]==1)
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <read_pinstatus+0x74>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d108      	bne.n	800083e <read_pinstatus+0x1e>
	 {
	     d.GPIO[0]=read_gpio( GPIOB,GPIO_PIN_0);
 800082c:	2101      	movs	r1, #1
 800082e:	481a      	ldr	r0, [pc, #104]	; (8000898 <read_pinstatus+0x78>)
 8000830:	f000 fb14 	bl	8000e5c <read_gpio>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <read_pinstatus+0x7c>)
 800083a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	 }
	 if(config[1]==1)
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <read_pinstatus+0x74>)
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d108      	bne.n	8000858 <read_pinstatus+0x38>
	 {
		 d.GPIO[1]=read_gpio( GPIOB,GPIO_PIN_1);
 8000846:	2102      	movs	r1, #2
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <read_pinstatus+0x78>)
 800084a:	f000 fb07 	bl	8000e5c <read_gpio>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <read_pinstatus+0x7c>)
 8000854:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 }
	 if(config[2]==1)
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <read_pinstatus+0x74>)
 800085a:	789b      	ldrb	r3, [r3, #2]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d108      	bne.n	8000872 <read_pinstatus+0x52>
	 {
	    d.GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 8000860:	2110      	movs	r1, #16
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <read_pinstatus+0x78>)
 8000864:	f000 fafa 	bl	8000e5c <read_gpio>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <read_pinstatus+0x7c>)
 800086e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	 }
	if(config[3]==1)
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <read_pinstatus+0x74>)
 8000874:	78db      	ldrb	r3, [r3, #3]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d108      	bne.n	800088c <read_pinstatus+0x6c>
	{
	   d.GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 800087a:	2120      	movs	r1, #32
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <read_pinstatus+0x78>)
 800087e:	f000 faed 	bl	8000e5c <read_gpio>
 8000882:	4603      	mov	r3, r0
 8000884:	461a      	mov	r2, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <read_pinstatus+0x7c>)
 8000888:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
	 return d.GPIO;
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <read_pinstatus+0x80>)
 }
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000015c 	.word	0x2000015c
 8000898:	48000400 	.word	0x48000400
 800089c:	20000160 	.word	0x20000160
 80008a0:	2000018b 	.word	0x2000018b

080008a4 <extract_data>:


void extract_data()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 80008a8:	4915      	ldr	r1, [pc, #84]	; (8000900 <extract_data+0x5c>)
 80008aa:	4816      	ldr	r0, [pc, #88]	; (8000904 <extract_data+0x60>)
 80008ac:	f005 febe 	bl	800662c <strtok>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <extract_data+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <extract_data+0x64>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d010      	beq.n	80008e0 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <extract_data+0x64>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2209      	movs	r2, #9
 80008c4:	4619      	mov	r1, r3
 80008c6:	4811      	ldr	r0, [pc, #68]	; (800090c <extract_data+0x68>)
 80008c8:	f005 fe9c 	bl	8006604 <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <extract_data+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	725a      	strb	r2, [r3, #9]
		         token = strtok(NULL, ",");
 80008d2:	490b      	ldr	r1, [pc, #44]	; (8000900 <extract_data+0x5c>)
 80008d4:	2000      	movs	r0, #0
 80008d6:	f005 fea9 	bl	800662c <strtok>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <extract_data+0x64>)
 80008de:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <extract_data+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d009      	beq.n	80008fc <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <extract_data+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2209      	movs	r2, #9
 80008ee:	4619      	mov	r1, r3
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <extract_data+0x6c>)
 80008f2:	f005 fe87 	bl	8006604 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <extract_data+0x6c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	725a      	strb	r2, [r3, #9]
		         //token = strtok(NULL, ",");
		     }


}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	080079ac 	.word	0x080079ac
 8000904:	200000a4 	.word	0x200000a4
 8000908:	20000150 	.word	0x20000150
 800090c:	20000138 	.word	0x20000138
 8000910:	20000144 	.word	0x20000144

08000914 <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"B0")==0)
 8000918:	497a      	ldr	r1, [pc, #488]	; (8000b04 <pin_config+0x1f0>)
 800091a:	487b      	ldr	r0, [pc, #492]	; (8000b08 <pin_config+0x1f4>)
 800091c:	f7ff fc58 	bl	80001d0 <strcmp>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <pin_config+0x1a>
			     {
			       switch_val=1;
 8000926:	4b79      	ldr	r3, [pc, #484]	; (8000b0c <pin_config+0x1f8>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	e040      	b.n	80009b0 <pin_config+0x9c>
			     }

	            else if(strcmp(arr1,"B1")==0)
 800092e:	4978      	ldr	r1, [pc, #480]	; (8000b10 <pin_config+0x1fc>)
 8000930:	4875      	ldr	r0, [pc, #468]	; (8000b08 <pin_config+0x1f4>)
 8000932:	f7ff fc4d 	bl	80001d0 <strcmp>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d103      	bne.n	8000944 <pin_config+0x30>
				 {
				   switch_val=2;
 800093c:	4b73      	ldr	r3, [pc, #460]	; (8000b0c <pin_config+0x1f8>)
 800093e:	2202      	movs	r2, #2
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e035      	b.n	80009b0 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"B4")==0)
 8000944:	4973      	ldr	r1, [pc, #460]	; (8000b14 <pin_config+0x200>)
 8000946:	4870      	ldr	r0, [pc, #448]	; (8000b08 <pin_config+0x1f4>)
 8000948:	f7ff fc42 	bl	80001d0 <strcmp>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <pin_config+0x46>
	           	 {
	           		switch_val=3;
 8000952:	4b6e      	ldr	r3, [pc, #440]	; (8000b0c <pin_config+0x1f8>)
 8000954:	2203      	movs	r2, #3
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	e02a      	b.n	80009b0 <pin_config+0x9c>
	           	 }

	            else if(strcmp(arr1,"B5")==0)
 800095a:	496f      	ldr	r1, [pc, #444]	; (8000b18 <pin_config+0x204>)
 800095c:	486a      	ldr	r0, [pc, #424]	; (8000b08 <pin_config+0x1f4>)
 800095e:	f7ff fc37 	bl	80001d0 <strcmp>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d103      	bne.n	8000970 <pin_config+0x5c>
                 {
				    switch_val=4;
 8000968:	4b68      	ldr	r3, [pc, #416]	; (8000b0c <pin_config+0x1f8>)
 800096a:	2204      	movs	r2, #4
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	e01f      	b.n	80009b0 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"ADC1")==0)
 8000970:	496a      	ldr	r1, [pc, #424]	; (8000b1c <pin_config+0x208>)
 8000972:	4865      	ldr	r0, [pc, #404]	; (8000b08 <pin_config+0x1f4>)
 8000974:	f7ff fc2c 	bl	80001d0 <strcmp>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <pin_config+0x72>
				 {
					switch_val=5;
 800097e:	4b63      	ldr	r3, [pc, #396]	; (8000b0c <pin_config+0x1f8>)
 8000980:	2205      	movs	r2, #5
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	e014      	b.n	80009b0 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"RTC")==0)
 8000986:	4966      	ldr	r1, [pc, #408]	; (8000b20 <pin_config+0x20c>)
 8000988:	485f      	ldr	r0, [pc, #380]	; (8000b08 <pin_config+0x1f4>)
 800098a:	f7ff fc21 	bl	80001d0 <strcmp>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d103      	bne.n	800099c <pin_config+0x88>
	             {
	            	switch_val=6;
 8000994:	4b5d      	ldr	r3, [pc, #372]	; (8000b0c <pin_config+0x1f8>)
 8000996:	2206      	movs	r2, #6
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e009      	b.n	80009b0 <pin_config+0x9c>
	             }

	            else if(strcmp(arr1,"SCANTIME")==0)
 800099c:	4961      	ldr	r1, [pc, #388]	; (8000b24 <pin_config+0x210>)
 800099e:	485a      	ldr	r0, [pc, #360]	; (8000b08 <pin_config+0x1f4>)
 80009a0:	f7ff fc16 	bl	80001d0 <strcmp>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <pin_config+0x9c>
				 {
					switch_val=7;
 80009aa:	4b58      	ldr	r3, [pc, #352]	; (8000b0c <pin_config+0x1f8>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
				 }


			     switch(switch_val)
 80009b0:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <pin_config+0x1f8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	f200 80a2 	bhi.w	8000b00 <pin_config+0x1ec>
 80009bc:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <pin_config+0xb0>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	080009e1 	.word	0x080009e1
 80009c8:	08000a21 	.word	0x08000a21
 80009cc:	08000a61 	.word	0x08000a61
 80009d0:	08000aa1 	.word	0x08000aa1
 80009d4:	08000b01 	.word	0x08000b01
 80009d8:	08000b01 	.word	0x08000b01
 80009dc:	08000ae1 	.word	0x08000ae1
			     {

			     case 1:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 80009e0:	4951      	ldr	r1, [pc, #324]	; (8000b28 <pin_config+0x214>)
 80009e2:	4852      	ldr	r0, [pc, #328]	; (8000b2c <pin_config+0x218>)
 80009e4:	f7ff fbf4 	bl	80001d0 <strcmp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d108      	bne.n	8000a00 <pin_config+0xec>
						{
			              user_GPIO_Init(GPIOB,GPIO_PIN_0,OUTPUT);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2101      	movs	r1, #1
 80009f2:	484f      	ldr	r0, [pc, #316]	; (8000b30 <pin_config+0x21c>)
 80009f4:	f000 f982 	bl	8000cfc <user_GPIO_Init>
					      config[0] = 0;
 80009f8:	4b4e      	ldr	r3, [pc, #312]	; (8000b34 <pin_config+0x220>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
			              else if(strcmp(arr2,"INPUT")==0)
					    {
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
						   config[0] = 1;
					    }
			     break;
 80009fe:	e078      	b.n	8000af2 <pin_config+0x1de>
			              else if(strcmp(arr2,"INPUT")==0)
 8000a00:	494d      	ldr	r1, [pc, #308]	; (8000b38 <pin_config+0x224>)
 8000a02:	484a      	ldr	r0, [pc, #296]	; (8000b2c <pin_config+0x218>)
 8000a04:	f7ff fbe4 	bl	80001d0 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d171      	bne.n	8000af2 <pin_config+0x1de>
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2101      	movs	r1, #1
 8000a12:	4847      	ldr	r0, [pc, #284]	; (8000b30 <pin_config+0x21c>)
 8000a14:	f000 f972 	bl	8000cfc <user_GPIO_Init>
						   config[0] = 1;
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <pin_config+0x220>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
			     break;
 8000a1e:	e068      	b.n	8000af2 <pin_config+0x1de>

			   case 2:
				    	if(strcmp(arr2,"OUTPUT")==0)
 8000a20:	4941      	ldr	r1, [pc, #260]	; (8000b28 <pin_config+0x214>)
 8000a22:	4842      	ldr	r0, [pc, #264]	; (8000b2c <pin_config+0x218>)
 8000a24:	f7ff fbd4 	bl	80001d0 <strcmp>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d108      	bne.n	8000a40 <pin_config+0x12c>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_1,OUTPUT);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	483f      	ldr	r0, [pc, #252]	; (8000b30 <pin_config+0x21c>)
 8000a34:	f000 f962 	bl	8000cfc <user_GPIO_Init>
			    	      config[1]=0;
 8000a38:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <pin_config+0x220>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	705a      	strb	r2, [r3, #1]
			    	     else if(strcmp(arr2,"INPUT")==0)
			    		{
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
			    		  config[1]=1;
			    		}
	    	    break;
 8000a3e:	e05a      	b.n	8000af6 <pin_config+0x1e2>
			    	     else if(strcmp(arr2,"INPUT")==0)
 8000a40:	493d      	ldr	r1, [pc, #244]	; (8000b38 <pin_config+0x224>)
 8000a42:	483a      	ldr	r0, [pc, #232]	; (8000b2c <pin_config+0x218>)
 8000a44:	f7ff fbc4 	bl	80001d0 <strcmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d153      	bne.n	8000af6 <pin_config+0x1e2>
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2102      	movs	r1, #2
 8000a52:	4837      	ldr	r0, [pc, #220]	; (8000b30 <pin_config+0x21c>)
 8000a54:	f000 f952 	bl	8000cfc <user_GPIO_Init>
			    		  config[1]=1;
 8000a58:	4b36      	ldr	r3, [pc, #216]	; (8000b34 <pin_config+0x220>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	705a      	strb	r2, [r3, #1]
	    	    break;
 8000a5e:	e04a      	b.n	8000af6 <pin_config+0x1e2>

			     case 3:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8000a60:	4931      	ldr	r1, [pc, #196]	; (8000b28 <pin_config+0x214>)
 8000a62:	4832      	ldr	r0, [pc, #200]	; (8000b2c <pin_config+0x218>)
 8000a64:	f7ff fbb4 	bl	80001d0 <strcmp>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d108      	bne.n	8000a80 <pin_config+0x16c>
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2110      	movs	r1, #16
 8000a72:	482f      	ldr	r0, [pc, #188]	; (8000b30 <pin_config+0x21c>)
 8000a74:	f000 f942 	bl	8000cfc <user_GPIO_Init>
			     		  config[2]=0;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <pin_config+0x220>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	709a      	strb	r2, [r3, #2]
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			     		  config[2]=1;
			     		}

			     break;
 8000a7e:	e03c      	b.n	8000afa <pin_config+0x1e6>
			     		 else if(strcmp(arr2,"INPUT")==0)
 8000a80:	492d      	ldr	r1, [pc, #180]	; (8000b38 <pin_config+0x224>)
 8000a82:	482a      	ldr	r0, [pc, #168]	; (8000b2c <pin_config+0x218>)
 8000a84:	f7ff fba4 	bl	80001d0 <strcmp>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d135      	bne.n	8000afa <pin_config+0x1e6>
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2110      	movs	r1, #16
 8000a92:	4827      	ldr	r0, [pc, #156]	; (8000b30 <pin_config+0x21c>)
 8000a94:	f000 f932 	bl	8000cfc <user_GPIO_Init>
			     		  config[2]=1;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <pin_config+0x220>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	709a      	strb	r2, [r3, #2]
			     break;
 8000a9e:	e02c      	b.n	8000afa <pin_config+0x1e6>

			     case 4:
			    	 	 if(strcmp(arr2,"OUTPUT")==0)
 8000aa0:	4921      	ldr	r1, [pc, #132]	; (8000b28 <pin_config+0x214>)
 8000aa2:	4822      	ldr	r0, [pc, #136]	; (8000b2c <pin_config+0x218>)
 8000aa4:	f7ff fb94 	bl	80001d0 <strcmp>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d108      	bne.n	8000ac0 <pin_config+0x1ac>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	481f      	ldr	r0, [pc, #124]	; (8000b30 <pin_config+0x21c>)
 8000ab4:	f000 f922 	bl	8000cfc <user_GPIO_Init>
			    		  config[3]=0;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <pin_config+0x220>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	70da      	strb	r2, [r3, #3]
			    		  else if(strcmp(arr2,"INPUT")==0)
			    	    {
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			              config[3]=1;
			    	    }
			     break;
 8000abe:	e01e      	b.n	8000afe <pin_config+0x1ea>
			    		  else if(strcmp(arr2,"INPUT")==0)
 8000ac0:	491d      	ldr	r1, [pc, #116]	; (8000b38 <pin_config+0x224>)
 8000ac2:	481a      	ldr	r0, [pc, #104]	; (8000b2c <pin_config+0x218>)
 8000ac4:	f7ff fb84 	bl	80001d0 <strcmp>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d117      	bne.n	8000afe <pin_config+0x1ea>
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <pin_config+0x21c>)
 8000ad4:	f000 f912 	bl	8000cfc <user_GPIO_Init>
			              config[3]=1;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <pin_config+0x220>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	70da      	strb	r2, [r3, #3]
			     break;
 8000ade:	e00e      	b.n	8000afe <pin_config+0x1ea>
//				 }
//				 Set_Time(time);
//
//			 break;
			     case 7:
			    	 d.scan_time = (uint8_t)atoi(arr2);
 8000ae0:	4812      	ldr	r0, [pc, #72]	; (8000b2c <pin_config+0x218>)
 8000ae2:	f005 fc40 	bl	8006366 <atoi>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <pin_config+0x228>)
 8000aec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
//			    	 DataTOgsm(d);
			     }
}
 8000af0:	e006      	b.n	8000b00 <pin_config+0x1ec>
			     break;
 8000af2:	bf00      	nop
 8000af4:	e004      	b.n	8000b00 <pin_config+0x1ec>
	    	    break;
 8000af6:	bf00      	nop
 8000af8:	e002      	b.n	8000b00 <pin_config+0x1ec>
			     break;
 8000afa:	bf00      	nop
 8000afc:	e000      	b.n	8000b00 <pin_config+0x1ec>
			     break;
 8000afe:	bf00      	nop
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	080079b0 	.word	0x080079b0
 8000b08:	20000138 	.word	0x20000138
 8000b0c:	200000a0 	.word	0x200000a0
 8000b10:	080079b4 	.word	0x080079b4
 8000b14:	080079b8 	.word	0x080079b8
 8000b18:	080079bc 	.word	0x080079bc
 8000b1c:	080079c0 	.word	0x080079c0
 8000b20:	080079c8 	.word	0x080079c8
 8000b24:	080079cc 	.word	0x080079cc
 8000b28:	080079d8 	.word	0x080079d8
 8000b2c:	20000144 	.word	0x20000144
 8000b30:	48000400 	.word	0x48000400
 8000b34:	2000015c 	.word	0x2000015c
 8000b38:	080079e0 	.word	0x080079e0
 8000b3c:	20000160 	.word	0x20000160

08000b40 <UART2_Init>:

UART_HandleTypeDef huart2;


void UART2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <UART2_Init+0x58>)
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <UART2_Init+0x5c>)
 8000b48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <UART2_Init+0x58>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <UART2_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <UART2_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <UART2_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <UART2_Init+0x58>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <UART2_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <UART2_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <UART2_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <UART2_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <UART2_Init+0x58>)
 8000b84:	f003 fefc 	bl	8004980 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <UART2_Init+0x52>
	{
		Error_Handler();
 8000b8e:	f000 fb67 	bl	8001260 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000250 	.word	0x20000250
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <DataToUart>:
//{
//	HAL_UART_Transmit(&huart2, (uint8_t*)GPIO, 4,1000);
//}

void DataToUart(struct data *d)
{
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	b08f      	sub	sp, #60	; 0x3c
 8000ba4:	af0a      	add	r7, sp, #40	; 0x28
 8000ba6:	60f8      	str	r0, [r7, #12]
//	extern buffer_Time;
//	sprintf(buffer_Time,"%02d:%02d:%02d",d1->hr,d1->min,d1->sec);
//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);

	sprintf(buf,"%02d:%02d:%02d,%s,%s,%s,%s,%s,%s,%s,%s\r\n",d->hr,d->min,d->sec,d->CH1,d->CH2,d->CH3,d->CH4,d->Status1,d->Status2,d->Status3,d->Status4);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	469c      	mov	ip, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	785b      	ldrb	r3, [r3, #1]
 8000bb2:	469e      	mov	lr, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	789b      	ldrb	r3, [r3, #2]
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3303      	adds	r3, #3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	320d      	adds	r2, #13
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	68f9      	ldr	r1, [r7, #12]
 8000bc6:	3117      	adds	r1, #23
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	3021      	adds	r0, #33	; 0x21
 8000bcc:	68fc      	ldr	r4, [r7, #12]
 8000bce:	3430      	adds	r4, #48	; 0x30
 8000bd0:	68fd      	ldr	r5, [r7, #12]
 8000bd2:	353a      	adds	r5, #58	; 0x3a
 8000bd4:	68fe      	ldr	r6, [r7, #12]
 8000bd6:	3644      	adds	r6, #68	; 0x44
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	324e      	adds	r2, #78	; 0x4e
 8000bdc:	9208      	str	r2, [sp, #32]
 8000bde:	9607      	str	r6, [sp, #28]
 8000be0:	9506      	str	r5, [sp, #24]
 8000be2:	9405      	str	r4, [sp, #20]
 8000be4:	9004      	str	r0, [sp, #16]
 8000be6:	9103      	str	r1, [sp, #12]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	9202      	str	r2, [sp, #8]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	4673      	mov	r3, lr
 8000bf4:	4662      	mov	r2, ip
 8000bf6:	4904      	ldr	r1, [pc, #16]	; (8000c08 <DataToUart+0x68>)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <DataToUart+0x6c>)
 8000bfa:	f005 fce3 	bl	80065c4 <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
//	HAL_Delay(1000);

}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c06:	bf00      	nop
 8000c08:	080079e8 	.word	0x080079e8
 8000c0c:	200001b8 	.word	0x200001b8

08000c10 <GsmCommands>:



void GsmCommands(uint8_t* cmd)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fae3 	bl	80001e4 <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4808      	ldr	r0, [pc, #32]	; (8000c48 <GsmCommands+0x38>)
 8000c28:	f004 f85e 	bl	8004ce8 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 8000c2c:	2264      	movs	r2, #100	; 0x64
 8000c2e:	4907      	ldr	r1, [pc, #28]	; (8000c4c <GsmCommands+0x3c>)
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <GsmCommands+0x38>)
 8000c32:	f004 f8c7 	bl	8004dc4 <HAL_UART_Receive_IT>
	HAL_Delay(1000);
 8000c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3a:	f000 fe31 	bl	80018a0 <HAL_Delay>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000250 	.word	0x20000250
 8000c4c:	200001ec 	.word	0x200001ec

08000c50 <Gsm_Init>:



void Gsm_Init()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 8000c54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c58:	f000 fe22 	bl	80018a0 <HAL_Delay>


	GsmCommands((uint8_t*)"AT\r\n");
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <Gsm_Init+0x34>)
 8000c5e:	f7ff ffd7 	bl	8000c10 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <Gsm_Init+0x38>)
 8000c64:	f7ff ffd4 	bl	8000c10 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <Gsm_Init+0x3c>)
 8000c6a:	f7ff ffd1 	bl	8000c10 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <Gsm_Init+0x40>)
 8000c70:	f7ff ffce 	bl	8000c10 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"airtelgprs.com\"\r\n");
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <Gsm_Init+0x44>)
 8000c76:	f7ff ffcb 	bl	8000c10 <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <Gsm_Init+0x48>)
 8000c7c:	f7ff ffc8 	bl	8000c10 <GsmCommands>

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	08007a14 	.word	0x08007a14
 8000c88:	08007a1c 	.word	0x08007a1c
 8000c8c:	08007a28 	.word	0x08007a28
 8000c90:	08007a34 	.word	0x08007a34
 8000c94:	08007a44 	.word	0x08007a44
 8000c98:	08007a6c 	.word	0x08007a6c

08000c9c <user_USART1_UART_Init>:
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

 void user_USART1_UART_Init(void)
 {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
 ////////////////////
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <user_USART1_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <user_USART1_UART_Init+0x58>)
 8000ce0:	f003 fe4e 	bl	8004980 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <user_USART1_UART_Init+0x52>
   {
     Error_Handler();
 8000cea:	f000 fab9 	bl	8001260 <Error_Handler>
   }

 }
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000b4 	.word	0x200000b4
 8000cf8:	40013800 	.word	0x40013800

08000cfc <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <user_GPIO_Init+0xac>)
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8000d54:	787a      	ldrb	r2, [r7, #1]
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f001 f8e4 	bl	8001f28 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8000d60:	787b      	ldrb	r3, [r7, #1]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d106      	bne.n	8000d74 <user_GPIO_Init+0x78>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8000d66:	787a      	ldrb	r2, [r7, #1]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f81f 	bl	8000db0 <gpio_output>
 8000d72:	e008      	b.n	8000d86 <user_GPIO_Init+0x8a>
     }
     else if(PIN_mode == INPUT)
 8000d74:	787b      	ldrb	r3, [r7, #1]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d105      	bne.n	8000d86 <user_GPIO_Init+0x8a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 8000d7a:	787a      	ldrb	r2, [r7, #1]
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f837 	bl	8000df4 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <user_GPIO_Init+0xb0>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <user_GPIO_Init+0xb0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <user_GPIO_Init+0xb0>)
 8000d94:	2203      	movs	r2, #3
 8000d96:	60da      	str	r2, [r3, #12]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <user_GPIO_Init+0xb0>)
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	200002d4 	.word	0x200002d4

08000db0 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 ff1c 	bl	8001c24 <HAL_GPIO_Init>
 }
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
 8000e00:	4613      	mov	r3, r2
 8000e02:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fefc 	bl	8001c24 <HAL_GPIO_Init>
 }
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <data_receive>:




void data_receive()
 {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	2214      	movs	r2, #20
 8000e3e:	4905      	ldr	r1, [pc, #20]	; (8000e54 <data_receive+0x20>)
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <data_receive+0x24>)
 8000e42:	f003 fe7f 	bl	8004b44 <HAL_UART_Receive>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d101      	bne.n	8000e50 <data_receive+0x1c>
	 {
			 Error_Handler();
 8000e4c:	f000 fa08 	bl	8001260 <Error_Handler>
	 }
 }
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000a4 	.word	0x200000a4
 8000e58:	200000b4 	.word	0x200000b4

08000e5c <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f001 f843 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0

 }
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8000e8c:	787a      	ldrb	r2, [r7, #1]
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	4619      	mov	r1, r3
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f001 f848 	bl	8001f28 <HAL_GPIO_WritePin>
    return PinState;
 8000e98:	787b      	ldrb	r3, [r7, #1]
 }
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <dec_bcd>:


//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <dec_bcd+0x48>)
 8000eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb4:	1092      	asrs	r2, r2, #2
 8000eb6:	17db      	asrs	r3, r3, #31
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <dec_bcd+0x48>)
 8000ec4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ec8:	1099      	asrs	r1, r3, #2
 8000eca:	17d3      	asrs	r3, r2, #31
 8000ecc:	1ac9      	subs	r1, r1, r3
 8000ece:	460b      	mov	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1ad1      	subs	r1, r2, r3
 8000ed8:	b2cb      	uxtb	r3, r1
 8000eda:	4403      	add	r3, r0
 8000edc:	b2db      	uxtb	r3, r3
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	66666667 	.word	0x66666667

08000ef0 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	461a      	mov	r2, r3
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	4413      	add	r3, r2
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fc46 	bl	80017b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f857 	bl	8000fdc <SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
//  MX_USART1_UART_Init();
  MX_I2C3_Init();
 8000f2e:	f000 f8b7 	bl	80010a0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  UART2_Init();
 8000f32:	f7ff fe05 	bl	8000b40 <UART2_Init>
//  user_SystemClock_Config();
  user_USART1_UART_Init();
 8000f36:	f7ff feb1 	bl	8000c9c <user_USART1_UART_Init>
  	set_time(00,30,2,5,30,7,24);
 8000f3a:	2318      	movs	r3, #24
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2307      	movs	r3, #7
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	231e      	movs	r3, #30
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2305      	movs	r3, #5
 8000f48:	2202      	movs	r2, #2
 8000f4a:	211e      	movs	r1, #30
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 f8e7 	bl	8001120 <set_time>

  	  Gsm_Init();
 8000f52:	f7ff fe7d 	bl	8000c50 <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Configurator();
 8000f56:	f7ff fba9 	bl	80006ac <Configurator>
	  get_time();
 8000f5a:	f000 f931 	bl	80011c0 <get_time>
	  d1.hr=time.hour;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <main+0x94>)
 8000f60:	789a      	ldrb	r2, [r3, #2]
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <main+0x98>)
 8000f64:	701a      	strb	r2, [r3, #0]
	  d1.min=time.minutes;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <main+0x94>)
 8000f68:	785a      	ldrb	r2, [r3, #1]
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <main+0x98>)
 8000f6c:	705a      	strb	r2, [r3, #1]
	  d1.sec=time.seconds;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <main+0x94>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <main+0x98>)
 8000f74:	709a      	strb	r2, [r3, #2]
	  strcpy(d1.CH1, "ADC1");
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <main+0x9c>)
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <main+0xa0>)
 8000f7a:	6810      	ldr	r0, [r2, #0]
 8000f7c:	6018      	str	r0, [r3, #0]
 8000f7e:	7912      	ldrb	r2, [r2, #4]
 8000f80:	711a      	strb	r2, [r3, #4]
	  strcpy(d1.CH2, "ADC2");
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <main+0xa4>)
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <main+0xa8>)
 8000f86:	6810      	ldr	r0, [r2, #0]
 8000f88:	6018      	str	r0, [r3, #0]
 8000f8a:	7912      	ldrb	r2, [r2, #4]
 8000f8c:	711a      	strb	r2, [r3, #4]
	  strcpy(d1.CH3, "ADC3");
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <main+0xac>)
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <main+0xb0>)
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	6018      	str	r0, [r3, #0]
 8000f96:	7912      	ldrb	r2, [r2, #4]
 8000f98:	711a      	strb	r2, [r3, #4]
	  strcpy(d1.CH4, "ADC4");
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <main+0xb4>)
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <main+0xb8>)
 8000f9e:	6810      	ldr	r0, [r2, #0]
 8000fa0:	6018      	str	r0, [r3, #0]
 8000fa2:	7912      	ldrb	r2, [r2, #4]
 8000fa4:	711a      	strb	r2, [r3, #4]
//	  d1.GPIO[0]='SOH';
//	  d1.GPIO[1]='1';
//	  d1.GPIO[2]='1';
//	  d1.GPIO[3]='1';
//	  strcpy(d1.GPIO,"1001");
	  	  		DataToGsm(&d1);
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <main+0x98>)
 8000fa8:	f7ff fafc 	bl	80005a4 <DataToGsm>
	  //		HAL_Delay(2000);
	  		DataToUart(&d1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <main+0x98>)
 8000fae:	f7ff fdf7 	bl	8000ba0 <DataToUart>
	  Configurator();
 8000fb2:	e7d0      	b.n	8000f56 <main+0x36>
 8000fb4:	200002e8 	.word	0x200002e8
 8000fb8:	20000344 	.word	0x20000344
 8000fbc:	20000347 	.word	0x20000347
 8000fc0:	08007ba8 	.word	0x08007ba8
 8000fc4:	20000351 	.word	0x20000351
 8000fc8:	08007bb0 	.word	0x08007bb0
 8000fcc:	2000035b 	.word	0x2000035b
 8000fd0:	08007bb8 	.word	0x08007bb8
 8000fd4:	20000365 	.word	0x20000365
 8000fd8:	08007bc0 	.word	0x08007bc0

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	; 0x58
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2244      	movs	r2, #68	; 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 f9f2 	bl	80063d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001002:	f002 fb37 	bl	8003674 <HAL_PWREx_ControlVoltageScaling>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800100c:	f000 f928 	bl	8001260 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001010:	f002 fb12 	bl	8003638 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <SystemClock_Config+0xc0>)
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <SystemClock_Config+0xc0>)
 800101c:	f023 0318 	bic.w	r3, r3, #24
 8001020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001024:	2314      	movs	r3, #20
 8001026:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001034:	2360      	movs	r3, #96	; 0x60
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800103c:	2301      	movs	r3, #1
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001044:	2310      	movs	r3, #16
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001048:	2307      	movs	r3, #7
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fb61 	bl	8003720 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001064:	f000 f8fc 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2303      	movs	r3, #3
 800106e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	2101      	movs	r1, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f002 ff61 	bl	8003f48 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800108c:	f000 f8e8 	bl	8001260 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001090:	f003 fb74 	bl	800477c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001094:	bf00      	nop
 8001096:	3758      	adds	r7, #88	; 0x58
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000

080010a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_I2C3_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <MX_I2C3_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_I2C3_Init+0x74>)
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <MX_I2C3_Init+0x7c>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_I2C3_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_I2C3_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_I2C3_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_I2C3_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C3_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <MX_I2C3_Init+0x74>)
 80010dc:	f000 ff3c 	bl	8001f58 <HAL_I2C_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f000 f8bb 	bl	8001260 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <MX_I2C3_Init+0x74>)
 80010ee:	f002 fa0b 	bl	8003508 <HAL_I2CEx_ConfigAnalogFilter>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f000 f8b2 	bl	8001260 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_I2C3_Init+0x74>)
 8001100:	f002 fa4d 	bl	800359e <HAL_I2CEx_ConfigDigitalFilter>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8a9 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002f0 	.word	0x200002f0
 8001118:	40005c00 	.word	0x40005c00
 800111c:	00707cbb 	.word	0x00707cbb

08001120 <set_time>:
//
///* USER CODE BEGIN 4 */


void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af04      	add	r7, sp, #16
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	4603      	mov	r3, r0
 8001134:	71bb      	strb	r3, [r7, #6]
 8001136:	460b      	mov	r3, r1
 8001138:	717b      	strb	r3, [r7, #5]
 800113a:	4613      	mov	r3, r2
 800113c:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff feaf 	bl	8000ea4 <dec_bcd>
 8001146:	4603      	mov	r3, r0
 8001148:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fea9 	bl	8000ea4 <dec_bcd>
 8001152:	4603      	mov	r3, r0
 8001154:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fea3 	bl	8000ea4 <dec_bcd>
 800115e:	4603      	mov	r3, r0
 8001160:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 8001162:	793b      	ldrb	r3, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fe9d 	bl	8000ea4 <dec_bcd>
 800116a:	4603      	mov	r3, r0
 800116c:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 800116e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fe96 	bl	8000ea4 <dec_bcd>
 8001178:	4603      	mov	r3, r0
 800117a:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 800117c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fe8f 	bl	8000ea4 <dec_bcd>
 8001186:	4603      	mov	r3, r0
 8001188:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 800118a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fe88 	bl	8000ea4 <dec_bcd>
 8001194:	4603      	mov	r3, r0
 8001196:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c3, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2307      	movs	r3, #7
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2200      	movs	r2, #0
 80011ac:	21d0      	movs	r1, #208	; 0xd0
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <set_time+0x9c>)
 80011b0:	f000 ff62 	bl	8002078 <HAL_I2C_Mem_Write>
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	200002f0 	.word	0x200002f0

080011c0 <get_time>:


void get_time()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 80011c6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	2307      	movs	r3, #7
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	463b      	mov	r3, r7
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	2200      	movs	r2, #0
 80011d8:	21d0      	movs	r1, #208	; 0xd0
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <get_time+0x98>)
 80011dc:	f001 f860 	bl	80022a0 <HAL_I2C_Mem_Read>
	time.seconds=bcd_dec(get_time[0]);
 80011e0:	783b      	ldrb	r3, [r7, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fe84 	bl	8000ef0 <bcd_dec>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <get_time+0x9c>)
 80011ee:	701a      	strb	r2, [r3, #0]
	time.minutes=bcd_dec(get_time[1]);
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fe7c 	bl	8000ef0 <bcd_dec>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <get_time+0x9c>)
 80011fe:	705a      	strb	r2, [r3, #1]
	time.hour=bcd_dec(get_time[2]);
 8001200:	78bb      	ldrb	r3, [r7, #2]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fe74 	bl	8000ef0 <bcd_dec>
 8001208:	4603      	mov	r3, r0
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <get_time+0x9c>)
 800120e:	709a      	strb	r2, [r3, #2]
	time.day=bcd_dec(get_time[3]);
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe6c 	bl	8000ef0 <bcd_dec>
 8001218:	4603      	mov	r3, r0
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <get_time+0x9c>)
 800121e:	70da      	strb	r2, [r3, #3]
	time.date=bcd_dec(get_time[4]);
 8001220:	793b      	ldrb	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe64 	bl	8000ef0 <bcd_dec>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <get_time+0x9c>)
 800122e:	711a      	strb	r2, [r3, #4]
	time.month=bcd_dec(get_time[5]);
 8001230:	797b      	ldrb	r3, [r7, #5]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fe5c 	bl	8000ef0 <bcd_dec>
 8001238:	4603      	mov	r3, r0
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <get_time+0x9c>)
 800123e:	715a      	strb	r2, [r3, #5]
	time.year=bcd_dec(get_time[6]);
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe54 	bl	8000ef0 <bcd_dec>
 8001248:	4603      	mov	r3, r0
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <get_time+0x9c>)
 800124e:	719a      	strb	r2, [r3, #6]
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200002f0 	.word	0x200002f0
 800125c:	200002e8 	.word	0x200002e8

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x44>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_MspInit+0x44>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6613      	str	r3, [r2, #96]	; 0x60
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_MspInit+0x44>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x44>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x44>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6593      	str	r3, [r2, #88]	; 0x58
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x44>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0a0      	sub	sp, #128	; 0x80
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	2254      	movs	r2, #84	; 0x54
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 f87d 	bl	80063d4 <memset>
  if(hi2c->Instance==I2C3)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <HAL_I2C_MspInit+0x100>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d163      	bne.n	80013ac <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 f84c 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012fe:	f7ff ffaf 	bl	8001260 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	2312      	movs	r3, #18
 8001338:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001342:	2304      	movs	r3, #4
 8001344:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fc68 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001354:	2310      	movs	r3, #16
 8001356:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001358:	2312      	movs	r3, #18
 800135a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001364:	2304      	movs	r3, #4
 8001366:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800136c:	4619      	mov	r1, r3
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <HAL_I2C_MspInit+0x108>)
 8001370:	f000 fc58 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 800137a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800137e:	6593      	str	r3, [r2, #88]	; 0x58
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_I2C_MspInit+0x104>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2048      	movs	r0, #72	; 0x48
 8001392:	f000 fb84 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001396:	2048      	movs	r0, #72	; 0x48
 8001398:	f000 fb9d 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2049      	movs	r0, #73	; 0x49
 80013a2:	f000 fb7c 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80013a6:	2049      	movs	r0, #73	; 0x49
 80013a8:	f000 fb95 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3780      	adds	r7, #128	; 0x80
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40005c00 	.word	0x40005c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000400 	.word	0x48000400

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0a0      	sub	sp, #128	; 0x80
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	2254      	movs	r2, #84	; 0x54
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fff7 	bl	80063d4 <memset>
  if(huart->Instance==USART1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a46      	ldr	r2, [pc, #280]	; (8001504 <HAL_UART_MspInit+0x144>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d140      	bne.n	8001472 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 ffc7 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001408:	f7ff ff2a 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140c:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <HAL_UART_MspInit+0x148>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	4a3d      	ldr	r2, [pc, #244]	; (8001508 <HAL_UART_MspInit+0x148>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001416:	6613      	str	r3, [r2, #96]	; 0x60
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_UART_MspInit+0x148>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_UART_MspInit+0x148>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	4a37      	ldr	r2, [pc, #220]	; (8001508 <HAL_UART_MspInit+0x148>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_UART_MspInit+0x148>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001440:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144e:	2307      	movs	r3, #7
 8001450:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145c:	f000 fbe2 	bl	8001c24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2025      	movs	r0, #37	; 0x25
 8001466:	f000 fb1a 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146a:	2025      	movs	r0, #37	; 0x25
 800146c:	f000 fb33 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001470:	e043      	b.n	80014fa <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a25      	ldr	r2, [pc, #148]	; (800150c <HAL_UART_MspInit+0x14c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d13e      	bne.n	80014fa <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4618      	mov	r0, r3
 800148a:	f002 ff81 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001494:	f7ff fee4 	bl	8001260 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_UART_MspInit+0x148>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_UART_MspInit+0x148>)
 800149e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a2:	6593      	str	r3, [r2, #88]	; 0x58
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_UART_MspInit+0x148>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_UART_MspInit+0x148>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_UART_MspInit+0x148>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_UART_MspInit+0x148>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014c8:	230c      	movs	r3, #12
 80014ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d8:	2307      	movs	r3, #7
 80014da:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f000 fb9d 	bl	8001c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2026      	movs	r0, #38	; 0x26
 80014f0:	f000 fad5 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f4:	2026      	movs	r0, #38	; 0x26
 80014f6:	f000 faee 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3780      	adds	r7, #128	; 0x80
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40013800 	.word	0x40013800
 8001508:	40021000 	.word	0x40021000
 800150c:	40004400 	.word	0x40004400

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 f980 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <USART1_IRQHandler+0x10>)
 800156a:	f003 fc81 	bl	8004e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000b4 	.word	0x200000b4

08001578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART2_IRQHandler+0x10>)
 800157e:	f003 fc77 	bl	8004e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000250 	.word	0x20000250

0800158c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <I2C3_EV_IRQHandler+0x10>)
 8001592:	f000 ff9f 	bl	80024d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002f0 	.word	0x200002f0

080015a0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <I2C3_ER_IRQHandler+0x10>)
 80015a6:	f000 ffaf 	bl	8002508 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002f0 	.word	0x200002f0

080015b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_kill>:

int _kill(int pid, int sig)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ce:	f004 fecf 	bl	8006370 <__errno>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2216      	movs	r2, #22
 80015d6:	601a      	str	r2, [r3, #0]
  return -1;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_exit>:

void _exit (int status)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffe7 	bl	80015c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f6:	e7fe      	b.n	80015f6 <_exit+0x12>

080015f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	e00a      	b.n	8001620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800160a:	f3af 8000 	nop.w
 800160e:	4601      	mov	r1, r0
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	60ba      	str	r2, [r7, #8]
 8001616:	b2ca      	uxtb	r2, r1
 8001618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbf0      	blt.n	800160a <_read+0x12>
  }

  return len;
 8001628:	687b      	ldr	r3, [r7, #4]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	e009      	b.n	8001658 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	60ba      	str	r2, [r7, #8]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbf1      	blt.n	8001644 <_write+0x12>
  }
  return len;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_close>:

int _close(int file)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001692:	605a      	str	r2, [r3, #4]
  return 0;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_isatty>:

int _isatty(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <_sbrk+0x5c>)
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <_sbrk+0x60>)
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <_sbrk+0x64>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <_sbrk+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	d207      	bcs.n	8001714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001704:	f004 fe34 	bl	8006370 <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	e009      	b.n	8001728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <_sbrk+0x64>)
 8001724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20010000 	.word	0x20010000
 8001734:	00000400 	.word	0x00000400
 8001738:	2000039c 	.word	0x2000039c
 800173c:	200003b8 	.word	0x200003b8

08001740 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <SystemInit+0x20>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <SystemInit+0x20>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001768:	f7ff ffea 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	; (80017a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <LoopForever+0xe>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	; (80017b0 <LoopForever+0x16>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f004 fdf3 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001796:	f7ff fbc3 	bl	8000f20 <main>

0800179a <LoopForever>:

LoopForever:
    b LoopForever
 800179a:	e7fe      	b.n	800179a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800179c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017a8:	08007e6c 	.word	0x08007e6c
  ldr r2, =_sbss
 80017ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017b0:	200003b4 	.word	0x200003b4

080017b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC1_IRQHandler>

080017b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f961 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f80e 	bl	80017e8 <HAL_InitTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	e001      	b.n	80017dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017d8:	f7ff fd48 	bl	800126c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_InitTick+0x6c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d023      	beq.n	8001844 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_InitTick+0x70>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_InitTick+0x6c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	fbb3 f3f1 	udiv	r3, r3, r1
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f96d 	bl	8001af2 <HAL_SYSTICK_Config>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d809      	bhi.n	8001838 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f000 f937 	bl	8001a9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_InitTick+0x74>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e007      	b.n	8001848 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	e004      	b.n	8001848 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e001      	b.n	8001848 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004

08001860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x20>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x24>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_IncTick+0x24>)
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000008 	.word	0x20000008
 8001884:	200003a0 	.word	0x200003a0

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200003a0 	.word	0x200003a0

080018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff ffee 	bl	8001888 <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d005      	beq.n	80018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_Delay+0x44>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c6:	bf00      	nop
 80018c8:	f7ff ffde 	bl	8001888 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f7      	bhi.n	80018c8 <HAL_Delay+0x28>
  {
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff29 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff3e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff31 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2204      	movs	r2, #4
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e022      	b.n	8001b7a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 020e 	bic.w	r2, r2, #14
 8001b42:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f003 021c 	and.w	r2, r3, #28
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f202 	lsl.w	r2, r1, r2
 8001b66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d005      	beq.n	8001baa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e029      	b.n	8001bfe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 020e 	bic.w	r2, r2, #14
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f003 021c 	and.w	r2, r3, #28
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
    }
  }
  return status;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c16:	b2db      	uxtb	r3, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	e148      	b.n	8001ec6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 813a 	beq.w	8001ec0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d005      	beq.n	8001c64 <HAL_GPIO_Init+0x40>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d130      	bne.n	8001cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 0201 	and.w	r2, r3, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d017      	beq.n	8001d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d123      	bne.n	8001d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0203 	and.w	r2, r3, #3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8094 	beq.w	8001ec0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <HAL_GPIO_Init+0x2c0>)
 8001d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9c:	4a51      	ldr	r2, [pc, #324]	; (8001ee4 <HAL_GPIO_Init+0x2c0>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6613      	str	r3, [r2, #96]	; 0x60
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <HAL_GPIO_Init+0x2c0>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db0:	4a4d      	ldr	r2, [pc, #308]	; (8001ee8 <HAL_GPIO_Init+0x2c4>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dda:	d00d      	beq.n	8001df8 <HAL_GPIO_Init+0x1d4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a43      	ldr	r2, [pc, #268]	; (8001eec <HAL_GPIO_Init+0x2c8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1d0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_GPIO_Init+0x1cc>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1d6>
 8001df0:	2307      	movs	r3, #7
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1d6>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1d6>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0a:	4937      	ldr	r1, [pc, #220]	; (8001ee8 <HAL_GPIO_Init+0x2c4>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e3c:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e66:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f47f aeaf 	bne.w	8001c34 <HAL_GPIO_Init+0x10>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e081      	b.n	800206e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff f998 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	e006      	b.n	8001fe0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d104      	bne.n	8001ff2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ff0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002004:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002014:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69d9      	ldr	r1, [r3, #28]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	461a      	mov	r2, r3
 8002086:	4603      	mov	r3, r0
 8002088:	817b      	strh	r3, [r7, #10]
 800208a:	460b      	mov	r3, r1
 800208c:	813b      	strh	r3, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b20      	cmp	r3, #32
 800209c:	f040 80f9 	bne.w	8002292 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_I2C_Mem_Write+0x34>
 80020a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0ed      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Mem_Write+0x4e>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e0e6      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ce:	f7ff fbdb 	bl	8001888 <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2319      	movs	r3, #25
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 ffd8 	bl	8003096 <I2C_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d1      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2221      	movs	r2, #33	; 0x21
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002118:	88f8      	ldrh	r0, [r7, #6]
 800211a:	893a      	ldrh	r2, [r7, #8]
 800211c:	8979      	ldrh	r1, [r7, #10]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	4603      	mov	r3, r0
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fb91 	bl	8002850 <I2C_RequestMemoryWrite>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0a9      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d90e      	bls.n	8002168 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	22ff      	movs	r2, #255	; 0xff
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	b2da      	uxtb	r2, r3
 8002156:	8979      	ldrh	r1, [r7, #10]
 8002158:	2300      	movs	r3, #0
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f001 f941 	bl	80033e8 <I2C_TransferConfig>
 8002166:	e00f      	b.n	8002188 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	b2da      	uxtb	r2, r3
 8002178:	8979      	ldrh	r1, [r7, #10]
 800217a:	2300      	movs	r3, #0
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f001 f930 	bl	80033e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 ffc2 	bl	8003116 <I2C_WaitOnTXISFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e07b      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d034      	beq.n	8002240 <HAL_I2C_Mem_Write+0x1c8>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d130      	bne.n	8002240 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	2200      	movs	r2, #0
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 ff54 	bl	8003096 <I2C_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e04d      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d90e      	bls.n	8002220 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	b2da      	uxtb	r2, r3
 800220e:	8979      	ldrh	r1, [r7, #10]
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f001 f8e5 	bl	80033e8 <I2C_TransferConfig>
 800221e:	e00f      	b.n	8002240 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f001 f8d4 	bl	80033e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d19e      	bne.n	8002188 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 ffa1 	bl	8003196 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01a      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2220      	movs	r2, #32
 8002264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_I2C_Mem_Write+0x224>)
 8002272:	400b      	ands	r3, r1
 8002274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
  }
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	fe00e800 	.word	0xfe00e800

080022a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	4608      	mov	r0, r1
 80022aa:	4611      	mov	r1, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	4603      	mov	r3, r0
 80022b0:	817b      	strh	r3, [r7, #10]
 80022b2:	460b      	mov	r3, r1
 80022b4:	813b      	strh	r3, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	f040 80fd 	bne.w	80024c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_I2C_Mem_Read+0x34>
 80022ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0f1      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_I2C_Mem_Read+0x4e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0ea      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f6:	f7ff fac7 	bl	8001888 <HAL_GetTick>
 80022fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2319      	movs	r3, #25
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 fec4 	bl	8003096 <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d5      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2222      	movs	r2, #34	; 0x22
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002340:	88f8      	ldrh	r0, [r7, #6]
 8002342:	893a      	ldrh	r2, [r7, #8]
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	4603      	mov	r3, r0
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fad1 	bl	80028f8 <I2C_RequestMemoryRead>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0ad      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d90e      	bls.n	8002390 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	b2da      	uxtb	r2, r3
 800237e:	8979      	ldrh	r1, [r7, #10]
 8002380:	4b52      	ldr	r3, [pc, #328]	; (80024cc <HAL_I2C_Mem_Read+0x22c>)
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f001 f82d 	bl	80033e8 <I2C_TransferConfig>
 800238e:	e00f      	b.n	80023b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_I2C_Mem_Read+0x22c>)
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f001 f81c 	bl	80033e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	2200      	movs	r2, #0
 80023b8:	2104      	movs	r1, #4
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fe6b 	bl	8003096 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e07c      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d034      	beq.n	8002470 <HAL_I2C_Mem_Read+0x1d0>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	2b00      	cmp	r3, #0
 800240c:	d130      	bne.n	8002470 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	2200      	movs	r2, #0
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fe3c 	bl	8003096 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e04d      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	2bff      	cmp	r3, #255	; 0xff
 8002430:	d90e      	bls.n	8002450 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	22ff      	movs	r2, #255	; 0xff
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	b2da      	uxtb	r2, r3
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	2300      	movs	r3, #0
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 ffcd 	bl	80033e8 <I2C_TransferConfig>
 800244e:	e00f      	b.n	8002470 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245e:	b2da      	uxtb	r2, r3
 8002460:	8979      	ldrh	r1, [r7, #10]
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 ffbc 	bl	80033e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d19a      	bne.n	80023b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fe89 	bl	8003196 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e01a      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2220      	movs	r2, #32
 8002494:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_I2C_Mem_Read+0x230>)
 80024a2:	400b      	ands	r3, r1
 80024a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	80002400 	.word	0x80002400
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	68f9      	ldr	r1, [r7, #12]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
  }
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	09db      	lsrs	r3, r3, #7
 8002530:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	0a9b      	lsrs	r3, r3, #10
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	09db      	lsrs	r3, r3, #7
 800255e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	f043 0208 	orr.w	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	09db      	lsrs	r3, r3, #7
 800258c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 030b 	and.w	r3, r3, #11
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fc31 	bl	8002e24 <I2C_ITError>
  }
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	70fb      	strb	r3, [r7, #3]
 80025fe:	4613      	mov	r3, r2
 8002600:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <I2C_Slave_ISR_IT+0x24>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ec      	b.n	8002848 <I2C_Slave_ISR_IT+0x1fe>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800268e:	6939      	ldr	r1, [r7, #16]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fa67 	bl	8002b64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d04d      	beq.n	800273e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d047      	beq.n	800273e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d128      	bne.n	800270a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b28      	cmp	r3, #40	; 0x28
 80026c2:	d108      	bne.n	80026d6 <I2C_Slave_ISR_IT+0x8c>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ca:	d104      	bne.n	80026d6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80026cc:	6939      	ldr	r1, [r7, #16]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fb52 	bl	8002d78 <I2C_ITListenCplt>
 80026d4:	e032      	b.n	800273c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b29      	cmp	r3, #41	; 0x29
 80026e0:	d10e      	bne.n	8002700 <I2C_Slave_ISR_IT+0xb6>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e8:	d00a      	beq.n	8002700 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2210      	movs	r2, #16
 80026f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fc8d 	bl	8003012 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f9d5 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
 80026fe:	e01d      	b.n	800273c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2210      	movs	r2, #16
 8002706:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002708:	e096      	b.n	8002838 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2210      	movs	r2, #16
 8002710:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <I2C_Slave_ISR_IT+0xe4>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272a:	f040 8085 	bne.w	8002838 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4619      	mov	r1, r3
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fb75 	bl	8002e24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800273a:	e07d      	b.n	8002838 <I2C_Slave_ISR_IT+0x1ee>
 800273c:	e07c      	b.n	8002838 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d030      	beq.n	80027ac <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002752:	2b00      	cmp	r3, #0
 8002754:	d02a      	beq.n	80027ac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d018      	beq.n	8002792 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d14f      	bne.n	800283c <I2C_Slave_ISR_IT+0x1f2>
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a2:	d04b      	beq.n	800283c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f97f 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80027aa:	e047      	b.n	800283c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	08db      	lsrs	r3, r3, #3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80027c4:	6939      	ldr	r1, [r7, #16]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8ea 	bl	80029a0 <I2C_ITAddrCplt>
 80027cc:	e037      	b.n	800283e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d031      	beq.n	800283e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02b      	beq.n	800283e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d018      	beq.n	8002822 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	; 0x28
 8002820:	e00d      	b.n	800283e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d002      	beq.n	8002830 <I2C_Slave_ISR_IT+0x1e6>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f939 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
 8002836:	e002      	b.n	800283e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002838:	bf00      	nop
 800283a:	e000      	b.n	800283e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800283c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	817b      	strh	r3, [r7, #10]
 8002862:	460b      	mov	r3, r1
 8002864:	813b      	strh	r3, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	8979      	ldrh	r1, [r7, #10]
 8002870:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <I2C_RequestMemoryWrite+0xa4>)
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fdb5 	bl	80033e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	69b9      	ldr	r1, [r7, #24]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fc47 	bl	8003116 <I2C_WaitOnTXISFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e02c      	b.n	80028ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002898:	893b      	ldrh	r3, [r7, #8]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
 80028a2:	e015      	b.n	80028d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028a4:	893b      	ldrh	r3, [r7, #8]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	69b9      	ldr	r1, [r7, #24]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fc2d 	bl	8003116 <I2C_WaitOnTXISFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e012      	b.n	80028ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fbdb 	bl	8003096 <I2C_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	80002000 	.word	0x80002000

080028f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	8979      	ldrh	r1, [r7, #10]
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <I2C_RequestMemoryRead+0xa4>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2300      	movs	r3, #0
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fd62 	bl	80033e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fbf4 	bl	8003116 <I2C_WaitOnTXISFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e02c      	b.n	8002992 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800293e:	893b      	ldrh	r3, [r7, #8]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
 8002948:	e015      	b.n	8002976 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800294a:	893b      	ldrh	r3, [r7, #8]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	b29b      	uxth	r3, r3
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fbda 	bl	8003116 <I2C_WaitOnTXISFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e012      	b.n	8002992 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2200      	movs	r2, #0
 800297e:	2140      	movs	r1, #64	; 0x40
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fb88 	bl	8003096 <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	80002000 	.word	0x80002000

080029a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029b6:	2b28      	cmp	r3, #40	; 0x28
 80029b8:	d16a      	bne.n	8002a90 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80029d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80029f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d138      	bne.n	8002a70 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	09db      	lsrs	r3, r3, #7
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	89bb      	ldrh	r3, [r7, #12]
 8002a06:	4053      	eors	r3, r2
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f003 0306 	and.w	r3, r3, #6
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11c      	bne.n	8002a4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d13b      	bne.n	8002aa0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2208      	movs	r2, #8
 8002a34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a3e:	89ba      	ldrh	r2, [r7, #12]
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fdd4 	bl	80025f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a4a:	e029      	b.n	8002aa0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fcf9 	bl	800344c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a62:	89ba      	ldrh	r2, [r7, #12]
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fdc2 	bl	80025f2 <HAL_I2C_AddrCallback>
}
 8002a6e:	e017      	b.n	8002aa0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fce9 	bl	800344c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a82:	89ba      	ldrh	r2, [r7, #12]
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	4619      	mov	r1, r3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fdb2 	bl	80025f2 <HAL_I2C_AddrCallback>
}
 8002a8e:	e007      	b.n	8002aa0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0b9b      	lsrs	r3, r3, #14
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e00d      	b.n	8002afa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	0bdb      	lsrs	r3, r3, #15
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b29      	cmp	r3, #41	; 0x29
 8002b04:	d112      	bne.n	8002b2c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2228      	movs	r2, #40	; 0x28
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2221      	movs	r2, #33	; 0x21
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b14:	2101      	movs	r1, #1
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fc98 	bl	800344c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fd50 	bl	80025ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b2a:	e017      	b.n	8002b5c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b2a      	cmp	r3, #42	; 0x2a
 8002b36:	d111      	bne.n	8002b5c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2228      	movs	r2, #40	; 0x28
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2222      	movs	r2, #34	; 0x22
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b46:	2102      	movs	r1, #2
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fc7f 	bl	800344c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fd41 	bl	80025de <HAL_I2C_SlaveRxCpltCallback>
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b80:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2220      	movs	r2, #32
 8002b88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b21      	cmp	r3, #33	; 0x21
 8002b8e:	d002      	beq.n	8002b96 <I2C_ITSlaveCplt+0x32>
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b29      	cmp	r3, #41	; 0x29
 8002b94:	d108      	bne.n	8002ba8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b96:	f248 0101 	movw	r1, #32769	; 0x8001
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fc56 	bl	800344c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2221      	movs	r2, #33	; 0x21
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba6:	e00d      	b.n	8002bc4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b22      	cmp	r3, #34	; 0x22
 8002bac:	d002      	beq.n	8002bb4 <I2C_ITSlaveCplt+0x50>
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb2:	d107      	bne.n	8002bc4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002bb4:	f248 0102 	movw	r1, #32770	; 0x8002
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fc47 	bl	800344c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2222      	movs	r2, #34	; 0x22
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <I2C_ITSlaveCplt+0x20c>)
 8002be0:	400b      	ands	r3, r1
 8002be2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fa14 	bl	8003012 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	0b9b      	lsrs	r3, r3, #14
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d020      	beq.n	8002c50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c1c:	e018      	b.n	8002c50 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	0bdb      	lsrs	r3, r3, #15
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0304 	bic.w	r3, r3, #4
 8002c62:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00c      	beq.n	8002c9e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f8a7 	bl	8002e24 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b28      	cmp	r3, #40	; 0x28
 8002ce0:	d141      	bne.n	8002d66 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ce2:	6979      	ldr	r1, [r7, #20]
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f847 	bl	8002d78 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cea:	e03c      	b.n	8002d66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cf4:	d014      	beq.n	8002d20 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fed6 	bl	8002aa8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <I2C_ITSlaveCplt+0x210>)
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fc78 	bl	800260e <HAL_I2C_ListenCpltCallback>
}
 8002d1e:	e022      	b.n	8002d66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b22      	cmp	r3, #34	; 0x22
 8002d2a:	d10e      	bne.n	8002d4a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fc4b 	bl	80025de <HAL_I2C_SlaveRxCpltCallback>
}
 8002d48:	e00d      	b.n	8002d66 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fc32 	bl	80025ca <HAL_I2C_SlaveTxCpltCallback>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	fe00e800 	.word	0xfe00e800
 8002d74:	ffff0000 	.word	0xffff0000

08002d78 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <I2C_ITListenCplt+0xa8>)
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002df6:	f248 0103 	movw	r1, #32771	; 0x8003
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fb26 	bl	800344c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2210      	movs	r2, #16
 8002e06:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fbfc 	bl	800260e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	ffff0000 	.word	0xffff0000

08002e24 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <I2C_ITError+0x194>)
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b28      	cmp	r3, #40	; 0x28
 8002e5a:	d005      	beq.n	8002e68 <I2C_ITError+0x44>
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b29      	cmp	r3, #41	; 0x29
 8002e60:	d002      	beq.n	8002e68 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b2a      	cmp	r3, #42	; 0x2a
 8002e66:	d10b      	bne.n	8002e80 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e68:	2103      	movs	r1, #3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 faee 	bl	800344c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2228      	movs	r2, #40	; 0x28
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a50      	ldr	r2, [pc, #320]	; (8002fbc <I2C_ITError+0x198>)
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7e:	e011      	b.n	8002ea4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e80:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fae1 	bl	800344c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b60      	cmp	r3, #96	; 0x60
 8002e94:	d003      	beq.n	8002e9e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d039      	beq.n	8002f26 <I2C_ITError+0x102>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b11      	cmp	r3, #17
 8002eb6:	d002      	beq.n	8002ebe <I2C_ITError+0x9a>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b21      	cmp	r3, #33	; 0x21
 8002ebc:	d133      	bne.n	8002f26 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ecc:	d107      	bne.n	8002ede <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002edc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fe90 	bl	8001c08 <HAL_DMA_GetState>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d017      	beq.n	8002f1e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	4a33      	ldr	r2, [pc, #204]	; (8002fc0 <I2C_ITError+0x19c>)
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fe3f 	bl	8001b86 <HAL_DMA_Abort_IT>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04d      	beq.n	8002faa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f1c:	e045      	b.n	8002faa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f850 	bl	8002fc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f24:	e041      	b.n	8002faa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d039      	beq.n	8002fa2 <I2C_ITError+0x17e>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b12      	cmp	r3, #18
 8002f32:	d002      	beq.n	8002f3a <I2C_ITError+0x116>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b22      	cmp	r3, #34	; 0x22
 8002f38:	d133      	bne.n	8002fa2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f48:	d107      	bne.n	8002f5a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fe52 	bl	8001c08 <HAL_DMA_GetState>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d017      	beq.n	8002f9a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <I2C_ITError+0x19c>)
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fe01 	bl	8001b86 <HAL_DMA_Abort_IT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d011      	beq.n	8002fae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f94:	4610      	mov	r0, r2
 8002f96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f98:	e009      	b.n	8002fae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f812 	bl	8002fc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa0:	e005      	b.n	8002fae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f80e 	bl	8002fc4 <I2C_TreatErrorCallback>
  }
}
 8002fa8:	e002      	b.n	8002fb0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fae:	bf00      	nop
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	ffff0000 	.word	0xffff0000
 8002fbc:	0800264b 	.word	0x0800264b
 8002fc0:	0800305b 	.word	0x0800305b

08002fc4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d10e      	bne.n	8002ff6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fb21 	bl	8002636 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ff4:	e009      	b.n	800300a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fb0c 	bl	8002622 <HAL_I2C_ErrorCallback>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b02      	cmp	r3, #2
 8003026:	d103      	bne.n	8003030 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d007      	beq.n	800304e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	619a      	str	r2, [r3, #24]
  }
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	2200      	movs	r2, #0
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	2200      	movs	r2, #0
 8003086:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff ff9b 	bl	8002fc4 <I2C_TreatErrorCallback>
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4613      	mov	r3, r2
 80030a4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a6:	e022      	b.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d01e      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fe fbea 	bl	8001888 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d0cd      	beq.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003122:	e02c      	b.n	800317e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f871 	bl	8003210 <I2C_IsErrorOccurred>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e02a      	b.n	800318e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d01e      	beq.n	800317e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7fe fba2 	bl	8001888 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d113      	bne.n	800317e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e007      	b.n	800318e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d1cb      	bne.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a2:	e028      	b.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f831 	bl	8003210 <I2C_IsErrorOccurred>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e026      	b.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fe fb66 	bl	8001888 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d113      	bne.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e007      	b.n	8003206 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b20      	cmp	r3, #32
 8003202:	d1cf      	bne.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d075      	beq.n	8003328 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2210      	movs	r2, #16
 8003242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003244:	e056      	b.n	80032f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d052      	beq.n	80032f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fe fb1b 	bl	8001888 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <I2C_IsErrorOccurred+0x54>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d147      	bne.n	80032f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003286:	d12e      	bne.n	80032e6 <I2C_IsErrorOccurred+0xd6>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800328e:	d02a      	beq.n	80032e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d027      	beq.n	80032e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032a6:	f7fe faef 	bl	8001888 <HAL_GetTick>
 80032aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ac:	e01b      	b.n	80032e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032ae:	f7fe faeb 	bl	8001888 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b19      	cmp	r3, #25
 80032ba:	d914      	bls.n	80032e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d1dc      	bne.n	80032ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d003      	beq.n	800330a <I2C_IsErrorOccurred+0xfa>
 8003302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003306:	2b00      	cmp	r3, #0
 8003308:	d09d      	beq.n	8003246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800330a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2220      	movs	r2, #32
 8003318:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f043 0308 	orr.w	r3, r3, #8
 8003362:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01c      	beq.n	80033d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff fe37 	bl	8003012 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <I2C_IsErrorOccurred+0x1d4>)
 80033b0:	400b      	ands	r3, r1
 80033b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80033d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	fe00e800 	.word	0xfe00e800

080033e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	4613      	mov	r3, r2
 80033f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033fa:	897b      	ldrh	r3, [r7, #10]
 80033fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003400:	7a7b      	ldrb	r3, [r7, #9]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003408:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	4313      	orrs	r3, r2
 8003412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003416:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	0d5b      	lsrs	r3, r3, #21
 8003422:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <I2C_TransferConfig+0x60>)
 8003428:	430b      	orrs	r3, r1
 800342a:	43db      	mvns	r3, r3
 800342c:	ea02 0103 	and.w	r1, r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	03ff63ff 	.word	0x03ff63ff

0800344c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00f      	beq.n	8003486 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800346c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800347a:	2b28      	cmp	r3, #40	; 0x28
 800347c:	d003      	beq.n	8003486 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003484:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00f      	beq.n	80034b0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003496:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034a4:	2b28      	cmp	r3, #40	; 0x28
 80034a6:	d003      	beq.n	80034b0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80034ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da03      	bge.n	80034c0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80034be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034c0:	887b      	ldrh	r3, [r7, #2]
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d103      	bne.n	80034ce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80034cc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d103      	bne.n	80034dc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80034dc:	887b      	ldrh	r3, [r7, #2]
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d103      	bne.n	80034ea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b20      	cmp	r3, #32
 800351c:	d138      	bne.n	8003590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003528:	2302      	movs	r3, #2
 800352a:	e032      	b.n	8003592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800355a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d139      	bne.n	8003628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035be:	2302      	movs	r3, #2
 80035c0:	e033      	b.n	800362a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2224      	movs	r2, #36	; 0x24
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e000      	b.n	800362a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003628:	2302      	movs	r3, #2
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40007000 	.word	0x40007000

08003658 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_PWREx_GetVoltageRange+0x18>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40007000 	.word	0x40007000

08003674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003682:	d130      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003684:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800368c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003690:	d038      	beq.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800369a:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2232      	movs	r2, #50	; 0x32
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0c9b      	lsrs	r3, r3, #18
 80036b4:	3301      	adds	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b8:	e002      	b.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3b01      	subs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c0:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036cc:	d102      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f2      	bne.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e0:	d110      	bne.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e00f      	b.n	8003706 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	d007      	beq.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036fc:	4a05      	ldr	r2, [pc, #20]	; (8003714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003702:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40007000 	.word	0x40007000
 8003718:	20000000 	.word	0x20000000
 800371c:	431bde83 	.word	0x431bde83

08003720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f000 bc02 	b.w	8003f38 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003734:	4b96      	ldr	r3, [pc, #600]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373e:	4b94      	ldr	r3, [pc, #592]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80e4 	beq.w	800391e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_RCC_OscConfig+0x4c>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	f040 808b 	bne.w	800387a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b01      	cmp	r3, #1
 8003768:	f040 8087 	bne.w	800387a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800376c:	4b88      	ldr	r3, [pc, #544]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_OscConfig+0x64>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e3d9      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_RCC_OscConfig+0x7e>
 8003794:	4b7e      	ldr	r3, [pc, #504]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379c:	e005      	b.n	80037aa <HAL_RCC_OscConfig+0x8a>
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d223      	bcs.n	80037f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fd8c 	bl	80042d0 <RCC_SetFlashLatencyFromMSIRange>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e3ba      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037c2:	4b73      	ldr	r3, [pc, #460]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a72      	ldr	r2, [pc, #456]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037c8:	f043 0308 	orr.w	r3, r3, #8
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b70      	ldr	r3, [pc, #448]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	496d      	ldr	r1, [pc, #436]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037e0:	4b6b      	ldr	r3, [pc, #428]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	4968      	ldr	r1, [pc, #416]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
 80037f4:	e025      	b.n	8003842 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f6:	4b66      	ldr	r3, [pc, #408]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a65      	ldr	r2, [pc, #404]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80037fc:	f043 0308 	orr.w	r3, r3, #8
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b63      	ldr	r3, [pc, #396]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4960      	ldr	r1, [pc, #384]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003814:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	495b      	ldr	r1, [pc, #364]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fd4c 	bl	80042d0 <RCC_SetFlashLatencyFromMSIRange>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e37a      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003842:	f000 fc81 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8003846:	4602      	mov	r2, r0
 8003848:	4b51      	ldr	r3, [pc, #324]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	4950      	ldr	r1, [pc, #320]	; (8003994 <HAL_RCC_OscConfig+0x274>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	fa22 f303 	lsr.w	r3, r2, r3
 800385e:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_RCC_OscConfig+0x278>)
 8003860:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003862:	4b4e      	ldr	r3, [pc, #312]	; (800399c <HAL_RCC_OscConfig+0x27c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd ffbe 	bl	80017e8 <HAL_InitTick>
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d052      	beq.n	800391c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	e35e      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d032      	beq.n	80038e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003882:	4b43      	ldr	r3, [pc, #268]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a42      	ldr	r2, [pc, #264]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800388e:	f7fd fffb 	bl	8001888 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003896:	f7fd fff7 	bl	8001888 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e347      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038b4:	4b36      	ldr	r3, [pc, #216]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a35      	ldr	r2, [pc, #212]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038ba:	f043 0308 	orr.w	r3, r3, #8
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b33      	ldr	r3, [pc, #204]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4930      	ldr	r1, [pc, #192]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038d2:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	492b      	ldr	r1, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
 80038e6:	e01a      	b.n	800391e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a28      	ldr	r2, [pc, #160]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f4:	f7fd ffc8 	bl	8001888 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038fc:	f7fd ffc4 	bl	8001888 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e314      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1dc>
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800391c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d073      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d005      	beq.n	800393c <HAL_RCC_OscConfig+0x21c>
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d10e      	bne.n	8003954 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d10b      	bne.n	8003954 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d063      	beq.n	8003a10 <HAL_RCC_OscConfig+0x2f0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d15f      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e2f1      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x24c>
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e025      	b.n	80039b8 <HAL_RCC_OscConfig+0x298>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d114      	bne.n	80039a0 <HAL_RCC_OscConfig+0x280>
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a02      	ldr	r2, [pc, #8]	; (8003990 <HAL_RCC_OscConfig+0x270>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e013      	b.n	80039b8 <HAL_RCC_OscConfig+0x298>
 8003990:	40021000 	.word	0x40021000
 8003994:	08007bc8 	.word	0x08007bc8
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004
 80039a0:	4ba0      	ldr	r3, [pc, #640]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a9f      	ldr	r2, [pc, #636]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b9d      	ldr	r3, [pc, #628]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a9c      	ldr	r2, [pc, #624]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd ff62 	bl	8001888 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd ff5e 	bl	8001888 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e2ae      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039da:	4b92      	ldr	r3, [pc, #584]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x2a8>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd ff4e 	bl	8001888 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd ff4a 	bl	8001888 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e29a      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2d0>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d060      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_OscConfig+0x310>
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d119      	bne.n	8003a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d116      	bne.n	8003a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a30:	4b7c      	ldr	r3, [pc, #496]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_OscConfig+0x328>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e277      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	4973      	ldr	r1, [pc, #460]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5c:	e040      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d023      	beq.n	8003aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a66:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6e      	ldr	r2, [pc, #440]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fd ff09 	bl	8001888 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7fd ff05 	bl	8001888 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e255      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8c:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a98:	4b62      	ldr	r3, [pc, #392]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	495f      	ldr	r1, [pc, #380]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
 8003aac:	e018      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aae:	4b5d      	ldr	r3, [pc, #372]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5c      	ldr	r2, [pc, #368]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fee5 	bl	8001888 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fd fee1 	bl	8001888 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e231      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ad4:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d03c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af4:	4b4b      	ldr	r3, [pc, #300]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afa:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fd fec0 	bl	8001888 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fd febc 	bl	8001888 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e20c      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b1e:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ef      	beq.n	8003b0c <HAL_RCC_OscConfig+0x3ec>
 8003b2c:	e01b      	b.n	8003b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b34:	4a3b      	ldr	r2, [pc, #236]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fea3 	bl	8001888 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b46:	f7fd fe9f 	bl	8001888 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e1ef      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ef      	bne.n	8003b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80a6 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b74:	2300      	movs	r3, #0
 8003b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b90:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba0:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d118      	bne.n	8003bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bac:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb8:	f7fd fe66 	bl	8001888 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fd fe62 	bl	8001888 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1b2      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <HAL_RCC_OscConfig+0x508>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d108      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4d8>
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf6:	e029      	b.n	8003c4c <HAL_RCC_OscConfig+0x52c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d115      	bne.n	8003c2c <HAL_RCC_OscConfig+0x50c>
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	4a03      	ldr	r2, [pc, #12]	; (8003c24 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c20:	e014      	b.n	8003c4c <HAL_RCC_OscConfig+0x52c>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	4b9a      	ldr	r3, [pc, #616]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	4a99      	ldr	r2, [pc, #612]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c3c:	4b96      	ldr	r3, [pc, #600]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	4a95      	ldr	r2, [pc, #596]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd fe18 	bl	8001888 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fe14 	bl	8001888 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e162      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c72:	4b89      	ldr	r3, [pc, #548]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ed      	beq.n	8003c5c <HAL_RCC_OscConfig+0x53c>
 8003c80:	e015      	b.n	8003cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fd fe01 	bl	8001888 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fd fdfd 	bl	8001888 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e14b      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ca0:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ed      	bne.n	8003c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b78      	ldr	r3, [pc, #480]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	4a77      	ldr	r2, [pc, #476]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01c      	beq.n	8003d0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cd4:	4b70      	ldr	r3, [pc, #448]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cda:	4a6f      	ldr	r2, [pc, #444]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce4:	f7fd fdd0 	bl	8001888 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cec:	f7fd fdcc 	bl	8001888 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e11c      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cfe:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ef      	beq.n	8003cec <HAL_RCC_OscConfig+0x5cc>
 8003d0c:	e01b      	b.n	8003d46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d0e:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d14:	4a60      	ldr	r2, [pc, #384]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fd fdb3 	bl	8001888 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d26:	f7fd fdaf 	bl	8001888 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0ff      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d38:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1ef      	bne.n	8003d26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80f3 	beq.w	8003f36 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	f040 80c9 	bne.w	8003eec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d5a:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0203 	and.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d12c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d123      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d113      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d06b      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d062      	beq.n	8003e94 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dce:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0ac      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dde:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dea:	f7fd fd4d 	bl	8001888 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fd fd49 	bl	8001888 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e099      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e10:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_RCC_OscConfig+0x77c>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0112      	lsls	r2, r2, #4
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e2a:	0212      	lsls	r2, r2, #8
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e32:	0852      	lsrs	r2, r2, #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	0552      	lsls	r2, r2, #21
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e3e:	0852      	lsrs	r2, r2, #1
 8003e40:	3a01      	subs	r2, #1
 8003e42:	0652      	lsls	r2, r2, #25
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e4a:	06d2      	lsls	r2, r2, #27
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	4912      	ldr	r1, [pc, #72]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0f      	ldr	r2, [pc, #60]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e6c:	f7fd fd0c 	bl	8001888 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fd08 	bl	8001888 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e058      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_RCC_OscConfig+0x778>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e92:	e050      	b.n	8003f36 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e04f      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d144      	bne.n	8003f36 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ec4:	f7fd fce0 	bl	8001888 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fd fcdc 	bl	8001888 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e02c      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x7ac>
 8003eea:	e024      	b.n	8003f36 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d01f      	beq.n	8003f32 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd fcc3 	bl	8001888 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd fcbf 	bl	8001888 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e00f      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	4905      	ldr	r1, [pc, #20]	; (8003f40 <HAL_RCC_OscConfig+0x820>)
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCC_OscConfig+0x824>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60cb      	str	r3, [r1, #12]
 8003f30:	e001      	b.n	8003f36 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	feeefffc 	.word	0xfeeefffc

08003f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0e7      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b75      	ldr	r3, [pc, #468]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d910      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b72      	ldr	r3, [pc, #456]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 0207 	bic.w	r2, r3, #7
 8003f72:	4970      	ldr	r1, [pc, #448]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b6e      	ldr	r3, [pc, #440]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cf      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	4b66      	ldr	r3, [pc, #408]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d908      	bls.n	8003fba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa8:	4b63      	ldr	r3, [pc, #396]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4960      	ldr	r1, [pc, #384]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04c      	beq.n	8004060 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b5a      	ldr	r3, [pc, #360]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d121      	bne.n	800401e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0a6      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe6:	4b54      	ldr	r3, [pc, #336]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d115      	bne.n	800401e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e09a      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ffe:	4b4e      	ldr	r3, [pc, #312]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e08e      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400e:	4b4a      	ldr	r3, [pc, #296]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e086      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800401e:	4b46      	ldr	r3, [pc, #280]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4943      	ldr	r1, [pc, #268]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004030:	f7fd fc2a 	bl	8001888 <HAL_GetTick>
 8004034:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	e00a      	b.n	800404e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004038:	f7fd fc26 	bl	8001888 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e06e      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 020c 	and.w	r2, r3, #12
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	429a      	cmp	r2, r3
 800405e:	d1eb      	bne.n	8004038 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d010      	beq.n	800408e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004078:	429a      	cmp	r2, r3
 800407a:	d208      	bcs.n	800408e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	492b      	ldr	r1, [pc, #172]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408e:	4b29      	ldr	r3, [pc, #164]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d210      	bcs.n	80040be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f023 0207 	bic.w	r2, r3, #7
 80040a4:	4923      	ldr	r1, [pc, #140]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d001      	beq.n	80040be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e036      	b.n	800412c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4918      	ldr	r1, [pc, #96]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4910      	ldr	r1, [pc, #64]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040fc:	f000 f824 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	490b      	ldr	r1, [pc, #44]	; (800413c <HAL_RCC_ClockConfig+0x1f4>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1f8>)
 800411a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1fc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd fb61 	bl	80017e8 <HAL_InitTick>
 8004126:	4603      	mov	r3, r0
 8004128:	72fb      	strb	r3, [r7, #11]

  return status;
 800412a:	7afb      	ldrb	r3, [r7, #11]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40022000 	.word	0x40022000
 8004138:	40021000 	.word	0x40021000
 800413c:	08007bc8 	.word	0x08007bc8
 8004140:	20000000 	.word	0x20000000
 8004144:	20000004 	.word	0x20000004

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	b089      	sub	sp, #36	; 0x24
 800414c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004160:	4b3b      	ldr	r3, [pc, #236]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x34>
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d121      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d11e      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800417c:	4b34      	ldr	r3, [pc, #208]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004188:	4b31      	ldr	r3, [pc, #196]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	e005      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004198:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041a4:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10d      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d102      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c0:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_RCC_GetSysClockFreq+0x110>)
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e004      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041cc:	4b23      	ldr	r3, [pc, #140]	; (800425c <HAL_RCC_GetSysClockFreq+0x114>)
 80041ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d134      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0xa6>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d003      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0xac>
 80041ec:	e005      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041ee:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <HAL_RCC_GetSysClockFreq+0x110>)
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	e005      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_RCC_GetSysClockFreq+0x114>)
 80041f6:	617b      	str	r3, [r7, #20]
      break;
 80041f8:	e002      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	617b      	str	r3, [r7, #20]
      break;
 80041fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	3301      	adds	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	fb03 f202 	mul.w	r2, r3, r2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_RCC_GetSysClockFreq+0x108>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	0e5b      	lsrs	r3, r3, #25
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	3301      	adds	r3, #1
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004240:	69bb      	ldr	r3, [r7, #24]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
 8004254:	08007be0 	.word	0x08007be0
 8004258:	00f42400 	.word	0x00f42400
 800425c:	007a1200 	.word	0x007a1200

08004260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <HAL_RCC_GetHCLKFreq+0x14>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000000 	.word	0x20000000

08004278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800427c:	f7ff fff0 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4904      	ldr	r1, [pc, #16]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	08007bd8 	.word	0x08007bd8

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042a8:	f7ff ffda 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0adb      	lsrs	r3, r3, #11
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4904      	ldr	r1, [pc, #16]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08007bd8 	.word	0x08007bd8

080042d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042dc:	4b2a      	ldr	r3, [pc, #168]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042e8:	f7ff f9b6 	bl	8003658 <HAL_PWREx_GetVoltageRange>
 80042ec:	6178      	str	r0, [r7, #20]
 80042ee:	e014      	b.n	800431a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	4a24      	ldr	r2, [pc, #144]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6593      	str	r3, [r2, #88]	; 0x58
 80042fc:	4b22      	ldr	r3, [pc, #136]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004308:	f7ff f9a6 	bl	8003658 <HAL_PWREx_GetVoltageRange>
 800430c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004318:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004320:	d10b      	bne.n	800433a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b80      	cmp	r3, #128	; 0x80
 8004326:	d919      	bls.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2ba0      	cmp	r3, #160	; 0xa0
 800432c:	d902      	bls.n	8004334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800432e:	2302      	movs	r3, #2
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	e013      	b.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004334:	2301      	movs	r3, #1
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e010      	b.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d902      	bls.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004340:	2303      	movs	r3, #3
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e00a      	b.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d102      	bne.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800434c:	2302      	movs	r3, #2
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e004      	b.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d101      	bne.n	800435c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004358:	2301      	movs	r3, #1
 800435a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 0207 	bic.w	r2, r3, #7
 8004364:	4909      	ldr	r1, [pc, #36]	; (800438c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	429a      	cmp	r2, r3
 8004378:	d001      	beq.n	800437e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	40022000 	.word	0x40022000

08004390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004398:	2300      	movs	r3, #0
 800439a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800439c:	2300      	movs	r3, #0
 800439e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d031      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043b4:	d01a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ba:	d814      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043c4:	d10f      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043c6:	4b5d      	ldr	r3, [pc, #372]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4a5c      	ldr	r2, [pc, #368]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d2:	e00c      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f9de 	bl	800479c <RCCEx_PLLSAI1_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	74fb      	strb	r3, [r7, #19]
      break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043f4:	4b51      	ldr	r3, [pc, #324]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	494e      	ldr	r1, [pc, #312]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800440a:	e001      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 809e 	beq.w	800455a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004422:	4b46      	ldr	r3, [pc, #280]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b40      	ldr	r3, [pc, #256]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4a3f      	ldr	r2, [pc, #252]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	; 0x58
 8004444:	4b3d      	ldr	r3, [pc, #244]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004450:	2301      	movs	r3, #1
 8004452:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004454:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a39      	ldr	r2, [pc, #228]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004460:	f7fd fa12 	bl	8001888 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004466:	e009      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004468:	f7fd fa0e 	bl	8001888 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d902      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	74fb      	strb	r3, [r7, #19]
        break;
 800447a:	e005      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800447c:	4b30      	ldr	r3, [pc, #192]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ef      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d15a      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800448e:	4b2b      	ldr	r3, [pc, #172]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004498:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01e      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d019      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044b6:	4b21      	ldr	r3, [pc, #132]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	4a1f      	ldr	r2, [pc, #124]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	4a1b      	ldr	r2, [pc, #108]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044d6:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d016      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd f9ce 	bl	8001888 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ee:	e00b      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fd f9ca 	bl	8001888 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d902      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	74fb      	strb	r3, [r7, #19]
            break;
 8004506:	e006      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ec      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452a:	4904      	ldr	r1, [pc, #16]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004532:	e009      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
 8004538:	e006      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004548:	7c7b      	ldrb	r3, [r7, #17]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454e:	4b8a      	ldr	r3, [pc, #552]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	4a89      	ldr	r2, [pc, #548]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004566:	4b84      	ldr	r3, [pc, #528]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f023 0203 	bic.w	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4980      	ldr	r1, [pc, #512]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004588:	4b7b      	ldr	r3, [pc, #492]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 020c 	bic.w	r2, r3, #12
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	4978      	ldr	r1, [pc, #480]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045aa:	4b73      	ldr	r3, [pc, #460]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	496f      	ldr	r1, [pc, #444]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045cc:	4b6a      	ldr	r3, [pc, #424]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	4967      	ldr	r1, [pc, #412]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045ee:	4b62      	ldr	r3, [pc, #392]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	495e      	ldr	r1, [pc, #376]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004610:	4b59      	ldr	r3, [pc, #356]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	4956      	ldr	r1, [pc, #344]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004632:	4b51      	ldr	r3, [pc, #324]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	494d      	ldr	r1, [pc, #308]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d028      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004654:	4b48      	ldr	r3, [pc, #288]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4945      	ldr	r1, [pc, #276]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004672:	d106      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004674:	4b40      	ldr	r3, [pc, #256]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a3f      	ldr	r2, [pc, #252]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467e:	60d3      	str	r3, [r2, #12]
 8004680:	e011      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800468a:	d10c      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f882 	bl	800479c <RCCEx_PLLSAI1_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d028      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	492d      	ldr	r1, [pc, #180]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d0:	d106      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d2:	4b29      	ldr	r3, [pc, #164]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4a28      	ldr	r2, [pc, #160]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046dc:	60d3      	str	r3, [r2, #12]
 80046de:	e011      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046e8:	d10c      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	2101      	movs	r1, #1
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f853 	bl	800479c <RCCEx_PLLSAI1_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046fa:	7cfb      	ldrb	r3, [r7, #19]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01c      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471e:	4916      	ldr	r1, [pc, #88]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800472e:	d10c      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3304      	adds	r3, #4
 8004734:	2102      	movs	r1, #2
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f830 	bl	800479c <RCCEx_PLLSAI1_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004764:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800476c:	7cbb      	ldrb	r3, [r7, #18]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000

0800477c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000

0800479c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047aa:	4b74      	ldr	r3, [pc, #464]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047b6:	4b71      	ldr	r3, [pc, #452]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0203 	and.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d10d      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
       ||
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047ce:	4b6b      	ldr	r3, [pc, #428]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
       ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d047      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	e044      	b.n	8004872 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d018      	beq.n	8004822 <RCCEx_PLLSAI1_Config+0x86>
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d825      	bhi.n	8004840 <RCCEx_PLLSAI1_Config+0xa4>
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d002      	beq.n	80047fe <RCCEx_PLLSAI1_Config+0x62>
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d009      	beq.n	8004810 <RCCEx_PLLSAI1_Config+0x74>
 80047fc:	e020      	b.n	8004840 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047fe:	4b5f      	ldr	r3, [pc, #380]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11d      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480e:	e01a      	b.n	8004846 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004810:	4b5a      	ldr	r3, [pc, #360]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d116      	bne.n	800484a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004820:	e013      	b.n	800484a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004822:	4b56      	ldr	r3, [pc, #344]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800482e:	4b53      	ldr	r3, [pc, #332]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800483e:	e006      	b.n	800484e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e004      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800484e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004856:	4b49      	ldr	r3, [pc, #292]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	430b      	orrs	r3, r1
 800486c:	4943      	ldr	r1, [pc, #268]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 800486e:	4313      	orrs	r3, r2
 8004870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d17c      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004878:	4b40      	ldr	r3, [pc, #256]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a3f      	ldr	r2, [pc, #252]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 800487e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fd f800 	bl	8001888 <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800488a:	e009      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800488c:	f7fc fffc 	bl	8001888 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	73fb      	strb	r3, [r7, #15]
        break;
 800489e:	e005      	b.n	80048ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a0:	4b36      	ldr	r3, [pc, #216]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ef      	bne.n	800488c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d15f      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d110      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b8:	4b30      	ldr	r3, [pc, #192]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6892      	ldr	r2, [r2, #8]
 80048c8:	0211      	lsls	r1, r2, #8
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68d2      	ldr	r2, [r2, #12]
 80048ce:	06d2      	lsls	r2, r2, #27
 80048d0:	430a      	orrs	r2, r1
 80048d2:	492a      	ldr	r1, [pc, #168]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
 80048d8:	e027      	b.n	800492a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d112      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e0:	4b26      	ldr	r3, [pc, #152]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6892      	ldr	r2, [r2, #8]
 80048f0:	0211      	lsls	r1, r2, #8
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6912      	ldr	r2, [r2, #16]
 80048f6:	0852      	lsrs	r2, r2, #1
 80048f8:	3a01      	subs	r2, #1
 80048fa:	0552      	lsls	r2, r2, #21
 80048fc:	430a      	orrs	r2, r1
 80048fe:	491f      	ldr	r1, [pc, #124]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	610b      	str	r3, [r1, #16]
 8004904:	e011      	b.n	800492a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004906:	4b1d      	ldr	r3, [pc, #116]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800490e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6892      	ldr	r2, [r2, #8]
 8004916:	0211      	lsls	r1, r2, #8
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6952      	ldr	r2, [r2, #20]
 800491c:	0852      	lsrs	r2, r2, #1
 800491e:	3a01      	subs	r2, #1
 8004920:	0652      	lsls	r2, r2, #25
 8004922:	430a      	orrs	r2, r1
 8004924:	4915      	ldr	r1, [pc, #84]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004926:	4313      	orrs	r3, r2
 8004928:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004934:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fc ffa7 	bl	8001888 <HAL_GetTick>
 800493a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800493c:	e009      	b.n	8004952 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800493e:	f7fc ffa3 	bl	8001888 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d902      	bls.n	8004952 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	73fb      	strb	r3, [r7, #15]
          break;
 8004950:	e005      	b.n	800495e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004952:	4b0a      	ldr	r3, [pc, #40]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ef      	beq.n	800493e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <RCCEx_PLLSAI1_Config+0x1e0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000

08004980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e040      	b.n	8004a14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc fd0c 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fd62 	bl	8005488 <UART_SetConfig>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e022      	b.n	8004a14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 ff82 	bl	80058e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f001 f809 	bl	8005a24 <UART_CheckIdleState>
 8004a12:	4603      	mov	r3, r0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	f040 8082 	bne.w	8004b3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <HAL_UART_Transmit+0x26>
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07a      	b.n	8004b3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Transmit+0x38>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e073      	b.n	8004b3c <HAL_UART_Transmit+0x120>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2221      	movs	r2, #33	; 0x21
 8004a68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6a:	f7fc ff0d 	bl	8001888 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a88:	d108      	bne.n	8004a9c <HAL_UART_Transmit+0x80>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d104      	bne.n	8004a9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e003      	b.n	8004aa4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004aac:	e02d      	b.n	8004b0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fffc 	bl	8005ab6 <UART_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e039      	b.n	8004b3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	881a      	ldrh	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ada:	b292      	uxth	r2, r2
 8004adc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	e008      	b.n	8004af8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b292      	uxth	r2, r2
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3301      	adds	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1cb      	bne.n	8004aae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2140      	movs	r1, #64	; 0x40
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 ffc8 	bl	8005ab6 <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e005      	b.n	8004b3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	f040 80bf 	bne.w	8004cdc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_UART_Receive+0x26>
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0b7      	b.n	8004cde <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_UART_Receive+0x38>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0b0      	b.n	8004cde <HAL_UART_Receive+0x19a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2222      	movs	r2, #34	; 0x22
 8004b90:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b98:	f7fc fe76 	bl	8001888 <HAL_GetTick>
 8004b9c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	d10e      	bne.n	8004bd6 <HAL_UART_Receive+0x92>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d105      	bne.n	8004bcc <HAL_UART_Receive+0x88>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bca:	e02d      	b.n	8004c28 <HAL_UART_Receive+0xe4>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	22ff      	movs	r2, #255	; 0xff
 8004bd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bd4:	e028      	b.n	8004c28 <HAL_UART_Receive+0xe4>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <HAL_UART_Receive+0xb6>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <HAL_UART_Receive+0xac>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	22ff      	movs	r2, #255	; 0xff
 8004bea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bee:	e01b      	b.n	8004c28 <HAL_UART_Receive+0xe4>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	227f      	movs	r2, #127	; 0x7f
 8004bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bf8:	e016      	b.n	8004c28 <HAL_UART_Receive+0xe4>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c02:	d10d      	bne.n	8004c20 <HAL_UART_Receive+0xdc>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <HAL_UART_Receive+0xd2>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	227f      	movs	r2, #127	; 0x7f
 8004c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c14:	e008      	b.n	8004c28 <HAL_UART_Receive+0xe4>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	223f      	movs	r2, #63	; 0x3f
 8004c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c1e:	e003      	b.n	8004c28 <HAL_UART_Receive+0xe4>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c2e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c38:	d108      	bne.n	8004c4c <HAL_UART_Receive+0x108>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e003      	b.n	8004c54 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c5c:	e033      	b.n	8004cc6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2120      	movs	r1, #32
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 ff24 	bl	8005ab6 <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e032      	b.n	8004cde <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	8a7b      	ldrh	r3, [r7, #18]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	3302      	adds	r3, #2
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	e00d      	b.n	8004cb4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	8a7b      	ldrh	r3, [r7, #18]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1c5      	bne.n	8004c5e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b08b      	sub	sp, #44	; 0x2c
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d156      	bne.n	8004dac <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_UART_Transmit_IT+0x22>
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e04f      	b.n	8004dae <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UART_Transmit_IT+0x34>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e048      	b.n	8004dae <HAL_UART_Transmit_IT+0xc6>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2221      	movs	r2, #33	; 0x21
 8004d4c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d56:	d107      	bne.n	8004d68 <HAL_UART_Transmit_IT+0x80>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <HAL_UART_Transmit_IT+0xd4>)
 8004d64:	669a      	str	r2, [r3, #104]	; 0x68
 8004d66:	e002      	b.n	8004d6e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <HAL_UART_Transmit_IT+0xd8>)
 8004d6c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	613b      	str	r3, [r7, #16]
   return(result);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e6      	bne.n	8004d76 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	372c      	adds	r7, #44	; 0x2c
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	08005f7f 	.word	0x08005f7f
 8004dc0:	08005ec7 	.word	0x08005ec7

08004dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d142      	bne.n	8004e60 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_UART_Receive_IT+0x22>
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e03b      	b.n	8004e62 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_UART_Receive_IT+0x34>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e034      	b.n	8004e62 <HAL_UART_Receive_IT+0x9e>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <HAL_UART_Receive_IT+0xa8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d01f      	beq.n	8004e50 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	69f9      	ldr	r1, [r7, #28]
 8004e42:	6a3a      	ldr	r2, [r7, #32]
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	461a      	mov	r2, r3
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fef2 	bl	8005c40 <UART_Start_Receive_IT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	e000      	b.n	8004e62 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3728      	adds	r7, #40	; 0x28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40008000 	.word	0x40008000

08004e70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b0ba      	sub	sp, #232	; 0xe8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00f      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 82a6 	beq.w	800541a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
      }
      return;
 8004ed6:	e2a0      	b.n	800541a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8117 	beq.w	8005110 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ef2:	4b85      	ldr	r3, [pc, #532]	; (8005108 <HAL_UART_IRQHandler+0x298>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 810a 	beq.w	8005110 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d011      	beq.n	8004f2c <HAL_UART_IRQHandler+0xbc>
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d011      	beq.n	8004f5c <HAL_UART_IRQHandler+0xec>
 8004f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d011      	beq.n	8004f8c <HAL_UART_IRQHandler+0x11c>
 8004f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00b      	beq.n	8004f8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2204      	movs	r2, #4
 8004f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f82:	f043 0202 	orr.w	r2, r3, #2
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d017      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbe:	f043 0208 	orr.w	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d012      	beq.n	8004ffa <HAL_UART_IRQHandler+0x18a>
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 820c 	beq.w	800541e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d005      	beq.n	8005052 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04f      	beq.n	80050f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 febe 	bl	8005dd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d141      	bne.n	80050ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800507c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3308      	adds	r3, #8
 800508e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800509e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1d9      	bne.n	8005066 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d013      	beq.n	80050e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	4a13      	ldr	r2, [pc, #76]	; (800510c <HAL_UART_IRQHandler+0x29c>)
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fc fd5d 	bl	8001b86 <HAL_DMA_Abort_IT>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80050dc:	4610      	mov	r0, r2
 80050de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	e00f      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f9ba 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	e00b      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f9b6 	bl	800545c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e007      	b.n	8005102 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9b2 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005100:	e18d      	b.n	800541e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005102:	bf00      	nop
    return;
 8005104:	e18b      	b.n	800541e <HAL_UART_IRQHandler+0x5ae>
 8005106:	bf00      	nop
 8005108:	04000120 	.word	0x04000120
 800510c:	08005e9b 	.word	0x08005e9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 8146 	bne.w	80053a6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 813f 	beq.w	80053a6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8138 	beq.w	80053a6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	f040 80b4 	bne.w	80052b6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800515a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 815f 	beq.w	8005422 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800516a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800516e:	429a      	cmp	r2, r3
 8005170:	f080 8157 	bcs.w	8005422 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800517a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 8085 	bne.w	800529a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1da      	bne.n	8005190 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005202:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005206:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e1      	bne.n	80051da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800523a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800523c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005240:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e3      	bne.n	8005216 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526a:	f023 0310 	bic.w	r3, r3, #16
 800526e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800527c:	65bb      	str	r3, [r7, #88]	; 0x58
 800527e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e4      	bne.n	800525a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	4618      	mov	r0, r3
 8005296:	f7fc fc38 	bl	8001b0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f8de 	bl	8005470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052b4:	e0b5      	b.n	8005422 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80a7 	beq.w	8005426 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80052d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80a2 	beq.w	8005426 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
 8005306:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800530a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e4      	bne.n	80052e2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	623b      	str	r3, [r7, #32]
   return(result);
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3308      	adds	r3, #8
 8005338:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800533c:	633a      	str	r2, [r7, #48]	; 0x30
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e3      	bne.n	8005318 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0310 	bic.w	r3, r3, #16
 8005376:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	617b      	str	r3, [r7, #20]
   return(result);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e4      	bne.n	8005362 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f866 	bl	8005470 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053a4:	e03f      	b.n	8005426 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00e      	beq.n	80053d0 <HAL_UART_IRQHandler+0x560>
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 ffc2 	bl	8006352 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053ce:	e02d      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
    }
    return;
 80053f8:	e017      	b.n	800542a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d012      	beq.n	800542c <HAL_UART_IRQHandler+0x5bc>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fe13 	bl	800603e <UART_EndTransmit_IT>
    return;
 8005418:	e008      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
      return;
 800541a:	bf00      	nop
 800541c:	e006      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
    return;
 800541e:	bf00      	nop
 8005420:	e004      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005422:	bf00      	nop
 8005424:	e002      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005426:	bf00      	nop
 8005428:	e000      	b.n	800542c <HAL_UART_IRQHandler+0x5bc>
    return;
 800542a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800542c:	37e8      	adds	r7, #232	; 0xe8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop

08005434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800548c:	b08a      	sub	sp, #40	; 0x28
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4bb4      	ldr	r3, [pc, #720]	; (8005788 <UART_SetConfig+0x300>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4aa9      	ldr	r2, [pc, #676]	; (800578c <UART_SetConfig+0x304>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f0:	4313      	orrs	r3, r2
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4aa0      	ldr	r2, [pc, #640]	; (8005790 <UART_SetConfig+0x308>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d126      	bne.n	8005560 <UART_SetConfig+0xd8>
 8005512:	4ba0      	ldr	r3, [pc, #640]	; (8005794 <UART_SetConfig+0x30c>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	2b03      	cmp	r3, #3
 800551e:	d81b      	bhi.n	8005558 <UART_SetConfig+0xd0>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0xa0>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	08005539 	.word	0x08005539
 800552c:	08005549 	.word	0x08005549
 8005530:	08005541 	.word	0x08005541
 8005534:	08005551 	.word	0x08005551
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553e:	e080      	b.n	8005642 <UART_SetConfig+0x1ba>
 8005540:	2302      	movs	r3, #2
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005546:	e07c      	b.n	8005642 <UART_SetConfig+0x1ba>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554e:	e078      	b.n	8005642 <UART_SetConfig+0x1ba>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e074      	b.n	8005642 <UART_SetConfig+0x1ba>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e070      	b.n	8005642 <UART_SetConfig+0x1ba>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a8c      	ldr	r2, [pc, #560]	; (8005798 <UART_SetConfig+0x310>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d138      	bne.n	80055dc <UART_SetConfig+0x154>
 800556a:	4b8a      	ldr	r3, [pc, #552]	; (8005794 <UART_SetConfig+0x30c>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f003 030c 	and.w	r3, r3, #12
 8005574:	2b0c      	cmp	r3, #12
 8005576:	d82d      	bhi.n	80055d4 <UART_SetConfig+0x14c>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0xf8>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055b5 	.word	0x080055b5
 8005584:	080055d5 	.word	0x080055d5
 8005588:	080055d5 	.word	0x080055d5
 800558c:	080055d5 	.word	0x080055d5
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055d5 	.word	0x080055d5
 8005598:	080055d5 	.word	0x080055d5
 800559c:	080055d5 	.word	0x080055d5
 80055a0:	080055bd 	.word	0x080055bd
 80055a4:	080055d5 	.word	0x080055d5
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	080055d5 	.word	0x080055d5
 80055b0:	080055cd 	.word	0x080055cd
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e042      	b.n	8005642 <UART_SetConfig+0x1ba>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e03e      	b.n	8005642 <UART_SetConfig+0x1ba>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ca:	e03a      	b.n	8005642 <UART_SetConfig+0x1ba>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055d2:	e036      	b.n	8005642 <UART_SetConfig+0x1ba>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e032      	b.n	8005642 <UART_SetConfig+0x1ba>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6a      	ldr	r2, [pc, #424]	; (800578c <UART_SetConfig+0x304>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12a      	bne.n	800563c <UART_SetConfig+0x1b4>
 80055e6:	4b6b      	ldr	r3, [pc, #428]	; (8005794 <UART_SetConfig+0x30c>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f4:	d01a      	beq.n	800562c <UART_SetConfig+0x1a4>
 80055f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055fa:	d81b      	bhi.n	8005634 <UART_SetConfig+0x1ac>
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d00c      	beq.n	800561c <UART_SetConfig+0x194>
 8005602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005606:	d815      	bhi.n	8005634 <UART_SetConfig+0x1ac>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <UART_SetConfig+0x18c>
 800560c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005610:	d008      	beq.n	8005624 <UART_SetConfig+0x19c>
 8005612:	e00f      	b.n	8005634 <UART_SetConfig+0x1ac>
 8005614:	2300      	movs	r3, #0
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e012      	b.n	8005642 <UART_SetConfig+0x1ba>
 800561c:	2302      	movs	r3, #2
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e00e      	b.n	8005642 <UART_SetConfig+0x1ba>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e00a      	b.n	8005642 <UART_SetConfig+0x1ba>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e006      	b.n	8005642 <UART_SetConfig+0x1ba>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e002      	b.n	8005642 <UART_SetConfig+0x1ba>
 800563c:	2310      	movs	r3, #16
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a51      	ldr	r2, [pc, #324]	; (800578c <UART_SetConfig+0x304>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d17a      	bne.n	8005742 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800564c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005650:	2b08      	cmp	r3, #8
 8005652:	d824      	bhi.n	800569e <UART_SetConfig+0x216>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0x1d4>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005681 	.word	0x08005681
 8005660:	0800569f 	.word	0x0800569f
 8005664:	08005689 	.word	0x08005689
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800568f 	.word	0x0800568f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	0800569f 	.word	0x0800569f
 8005678:	0800569f 	.word	0x0800569f
 800567c:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005680:	f7fe fdfa 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005684:	61f8      	str	r0, [r7, #28]
        break;
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b44      	ldr	r3, [pc, #272]	; (800579c <UART_SetConfig+0x314>)
 800568a:	61fb      	str	r3, [r7, #28]
        break;
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7fe fd5b 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005692:	61f8      	str	r0, [r7, #28]
        break;
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569a:	61fb      	str	r3, [r7, #28]
        break;
 800569c:	e005      	b.n	80056aa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8107 	beq.w	80058c0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d305      	bcc.n	80056ce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d903      	bls.n	80056d6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056d4:	e0f4      	b.n	80058c0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	2200      	movs	r2, #0
 80056da:	461c      	mov	r4, r3
 80056dc:	4615      	mov	r5, r2
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	022b      	lsls	r3, r5, #8
 80056e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056ec:	0222      	lsls	r2, r4, #8
 80056ee:	68f9      	ldr	r1, [r7, #12]
 80056f0:	6849      	ldr	r1, [r1, #4]
 80056f2:	0849      	lsrs	r1, r1, #1
 80056f4:	2000      	movs	r0, #0
 80056f6:	4688      	mov	r8, r1
 80056f8:	4681      	mov	r9, r0
 80056fa:	eb12 0a08 	adds.w	sl, r2, r8
 80056fe:	eb43 0b09 	adc.w	fp, r3, r9
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005710:	4650      	mov	r0, sl
 8005712:	4659      	mov	r1, fp
 8005714:	f7fa fdc4 	bl	80002a0 <__aeabi_uldivmod>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4613      	mov	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005726:	d308      	bcc.n	800573a <UART_SetConfig+0x2b2>
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800572e:	d204      	bcs.n	800573a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	e0c2      	b.n	80058c0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005740:	e0be      	b.n	80058c0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574a:	d16a      	bne.n	8005822 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800574c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005750:	2b08      	cmp	r3, #8
 8005752:	d834      	bhi.n	80057be <UART_SetConfig+0x336>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0x2d4>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	08005781 	.word	0x08005781
 8005760:	080057a1 	.word	0x080057a1
 8005764:	080057a9 	.word	0x080057a9
 8005768:	080057bf 	.word	0x080057bf
 800576c:	080057af 	.word	0x080057af
 8005770:	080057bf 	.word	0x080057bf
 8005774:	080057bf 	.word	0x080057bf
 8005778:	080057bf 	.word	0x080057bf
 800577c:	080057b7 	.word	0x080057b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005780:	f7fe fd7a 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005784:	61f8      	str	r0, [r7, #28]
        break;
 8005786:	e020      	b.n	80057ca <UART_SetConfig+0x342>
 8005788:	efff69f3 	.word	0xefff69f3
 800578c:	40008000 	.word	0x40008000
 8005790:	40013800 	.word	0x40013800
 8005794:	40021000 	.word	0x40021000
 8005798:	40004400 	.word	0x40004400
 800579c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fe fd80 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 80057a4:	61f8      	str	r0, [r7, #28]
        break;
 80057a6:	e010      	b.n	80057ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a8:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <UART_SetConfig+0x454>)
 80057aa:	61fb      	str	r3, [r7, #28]
        break;
 80057ac:	e00d      	b.n	80057ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ae:	f7fe fccb 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80057b2:	61f8      	str	r0, [r7, #28]
        break;
 80057b4:	e009      	b.n	80057ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	61fb      	str	r3, [r7, #28]
        break;
 80057bc:	e005      	b.n	80057ca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d077      	beq.n	80058c0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	005a      	lsls	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b0f      	cmp	r3, #15
 80057ea:	d916      	bls.n	800581a <UART_SetConfig+0x392>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f2:	d212      	bcs.n	800581a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f023 030f 	bic.w	r3, r3, #15
 80057fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	b29b      	uxth	r3, r3
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	b29a      	uxth	r2, r3
 800580a:	8afb      	ldrh	r3, [r7, #22]
 800580c:	4313      	orrs	r3, r2
 800580e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	8afa      	ldrh	r2, [r7, #22]
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	e052      	b.n	80058c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005820:	e04e      	b.n	80058c0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005826:	2b08      	cmp	r3, #8
 8005828:	d827      	bhi.n	800587a <UART_SetConfig+0x3f2>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0x3a8>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005855 	.word	0x08005855
 8005834:	0800585d 	.word	0x0800585d
 8005838:	08005865 	.word	0x08005865
 800583c:	0800587b 	.word	0x0800587b
 8005840:	0800586b 	.word	0x0800586b
 8005844:	0800587b 	.word	0x0800587b
 8005848:	0800587b 	.word	0x0800587b
 800584c:	0800587b 	.word	0x0800587b
 8005850:	08005873 	.word	0x08005873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe fd10 	bl	8004278 <HAL_RCC_GetPCLK1Freq>
 8005858:	61f8      	str	r0, [r7, #28]
        break;
 800585a:	e014      	b.n	8005886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800585c:	f7fe fd22 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 8005860:	61f8      	str	r0, [r7, #28]
        break;
 8005862:	e010      	b.n	8005886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <UART_SetConfig+0x454>)
 8005866:	61fb      	str	r3, [r7, #28]
        break;
 8005868:	e00d      	b.n	8005886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586a:	f7fe fc6d 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 800586e:	61f8      	str	r0, [r7, #28]
        break;
 8005870:	e009      	b.n	8005886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005876:	61fb      	str	r3, [r7, #28]
        break;
 8005878:	e005      	b.n	8005886 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005884:	bf00      	nop
    }

    if (pclk != 0U)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d019      	beq.n	80058c0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	085a      	lsrs	r2, r3, #1
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	fbb2 f3f3 	udiv	r3, r2, r3
 800589e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b0f      	cmp	r3, #15
 80058a4:	d909      	bls.n	80058ba <UART_SetConfig+0x432>
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ac:	d205      	bcs.n	80058ba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	e002      	b.n	80058c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80058cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058da:	bf00      	nop
 80058dc:	00f42400 	.word	0x00f42400

080058e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059de:	d10a      	bne.n	80059f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a34:	f7fb ff28 	bl	8001888 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d10e      	bne.n	8005a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f82d 	bl	8005ab6 <UART_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e023      	b.n	8005aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d10e      	bne.n	8005a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f817 	bl	8005ab6 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e00d      	b.n	8005aae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b09c      	sub	sp, #112	; 0x70
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac6:	e0a5      	b.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	f000 80a1 	beq.w	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fb fed9 	bl	8001888 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d13e      	bne.n	8005b66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005afc:	667b      	str	r3, [r7, #100]	; 0x64
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e6      	bne.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	663b      	str	r3, [r7, #96]	; 0x60
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e067      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d04f      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	d147      	bne.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
 8005bae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005be0:	623a      	str	r2, [r7, #32]
 8005be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e010      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f43f af4a 	beq.w	8005ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3770      	adds	r7, #112	; 0x70
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b097      	sub	sp, #92	; 0x5c
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c72:	d10e      	bne.n	8005c92 <UART_Start_Receive_IT+0x52>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <UART_Start_Receive_IT+0x48>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c86:	e02d      	b.n	8005ce4 <UART_Start_Receive_IT+0xa4>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	22ff      	movs	r2, #255	; 0xff
 8005c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c90:	e028      	b.n	8005ce4 <UART_Start_Receive_IT+0xa4>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <UART_Start_Receive_IT+0x76>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <UART_Start_Receive_IT+0x6c>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005caa:	e01b      	b.n	8005ce4 <UART_Start_Receive_IT+0xa4>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	227f      	movs	r2, #127	; 0x7f
 8005cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb4:	e016      	b.n	8005ce4 <UART_Start_Receive_IT+0xa4>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cbe:	d10d      	bne.n	8005cdc <UART_Start_Receive_IT+0x9c>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <UART_Start_Receive_IT+0x92>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	227f      	movs	r2, #127	; 0x7f
 8005ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd0:	e008      	b.n	8005ce4 <UART_Start_Receive_IT+0xa4>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	223f      	movs	r2, #63	; 0x3f
 8005cd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cda:	e003      	b.n	8005ce4 <UART_Start_Receive_IT+0xa4>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2222      	movs	r2, #34	; 0x22
 8005cf0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	657b      	str	r3, [r7, #84]	; 0x54
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	d107      	bne.n	8005d40 <UART_Start_Receive_IT+0x100>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d103      	bne.n	8005d40 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <UART_Start_Receive_IT+0x18c>)
 8005d3c:	665a      	str	r2, [r3, #100]	; 0x64
 8005d3e:	e002      	b.n	8005d46 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <UART_Start_Receive_IT+0x190>)
 8005d44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d019      	beq.n	8005d8a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
 8005d76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_Start_Receive_IT+0x116>
 8005d88:	e018      	b.n	8005dbc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	613b      	str	r3, [r7, #16]
   return(result);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f043 0320 	orr.w	r3, r3, #32
 8005d9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	69f9      	ldr	r1, [r7, #28]
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	375c      	adds	r7, #92	; 0x5c
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	080061f3 	.word	0x080061f3
 8005dd0:	08006093 	.word	0x08006093

08005dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b095      	sub	sp, #84	; 0x54
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8005dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e6      	bne.n	8005ddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e5      	bne.n	8005e0e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d118      	bne.n	8005e7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f023 0310 	bic.w	r3, r3, #16
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6979      	ldr	r1, [r7, #20]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	613b      	str	r3, [r7, #16]
   return(result);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e6      	bne.n	8005e4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e8e:	bf00      	nop
 8005e90:	3754      	adds	r7, #84	; 0x54
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff facf 	bl	800545c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b08f      	sub	sp, #60	; 0x3c
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed2:	2b21      	cmp	r3, #33	; 0x21
 8005ed4:	d14d      	bne.n	8005f72 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d132      	bne.n	8005f48 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f02:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e6      	bne.n	8005ee2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f28:	633b      	str	r3, [r7, #48]	; 0x30
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6979      	ldr	r1, [r7, #20]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e6      	bne.n	8005f14 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005f46:	e014      	b.n	8005f72 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	b292      	uxth	r2, r2
 8005f54:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005f72:	bf00      	nop
 8005f74:	373c      	adds	r7, #60	; 0x3c
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b091      	sub	sp, #68	; 0x44
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f8a:	2b21      	cmp	r3, #33	; 0x21
 8005f8c:	d151      	bne.n	8006032 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d132      	bne.n	8006000 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e6      	bne.n	8005f9a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	69b9      	ldr	r1, [r7, #24]
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e6      	bne.n	8005fcc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005ffe:	e018      	b.n	8006032 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006008:	881a      	ldrh	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006012:	b292      	uxth	r2, r2
 8006014:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601a:	1c9a      	adds	r2, r3, #2
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006032:	bf00      	nop
 8006034:	3744      	adds	r7, #68	; 0x44
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b088      	sub	sp, #32
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	60bb      	str	r3, [r7, #8]
   return(result);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	613b      	str	r3, [r7, #16]
   return(result);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e6      	bne.n	8006046 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff f9d5 	bl	8005434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b096      	sub	sp, #88	; 0x58
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a8:	2b22      	cmp	r3, #34	; 0x22
 80060aa:	f040 8094 	bne.w	80061d6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060b8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80060bc:	b2d9      	uxtb	r1, r3
 80060be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	400a      	ands	r2, r1
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d179      	bne.n	80061ea <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800610a:	653b      	str	r3, [r7, #80]	; 0x50
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	647b      	str	r3, [r7, #68]	; 0x44
 8006116:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800611a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e6      	bne.n	80060f6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	623b      	str	r3, [r7, #32]
   return(result);
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006148:	633a      	str	r2, [r7, #48]	; 0x30
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800614e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616c:	2b01      	cmp	r3, #1
 800616e:	d12e      	bne.n	80061ce <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	60fb      	str	r3, [r7, #12]
   return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0310 	bic.w	r3, r3, #16
 800618a:	64bb      	str	r3, [r7, #72]	; 0x48
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	617b      	str	r3, [r7, #20]
   return(result);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e6      	bne.n	8006176 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d103      	bne.n	80061be <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2210      	movs	r2, #16
 80061bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff f952 	bl	8005470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061cc:	e00d      	b.n	80061ea <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff f93a 	bl	8005448 <HAL_UART_RxCpltCallback>
}
 80061d4:	e009      	b.n	80061ea <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	8b1b      	ldrh	r3, [r3, #24]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	b292      	uxth	r2, r2
 80061e8:	831a      	strh	r2, [r3, #24]
}
 80061ea:	bf00      	nop
 80061ec:	3758      	adds	r7, #88	; 0x58
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b096      	sub	sp, #88	; 0x58
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006200:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006208:	2b22      	cmp	r3, #34	; 0x22
 800620a:	f040 8094 	bne.w	8006336 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006214:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800621e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006222:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006226:	4013      	ands	r3, r2
 8006228:	b29a      	uxth	r2, r3
 800622a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	1c9a      	adds	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d179      	bne.n	800634a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800626a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006274:	643b      	str	r3, [r7, #64]	; 0x40
 8006276:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800627a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e6      	bne.n	8006256 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3308      	adds	r3, #8
 800628e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	61fb      	str	r3, [r7, #28]
   return(result);
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e5      	bne.n	8006288 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d12e      	bne.n	800632e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 0310 	bic.w	r3, r3, #16
 80062ea:	647b      	str	r3, [r7, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6979      	ldr	r1, [r7, #20]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	613b      	str	r3, [r7, #16]
   return(result);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e6      	bne.n	80062d6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b10      	cmp	r3, #16
 8006314:	d103      	bne.n	800631e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2210      	movs	r2, #16
 800631c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff f8a2 	bl	8005470 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800632c:	e00d      	b.n	800634a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff f88a 	bl	8005448 <HAL_UART_RxCpltCallback>
}
 8006334:	e009      	b.n	800634a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	8b1b      	ldrh	r3, [r3, #24]
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0208 	orr.w	r2, r2, #8
 8006346:	b292      	uxth	r2, r2
 8006348:	831a      	strh	r2, [r3, #24]
}
 800634a:	bf00      	nop
 800634c:	3758      	adds	r7, #88	; 0x58
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <atoi>:
 8006366:	220a      	movs	r2, #10
 8006368:	2100      	movs	r1, #0
 800636a:	f000 ba3d 	b.w	80067e8 <strtol>
	...

08006370 <__errno>:
 8006370:	4b01      	ldr	r3, [pc, #4]	; (8006378 <__errno+0x8>)
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2000000c 	.word	0x2000000c

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4d0d      	ldr	r5, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2600      	movs	r6, #0
 8006388:	42a6      	cmp	r6, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4d0b      	ldr	r5, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f001 faf2 	bl	8007978 <_init>
 8006394:	1b64      	subs	r4, r4, r5
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2600      	movs	r6, #0
 800639a:	42a6      	cmp	r6, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a4:	4798      	blx	r3
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ae:	4798      	blx	r3
 80063b0:	3601      	adds	r6, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	08007e64 	.word	0x08007e64
 80063b8:	08007e64 	.word	0x08007e64
 80063bc:	08007e64 	.word	0x08007e64
 80063c0:	08007e68 	.word	0x08007e68

080063c4 <malloc>:
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <malloc+0xc>)
 80063c6:	4601      	mov	r1, r0
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	f000 b877 	b.w	80064bc <_malloc_r>
 80063ce:	bf00      	nop
 80063d0:	2000000c 	.word	0x2000000c

080063d4 <memset>:
 80063d4:	4402      	add	r2, r0
 80063d6:	4603      	mov	r3, r0
 80063d8:	4293      	cmp	r3, r2
 80063da:	d100      	bne.n	80063de <memset+0xa>
 80063dc:	4770      	bx	lr
 80063de:	f803 1b01 	strb.w	r1, [r3], #1
 80063e2:	e7f9      	b.n	80063d8 <memset+0x4>

080063e4 <_free_r>:
 80063e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063e6:	2900      	cmp	r1, #0
 80063e8:	d044      	beq.n	8006474 <_free_r+0x90>
 80063ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ee:	9001      	str	r0, [sp, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f1a1 0404 	sub.w	r4, r1, #4
 80063f6:	bfb8      	it	lt
 80063f8:	18e4      	addlt	r4, r4, r3
 80063fa:	f000 fa2f 	bl	800685c <__malloc_lock>
 80063fe:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <_free_r+0x94>)
 8006400:	9801      	ldr	r0, [sp, #4]
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	b933      	cbnz	r3, 8006414 <_free_r+0x30>
 8006406:	6063      	str	r3, [r4, #4]
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	b003      	add	sp, #12
 800640c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006410:	f000 ba2a 	b.w	8006868 <__malloc_unlock>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d908      	bls.n	800642a <_free_r+0x46>
 8006418:	6825      	ldr	r5, [r4, #0]
 800641a:	1961      	adds	r1, r4, r5
 800641c:	428b      	cmp	r3, r1
 800641e:	bf01      	itttt	eq
 8006420:	6819      	ldreq	r1, [r3, #0]
 8006422:	685b      	ldreq	r3, [r3, #4]
 8006424:	1949      	addeq	r1, r1, r5
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	e7ed      	b.n	8006406 <_free_r+0x22>
 800642a:	461a      	mov	r2, r3
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b10b      	cbz	r3, 8006434 <_free_r+0x50>
 8006430:	42a3      	cmp	r3, r4
 8006432:	d9fa      	bls.n	800642a <_free_r+0x46>
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	1855      	adds	r5, r2, r1
 8006438:	42a5      	cmp	r5, r4
 800643a:	d10b      	bne.n	8006454 <_free_r+0x70>
 800643c:	6824      	ldr	r4, [r4, #0]
 800643e:	4421      	add	r1, r4
 8006440:	1854      	adds	r4, r2, r1
 8006442:	42a3      	cmp	r3, r4
 8006444:	6011      	str	r1, [r2, #0]
 8006446:	d1e0      	bne.n	800640a <_free_r+0x26>
 8006448:	681c      	ldr	r4, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	6053      	str	r3, [r2, #4]
 800644e:	4421      	add	r1, r4
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	e7da      	b.n	800640a <_free_r+0x26>
 8006454:	d902      	bls.n	800645c <_free_r+0x78>
 8006456:	230c      	movs	r3, #12
 8006458:	6003      	str	r3, [r0, #0]
 800645a:	e7d6      	b.n	800640a <_free_r+0x26>
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	1961      	adds	r1, r4, r5
 8006460:	428b      	cmp	r3, r1
 8006462:	bf04      	itt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	bf04      	itt	eq
 800646c:	1949      	addeq	r1, r1, r5
 800646e:	6021      	streq	r1, [r4, #0]
 8006470:	6054      	str	r4, [r2, #4]
 8006472:	e7ca      	b.n	800640a <_free_r+0x26>
 8006474:	b003      	add	sp, #12
 8006476:	bd30      	pop	{r4, r5, pc}
 8006478:	200003a4 	.word	0x200003a4

0800647c <sbrk_aligned>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4e0e      	ldr	r6, [pc, #56]	; (80064b8 <sbrk_aligned+0x3c>)
 8006480:	460c      	mov	r4, r1
 8006482:	6831      	ldr	r1, [r6, #0]
 8006484:	4605      	mov	r5, r0
 8006486:	b911      	cbnz	r1, 800648e <sbrk_aligned+0x12>
 8006488:	f000 f88c 	bl	80065a4 <_sbrk_r>
 800648c:	6030      	str	r0, [r6, #0]
 800648e:	4621      	mov	r1, r4
 8006490:	4628      	mov	r0, r5
 8006492:	f000 f887 	bl	80065a4 <_sbrk_r>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	d00a      	beq.n	80064b0 <sbrk_aligned+0x34>
 800649a:	1cc4      	adds	r4, r0, #3
 800649c:	f024 0403 	bic.w	r4, r4, #3
 80064a0:	42a0      	cmp	r0, r4
 80064a2:	d007      	beq.n	80064b4 <sbrk_aligned+0x38>
 80064a4:	1a21      	subs	r1, r4, r0
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f87c 	bl	80065a4 <_sbrk_r>
 80064ac:	3001      	adds	r0, #1
 80064ae:	d101      	bne.n	80064b4 <sbrk_aligned+0x38>
 80064b0:	f04f 34ff 	mov.w	r4, #4294967295
 80064b4:	4620      	mov	r0, r4
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	200003a8 	.word	0x200003a8

080064bc <_malloc_r>:
 80064bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c0:	1ccd      	adds	r5, r1, #3
 80064c2:	f025 0503 	bic.w	r5, r5, #3
 80064c6:	3508      	adds	r5, #8
 80064c8:	2d0c      	cmp	r5, #12
 80064ca:	bf38      	it	cc
 80064cc:	250c      	movcc	r5, #12
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	4607      	mov	r7, r0
 80064d2:	db01      	blt.n	80064d8 <_malloc_r+0x1c>
 80064d4:	42a9      	cmp	r1, r5
 80064d6:	d905      	bls.n	80064e4 <_malloc_r+0x28>
 80064d8:	230c      	movs	r3, #12
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	2600      	movs	r6, #0
 80064de:	4630      	mov	r0, r6
 80064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e4:	4e2e      	ldr	r6, [pc, #184]	; (80065a0 <_malloc_r+0xe4>)
 80064e6:	f000 f9b9 	bl	800685c <__malloc_lock>
 80064ea:	6833      	ldr	r3, [r6, #0]
 80064ec:	461c      	mov	r4, r3
 80064ee:	bb34      	cbnz	r4, 800653e <_malloc_r+0x82>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ffc2 	bl	800647c <sbrk_aligned>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	4604      	mov	r4, r0
 80064fc:	d14d      	bne.n	800659a <_malloc_r+0xde>
 80064fe:	6834      	ldr	r4, [r6, #0]
 8006500:	4626      	mov	r6, r4
 8006502:	2e00      	cmp	r6, #0
 8006504:	d140      	bne.n	8006588 <_malloc_r+0xcc>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	4631      	mov	r1, r6
 800650a:	4638      	mov	r0, r7
 800650c:	eb04 0803 	add.w	r8, r4, r3
 8006510:	f000 f848 	bl	80065a4 <_sbrk_r>
 8006514:	4580      	cmp	r8, r0
 8006516:	d13a      	bne.n	800658e <_malloc_r+0xd2>
 8006518:	6821      	ldr	r1, [r4, #0]
 800651a:	3503      	adds	r5, #3
 800651c:	1a6d      	subs	r5, r5, r1
 800651e:	f025 0503 	bic.w	r5, r5, #3
 8006522:	3508      	adds	r5, #8
 8006524:	2d0c      	cmp	r5, #12
 8006526:	bf38      	it	cc
 8006528:	250c      	movcc	r5, #12
 800652a:	4629      	mov	r1, r5
 800652c:	4638      	mov	r0, r7
 800652e:	f7ff ffa5 	bl	800647c <sbrk_aligned>
 8006532:	3001      	adds	r0, #1
 8006534:	d02b      	beq.n	800658e <_malloc_r+0xd2>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	442b      	add	r3, r5
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	e00e      	b.n	800655c <_malloc_r+0xa0>
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	1b52      	subs	r2, r2, r5
 8006542:	d41e      	bmi.n	8006582 <_malloc_r+0xc6>
 8006544:	2a0b      	cmp	r2, #11
 8006546:	d916      	bls.n	8006576 <_malloc_r+0xba>
 8006548:	1961      	adds	r1, r4, r5
 800654a:	42a3      	cmp	r3, r4
 800654c:	6025      	str	r5, [r4, #0]
 800654e:	bf18      	it	ne
 8006550:	6059      	strne	r1, [r3, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	bf08      	it	eq
 8006556:	6031      	streq	r1, [r6, #0]
 8006558:	5162      	str	r2, [r4, r5]
 800655a:	604b      	str	r3, [r1, #4]
 800655c:	4638      	mov	r0, r7
 800655e:	f104 060b 	add.w	r6, r4, #11
 8006562:	f000 f981 	bl	8006868 <__malloc_unlock>
 8006566:	f026 0607 	bic.w	r6, r6, #7
 800656a:	1d23      	adds	r3, r4, #4
 800656c:	1af2      	subs	r2, r6, r3
 800656e:	d0b6      	beq.n	80064de <_malloc_r+0x22>
 8006570:	1b9b      	subs	r3, r3, r6
 8006572:	50a3      	str	r3, [r4, r2]
 8006574:	e7b3      	b.n	80064de <_malloc_r+0x22>
 8006576:	6862      	ldr	r2, [r4, #4]
 8006578:	42a3      	cmp	r3, r4
 800657a:	bf0c      	ite	eq
 800657c:	6032      	streq	r2, [r6, #0]
 800657e:	605a      	strne	r2, [r3, #4]
 8006580:	e7ec      	b.n	800655c <_malloc_r+0xa0>
 8006582:	4623      	mov	r3, r4
 8006584:	6864      	ldr	r4, [r4, #4]
 8006586:	e7b2      	b.n	80064ee <_malloc_r+0x32>
 8006588:	4634      	mov	r4, r6
 800658a:	6876      	ldr	r6, [r6, #4]
 800658c:	e7b9      	b.n	8006502 <_malloc_r+0x46>
 800658e:	230c      	movs	r3, #12
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4638      	mov	r0, r7
 8006594:	f000 f968 	bl	8006868 <__malloc_unlock>
 8006598:	e7a1      	b.n	80064de <_malloc_r+0x22>
 800659a:	6025      	str	r5, [r4, #0]
 800659c:	e7de      	b.n	800655c <_malloc_r+0xa0>
 800659e:	bf00      	nop
 80065a0:	200003a4 	.word	0x200003a4

080065a4 <_sbrk_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d06      	ldr	r5, [pc, #24]	; (80065c0 <_sbrk_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f7fb f890 	bl	80016d4 <_sbrk>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_sbrk_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_sbrk_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	200003ac 	.word	0x200003ac

080065c4 <siprintf>:
 80065c4:	b40e      	push	{r1, r2, r3}
 80065c6:	b500      	push	{lr}
 80065c8:	b09c      	sub	sp, #112	; 0x70
 80065ca:	ab1d      	add	r3, sp, #116	; 0x74
 80065cc:	9002      	str	r0, [sp, #8]
 80065ce:	9006      	str	r0, [sp, #24]
 80065d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065d4:	4809      	ldr	r0, [pc, #36]	; (80065fc <siprintf+0x38>)
 80065d6:	9107      	str	r1, [sp, #28]
 80065d8:	9104      	str	r1, [sp, #16]
 80065da:	4909      	ldr	r1, [pc, #36]	; (8006600 <siprintf+0x3c>)
 80065dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e0:	9105      	str	r1, [sp, #20]
 80065e2:	6800      	ldr	r0, [r0, #0]
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	a902      	add	r1, sp, #8
 80065e8:	f000 f9a0 	bl	800692c <_svfiprintf_r>
 80065ec:	9b02      	ldr	r3, [sp, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	b01c      	add	sp, #112	; 0x70
 80065f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80065f8:	b003      	add	sp, #12
 80065fa:	4770      	bx	lr
 80065fc:	2000000c 	.word	0x2000000c
 8006600:	ffff0208 	.word	0xffff0208

08006604 <strncpy>:
 8006604:	b510      	push	{r4, lr}
 8006606:	3901      	subs	r1, #1
 8006608:	4603      	mov	r3, r0
 800660a:	b132      	cbz	r2, 800661a <strncpy+0x16>
 800660c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006610:	f803 4b01 	strb.w	r4, [r3], #1
 8006614:	3a01      	subs	r2, #1
 8006616:	2c00      	cmp	r4, #0
 8006618:	d1f7      	bne.n	800660a <strncpy+0x6>
 800661a:	441a      	add	r2, r3
 800661c:	2100      	movs	r1, #0
 800661e:	4293      	cmp	r3, r2
 8006620:	d100      	bne.n	8006624 <strncpy+0x20>
 8006622:	bd10      	pop	{r4, pc}
 8006624:	f803 1b01 	strb.w	r1, [r3], #1
 8006628:	e7f9      	b.n	800661e <strncpy+0x1a>
	...

0800662c <strtok>:
 800662c:	4b16      	ldr	r3, [pc, #88]	; (8006688 <strtok+0x5c>)
 800662e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006630:	681e      	ldr	r6, [r3, #0]
 8006632:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006634:	4605      	mov	r5, r0
 8006636:	b9fc      	cbnz	r4, 8006678 <strtok+0x4c>
 8006638:	2050      	movs	r0, #80	; 0x50
 800663a:	9101      	str	r1, [sp, #4]
 800663c:	f7ff fec2 	bl	80063c4 <malloc>
 8006640:	9901      	ldr	r1, [sp, #4]
 8006642:	65b0      	str	r0, [r6, #88]	; 0x58
 8006644:	4602      	mov	r2, r0
 8006646:	b920      	cbnz	r0, 8006652 <strtok+0x26>
 8006648:	4b10      	ldr	r3, [pc, #64]	; (800668c <strtok+0x60>)
 800664a:	4811      	ldr	r0, [pc, #68]	; (8006690 <strtok+0x64>)
 800664c:	2157      	movs	r1, #87	; 0x57
 800664e:	f000 f8d5 	bl	80067fc <__assert_func>
 8006652:	e9c0 4400 	strd	r4, r4, [r0]
 8006656:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800665a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800665e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006662:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006666:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800666a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800666e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006672:	6184      	str	r4, [r0, #24]
 8006674:	7704      	strb	r4, [r0, #28]
 8006676:	6244      	str	r4, [r0, #36]	; 0x24
 8006678:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800667a:	2301      	movs	r3, #1
 800667c:	4628      	mov	r0, r5
 800667e:	b002      	add	sp, #8
 8006680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006684:	f000 b806 	b.w	8006694 <__strtok_r>
 8006688:	2000000c 	.word	0x2000000c
 800668c:	08007d18 	.word	0x08007d18
 8006690:	08007d2f 	.word	0x08007d2f

08006694 <__strtok_r>:
 8006694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006696:	b908      	cbnz	r0, 800669c <__strtok_r+0x8>
 8006698:	6810      	ldr	r0, [r2, #0]
 800669a:	b188      	cbz	r0, 80066c0 <__strtok_r+0x2c>
 800669c:	4604      	mov	r4, r0
 800669e:	4620      	mov	r0, r4
 80066a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80066a4:	460f      	mov	r7, r1
 80066a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80066aa:	b91e      	cbnz	r6, 80066b4 <__strtok_r+0x20>
 80066ac:	b965      	cbnz	r5, 80066c8 <__strtok_r+0x34>
 80066ae:	6015      	str	r5, [r2, #0]
 80066b0:	4628      	mov	r0, r5
 80066b2:	e005      	b.n	80066c0 <__strtok_r+0x2c>
 80066b4:	42b5      	cmp	r5, r6
 80066b6:	d1f6      	bne.n	80066a6 <__strtok_r+0x12>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f0      	bne.n	800669e <__strtok_r+0xa>
 80066bc:	6014      	str	r4, [r2, #0]
 80066be:	7003      	strb	r3, [r0, #0]
 80066c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c2:	461c      	mov	r4, r3
 80066c4:	e00c      	b.n	80066e0 <__strtok_r+0x4c>
 80066c6:	b915      	cbnz	r5, 80066ce <__strtok_r+0x3a>
 80066c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066cc:	460e      	mov	r6, r1
 80066ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80066d2:	42ab      	cmp	r3, r5
 80066d4:	d1f7      	bne.n	80066c6 <__strtok_r+0x32>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f3      	beq.n	80066c2 <__strtok_r+0x2e>
 80066da:	2300      	movs	r3, #0
 80066dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80066e0:	6014      	str	r4, [r2, #0]
 80066e2:	e7ed      	b.n	80066c0 <__strtok_r+0x2c>

080066e4 <_strtol_l.constprop.0>:
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ea:	d001      	beq.n	80066f0 <_strtol_l.constprop.0+0xc>
 80066ec:	2b24      	cmp	r3, #36	; 0x24
 80066ee:	d906      	bls.n	80066fe <_strtol_l.constprop.0+0x1a>
 80066f0:	f7ff fe3e 	bl	8006370 <__errno>
 80066f4:	2316      	movs	r3, #22
 80066f6:	6003      	str	r3, [r0, #0]
 80066f8:	2000      	movs	r0, #0
 80066fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80067e4 <_strtol_l.constprop.0+0x100>
 8006702:	460d      	mov	r5, r1
 8006704:	462e      	mov	r6, r5
 8006706:	f815 4b01 	ldrb.w	r4, [r5], #1
 800670a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800670e:	f017 0708 	ands.w	r7, r7, #8
 8006712:	d1f7      	bne.n	8006704 <_strtol_l.constprop.0+0x20>
 8006714:	2c2d      	cmp	r4, #45	; 0x2d
 8006716:	d132      	bne.n	800677e <_strtol_l.constprop.0+0x9a>
 8006718:	782c      	ldrb	r4, [r5, #0]
 800671a:	2701      	movs	r7, #1
 800671c:	1cb5      	adds	r5, r6, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d05b      	beq.n	80067da <_strtol_l.constprop.0+0xf6>
 8006722:	2b10      	cmp	r3, #16
 8006724:	d109      	bne.n	800673a <_strtol_l.constprop.0+0x56>
 8006726:	2c30      	cmp	r4, #48	; 0x30
 8006728:	d107      	bne.n	800673a <_strtol_l.constprop.0+0x56>
 800672a:	782c      	ldrb	r4, [r5, #0]
 800672c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006730:	2c58      	cmp	r4, #88	; 0x58
 8006732:	d14d      	bne.n	80067d0 <_strtol_l.constprop.0+0xec>
 8006734:	786c      	ldrb	r4, [r5, #1]
 8006736:	2310      	movs	r3, #16
 8006738:	3502      	adds	r5, #2
 800673a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800673e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006742:	f04f 0c00 	mov.w	ip, #0
 8006746:	fbb8 f9f3 	udiv	r9, r8, r3
 800674a:	4666      	mov	r6, ip
 800674c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006750:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006754:	f1be 0f09 	cmp.w	lr, #9
 8006758:	d816      	bhi.n	8006788 <_strtol_l.constprop.0+0xa4>
 800675a:	4674      	mov	r4, lr
 800675c:	42a3      	cmp	r3, r4
 800675e:	dd24      	ble.n	80067aa <_strtol_l.constprop.0+0xc6>
 8006760:	f1bc 0f00 	cmp.w	ip, #0
 8006764:	db1e      	blt.n	80067a4 <_strtol_l.constprop.0+0xc0>
 8006766:	45b1      	cmp	r9, r6
 8006768:	d31c      	bcc.n	80067a4 <_strtol_l.constprop.0+0xc0>
 800676a:	d101      	bne.n	8006770 <_strtol_l.constprop.0+0x8c>
 800676c:	45a2      	cmp	sl, r4
 800676e:	db19      	blt.n	80067a4 <_strtol_l.constprop.0+0xc0>
 8006770:	fb06 4603 	mla	r6, r6, r3, r4
 8006774:	f04f 0c01 	mov.w	ip, #1
 8006778:	f815 4b01 	ldrb.w	r4, [r5], #1
 800677c:	e7e8      	b.n	8006750 <_strtol_l.constprop.0+0x6c>
 800677e:	2c2b      	cmp	r4, #43	; 0x2b
 8006780:	bf04      	itt	eq
 8006782:	782c      	ldrbeq	r4, [r5, #0]
 8006784:	1cb5      	addeq	r5, r6, #2
 8006786:	e7ca      	b.n	800671e <_strtol_l.constprop.0+0x3a>
 8006788:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800678c:	f1be 0f19 	cmp.w	lr, #25
 8006790:	d801      	bhi.n	8006796 <_strtol_l.constprop.0+0xb2>
 8006792:	3c37      	subs	r4, #55	; 0x37
 8006794:	e7e2      	b.n	800675c <_strtol_l.constprop.0+0x78>
 8006796:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800679a:	f1be 0f19 	cmp.w	lr, #25
 800679e:	d804      	bhi.n	80067aa <_strtol_l.constprop.0+0xc6>
 80067a0:	3c57      	subs	r4, #87	; 0x57
 80067a2:	e7db      	b.n	800675c <_strtol_l.constprop.0+0x78>
 80067a4:	f04f 3cff 	mov.w	ip, #4294967295
 80067a8:	e7e6      	b.n	8006778 <_strtol_l.constprop.0+0x94>
 80067aa:	f1bc 0f00 	cmp.w	ip, #0
 80067ae:	da05      	bge.n	80067bc <_strtol_l.constprop.0+0xd8>
 80067b0:	2322      	movs	r3, #34	; 0x22
 80067b2:	6003      	str	r3, [r0, #0]
 80067b4:	4646      	mov	r6, r8
 80067b6:	b942      	cbnz	r2, 80067ca <_strtol_l.constprop.0+0xe6>
 80067b8:	4630      	mov	r0, r6
 80067ba:	e79e      	b.n	80066fa <_strtol_l.constprop.0+0x16>
 80067bc:	b107      	cbz	r7, 80067c0 <_strtol_l.constprop.0+0xdc>
 80067be:	4276      	negs	r6, r6
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	d0f9      	beq.n	80067b8 <_strtol_l.constprop.0+0xd4>
 80067c4:	f1bc 0f00 	cmp.w	ip, #0
 80067c8:	d000      	beq.n	80067cc <_strtol_l.constprop.0+0xe8>
 80067ca:	1e69      	subs	r1, r5, #1
 80067cc:	6011      	str	r1, [r2, #0]
 80067ce:	e7f3      	b.n	80067b8 <_strtol_l.constprop.0+0xd4>
 80067d0:	2430      	movs	r4, #48	; 0x30
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1b1      	bne.n	800673a <_strtol_l.constprop.0+0x56>
 80067d6:	2308      	movs	r3, #8
 80067d8:	e7af      	b.n	800673a <_strtol_l.constprop.0+0x56>
 80067da:	2c30      	cmp	r4, #48	; 0x30
 80067dc:	d0a5      	beq.n	800672a <_strtol_l.constprop.0+0x46>
 80067de:	230a      	movs	r3, #10
 80067e0:	e7ab      	b.n	800673a <_strtol_l.constprop.0+0x56>
 80067e2:	bf00      	nop
 80067e4:	08007c11 	.word	0x08007c11

080067e8 <strtol>:
 80067e8:	4613      	mov	r3, r2
 80067ea:	460a      	mov	r2, r1
 80067ec:	4601      	mov	r1, r0
 80067ee:	4802      	ldr	r0, [pc, #8]	; (80067f8 <strtol+0x10>)
 80067f0:	6800      	ldr	r0, [r0, #0]
 80067f2:	f7ff bf77 	b.w	80066e4 <_strtol_l.constprop.0>
 80067f6:	bf00      	nop
 80067f8:	2000000c 	.word	0x2000000c

080067fc <__assert_func>:
 80067fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067fe:	4614      	mov	r4, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <__assert_func+0x2c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4605      	mov	r5, r0
 8006808:	68d8      	ldr	r0, [r3, #12]
 800680a:	b14c      	cbz	r4, 8006820 <__assert_func+0x24>
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <__assert_func+0x30>)
 800680e:	9100      	str	r1, [sp, #0]
 8006810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006814:	4906      	ldr	r1, [pc, #24]	; (8006830 <__assert_func+0x34>)
 8006816:	462b      	mov	r3, r5
 8006818:	f000 f80e 	bl	8006838 <fiprintf>
 800681c:	f000 fd34 	bl	8007288 <abort>
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <__assert_func+0x38>)
 8006822:	461c      	mov	r4, r3
 8006824:	e7f3      	b.n	800680e <__assert_func+0x12>
 8006826:	bf00      	nop
 8006828:	2000000c 	.word	0x2000000c
 800682c:	08007d8c 	.word	0x08007d8c
 8006830:	08007d99 	.word	0x08007d99
 8006834:	08007dc7 	.word	0x08007dc7

08006838 <fiprintf>:
 8006838:	b40e      	push	{r1, r2, r3}
 800683a:	b503      	push	{r0, r1, lr}
 800683c:	4601      	mov	r1, r0
 800683e:	ab03      	add	r3, sp, #12
 8006840:	4805      	ldr	r0, [pc, #20]	; (8006858 <fiprintf+0x20>)
 8006842:	f853 2b04 	ldr.w	r2, [r3], #4
 8006846:	6800      	ldr	r0, [r0, #0]
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	f000 f999 	bl	8006b80 <_vfiprintf_r>
 800684e:	b002      	add	sp, #8
 8006850:	f85d eb04 	ldr.w	lr, [sp], #4
 8006854:	b003      	add	sp, #12
 8006856:	4770      	bx	lr
 8006858:	2000000c 	.word	0x2000000c

0800685c <__malloc_lock>:
 800685c:	4801      	ldr	r0, [pc, #4]	; (8006864 <__malloc_lock+0x8>)
 800685e:	f000 bed3 	b.w	8007608 <__retarget_lock_acquire_recursive>
 8006862:	bf00      	nop
 8006864:	200003b0 	.word	0x200003b0

08006868 <__malloc_unlock>:
 8006868:	4801      	ldr	r0, [pc, #4]	; (8006870 <__malloc_unlock+0x8>)
 800686a:	f000 bece 	b.w	800760a <__retarget_lock_release_recursive>
 800686e:	bf00      	nop
 8006870:	200003b0 	.word	0x200003b0

08006874 <__ssputs_r>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	688e      	ldr	r6, [r1, #8]
 800687a:	429e      	cmp	r6, r3
 800687c:	4682      	mov	sl, r0
 800687e:	460c      	mov	r4, r1
 8006880:	4690      	mov	r8, r2
 8006882:	461f      	mov	r7, r3
 8006884:	d838      	bhi.n	80068f8 <__ssputs_r+0x84>
 8006886:	898a      	ldrh	r2, [r1, #12]
 8006888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800688c:	d032      	beq.n	80068f4 <__ssputs_r+0x80>
 800688e:	6825      	ldr	r5, [r4, #0]
 8006890:	6909      	ldr	r1, [r1, #16]
 8006892:	eba5 0901 	sub.w	r9, r5, r1
 8006896:	6965      	ldr	r5, [r4, #20]
 8006898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800689c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068a0:	3301      	adds	r3, #1
 80068a2:	444b      	add	r3, r9
 80068a4:	106d      	asrs	r5, r5, #1
 80068a6:	429d      	cmp	r5, r3
 80068a8:	bf38      	it	cc
 80068aa:	461d      	movcc	r5, r3
 80068ac:	0553      	lsls	r3, r2, #21
 80068ae:	d531      	bpl.n	8006914 <__ssputs_r+0xa0>
 80068b0:	4629      	mov	r1, r5
 80068b2:	f7ff fe03 	bl	80064bc <_malloc_r>
 80068b6:	4606      	mov	r6, r0
 80068b8:	b950      	cbnz	r0, 80068d0 <__ssputs_r+0x5c>
 80068ba:	230c      	movs	r3, #12
 80068bc:	f8ca 3000 	str.w	r3, [sl]
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	6921      	ldr	r1, [r4, #16]
 80068d2:	464a      	mov	r2, r9
 80068d4:	f000 ff00 	bl	80076d8 <memcpy>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e2:	81a3      	strh	r3, [r4, #12]
 80068e4:	6126      	str	r6, [r4, #16]
 80068e6:	6165      	str	r5, [r4, #20]
 80068e8:	444e      	add	r6, r9
 80068ea:	eba5 0509 	sub.w	r5, r5, r9
 80068ee:	6026      	str	r6, [r4, #0]
 80068f0:	60a5      	str	r5, [r4, #8]
 80068f2:	463e      	mov	r6, r7
 80068f4:	42be      	cmp	r6, r7
 80068f6:	d900      	bls.n	80068fa <__ssputs_r+0x86>
 80068f8:	463e      	mov	r6, r7
 80068fa:	6820      	ldr	r0, [r4, #0]
 80068fc:	4632      	mov	r2, r6
 80068fe:	4641      	mov	r1, r8
 8006900:	f000 fef8 	bl	80076f4 <memmove>
 8006904:	68a3      	ldr	r3, [r4, #8]
 8006906:	1b9b      	subs	r3, r3, r6
 8006908:	60a3      	str	r3, [r4, #8]
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	4433      	add	r3, r6
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	2000      	movs	r0, #0
 8006912:	e7db      	b.n	80068cc <__ssputs_r+0x58>
 8006914:	462a      	mov	r2, r5
 8006916:	f000 ff07 	bl	8007728 <_realloc_r>
 800691a:	4606      	mov	r6, r0
 800691c:	2800      	cmp	r0, #0
 800691e:	d1e1      	bne.n	80068e4 <__ssputs_r+0x70>
 8006920:	6921      	ldr	r1, [r4, #16]
 8006922:	4650      	mov	r0, sl
 8006924:	f7ff fd5e 	bl	80063e4 <_free_r>
 8006928:	e7c7      	b.n	80068ba <__ssputs_r+0x46>
	...

0800692c <_svfiprintf_r>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	4698      	mov	r8, r3
 8006932:	898b      	ldrh	r3, [r1, #12]
 8006934:	061b      	lsls	r3, r3, #24
 8006936:	b09d      	sub	sp, #116	; 0x74
 8006938:	4607      	mov	r7, r0
 800693a:	460d      	mov	r5, r1
 800693c:	4614      	mov	r4, r2
 800693e:	d50e      	bpl.n	800695e <_svfiprintf_r+0x32>
 8006940:	690b      	ldr	r3, [r1, #16]
 8006942:	b963      	cbnz	r3, 800695e <_svfiprintf_r+0x32>
 8006944:	2140      	movs	r1, #64	; 0x40
 8006946:	f7ff fdb9 	bl	80064bc <_malloc_r>
 800694a:	6028      	str	r0, [r5, #0]
 800694c:	6128      	str	r0, [r5, #16]
 800694e:	b920      	cbnz	r0, 800695a <_svfiprintf_r+0x2e>
 8006950:	230c      	movs	r3, #12
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	e0d1      	b.n	8006afe <_svfiprintf_r+0x1d2>
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	616b      	str	r3, [r5, #20]
 800695e:	2300      	movs	r3, #0
 8006960:	9309      	str	r3, [sp, #36]	; 0x24
 8006962:	2320      	movs	r3, #32
 8006964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006968:	f8cd 800c 	str.w	r8, [sp, #12]
 800696c:	2330      	movs	r3, #48	; 0x30
 800696e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b18 <_svfiprintf_r+0x1ec>
 8006972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006976:	f04f 0901 	mov.w	r9, #1
 800697a:	4623      	mov	r3, r4
 800697c:	469a      	mov	sl, r3
 800697e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006982:	b10a      	cbz	r2, 8006988 <_svfiprintf_r+0x5c>
 8006984:	2a25      	cmp	r2, #37	; 0x25
 8006986:	d1f9      	bne.n	800697c <_svfiprintf_r+0x50>
 8006988:	ebba 0b04 	subs.w	fp, sl, r4
 800698c:	d00b      	beq.n	80069a6 <_svfiprintf_r+0x7a>
 800698e:	465b      	mov	r3, fp
 8006990:	4622      	mov	r2, r4
 8006992:	4629      	mov	r1, r5
 8006994:	4638      	mov	r0, r7
 8006996:	f7ff ff6d 	bl	8006874 <__ssputs_r>
 800699a:	3001      	adds	r0, #1
 800699c:	f000 80aa 	beq.w	8006af4 <_svfiprintf_r+0x1c8>
 80069a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069a2:	445a      	add	r2, fp
 80069a4:	9209      	str	r2, [sp, #36]	; 0x24
 80069a6:	f89a 3000 	ldrb.w	r3, [sl]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80a2 	beq.w	8006af4 <_svfiprintf_r+0x1c8>
 80069b0:	2300      	movs	r3, #0
 80069b2:	f04f 32ff 	mov.w	r2, #4294967295
 80069b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ba:	f10a 0a01 	add.w	sl, sl, #1
 80069be:	9304      	str	r3, [sp, #16]
 80069c0:	9307      	str	r3, [sp, #28]
 80069c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069c6:	931a      	str	r3, [sp, #104]	; 0x68
 80069c8:	4654      	mov	r4, sl
 80069ca:	2205      	movs	r2, #5
 80069cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d0:	4851      	ldr	r0, [pc, #324]	; (8006b18 <_svfiprintf_r+0x1ec>)
 80069d2:	f7f9 fc15 	bl	8000200 <memchr>
 80069d6:	9a04      	ldr	r2, [sp, #16]
 80069d8:	b9d8      	cbnz	r0, 8006a12 <_svfiprintf_r+0xe6>
 80069da:	06d0      	lsls	r0, r2, #27
 80069dc:	bf44      	itt	mi
 80069de:	2320      	movmi	r3, #32
 80069e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069e4:	0711      	lsls	r1, r2, #28
 80069e6:	bf44      	itt	mi
 80069e8:	232b      	movmi	r3, #43	; 0x2b
 80069ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ee:	f89a 3000 	ldrb.w	r3, [sl]
 80069f2:	2b2a      	cmp	r3, #42	; 0x2a
 80069f4:	d015      	beq.n	8006a22 <_svfiprintf_r+0xf6>
 80069f6:	9a07      	ldr	r2, [sp, #28]
 80069f8:	4654      	mov	r4, sl
 80069fa:	2000      	movs	r0, #0
 80069fc:	f04f 0c0a 	mov.w	ip, #10
 8006a00:	4621      	mov	r1, r4
 8006a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a06:	3b30      	subs	r3, #48	; 0x30
 8006a08:	2b09      	cmp	r3, #9
 8006a0a:	d94e      	bls.n	8006aaa <_svfiprintf_r+0x17e>
 8006a0c:	b1b0      	cbz	r0, 8006a3c <_svfiprintf_r+0x110>
 8006a0e:	9207      	str	r2, [sp, #28]
 8006a10:	e014      	b.n	8006a3c <_svfiprintf_r+0x110>
 8006a12:	eba0 0308 	sub.w	r3, r0, r8
 8006a16:	fa09 f303 	lsl.w	r3, r9, r3
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	9304      	str	r3, [sp, #16]
 8006a1e:	46a2      	mov	sl, r4
 8006a20:	e7d2      	b.n	80069c8 <_svfiprintf_r+0x9c>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	1d19      	adds	r1, r3, #4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	9103      	str	r1, [sp, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfbb      	ittet	lt
 8006a2e:	425b      	neglt	r3, r3
 8006a30:	f042 0202 	orrlt.w	r2, r2, #2
 8006a34:	9307      	strge	r3, [sp, #28]
 8006a36:	9307      	strlt	r3, [sp, #28]
 8006a38:	bfb8      	it	lt
 8006a3a:	9204      	strlt	r2, [sp, #16]
 8006a3c:	7823      	ldrb	r3, [r4, #0]
 8006a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a40:	d10c      	bne.n	8006a5c <_svfiprintf_r+0x130>
 8006a42:	7863      	ldrb	r3, [r4, #1]
 8006a44:	2b2a      	cmp	r3, #42	; 0x2a
 8006a46:	d135      	bne.n	8006ab4 <_svfiprintf_r+0x188>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	1d1a      	adds	r2, r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	9203      	str	r2, [sp, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bfb8      	it	lt
 8006a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a58:	3402      	adds	r4, #2
 8006a5a:	9305      	str	r3, [sp, #20]
 8006a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b28 <_svfiprintf_r+0x1fc>
 8006a60:	7821      	ldrb	r1, [r4, #0]
 8006a62:	2203      	movs	r2, #3
 8006a64:	4650      	mov	r0, sl
 8006a66:	f7f9 fbcb 	bl	8000200 <memchr>
 8006a6a:	b140      	cbz	r0, 8006a7e <_svfiprintf_r+0x152>
 8006a6c:	2340      	movs	r3, #64	; 0x40
 8006a6e:	eba0 000a 	sub.w	r0, r0, sl
 8006a72:	fa03 f000 	lsl.w	r0, r3, r0
 8006a76:	9b04      	ldr	r3, [sp, #16]
 8006a78:	4303      	orrs	r3, r0
 8006a7a:	3401      	adds	r4, #1
 8006a7c:	9304      	str	r3, [sp, #16]
 8006a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a82:	4826      	ldr	r0, [pc, #152]	; (8006b1c <_svfiprintf_r+0x1f0>)
 8006a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a88:	2206      	movs	r2, #6
 8006a8a:	f7f9 fbb9 	bl	8000200 <memchr>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d038      	beq.n	8006b04 <_svfiprintf_r+0x1d8>
 8006a92:	4b23      	ldr	r3, [pc, #140]	; (8006b20 <_svfiprintf_r+0x1f4>)
 8006a94:	bb1b      	cbnz	r3, 8006ade <_svfiprintf_r+0x1b2>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	3307      	adds	r3, #7
 8006a9a:	f023 0307 	bic.w	r3, r3, #7
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	9303      	str	r3, [sp, #12]
 8006aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa4:	4433      	add	r3, r6
 8006aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa8:	e767      	b.n	800697a <_svfiprintf_r+0x4e>
 8006aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aae:	460c      	mov	r4, r1
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	e7a5      	b.n	8006a00 <_svfiprintf_r+0xd4>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	3401      	adds	r4, #1
 8006ab8:	9305      	str	r3, [sp, #20]
 8006aba:	4619      	mov	r1, r3
 8006abc:	f04f 0c0a 	mov.w	ip, #10
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ac6:	3a30      	subs	r2, #48	; 0x30
 8006ac8:	2a09      	cmp	r2, #9
 8006aca:	d903      	bls.n	8006ad4 <_svfiprintf_r+0x1a8>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0c5      	beq.n	8006a5c <_svfiprintf_r+0x130>
 8006ad0:	9105      	str	r1, [sp, #20]
 8006ad2:	e7c3      	b.n	8006a5c <_svfiprintf_r+0x130>
 8006ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ad8:	4604      	mov	r4, r0
 8006ada:	2301      	movs	r3, #1
 8006adc:	e7f0      	b.n	8006ac0 <_svfiprintf_r+0x194>
 8006ade:	ab03      	add	r3, sp, #12
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	462a      	mov	r2, r5
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <_svfiprintf_r+0x1f8>)
 8006ae6:	a904      	add	r1, sp, #16
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f3af 8000 	nop.w
 8006aee:	1c42      	adds	r2, r0, #1
 8006af0:	4606      	mov	r6, r0
 8006af2:	d1d6      	bne.n	8006aa2 <_svfiprintf_r+0x176>
 8006af4:	89ab      	ldrh	r3, [r5, #12]
 8006af6:	065b      	lsls	r3, r3, #25
 8006af8:	f53f af2c 	bmi.w	8006954 <_svfiprintf_r+0x28>
 8006afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006afe:	b01d      	add	sp, #116	; 0x74
 8006b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b04:	ab03      	add	r3, sp, #12
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	462a      	mov	r2, r5
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <_svfiprintf_r+0x1f8>)
 8006b0c:	a904      	add	r1, sp, #16
 8006b0e:	4638      	mov	r0, r7
 8006b10:	f000 f9d4 	bl	8006ebc <_printf_i>
 8006b14:	e7eb      	b.n	8006aee <_svfiprintf_r+0x1c2>
 8006b16:	bf00      	nop
 8006b18:	08007dc8 	.word	0x08007dc8
 8006b1c:	08007dd2 	.word	0x08007dd2
 8006b20:	00000000 	.word	0x00000000
 8006b24:	08006875 	.word	0x08006875
 8006b28:	08007dce 	.word	0x08007dce

08006b2c <__sfputc_r>:
 8006b2c:	6893      	ldr	r3, [r2, #8]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	b410      	push	{r4}
 8006b34:	6093      	str	r3, [r2, #8]
 8006b36:	da08      	bge.n	8006b4a <__sfputc_r+0x1e>
 8006b38:	6994      	ldr	r4, [r2, #24]
 8006b3a:	42a3      	cmp	r3, r4
 8006b3c:	db01      	blt.n	8006b42 <__sfputc_r+0x16>
 8006b3e:	290a      	cmp	r1, #10
 8006b40:	d103      	bne.n	8006b4a <__sfputc_r+0x1e>
 8006b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b46:	f000 badf 	b.w	8007108 <__swbuf_r>
 8006b4a:	6813      	ldr	r3, [r2, #0]
 8006b4c:	1c58      	adds	r0, r3, #1
 8006b4e:	6010      	str	r0, [r2, #0]
 8006b50:	7019      	strb	r1, [r3, #0]
 8006b52:	4608      	mov	r0, r1
 8006b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <__sfputs_r>:
 8006b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	4614      	mov	r4, r2
 8006b62:	18d5      	adds	r5, r2, r3
 8006b64:	42ac      	cmp	r4, r5
 8006b66:	d101      	bne.n	8006b6c <__sfputs_r+0x12>
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e007      	b.n	8006b7c <__sfputs_r+0x22>
 8006b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b70:	463a      	mov	r2, r7
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ffda 	bl	8006b2c <__sfputc_r>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d1f3      	bne.n	8006b64 <__sfputs_r+0xa>
 8006b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b80 <_vfiprintf_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	460d      	mov	r5, r1
 8006b86:	b09d      	sub	sp, #116	; 0x74
 8006b88:	4614      	mov	r4, r2
 8006b8a:	4698      	mov	r8, r3
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	b118      	cbz	r0, 8006b98 <_vfiprintf_r+0x18>
 8006b90:	6983      	ldr	r3, [r0, #24]
 8006b92:	b90b      	cbnz	r3, 8006b98 <_vfiprintf_r+0x18>
 8006b94:	f000 fc9a 	bl	80074cc <__sinit>
 8006b98:	4b89      	ldr	r3, [pc, #548]	; (8006dc0 <_vfiprintf_r+0x240>)
 8006b9a:	429d      	cmp	r5, r3
 8006b9c:	d11b      	bne.n	8006bd6 <_vfiprintf_r+0x56>
 8006b9e:	6875      	ldr	r5, [r6, #4]
 8006ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ba2:	07d9      	lsls	r1, r3, #31
 8006ba4:	d405      	bmi.n	8006bb2 <_vfiprintf_r+0x32>
 8006ba6:	89ab      	ldrh	r3, [r5, #12]
 8006ba8:	059a      	lsls	r2, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_vfiprintf_r+0x32>
 8006bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bae:	f000 fd2b 	bl	8007608 <__retarget_lock_acquire_recursive>
 8006bb2:	89ab      	ldrh	r3, [r5, #12]
 8006bb4:	071b      	lsls	r3, r3, #28
 8006bb6:	d501      	bpl.n	8006bbc <_vfiprintf_r+0x3c>
 8006bb8:	692b      	ldr	r3, [r5, #16]
 8006bba:	b9eb      	cbnz	r3, 8006bf8 <_vfiprintf_r+0x78>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 faf4 	bl	80071ac <__swsetup_r>
 8006bc4:	b1c0      	cbz	r0, 8006bf8 <_vfiprintf_r+0x78>
 8006bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc8:	07dc      	lsls	r4, r3, #31
 8006bca:	d50e      	bpl.n	8006bea <_vfiprintf_r+0x6a>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	b01d      	add	sp, #116	; 0x74
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	4b7b      	ldr	r3, [pc, #492]	; (8006dc4 <_vfiprintf_r+0x244>)
 8006bd8:	429d      	cmp	r5, r3
 8006bda:	d101      	bne.n	8006be0 <_vfiprintf_r+0x60>
 8006bdc:	68b5      	ldr	r5, [r6, #8]
 8006bde:	e7df      	b.n	8006ba0 <_vfiprintf_r+0x20>
 8006be0:	4b79      	ldr	r3, [pc, #484]	; (8006dc8 <_vfiprintf_r+0x248>)
 8006be2:	429d      	cmp	r5, r3
 8006be4:	bf08      	it	eq
 8006be6:	68f5      	ldreq	r5, [r6, #12]
 8006be8:	e7da      	b.n	8006ba0 <_vfiprintf_r+0x20>
 8006bea:	89ab      	ldrh	r3, [r5, #12]
 8006bec:	0598      	lsls	r0, r3, #22
 8006bee:	d4ed      	bmi.n	8006bcc <_vfiprintf_r+0x4c>
 8006bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bf2:	f000 fd0a 	bl	800760a <__retarget_lock_release_recursive>
 8006bf6:	e7e9      	b.n	8006bcc <_vfiprintf_r+0x4c>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c06:	2330      	movs	r3, #48	; 0x30
 8006c08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dcc <_vfiprintf_r+0x24c>
 8006c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c10:	f04f 0901 	mov.w	r9, #1
 8006c14:	4623      	mov	r3, r4
 8006c16:	469a      	mov	sl, r3
 8006c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1c:	b10a      	cbz	r2, 8006c22 <_vfiprintf_r+0xa2>
 8006c1e:	2a25      	cmp	r2, #37	; 0x25
 8006c20:	d1f9      	bne.n	8006c16 <_vfiprintf_r+0x96>
 8006c22:	ebba 0b04 	subs.w	fp, sl, r4
 8006c26:	d00b      	beq.n	8006c40 <_vfiprintf_r+0xc0>
 8006c28:	465b      	mov	r3, fp
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f7ff ff93 	bl	8006b5a <__sfputs_r>
 8006c34:	3001      	adds	r0, #1
 8006c36:	f000 80aa 	beq.w	8006d8e <_vfiprintf_r+0x20e>
 8006c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c3c:	445a      	add	r2, fp
 8006c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c40:	f89a 3000 	ldrb.w	r3, [sl]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80a2 	beq.w	8006d8e <_vfiprintf_r+0x20e>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c54:	f10a 0a01 	add.w	sl, sl, #1
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	9307      	str	r3, [sp, #28]
 8006c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c60:	931a      	str	r3, [sp, #104]	; 0x68
 8006c62:	4654      	mov	r4, sl
 8006c64:	2205      	movs	r2, #5
 8006c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6a:	4858      	ldr	r0, [pc, #352]	; (8006dcc <_vfiprintf_r+0x24c>)
 8006c6c:	f7f9 fac8 	bl	8000200 <memchr>
 8006c70:	9a04      	ldr	r2, [sp, #16]
 8006c72:	b9d8      	cbnz	r0, 8006cac <_vfiprintf_r+0x12c>
 8006c74:	06d1      	lsls	r1, r2, #27
 8006c76:	bf44      	itt	mi
 8006c78:	2320      	movmi	r3, #32
 8006c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c7e:	0713      	lsls	r3, r2, #28
 8006c80:	bf44      	itt	mi
 8006c82:	232b      	movmi	r3, #43	; 0x2b
 8006c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c88:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c8e:	d015      	beq.n	8006cbc <_vfiprintf_r+0x13c>
 8006c90:	9a07      	ldr	r2, [sp, #28]
 8006c92:	4654      	mov	r4, sl
 8006c94:	2000      	movs	r0, #0
 8006c96:	f04f 0c0a 	mov.w	ip, #10
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca0:	3b30      	subs	r3, #48	; 0x30
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d94e      	bls.n	8006d44 <_vfiprintf_r+0x1c4>
 8006ca6:	b1b0      	cbz	r0, 8006cd6 <_vfiprintf_r+0x156>
 8006ca8:	9207      	str	r2, [sp, #28]
 8006caa:	e014      	b.n	8006cd6 <_vfiprintf_r+0x156>
 8006cac:	eba0 0308 	sub.w	r3, r0, r8
 8006cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	9304      	str	r3, [sp, #16]
 8006cb8:	46a2      	mov	sl, r4
 8006cba:	e7d2      	b.n	8006c62 <_vfiprintf_r+0xe2>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	1d19      	adds	r1, r3, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	9103      	str	r1, [sp, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfbb      	ittet	lt
 8006cc8:	425b      	neglt	r3, r3
 8006cca:	f042 0202 	orrlt.w	r2, r2, #2
 8006cce:	9307      	strge	r3, [sp, #28]
 8006cd0:	9307      	strlt	r3, [sp, #28]
 8006cd2:	bfb8      	it	lt
 8006cd4:	9204      	strlt	r2, [sp, #16]
 8006cd6:	7823      	ldrb	r3, [r4, #0]
 8006cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cda:	d10c      	bne.n	8006cf6 <_vfiprintf_r+0x176>
 8006cdc:	7863      	ldrb	r3, [r4, #1]
 8006cde:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce0:	d135      	bne.n	8006d4e <_vfiprintf_r+0x1ce>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	1d1a      	adds	r2, r3, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	9203      	str	r2, [sp, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfb8      	it	lt
 8006cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cf2:	3402      	adds	r4, #2
 8006cf4:	9305      	str	r3, [sp, #20]
 8006cf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ddc <_vfiprintf_r+0x25c>
 8006cfa:	7821      	ldrb	r1, [r4, #0]
 8006cfc:	2203      	movs	r2, #3
 8006cfe:	4650      	mov	r0, sl
 8006d00:	f7f9 fa7e 	bl	8000200 <memchr>
 8006d04:	b140      	cbz	r0, 8006d18 <_vfiprintf_r+0x198>
 8006d06:	2340      	movs	r3, #64	; 0x40
 8006d08:	eba0 000a 	sub.w	r0, r0, sl
 8006d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d10:	9b04      	ldr	r3, [sp, #16]
 8006d12:	4303      	orrs	r3, r0
 8006d14:	3401      	adds	r4, #1
 8006d16:	9304      	str	r3, [sp, #16]
 8006d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1c:	482c      	ldr	r0, [pc, #176]	; (8006dd0 <_vfiprintf_r+0x250>)
 8006d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d22:	2206      	movs	r2, #6
 8006d24:	f7f9 fa6c 	bl	8000200 <memchr>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d03f      	beq.n	8006dac <_vfiprintf_r+0x22c>
 8006d2c:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <_vfiprintf_r+0x254>)
 8006d2e:	bb1b      	cbnz	r3, 8006d78 <_vfiprintf_r+0x1f8>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	3307      	adds	r3, #7
 8006d34:	f023 0307 	bic.w	r3, r3, #7
 8006d38:	3308      	adds	r3, #8
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3e:	443b      	add	r3, r7
 8006d40:	9309      	str	r3, [sp, #36]	; 0x24
 8006d42:	e767      	b.n	8006c14 <_vfiprintf_r+0x94>
 8006d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d48:	460c      	mov	r4, r1
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	e7a5      	b.n	8006c9a <_vfiprintf_r+0x11a>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	3401      	adds	r4, #1
 8006d52:	9305      	str	r3, [sp, #20]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f04f 0c0a 	mov.w	ip, #10
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d60:	3a30      	subs	r2, #48	; 0x30
 8006d62:	2a09      	cmp	r2, #9
 8006d64:	d903      	bls.n	8006d6e <_vfiprintf_r+0x1ee>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0c5      	beq.n	8006cf6 <_vfiprintf_r+0x176>
 8006d6a:	9105      	str	r1, [sp, #20]
 8006d6c:	e7c3      	b.n	8006cf6 <_vfiprintf_r+0x176>
 8006d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d72:	4604      	mov	r4, r0
 8006d74:	2301      	movs	r3, #1
 8006d76:	e7f0      	b.n	8006d5a <_vfiprintf_r+0x1da>
 8006d78:	ab03      	add	r3, sp, #12
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <_vfiprintf_r+0x258>)
 8006d80:	a904      	add	r1, sp, #16
 8006d82:	4630      	mov	r0, r6
 8006d84:	f3af 8000 	nop.w
 8006d88:	4607      	mov	r7, r0
 8006d8a:	1c78      	adds	r0, r7, #1
 8006d8c:	d1d6      	bne.n	8006d3c <_vfiprintf_r+0x1bc>
 8006d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d90:	07d9      	lsls	r1, r3, #31
 8006d92:	d405      	bmi.n	8006da0 <_vfiprintf_r+0x220>
 8006d94:	89ab      	ldrh	r3, [r5, #12]
 8006d96:	059a      	lsls	r2, r3, #22
 8006d98:	d402      	bmi.n	8006da0 <_vfiprintf_r+0x220>
 8006d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d9c:	f000 fc35 	bl	800760a <__retarget_lock_release_recursive>
 8006da0:	89ab      	ldrh	r3, [r5, #12]
 8006da2:	065b      	lsls	r3, r3, #25
 8006da4:	f53f af12 	bmi.w	8006bcc <_vfiprintf_r+0x4c>
 8006da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006daa:	e711      	b.n	8006bd0 <_vfiprintf_r+0x50>
 8006dac:	ab03      	add	r3, sp, #12
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	462a      	mov	r2, r5
 8006db2:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <_vfiprintf_r+0x258>)
 8006db4:	a904      	add	r1, sp, #16
 8006db6:	4630      	mov	r0, r6
 8006db8:	f000 f880 	bl	8006ebc <_printf_i>
 8006dbc:	e7e4      	b.n	8006d88 <_vfiprintf_r+0x208>
 8006dbe:	bf00      	nop
 8006dc0:	08007e1c 	.word	0x08007e1c
 8006dc4:	08007e3c 	.word	0x08007e3c
 8006dc8:	08007dfc 	.word	0x08007dfc
 8006dcc:	08007dc8 	.word	0x08007dc8
 8006dd0:	08007dd2 	.word	0x08007dd2
 8006dd4:	00000000 	.word	0x00000000
 8006dd8:	08006b5b 	.word	0x08006b5b
 8006ddc:	08007dce 	.word	0x08007dce

08006de0 <_printf_common>:
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	4616      	mov	r6, r2
 8006de6:	4699      	mov	r9, r3
 8006de8:	688a      	ldr	r2, [r1, #8]
 8006dea:	690b      	ldr	r3, [r1, #16]
 8006dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df0:	4293      	cmp	r3, r2
 8006df2:	bfb8      	it	lt
 8006df4:	4613      	movlt	r3, r2
 8006df6:	6033      	str	r3, [r6, #0]
 8006df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	b10a      	cbz	r2, 8006e06 <_printf_common+0x26>
 8006e02:	3301      	adds	r3, #1
 8006e04:	6033      	str	r3, [r6, #0]
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	0699      	lsls	r1, r3, #26
 8006e0a:	bf42      	ittt	mi
 8006e0c:	6833      	ldrmi	r3, [r6, #0]
 8006e0e:	3302      	addmi	r3, #2
 8006e10:	6033      	strmi	r3, [r6, #0]
 8006e12:	6825      	ldr	r5, [r4, #0]
 8006e14:	f015 0506 	ands.w	r5, r5, #6
 8006e18:	d106      	bne.n	8006e28 <_printf_common+0x48>
 8006e1a:	f104 0a19 	add.w	sl, r4, #25
 8006e1e:	68e3      	ldr	r3, [r4, #12]
 8006e20:	6832      	ldr	r2, [r6, #0]
 8006e22:	1a9b      	subs	r3, r3, r2
 8006e24:	42ab      	cmp	r3, r5
 8006e26:	dc26      	bgt.n	8006e76 <_printf_common+0x96>
 8006e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e2c:	1e13      	subs	r3, r2, #0
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	bf18      	it	ne
 8006e32:	2301      	movne	r3, #1
 8006e34:	0692      	lsls	r2, r2, #26
 8006e36:	d42b      	bmi.n	8006e90 <_printf_common+0xb0>
 8006e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	4638      	mov	r0, r7
 8006e40:	47c0      	blx	r8
 8006e42:	3001      	adds	r0, #1
 8006e44:	d01e      	beq.n	8006e84 <_printf_common+0xa4>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	68e5      	ldr	r5, [r4, #12]
 8006e4a:	6832      	ldr	r2, [r6, #0]
 8006e4c:	f003 0306 	and.w	r3, r3, #6
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	bf08      	it	eq
 8006e54:	1aad      	subeq	r5, r5, r2
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	6922      	ldr	r2, [r4, #16]
 8006e5a:	bf0c      	ite	eq
 8006e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e60:	2500      	movne	r5, #0
 8006e62:	4293      	cmp	r3, r2
 8006e64:	bfc4      	itt	gt
 8006e66:	1a9b      	subgt	r3, r3, r2
 8006e68:	18ed      	addgt	r5, r5, r3
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	341a      	adds	r4, #26
 8006e6e:	42b5      	cmp	r5, r6
 8006e70:	d11a      	bne.n	8006ea8 <_printf_common+0xc8>
 8006e72:	2000      	movs	r0, #0
 8006e74:	e008      	b.n	8006e88 <_printf_common+0xa8>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4652      	mov	r2, sl
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	47c0      	blx	r8
 8006e80:	3001      	adds	r0, #1
 8006e82:	d103      	bne.n	8006e8c <_printf_common+0xac>
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	e7c6      	b.n	8006e1e <_printf_common+0x3e>
 8006e90:	18e1      	adds	r1, r4, r3
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	2030      	movs	r0, #48	; 0x30
 8006e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e9a:	4422      	add	r2, r4
 8006e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ea4:	3302      	adds	r3, #2
 8006ea6:	e7c7      	b.n	8006e38 <_printf_common+0x58>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4622      	mov	r2, r4
 8006eac:	4649      	mov	r1, r9
 8006eae:	4638      	mov	r0, r7
 8006eb0:	47c0      	blx	r8
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d0e6      	beq.n	8006e84 <_printf_common+0xa4>
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7d9      	b.n	8006e6e <_printf_common+0x8e>
	...

08006ebc <_printf_i>:
 8006ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec0:	7e0f      	ldrb	r7, [r1, #24]
 8006ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ec4:	2f78      	cmp	r7, #120	; 0x78
 8006ec6:	4691      	mov	r9, r2
 8006ec8:	4680      	mov	r8, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	469a      	mov	sl, r3
 8006ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ed2:	d807      	bhi.n	8006ee4 <_printf_i+0x28>
 8006ed4:	2f62      	cmp	r7, #98	; 0x62
 8006ed6:	d80a      	bhi.n	8006eee <_printf_i+0x32>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	f000 80d8 	beq.w	800708e <_printf_i+0x1d2>
 8006ede:	2f58      	cmp	r7, #88	; 0x58
 8006ee0:	f000 80a3 	beq.w	800702a <_printf_i+0x16e>
 8006ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006eec:	e03a      	b.n	8006f64 <_printf_i+0xa8>
 8006eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ef2:	2b15      	cmp	r3, #21
 8006ef4:	d8f6      	bhi.n	8006ee4 <_printf_i+0x28>
 8006ef6:	a101      	add	r1, pc, #4	; (adr r1, 8006efc <_printf_i+0x40>)
 8006ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006efc:	08006f55 	.word	0x08006f55
 8006f00:	08006f69 	.word	0x08006f69
 8006f04:	08006ee5 	.word	0x08006ee5
 8006f08:	08006ee5 	.word	0x08006ee5
 8006f0c:	08006ee5 	.word	0x08006ee5
 8006f10:	08006ee5 	.word	0x08006ee5
 8006f14:	08006f69 	.word	0x08006f69
 8006f18:	08006ee5 	.word	0x08006ee5
 8006f1c:	08006ee5 	.word	0x08006ee5
 8006f20:	08006ee5 	.word	0x08006ee5
 8006f24:	08006ee5 	.word	0x08006ee5
 8006f28:	08007075 	.word	0x08007075
 8006f2c:	08006f99 	.word	0x08006f99
 8006f30:	08007057 	.word	0x08007057
 8006f34:	08006ee5 	.word	0x08006ee5
 8006f38:	08006ee5 	.word	0x08006ee5
 8006f3c:	08007097 	.word	0x08007097
 8006f40:	08006ee5 	.word	0x08006ee5
 8006f44:	08006f99 	.word	0x08006f99
 8006f48:	08006ee5 	.word	0x08006ee5
 8006f4c:	08006ee5 	.word	0x08006ee5
 8006f50:	0800705f 	.word	0x0800705f
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	1d1a      	adds	r2, r3, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	602a      	str	r2, [r5, #0]
 8006f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0a3      	b.n	80070b0 <_printf_i+0x1f4>
 8006f68:	6820      	ldr	r0, [r4, #0]
 8006f6a:	6829      	ldr	r1, [r5, #0]
 8006f6c:	0606      	lsls	r6, r0, #24
 8006f6e:	f101 0304 	add.w	r3, r1, #4
 8006f72:	d50a      	bpl.n	8006f8a <_printf_i+0xce>
 8006f74:	680e      	ldr	r6, [r1, #0]
 8006f76:	602b      	str	r3, [r5, #0]
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	da03      	bge.n	8006f84 <_printf_i+0xc8>
 8006f7c:	232d      	movs	r3, #45	; 0x2d
 8006f7e:	4276      	negs	r6, r6
 8006f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f84:	485e      	ldr	r0, [pc, #376]	; (8007100 <_printf_i+0x244>)
 8006f86:	230a      	movs	r3, #10
 8006f88:	e019      	b.n	8006fbe <_printf_i+0x102>
 8006f8a:	680e      	ldr	r6, [r1, #0]
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f92:	bf18      	it	ne
 8006f94:	b236      	sxthne	r6, r6
 8006f96:	e7ef      	b.n	8006f78 <_printf_i+0xbc>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	6820      	ldr	r0, [r4, #0]
 8006f9c:	1d19      	adds	r1, r3, #4
 8006f9e:	6029      	str	r1, [r5, #0]
 8006fa0:	0601      	lsls	r1, r0, #24
 8006fa2:	d501      	bpl.n	8006fa8 <_printf_i+0xec>
 8006fa4:	681e      	ldr	r6, [r3, #0]
 8006fa6:	e002      	b.n	8006fae <_printf_i+0xf2>
 8006fa8:	0646      	lsls	r6, r0, #25
 8006faa:	d5fb      	bpl.n	8006fa4 <_printf_i+0xe8>
 8006fac:	881e      	ldrh	r6, [r3, #0]
 8006fae:	4854      	ldr	r0, [pc, #336]	; (8007100 <_printf_i+0x244>)
 8006fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2308      	moveq	r3, #8
 8006fb6:	230a      	movne	r3, #10
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fbe:	6865      	ldr	r5, [r4, #4]
 8006fc0:	60a5      	str	r5, [r4, #8]
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	bfa2      	ittt	ge
 8006fc6:	6821      	ldrge	r1, [r4, #0]
 8006fc8:	f021 0104 	bicge.w	r1, r1, #4
 8006fcc:	6021      	strge	r1, [r4, #0]
 8006fce:	b90e      	cbnz	r6, 8006fd4 <_printf_i+0x118>
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	d04d      	beq.n	8007070 <_printf_i+0x1b4>
 8006fd4:	4615      	mov	r5, r2
 8006fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fda:	fb03 6711 	mls	r7, r3, r1, r6
 8006fde:	5dc7      	ldrb	r7, [r0, r7]
 8006fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fe4:	4637      	mov	r7, r6
 8006fe6:	42bb      	cmp	r3, r7
 8006fe8:	460e      	mov	r6, r1
 8006fea:	d9f4      	bls.n	8006fd6 <_printf_i+0x11a>
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d10b      	bne.n	8007008 <_printf_i+0x14c>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	07de      	lsls	r6, r3, #31
 8006ff4:	d508      	bpl.n	8007008 <_printf_i+0x14c>
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	6861      	ldr	r1, [r4, #4]
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	bfde      	ittt	le
 8006ffe:	2330      	movle	r3, #48	; 0x30
 8007000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007004:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007008:	1b52      	subs	r2, r2, r5
 800700a:	6122      	str	r2, [r4, #16]
 800700c:	f8cd a000 	str.w	sl, [sp]
 8007010:	464b      	mov	r3, r9
 8007012:	aa03      	add	r2, sp, #12
 8007014:	4621      	mov	r1, r4
 8007016:	4640      	mov	r0, r8
 8007018:	f7ff fee2 	bl	8006de0 <_printf_common>
 800701c:	3001      	adds	r0, #1
 800701e:	d14c      	bne.n	80070ba <_printf_i+0x1fe>
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	b004      	add	sp, #16
 8007026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702a:	4835      	ldr	r0, [pc, #212]	; (8007100 <_printf_i+0x244>)
 800702c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007030:	6829      	ldr	r1, [r5, #0]
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	f851 6b04 	ldr.w	r6, [r1], #4
 8007038:	6029      	str	r1, [r5, #0]
 800703a:	061d      	lsls	r5, r3, #24
 800703c:	d514      	bpl.n	8007068 <_printf_i+0x1ac>
 800703e:	07df      	lsls	r7, r3, #31
 8007040:	bf44      	itt	mi
 8007042:	f043 0320 	orrmi.w	r3, r3, #32
 8007046:	6023      	strmi	r3, [r4, #0]
 8007048:	b91e      	cbnz	r6, 8007052 <_printf_i+0x196>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	f023 0320 	bic.w	r3, r3, #32
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	2310      	movs	r3, #16
 8007054:	e7b0      	b.n	8006fb8 <_printf_i+0xfc>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f043 0320 	orr.w	r3, r3, #32
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	2378      	movs	r3, #120	; 0x78
 8007060:	4828      	ldr	r0, [pc, #160]	; (8007104 <_printf_i+0x248>)
 8007062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007066:	e7e3      	b.n	8007030 <_printf_i+0x174>
 8007068:	0659      	lsls	r1, r3, #25
 800706a:	bf48      	it	mi
 800706c:	b2b6      	uxthmi	r6, r6
 800706e:	e7e6      	b.n	800703e <_printf_i+0x182>
 8007070:	4615      	mov	r5, r2
 8007072:	e7bb      	b.n	8006fec <_printf_i+0x130>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	6826      	ldr	r6, [r4, #0]
 8007078:	6961      	ldr	r1, [r4, #20]
 800707a:	1d18      	adds	r0, r3, #4
 800707c:	6028      	str	r0, [r5, #0]
 800707e:	0635      	lsls	r5, r6, #24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	d501      	bpl.n	8007088 <_printf_i+0x1cc>
 8007084:	6019      	str	r1, [r3, #0]
 8007086:	e002      	b.n	800708e <_printf_i+0x1d2>
 8007088:	0670      	lsls	r0, r6, #25
 800708a:	d5fb      	bpl.n	8007084 <_printf_i+0x1c8>
 800708c:	8019      	strh	r1, [r3, #0]
 800708e:	2300      	movs	r3, #0
 8007090:	6123      	str	r3, [r4, #16]
 8007092:	4615      	mov	r5, r2
 8007094:	e7ba      	b.n	800700c <_printf_i+0x150>
 8007096:	682b      	ldr	r3, [r5, #0]
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	602a      	str	r2, [r5, #0]
 800709c:	681d      	ldr	r5, [r3, #0]
 800709e:	6862      	ldr	r2, [r4, #4]
 80070a0:	2100      	movs	r1, #0
 80070a2:	4628      	mov	r0, r5
 80070a4:	f7f9 f8ac 	bl	8000200 <memchr>
 80070a8:	b108      	cbz	r0, 80070ae <_printf_i+0x1f2>
 80070aa:	1b40      	subs	r0, r0, r5
 80070ac:	6060      	str	r0, [r4, #4]
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	2300      	movs	r3, #0
 80070b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b8:	e7a8      	b.n	800700c <_printf_i+0x150>
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	462a      	mov	r2, r5
 80070be:	4649      	mov	r1, r9
 80070c0:	4640      	mov	r0, r8
 80070c2:	47d0      	blx	sl
 80070c4:	3001      	adds	r0, #1
 80070c6:	d0ab      	beq.n	8007020 <_printf_i+0x164>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	079b      	lsls	r3, r3, #30
 80070cc:	d413      	bmi.n	80070f6 <_printf_i+0x23a>
 80070ce:	68e0      	ldr	r0, [r4, #12]
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	4298      	cmp	r0, r3
 80070d4:	bfb8      	it	lt
 80070d6:	4618      	movlt	r0, r3
 80070d8:	e7a4      	b.n	8007024 <_printf_i+0x168>
 80070da:	2301      	movs	r3, #1
 80070dc:	4632      	mov	r2, r6
 80070de:	4649      	mov	r1, r9
 80070e0:	4640      	mov	r0, r8
 80070e2:	47d0      	blx	sl
 80070e4:	3001      	adds	r0, #1
 80070e6:	d09b      	beq.n	8007020 <_printf_i+0x164>
 80070e8:	3501      	adds	r5, #1
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	9903      	ldr	r1, [sp, #12]
 80070ee:	1a5b      	subs	r3, r3, r1
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dcf2      	bgt.n	80070da <_printf_i+0x21e>
 80070f4:	e7eb      	b.n	80070ce <_printf_i+0x212>
 80070f6:	2500      	movs	r5, #0
 80070f8:	f104 0619 	add.w	r6, r4, #25
 80070fc:	e7f5      	b.n	80070ea <_printf_i+0x22e>
 80070fe:	bf00      	nop
 8007100:	08007dd9 	.word	0x08007dd9
 8007104:	08007dea 	.word	0x08007dea

08007108 <__swbuf_r>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	460e      	mov	r6, r1
 800710c:	4614      	mov	r4, r2
 800710e:	4605      	mov	r5, r0
 8007110:	b118      	cbz	r0, 800711a <__swbuf_r+0x12>
 8007112:	6983      	ldr	r3, [r0, #24]
 8007114:	b90b      	cbnz	r3, 800711a <__swbuf_r+0x12>
 8007116:	f000 f9d9 	bl	80074cc <__sinit>
 800711a:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <__swbuf_r+0x98>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d12b      	bne.n	8007178 <__swbuf_r+0x70>
 8007120:	686c      	ldr	r4, [r5, #4]
 8007122:	69a3      	ldr	r3, [r4, #24]
 8007124:	60a3      	str	r3, [r4, #8]
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	071a      	lsls	r2, r3, #28
 800712a:	d52f      	bpl.n	800718c <__swbuf_r+0x84>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	b36b      	cbz	r3, 800718c <__swbuf_r+0x84>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	6820      	ldr	r0, [r4, #0]
 8007134:	1ac0      	subs	r0, r0, r3
 8007136:	6963      	ldr	r3, [r4, #20]
 8007138:	b2f6      	uxtb	r6, r6
 800713a:	4283      	cmp	r3, r0
 800713c:	4637      	mov	r7, r6
 800713e:	dc04      	bgt.n	800714a <__swbuf_r+0x42>
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f92e 	bl	80073a4 <_fflush_r>
 8007148:	bb30      	cbnz	r0, 8007198 <__swbuf_r+0x90>
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	3b01      	subs	r3, #1
 800714e:	60a3      	str	r3, [r4, #8]
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	6022      	str	r2, [r4, #0]
 8007156:	701e      	strb	r6, [r3, #0]
 8007158:	6963      	ldr	r3, [r4, #20]
 800715a:	3001      	adds	r0, #1
 800715c:	4283      	cmp	r3, r0
 800715e:	d004      	beq.n	800716a <__swbuf_r+0x62>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	07db      	lsls	r3, r3, #31
 8007164:	d506      	bpl.n	8007174 <__swbuf_r+0x6c>
 8007166:	2e0a      	cmp	r6, #10
 8007168:	d104      	bne.n	8007174 <__swbuf_r+0x6c>
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 f919 	bl	80073a4 <_fflush_r>
 8007172:	b988      	cbnz	r0, 8007198 <__swbuf_r+0x90>
 8007174:	4638      	mov	r0, r7
 8007176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <__swbuf_r+0x9c>)
 800717a:	429c      	cmp	r4, r3
 800717c:	d101      	bne.n	8007182 <__swbuf_r+0x7a>
 800717e:	68ac      	ldr	r4, [r5, #8]
 8007180:	e7cf      	b.n	8007122 <__swbuf_r+0x1a>
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <__swbuf_r+0xa0>)
 8007184:	429c      	cmp	r4, r3
 8007186:	bf08      	it	eq
 8007188:	68ec      	ldreq	r4, [r5, #12]
 800718a:	e7ca      	b.n	8007122 <__swbuf_r+0x1a>
 800718c:	4621      	mov	r1, r4
 800718e:	4628      	mov	r0, r5
 8007190:	f000 f80c 	bl	80071ac <__swsetup_r>
 8007194:	2800      	cmp	r0, #0
 8007196:	d0cb      	beq.n	8007130 <__swbuf_r+0x28>
 8007198:	f04f 37ff 	mov.w	r7, #4294967295
 800719c:	e7ea      	b.n	8007174 <__swbuf_r+0x6c>
 800719e:	bf00      	nop
 80071a0:	08007e1c 	.word	0x08007e1c
 80071a4:	08007e3c 	.word	0x08007e3c
 80071a8:	08007dfc 	.word	0x08007dfc

080071ac <__swsetup_r>:
 80071ac:	4b32      	ldr	r3, [pc, #200]	; (8007278 <__swsetup_r+0xcc>)
 80071ae:	b570      	push	{r4, r5, r6, lr}
 80071b0:	681d      	ldr	r5, [r3, #0]
 80071b2:	4606      	mov	r6, r0
 80071b4:	460c      	mov	r4, r1
 80071b6:	b125      	cbz	r5, 80071c2 <__swsetup_r+0x16>
 80071b8:	69ab      	ldr	r3, [r5, #24]
 80071ba:	b913      	cbnz	r3, 80071c2 <__swsetup_r+0x16>
 80071bc:	4628      	mov	r0, r5
 80071be:	f000 f985 	bl	80074cc <__sinit>
 80071c2:	4b2e      	ldr	r3, [pc, #184]	; (800727c <__swsetup_r+0xd0>)
 80071c4:	429c      	cmp	r4, r3
 80071c6:	d10f      	bne.n	80071e8 <__swsetup_r+0x3c>
 80071c8:	686c      	ldr	r4, [r5, #4]
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071d0:	0719      	lsls	r1, r3, #28
 80071d2:	d42c      	bmi.n	800722e <__swsetup_r+0x82>
 80071d4:	06dd      	lsls	r5, r3, #27
 80071d6:	d411      	bmi.n	80071fc <__swsetup_r+0x50>
 80071d8:	2309      	movs	r3, #9
 80071da:	6033      	str	r3, [r6, #0]
 80071dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	f04f 30ff 	mov.w	r0, #4294967295
 80071e6:	e03e      	b.n	8007266 <__swsetup_r+0xba>
 80071e8:	4b25      	ldr	r3, [pc, #148]	; (8007280 <__swsetup_r+0xd4>)
 80071ea:	429c      	cmp	r4, r3
 80071ec:	d101      	bne.n	80071f2 <__swsetup_r+0x46>
 80071ee:	68ac      	ldr	r4, [r5, #8]
 80071f0:	e7eb      	b.n	80071ca <__swsetup_r+0x1e>
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <__swsetup_r+0xd8>)
 80071f4:	429c      	cmp	r4, r3
 80071f6:	bf08      	it	eq
 80071f8:	68ec      	ldreq	r4, [r5, #12]
 80071fa:	e7e6      	b.n	80071ca <__swsetup_r+0x1e>
 80071fc:	0758      	lsls	r0, r3, #29
 80071fe:	d512      	bpl.n	8007226 <__swsetup_r+0x7a>
 8007200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007202:	b141      	cbz	r1, 8007216 <__swsetup_r+0x6a>
 8007204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007208:	4299      	cmp	r1, r3
 800720a:	d002      	beq.n	8007212 <__swsetup_r+0x66>
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff f8e9 	bl	80063e4 <_free_r>
 8007212:	2300      	movs	r3, #0
 8007214:	6363      	str	r3, [r4, #52]	; 0x34
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	2300      	movs	r3, #0
 8007220:	6063      	str	r3, [r4, #4]
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f043 0308 	orr.w	r3, r3, #8
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	b94b      	cbnz	r3, 8007246 <__swsetup_r+0x9a>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723c:	d003      	beq.n	8007246 <__swsetup_r+0x9a>
 800723e:	4621      	mov	r1, r4
 8007240:	4630      	mov	r0, r6
 8007242:	f000 fa09 	bl	8007658 <__smakebuf_r>
 8007246:	89a0      	ldrh	r0, [r4, #12]
 8007248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800724c:	f010 0301 	ands.w	r3, r0, #1
 8007250:	d00a      	beq.n	8007268 <__swsetup_r+0xbc>
 8007252:	2300      	movs	r3, #0
 8007254:	60a3      	str	r3, [r4, #8]
 8007256:	6963      	ldr	r3, [r4, #20]
 8007258:	425b      	negs	r3, r3
 800725a:	61a3      	str	r3, [r4, #24]
 800725c:	6923      	ldr	r3, [r4, #16]
 800725e:	b943      	cbnz	r3, 8007272 <__swsetup_r+0xc6>
 8007260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007264:	d1ba      	bne.n	80071dc <__swsetup_r+0x30>
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	0781      	lsls	r1, r0, #30
 800726a:	bf58      	it	pl
 800726c:	6963      	ldrpl	r3, [r4, #20]
 800726e:	60a3      	str	r3, [r4, #8]
 8007270:	e7f4      	b.n	800725c <__swsetup_r+0xb0>
 8007272:	2000      	movs	r0, #0
 8007274:	e7f7      	b.n	8007266 <__swsetup_r+0xba>
 8007276:	bf00      	nop
 8007278:	2000000c 	.word	0x2000000c
 800727c:	08007e1c 	.word	0x08007e1c
 8007280:	08007e3c 	.word	0x08007e3c
 8007284:	08007dfc 	.word	0x08007dfc

08007288 <abort>:
 8007288:	b508      	push	{r3, lr}
 800728a:	2006      	movs	r0, #6
 800728c:	f000 faa4 	bl	80077d8 <raise>
 8007290:	2001      	movs	r0, #1
 8007292:	f7fa f9a7 	bl	80015e4 <_exit>
	...

08007298 <__sflush_r>:
 8007298:	898a      	ldrh	r2, [r1, #12]
 800729a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729e:	4605      	mov	r5, r0
 80072a0:	0710      	lsls	r0, r2, #28
 80072a2:	460c      	mov	r4, r1
 80072a4:	d458      	bmi.n	8007358 <__sflush_r+0xc0>
 80072a6:	684b      	ldr	r3, [r1, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	dc05      	bgt.n	80072b8 <__sflush_r+0x20>
 80072ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	dc02      	bgt.n	80072b8 <__sflush_r+0x20>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ba:	2e00      	cmp	r6, #0
 80072bc:	d0f9      	beq.n	80072b2 <__sflush_r+0x1a>
 80072be:	2300      	movs	r3, #0
 80072c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072c4:	682f      	ldr	r7, [r5, #0]
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	d032      	beq.n	8007330 <__sflush_r+0x98>
 80072ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	075a      	lsls	r2, r3, #29
 80072d0:	d505      	bpl.n	80072de <__sflush_r+0x46>
 80072d2:	6863      	ldr	r3, [r4, #4]
 80072d4:	1ac0      	subs	r0, r0, r3
 80072d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072d8:	b10b      	cbz	r3, 80072de <__sflush_r+0x46>
 80072da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072dc:	1ac0      	subs	r0, r0, r3
 80072de:	2300      	movs	r3, #0
 80072e0:	4602      	mov	r2, r0
 80072e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072e4:	6a21      	ldr	r1, [r4, #32]
 80072e6:	4628      	mov	r0, r5
 80072e8:	47b0      	blx	r6
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	d106      	bne.n	80072fe <__sflush_r+0x66>
 80072f0:	6829      	ldr	r1, [r5, #0]
 80072f2:	291d      	cmp	r1, #29
 80072f4:	d82c      	bhi.n	8007350 <__sflush_r+0xb8>
 80072f6:	4a2a      	ldr	r2, [pc, #168]	; (80073a0 <__sflush_r+0x108>)
 80072f8:	40ca      	lsrs	r2, r1
 80072fa:	07d6      	lsls	r6, r2, #31
 80072fc:	d528      	bpl.n	8007350 <__sflush_r+0xb8>
 80072fe:	2200      	movs	r2, #0
 8007300:	6062      	str	r2, [r4, #4]
 8007302:	04d9      	lsls	r1, r3, #19
 8007304:	6922      	ldr	r2, [r4, #16]
 8007306:	6022      	str	r2, [r4, #0]
 8007308:	d504      	bpl.n	8007314 <__sflush_r+0x7c>
 800730a:	1c42      	adds	r2, r0, #1
 800730c:	d101      	bne.n	8007312 <__sflush_r+0x7a>
 800730e:	682b      	ldr	r3, [r5, #0]
 8007310:	b903      	cbnz	r3, 8007314 <__sflush_r+0x7c>
 8007312:	6560      	str	r0, [r4, #84]	; 0x54
 8007314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007316:	602f      	str	r7, [r5, #0]
 8007318:	2900      	cmp	r1, #0
 800731a:	d0ca      	beq.n	80072b2 <__sflush_r+0x1a>
 800731c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007320:	4299      	cmp	r1, r3
 8007322:	d002      	beq.n	800732a <__sflush_r+0x92>
 8007324:	4628      	mov	r0, r5
 8007326:	f7ff f85d 	bl	80063e4 <_free_r>
 800732a:	2000      	movs	r0, #0
 800732c:	6360      	str	r0, [r4, #52]	; 0x34
 800732e:	e7c1      	b.n	80072b4 <__sflush_r+0x1c>
 8007330:	6a21      	ldr	r1, [r4, #32]
 8007332:	2301      	movs	r3, #1
 8007334:	4628      	mov	r0, r5
 8007336:	47b0      	blx	r6
 8007338:	1c41      	adds	r1, r0, #1
 800733a:	d1c7      	bne.n	80072cc <__sflush_r+0x34>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0c4      	beq.n	80072cc <__sflush_r+0x34>
 8007342:	2b1d      	cmp	r3, #29
 8007344:	d001      	beq.n	800734a <__sflush_r+0xb2>
 8007346:	2b16      	cmp	r3, #22
 8007348:	d101      	bne.n	800734e <__sflush_r+0xb6>
 800734a:	602f      	str	r7, [r5, #0]
 800734c:	e7b1      	b.n	80072b2 <__sflush_r+0x1a>
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	e7ad      	b.n	80072b4 <__sflush_r+0x1c>
 8007358:	690f      	ldr	r7, [r1, #16]
 800735a:	2f00      	cmp	r7, #0
 800735c:	d0a9      	beq.n	80072b2 <__sflush_r+0x1a>
 800735e:	0793      	lsls	r3, r2, #30
 8007360:	680e      	ldr	r6, [r1, #0]
 8007362:	bf08      	it	eq
 8007364:	694b      	ldreq	r3, [r1, #20]
 8007366:	600f      	str	r7, [r1, #0]
 8007368:	bf18      	it	ne
 800736a:	2300      	movne	r3, #0
 800736c:	eba6 0807 	sub.w	r8, r6, r7
 8007370:	608b      	str	r3, [r1, #8]
 8007372:	f1b8 0f00 	cmp.w	r8, #0
 8007376:	dd9c      	ble.n	80072b2 <__sflush_r+0x1a>
 8007378:	6a21      	ldr	r1, [r4, #32]
 800737a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800737c:	4643      	mov	r3, r8
 800737e:	463a      	mov	r2, r7
 8007380:	4628      	mov	r0, r5
 8007382:	47b0      	blx	r6
 8007384:	2800      	cmp	r0, #0
 8007386:	dc06      	bgt.n	8007396 <__sflush_r+0xfe>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	e78e      	b.n	80072b4 <__sflush_r+0x1c>
 8007396:	4407      	add	r7, r0
 8007398:	eba8 0800 	sub.w	r8, r8, r0
 800739c:	e7e9      	b.n	8007372 <__sflush_r+0xda>
 800739e:	bf00      	nop
 80073a0:	20400001 	.word	0x20400001

080073a4 <_fflush_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	690b      	ldr	r3, [r1, #16]
 80073a8:	4605      	mov	r5, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	b913      	cbnz	r3, 80073b4 <_fflush_r+0x10>
 80073ae:	2500      	movs	r5, #0
 80073b0:	4628      	mov	r0, r5
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	b118      	cbz	r0, 80073be <_fflush_r+0x1a>
 80073b6:	6983      	ldr	r3, [r0, #24]
 80073b8:	b90b      	cbnz	r3, 80073be <_fflush_r+0x1a>
 80073ba:	f000 f887 	bl	80074cc <__sinit>
 80073be:	4b14      	ldr	r3, [pc, #80]	; (8007410 <_fflush_r+0x6c>)
 80073c0:	429c      	cmp	r4, r3
 80073c2:	d11b      	bne.n	80073fc <_fflush_r+0x58>
 80073c4:	686c      	ldr	r4, [r5, #4]
 80073c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0ef      	beq.n	80073ae <_fflush_r+0xa>
 80073ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073d0:	07d0      	lsls	r0, r2, #31
 80073d2:	d404      	bmi.n	80073de <_fflush_r+0x3a>
 80073d4:	0599      	lsls	r1, r3, #22
 80073d6:	d402      	bmi.n	80073de <_fflush_r+0x3a>
 80073d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073da:	f000 f915 	bl	8007608 <__retarget_lock_acquire_recursive>
 80073de:	4628      	mov	r0, r5
 80073e0:	4621      	mov	r1, r4
 80073e2:	f7ff ff59 	bl	8007298 <__sflush_r>
 80073e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073e8:	07da      	lsls	r2, r3, #31
 80073ea:	4605      	mov	r5, r0
 80073ec:	d4e0      	bmi.n	80073b0 <_fflush_r+0xc>
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	059b      	lsls	r3, r3, #22
 80073f2:	d4dd      	bmi.n	80073b0 <_fflush_r+0xc>
 80073f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f6:	f000 f908 	bl	800760a <__retarget_lock_release_recursive>
 80073fa:	e7d9      	b.n	80073b0 <_fflush_r+0xc>
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <_fflush_r+0x70>)
 80073fe:	429c      	cmp	r4, r3
 8007400:	d101      	bne.n	8007406 <_fflush_r+0x62>
 8007402:	68ac      	ldr	r4, [r5, #8]
 8007404:	e7df      	b.n	80073c6 <_fflush_r+0x22>
 8007406:	4b04      	ldr	r3, [pc, #16]	; (8007418 <_fflush_r+0x74>)
 8007408:	429c      	cmp	r4, r3
 800740a:	bf08      	it	eq
 800740c:	68ec      	ldreq	r4, [r5, #12]
 800740e:	e7da      	b.n	80073c6 <_fflush_r+0x22>
 8007410:	08007e1c 	.word	0x08007e1c
 8007414:	08007e3c 	.word	0x08007e3c
 8007418:	08007dfc 	.word	0x08007dfc

0800741c <std>:
 800741c:	2300      	movs	r3, #0
 800741e:	b510      	push	{r4, lr}
 8007420:	4604      	mov	r4, r0
 8007422:	e9c0 3300 	strd	r3, r3, [r0]
 8007426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800742a:	6083      	str	r3, [r0, #8]
 800742c:	8181      	strh	r1, [r0, #12]
 800742e:	6643      	str	r3, [r0, #100]	; 0x64
 8007430:	81c2      	strh	r2, [r0, #14]
 8007432:	6183      	str	r3, [r0, #24]
 8007434:	4619      	mov	r1, r3
 8007436:	2208      	movs	r2, #8
 8007438:	305c      	adds	r0, #92	; 0x5c
 800743a:	f7fe ffcb 	bl	80063d4 <memset>
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <std+0x38>)
 8007440:	6263      	str	r3, [r4, #36]	; 0x24
 8007442:	4b05      	ldr	r3, [pc, #20]	; (8007458 <std+0x3c>)
 8007444:	62a3      	str	r3, [r4, #40]	; 0x28
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <std+0x40>)
 8007448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <std+0x44>)
 800744c:	6224      	str	r4, [r4, #32]
 800744e:	6323      	str	r3, [r4, #48]	; 0x30
 8007450:	bd10      	pop	{r4, pc}
 8007452:	bf00      	nop
 8007454:	08007811 	.word	0x08007811
 8007458:	08007833 	.word	0x08007833
 800745c:	0800786b 	.word	0x0800786b
 8007460:	0800788f 	.word	0x0800788f

08007464 <_cleanup_r>:
 8007464:	4901      	ldr	r1, [pc, #4]	; (800746c <_cleanup_r+0x8>)
 8007466:	f000 b8af 	b.w	80075c8 <_fwalk_reent>
 800746a:	bf00      	nop
 800746c:	080073a5 	.word	0x080073a5

08007470 <__sfmoreglue>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	2268      	movs	r2, #104	; 0x68
 8007474:	1e4d      	subs	r5, r1, #1
 8007476:	4355      	muls	r5, r2
 8007478:	460e      	mov	r6, r1
 800747a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800747e:	f7ff f81d 	bl	80064bc <_malloc_r>
 8007482:	4604      	mov	r4, r0
 8007484:	b140      	cbz	r0, 8007498 <__sfmoreglue+0x28>
 8007486:	2100      	movs	r1, #0
 8007488:	e9c0 1600 	strd	r1, r6, [r0]
 800748c:	300c      	adds	r0, #12
 800748e:	60a0      	str	r0, [r4, #8]
 8007490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007494:	f7fe ff9e 	bl	80063d4 <memset>
 8007498:	4620      	mov	r0, r4
 800749a:	bd70      	pop	{r4, r5, r6, pc}

0800749c <__sfp_lock_acquire>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__sfp_lock_acquire+0x8>)
 800749e:	f000 b8b3 	b.w	8007608 <__retarget_lock_acquire_recursive>
 80074a2:	bf00      	nop
 80074a4:	200003b1 	.word	0x200003b1

080074a8 <__sfp_lock_release>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__sfp_lock_release+0x8>)
 80074aa:	f000 b8ae 	b.w	800760a <__retarget_lock_release_recursive>
 80074ae:	bf00      	nop
 80074b0:	200003b1 	.word	0x200003b1

080074b4 <__sinit_lock_acquire>:
 80074b4:	4801      	ldr	r0, [pc, #4]	; (80074bc <__sinit_lock_acquire+0x8>)
 80074b6:	f000 b8a7 	b.w	8007608 <__retarget_lock_acquire_recursive>
 80074ba:	bf00      	nop
 80074bc:	200003b2 	.word	0x200003b2

080074c0 <__sinit_lock_release>:
 80074c0:	4801      	ldr	r0, [pc, #4]	; (80074c8 <__sinit_lock_release+0x8>)
 80074c2:	f000 b8a2 	b.w	800760a <__retarget_lock_release_recursive>
 80074c6:	bf00      	nop
 80074c8:	200003b2 	.word	0x200003b2

080074cc <__sinit>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4604      	mov	r4, r0
 80074d0:	f7ff fff0 	bl	80074b4 <__sinit_lock_acquire>
 80074d4:	69a3      	ldr	r3, [r4, #24]
 80074d6:	b11b      	cbz	r3, 80074e0 <__sinit+0x14>
 80074d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074dc:	f7ff bff0 	b.w	80074c0 <__sinit_lock_release>
 80074e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074e4:	6523      	str	r3, [r4, #80]	; 0x50
 80074e6:	4b13      	ldr	r3, [pc, #76]	; (8007534 <__sinit+0x68>)
 80074e8:	4a13      	ldr	r2, [pc, #76]	; (8007538 <__sinit+0x6c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	bf04      	itt	eq
 80074f2:	2301      	moveq	r3, #1
 80074f4:	61a3      	streq	r3, [r4, #24]
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 f820 	bl	800753c <__sfp>
 80074fc:	6060      	str	r0, [r4, #4]
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f81c 	bl	800753c <__sfp>
 8007504:	60a0      	str	r0, [r4, #8]
 8007506:	4620      	mov	r0, r4
 8007508:	f000 f818 	bl	800753c <__sfp>
 800750c:	2200      	movs	r2, #0
 800750e:	60e0      	str	r0, [r4, #12]
 8007510:	2104      	movs	r1, #4
 8007512:	6860      	ldr	r0, [r4, #4]
 8007514:	f7ff ff82 	bl	800741c <std>
 8007518:	68a0      	ldr	r0, [r4, #8]
 800751a:	2201      	movs	r2, #1
 800751c:	2109      	movs	r1, #9
 800751e:	f7ff ff7d 	bl	800741c <std>
 8007522:	68e0      	ldr	r0, [r4, #12]
 8007524:	2202      	movs	r2, #2
 8007526:	2112      	movs	r1, #18
 8007528:	f7ff ff78 	bl	800741c <std>
 800752c:	2301      	movs	r3, #1
 800752e:	61a3      	str	r3, [r4, #24]
 8007530:	e7d2      	b.n	80074d8 <__sinit+0xc>
 8007532:	bf00      	nop
 8007534:	08007d14 	.word	0x08007d14
 8007538:	08007465 	.word	0x08007465

0800753c <__sfp>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	4607      	mov	r7, r0
 8007540:	f7ff ffac 	bl	800749c <__sfp_lock_acquire>
 8007544:	4b1e      	ldr	r3, [pc, #120]	; (80075c0 <__sfp+0x84>)
 8007546:	681e      	ldr	r6, [r3, #0]
 8007548:	69b3      	ldr	r3, [r6, #24]
 800754a:	b913      	cbnz	r3, 8007552 <__sfp+0x16>
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff ffbd 	bl	80074cc <__sinit>
 8007552:	3648      	adds	r6, #72	; 0x48
 8007554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007558:	3b01      	subs	r3, #1
 800755a:	d503      	bpl.n	8007564 <__sfp+0x28>
 800755c:	6833      	ldr	r3, [r6, #0]
 800755e:	b30b      	cbz	r3, 80075a4 <__sfp+0x68>
 8007560:	6836      	ldr	r6, [r6, #0]
 8007562:	e7f7      	b.n	8007554 <__sfp+0x18>
 8007564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007568:	b9d5      	cbnz	r5, 80075a0 <__sfp+0x64>
 800756a:	4b16      	ldr	r3, [pc, #88]	; (80075c4 <__sfp+0x88>)
 800756c:	60e3      	str	r3, [r4, #12]
 800756e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007572:	6665      	str	r5, [r4, #100]	; 0x64
 8007574:	f000 f847 	bl	8007606 <__retarget_lock_init_recursive>
 8007578:	f7ff ff96 	bl	80074a8 <__sfp_lock_release>
 800757c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007584:	6025      	str	r5, [r4, #0]
 8007586:	61a5      	str	r5, [r4, #24]
 8007588:	2208      	movs	r2, #8
 800758a:	4629      	mov	r1, r5
 800758c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007590:	f7fe ff20 	bl	80063d4 <memset>
 8007594:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007598:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800759c:	4620      	mov	r0, r4
 800759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a0:	3468      	adds	r4, #104	; 0x68
 80075a2:	e7d9      	b.n	8007558 <__sfp+0x1c>
 80075a4:	2104      	movs	r1, #4
 80075a6:	4638      	mov	r0, r7
 80075a8:	f7ff ff62 	bl	8007470 <__sfmoreglue>
 80075ac:	4604      	mov	r4, r0
 80075ae:	6030      	str	r0, [r6, #0]
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d1d5      	bne.n	8007560 <__sfp+0x24>
 80075b4:	f7ff ff78 	bl	80074a8 <__sfp_lock_release>
 80075b8:	230c      	movs	r3, #12
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	e7ee      	b.n	800759c <__sfp+0x60>
 80075be:	bf00      	nop
 80075c0:	08007d14 	.word	0x08007d14
 80075c4:	ffff0001 	.word	0xffff0001

080075c8 <_fwalk_reent>:
 80075c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075cc:	4606      	mov	r6, r0
 80075ce:	4688      	mov	r8, r1
 80075d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075d4:	2700      	movs	r7, #0
 80075d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075da:	f1b9 0901 	subs.w	r9, r9, #1
 80075de:	d505      	bpl.n	80075ec <_fwalk_reent+0x24>
 80075e0:	6824      	ldr	r4, [r4, #0]
 80075e2:	2c00      	cmp	r4, #0
 80075e4:	d1f7      	bne.n	80075d6 <_fwalk_reent+0xe>
 80075e6:	4638      	mov	r0, r7
 80075e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ec:	89ab      	ldrh	r3, [r5, #12]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d907      	bls.n	8007602 <_fwalk_reent+0x3a>
 80075f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075f6:	3301      	adds	r3, #1
 80075f8:	d003      	beq.n	8007602 <_fwalk_reent+0x3a>
 80075fa:	4629      	mov	r1, r5
 80075fc:	4630      	mov	r0, r6
 80075fe:	47c0      	blx	r8
 8007600:	4307      	orrs	r7, r0
 8007602:	3568      	adds	r5, #104	; 0x68
 8007604:	e7e9      	b.n	80075da <_fwalk_reent+0x12>

08007606 <__retarget_lock_init_recursive>:
 8007606:	4770      	bx	lr

08007608 <__retarget_lock_acquire_recursive>:
 8007608:	4770      	bx	lr

0800760a <__retarget_lock_release_recursive>:
 800760a:	4770      	bx	lr

0800760c <__swhatbuf_r>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	460e      	mov	r6, r1
 8007610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007614:	2900      	cmp	r1, #0
 8007616:	b096      	sub	sp, #88	; 0x58
 8007618:	4614      	mov	r4, r2
 800761a:	461d      	mov	r5, r3
 800761c:	da08      	bge.n	8007630 <__swhatbuf_r+0x24>
 800761e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	061a      	lsls	r2, r3, #24
 8007628:	d410      	bmi.n	800764c <__swhatbuf_r+0x40>
 800762a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762e:	e00e      	b.n	800764e <__swhatbuf_r+0x42>
 8007630:	466a      	mov	r2, sp
 8007632:	f000 f953 	bl	80078dc <_fstat_r>
 8007636:	2800      	cmp	r0, #0
 8007638:	dbf1      	blt.n	800761e <__swhatbuf_r+0x12>
 800763a:	9a01      	ldr	r2, [sp, #4]
 800763c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007640:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007644:	425a      	negs	r2, r3
 8007646:	415a      	adcs	r2, r3
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	e7ee      	b.n	800762a <__swhatbuf_r+0x1e>
 800764c:	2340      	movs	r3, #64	; 0x40
 800764e:	2000      	movs	r0, #0
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	b016      	add	sp, #88	; 0x58
 8007654:	bd70      	pop	{r4, r5, r6, pc}
	...

08007658 <__smakebuf_r>:
 8007658:	898b      	ldrh	r3, [r1, #12]
 800765a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800765c:	079d      	lsls	r5, r3, #30
 800765e:	4606      	mov	r6, r0
 8007660:	460c      	mov	r4, r1
 8007662:	d507      	bpl.n	8007674 <__smakebuf_r+0x1c>
 8007664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	2301      	movs	r3, #1
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	b002      	add	sp, #8
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	ab01      	add	r3, sp, #4
 8007676:	466a      	mov	r2, sp
 8007678:	f7ff ffc8 	bl	800760c <__swhatbuf_r>
 800767c:	9900      	ldr	r1, [sp, #0]
 800767e:	4605      	mov	r5, r0
 8007680:	4630      	mov	r0, r6
 8007682:	f7fe ff1b 	bl	80064bc <_malloc_r>
 8007686:	b948      	cbnz	r0, 800769c <__smakebuf_r+0x44>
 8007688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768c:	059a      	lsls	r2, r3, #22
 800768e:	d4ef      	bmi.n	8007670 <__smakebuf_r+0x18>
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	f043 0302 	orr.w	r3, r3, #2
 8007698:	81a3      	strh	r3, [r4, #12]
 800769a:	e7e3      	b.n	8007664 <__smakebuf_r+0xc>
 800769c:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <__smakebuf_r+0x7c>)
 800769e:	62b3      	str	r3, [r6, #40]	; 0x28
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	6020      	str	r0, [r4, #0]
 80076a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	6163      	str	r3, [r4, #20]
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	6120      	str	r0, [r4, #16]
 80076b2:	b15b      	cbz	r3, 80076cc <__smakebuf_r+0x74>
 80076b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b8:	4630      	mov	r0, r6
 80076ba:	f000 f921 	bl	8007900 <_isatty_r>
 80076be:	b128      	cbz	r0, 80076cc <__smakebuf_r+0x74>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	89a0      	ldrh	r0, [r4, #12]
 80076ce:	4305      	orrs	r5, r0
 80076d0:	81a5      	strh	r5, [r4, #12]
 80076d2:	e7cd      	b.n	8007670 <__smakebuf_r+0x18>
 80076d4:	08007465 	.word	0x08007465

080076d8 <memcpy>:
 80076d8:	440a      	add	r2, r1
 80076da:	4291      	cmp	r1, r2
 80076dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076e0:	d100      	bne.n	80076e4 <memcpy+0xc>
 80076e2:	4770      	bx	lr
 80076e4:	b510      	push	{r4, lr}
 80076e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ee:	4291      	cmp	r1, r2
 80076f0:	d1f9      	bne.n	80076e6 <memcpy+0xe>
 80076f2:	bd10      	pop	{r4, pc}

080076f4 <memmove>:
 80076f4:	4288      	cmp	r0, r1
 80076f6:	b510      	push	{r4, lr}
 80076f8:	eb01 0402 	add.w	r4, r1, r2
 80076fc:	d902      	bls.n	8007704 <memmove+0x10>
 80076fe:	4284      	cmp	r4, r0
 8007700:	4623      	mov	r3, r4
 8007702:	d807      	bhi.n	8007714 <memmove+0x20>
 8007704:	1e43      	subs	r3, r0, #1
 8007706:	42a1      	cmp	r1, r4
 8007708:	d008      	beq.n	800771c <memmove+0x28>
 800770a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800770e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007712:	e7f8      	b.n	8007706 <memmove+0x12>
 8007714:	4402      	add	r2, r0
 8007716:	4601      	mov	r1, r0
 8007718:	428a      	cmp	r2, r1
 800771a:	d100      	bne.n	800771e <memmove+0x2a>
 800771c:	bd10      	pop	{r4, pc}
 800771e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007726:	e7f7      	b.n	8007718 <memmove+0x24>

08007728 <_realloc_r>:
 8007728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772c:	4680      	mov	r8, r0
 800772e:	4614      	mov	r4, r2
 8007730:	460e      	mov	r6, r1
 8007732:	b921      	cbnz	r1, 800773e <_realloc_r+0x16>
 8007734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007738:	4611      	mov	r1, r2
 800773a:	f7fe bebf 	b.w	80064bc <_malloc_r>
 800773e:	b92a      	cbnz	r2, 800774c <_realloc_r+0x24>
 8007740:	f7fe fe50 	bl	80063e4 <_free_r>
 8007744:	4625      	mov	r5, r4
 8007746:	4628      	mov	r0, r5
 8007748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800774c:	f000 f8fa 	bl	8007944 <_malloc_usable_size_r>
 8007750:	4284      	cmp	r4, r0
 8007752:	4607      	mov	r7, r0
 8007754:	d802      	bhi.n	800775c <_realloc_r+0x34>
 8007756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800775a:	d812      	bhi.n	8007782 <_realloc_r+0x5a>
 800775c:	4621      	mov	r1, r4
 800775e:	4640      	mov	r0, r8
 8007760:	f7fe feac 	bl	80064bc <_malloc_r>
 8007764:	4605      	mov	r5, r0
 8007766:	2800      	cmp	r0, #0
 8007768:	d0ed      	beq.n	8007746 <_realloc_r+0x1e>
 800776a:	42bc      	cmp	r4, r7
 800776c:	4622      	mov	r2, r4
 800776e:	4631      	mov	r1, r6
 8007770:	bf28      	it	cs
 8007772:	463a      	movcs	r2, r7
 8007774:	f7ff ffb0 	bl	80076d8 <memcpy>
 8007778:	4631      	mov	r1, r6
 800777a:	4640      	mov	r0, r8
 800777c:	f7fe fe32 	bl	80063e4 <_free_r>
 8007780:	e7e1      	b.n	8007746 <_realloc_r+0x1e>
 8007782:	4635      	mov	r5, r6
 8007784:	e7df      	b.n	8007746 <_realloc_r+0x1e>

08007786 <_raise_r>:
 8007786:	291f      	cmp	r1, #31
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4604      	mov	r4, r0
 800778c:	460d      	mov	r5, r1
 800778e:	d904      	bls.n	800779a <_raise_r+0x14>
 8007790:	2316      	movs	r3, #22
 8007792:	6003      	str	r3, [r0, #0]
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	bd38      	pop	{r3, r4, r5, pc}
 800779a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800779c:	b112      	cbz	r2, 80077a4 <_raise_r+0x1e>
 800779e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077a2:	b94b      	cbnz	r3, 80077b8 <_raise_r+0x32>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 f831 	bl	800780c <_getpid_r>
 80077aa:	462a      	mov	r2, r5
 80077ac:	4601      	mov	r1, r0
 80077ae:	4620      	mov	r0, r4
 80077b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b4:	f000 b818 	b.w	80077e8 <_kill_r>
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d00a      	beq.n	80077d2 <_raise_r+0x4c>
 80077bc:	1c59      	adds	r1, r3, #1
 80077be:	d103      	bne.n	80077c8 <_raise_r+0x42>
 80077c0:	2316      	movs	r3, #22
 80077c2:	6003      	str	r3, [r0, #0]
 80077c4:	2001      	movs	r0, #1
 80077c6:	e7e7      	b.n	8007798 <_raise_r+0x12>
 80077c8:	2400      	movs	r4, #0
 80077ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077ce:	4628      	mov	r0, r5
 80077d0:	4798      	blx	r3
 80077d2:	2000      	movs	r0, #0
 80077d4:	e7e0      	b.n	8007798 <_raise_r+0x12>
	...

080077d8 <raise>:
 80077d8:	4b02      	ldr	r3, [pc, #8]	; (80077e4 <raise+0xc>)
 80077da:	4601      	mov	r1, r0
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f7ff bfd2 	b.w	8007786 <_raise_r>
 80077e2:	bf00      	nop
 80077e4:	2000000c 	.word	0x2000000c

080077e8 <_kill_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d07      	ldr	r5, [pc, #28]	; (8007808 <_kill_r+0x20>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	f7f9 fee5 	bl	80015c4 <_kill>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	d102      	bne.n	8007804 <_kill_r+0x1c>
 80077fe:	682b      	ldr	r3, [r5, #0]
 8007800:	b103      	cbz	r3, 8007804 <_kill_r+0x1c>
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	200003ac 	.word	0x200003ac

0800780c <_getpid_r>:
 800780c:	f7f9 bed2 	b.w	80015b4 <_getpid>

08007810 <__sread>:
 8007810:	b510      	push	{r4, lr}
 8007812:	460c      	mov	r4, r1
 8007814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007818:	f000 f89c 	bl	8007954 <_read_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	bfab      	itete	ge
 8007820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007822:	89a3      	ldrhlt	r3, [r4, #12]
 8007824:	181b      	addge	r3, r3, r0
 8007826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800782a:	bfac      	ite	ge
 800782c:	6563      	strge	r3, [r4, #84]	; 0x54
 800782e:	81a3      	strhlt	r3, [r4, #12]
 8007830:	bd10      	pop	{r4, pc}

08007832 <__swrite>:
 8007832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	461f      	mov	r7, r3
 8007838:	898b      	ldrh	r3, [r1, #12]
 800783a:	05db      	lsls	r3, r3, #23
 800783c:	4605      	mov	r5, r0
 800783e:	460c      	mov	r4, r1
 8007840:	4616      	mov	r6, r2
 8007842:	d505      	bpl.n	8007850 <__swrite+0x1e>
 8007844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007848:	2302      	movs	r3, #2
 800784a:	2200      	movs	r2, #0
 800784c:	f000 f868 	bl	8007920 <_lseek_r>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007866:	f000 b817 	b.w	8007898 <_write_r>

0800786a <__sseek>:
 800786a:	b510      	push	{r4, lr}
 800786c:	460c      	mov	r4, r1
 800786e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007872:	f000 f855 	bl	8007920 <_lseek_r>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	bf15      	itete	ne
 800787c:	6560      	strne	r0, [r4, #84]	; 0x54
 800787e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007886:	81a3      	strheq	r3, [r4, #12]
 8007888:	bf18      	it	ne
 800788a:	81a3      	strhne	r3, [r4, #12]
 800788c:	bd10      	pop	{r4, pc}

0800788e <__sclose>:
 800788e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007892:	f000 b813 	b.w	80078bc <_close_r>
	...

08007898 <_write_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d07      	ldr	r5, [pc, #28]	; (80078b8 <_write_r+0x20>)
 800789c:	4604      	mov	r4, r0
 800789e:	4608      	mov	r0, r1
 80078a0:	4611      	mov	r1, r2
 80078a2:	2200      	movs	r2, #0
 80078a4:	602a      	str	r2, [r5, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f7f9 fec3 	bl	8001632 <_write>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d102      	bne.n	80078b6 <_write_r+0x1e>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	b103      	cbz	r3, 80078b6 <_write_r+0x1e>
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	200003ac 	.word	0x200003ac

080078bc <_close_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d06      	ldr	r5, [pc, #24]	; (80078d8 <_close_r+0x1c>)
 80078c0:	2300      	movs	r3, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7f9 fecf 	bl	800166a <_close>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_close_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_close_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	200003ac 	.word	0x200003ac

080078dc <_fstat_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	; (80078fc <_fstat_r+0x20>)
 80078e0:	2300      	movs	r3, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	4611      	mov	r1, r2
 80078e8:	602b      	str	r3, [r5, #0]
 80078ea:	f7f9 feca 	bl	8001682 <_fstat>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d102      	bne.n	80078f8 <_fstat_r+0x1c>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	b103      	cbz	r3, 80078f8 <_fstat_r+0x1c>
 80078f6:	6023      	str	r3, [r4, #0]
 80078f8:	bd38      	pop	{r3, r4, r5, pc}
 80078fa:	bf00      	nop
 80078fc:	200003ac 	.word	0x200003ac

08007900 <_isatty_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d06      	ldr	r5, [pc, #24]	; (800791c <_isatty_r+0x1c>)
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	f7f9 fec9 	bl	80016a2 <_isatty>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_isatty_r+0x1a>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_isatty_r+0x1a>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	200003ac 	.word	0x200003ac

08007920 <_lseek_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	; (8007940 <_lseek_r+0x20>)
 8007924:	4604      	mov	r4, r0
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	2200      	movs	r2, #0
 800792c:	602a      	str	r2, [r5, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f7f9 fec2 	bl	80016b8 <_lseek>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_lseek_r+0x1e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_lseek_r+0x1e>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	200003ac 	.word	0x200003ac

08007944 <_malloc_usable_size_r>:
 8007944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007948:	1f18      	subs	r0, r3, #4
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfbc      	itt	lt
 800794e:	580b      	ldrlt	r3, [r1, r0]
 8007950:	18c0      	addlt	r0, r0, r3
 8007952:	4770      	bx	lr

08007954 <_read_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4d07      	ldr	r5, [pc, #28]	; (8007974 <_read_r+0x20>)
 8007958:	4604      	mov	r4, r0
 800795a:	4608      	mov	r0, r1
 800795c:	4611      	mov	r1, r2
 800795e:	2200      	movs	r2, #0
 8007960:	602a      	str	r2, [r5, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	f7f9 fe48 	bl	80015f8 <_read>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d102      	bne.n	8007972 <_read_r+0x1e>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	b103      	cbz	r3, 8007972 <_read_r+0x1e>
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	200003ac 	.word	0x200003ac

08007978 <_init>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr

08007984 <_fini>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr


INTEGRATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d0  080080d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d8  080080d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080080e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000070  08008150  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08008150  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f66  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce1  00000000  00000000  00033006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00035ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022590  00000000  00000000  000379b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c90  00000000  00000000  00059f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4488  00000000  00000000  0006dbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  001320a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bec 	.word	0x08007bec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007bec 	.word	0x08007bec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <DataToGsm>:
//
//}


void DataToGsm()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af06      	add	r7, sp, #24
	uint8_t sec=d.sec;
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <DataToGsm+0xf0>)
 80005ac:	789b      	ldrb	r3, [r3, #2]
 80005ae:	71fb      	strb	r3, [r7, #7]
	//	uint8_t ST=d.scan_time;
	//	DataToCloud(d1->time,d1->CH1,d1->CH2,d1->CH3,d1->CH4,d1->D1,d1->D2,d1->D3,d1->D4);
	sprintf(buffer_Time,"%02d:%02d:%02d",d.hr,d.min,d.sec);
 80005b0:	4b38      	ldr	r3, [pc, #224]	; (8000694 <DataToGsm+0xf0>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b37      	ldr	r3, [pc, #220]	; (8000694 <DataToGsm+0xf0>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4b35      	ldr	r3, [pc, #212]	; (8000694 <DataToGsm+0xf0>)
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	460b      	mov	r3, r1
 80005c4:	4934      	ldr	r1, [pc, #208]	; (8000698 <DataToGsm+0xf4>)
 80005c6:	4835      	ldr	r0, [pc, #212]	; (800069c <DataToGsm+0xf8>)
 80005c8:	f006 f936 	bl	8006838 <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t*)0x1, 1, HAL_MAX_DELAY);


	if(d.GPIO[0]==1)
 80005cc:	4b31      	ldr	r3, [pc, #196]	; (8000694 <DataToGsm+0xf0>)
 80005ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d106      	bne.n	80005e4 <DataToGsm+0x40>
	{
		strcpy(d.Status1, "High");
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <DataToGsm+0xfc>)
 80005d8:	4a32      	ldr	r2, [pc, #200]	; (80006a4 <DataToGsm+0x100>)
 80005da:	6810      	ldr	r0, [r2, #0]
 80005dc:	6018      	str	r0, [r3, #0]
 80005de:	7912      	ldrb	r2, [r2, #4]
 80005e0:	711a      	strb	r2, [r3, #4]
 80005e2:	e003      	b.n	80005ec <DataToGsm+0x48>
	}
	else
	{
		strcpy(d.Status1, "Low");
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <DataToGsm+0xfc>)
 80005e6:	4a30      	ldr	r2, [pc, #192]	; (80006a8 <DataToGsm+0x104>)
 80005e8:	6810      	ldr	r0, [r2, #0]
 80005ea:	6018      	str	r0, [r3, #0]
	}

	if(d.GPIO[1]==1)
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <DataToGsm+0xf0>)
 80005ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d106      	bne.n	8000604 <DataToGsm+0x60>
	{
		strcpy(d.Status2, "High");
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <DataToGsm+0x108>)
 80005f8:	4a2a      	ldr	r2, [pc, #168]	; (80006a4 <DataToGsm+0x100>)
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	6018      	str	r0, [r3, #0]
 80005fe:	7912      	ldrb	r2, [r2, #4]
 8000600:	711a      	strb	r2, [r3, #4]
 8000602:	e003      	b.n	800060c <DataToGsm+0x68>
	}
	else
	{
		strcpy(d.Status2, "Low");
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <DataToGsm+0x108>)
 8000606:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <DataToGsm+0x104>)
 8000608:	6810      	ldr	r0, [r2, #0]
 800060a:	6018      	str	r0, [r3, #0]
	}

	if(d.GPIO[2]==1)
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <DataToGsm+0xf0>)
 800060e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000612:	2b01      	cmp	r3, #1
 8000614:	d106      	bne.n	8000624 <DataToGsm+0x80>
	{
		strcpy(d.Status3, "High");
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <DataToGsm+0x10c>)
 8000618:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <DataToGsm+0x100>)
 800061a:	6810      	ldr	r0, [r2, #0]
 800061c:	6018      	str	r0, [r3, #0]
 800061e:	7912      	ldrb	r2, [r2, #4]
 8000620:	711a      	strb	r2, [r3, #4]
 8000622:	e003      	b.n	800062c <DataToGsm+0x88>
	}
	else
	{
		strcpy(d.Status3, "Low");
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <DataToGsm+0x10c>)
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <DataToGsm+0x104>)
 8000628:	6810      	ldr	r0, [r2, #0]
 800062a:	6018      	str	r0, [r3, #0]
	}

	if(d.GPIO[3]==1)
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <DataToGsm+0xf0>)
 800062e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000632:	2b01      	cmp	r3, #1
 8000634:	d106      	bne.n	8000644 <DataToGsm+0xa0>
	{
		strcpy(d.Status4, "High");
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <DataToGsm+0x110>)
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <DataToGsm+0x100>)
 800063a:	6810      	ldr	r0, [r2, #0]
 800063c:	6018      	str	r0, [r3, #0]
 800063e:	7912      	ldrb	r2, [r2, #4]
 8000640:	711a      	strb	r2, [r3, #4]
 8000642:	e003      	b.n	800064c <DataToGsm+0xa8>
	}
	else
	{
		strcpy(d.Status4, "Low");
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <DataToGsm+0x110>)
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <DataToGsm+0x104>)
 8000648:	6810      	ldr	r0, [r2, #0]
 800064a:	6018      	str	r0, [r3, #0]





	if(sec==59)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	2b3b      	cmp	r3, #59	; 0x3b
 8000650:	d104      	bne.n	800065c <DataToGsm+0xb8>
	{
		count=count+1;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <DataToGsm+0x114>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <DataToGsm+0x114>)
 800065a:	6013      	str	r3, [r2, #0]

	}


	if(count==1)
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <DataToGsm+0x114>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d112      	bne.n	800068a <DataToGsm+0xe6>
	{
				DataToCloud(buffer_Time,d.CH1,d.CH2,d.CH3,d.CH4,d.Status1,d.Status2,d.Status3,d.Status4);
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <DataToGsm+0x110>)
 8000666:	9304      	str	r3, [sp, #16]
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <DataToGsm+0x10c>)
 800066a:	9303      	str	r3, [sp, #12]
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <DataToGsm+0x108>)
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <DataToGsm+0xfc>)
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <DataToGsm+0x118>)
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <DataToGsm+0x11c>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <DataToGsm+0x120>)
 800067c:	4912      	ldr	r1, [pc, #72]	; (80006c8 <DataToGsm+0x124>)
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <DataToGsm+0xf8>)
 8000680:	f000 faea 	bl	8000c58 <DataToCloud>
		count=0;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <DataToGsm+0x114>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
	}
//	DataToCloud(buffer_Time,d.CH1,d.CH2,d.CH3,d.CH4,d.Status1,d.Status2,d.Status3,d.Status4);


}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000160 	.word	0x20000160
 8000698:	08007c04 	.word	0x08007c04
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	20000190 	.word	0x20000190
 80006a4:	08007c14 	.word	0x08007c14
 80006a8:	08007c1c 	.word	0x08007c1c
 80006ac:	2000019a 	.word	0x2000019a
 80006b0:	200001a4 	.word	0x200001a4
 80006b4:	200001ae 	.word	0x200001ae
 80006b8:	2000009c 	.word	0x2000009c
 80006bc:	20000181 	.word	0x20000181
 80006c0:	20000177 	.word	0x20000177
 80006c4:	2000016d 	.word	0x2000016d
 80006c8:	20000163 	.word	0x20000163

080006cc <Configurator>:
char config[4];
uint8_t s[4];
struct data d;

 void Configurator()
 {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	 data_receive();
 80006d0:	f000 fcb0 	bl	8001034 <data_receive>

		  if (tx_data[0] != '\0')
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <Configurator+0x44>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <Configurator+0x18>
		   {
		     flag = 1; // Set flag to indicate data has been received
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <Configurator+0x48>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	e002      	b.n	80006ea <Configurator+0x1e>
		   }
		   else
		   {
			   flag=0;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <Configurator+0x48>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
		   }

           if (flag)
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <Configurator+0x48>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d005      	beq.n	80006fe <Configurator+0x32>
           {
	        extract_data();
 80006f2:	f000 f8a3 	bl	800083c <extract_data>
	        pin_config();
 80006f6:	f000 f8d9 	bl	80008ac <pin_config>
	        clear_buffer();
 80006fa:	f000 f80f 	bl	800071c <clear_buffer>
           }
           reset_output();
 80006fe:	f000 f819 	bl	8000734 <reset_output>
//           	set_output();
//           		HAL_UART_Transmit(&huart2, (uint8_t*)d.GPIO, 4, HAL_MAX_DELAY);

            pin_status = read_pinstatus();
 8000702:	f000 f859 	bl	80007b8 <read_pinstatus>
 8000706:	4603      	mov	r3, r0
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <Configurator+0x4c>)
 800070a:	6013      	str	r3, [r2, #0]
            //status_transmit();
            //DataTOgsm(d);


 }
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000a4 	.word	0x200000a4
 8000714:	20000154 	.word	0x20000154
 8000718:	20000158 	.word	0x20000158

0800071c <clear_buffer>:

 void clear_buffer()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	memset(tx_data,0,sizeof (tx_data));
 8000720:	220f      	movs	r2, #15
 8000722:	2100      	movs	r1, #0
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <clear_buffer+0x14>)
 8000726:	f005 ff5b 	bl	80065e0 <memset>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000a4 	.word	0x200000a4

08000734 <reset_output>:
	}
//	HAL_UART_Transmit(&huart2, (uint8_t *)d.GPIO, 4,1000);
 }

 void reset_output()
  {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
 	 if(config[0] == 0)
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <reset_output+0x78>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d109      	bne.n	8000754 <reset_output+0x20>
 	{
 		d.GPIO[0] = write_gpio(GPIOB,GPIO_PIN_0, PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2101      	movs	r1, #1
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <reset_output+0x7c>)
 8000746:	f000 fc99 	bl	800107c <write_gpio>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <reset_output+0x80>)
 8000750:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 	}

 	if(config[1] == 0)
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <reset_output+0x78>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d109      	bne.n	8000770 <reset_output+0x3c>
 	{
 		d.GPIO[1]=write_gpio(GPIOB,GPIO_PIN_1, PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <reset_output+0x7c>)
 8000762:	f000 fc8b 	bl	800107c <write_gpio>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <reset_output+0x80>)
 800076c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 	}

 	if(config[2] == 0)
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <reset_output+0x78>)
 8000772:	789b      	ldrb	r3, [r3, #2]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <reset_output+0x58>
 	{
 		d.GPIO[2] = write_gpio(GPIOB,GPIO_PIN_4, PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2110      	movs	r1, #16
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <reset_output+0x7c>)
 800077e:	f000 fc7d 	bl	800107c <write_gpio>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <reset_output+0x80>)
 8000788:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 	}

 	if(config[3] == 0)
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <reset_output+0x78>)
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d109      	bne.n	80007a8 <reset_output+0x74>
 	{
 		d.GPIO[3] = write_gpio(GPIOB,GPIO_PIN_5, PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2120      	movs	r1, #32
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <reset_output+0x7c>)
 800079a:	f000 fc6f 	bl	800107c <write_gpio>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <reset_output+0x80>)
 80007a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 	}
  }
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000015c 	.word	0x2000015c
 80007b0:	48000400 	.word	0x48000400
 80007b4:	20000160 	.word	0x20000160

080007b8 <read_pinstatus>:

 uint8_t* read_pinstatus()
 {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	 if(config[0]==1)
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <read_pinstatus+0x74>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d108      	bne.n	80007d6 <read_pinstatus+0x1e>
	 {
	     d.GPIO[0]=read_gpio( GPIOB,GPIO_PIN_0);
 80007c4:	2101      	movs	r1, #1
 80007c6:	481a      	ldr	r0, [pc, #104]	; (8000830 <read_pinstatus+0x78>)
 80007c8:	f000 fc48 	bl	800105c <read_gpio>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <read_pinstatus+0x7c>)
 80007d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	 }
	 if(config[1]==1)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <read_pinstatus+0x74>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d108      	bne.n	80007f0 <read_pinstatus+0x38>
	 {
		 d.GPIO[1]=read_gpio( GPIOB,GPIO_PIN_1);
 80007de:	2102      	movs	r1, #2
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <read_pinstatus+0x78>)
 80007e2:	f000 fc3b 	bl	800105c <read_gpio>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <read_pinstatus+0x7c>)
 80007ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 }
	 if(config[2]==1)
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <read_pinstatus+0x74>)
 80007f2:	789b      	ldrb	r3, [r3, #2]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d108      	bne.n	800080a <read_pinstatus+0x52>
	 {
	    d.GPIO[2]=read_gpio( GPIOB,GPIO_PIN_4);
 80007f8:	2110      	movs	r1, #16
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <read_pinstatus+0x78>)
 80007fc:	f000 fc2e 	bl	800105c <read_gpio>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <read_pinstatus+0x7c>)
 8000806:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	 }
	if(config[3]==1)
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <read_pinstatus+0x74>)
 800080c:	78db      	ldrb	r3, [r3, #3]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d108      	bne.n	8000824 <read_pinstatus+0x6c>
	{
	   d.GPIO[3]=read_gpio( GPIOB,GPIO_PIN_5);
 8000812:	2120      	movs	r1, #32
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <read_pinstatus+0x78>)
 8000816:	f000 fc21 	bl	800105c <read_gpio>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <read_pinstatus+0x7c>)
 8000820:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
	 return d.GPIO;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <read_pinstatus+0x80>)
 }
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000015c 	.word	0x2000015c
 8000830:	48000400 	.word	0x48000400
 8000834:	20000160 	.word	0x20000160
 8000838:	2000018b 	.word	0x2000018b

0800083c <extract_data>:


void extract_data()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	token = strtok(tx_data, ",");
 8000840:	4915      	ldr	r1, [pc, #84]	; (8000898 <extract_data+0x5c>)
 8000842:	4816      	ldr	r0, [pc, #88]	; (800089c <extract_data+0x60>)
 8000844:	f006 f82c 	bl	80068a0 <strtok>
 8000848:	4603      	mov	r3, r0
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <extract_data+0x64>)
 800084c:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <extract_data+0x64>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d010      	beq.n	8000878 <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <extract_data+0x64>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2209      	movs	r2, #9
 800085c:	4619      	mov	r1, r3
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <extract_data+0x68>)
 8000860:	f006 f80a 	bl	8006878 <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <extract_data+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	725a      	strb	r2, [r3, #9]
		         token = strtok(NULL, ",");
 800086a:	490b      	ldr	r1, [pc, #44]	; (8000898 <extract_data+0x5c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f006 f817 	bl	80068a0 <strtok>
 8000872:	4603      	mov	r3, r0
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <extract_data+0x64>)
 8000876:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <extract_data+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d009      	beq.n	8000894 <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <extract_data+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2209      	movs	r2, #9
 8000886:	4619      	mov	r1, r3
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <extract_data+0x6c>)
 800088a:	f005 fff5 	bl	8006878 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <extract_data+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	725a      	strb	r2, [r3, #9]
		         //token = strtok(NULL, ",");
		     }


}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08007c20 	.word	0x08007c20
 800089c:	200000a4 	.word	0x200000a4
 80008a0:	20000150 	.word	0x20000150
 80008a4:	20000138 	.word	0x20000138
 80008a8:	20000144 	.word	0x20000144

080008ac <pin_config>:
//	 s[3]=d.gpio[3];
//	 s[4]=d.SCANTIME;
//}

void pin_config()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"B0")==0)
 80008b0:	497a      	ldr	r1, [pc, #488]	; (8000a9c <pin_config+0x1f0>)
 80008b2:	487b      	ldr	r0, [pc, #492]	; (8000aa0 <pin_config+0x1f4>)
 80008b4:	f7ff fc8c 	bl	80001d0 <strcmp>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d103      	bne.n	80008c6 <pin_config+0x1a>
			     {
			       switch_val=1;
 80008be:	4b79      	ldr	r3, [pc, #484]	; (8000aa4 <pin_config+0x1f8>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	e040      	b.n	8000948 <pin_config+0x9c>
			     }

	            else if(strcmp(arr1,"B1")==0)
 80008c6:	4978      	ldr	r1, [pc, #480]	; (8000aa8 <pin_config+0x1fc>)
 80008c8:	4875      	ldr	r0, [pc, #468]	; (8000aa0 <pin_config+0x1f4>)
 80008ca:	f7ff fc81 	bl	80001d0 <strcmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d103      	bne.n	80008dc <pin_config+0x30>
				 {
				   switch_val=2;
 80008d4:	4b73      	ldr	r3, [pc, #460]	; (8000aa4 <pin_config+0x1f8>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	e035      	b.n	8000948 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"B4")==0)
 80008dc:	4973      	ldr	r1, [pc, #460]	; (8000aac <pin_config+0x200>)
 80008de:	4870      	ldr	r0, [pc, #448]	; (8000aa0 <pin_config+0x1f4>)
 80008e0:	f7ff fc76 	bl	80001d0 <strcmp>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d103      	bne.n	80008f2 <pin_config+0x46>
	           	 {
	           		switch_val=3;
 80008ea:	4b6e      	ldr	r3, [pc, #440]	; (8000aa4 <pin_config+0x1f8>)
 80008ec:	2203      	movs	r2, #3
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	e02a      	b.n	8000948 <pin_config+0x9c>
	           	 }

	            else if(strcmp(arr1,"B5")==0)
 80008f2:	496f      	ldr	r1, [pc, #444]	; (8000ab0 <pin_config+0x204>)
 80008f4:	486a      	ldr	r0, [pc, #424]	; (8000aa0 <pin_config+0x1f4>)
 80008f6:	f7ff fc6b 	bl	80001d0 <strcmp>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d103      	bne.n	8000908 <pin_config+0x5c>
                 {
				    switch_val=4;
 8000900:	4b68      	ldr	r3, [pc, #416]	; (8000aa4 <pin_config+0x1f8>)
 8000902:	2204      	movs	r2, #4
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e01f      	b.n	8000948 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"ADC1")==0)
 8000908:	496a      	ldr	r1, [pc, #424]	; (8000ab4 <pin_config+0x208>)
 800090a:	4865      	ldr	r0, [pc, #404]	; (8000aa0 <pin_config+0x1f4>)
 800090c:	f7ff fc60 	bl	80001d0 <strcmp>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d103      	bne.n	800091e <pin_config+0x72>
				 {
					switch_val=5;
 8000916:	4b63      	ldr	r3, [pc, #396]	; (8000aa4 <pin_config+0x1f8>)
 8000918:	2205      	movs	r2, #5
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e014      	b.n	8000948 <pin_config+0x9c>
				 }

	            else if(strcmp(arr1,"RTC")==0)
 800091e:	4966      	ldr	r1, [pc, #408]	; (8000ab8 <pin_config+0x20c>)
 8000920:	485f      	ldr	r0, [pc, #380]	; (8000aa0 <pin_config+0x1f4>)
 8000922:	f7ff fc55 	bl	80001d0 <strcmp>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d103      	bne.n	8000934 <pin_config+0x88>
	             {
	            	switch_val=6;
 800092c:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <pin_config+0x1f8>)
 800092e:	2206      	movs	r2, #6
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e009      	b.n	8000948 <pin_config+0x9c>
	             }

	            else if(strcmp(arr1,"SCANTIME")==0)
 8000934:	4961      	ldr	r1, [pc, #388]	; (8000abc <pin_config+0x210>)
 8000936:	485a      	ldr	r0, [pc, #360]	; (8000aa0 <pin_config+0x1f4>)
 8000938:	f7ff fc4a 	bl	80001d0 <strcmp>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <pin_config+0x9c>
				 {
					switch_val=7;
 8000942:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <pin_config+0x1f8>)
 8000944:	2207      	movs	r2, #7
 8000946:	601a      	str	r2, [r3, #0]
				 }


			     switch(switch_val)
 8000948:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <pin_config+0x1f8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3b01      	subs	r3, #1
 800094e:	2b06      	cmp	r3, #6
 8000950:	f200 80a2 	bhi.w	8000a98 <pin_config+0x1ec>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <pin_config+0xb0>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	08000979 	.word	0x08000979
 8000960:	080009b9 	.word	0x080009b9
 8000964:	080009f9 	.word	0x080009f9
 8000968:	08000a39 	.word	0x08000a39
 800096c:	08000a99 	.word	0x08000a99
 8000970:	08000a99 	.word	0x08000a99
 8000974:	08000a79 	.word	0x08000a79
			     {

			     case 1:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 8000978:	4951      	ldr	r1, [pc, #324]	; (8000ac0 <pin_config+0x214>)
 800097a:	4852      	ldr	r0, [pc, #328]	; (8000ac4 <pin_config+0x218>)
 800097c:	f7ff fc28 	bl	80001d0 <strcmp>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d108      	bne.n	8000998 <pin_config+0xec>
						{
			              user_GPIO_Init(GPIOB,GPIO_PIN_0,OUTPUT);
 8000986:	2200      	movs	r2, #0
 8000988:	2101      	movs	r1, #1
 800098a:	484f      	ldr	r0, [pc, #316]	; (8000ac8 <pin_config+0x21c>)
 800098c:	f000 fab6 	bl	8000efc <user_GPIO_Init>
					      config[0] = 0;
 8000990:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <pin_config+0x220>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
			              else if(strcmp(arr2,"INPUT")==0)
					    {
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
						   config[0] = 1;
					    }
			     break;
 8000996:	e078      	b.n	8000a8a <pin_config+0x1de>
			              else if(strcmp(arr2,"INPUT")==0)
 8000998:	494d      	ldr	r1, [pc, #308]	; (8000ad0 <pin_config+0x224>)
 800099a:	484a      	ldr	r0, [pc, #296]	; (8000ac4 <pin_config+0x218>)
 800099c:	f7ff fc18 	bl	80001d0 <strcmp>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d171      	bne.n	8000a8a <pin_config+0x1de>
						   user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2101      	movs	r1, #1
 80009aa:	4847      	ldr	r0, [pc, #284]	; (8000ac8 <pin_config+0x21c>)
 80009ac:	f000 faa6 	bl	8000efc <user_GPIO_Init>
						   config[0] = 1;
 80009b0:	4b46      	ldr	r3, [pc, #280]	; (8000acc <pin_config+0x220>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
			     break;
 80009b6:	e068      	b.n	8000a8a <pin_config+0x1de>

			   case 2:
				    	if(strcmp(arr2,"OUTPUT")==0)
 80009b8:	4941      	ldr	r1, [pc, #260]	; (8000ac0 <pin_config+0x214>)
 80009ba:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <pin_config+0x218>)
 80009bc:	f7ff fc08 	bl	80001d0 <strcmp>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d108      	bne.n	80009d8 <pin_config+0x12c>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_1,OUTPUT);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	483f      	ldr	r0, [pc, #252]	; (8000ac8 <pin_config+0x21c>)
 80009cc:	f000 fa96 	bl	8000efc <user_GPIO_Init>
			    	      config[1]=0;
 80009d0:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <pin_config+0x220>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	705a      	strb	r2, [r3, #1]
			    	     else if(strcmp(arr2,"INPUT")==0)
			    		{
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
			    		  config[1]=1;
			    		}
	    	    break;
 80009d6:	e05a      	b.n	8000a8e <pin_config+0x1e2>
			    	     else if(strcmp(arr2,"INPUT")==0)
 80009d8:	493d      	ldr	r1, [pc, #244]	; (8000ad0 <pin_config+0x224>)
 80009da:	483a      	ldr	r0, [pc, #232]	; (8000ac4 <pin_config+0x218>)
 80009dc:	f7ff fbf8 	bl	80001d0 <strcmp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d153      	bne.n	8000a8e <pin_config+0x1e2>
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2102      	movs	r1, #2
 80009ea:	4837      	ldr	r0, [pc, #220]	; (8000ac8 <pin_config+0x21c>)
 80009ec:	f000 fa86 	bl	8000efc <user_GPIO_Init>
			    		  config[1]=1;
 80009f0:	4b36      	ldr	r3, [pc, #216]	; (8000acc <pin_config+0x220>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	705a      	strb	r2, [r3, #1]
	    	    break;
 80009f6:	e04a      	b.n	8000a8e <pin_config+0x1e2>

			     case 3:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 80009f8:	4931      	ldr	r1, [pc, #196]	; (8000ac0 <pin_config+0x214>)
 80009fa:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <pin_config+0x218>)
 80009fc:	f7ff fbe8 	bl	80001d0 <strcmp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d108      	bne.n	8000a18 <pin_config+0x16c>
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2110      	movs	r1, #16
 8000a0a:	482f      	ldr	r0, [pc, #188]	; (8000ac8 <pin_config+0x21c>)
 8000a0c:	f000 fa76 	bl	8000efc <user_GPIO_Init>
			     		  config[2]=0;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <pin_config+0x220>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	709a      	strb	r2, [r3, #2]
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			     		  config[2]=1;
			     		}

			     break;
 8000a16:	e03c      	b.n	8000a92 <pin_config+0x1e6>
			     		 else if(strcmp(arr2,"INPUT")==0)
 8000a18:	492d      	ldr	r1, [pc, #180]	; (8000ad0 <pin_config+0x224>)
 8000a1a:	482a      	ldr	r0, [pc, #168]	; (8000ac4 <pin_config+0x218>)
 8000a1c:	f7ff fbd8 	bl	80001d0 <strcmp>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d135      	bne.n	8000a92 <pin_config+0x1e6>
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2110      	movs	r1, #16
 8000a2a:	4827      	ldr	r0, [pc, #156]	; (8000ac8 <pin_config+0x21c>)
 8000a2c:	f000 fa66 	bl	8000efc <user_GPIO_Init>
			     		  config[2]=1;
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <pin_config+0x220>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	709a      	strb	r2, [r3, #2]
			     break;
 8000a36:	e02c      	b.n	8000a92 <pin_config+0x1e6>

			     case 4:
			    	 	 if(strcmp(arr2,"OUTPUT")==0)
 8000a38:	4921      	ldr	r1, [pc, #132]	; (8000ac0 <pin_config+0x214>)
 8000a3a:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <pin_config+0x218>)
 8000a3c:	f7ff fbc8 	bl	80001d0 <strcmp>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d108      	bne.n	8000a58 <pin_config+0x1ac>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <pin_config+0x21c>)
 8000a4c:	f000 fa56 	bl	8000efc <user_GPIO_Init>
			    		  config[3]=0;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <pin_config+0x220>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	70da      	strb	r2, [r3, #3]
			    		  else if(strcmp(arr2,"INPUT")==0)
			    	    {
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
			              config[3]=1;
			    	    }
			     break;
 8000a56:	e01e      	b.n	8000a96 <pin_config+0x1ea>
			    		  else if(strcmp(arr2,"INPUT")==0)
 8000a58:	491d      	ldr	r1, [pc, #116]	; (8000ad0 <pin_config+0x224>)
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <pin_config+0x218>)
 8000a5c:	f7ff fbb8 	bl	80001d0 <strcmp>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d117      	bne.n	8000a96 <pin_config+0x1ea>
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <pin_config+0x21c>)
 8000a6c:	f000 fa46 	bl	8000efc <user_GPIO_Init>
			              config[3]=1;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <pin_config+0x220>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	70da      	strb	r2, [r3, #3]
			     break;
 8000a76:	e00e      	b.n	8000a96 <pin_config+0x1ea>
//				 }
//				 Set_Time(time);
//
//			 break;
			     case 7:
			    	 d.scan_time = (uint8_t)atoi(arr2);
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <pin_config+0x218>)
 8000a7a:	f005 fd72 	bl	8006562 <atoi>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <pin_config+0x228>)
 8000a84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
//			    	 DataTOgsm(d);
			     }
}
 8000a88:	e006      	b.n	8000a98 <pin_config+0x1ec>
			     break;
 8000a8a:	bf00      	nop
 8000a8c:	e004      	b.n	8000a98 <pin_config+0x1ec>
	    	    break;
 8000a8e:	bf00      	nop
 8000a90:	e002      	b.n	8000a98 <pin_config+0x1ec>
			     break;
 8000a92:	bf00      	nop
 8000a94:	e000      	b.n	8000a98 <pin_config+0x1ec>
			     break;
 8000a96:	bf00      	nop
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08007c24 	.word	0x08007c24
 8000aa0:	20000138 	.word	0x20000138
 8000aa4:	200000a0 	.word	0x200000a0
 8000aa8:	08007c28 	.word	0x08007c28
 8000aac:	08007c2c 	.word	0x08007c2c
 8000ab0:	08007c30 	.word	0x08007c30
 8000ab4:	08007c34 	.word	0x08007c34
 8000ab8:	08007c3c 	.word	0x08007c3c
 8000abc:	08007c40 	.word	0x08007c40
 8000ac0:	08007c4c 	.word	0x08007c4c
 8000ac4:	20000144 	.word	0x20000144
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	2000015c 	.word	0x2000015c
 8000ad0:	08007c54 	.word	0x08007c54
 8000ad4:	20000160 	.word	0x20000160

08000ad8 <UART2_Init>:

UART_HandleTypeDef huart2;


void UART2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <UART2_Init+0x58>)
 8000ade:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <UART2_Init+0x5c>)
 8000ae0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <UART2_Init+0x58>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <UART2_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <UART2_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <UART2_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <UART2_Init+0x58>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <UART2_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <UART2_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <UART2_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <UART2_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <UART2_Init+0x58>)
 8000b1c:	f004 f82e 	bl	8004b7c <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <UART2_Init+0x52>
	{
		Error_Handler();
 8000b26:	f000 fc99 	bl	800145c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000250 	.word	0x20000250
 8000b34:	40004400 	.word	0x40004400

08000b38 <DataToUart>:
//{
//	HAL_UART_Transmit(&huart2, (uint8_t*)GPIO, 4,1000);
//}

void DataToUart()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af0a      	add	r7, sp, #40	; 0x28
//	extern buffer_Time;
//	sprintf(buffer_Time,"%02d:%02d:%02d",d1->hr,d1->min,d1->sec);
//	HAL_UART_Transmit(&huart2, (uint8_t*)d->GPIO, 4, HAL_MAX_DELAY);

	sprintf(buf,"%02d:%02d:%02d,%s,%s,%s,%s,%s,%s,%s,%s\r\n",d.hr,d.min,d.sec,d.CH1,d.CH2,d.CH3,d.CH4,d.Status1,d.Status2,d.Status3,d.Status4);
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <DataToUart+0x64>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <DataToUart+0x64>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <DataToUart+0x64>)
 8000b4c:	789b      	ldrb	r3, [r3, #2]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <DataToUart+0x68>)
 8000b52:	9308      	str	r3, [sp, #32]
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <DataToUart+0x6c>)
 8000b56:	9307      	str	r3, [sp, #28]
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <DataToUart+0x70>)
 8000b5a:	9306      	str	r3, [sp, #24]
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <DataToUart+0x74>)
 8000b5e:	9305      	str	r3, [sp, #20]
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <DataToUart+0x78>)
 8000b62:	9304      	str	r3, [sp, #16]
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <DataToUart+0x7c>)
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <DataToUart+0x80>)
 8000b6a:	9302      	str	r3, [sp, #8]
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <DataToUart+0x84>)
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	9200      	str	r2, [sp, #0]
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	4912      	ldr	r1, [pc, #72]	; (8000bc0 <DataToUart+0x88>)
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <DataToUart+0x8c>)
 8000b7a:	f005 fe5d 	bl	8006838 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <DataToUart+0x8c>)
 8000b80:	f7ff fb30 	bl	80001e4 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <DataToUart+0x8c>)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <DataToUart+0x90>)
 8000b90:	f004 f842 	bl	8004c18 <HAL_UART_Transmit>
//	HAL_Delay(1000);

}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000160 	.word	0x20000160
 8000ba0:	200001ae 	.word	0x200001ae
 8000ba4:	200001a4 	.word	0x200001a4
 8000ba8:	2000019a 	.word	0x2000019a
 8000bac:	20000190 	.word	0x20000190
 8000bb0:	20000181 	.word	0x20000181
 8000bb4:	20000177 	.word	0x20000177
 8000bb8:	2000016d 	.word	0x2000016d
 8000bbc:	20000163 	.word	0x20000163
 8000bc0:	08007c5c 	.word	0x08007c5c
 8000bc4:	200001b8 	.word	0x200001b8
 8000bc8:	20000250 	.word	0x20000250

08000bcc <GsmCommands>:



void GsmCommands(uint8_t* cmd)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fb05 	bl	80001e4 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4808      	ldr	r0, [pc, #32]	; (8000c04 <GsmCommands+0x38>)
 8000be4:	f004 f97e 	bl	8004ee4 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 8000be8:	2264      	movs	r2, #100	; 0x64
 8000bea:	4907      	ldr	r1, [pc, #28]	; (8000c08 <GsmCommands+0x3c>)
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <GsmCommands+0x38>)
 8000bee:	f004 f9e7 	bl	8004fc0 <HAL_UART_Receive_IT>
	HAL_Delay(1000);
 8000bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf6:	f000 ff51 	bl	8001a9c <HAL_Delay>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000250 	.word	0x20000250
 8000c08:	200001ec 	.word	0x200001ec

08000c0c <Gsm_Init>:



void Gsm_Init()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

	HAL_Delay(2000);
 8000c10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c14:	f000 ff42 	bl	8001a9c <HAL_Delay>


	GsmCommands((uint8_t*)"AT\r\n");
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <Gsm_Init+0x34>)
 8000c1a:	f7ff ffd7 	bl	8000bcc <GsmCommands>
	GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <Gsm_Init+0x38>)
 8000c20:	f7ff ffd4 	bl	8000bcc <GsmCommands>
	GsmCommands((uint8_t*)"AT+CSQ\r\n");
 8000c24:	4808      	ldr	r0, [pc, #32]	; (8000c48 <Gsm_Init+0x3c>)
 8000c26:	f7ff ffd1 	bl	8000bcc <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <Gsm_Init+0x40>)
 8000c2c:	f7ff ffce 	bl	8000bcc <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"airtelgprs.com\"\r\n");
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <Gsm_Init+0x44>)
 8000c32:	f7ff ffcb 	bl	8000bcc <GsmCommands>
	GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 8000c36:	4807      	ldr	r0, [pc, #28]	; (8000c54 <Gsm_Init+0x48>)
 8000c38:	f7ff ffc8 	bl	8000bcc <GsmCommands>

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	08007c88 	.word	0x08007c88
 8000c44:	08007c90 	.word	0x08007c90
 8000c48:	08007c9c 	.word	0x08007c9c
 8000c4c:	08007ca8 	.word	0x08007ca8
 8000c50:	08007cb8 	.word	0x08007cb8
 8000c54:	08007ce0 	.word	0x08007ce0

08000c58 <DataToCloud>:


void DataToCloud(uint8_t* Time,uint8_t* Ch1,uint8_t* Ch2,uint8_t* Ch3,uint8_t* Ch4,uint8_t* D1,uint8_t* D2,uint8_t* D3,uint8_t* D4)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8000c5e:	af08      	add	r7, sp, #32
 8000c60:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8000c64:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8000c68:	6020      	str	r0, [r4, #0]
 8000c6a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8000c6e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8000c72:	6001      	str	r1, [r0, #0]
 8000c74:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000c78:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8000c7c:	600a      	str	r2, [r1, #0]
 8000c7e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000c82:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8000c86:	6013      	str	r3, [r2, #0]

	uint8_t AT_RTCcloud_data[500];

	char* encoded_Time = url_encode(Time);
 8000c88:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c8c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000c90:	6818      	ldr	r0, [r3, #0]
 8000c92:	f000 f89b 	bl	8000dcc <url_encode>
 8000c96:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	char* encoded_Ch1 = url_encode(Ch1);
 8000c9a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000c9e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	f000 f892 	bl	8000dcc <url_encode>
 8000ca8:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
	char* encoded_Ch2 = url_encode(Ch2);
 8000cac:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000cb0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	f000 f889 	bl	8000dcc <url_encode>
 8000cba:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	char* encoded_Ch3 = url_encode(Ch3);
 8000cbe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000cc2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	f000 f880 	bl	8000dcc <url_encode>
 8000ccc:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	char* encoded_Ch4 = url_encode(Ch4);
 8000cd0:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 8000cd4:	f000 f87a 	bl	8000dcc <url_encode>
 8000cd8:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	char* encoded_D1 = url_encode(D1);
 8000cdc:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000ce0:	f000 f874 	bl	8000dcc <url_encode>
 8000ce4:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	char* encoded_D2 = url_encode(D2);
 8000ce8:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8000cec:	f000 f86e 	bl	8000dcc <url_encode>
 8000cf0:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	char* encoded_D3 = url_encode(D3);
 8000cf4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8000cf8:	f000 f868 	bl	8000dcc <url_encode>
 8000cfc:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	char* encoded_D4 = url_encode(D4);
 8000d00:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8000d04:	f000 f862 	bl	8000dcc <url_encode>
 8000d08:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204


	//	RTCdata_to_cloud

	GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
 8000d0c:	482b      	ldr	r0, [pc, #172]	; (8000dbc <DataToCloud+0x164>)
 8000d0e:	f7ff ff5d 	bl	8000bcc <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 8000d12:	482b      	ldr	r0, [pc, #172]	; (8000dc0 <DataToCloud+0x168>)
 8000d14:	f7ff ff5a 	bl	8000bcc <GsmCommands>


	snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyM2Si83cN_Ieegenl17V6-CFZDiRIFlvHbPW19ydK0MydLo3YrItC4_J7xeOUK8FtQ/exec?field1=%s&field2=%s&field3=%s&field4=%s&field5=%s&field6=%s&field7=%s&field8=%s&field9=%s\"\r\n",encoded_Time, encoded_Ch1,encoded_Ch2,encoded_Ch3,encoded_Ch4,encoded_D1,encoded_D2,encoded_D3,encoded_D4);
 8000d18:	f107 0010 	add.w	r0, r7, #16
 8000d1c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000d20:	9307      	str	r3, [sp, #28]
 8000d22:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000d26:	9306      	str	r3, [sp, #24]
 8000d28:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d2c:	9305      	str	r3, [sp, #20]
 8000d2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000d32:	9304      	str	r3, [sp, #16]
 8000d34:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000d38:	9303      	str	r3, [sp, #12]
 8000d3a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000d50:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <DataToCloud+0x16c>)
 8000d52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d56:	f005 fd3b 	bl	80067d0 <sniprintf>


	GsmCommands((uint8_t*)AT_RTCcloud_data);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff34 	bl	8000bcc <GsmCommands>
	GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <DataToCloud+0x170>)
 8000d66:	f7ff ff31 	bl	8000bcc <GsmCommands>

	free(encoded_Time);
 8000d6a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8000d6e:	f005 fc2f 	bl	80065d0 <free>
	free(encoded_Ch1);
 8000d72:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8000d76:	f005 fc2b 	bl	80065d0 <free>
	free(encoded_Ch2);
 8000d7a:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8000d7e:	f005 fc27 	bl	80065d0 <free>
	free(encoded_Ch3);
 8000d82:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8000d86:	f005 fc23 	bl	80065d0 <free>
	free(encoded_Ch4);
 8000d8a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8000d8e:	f005 fc1f 	bl	80065d0 <free>
	free(encoded_D1);
 8000d92:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8000d96:	f005 fc1b 	bl	80065d0 <free>
	free(encoded_D2);
 8000d9a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000d9e:	f005 fc17 	bl	80065d0 <free>
	free(encoded_D3);
 8000da2:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8000da6:	f005 fc13 	bl	80065d0 <free>
	free(encoded_D4);
 8000daa:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8000dae:	f005 fc0f 	bl	80065d0 <free>

}
 8000db2:	bf00      	nop
 8000db4:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	08007cf0 	.word	0x08007cf0
 8000dc0:	08007d00 	.word	0x08007d00
 8000dc4:	08007d10 	.word	0x08007d10
 8000dc8:	08007df4 	.word	0x08007df4

08000dcc <url_encode>:



char* url_encode(const char* str)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	const char* hex = "0123456789ABCDEF";
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <url_encode+0xc8>)
 8000dd6:	613b      	str	r3, [r7, #16]
	char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fa03 	bl	80001e4 <strlen>
 8000dde:	4602      	mov	r2, r0
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	3301      	adds	r3, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 fbe9 	bl	80065c0 <malloc>
 8000dee:	4603      	mov	r3, r0
 8000df0:	60fb      	str	r3, [r7, #12]
	char* ptr = encoded;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	617b      	str	r3, [r7, #20]

	while (*str) {
 8000df6:	e040      	b.n	8000e7a <url_encode+0xae>
		if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <url_encode+0xcc>)
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10f      	bne.n	8000e2c <url_encode+0x60>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b2d      	cmp	r3, #45	; 0x2d
 8000e12:	d00b      	beq.n	8000e2c <url_encode+0x60>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b5f      	cmp	r3, #95	; 0x5f
 8000e1a:	d007      	beq.n	8000e2c <url_encode+0x60>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b2e      	cmp	r3, #46	; 0x2e
 8000e22:	d003      	beq.n	8000e2c <url_encode+0x60>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b7e      	cmp	r3, #126	; 0x7e
 8000e2a:	d106      	bne.n	8000e3a <url_encode+0x6e>
			*ptr++ = *str;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	617a      	str	r2, [r7, #20]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e01c      	b.n	8000e74 <url_encode+0xa8>
		} else {
			*ptr++ = '%';
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	617a      	str	r2, [r7, #20]
 8000e40:	2225      	movs	r2, #37	; 0x25
 8000e42:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[(*str >> 4) & 0xF];
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f003 030f 	and.w	r3, r3, #15
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	441a      	add	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	1c59      	adds	r1, r3, #1
 8000e58:	6179      	str	r1, [r7, #20]
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
			*ptr++ = hex[*str & 0xF];
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	441a      	add	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	1c59      	adds	r1, r3, #1
 8000e6e:	6179      	str	r1, [r7, #20]
 8000e70:	7812      	ldrb	r2, [r2, #0]
 8000e72:	701a      	strb	r2, [r3, #0]
		}
		str++;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1ba      	bne.n	8000df8 <url_encode+0x2c>
	}
	*ptr = '\0';
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
	return encoded;
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08007e08 	.word	0x08007e08
 8000e98:	08007e84 	.word	0x08007e84

08000e9c <user_USART1_UART_Init>:
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

 void user_USART1_UART_Init(void)
 {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
 ////////////////////
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <user_USART1_UART_Init+0x5c>)
 8000ea4:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <user_USART1_UART_Init+0x58>)
 8000ee0:	f003 fe4c 	bl	8004b7c <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <user_USART1_UART_Init+0x52>
   {
     Error_Handler();
 8000eea:	f000 fab7 	bl	800145c <Error_Handler>
   }

 }
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000b4 	.word	0x200000b4
 8000ef8:	40013800 	.word	0x40013800

08000efc <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	707b      	strb	r3, [r7, #1]
   //GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <user_GPIO_Init+0xac>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8000f54:	787a      	ldrb	r2, [r7, #1]
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f001 f8e2 	bl	8002124 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <user_GPIO_Init+0x78>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8000f66:	787a      	ldrb	r2, [r7, #1]
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f81f 	bl	8000fb0 <gpio_output>
 8000f72:	e008      	b.n	8000f86 <user_GPIO_Init+0x8a>
     }
     else if(PIN_mode == INPUT)
 8000f74:	787b      	ldrb	r3, [r7, #1]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <user_GPIO_Init+0x8a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 8000f7a:	787a      	ldrb	r2, [r7, #1]
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f837 	bl	8000ff4 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <user_GPIO_Init+0xb0>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <user_GPIO_Init+0xb0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <user_GPIO_Init+0xb0>)
 8000f94:	2203      	movs	r2, #3
 8000f96:	60da      	str	r2, [r3, #12]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <user_GPIO_Init+0xb0>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	200002d4 	.word	0x200002d4

08000fb0 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 ff1a 	bl	8001e20 <HAL_GPIO_Init>
 }
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fefa 	bl	8001e20 <HAL_GPIO_Init>
 }
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <data_receive>:




void data_receive()
 {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	 if (HAL_UART_Receive(&huart1,(uint8_t *)tx_data,20,1000) == HAL_ERROR)
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	2214      	movs	r2, #20
 800103e:	4905      	ldr	r1, [pc, #20]	; (8001054 <data_receive+0x20>)
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <data_receive+0x24>)
 8001042:	f003 fe7d 	bl	8004d40 <HAL_UART_Receive>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <data_receive+0x1c>
	 {
			 Error_Handler();
 800104c:	f000 fa06 	bl	800145c <Error_Handler>
	 }
 }
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200000a4 	.word	0x200000a4
 8001058:	200000b4 	.word	0x200000b4

0800105c <read_gpio>:
//		 Error_Handler();
//	 }
// }

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f001 f841 	bl	80020f4 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0

 }
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <write_gpio>:

 myPinState write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 800108c:	787a      	ldrb	r2, [r7, #1]
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f001 f846 	bl	8002124 <HAL_GPIO_WritePin>
    return PinState;
 8001098:	787b      	ldrb	r3, [r7, #1]
 }
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <dec_bcd>:


//decimal to bcd convertion

uint8_t dec_bcd(int val)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16)+(val%10));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <dec_bcd+0x48>)
 80010b0:	fb82 1203 	smull	r1, r2, r2, r3
 80010b4:	1092      	asrs	r2, r2, #2
 80010b6:	17db      	asrs	r3, r3, #31
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	b2d8      	uxtb	r0, r3
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <dec_bcd+0x48>)
 80010c4:	fb83 1302 	smull	r1, r3, r3, r2
 80010c8:	1099      	asrs	r1, r3, #2
 80010ca:	17d3      	asrs	r3, r2, #31
 80010cc:	1ac9      	subs	r1, r1, r3
 80010ce:	460b      	mov	r3, r1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	1ad1      	subs	r1, r2, r3
 80010d8:	b2cb      	uxtb	r3, r1
 80010da:	4403      	add	r3, r0
 80010dc:	b2db      	uxtb	r3, r3
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	66666667 	.word	0x66666667

080010f0 <bcd_dec>:

//bcd to decimal convertion

int bcd_dec(uint8_t val)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	461a      	mov	r2, r3
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	4413      	add	r3, r2
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f000 fc44 	bl	80019b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f855 	bl	80011d8 <SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
//  MX_USART1_UART_Init();
  MX_I2C3_Init();
 800112e:	f000 f8b5 	bl	800129c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  UART2_Init();
 8001132:	f7ff fcd1 	bl	8000ad8 <UART2_Init>
//  user_SystemClock_Config();
  user_USART1_UART_Init();
 8001136:	f7ff feb1 	bl	8000e9c <user_USART1_UART_Init>
  	set_time(00,30,2,5,30,7,24);
 800113a:	2318      	movs	r3, #24
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2307      	movs	r3, #7
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	231e      	movs	r3, #30
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2305      	movs	r3, #5
 8001148:	2202      	movs	r2, #2
 800114a:	211e      	movs	r1, #30
 800114c:	2000      	movs	r0, #0
 800114e:	f000 f8e5 	bl	800131c <set_time>

  	  Gsm_Init();
 8001152:	f7ff fd5b 	bl	8000c0c <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Configurator();
 8001156:	f7ff fab9 	bl	80006cc <Configurator>
	  get_time();
 800115a:	f000 f92f 	bl	80013bc <get_time>
	  d.hr=time.hour;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <main+0x90>)
 8001160:	789a      	ldrb	r2, [r3, #2]
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <main+0x94>)
 8001164:	701a      	strb	r2, [r3, #0]
	  d.min=time.minutes;
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <main+0x90>)
 8001168:	785a      	ldrb	r2, [r3, #1]
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <main+0x94>)
 800116c:	705a      	strb	r2, [r3, #1]
	  d.sec=time.seconds;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <main+0x90>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x94>)
 8001174:	709a      	strb	r2, [r3, #2]
	  strcpy(d.CH1, "ADC1");
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <main+0x98>)
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <main+0x9c>)
 800117a:	6810      	ldr	r0, [r2, #0]
 800117c:	6018      	str	r0, [r3, #0]
 800117e:	7912      	ldrb	r2, [r2, #4]
 8001180:	711a      	strb	r2, [r3, #4]
	  strcpy(d.CH2, "ADC2");
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <main+0xa0>)
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <main+0xa4>)
 8001186:	6810      	ldr	r0, [r2, #0]
 8001188:	6018      	str	r0, [r3, #0]
 800118a:	7912      	ldrb	r2, [r2, #4]
 800118c:	711a      	strb	r2, [r3, #4]
	  strcpy(d.CH3, "ADC3");
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <main+0xa8>)
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <main+0xac>)
 8001192:	6810      	ldr	r0, [r2, #0]
 8001194:	6018      	str	r0, [r3, #0]
 8001196:	7912      	ldrb	r2, [r2, #4]
 8001198:	711a      	strb	r2, [r3, #4]
	  strcpy(d.CH4, "ADC4");
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <main+0xb0>)
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <main+0xb4>)
 800119e:	6810      	ldr	r0, [r2, #0]
 80011a0:	6018      	str	r0, [r3, #0]
 80011a2:	7912      	ldrb	r2, [r2, #4]
 80011a4:	711a      	strb	r2, [r3, #4]
//	  d1.GPIO[0]='SOH';
//	  d1.GPIO[1]='1';
//	  d1.GPIO[2]='1';
//	  d1.GPIO[3]='1';
//	  strcpy(d1.GPIO,"1001");
	  	  		DataToGsm();
 80011a6:	f7ff f9fd 	bl	80005a4 <DataToGsm>
	  //		HAL_Delay(2000);
	  		DataToUart();
 80011aa:	f7ff fcc5 	bl	8000b38 <DataToUart>
	  Configurator();
 80011ae:	e7d2      	b.n	8001156 <main+0x36>
 80011b0:	200002e8 	.word	0x200002e8
 80011b4:	20000160 	.word	0x20000160
 80011b8:	20000163 	.word	0x20000163
 80011bc:	08007e1c 	.word	0x08007e1c
 80011c0:	2000016d 	.word	0x2000016d
 80011c4:	08007e24 	.word	0x08007e24
 80011c8:	20000177 	.word	0x20000177
 80011cc:	08007e2c 	.word	0x08007e2c
 80011d0:	20000181 	.word	0x20000181
 80011d4:	08007e34 	.word	0x08007e34

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2244      	movs	r2, #68	; 0x44
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f005 f9fa 	bl	80065e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011fe:	f002 fb37 	bl	8003870 <HAL_PWREx_ControlVoltageScaling>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001208:	f000 f928 	bl	800145c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800120c:	f002 fb12 	bl	8003834 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <SystemClock_Config+0xc0>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001216:	4a20      	ldr	r2, [pc, #128]	; (8001298 <SystemClock_Config+0xc0>)
 8001218:	f023 0318 	bic.w	r3, r3, #24
 800121c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001220:	2314      	movs	r3, #20
 8001222:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001238:	2301      	movs	r3, #1
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001240:	2310      	movs	r3, #16
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001244:	2307      	movs	r3, #7
 8001246:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800124c:	2302      	movs	r3, #2
 800124e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fb61 	bl	800391c <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001260:	f000 f8fc 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2303      	movs	r3, #3
 800126a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	2101      	movs	r1, #1
 800127c:	4618      	mov	r0, r3
 800127e:	f002 ff61 	bl	8004144 <HAL_RCC_ClockConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001288:	f000 f8e8 	bl	800145c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800128c:	f003 fb74 	bl	8004978 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001290:	bf00      	nop
 8001292:	3758      	adds	r7, #88	; 0x58
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000

0800129c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <MX_I2C3_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <MX_I2C3_Init+0x7c>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_I2C3_Init+0x74>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d8:	f000 ff3c 	bl	8002154 <HAL_I2C_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012e2:	f000 f8bb 	bl	800145c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ea:	f002 fa0b 	bl	8003704 <HAL_I2CEx_ConfigAnalogFilter>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012f4:	f000 f8b2 	bl	800145c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_I2C3_Init+0x74>)
 80012fc:	f002 fa4d 	bl	800379a <HAL_I2CEx_ConfigDigitalFilter>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001306:	f000 f8a9 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002f0 	.word	0x200002f0
 8001314:	40005c00 	.word	0x40005c00
 8001318:	00707cbb 	.word	0x00707cbb

0800131c <set_time>:
//
///* USER CODE BEGIN 4 */


void set_time(uint8_t sec,uint8_t min,uint8_t hr,uint8_t day,uint8_t dat,uint8_t mon,uint8_t yr)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af04      	add	r7, sp, #16
 8001322:	4604      	mov	r4, r0
 8001324:	4608      	mov	r0, r1
 8001326:	4611      	mov	r1, r2
 8001328:	461a      	mov	r2, r3
 800132a:	4623      	mov	r3, r4
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	4603      	mov	r3, r0
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	460b      	mov	r3, r1
 8001334:	717b      	strb	r3, [r7, #5]
 8001336:	4613      	mov	r3, r2
 8001338:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0]=dec_bcd(sec);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff feb1 	bl	80010a4 <dec_bcd>
 8001342:	4603      	mov	r3, r0
 8001344:	723b      	strb	r3, [r7, #8]
	set_time[1]=dec_bcd(min);
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff feab 	bl	80010a4 <dec_bcd>
 800134e:	4603      	mov	r3, r0
 8001350:	727b      	strb	r3, [r7, #9]
	set_time[2]=dec_bcd(hr);
 8001352:	797b      	ldrb	r3, [r7, #5]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fea5 	bl	80010a4 <dec_bcd>
 800135a:	4603      	mov	r3, r0
 800135c:	72bb      	strb	r3, [r7, #10]
	set_time[3]=dec_bcd(day);
 800135e:	793b      	ldrb	r3, [r7, #4]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe9f 	bl	80010a4 <dec_bcd>
 8001366:	4603      	mov	r3, r0
 8001368:	72fb      	strb	r3, [r7, #11]
	set_time[4]=dec_bcd(dat);
 800136a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe98 	bl	80010a4 <dec_bcd>
 8001374:	4603      	mov	r3, r0
 8001376:	733b      	strb	r3, [r7, #12]
	set_time[5]=dec_bcd(mon);
 8001378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe91 	bl	80010a4 <dec_bcd>
 8001382:	4603      	mov	r3, r0
 8001384:	737b      	strb	r3, [r7, #13]
	set_time[6]=dec_bcd(yr);
 8001386:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe8a 	bl	80010a4 <dec_bcd>
 8001390:	4603      	mov	r3, r0
 8001392:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c3, RTC_add, 0x00, 1, set_time, 7, HAL_MAX_DELAY);  //1 bytes
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2307      	movs	r3, #7
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2200      	movs	r2, #0
 80013a8:	21d0      	movs	r1, #208	; 0xd0
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <set_time+0x9c>)
 80013ac:	f000 ff62 	bl	8002274 <HAL_I2C_Mem_Write>
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	200002f0 	.word	0x200002f0

080013bc <get_time>:


void get_time()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, RTC_add, 0x00, 1, get_time, 7, HAL_MAX_DELAY);
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2307      	movs	r3, #7
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	463b      	mov	r3, r7
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	2200      	movs	r2, #0
 80013d4:	21d0      	movs	r1, #208	; 0xd0
 80013d6:	481f      	ldr	r0, [pc, #124]	; (8001454 <get_time+0x98>)
 80013d8:	f001 f860 	bl	800249c <HAL_I2C_Mem_Read>
	time.seconds=bcd_dec(get_time[0]);
 80013dc:	783b      	ldrb	r3, [r7, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe86 	bl	80010f0 <bcd_dec>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <get_time+0x9c>)
 80013ea:	701a      	strb	r2, [r3, #0]
	time.minutes=bcd_dec(get_time[1]);
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe7e 	bl	80010f0 <bcd_dec>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <get_time+0x9c>)
 80013fa:	705a      	strb	r2, [r3, #1]
	time.hour=bcd_dec(get_time[2]);
 80013fc:	78bb      	ldrb	r3, [r7, #2]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fe76 	bl	80010f0 <bcd_dec>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <get_time+0x9c>)
 800140a:	709a      	strb	r2, [r3, #2]
	time.day=bcd_dec(get_time[3]);
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe6e 	bl	80010f0 <bcd_dec>
 8001414:	4603      	mov	r3, r0
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <get_time+0x9c>)
 800141a:	70da      	strb	r2, [r3, #3]
	time.date=bcd_dec(get_time[4]);
 800141c:	793b      	ldrb	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe66 	bl	80010f0 <bcd_dec>
 8001424:	4603      	mov	r3, r0
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <get_time+0x9c>)
 800142a:	711a      	strb	r2, [r3, #4]
	time.month=bcd_dec(get_time[5]);
 800142c:	797b      	ldrb	r3, [r7, #5]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fe5e 	bl	80010f0 <bcd_dec>
 8001434:	4603      	mov	r3, r0
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <get_time+0x9c>)
 800143a:	715a      	strb	r2, [r3, #5]
	time.year=bcd_dec(get_time[6]);
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe56 	bl	80010f0 <bcd_dec>
 8001444:	4603      	mov	r3, r0
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <get_time+0x9c>)
 800144a:	719a      	strb	r2, [r3, #6]
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200002f0 	.word	0x200002f0
 8001458:	200002e8 	.word	0x200002e8

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_MspInit+0x44>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_MspInit+0x44>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6613      	str	r3, [r2, #96]	; 0x60
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_MspInit+0x44>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_MspInit+0x44>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_MspInit+0x44>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6593      	str	r3, [r2, #88]	; 0x58
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_MspInit+0x44>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0a0      	sub	sp, #128	; 0x80
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2254      	movs	r2, #84	; 0x54
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 f885 	bl	80065e0 <memset>
  if(hi2c->Instance==I2C3)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a35      	ldr	r2, [pc, #212]	; (80015b0 <HAL_I2C_MspInit+0x100>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d163      	bne.n	80015a8 <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 f84c 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014fa:	f7ff ffaf 	bl	800145c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001532:	2312      	movs	r3, #18
 8001534:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800153e:	2304      	movs	r3, #4
 8001540:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f000 fc68 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001550:	2310      	movs	r3, #16
 8001552:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001554:	2312      	movs	r3, #18
 8001556:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001560:	2304      	movs	r3, #4
 8001562:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001568:	4619      	mov	r1, r3
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <HAL_I2C_MspInit+0x108>)
 800156c:	f000 fc58 	bl	8001e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 8001576:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800157a:	6593      	str	r3, [r2, #88]	; 0x58
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_I2C_MspInit+0x104>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2048      	movs	r0, #72	; 0x48
 800158e:	f000 fb84 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001592:	2048      	movs	r0, #72	; 0x48
 8001594:	f000 fb9d 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2049      	movs	r0, #73	; 0x49
 800159e:	f000 fb7c 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80015a2:	2049      	movs	r0, #73	; 0x49
 80015a4:	f000 fb95 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3780      	adds	r7, #128	; 0x80
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40005c00 	.word	0x40005c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000400 	.word	0x48000400

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0a0      	sub	sp, #128	; 0x80
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	2254      	movs	r2, #84	; 0x54
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 ffff 	bl	80065e0 <memset>
  if(huart->Instance==USART1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <HAL_UART_MspInit+0x144>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d140      	bne.n	800166e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015f0:	2300      	movs	r3, #0
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	4618      	mov	r0, r3
 80015fa:	f002 ffc7 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001604:	f7ff ff2a 	bl	800145c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001608:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <HAL_UART_MspInit+0x148>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160c:	4a3d      	ldr	r2, [pc, #244]	; (8001704 <HAL_UART_MspInit+0x148>)
 800160e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001612:	6613      	str	r3, [r2, #96]	; 0x60
 8001614:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <HAL_UART_MspInit+0x148>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_UART_MspInit+0x148>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_UART_MspInit+0x148>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_UART_MspInit+0x148>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001638:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800164a:	2307      	movs	r3, #7
 800164c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f000 fbe2 	bl	8001e20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2025      	movs	r0, #37	; 0x25
 8001662:	f000 fb1a 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001666:	2025      	movs	r0, #37	; 0x25
 8001668:	f000 fb33 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166c:	e043      	b.n	80016f6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_UART_MspInit+0x14c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d13e      	bne.n	80016f6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4618      	mov	r0, r3
 8001686:	f002 ff81 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001690:	f7ff fee4 	bl	800145c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_UART_MspInit+0x148>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_UART_MspInit+0x148>)
 800169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x148>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_UART_MspInit+0x148>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_UART_MspInit+0x148>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_UART_MspInit+0x148>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c4:	230c      	movs	r3, #12
 80016c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d4:	2307      	movs	r3, #7
 80016d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f000 fb9d 	bl	8001e20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2026      	movs	r0, #38	; 0x26
 80016ec:	f000 fad5 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016f0:	2026      	movs	r0, #38	; 0x26
 80016f2:	f000 faee 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3780      	adds	r7, #128	; 0x80
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40013800 	.word	0x40013800
 8001704:	40021000 	.word	0x40021000
 8001708:	40004400 	.word	0x40004400

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f980 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <USART1_IRQHandler+0x10>)
 8001766:	f003 fc81 	bl	800506c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000b4 	.word	0x200000b4

08001774 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <USART2_IRQHandler+0x10>)
 800177a:	f003 fc77 	bl	800506c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000250 	.word	0x20000250

08001788 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <I2C3_EV_IRQHandler+0x10>)
 800178e:	f000 ff9f 	bl	80026d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002f0 	.word	0x200002f0

0800179c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <I2C3_ER_IRQHandler+0x10>)
 80017a2:	f000 ffaf 	bl	8002704 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002f0 	.word	0x200002f0

080017b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return 1;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_kill>:

int _kill(int pid, int sig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ca:	f004 fecf 	bl	800656c <__errno>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2216      	movs	r2, #22
 80017d2:	601a      	str	r2, [r3, #0]
  return -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_exit>:

void _exit (int status)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f2:	e7fe      	b.n	80017f2 <_exit+0x12>

080017f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e00a      	b.n	800181c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001806:	f3af 8000 	nop.w
 800180a:	4601      	mov	r1, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf0      	blt.n	8001806 <_read+0x12>
  }

  return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e009      	b.n	8001854 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf1      	blt.n	8001840 <_write+0x12>
  }
  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_close>:

int _close(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188e:	605a      	str	r2, [r3, #4]
  return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_isatty>:

int _isatty(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f004 fe34 	bl	800656c <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20010000 	.word	0x20010000
 8001930:	00000400 	.word	0x00000400
 8001934:	20000344 	.word	0x20000344
 8001938:	20000360 	.word	0x20000360

0800193c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <SystemInit+0x20>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <SystemInit+0x20>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001964:	f7ff ffea 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <LoopForever+0x6>)
  ldr r1, =_edata
 800196a:	490d      	ldr	r1, [pc, #52]	; (80019a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <LoopForever+0xe>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001980:	4c0a      	ldr	r4, [pc, #40]	; (80019ac <LoopForever+0x16>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198e:	f004 fdf3 	bl	8006578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001992:	f7ff fbc5 	bl	8001120 <main>

08001996 <LoopForever>:

LoopForever:
    b LoopForever
 8001996:	e7fe      	b.n	8001996 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001998:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019a4:	080080e0 	.word	0x080080e0
  ldr r2, =_sbss
 80019a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019ac:	2000035c 	.word	0x2000035c

080019b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_IRQHandler>

080019b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f961 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f80e 	bl	80019e4 <HAL_InitTick>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	71fb      	strb	r3, [r7, #7]
 80019d2:	e001      	b.n	80019d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d4:	f7ff fd48 	bl	8001468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_InitTick+0x6c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_InitTick+0x70>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_InitTick+0x6c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f96d 	bl	8001cee <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10f      	bne.n	8001a3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d809      	bhi.n	8001a34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f937 	bl	8001c9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_InitTick+0x74>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e007      	b.n	8001a44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e004      	b.n	8001a44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	e001      	b.n	8001a44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000348 	.word	0x20000348

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000348 	.word	0x20000348

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	; (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	; 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d008      	beq.n	8001d30 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e022      	b.n	8001d76 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 020e 	bic.w	r2, r2, #14
 8001d3e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 021c 	and.w	r2, r3, #28
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d005      	beq.n	8001da6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e029      	b.n	8001dfa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 020e 	bic.w	r2, r2, #14
 8001db4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f003 021c 	and.w	r2, r3, #28
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
    }
  }
  return status;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e12:	b2db      	uxtb	r3, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	e148      	b.n	80020c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 813a 	beq.w	80020bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <HAL_GPIO_Init+0x40>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d130      	bne.n	8001ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e96:	2201      	movs	r2, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 0201 	and.w	r2, r3, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d017      	beq.n	8001efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d123      	bne.n	8001f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	6939      	ldr	r1, [r7, #16]
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0203 	and.w	r2, r3, #3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8094 	beq.w	80020bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f94:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa0:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fac:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_GPIO_Init+0x2c4>)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_GPIO_Init+0x1d4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a43      	ldr	r2, [pc, #268]	; (80020e8 <HAL_GPIO_Init+0x2c8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_Init+0x1d0>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a42      	ldr	r2, [pc, #264]	; (80020ec <HAL_GPIO_Init+0x2cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_GPIO_Init+0x1cc>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e004      	b.n	8001ff6 <HAL_GPIO_Init+0x1d6>
 8001fec:	2307      	movs	r3, #7
 8001fee:	e002      	b.n	8001ff6 <HAL_GPIO_Init+0x1d6>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_GPIO_Init+0x1d6>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	f002 0203 	and.w	r2, r2, #3
 8001ffc:	0092      	lsls	r2, r2, #2
 8001ffe:	4093      	lsls	r3, r2
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002006:	4937      	ldr	r1, [pc, #220]	; (80020e4 <HAL_GPIO_Init+0x2c4>)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002038:	4a2d      	ldr	r2, [pc, #180]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002062:	4a23      	ldr	r2, [pc, #140]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f aeaf 	bne.w	8001e30 <HAL_GPIO_Init+0x10>
  }
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010000 	.word	0x40010000
 80020e8:	48000400 	.word	0x48000400
 80020ec:	48000800 	.word	0x48000800
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002140:	e002      	b.n	8002148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e081      	b.n	800226a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff f998 	bl	80014b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	e006      	b.n	80021dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d104      	bne.n	80021ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69d9      	ldr	r1, [r3, #28]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	f040 80f9 	bne.w	800248e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x34>
 80022a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d105      	bne.n	80022b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ed      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Mem_Write+0x4e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0e6      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ca:	f7ff fbdb 	bl	8001a84 <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2319      	movs	r3, #25
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 ffd8 	bl	8003292 <I2C_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0d1      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002314:	88f8      	ldrh	r0, [r7, #6]
 8002316:	893a      	ldrh	r2, [r7, #8]
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4603      	mov	r3, r0
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fb91 	bl	8002a4c <I2C_RequestMemoryWrite>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0a9      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d90e      	bls.n	8002364 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	22ff      	movs	r2, #255	; 0xff
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	b2da      	uxtb	r2, r3
 8002352:	8979      	ldrh	r1, [r7, #10]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f001 f941 	bl	80035e4 <I2C_TransferConfig>
 8002362:	e00f      	b.n	8002384 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	b2da      	uxtb	r2, r3
 8002374:	8979      	ldrh	r1, [r7, #10]
 8002376:	2300      	movs	r3, #0
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f001 f930 	bl	80035e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 ffc2 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e07b      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d034      	beq.n	800243c <HAL_I2C_Mem_Write+0x1c8>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d130      	bne.n	800243c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 ff54 	bl	8003292 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e04d      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2bff      	cmp	r3, #255	; 0xff
 80023fc:	d90e      	bls.n	800241c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	22ff      	movs	r2, #255	; 0xff
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	2300      	movs	r3, #0
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f001 f8e5 	bl	80035e4 <I2C_TransferConfig>
 800241a:	e00f      	b.n	800243c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	b2da      	uxtb	r2, r3
 800242c:	8979      	ldrh	r1, [r7, #10]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f001 f8d4 	bl	80035e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d19e      	bne.n	8002384 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 ffa1 	bl	8003392 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e01a      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2220      	movs	r2, #32
 8002460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_I2C_Mem_Write+0x224>)
 800246e:	400b      	ands	r3, r1
 8002470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	fe00e800 	.word	0xfe00e800

0800249c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b20      	cmp	r3, #32
 80024c0:	f040 80fd 	bne.w	80026be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_I2C_Mem_Read+0x34>
 80024ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0f1      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Mem_Read+0x4e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0ea      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024f2:	f7ff fac7 	bl	8001a84 <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2319      	movs	r3, #25
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fec4 	bl	8003292 <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0d5      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2222      	movs	r2, #34	; 0x22
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002534:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253c:	88f8      	ldrh	r0, [r7, #6]
 800253e:	893a      	ldrh	r2, [r7, #8]
 8002540:	8979      	ldrh	r1, [r7, #10]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	4603      	mov	r3, r0
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fad1 	bl	8002af4 <I2C_RequestMemoryRead>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ad      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	d90e      	bls.n	800258c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	b2da      	uxtb	r2, r3
 800257a:	8979      	ldrh	r1, [r7, #10]
 800257c:	4b52      	ldr	r3, [pc, #328]	; (80026c8 <HAL_I2C_Mem_Read+0x22c>)
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f001 f82d 	bl	80035e4 <I2C_TransferConfig>
 800258a:	e00f      	b.n	80025ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	b2da      	uxtb	r2, r3
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_I2C_Mem_Read+0x22c>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f001 f81c 	bl	80035e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	2200      	movs	r2, #0
 80025b4:	2104      	movs	r1, #4
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fe6b 	bl	8003292 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07c      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d034      	beq.n	800266c <HAL_I2C_Mem_Read+0x1d0>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	2b00      	cmp	r3, #0
 8002608:	d130      	bne.n	800266c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	2200      	movs	r2, #0
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fe3c 	bl	8003292 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e04d      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2bff      	cmp	r3, #255	; 0xff
 800262c:	d90e      	bls.n	800264c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 ffcd 	bl	80035e4 <I2C_TransferConfig>
 800264a:	e00f      	b.n	800266c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	b2da      	uxtb	r2, r3
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 ffbc 	bl	80035e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d19a      	bne.n	80025ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fe89 	bl	8003392 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e01a      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2220      	movs	r2, #32
 8002690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_I2C_Mem_Read+0x230>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	80002400 	.word	0x80002400
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
  }
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	09db      	lsrs	r3, r3, #7
 800272c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002748:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	0a9b      	lsrs	r3, r3, #10
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d010      	beq.n	8002778 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	09db      	lsrs	r3, r3, #7
 800275a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f043 0208 	orr.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002776:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	09db      	lsrs	r3, r3, #7
 8002788:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	f043 0202 	orr.w	r2, r3, #2
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 030b 	and.w	r3, r3, #11
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fc31 	bl	8003020 <I2C_ITError>
  }
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	70fb      	strb	r3, [r7, #3]
 80027fa:	4613      	mov	r3, r2
 80027fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <I2C_Slave_ISR_IT+0x24>
 8002866:	2302      	movs	r3, #2
 8002868:	e0ec      	b.n	8002a44 <I2C_Slave_ISR_IT+0x1fe>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800288a:	6939      	ldr	r1, [r7, #16]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fa67 	bl	8002d60 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d04d      	beq.n	800293a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d047      	beq.n	800293a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d128      	bne.n	8002906 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b28      	cmp	r3, #40	; 0x28
 80028be:	d108      	bne.n	80028d2 <I2C_Slave_ISR_IT+0x8c>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028c6:	d104      	bne.n	80028d2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028c8:	6939      	ldr	r1, [r7, #16]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fb52 	bl	8002f74 <I2C_ITListenCplt>
 80028d0:	e032      	b.n	8002938 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b29      	cmp	r3, #41	; 0x29
 80028dc:	d10e      	bne.n	80028fc <I2C_Slave_ISR_IT+0xb6>
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e4:	d00a      	beq.n	80028fc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2210      	movs	r2, #16
 80028ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fc8d 	bl	800320e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f9d5 	bl	8002ca4 <I2C_ITSlaveSeqCplt>
 80028fa:	e01d      	b.n	8002938 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2210      	movs	r2, #16
 8002902:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002904:	e096      	b.n	8002a34 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2210      	movs	r2, #16
 800290c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f043 0204 	orr.w	r2, r3, #4
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <I2C_Slave_ISR_IT+0xe4>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002926:	f040 8085 	bne.w	8002a34 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4619      	mov	r1, r3
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fb75 	bl	8003020 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002936:	e07d      	b.n	8002a34 <I2C_Slave_ISR_IT+0x1ee>
 8002938:	e07c      	b.n	8002a34 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d030      	beq.n	80029a8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02a      	beq.n	80029a8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d018      	beq.n	800298e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d14f      	bne.n	8002a38 <I2C_Slave_ISR_IT+0x1f2>
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800299e:	d04b      	beq.n	8002a38 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f97f 	bl	8002ca4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80029a6:	e047      	b.n	8002a38 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	08db      	lsrs	r3, r3, #3
 80029b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80029c0:	6939      	ldr	r1, [r7, #16]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8ea 	bl	8002b9c <I2C_ITAddrCplt>
 80029c8:	e037      	b.n	8002a3a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d031      	beq.n	8002a3a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02b      	beq.n	8002a3a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d018      	beq.n	8002a1e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a1c:	e00d      	b.n	8002a3a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d002      	beq.n	8002a2c <I2C_Slave_ISR_IT+0x1e6>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f939 	bl	8002ca4 <I2C_ITSlaveSeqCplt>
 8002a32:	e002      	b.n	8002a3a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002a34:	bf00      	nop
 8002a36:	e000      	b.n	8002a3a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002a38:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	813b      	strh	r3, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <I2C_RequestMemoryWrite+0xa4>)
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fdb5 	bl	80035e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fc47 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02c      	b.n	8002ae8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a9e:	e015      	b.n	8002acc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa0:	893b      	ldrh	r3, [r7, #8]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	69b9      	ldr	r1, [r7, #24]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fc2d 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e012      	b.n	8002ae8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac2:	893b      	ldrh	r3, [r7, #8]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fbdb 	bl	8003292 <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	80002000 	.word	0x80002000

08002af4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	460b      	mov	r3, r1
 8002b08:	813b      	strh	r3, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	8979      	ldrh	r1, [r7, #10]
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <I2C_RequestMemoryRead+0xa4>)
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fd62 	bl	80035e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fbf4 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e02c      	b.n	8002b8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
 8002b44:	e015      	b.n	8002b72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b46:	893b      	ldrh	r3, [r7, #8]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fbda 	bl	8003312 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e012      	b.n	8002b8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2140      	movs	r1, #64	; 0x40
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fb88 	bl	8003292 <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	80002000 	.word	0x80002000

08002b9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bb2:	2b28      	cmp	r3, #40	; 0x28
 8002bb4:	d16a      	bne.n	8002c8c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002bd4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002bf0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d138      	bne.n	8002c6c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002bfa:	897b      	ldrh	r3, [r7, #10]
 8002bfc:	09db      	lsrs	r3, r3, #7
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	89bb      	ldrh	r3, [r7, #12]
 8002c02:	4053      	eors	r3, r2
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f003 0306 	and.w	r3, r3, #6
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d11c      	bne.n	8002c48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d13b      	bne.n	8002c9c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2208      	movs	r2, #8
 8002c30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c3a:	89ba      	ldrh	r2, [r7, #12]
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fdd4 	bl	80027ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c46:	e029      	b.n	8002c9c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002c48:	893b      	ldrh	r3, [r7, #8]
 8002c4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fcf9 	bl	8003648 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c5e:	89ba      	ldrh	r2, [r7, #12]
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff fdc2 	bl	80027ee <HAL_I2C_AddrCallback>
}
 8002c6a:	e017      	b.n	8002c9c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fce9 	bl	8003648 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c7e:	89ba      	ldrh	r2, [r7, #12]
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fdb2 	bl	80027ee <HAL_I2C_AddrCallback>
}
 8002c8a:	e007      	b.n	8002c9c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2208      	movs	r2, #8
 8002c92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	0b9b      	lsrs	r3, r3, #14
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e00d      	b.n	8002cf6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0bdb      	lsrs	r3, r3, #15
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b29      	cmp	r3, #41	; 0x29
 8002d00:	d112      	bne.n	8002d28 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2228      	movs	r2, #40	; 0x28
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2221      	movs	r2, #33	; 0x21
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d10:	2101      	movs	r1, #1
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fc98 	bl	8003648 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fd50 	bl	80027c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d26:	e017      	b.n	8002d58 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b2a      	cmp	r3, #42	; 0x2a
 8002d32:	d111      	bne.n	8002d58 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2228      	movs	r2, #40	; 0x28
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2222      	movs	r2, #34	; 0x22
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d42:	2102      	movs	r1, #2
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fc7f 	bl	8003648 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fd41 	bl	80027da <HAL_I2C_SlaveRxCpltCallback>
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2220      	movs	r2, #32
 8002d84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b21      	cmp	r3, #33	; 0x21
 8002d8a:	d002      	beq.n	8002d92 <I2C_ITSlaveCplt+0x32>
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b29      	cmp	r3, #41	; 0x29
 8002d90:	d108      	bne.n	8002da4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002d92:	f248 0101 	movw	r1, #32769	; 0x8001
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fc56 	bl	8003648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2221      	movs	r2, #33	; 0x21
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
 8002da2:	e00d      	b.n	8002dc0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b22      	cmp	r3, #34	; 0x22
 8002da8:	d002      	beq.n	8002db0 <I2C_ITSlaveCplt+0x50>
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b2a      	cmp	r3, #42	; 0x2a
 8002dae:	d107      	bne.n	8002dc0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002db0:	f248 0102 	movw	r1, #32770	; 0x8002
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fc47 	bl	8003648 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2222      	movs	r2, #34	; 0x22
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <I2C_ITSlaveCplt+0x20c>)
 8002ddc:	400b      	ands	r3, r1
 8002dde:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fa14 	bl	800320e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	0b9b      	lsrs	r3, r3, #14
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d013      	beq.n	8002e1a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e00:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d020      	beq.n	8002e4c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e18:	e018      	b.n	8002e4c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	0bdb      	lsrs	r3, r3, #15
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f023 0304 	bic.w	r3, r3, #4
 8002e5e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f043 0204 	orr.w	r2, r3, #4
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8a7 	bl	8003020 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b28      	cmp	r3, #40	; 0x28
 8002edc:	d141      	bne.n	8002f62 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f847 	bl	8002f74 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ee6:	e03c      	b.n	8002f62 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ef0:	d014      	beq.n	8002f1c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fed6 	bl	8002ca4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <I2C_ITSlaveCplt+0x210>)
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fc78 	bl	800280a <HAL_I2C_ListenCpltCallback>
}
 8002f1a:	e022      	b.n	8002f62 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b22      	cmp	r3, #34	; 0x22
 8002f26:	d10e      	bne.n	8002f46 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fc4b 	bl	80027da <HAL_I2C_SlaveRxCpltCallback>
}
 8002f44:	e00d      	b.n	8002f62 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fc32 	bl	80027c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	fe00e800 	.word	0xfe00e800
 8002f70:	ffff0000 	.word	0xffff0000

08002f74 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a26      	ldr	r2, [pc, #152]	; (800301c <I2C_ITListenCplt+0xa8>)
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d022      	beq.n	8002ff2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d012      	beq.n	8002ff2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ff2:	f248 0103 	movw	r1, #32771	; 0x8003
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fb26 	bl	8003648 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2210      	movs	r2, #16
 8003002:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fbfc 	bl	800280a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	ffff0000 	.word	0xffff0000

08003020 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <I2C_ITError+0x194>)
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b28      	cmp	r3, #40	; 0x28
 8003056:	d005      	beq.n	8003064 <I2C_ITError+0x44>
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b29      	cmp	r3, #41	; 0x29
 800305c:	d002      	beq.n	8003064 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b2a      	cmp	r3, #42	; 0x2a
 8003062:	d10b      	bne.n	800307c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003064:	2103      	movs	r1, #3
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 faee 	bl	8003648 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2228      	movs	r2, #40	; 0x28
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <I2C_ITError+0x198>)
 8003078:	635a      	str	r2, [r3, #52]	; 0x34
 800307a:	e011      	b.n	80030a0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800307c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fae1 	bl	8003648 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b60      	cmp	r3, #96	; 0x60
 8003090:	d003      	beq.n	800309a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d039      	beq.n	8003122 <I2C_ITError+0x102>
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b11      	cmp	r3, #17
 80030b2:	d002      	beq.n	80030ba <I2C_ITError+0x9a>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b21      	cmp	r3, #33	; 0x21
 80030b8:	d133      	bne.n	8003122 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c8:	d107      	bne.n	80030da <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fe90 	bl	8001e04 <HAL_DMA_GetState>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d017      	beq.n	800311a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	4a33      	ldr	r2, [pc, #204]	; (80031bc <I2C_ITError+0x19c>)
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fe3f 	bl	8001d82 <HAL_DMA_Abort_IT>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04d      	beq.n	80031a6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003114:	4610      	mov	r0, r2
 8003116:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003118:	e045      	b.n	80031a6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f850 	bl	80031c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003120:	e041      	b.n	80031a6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d039      	beq.n	800319e <I2C_ITError+0x17e>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b12      	cmp	r3, #18
 800312e:	d002      	beq.n	8003136 <I2C_ITError+0x116>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b22      	cmp	r3, #34	; 0x22
 8003134:	d133      	bne.n	800319e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003144:	d107      	bne.n	8003156 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003154:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fe52 	bl	8001e04 <HAL_DMA_GetState>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d017      	beq.n	8003196 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <I2C_ITError+0x19c>)
 800316c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fe01 	bl	8001d82 <HAL_DMA_Abort_IT>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d011      	beq.n	80031aa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003190:	4610      	mov	r0, r2
 8003192:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003194:	e009      	b.n	80031aa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f812 	bl	80031c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800319c:	e005      	b.n	80031aa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f80e 	bl	80031c0 <I2C_TreatErrorCallback>
  }
}
 80031a4:	e002      	b.n	80031ac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031aa:	bf00      	nop
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	ffff0000 	.word	0xffff0000
 80031b8:	08002847 	.word	0x08002847
 80031bc:	08003257 	.word	0x08003257

080031c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b60      	cmp	r3, #96	; 0x60
 80031d2:	d10e      	bne.n	80031f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fb21 	bl	8002832 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031f0:	e009      	b.n	8003206 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fb0c 	bl	800281e <HAL_I2C_ErrorCallback>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d103      	bne.n	800322c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d007      	beq.n	800324a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0201 	orr.w	r2, r2, #1
 8003248:	619a      	str	r2, [r3, #24]
  }
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	2200      	movs	r2, #0
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	2200      	movs	r2, #0
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff ff9b 	bl	80031c0 <I2C_TreatErrorCallback>
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a2:	e022      	b.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d01e      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	f7fe fbea 	bl	8001a84 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d113      	bne.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f043 0220 	orr.w	r2, r3, #32
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	429a      	cmp	r2, r3
 8003306:	d0cd      	beq.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800331e:	e02c      	b.n	800337a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f871 	bl	800340c <I2C_IsErrorOccurred>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e02a      	b.n	800338a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d01e      	beq.n	800337a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333c:	f7fe fba2 	bl	8001a84 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	429a      	cmp	r2, r3
 800334a:	d302      	bcc.n	8003352 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d113      	bne.n	800337a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d1cb      	bne.n	8003320 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800339e:	e028      	b.n	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f831 	bl	800340c <I2C_IsErrorOccurred>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e026      	b.n	8003402 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7fe fb66 	bl	8001a84 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d113      	bne.n	80033f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f043 0220 	orr.w	r2, r3, #32
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e007      	b.n	8003402 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d1cf      	bne.n	80033a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d075      	beq.n	8003524 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003440:	e056      	b.n	80034f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d052      	beq.n	80034f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fb1b 	bl	8001a84 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_IsErrorOccurred+0x54>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d147      	bne.n	80034f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003472:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003482:	d12e      	bne.n	80034e2 <I2C_IsErrorOccurred+0xd6>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348a:	d02a      	beq.n	80034e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b20      	cmp	r3, #32
 8003490:	d027      	beq.n	80034e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034a2:	f7fe faef 	bl	8001a84 <HAL_GetTick>
 80034a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a8:	e01b      	b.n	80034e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034aa:	f7fe faeb 	bl	8001a84 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b19      	cmp	r3, #25
 80034b6:	d914      	bls.n	80034e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d1dc      	bne.n	80034aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d003      	beq.n	8003506 <I2C_IsErrorOccurred+0xfa>
 80034fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003502:	2b00      	cmp	r3, #0
 8003504:	d09d      	beq.n	8003442 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800350a:	2b00      	cmp	r3, #0
 800350c:	d103      	bne.n	8003516 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2220      	movs	r2, #32
 8003514:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003546:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f043 0308 	orr.w	r3, r3, #8
 800355e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01c      	beq.n	80035d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff fe37 	bl	800320e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <I2C_IsErrorOccurred+0x1d4>)
 80035ac:	400b      	ands	r3, r1
 80035ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80035d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fe00e800 	.word	0xfe00e800

080035e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	4613      	mov	r3, r2
 80035f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035f6:	897b      	ldrh	r3, [r7, #10]
 80035f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035fc:	7a7b      	ldrb	r3, [r7, #9]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003604:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	4313      	orrs	r3, r2
 800360e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003612:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	0d5b      	lsrs	r3, r3, #21
 800361e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <I2C_TransferConfig+0x60>)
 8003624:	430b      	orrs	r3, r1
 8003626:	43db      	mvns	r3, r3
 8003628:	ea02 0103 	and.w	r1, r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	03ff63ff 	.word	0x03ff63ff

08003648 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00f      	beq.n	8003682 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003668:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003676:	2b28      	cmp	r3, #40	; 0x28
 8003678:	d003      	beq.n	8003682 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003680:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00f      	beq.n	80036ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003692:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036a0:	2b28      	cmp	r3, #40	; 0x28
 80036a2:	d003      	beq.n	80036ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80036aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	da03      	bge.n	80036bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80036ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d103      	bne.n	80036ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80036c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d103      	bne.n	80036d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d103      	bne.n	80036e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	d138      	bne.n	800378c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003724:	2302      	movs	r3, #2
 8003726:	e032      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d139      	bne.n	8003824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e033      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	; 0x24
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	e000      	b.n	8003826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a04      	ldr	r2, [pc, #16]	; (8003850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40007000 	.word	0x40007000

08003854 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <HAL_PWREx_GetVoltageRange+0x18>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40007000 	.word	0x40007000

08003870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387e:	d130      	bne.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003880:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d038      	beq.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2232      	movs	r2, #50	; 0x32
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0c9b      	lsrs	r3, r3, #18
 80038b0:	3301      	adds	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038b4:	e002      	b.n	80038bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c8:	d102      	bne.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f2      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d110      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e00f      	b.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ee:	d007      	beq.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038f8:	4a05      	ldr	r2, [pc, #20]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40007000 	.word	0x40007000
 8003914:	20000000 	.word	0x20000000
 8003918:	431bde83 	.word	0x431bde83

0800391c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f000 bc02 	b.w	8004134 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003930:	4b96      	ldr	r3, [pc, #600]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800393a:	4b94      	ldr	r3, [pc, #592]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80e4 	beq.w	8003b1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <HAL_RCC_OscConfig+0x4c>
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	f040 808b 	bne.w	8003a76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b01      	cmp	r3, #1
 8003964:	f040 8087 	bne.w	8003a76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_OscConfig+0x64>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e3d9      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	4b81      	ldr	r3, [pc, #516]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_RCC_OscConfig+0x7e>
 8003990:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	e005      	b.n	80039a6 <HAL_RCC_OscConfig+0x8a>
 800399a:	4b7c      	ldr	r3, [pc, #496]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 800399c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d223      	bcs.n	80039f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fd8c 	bl	80044cc <RCC_SetFlashLatencyFromMSIRange>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e3ba      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039be:	4b73      	ldr	r3, [pc, #460]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a72      	ldr	r2, [pc, #456]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b70      	ldr	r3, [pc, #448]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	496d      	ldr	r1, [pc, #436]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039dc:	4b6b      	ldr	r3, [pc, #428]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	4968      	ldr	r1, [pc, #416]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	e025      	b.n	8003a3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039f2:	4b66      	ldr	r3, [pc, #408]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a65      	ldr	r2, [pc, #404]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4960      	ldr	r1, [pc, #384]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a10:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	495b      	ldr	r1, [pc, #364]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd4c 	bl	80044cc <RCC_SetFlashLatencyFromMSIRange>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e37a      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a3e:	f000 fc81 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8003a42:	4602      	mov	r2, r0
 8003a44:	4b51      	ldr	r3, [pc, #324]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	4950      	ldr	r1, [pc, #320]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003a50:	5ccb      	ldrb	r3, [r1, r3]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a4e      	ldr	r2, [pc, #312]	; (8003b94 <HAL_RCC_OscConfig+0x278>)
 8003a5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a5e:	4b4e      	ldr	r3, [pc, #312]	; (8003b98 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd ffbe 	bl	80019e4 <HAL_InitTick>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d052      	beq.n	8003b18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	e35e      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d032      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a7e:	4b43      	ldr	r3, [pc, #268]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a42      	ldr	r2, [pc, #264]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a8a:	f7fd fffb 	bl	8001a84 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a92:	f7fd fff7 	bl	8001a84 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e347      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa4:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a35      	ldr	r2, [pc, #212]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4930      	ldr	r1, [pc, #192]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ace:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	492b      	ldr	r1, [pc, #172]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	604b      	str	r3, [r1, #4]
 8003ae2:	e01a      	b.n	8003b1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003af0:	f7fd ffc8 	bl	8001a84 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af8:	f7fd ffc4 	bl	8001a84 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e314      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1dc>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d073      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x21c>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d10e      	bne.n	8003b50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d063      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d15f      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e2f1      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x24c>
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e025      	b.n	8003bb4 <HAL_RCC_OscConfig+0x298>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d114      	bne.n	8003b9c <HAL_RCC_OscConfig+0x280>
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a02      	ldr	r2, [pc, #8]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e013      	b.n	8003bb4 <HAL_RCC_OscConfig+0x298>
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08007e3c 	.word	0x08007e3c
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004
 8003b9c:	4ba0      	ldr	r3, [pc, #640]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a9f      	ldr	r2, [pc, #636]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b9d      	ldr	r3, [pc, #628]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a9c      	ldr	r2, [pc, #624]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ff62 	bl	8001a84 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd ff5e 	bl	8001a84 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e2ae      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	4b92      	ldr	r3, [pc, #584]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x2a8>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd ff4e 	bl	8001a84 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fd ff4a 	bl	8001a84 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e29a      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x2d0>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d060      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_OscConfig+0x310>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d119      	bne.n	8003c5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d116      	bne.n	8003c5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	4b7c      	ldr	r3, [pc, #496]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_OscConfig+0x328>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e277      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c44:	4b76      	ldr	r3, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	4973      	ldr	r1, [pc, #460]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	e040      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c62:	4b6f      	ldr	r3, [pc, #444]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6e      	ldr	r2, [pc, #440]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd ff09 	bl	8001a84 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fd ff05 	bl	8001a84 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e255      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	495f      	ldr	r1, [pc, #380]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5c      	ldr	r2, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fee5 	bl	8001a84 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fd fee1 	bl	8001a84 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e231      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d03c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf0:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd fec0 	bl	8001a84 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d08:	f7fd febc 	bl	8001a84 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e20c      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1a:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ef      	beq.n	8003d08 <HAL_RCC_OscConfig+0x3ec>
 8003d28:	e01b      	b.n	8003d62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d30:	4a3b      	ldr	r2, [pc, #236]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fea3 	bl	8001a84 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fd fe9f 	bl	8001a84 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1ef      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	4b32      	ldr	r3, [pc, #200]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ef      	bne.n	8003d42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a6 	beq.w	8003ebc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d70:	2300      	movs	r3, #0
 8003d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d118      	bne.n	8003dda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db4:	f7fd fe66 	bl	8001a84 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbc:	f7fd fe62 	bl	8001a84 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1b2      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_RCC_OscConfig+0x508>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d108      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4d8>
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	4a0d      	ldr	r2, [pc, #52]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df2:	e029      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d115      	bne.n	8003e28 <HAL_RCC_OscConfig+0x50c>
 8003dfc:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a07      	ldr	r2, [pc, #28]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a03      	ldr	r2, [pc, #12]	; (8003e20 <HAL_RCC_OscConfig+0x504>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e1c:	e014      	b.n	8003e48 <HAL_RCC_OscConfig+0x52c>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
 8003e28:	4b9a      	ldr	r3, [pc, #616]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a99      	ldr	r2, [pc, #612]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e38:	4b96      	ldr	r3, [pc, #600]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	4a95      	ldr	r2, [pc, #596]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fd fe18 	bl	8001a84 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fd fe14 	bl	8001a84 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e162      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	4b89      	ldr	r3, [pc, #548]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ed      	beq.n	8003e58 <HAL_RCC_OscConfig+0x53c>
 8003e7c:	e015      	b.n	8003eaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fd fe01 	bl	8001a84 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fd fdfd 	bl	8001a84 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e14b      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e9c:	4b7d      	ldr	r3, [pc, #500]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ed      	bne.n	8003e86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eaa:	7ffb      	ldrb	r3, [r7, #31]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb0:	4b78      	ldr	r3, [pc, #480]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	4a77      	ldr	r2, [pc, #476]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ed0:	4b70      	ldr	r3, [pc, #448]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed6:	4a6f      	ldr	r2, [pc, #444]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd fdd0 	bl	8001a84 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee8:	f7fd fdcc 	bl	8001a84 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e11c      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003efa:	4b66      	ldr	r3, [pc, #408]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ef      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x5cc>
 8003f08:	e01b      	b.n	8003f42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f0a:	4b62      	ldr	r3, [pc, #392]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f10:	4a60      	ldr	r2, [pc, #384]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fdb3 	bl	8001a84 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f22:	f7fd fdaf 	bl	8001a84 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0ff      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f34:	4b57      	ldr	r3, [pc, #348]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ef      	bne.n	8003f22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80f3 	beq.w	8004132 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	f040 80c9 	bne.w	80040e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f56:	4b4f      	ldr	r3, [pc, #316]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d12c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	3b01      	subs	r3, #1
 8003f76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d123      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d113      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d109      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d06b      	beq.n	800409c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d062      	beq.n	8004090 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0ac      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2d      	ldr	r2, [pc, #180]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8003fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe6:	f7fd fd4d 	bl	8001a84 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fd fd49 	bl	8001a84 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e099      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	4b21      	ldr	r3, [pc, #132]	; (8004098 <HAL_RCC_OscConfig+0x77c>)
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800401c:	3a01      	subs	r2, #1
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	4311      	orrs	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004026:	0212      	lsls	r2, r2, #8
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800402e:	0852      	lsrs	r2, r2, #1
 8004030:	3a01      	subs	r2, #1
 8004032:	0552      	lsls	r2, r2, #21
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800403a:	0852      	lsrs	r2, r2, #1
 800403c:	3a01      	subs	r2, #1
 800403e:	0652      	lsls	r2, r2, #25
 8004040:	4311      	orrs	r1, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004046:	06d2      	lsls	r2, r2, #27
 8004048:	430a      	orrs	r2, r1
 800404a:	4912      	ldr	r1, [pc, #72]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 800404c:	4313      	orrs	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004068:	f7fd fd0c 	bl	8001a84 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd fd08 	bl	8001a84 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e058      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	4b04      	ldr	r3, [pc, #16]	; (8004094 <HAL_RCC_OscConfig+0x778>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408e:	e050      	b.n	8004132 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e04f      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
 8004094:	40021000 	.word	0x40021000
 8004098:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_RCC_OscConfig+0x820>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d144      	bne.n	8004132 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCC_OscConfig+0x820>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a23      	ldr	r2, [pc, #140]	; (800413c <HAL_RCC_OscConfig+0x820>)
 80040ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_RCC_OscConfig+0x820>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <HAL_RCC_OscConfig+0x820>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040c0:	f7fd fce0 	bl	8001a84 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fcdc 	bl	8001a84 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e02c      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_RCC_OscConfig+0x820>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x7ac>
 80040e6:	e024      	b.n	8004132 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	d01f      	beq.n	800412e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b13      	ldr	r3, [pc, #76]	; (800413c <HAL_RCC_OscConfig+0x820>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <HAL_RCC_OscConfig+0x820>)
 80040f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd fcc3 	bl	8001a84 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004102:	f7fd fcbf 	bl	8001a84 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e00f      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_OscConfig+0x820>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f0      	bne.n	8004102 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_RCC_OscConfig+0x820>)
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	4905      	ldr	r1, [pc, #20]	; (800413c <HAL_RCC_OscConfig+0x820>)
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCC_OscConfig+0x824>)
 8004128:	4013      	ands	r3, r2
 800412a:	60cb      	str	r3, [r1, #12]
 800412c:	e001      	b.n	8004132 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	feeefffc 	.word	0xfeeefffc

08004144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0e7      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b75      	ldr	r3, [pc, #468]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d910      	bls.n	8004188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b72      	ldr	r3, [pc, #456]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0207 	bic.w	r2, r3, #7
 800416e:	4970      	ldr	r1, [pc, #448]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b6e      	ldr	r3, [pc, #440]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0cf      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d010      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	4b66      	ldr	r3, [pc, #408]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d908      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a4:	4b63      	ldr	r3, [pc, #396]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4960      	ldr	r1, [pc, #384]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04c      	beq.n	800425c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ca:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d121      	bne.n	800421a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e0a6      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e2:	4b54      	ldr	r3, [pc, #336]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d115      	bne.n	800421a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e09a      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041fa:	4b4e      	ldr	r3, [pc, #312]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e08e      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800420a:	4b4a      	ldr	r3, [pc, #296]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e086      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800421a:	4b46      	ldr	r3, [pc, #280]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f023 0203 	bic.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4943      	ldr	r1, [pc, #268]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422c:	f7fd fc2a 	bl	8001a84 <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	e00a      	b.n	800424a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7fd fc26 	bl	8001a84 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e06e      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	4b3a      	ldr	r3, [pc, #232]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 020c 	and.w	r2, r3, #12
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	429a      	cmp	r2, r3
 800425a:	d1eb      	bne.n	8004234 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	429a      	cmp	r2, r3
 8004276:	d208      	bcs.n	800428a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	492b      	ldr	r1, [pc, #172]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800428a:	4b29      	ldr	r3, [pc, #164]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d210      	bcs.n	80042ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f023 0207 	bic.w	r2, r3, #7
 80042a0:	4923      	ldr	r1, [pc, #140]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a8:	4b21      	ldr	r3, [pc, #132]	; (8004330 <HAL_RCC_ClockConfig+0x1ec>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e036      	b.n	8004328 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c6:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	4918      	ldr	r1, [pc, #96]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4910      	ldr	r1, [pc, #64]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042f8:	f000 f824 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <HAL_RCC_ClockConfig+0x1f0>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	490b      	ldr	r1, [pc, #44]	; (8004338 <HAL_RCC_ClockConfig+0x1f4>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1f8>)
 8004316:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x1fc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fb61 	bl	80019e4 <HAL_InitTick>
 8004322:	4603      	mov	r3, r0
 8004324:	72fb      	strb	r3, [r7, #11]

  return status;
 8004326:	7afb      	ldrb	r3, [r7, #11]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40022000 	.word	0x40022000
 8004334:	40021000 	.word	0x40021000
 8004338:	08007e3c 	.word	0x08007e3c
 800433c:	20000000 	.word	0x20000000
 8004340:	20000004 	.word	0x20000004

08004344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004352:	4b3e      	ldr	r3, [pc, #248]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800435c:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x34>
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d121      	bne.n	80043b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d11e      	bne.n	80043b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004378:	4b34      	ldr	r3, [pc, #208]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004384:	4b31      	ldr	r3, [pc, #196]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e005      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043a0:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10d      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d102      	bne.n	80043c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <HAL_RCC_GetSysClockFreq+0x110>)
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e004      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043c8:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	d134      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0xa6>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d003      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0xac>
 80043e8:	e005      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ec:	617b      	str	r3, [r7, #20]
      break;
 80043ee:	e005      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <HAL_RCC_GetSysClockFreq+0x114>)
 80043f2:	617b      	str	r3, [r7, #20]
      break;
 80043f4:	e002      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	617b      	str	r3, [r7, #20]
      break;
 80043fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	3301      	adds	r3, #1
 8004408:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800440a:	4b10      	ldr	r3, [pc, #64]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	fb03 f202 	mul.w	r2, r3, r2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCC_GetSysClockFreq+0x108>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	0e5b      	lsrs	r3, r3, #25
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	3301      	adds	r3, #1
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800443c:	69bb      	ldr	r3, [r7, #24]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3724      	adds	r7, #36	; 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
 8004450:	08007e54 	.word	0x08007e54
 8004454:	00f42400 	.word	0x00f42400
 8004458:	007a1200 	.word	0x007a1200

0800445c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_RCC_GetHCLKFreq+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000000 	.word	0x20000000

08004474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004478:	f7ff fff0 	bl	800445c <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4904      	ldr	r1, [pc, #16]	; (800449c <HAL_RCC_GetPCLK1Freq+0x28>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	08007e4c 	.word	0x08007e4c

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044a4:	f7ff ffda 	bl	800445c <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0adb      	lsrs	r3, r3, #11
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4904      	ldr	r1, [pc, #16]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	08007e4c 	.word	0x08007e4c

080044cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044d8:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044e4:	f7ff f9b6 	bl	8003854 <HAL_PWREx_GetVoltageRange>
 80044e8:	6178      	str	r0, [r7, #20]
 80044ea:	e014      	b.n	8004516 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6593      	str	r3, [r2, #88]	; 0x58
 80044f8:	4b22      	ldr	r3, [pc, #136]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004504:	f7ff f9a6 	bl	8003854 <HAL_PWREx_GetVoltageRange>
 8004508:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004514:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451c:	d10b      	bne.n	8004536 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b80      	cmp	r3, #128	; 0x80
 8004522:	d919      	bls.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2ba0      	cmp	r3, #160	; 0xa0
 8004528:	d902      	bls.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800452a:	2302      	movs	r3, #2
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e013      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004530:	2301      	movs	r3, #1
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e010      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d902      	bls.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800453c:	2303      	movs	r3, #3
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e00a      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d102      	bne.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004548:	2302      	movs	r3, #2
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e004      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d101      	bne.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004554:	2301      	movs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 0207 	bic.w	r2, r3, #7
 8004560:	4909      	ldr	r1, [pc, #36]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	40022000 	.word	0x40022000

0800458c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004594:	2300      	movs	r3, #0
 8004596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004598:	2300      	movs	r3, #0
 800459a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d031      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045b0:	d01a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045b6:	d814      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045c0:	d10f      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045c2:	4b5d      	ldr	r3, [pc, #372]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4a5c      	ldr	r2, [pc, #368]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ce:	e00c      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f9de 	bl	8004998 <RCCEx_PLLSAI1_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	74fb      	strb	r3, [r7, #19]
      break;
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045f0:	4b51      	ldr	r3, [pc, #324]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	494e      	ldr	r1, [pc, #312]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004606:	e001      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 809e 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800461e:	4b46      	ldr	r3, [pc, #280]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4b40      	ldr	r3, [pc, #256]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	4a3f      	ldr	r2, [pc, #252]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6593      	str	r3, [r2, #88]	; 0x58
 8004640:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464c:	2301      	movs	r3, #1
 800464e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004650:	4b3a      	ldr	r3, [pc, #232]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a39      	ldr	r2, [pc, #228]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800465c:	f7fd fa12 	bl	8001a84 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004662:	e009      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fd fa0e 	bl	8001a84 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d902      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	74fb      	strb	r3, [r7, #19]
        break;
 8004676:	e005      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004678:	4b30      	ldr	r3, [pc, #192]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ef      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d15a      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800468a:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01e      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d019      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d2:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d016      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd f9ce 	bl	8001a84 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ea:	e00b      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fd f9ca 	bl	8001a84 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d902      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	74fb      	strb	r3, [r7, #19]
            break;
 8004702:	e006      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ec      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800472e:	e009      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004744:	7c7b      	ldrb	r3, [r7, #17]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4b8a      	ldr	r3, [pc, #552]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a89      	ldr	r2, [pc, #548]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004762:	4b84      	ldr	r3, [pc, #528]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f023 0203 	bic.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4980      	ldr	r1, [pc, #512]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004784:	4b7b      	ldr	r3, [pc, #492]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f023 020c 	bic.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	4978      	ldr	r1, [pc, #480]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047a6:	4b73      	ldr	r3, [pc, #460]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	496f      	ldr	r1, [pc, #444]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	4967      	ldr	r1, [pc, #412]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ea:	4b62      	ldr	r3, [pc, #392]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	495e      	ldr	r1, [pc, #376]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480c:	4b59      	ldr	r3, [pc, #356]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	4956      	ldr	r1, [pc, #344]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800482e:	4b51      	ldr	r3, [pc, #324]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	494d      	ldr	r1, [pc, #308]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d028      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004850:	4b48      	ldr	r3, [pc, #288]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	4945      	ldr	r1, [pc, #276]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486e:	d106      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004870:	4b40      	ldr	r3, [pc, #256]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a3f      	ldr	r2, [pc, #252]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487a:	60d3      	str	r3, [r2, #12]
 800487c:	e011      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004886:	d10c      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f882 	bl	8004998 <RCCEx_PLLSAI1_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d028      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ae:	4b31      	ldr	r3, [pc, #196]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	492d      	ldr	r1, [pc, #180]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048cc:	d106      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d8:	60d3      	str	r3, [r2, #12]
 80048da:	e011      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f853 	bl	8004998 <RCCEx_PLLSAI1_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01c      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	4916      	ldr	r1, [pc, #88]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492a:	d10c      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f830 	bl	8004998 <RCCEx_PLLSAI1_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004968:	7cbb      	ldrb	r3, [r7, #18]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a04      	ldr	r2, [pc, #16]	; (8004994 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	6013      	str	r3, [r2, #0]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000

08004998 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049a6:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d018      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049b2:	4b71      	ldr	r3, [pc, #452]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0203 	and.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d10d      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
       ||
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ca:	4b6b      	ldr	r3, [pc, #428]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
       ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d047      	beq.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e044      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d018      	beq.n	8004a1e <RCCEx_PLLSAI1_Config+0x86>
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d825      	bhi.n	8004a3c <RCCEx_PLLSAI1_Config+0xa4>
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d002      	beq.n	80049fa <RCCEx_PLLSAI1_Config+0x62>
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d009      	beq.n	8004a0c <RCCEx_PLLSAI1_Config+0x74>
 80049f8:	e020      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049fa:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d11d      	bne.n	8004a42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0a:	e01a      	b.n	8004a42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a0c:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d116      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1c:	e013      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a1e:	4b56      	ldr	r3, [pc, #344]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a3a:	e006      	b.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a40:	e004      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a52:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6819      	ldr	r1, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	430b      	orrs	r3, r1
 8004a68:	4943      	ldr	r1, [pc, #268]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d17c      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a74:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a80:	f7fd f800 	bl	8001a84 <HAL_GetTick>
 8004a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a86:	e009      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a88:	f7fc fffc 	bl	8001a84 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d902      	bls.n	8004a9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9a:	e005      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a9c:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ef      	bne.n	8004a88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d15f      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d110      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6892      	ldr	r2, [r2, #8]
 8004ac4:	0211      	lsls	r1, r2, #8
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68d2      	ldr	r2, [r2, #12]
 8004aca:	06d2      	lsls	r2, r2, #27
 8004acc:	430a      	orrs	r2, r1
 8004ace:	492a      	ldr	r1, [pc, #168]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
 8004ad4:	e027      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d112      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004adc:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6912      	ldr	r2, [r2, #16]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0552      	lsls	r2, r2, #21
 8004af8:	430a      	orrs	r2, r1
 8004afa:	491f      	ldr	r1, [pc, #124]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
 8004b00:	e011      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	0211      	lsls	r1, r2, #8
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6952      	ldr	r2, [r2, #20]
 8004b18:	0852      	lsrs	r2, r2, #1
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	0652      	lsls	r2, r2, #25
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	4915      	ldr	r1, [pc, #84]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fc ffa7 	bl	8001a84 <HAL_GetTick>
 8004b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b38:	e009      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b3a:	f7fc ffa3 	bl	8001a84 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d902      	bls.n	8004b4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b4c:	e005      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000

08004b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e040      	b.n	8004c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc fd0c 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2224      	movs	r2, #36	; 0x24
 8004ba8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fd62 	bl	8005684 <UART_SetConfig>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e022      	b.n	8004c10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 ff82 	bl	8005adc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 f809 	bl	8005c20 <UART_CheckIdleState>
 8004c0e:	4603      	mov	r3, r0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	f040 8082 	bne.w	8004d36 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_UART_Transmit+0x26>
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07a      	b.n	8004d38 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_UART_Transmit+0x38>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e073      	b.n	8004d38 <HAL_UART_Transmit+0x120>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2221      	movs	r2, #33	; 0x21
 8004c64:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c66:	f7fc ff0d 	bl	8001a84 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	88fa      	ldrh	r2, [r7, #6]
 8004c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c84:	d108      	bne.n	8004c98 <HAL_UART_Transmit+0x80>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d104      	bne.n	8004c98 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	e003      	b.n	8004ca0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ca8:	e02d      	b.n	8004d06 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2180      	movs	r1, #128	; 0x80
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fffc 	bl	8005cb2 <UART_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e039      	b.n	8004d38 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	3302      	adds	r3, #2
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e008      	b.n	8004cf4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	781a      	ldrb	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	b292      	uxth	r2, r2
 8004cec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1cb      	bne.n	8004caa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2140      	movs	r1, #64	; 0x40
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 ffc8 	bl	8005cb2 <UART_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e005      	b.n	8004d38 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e000      	b.n	8004d38 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	f040 80bf 	bne.w	8004ed8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_UART_Receive+0x26>
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0b7      	b.n	8004eda <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_UART_Receive+0x38>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0b0      	b.n	8004eda <HAL_UART_Receive+0x19a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2222      	movs	r2, #34	; 0x22
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d94:	f7fc fe76 	bl	8001a84 <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	88fa      	ldrh	r2, [r7, #6]
 8004d9e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	d10e      	bne.n	8004dd2 <HAL_UART_Receive+0x92>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <HAL_UART_Receive+0x88>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc6:	e02d      	b.n	8004e24 <HAL_UART_Receive+0xe4>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	22ff      	movs	r2, #255	; 0xff
 8004dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd0:	e028      	b.n	8004e24 <HAL_UART_Receive+0xe4>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10d      	bne.n	8004df6 <HAL_UART_Receive+0xb6>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <HAL_UART_Receive+0xac>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dea:	e01b      	b.n	8004e24 <HAL_UART_Receive+0xe4>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	227f      	movs	r2, #127	; 0x7f
 8004df0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004df4:	e016      	b.n	8004e24 <HAL_UART_Receive+0xe4>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dfe:	d10d      	bne.n	8004e1c <HAL_UART_Receive+0xdc>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <HAL_UART_Receive+0xd2>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	227f      	movs	r2, #127	; 0x7f
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e10:	e008      	b.n	8004e24 <HAL_UART_Receive+0xe4>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	223f      	movs	r2, #63	; 0x3f
 8004e16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e1a:	e003      	b.n	8004e24 <HAL_UART_Receive+0xe4>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e2a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e34:	d108      	bne.n	8004e48 <HAL_UART_Receive+0x108>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e003      	b.n	8004e50 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e58:	e033      	b.n	8004ec2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2120      	movs	r1, #32
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 ff24 	bl	8005cb2 <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e032      	b.n	8004eda <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10c      	bne.n	8004e94 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	8a7b      	ldrh	r3, [r7, #18]
 8004e84:	4013      	ands	r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	3302      	adds	r3, #2
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e00d      	b.n	8004eb0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	8a7b      	ldrh	r3, [r7, #18]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3301      	adds	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1c5      	bne.n	8004e5a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b08b      	sub	sp, #44	; 0x2c
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d156      	bne.n	8004fa8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_UART_Transmit_IT+0x22>
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e04f      	b.n	8004faa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_UART_Transmit_IT+0x34>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e048      	b.n	8004faa <HAL_UART_Transmit_IT+0xc6>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2221      	movs	r2, #33	; 0x21
 8004f48:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	d107      	bne.n	8004f64 <HAL_UART_Transmit_IT+0x80>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <HAL_UART_Transmit_IT+0xd4>)
 8004f60:	669a      	str	r2, [r3, #104]	; 0x68
 8004f62:	e002      	b.n	8004f6a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <HAL_UART_Transmit_IT+0xd8>)
 8004f68:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e6      	bne.n	8004f72 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	372c      	adds	r7, #44	; 0x2c
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	0800617b 	.word	0x0800617b
 8004fbc:	080060c3 	.word	0x080060c3

08004fc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d142      	bne.n	800505c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_UART_Receive_IT+0x22>
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e03b      	b.n	800505e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_UART_Receive_IT+0x34>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e034      	b.n	800505e <HAL_UART_Receive_IT+0x9e>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a18      	ldr	r2, [pc, #96]	; (8005068 <HAL_UART_Receive_IT+0xa8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d01f      	beq.n	800504c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	613b      	str	r3, [r7, #16]
   return(result);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	61bb      	str	r3, [r7, #24]
   return(result);
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e6      	bne.n	800501a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	461a      	mov	r2, r3
 8005050:	68b9      	ldr	r1, [r7, #8]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fef2 	bl	8005e3c <UART_Start_Receive_IT>
 8005058:	4603      	mov	r3, r0
 800505a:	e000      	b.n	800505e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800505c:	2302      	movs	r3, #2
  }
}
 800505e:	4618      	mov	r0, r3
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40008000 	.word	0x40008000

0800506c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b0ba      	sub	sp, #232	; 0xe8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005092:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005096:	f640 030f 	movw	r3, #2063	; 0x80f
 800509a:	4013      	ands	r3, r2
 800509c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80050a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d115      	bne.n	80050d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00f      	beq.n	80050d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 82a6 	beq.w	8005616 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
      }
      return;
 80050d2:	e2a0      	b.n	8005616 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80050d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8117 	beq.w	800530c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80050ee:	4b85      	ldr	r3, [pc, #532]	; (8005304 <HAL_UART_IRQHandler+0x298>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 810a 	beq.w	800530c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d011      	beq.n	8005128 <HAL_UART_IRQHandler+0xbc>
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00b      	beq.n	8005128 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2201      	movs	r2, #1
 8005116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511e:	f043 0201 	orr.w	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d011      	beq.n	8005158 <HAL_UART_IRQHandler+0xec>
 8005134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00b      	beq.n	8005158 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2202      	movs	r2, #2
 8005146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514e:	f043 0204 	orr.w	r2, r3, #4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d011      	beq.n	8005188 <HAL_UART_IRQHandler+0x11c>
 8005164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2204      	movs	r2, #4
 8005176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800517e:	f043 0202 	orr.w	r2, r3, #2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d017      	beq.n	80051c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d105      	bne.n	80051ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80051a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2208      	movs	r2, #8
 80051b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ba:	f043 0208 	orr.w	r2, r3, #8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80051c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <HAL_UART_IRQHandler+0x18a>
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00c      	beq.n	80051f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 820c 	beq.w	800561a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800520e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005246:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d04f      	beq.n	80052ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 febe 	bl	8005fd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d141      	bne.n	80052e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800527c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800528e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800529a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1d9      	bne.n	8005262 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d013      	beq.n	80052de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	4a13      	ldr	r2, [pc, #76]	; (8005308 <HAL_UART_IRQHandler+0x29c>)
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fc fd5d 	bl	8001d82 <HAL_DMA_Abort_IT>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d017      	beq.n	80052fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80052d8:	4610      	mov	r0, r2
 80052da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052dc:	e00f      	b.n	80052fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9ba 	bl	8005658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	e00b      	b.n	80052fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9b6 	bl	8005658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ec:	e007      	b.n	80052fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9b2 	bl	8005658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80052fc:	e18d      	b.n	800561a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fe:	bf00      	nop
    return;
 8005300:	e18b      	b.n	800561a <HAL_UART_IRQHandler+0x5ae>
 8005302:	bf00      	nop
 8005304:	04000120 	.word	0x04000120
 8005308:	08006097 	.word	0x08006097

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 8146 	bne.w	80055a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 813f 	beq.w	80055a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8138 	beq.w	80055a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2210      	movs	r2, #16
 8005338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	f040 80b4 	bne.w	80054b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005356:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 815f 	beq.w	800561e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800536a:	429a      	cmp	r2, r3
 800536c:	f080 8157 	bcs.w	800561e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005376:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 8085 	bne.w	8005496 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1da      	bne.n	800538c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800540c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e1      	bne.n	80053d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3308      	adds	r3, #8
 8005418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800543c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e3      	bne.n	8005412 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005466:	f023 0310 	bic.w	r3, r3, #16
 800546a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005478:	65bb      	str	r3, [r7, #88]	; 0x58
 800547a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800547e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e4      	bne.n	8005456 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4618      	mov	r0, r3
 8005492:	f7fc fc38 	bl	8001d06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f8de 	bl	800566c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054b0:	e0b5      	b.n	800561e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 80a7 	beq.w	8005622 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80054d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a2 	beq.w	8005622 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
 8005502:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e4      	bne.n	80054de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3308      	adds	r3, #8
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	623b      	str	r3, [r7, #32]
   return(result);
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005538:	633a      	str	r2, [r7, #48]	; 0x30
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800553e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e3      	bne.n	8005514 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	60fb      	str	r3, [r7, #12]
   return(result);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0310 	bic.w	r3, r3, #16
 8005572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	617b      	str	r3, [r7, #20]
   return(result);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e4      	bne.n	800555e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f866 	bl	800566c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055a0:	e03f      	b.n	8005622 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00e      	beq.n	80055cc <HAL_UART_IRQHandler+0x560>
 80055ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 ffc2 	bl	800654e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ca:	e02d      	b.n	8005628 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01c      	beq.n	8005626 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
    }
    return;
 80055f4:	e017      	b.n	8005626 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d012      	beq.n	8005628 <HAL_UART_IRQHandler+0x5bc>
 8005602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fe13 	bl	800623a <UART_EndTransmit_IT>
    return;
 8005614:	e008      	b.n	8005628 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005616:	bf00      	nop
 8005618:	e006      	b.n	8005628 <HAL_UART_IRQHandler+0x5bc>
    return;
 800561a:	bf00      	nop
 800561c:	e004      	b.n	8005628 <HAL_UART_IRQHandler+0x5bc>
      return;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005626:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005628:	37e8      	adds	r7, #232	; 0xe8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop

08005630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005688:	b08a      	sub	sp, #40	; 0x28
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4bb4      	ldr	r3, [pc, #720]	; (8005984 <UART_SetConfig+0x300>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056bc:	430b      	orrs	r3, r1
 80056be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4aa9      	ldr	r2, [pc, #676]	; (8005988 <UART_SetConfig+0x304>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ec:	4313      	orrs	r3, r2
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005700:	430a      	orrs	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4aa0      	ldr	r2, [pc, #640]	; (800598c <UART_SetConfig+0x308>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d126      	bne.n	800575c <UART_SetConfig+0xd8>
 800570e:	4ba0      	ldr	r3, [pc, #640]	; (8005990 <UART_SetConfig+0x30c>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	2b03      	cmp	r3, #3
 800571a:	d81b      	bhi.n	8005754 <UART_SetConfig+0xd0>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0xa0>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005735 	.word	0x08005735
 8005728:	08005745 	.word	0x08005745
 800572c:	0800573d 	.word	0x0800573d
 8005730:	0800574d 	.word	0x0800574d
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e080      	b.n	800583e <UART_SetConfig+0x1ba>
 800573c:	2302      	movs	r3, #2
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	e07c      	b.n	800583e <UART_SetConfig+0x1ba>
 8005744:	2304      	movs	r3, #4
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e078      	b.n	800583e <UART_SetConfig+0x1ba>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005752:	e074      	b.n	800583e <UART_SetConfig+0x1ba>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575a:	e070      	b.n	800583e <UART_SetConfig+0x1ba>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a8c      	ldr	r2, [pc, #560]	; (8005994 <UART_SetConfig+0x310>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d138      	bne.n	80057d8 <UART_SetConfig+0x154>
 8005766:	4b8a      	ldr	r3, [pc, #552]	; (8005990 <UART_SetConfig+0x30c>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f003 030c 	and.w	r3, r3, #12
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d82d      	bhi.n	80057d0 <UART_SetConfig+0x14c>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0xf8>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057d1 	.word	0x080057d1
 8005784:	080057d1 	.word	0x080057d1
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080057d1 	.word	0x080057d1
 8005794:	080057d1 	.word	0x080057d1
 8005798:	080057d1 	.word	0x080057d1
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	080057d1 	.word	0x080057d1
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b6:	e042      	b.n	800583e <UART_SetConfig+0x1ba>
 80057b8:	2302      	movs	r3, #2
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057be:	e03e      	b.n	800583e <UART_SetConfig+0x1ba>
 80057c0:	2304      	movs	r3, #4
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e03a      	b.n	800583e <UART_SetConfig+0x1ba>
 80057c8:	2308      	movs	r3, #8
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e036      	b.n	800583e <UART_SetConfig+0x1ba>
 80057d0:	2310      	movs	r3, #16
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e032      	b.n	800583e <UART_SetConfig+0x1ba>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6a      	ldr	r2, [pc, #424]	; (8005988 <UART_SetConfig+0x304>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d12a      	bne.n	8005838 <UART_SetConfig+0x1b4>
 80057e2:	4b6b      	ldr	r3, [pc, #428]	; (8005990 <UART_SetConfig+0x30c>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f0:	d01a      	beq.n	8005828 <UART_SetConfig+0x1a4>
 80057f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f6:	d81b      	bhi.n	8005830 <UART_SetConfig+0x1ac>
 80057f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fc:	d00c      	beq.n	8005818 <UART_SetConfig+0x194>
 80057fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005802:	d815      	bhi.n	8005830 <UART_SetConfig+0x1ac>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <UART_SetConfig+0x18c>
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d008      	beq.n	8005820 <UART_SetConfig+0x19c>
 800580e:	e00f      	b.n	8005830 <UART_SetConfig+0x1ac>
 8005810:	2300      	movs	r3, #0
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005816:	e012      	b.n	800583e <UART_SetConfig+0x1ba>
 8005818:	2302      	movs	r3, #2
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581e:	e00e      	b.n	800583e <UART_SetConfig+0x1ba>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005826:	e00a      	b.n	800583e <UART_SetConfig+0x1ba>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582e:	e006      	b.n	800583e <UART_SetConfig+0x1ba>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005836:	e002      	b.n	800583e <UART_SetConfig+0x1ba>
 8005838:	2310      	movs	r3, #16
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a51      	ldr	r2, [pc, #324]	; (8005988 <UART_SetConfig+0x304>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d17a      	bne.n	800593e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800584c:	2b08      	cmp	r3, #8
 800584e:	d824      	bhi.n	800589a <UART_SetConfig+0x216>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x1d4>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800587d 	.word	0x0800587d
 800585c:	0800589b 	.word	0x0800589b
 8005860:	08005885 	.word	0x08005885
 8005864:	0800589b 	.word	0x0800589b
 8005868:	0800588b 	.word	0x0800588b
 800586c:	0800589b 	.word	0x0800589b
 8005870:	0800589b 	.word	0x0800589b
 8005874:	0800589b 	.word	0x0800589b
 8005878:	08005893 	.word	0x08005893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fe fdfa 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 8005880:	61f8      	str	r0, [r7, #28]
        break;
 8005882:	e010      	b.n	80058a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005884:	4b44      	ldr	r3, [pc, #272]	; (8005998 <UART_SetConfig+0x314>)
 8005886:	61fb      	str	r3, [r7, #28]
        break;
 8005888:	e00d      	b.n	80058a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588a:	f7fe fd5b 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 800588e:	61f8      	str	r0, [r7, #28]
        break;
 8005890:	e009      	b.n	80058a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	61fb      	str	r3, [r7, #28]
        break;
 8005898:	e005      	b.n	80058a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8107 	beq.w	8005abc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4413      	add	r3, r2
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d305      	bcc.n	80058ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d903      	bls.n	80058d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058d0:	e0f4      	b.n	8005abc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2200      	movs	r2, #0
 80058d6:	461c      	mov	r4, r3
 80058d8:	4615      	mov	r5, r2
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	022b      	lsls	r3, r5, #8
 80058e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058e8:	0222      	lsls	r2, r4, #8
 80058ea:	68f9      	ldr	r1, [r7, #12]
 80058ec:	6849      	ldr	r1, [r1, #4]
 80058ee:	0849      	lsrs	r1, r1, #1
 80058f0:	2000      	movs	r0, #0
 80058f2:	4688      	mov	r8, r1
 80058f4:	4681      	mov	r9, r0
 80058f6:	eb12 0a08 	adds.w	sl, r2, r8
 80058fa:	eb43 0b09 	adc.w	fp, r3, r9
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800590c:	4650      	mov	r0, sl
 800590e:	4659      	mov	r1, fp
 8005910:	f7fa fcc6 	bl	80002a0 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4613      	mov	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005922:	d308      	bcc.n	8005936 <UART_SetConfig+0x2b2>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592a:	d204      	bcs.n	8005936 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e0c2      	b.n	8005abc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800593c:	e0be      	b.n	8005abc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005946:	d16a      	bne.n	8005a1e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800594c:	2b08      	cmp	r3, #8
 800594e:	d834      	bhi.n	80059ba <UART_SetConfig+0x336>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x2d4>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800597d 	.word	0x0800597d
 800595c:	0800599d 	.word	0x0800599d
 8005960:	080059a5 	.word	0x080059a5
 8005964:	080059bb 	.word	0x080059bb
 8005968:	080059ab 	.word	0x080059ab
 800596c:	080059bb 	.word	0x080059bb
 8005970:	080059bb 	.word	0x080059bb
 8005974:	080059bb 	.word	0x080059bb
 8005978:	080059b3 	.word	0x080059b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597c:	f7fe fd7a 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 8005980:	61f8      	str	r0, [r7, #28]
        break;
 8005982:	e020      	b.n	80059c6 <UART_SetConfig+0x342>
 8005984:	efff69f3 	.word	0xefff69f3
 8005988:	40008000 	.word	0x40008000
 800598c:	40013800 	.word	0x40013800
 8005990:	40021000 	.word	0x40021000
 8005994:	40004400 	.word	0x40004400
 8005998:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800599c:	f7fe fd80 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 80059a0:	61f8      	str	r0, [r7, #28]
        break;
 80059a2:	e010      	b.n	80059c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059a4:	4b4c      	ldr	r3, [pc, #304]	; (8005ad8 <UART_SetConfig+0x454>)
 80059a6:	61fb      	str	r3, [r7, #28]
        break;
 80059a8:	e00d      	b.n	80059c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059aa:	f7fe fccb 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80059ae:	61f8      	str	r0, [r7, #28]
        break;
 80059b0:	e009      	b.n	80059c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b6:	61fb      	str	r3, [r7, #28]
        break;
 80059b8:	e005      	b.n	80059c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d077      	beq.n	8005abc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	005a      	lsls	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	441a      	add	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b0f      	cmp	r3, #15
 80059e6:	d916      	bls.n	8005a16 <UART_SetConfig+0x392>
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ee:	d212      	bcs.n	8005a16 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f023 030f 	bic.w	r3, r3, #15
 80059f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	8afb      	ldrh	r3, [r7, #22]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	8afa      	ldrh	r2, [r7, #22]
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	e052      	b.n	8005abc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a1c:	e04e      	b.n	8005abc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d827      	bhi.n	8005a76 <UART_SetConfig+0x3f2>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x3a8>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a59 	.word	0x08005a59
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	08005a77 	.word	0x08005a77
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a77 	.word	0x08005a77
 8005a44:	08005a77 	.word	0x08005a77
 8005a48:	08005a77 	.word	0x08005a77
 8005a4c:	08005a6f 	.word	0x08005a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7fe fd10 	bl	8004474 <HAL_RCC_GetPCLK1Freq>
 8005a54:	61f8      	str	r0, [r7, #28]
        break;
 8005a56:	e014      	b.n	8005a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fe fd22 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	61f8      	str	r0, [r7, #28]
        break;
 8005a5e:	e010      	b.n	8005a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a60:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <UART_SetConfig+0x454>)
 8005a62:	61fb      	str	r3, [r7, #28]
        break;
 8005a64:	e00d      	b.n	8005a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a66:	f7fe fc6d 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8005a6a:	61f8      	str	r0, [r7, #28]
        break;
 8005a6c:	e009      	b.n	8005a82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a72:	61fb      	str	r3, [r7, #28]
        break;
 8005a74:	e005      	b.n	8005a82 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a80:	bf00      	nop
    }

    if (pclk != 0U)
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d019      	beq.n	8005abc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	085a      	lsrs	r2, r3, #1
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	441a      	add	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b0f      	cmp	r3, #15
 8005aa0:	d909      	bls.n	8005ab6 <UART_SetConfig+0x432>
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d205      	bcs.n	8005ab6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60da      	str	r2, [r3, #12]
 8005ab4:	e002      	b.n	8005abc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ac8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3728      	adds	r7, #40	; 0x28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad6:	bf00      	nop
 8005ad8:	00f42400 	.word	0x00f42400

08005adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01a      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bda:	d10a      	bne.n	8005bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c30:	f7fb ff28 	bl	8001a84 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d10e      	bne.n	8005c62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f82d 	bl	8005cb2 <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e023      	b.n	8005caa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d10e      	bne.n	8005c8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f817 	bl	8005cb2 <UART_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e00d      	b.n	8005caa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b09c      	sub	sp, #112	; 0x70
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc2:	e0a5      	b.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	f000 80a1 	beq.w	8005e10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cce:	f7fb fed9 	bl	8001a84 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d302      	bcc.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d13e      	bne.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e6      	bne.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d36:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e5      	bne.n	8005d16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e067      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d04f      	beq.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7e:	d147      	bne.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
 8005daa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e6      	bne.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	613b      	str	r3, [r7, #16]
   return(result);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ddc:	623a      	str	r2, [r7, #32]
 8005dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	69f9      	ldr	r1, [r7, #28]
 8005de2:	6a3a      	ldr	r2, [r7, #32]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e5      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e010      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	f43f af4a 	beq.w	8005cc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3770      	adds	r7, #112	; 0x70
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b097      	sub	sp, #92	; 0x5c
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	88fa      	ldrh	r2, [r7, #6]
 8005e5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6e:	d10e      	bne.n	8005e8e <UART_Start_Receive_IT+0x52>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <UART_Start_Receive_IT+0x48>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e82:	e02d      	b.n	8005ee0 <UART_Start_Receive_IT+0xa4>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e8c:	e028      	b.n	8005ee0 <UART_Start_Receive_IT+0xa4>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10d      	bne.n	8005eb2 <UART_Start_Receive_IT+0x76>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <UART_Start_Receive_IT+0x6c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	22ff      	movs	r2, #255	; 0xff
 8005ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ea6:	e01b      	b.n	8005ee0 <UART_Start_Receive_IT+0xa4>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	227f      	movs	r2, #127	; 0x7f
 8005eac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005eb0:	e016      	b.n	8005ee0 <UART_Start_Receive_IT+0xa4>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eba:	d10d      	bne.n	8005ed8 <UART_Start_Receive_IT+0x9c>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <UART_Start_Receive_IT+0x92>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	227f      	movs	r2, #127	; 0x7f
 8005ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ecc:	e008      	b.n	8005ee0 <UART_Start_Receive_IT+0xa4>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	223f      	movs	r2, #63	; 0x3f
 8005ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ed6:	e003      	b.n	8005ee0 <UART_Start_Receive_IT+0xa4>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2222      	movs	r2, #34	; 0x22
 8005eec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	657b      	str	r3, [r7, #84]	; 0x54
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2a:	d107      	bne.n	8005f3c <UART_Start_Receive_IT+0x100>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a24      	ldr	r2, [pc, #144]	; (8005fc8 <UART_Start_Receive_IT+0x18c>)
 8005f38:	665a      	str	r2, [r3, #100]	; 0x64
 8005f3a:	e002      	b.n	8005f42 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4a23      	ldr	r2, [pc, #140]	; (8005fcc <UART_Start_Receive_IT+0x190>)
 8005f40:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d019      	beq.n	8005f86 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
 8005f72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e6      	bne.n	8005f52 <UART_Start_Receive_IT+0x116>
 8005f84:	e018      	b.n	8005fb8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	613b      	str	r3, [r7, #16]
   return(result);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f043 0320 	orr.w	r3, r3, #32
 8005f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	69f9      	ldr	r1, [r7, #28]
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e6      	bne.n	8005f86 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	375c      	adds	r7, #92	; 0x5c
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	080063ef 	.word	0x080063ef
 8005fcc:	0800628f 	.word	0x0800628f

08005fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b095      	sub	sp, #84	; 0x54
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e6      	bne.n	8005fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3308      	adds	r3, #8
 8006010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	61fb      	str	r3, [r7, #28]
   return(result);
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	64bb      	str	r3, [r7, #72]	; 0x48
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800602a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006042:	2b01      	cmp	r3, #1
 8006044:	d118      	bne.n	8006078 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	60bb      	str	r3, [r7, #8]
   return(result);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 0310 	bic.w	r3, r3, #16
 800605a:	647b      	str	r3, [r7, #68]	; 0x44
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	613b      	str	r3, [r7, #16]
   return(result);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e6      	bne.n	8006046 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	665a      	str	r2, [r3, #100]	; 0x64
}
 800608a:	bf00      	nop
 800608c:	3754      	adds	r7, #84	; 0x54
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f7ff facf 	bl	8005658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ba:	bf00      	nop
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b08f      	sub	sp, #60	; 0x3c
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ce:	2b21      	cmp	r3, #33	; 0x21
 80060d0:	d14d      	bne.n	800616e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d132      	bne.n	8006144 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	60bb      	str	r3, [r7, #8]
   return(result);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006124:	633b      	str	r3, [r7, #48]	; 0x30
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	613b      	str	r3, [r7, #16]
   return(result);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e6      	bne.n	8006110 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006142:	e014      	b.n	800616e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	b292      	uxth	r2, r2
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800616e:	bf00      	nop
 8006170:	373c      	adds	r7, #60	; 0x3c
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800617a:	b480      	push	{r7}
 800617c:	b091      	sub	sp, #68	; 0x44
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006186:	2b21      	cmp	r3, #33	; 0x21
 8006188:	d151      	bne.n	800622e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d132      	bne.n	80061fc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	623b      	str	r3, [r7, #32]
   return(result);
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30
 80061b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	69b9      	ldr	r1, [r7, #24]
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	617b      	str	r3, [r7, #20]
   return(result);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e6      	bne.n	80061c8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80061fa:	e018      	b.n	800622e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006204:	881a      	ldrh	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620e:	b292      	uxth	r2, r2
 8006210:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006216:	1c9a      	adds	r2, r3, #2
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800622e:	bf00      	nop
 8006230:	3744      	adds	r7, #68	; 0x44
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b088      	sub	sp, #32
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6979      	ldr	r1, [r7, #20]
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	613b      	str	r3, [r7, #16]
   return(result);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e6      	bne.n	8006242 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff f9d5 	bl	8005630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006286:	bf00      	nop
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b096      	sub	sp, #88	; 0x58
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800629c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a4:	2b22      	cmp	r3, #34	; 0x22
 80062a6:	f040 8094 	bne.w	80063d2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80062b8:	b2d9      	uxtb	r1, r3
 80062ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c4:	400a      	ands	r2, r1
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d179      	bne.n	80063e6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006302:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006306:	653b      	str	r3, [r7, #80]	; 0x50
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
 8006312:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800631e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	623b      	str	r3, [r7, #32]
   return(result);
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f023 0301 	bic.w	r3, r3, #1
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006344:	633a      	str	r2, [r7, #48]	; 0x30
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e5      	bne.n	8006324 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	2b01      	cmp	r3, #1
 800636a:	d12e      	bne.n	80063ca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0310 	bic.w	r3, r3, #16
 8006386:	64bb      	str	r3, [r7, #72]	; 0x48
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006390:	61fb      	str	r3, [r7, #28]
 8006392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	69b9      	ldr	r1, [r7, #24]
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	617b      	str	r3, [r7, #20]
   return(result);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e6      	bne.n	8006372 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b10      	cmp	r3, #16
 80063b0:	d103      	bne.n	80063ba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2210      	movs	r2, #16
 80063b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff f952 	bl	800566c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063c8:	e00d      	b.n	80063e6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff f93a 	bl	8005644 <HAL_UART_RxCpltCallback>
}
 80063d0:	e009      	b.n	80063e6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	8b1b      	ldrh	r3, [r3, #24]
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0208 	orr.w	r2, r2, #8
 80063e2:	b292      	uxth	r2, r2
 80063e4:	831a      	strh	r2, [r3, #24]
}
 80063e6:	bf00      	nop
 80063e8:	3758      	adds	r7, #88	; 0x58
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b096      	sub	sp, #88	; 0x58
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006404:	2b22      	cmp	r3, #34	; 0x22
 8006406:	f040 8094 	bne.w	8006532 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006410:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006418:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800641a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800641e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006422:	4013      	ands	r3, r2
 8006424:	b29a      	uxth	r2, r3
 8006426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006428:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	1c9a      	adds	r2, r3, #2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d179      	bne.n	8006546 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006470:	643b      	str	r3, [r7, #64]	; 0x40
 8006472:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3308      	adds	r3, #8
 800648a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	61fb      	str	r3, [r7, #28]
   return(result);
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	64bb      	str	r3, [r7, #72]	; 0x48
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d12e      	bne.n	800652a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f023 0310 	bic.w	r3, r3, #16
 80064e6:	647b      	str	r3, [r7, #68]	; 0x44
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6979      	ldr	r1, [r7, #20]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	613b      	str	r3, [r7, #16]
   return(result);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e6      	bne.n	80064d2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b10      	cmp	r3, #16
 8006510:	d103      	bne.n	800651a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2210      	movs	r2, #16
 8006518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff f8a2 	bl	800566c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006528:	e00d      	b.n	8006546 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff f88a 	bl	8005644 <HAL_UART_RxCpltCallback>
}
 8006530:	e009      	b.n	8006546 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	8b1b      	ldrh	r3, [r3, #24]
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0208 	orr.w	r2, r2, #8
 8006542:	b292      	uxth	r2, r2
 8006544:	831a      	strh	r2, [r3, #24]
}
 8006546:	bf00      	nop
 8006548:	3758      	adds	r7, #88	; 0x58
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <atoi>:
 8006562:	220a      	movs	r2, #10
 8006564:	2100      	movs	r1, #0
 8006566:	f000 ba79 	b.w	8006a5c <strtol>
	...

0800656c <__errno>:
 800656c:	4b01      	ldr	r3, [pc, #4]	; (8006574 <__errno+0x8>)
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	2000000c 	.word	0x2000000c

08006578 <__libc_init_array>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	4d0d      	ldr	r5, [pc, #52]	; (80065b0 <__libc_init_array+0x38>)
 800657c:	4c0d      	ldr	r4, [pc, #52]	; (80065b4 <__libc_init_array+0x3c>)
 800657e:	1b64      	subs	r4, r4, r5
 8006580:	10a4      	asrs	r4, r4, #2
 8006582:	2600      	movs	r6, #0
 8006584:	42a6      	cmp	r6, r4
 8006586:	d109      	bne.n	800659c <__libc_init_array+0x24>
 8006588:	4d0b      	ldr	r5, [pc, #44]	; (80065b8 <__libc_init_array+0x40>)
 800658a:	4c0c      	ldr	r4, [pc, #48]	; (80065bc <__libc_init_array+0x44>)
 800658c:	f001 fb2e 	bl	8007bec <_init>
 8006590:	1b64      	subs	r4, r4, r5
 8006592:	10a4      	asrs	r4, r4, #2
 8006594:	2600      	movs	r6, #0
 8006596:	42a6      	cmp	r6, r4
 8006598:	d105      	bne.n	80065a6 <__libc_init_array+0x2e>
 800659a:	bd70      	pop	{r4, r5, r6, pc}
 800659c:	f855 3b04 	ldr.w	r3, [r5], #4
 80065a0:	4798      	blx	r3
 80065a2:	3601      	adds	r6, #1
 80065a4:	e7ee      	b.n	8006584 <__libc_init_array+0xc>
 80065a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065aa:	4798      	blx	r3
 80065ac:	3601      	adds	r6, #1
 80065ae:	e7f2      	b.n	8006596 <__libc_init_array+0x1e>
 80065b0:	080080d8 	.word	0x080080d8
 80065b4:	080080d8 	.word	0x080080d8
 80065b8:	080080d8 	.word	0x080080d8
 80065bc:	080080dc 	.word	0x080080dc

080065c0 <malloc>:
 80065c0:	4b02      	ldr	r3, [pc, #8]	; (80065cc <malloc+0xc>)
 80065c2:	4601      	mov	r1, r0
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f000 b87f 	b.w	80066c8 <_malloc_r>
 80065ca:	bf00      	nop
 80065cc:	2000000c 	.word	0x2000000c

080065d0 <free>:
 80065d0:	4b02      	ldr	r3, [pc, #8]	; (80065dc <free+0xc>)
 80065d2:	4601      	mov	r1, r0
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f000 b80b 	b.w	80065f0 <_free_r>
 80065da:	bf00      	nop
 80065dc:	2000000c 	.word	0x2000000c

080065e0 <memset>:
 80065e0:	4402      	add	r2, r0
 80065e2:	4603      	mov	r3, r0
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d100      	bne.n	80065ea <memset+0xa>
 80065e8:	4770      	bx	lr
 80065ea:	f803 1b01 	strb.w	r1, [r3], #1
 80065ee:	e7f9      	b.n	80065e4 <memset+0x4>

080065f0 <_free_r>:
 80065f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065f2:	2900      	cmp	r1, #0
 80065f4:	d044      	beq.n	8006680 <_free_r+0x90>
 80065f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065fa:	9001      	str	r0, [sp, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006602:	bfb8      	it	lt
 8006604:	18e4      	addlt	r4, r4, r3
 8006606:	f000 fa63 	bl	8006ad0 <__malloc_lock>
 800660a:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <_free_r+0x94>)
 800660c:	9801      	ldr	r0, [sp, #4]
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	b933      	cbnz	r3, 8006620 <_free_r+0x30>
 8006612:	6063      	str	r3, [r4, #4]
 8006614:	6014      	str	r4, [r2, #0]
 8006616:	b003      	add	sp, #12
 8006618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800661c:	f000 ba5e 	b.w	8006adc <__malloc_unlock>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d908      	bls.n	8006636 <_free_r+0x46>
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	1961      	adds	r1, r4, r5
 8006628:	428b      	cmp	r3, r1
 800662a:	bf01      	itttt	eq
 800662c:	6819      	ldreq	r1, [r3, #0]
 800662e:	685b      	ldreq	r3, [r3, #4]
 8006630:	1949      	addeq	r1, r1, r5
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	e7ed      	b.n	8006612 <_free_r+0x22>
 8006636:	461a      	mov	r2, r3
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b10b      	cbz	r3, 8006640 <_free_r+0x50>
 800663c:	42a3      	cmp	r3, r4
 800663e:	d9fa      	bls.n	8006636 <_free_r+0x46>
 8006640:	6811      	ldr	r1, [r2, #0]
 8006642:	1855      	adds	r5, r2, r1
 8006644:	42a5      	cmp	r5, r4
 8006646:	d10b      	bne.n	8006660 <_free_r+0x70>
 8006648:	6824      	ldr	r4, [r4, #0]
 800664a:	4421      	add	r1, r4
 800664c:	1854      	adds	r4, r2, r1
 800664e:	42a3      	cmp	r3, r4
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	d1e0      	bne.n	8006616 <_free_r+0x26>
 8006654:	681c      	ldr	r4, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	6053      	str	r3, [r2, #4]
 800665a:	4421      	add	r1, r4
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	e7da      	b.n	8006616 <_free_r+0x26>
 8006660:	d902      	bls.n	8006668 <_free_r+0x78>
 8006662:	230c      	movs	r3, #12
 8006664:	6003      	str	r3, [r0, #0]
 8006666:	e7d6      	b.n	8006616 <_free_r+0x26>
 8006668:	6825      	ldr	r5, [r4, #0]
 800666a:	1961      	adds	r1, r4, r5
 800666c:	428b      	cmp	r3, r1
 800666e:	bf04      	itt	eq
 8006670:	6819      	ldreq	r1, [r3, #0]
 8006672:	685b      	ldreq	r3, [r3, #4]
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	bf04      	itt	eq
 8006678:	1949      	addeq	r1, r1, r5
 800667a:	6021      	streq	r1, [r4, #0]
 800667c:	6054      	str	r4, [r2, #4]
 800667e:	e7ca      	b.n	8006616 <_free_r+0x26>
 8006680:	b003      	add	sp, #12
 8006682:	bd30      	pop	{r4, r5, pc}
 8006684:	2000034c 	.word	0x2000034c

08006688 <sbrk_aligned>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4e0e      	ldr	r6, [pc, #56]	; (80066c4 <sbrk_aligned+0x3c>)
 800668c:	460c      	mov	r4, r1
 800668e:	6831      	ldr	r1, [r6, #0]
 8006690:	4605      	mov	r5, r0
 8006692:	b911      	cbnz	r1, 800669a <sbrk_aligned+0x12>
 8006694:	f000 f88c 	bl	80067b0 <_sbrk_r>
 8006698:	6030      	str	r0, [r6, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f000 f887 	bl	80067b0 <_sbrk_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d00a      	beq.n	80066bc <sbrk_aligned+0x34>
 80066a6:	1cc4      	adds	r4, r0, #3
 80066a8:	f024 0403 	bic.w	r4, r4, #3
 80066ac:	42a0      	cmp	r0, r4
 80066ae:	d007      	beq.n	80066c0 <sbrk_aligned+0x38>
 80066b0:	1a21      	subs	r1, r4, r0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f87c 	bl	80067b0 <_sbrk_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d101      	bne.n	80066c0 <sbrk_aligned+0x38>
 80066bc:	f04f 34ff 	mov.w	r4, #4294967295
 80066c0:	4620      	mov	r0, r4
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	20000350 	.word	0x20000350

080066c8 <_malloc_r>:
 80066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066cc:	1ccd      	adds	r5, r1, #3
 80066ce:	f025 0503 	bic.w	r5, r5, #3
 80066d2:	3508      	adds	r5, #8
 80066d4:	2d0c      	cmp	r5, #12
 80066d6:	bf38      	it	cc
 80066d8:	250c      	movcc	r5, #12
 80066da:	2d00      	cmp	r5, #0
 80066dc:	4607      	mov	r7, r0
 80066de:	db01      	blt.n	80066e4 <_malloc_r+0x1c>
 80066e0:	42a9      	cmp	r1, r5
 80066e2:	d905      	bls.n	80066f0 <_malloc_r+0x28>
 80066e4:	230c      	movs	r3, #12
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	2600      	movs	r6, #0
 80066ea:	4630      	mov	r0, r6
 80066ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f0:	4e2e      	ldr	r6, [pc, #184]	; (80067ac <_malloc_r+0xe4>)
 80066f2:	f000 f9ed 	bl	8006ad0 <__malloc_lock>
 80066f6:	6833      	ldr	r3, [r6, #0]
 80066f8:	461c      	mov	r4, r3
 80066fa:	bb34      	cbnz	r4, 800674a <_malloc_r+0x82>
 80066fc:	4629      	mov	r1, r5
 80066fe:	4638      	mov	r0, r7
 8006700:	f7ff ffc2 	bl	8006688 <sbrk_aligned>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	4604      	mov	r4, r0
 8006708:	d14d      	bne.n	80067a6 <_malloc_r+0xde>
 800670a:	6834      	ldr	r4, [r6, #0]
 800670c:	4626      	mov	r6, r4
 800670e:	2e00      	cmp	r6, #0
 8006710:	d140      	bne.n	8006794 <_malloc_r+0xcc>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	4631      	mov	r1, r6
 8006716:	4638      	mov	r0, r7
 8006718:	eb04 0803 	add.w	r8, r4, r3
 800671c:	f000 f848 	bl	80067b0 <_sbrk_r>
 8006720:	4580      	cmp	r8, r0
 8006722:	d13a      	bne.n	800679a <_malloc_r+0xd2>
 8006724:	6821      	ldr	r1, [r4, #0]
 8006726:	3503      	adds	r5, #3
 8006728:	1a6d      	subs	r5, r5, r1
 800672a:	f025 0503 	bic.w	r5, r5, #3
 800672e:	3508      	adds	r5, #8
 8006730:	2d0c      	cmp	r5, #12
 8006732:	bf38      	it	cc
 8006734:	250c      	movcc	r5, #12
 8006736:	4629      	mov	r1, r5
 8006738:	4638      	mov	r0, r7
 800673a:	f7ff ffa5 	bl	8006688 <sbrk_aligned>
 800673e:	3001      	adds	r0, #1
 8006740:	d02b      	beq.n	800679a <_malloc_r+0xd2>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	442b      	add	r3, r5
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	e00e      	b.n	8006768 <_malloc_r+0xa0>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	1b52      	subs	r2, r2, r5
 800674e:	d41e      	bmi.n	800678e <_malloc_r+0xc6>
 8006750:	2a0b      	cmp	r2, #11
 8006752:	d916      	bls.n	8006782 <_malloc_r+0xba>
 8006754:	1961      	adds	r1, r4, r5
 8006756:	42a3      	cmp	r3, r4
 8006758:	6025      	str	r5, [r4, #0]
 800675a:	bf18      	it	ne
 800675c:	6059      	strne	r1, [r3, #4]
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	bf08      	it	eq
 8006762:	6031      	streq	r1, [r6, #0]
 8006764:	5162      	str	r2, [r4, r5]
 8006766:	604b      	str	r3, [r1, #4]
 8006768:	4638      	mov	r0, r7
 800676a:	f104 060b 	add.w	r6, r4, #11
 800676e:	f000 f9b5 	bl	8006adc <__malloc_unlock>
 8006772:	f026 0607 	bic.w	r6, r6, #7
 8006776:	1d23      	adds	r3, r4, #4
 8006778:	1af2      	subs	r2, r6, r3
 800677a:	d0b6      	beq.n	80066ea <_malloc_r+0x22>
 800677c:	1b9b      	subs	r3, r3, r6
 800677e:	50a3      	str	r3, [r4, r2]
 8006780:	e7b3      	b.n	80066ea <_malloc_r+0x22>
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	42a3      	cmp	r3, r4
 8006786:	bf0c      	ite	eq
 8006788:	6032      	streq	r2, [r6, #0]
 800678a:	605a      	strne	r2, [r3, #4]
 800678c:	e7ec      	b.n	8006768 <_malloc_r+0xa0>
 800678e:	4623      	mov	r3, r4
 8006790:	6864      	ldr	r4, [r4, #4]
 8006792:	e7b2      	b.n	80066fa <_malloc_r+0x32>
 8006794:	4634      	mov	r4, r6
 8006796:	6876      	ldr	r6, [r6, #4]
 8006798:	e7b9      	b.n	800670e <_malloc_r+0x46>
 800679a:	230c      	movs	r3, #12
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4638      	mov	r0, r7
 80067a0:	f000 f99c 	bl	8006adc <__malloc_unlock>
 80067a4:	e7a1      	b.n	80066ea <_malloc_r+0x22>
 80067a6:	6025      	str	r5, [r4, #0]
 80067a8:	e7de      	b.n	8006768 <_malloc_r+0xa0>
 80067aa:	bf00      	nop
 80067ac:	2000034c 	.word	0x2000034c

080067b0 <_sbrk_r>:
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4d06      	ldr	r5, [pc, #24]	; (80067cc <_sbrk_r+0x1c>)
 80067b4:	2300      	movs	r3, #0
 80067b6:	4604      	mov	r4, r0
 80067b8:	4608      	mov	r0, r1
 80067ba:	602b      	str	r3, [r5, #0]
 80067bc:	f7fb f888 	bl	80018d0 <_sbrk>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_sbrk_r+0x1a>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_sbrk_r+0x1a>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000354 	.word	0x20000354

080067d0 <sniprintf>:
 80067d0:	b40c      	push	{r2, r3}
 80067d2:	b530      	push	{r4, r5, lr}
 80067d4:	4b17      	ldr	r3, [pc, #92]	; (8006834 <sniprintf+0x64>)
 80067d6:	1e0c      	subs	r4, r1, #0
 80067d8:	681d      	ldr	r5, [r3, #0]
 80067da:	b09d      	sub	sp, #116	; 0x74
 80067dc:	da08      	bge.n	80067f0 <sniprintf+0x20>
 80067de:	238b      	movs	r3, #139	; 0x8b
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	f04f 30ff 	mov.w	r0, #4294967295
 80067e6:	b01d      	add	sp, #116	; 0x74
 80067e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067ec:	b002      	add	sp, #8
 80067ee:	4770      	bx	lr
 80067f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80067f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80067f8:	bf14      	ite	ne
 80067fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067fe:	4623      	moveq	r3, r4
 8006800:	9304      	str	r3, [sp, #16]
 8006802:	9307      	str	r3, [sp, #28]
 8006804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006808:	9002      	str	r0, [sp, #8]
 800680a:	9006      	str	r0, [sp, #24]
 800680c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006810:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006812:	ab21      	add	r3, sp, #132	; 0x84
 8006814:	a902      	add	r1, sp, #8
 8006816:	4628      	mov	r0, r5
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	f000 f9c1 	bl	8006ba0 <_svfiprintf_r>
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	bfbc      	itt	lt
 8006822:	238b      	movlt	r3, #139	; 0x8b
 8006824:	602b      	strlt	r3, [r5, #0]
 8006826:	2c00      	cmp	r4, #0
 8006828:	d0dd      	beq.n	80067e6 <sniprintf+0x16>
 800682a:	9b02      	ldr	r3, [sp, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e7d9      	b.n	80067e6 <sniprintf+0x16>
 8006832:	bf00      	nop
 8006834:	2000000c 	.word	0x2000000c

08006838 <siprintf>:
 8006838:	b40e      	push	{r1, r2, r3}
 800683a:	b500      	push	{lr}
 800683c:	b09c      	sub	sp, #112	; 0x70
 800683e:	ab1d      	add	r3, sp, #116	; 0x74
 8006840:	9002      	str	r0, [sp, #8]
 8006842:	9006      	str	r0, [sp, #24]
 8006844:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006848:	4809      	ldr	r0, [pc, #36]	; (8006870 <siprintf+0x38>)
 800684a:	9107      	str	r1, [sp, #28]
 800684c:	9104      	str	r1, [sp, #16]
 800684e:	4909      	ldr	r1, [pc, #36]	; (8006874 <siprintf+0x3c>)
 8006850:	f853 2b04 	ldr.w	r2, [r3], #4
 8006854:	9105      	str	r1, [sp, #20]
 8006856:	6800      	ldr	r0, [r0, #0]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	a902      	add	r1, sp, #8
 800685c:	f000 f9a0 	bl	8006ba0 <_svfiprintf_r>
 8006860:	9b02      	ldr	r3, [sp, #8]
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	b01c      	add	sp, #112	; 0x70
 8006868:	f85d eb04 	ldr.w	lr, [sp], #4
 800686c:	b003      	add	sp, #12
 800686e:	4770      	bx	lr
 8006870:	2000000c 	.word	0x2000000c
 8006874:	ffff0208 	.word	0xffff0208

08006878 <strncpy>:
 8006878:	b510      	push	{r4, lr}
 800687a:	3901      	subs	r1, #1
 800687c:	4603      	mov	r3, r0
 800687e:	b132      	cbz	r2, 800688e <strncpy+0x16>
 8006880:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006884:	f803 4b01 	strb.w	r4, [r3], #1
 8006888:	3a01      	subs	r2, #1
 800688a:	2c00      	cmp	r4, #0
 800688c:	d1f7      	bne.n	800687e <strncpy+0x6>
 800688e:	441a      	add	r2, r3
 8006890:	2100      	movs	r1, #0
 8006892:	4293      	cmp	r3, r2
 8006894:	d100      	bne.n	8006898 <strncpy+0x20>
 8006896:	bd10      	pop	{r4, pc}
 8006898:	f803 1b01 	strb.w	r1, [r3], #1
 800689c:	e7f9      	b.n	8006892 <strncpy+0x1a>
	...

080068a0 <strtok>:
 80068a0:	4b16      	ldr	r3, [pc, #88]	; (80068fc <strtok+0x5c>)
 80068a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068a4:	681e      	ldr	r6, [r3, #0]
 80068a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80068a8:	4605      	mov	r5, r0
 80068aa:	b9fc      	cbnz	r4, 80068ec <strtok+0x4c>
 80068ac:	2050      	movs	r0, #80	; 0x50
 80068ae:	9101      	str	r1, [sp, #4]
 80068b0:	f7ff fe86 	bl	80065c0 <malloc>
 80068b4:	9901      	ldr	r1, [sp, #4]
 80068b6:	65b0      	str	r0, [r6, #88]	; 0x58
 80068b8:	4602      	mov	r2, r0
 80068ba:	b920      	cbnz	r0, 80068c6 <strtok+0x26>
 80068bc:	4b10      	ldr	r3, [pc, #64]	; (8006900 <strtok+0x60>)
 80068be:	4811      	ldr	r0, [pc, #68]	; (8006904 <strtok+0x64>)
 80068c0:	2157      	movs	r1, #87	; 0x57
 80068c2:	f000 f8d5 	bl	8006a70 <__assert_func>
 80068c6:	e9c0 4400 	strd	r4, r4, [r0]
 80068ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80068ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80068d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80068d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80068da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80068de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80068e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80068e6:	6184      	str	r4, [r0, #24]
 80068e8:	7704      	strb	r4, [r0, #28]
 80068ea:	6244      	str	r4, [r0, #36]	; 0x24
 80068ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80068ee:	2301      	movs	r3, #1
 80068f0:	4628      	mov	r0, r5
 80068f2:	b002      	add	sp, #8
 80068f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068f8:	f000 b806 	b.w	8006908 <__strtok_r>
 80068fc:	2000000c 	.word	0x2000000c
 8006900:	08007f8c 	.word	0x08007f8c
 8006904:	08007fa3 	.word	0x08007fa3

08006908 <__strtok_r>:
 8006908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690a:	b908      	cbnz	r0, 8006910 <__strtok_r+0x8>
 800690c:	6810      	ldr	r0, [r2, #0]
 800690e:	b188      	cbz	r0, 8006934 <__strtok_r+0x2c>
 8006910:	4604      	mov	r4, r0
 8006912:	4620      	mov	r0, r4
 8006914:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006918:	460f      	mov	r7, r1
 800691a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800691e:	b91e      	cbnz	r6, 8006928 <__strtok_r+0x20>
 8006920:	b965      	cbnz	r5, 800693c <__strtok_r+0x34>
 8006922:	6015      	str	r5, [r2, #0]
 8006924:	4628      	mov	r0, r5
 8006926:	e005      	b.n	8006934 <__strtok_r+0x2c>
 8006928:	42b5      	cmp	r5, r6
 800692a:	d1f6      	bne.n	800691a <__strtok_r+0x12>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f0      	bne.n	8006912 <__strtok_r+0xa>
 8006930:	6014      	str	r4, [r2, #0]
 8006932:	7003      	strb	r3, [r0, #0]
 8006934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006936:	461c      	mov	r4, r3
 8006938:	e00c      	b.n	8006954 <__strtok_r+0x4c>
 800693a:	b915      	cbnz	r5, 8006942 <__strtok_r+0x3a>
 800693c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006940:	460e      	mov	r6, r1
 8006942:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006946:	42ab      	cmp	r3, r5
 8006948:	d1f7      	bne.n	800693a <__strtok_r+0x32>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f3      	beq.n	8006936 <__strtok_r+0x2e>
 800694e:	2300      	movs	r3, #0
 8006950:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006954:	6014      	str	r4, [r2, #0]
 8006956:	e7ed      	b.n	8006934 <__strtok_r+0x2c>

08006958 <_strtol_l.constprop.0>:
 8006958:	2b01      	cmp	r3, #1
 800695a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800695e:	d001      	beq.n	8006964 <_strtol_l.constprop.0+0xc>
 8006960:	2b24      	cmp	r3, #36	; 0x24
 8006962:	d906      	bls.n	8006972 <_strtol_l.constprop.0+0x1a>
 8006964:	f7ff fe02 	bl	800656c <__errno>
 8006968:	2316      	movs	r3, #22
 800696a:	6003      	str	r3, [r0, #0]
 800696c:	2000      	movs	r0, #0
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a58 <_strtol_l.constprop.0+0x100>
 8006976:	460d      	mov	r5, r1
 8006978:	462e      	mov	r6, r5
 800697a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800697e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006982:	f017 0708 	ands.w	r7, r7, #8
 8006986:	d1f7      	bne.n	8006978 <_strtol_l.constprop.0+0x20>
 8006988:	2c2d      	cmp	r4, #45	; 0x2d
 800698a:	d132      	bne.n	80069f2 <_strtol_l.constprop.0+0x9a>
 800698c:	782c      	ldrb	r4, [r5, #0]
 800698e:	2701      	movs	r7, #1
 8006990:	1cb5      	adds	r5, r6, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d05b      	beq.n	8006a4e <_strtol_l.constprop.0+0xf6>
 8006996:	2b10      	cmp	r3, #16
 8006998:	d109      	bne.n	80069ae <_strtol_l.constprop.0+0x56>
 800699a:	2c30      	cmp	r4, #48	; 0x30
 800699c:	d107      	bne.n	80069ae <_strtol_l.constprop.0+0x56>
 800699e:	782c      	ldrb	r4, [r5, #0]
 80069a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80069a4:	2c58      	cmp	r4, #88	; 0x58
 80069a6:	d14d      	bne.n	8006a44 <_strtol_l.constprop.0+0xec>
 80069a8:	786c      	ldrb	r4, [r5, #1]
 80069aa:	2310      	movs	r3, #16
 80069ac:	3502      	adds	r5, #2
 80069ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80069b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80069b6:	f04f 0c00 	mov.w	ip, #0
 80069ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80069be:	4666      	mov	r6, ip
 80069c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80069c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80069c8:	f1be 0f09 	cmp.w	lr, #9
 80069cc:	d816      	bhi.n	80069fc <_strtol_l.constprop.0+0xa4>
 80069ce:	4674      	mov	r4, lr
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	dd24      	ble.n	8006a1e <_strtol_l.constprop.0+0xc6>
 80069d4:	f1bc 0f00 	cmp.w	ip, #0
 80069d8:	db1e      	blt.n	8006a18 <_strtol_l.constprop.0+0xc0>
 80069da:	45b1      	cmp	r9, r6
 80069dc:	d31c      	bcc.n	8006a18 <_strtol_l.constprop.0+0xc0>
 80069de:	d101      	bne.n	80069e4 <_strtol_l.constprop.0+0x8c>
 80069e0:	45a2      	cmp	sl, r4
 80069e2:	db19      	blt.n	8006a18 <_strtol_l.constprop.0+0xc0>
 80069e4:	fb06 4603 	mla	r6, r6, r3, r4
 80069e8:	f04f 0c01 	mov.w	ip, #1
 80069ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069f0:	e7e8      	b.n	80069c4 <_strtol_l.constprop.0+0x6c>
 80069f2:	2c2b      	cmp	r4, #43	; 0x2b
 80069f4:	bf04      	itt	eq
 80069f6:	782c      	ldrbeq	r4, [r5, #0]
 80069f8:	1cb5      	addeq	r5, r6, #2
 80069fa:	e7ca      	b.n	8006992 <_strtol_l.constprop.0+0x3a>
 80069fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006a00:	f1be 0f19 	cmp.w	lr, #25
 8006a04:	d801      	bhi.n	8006a0a <_strtol_l.constprop.0+0xb2>
 8006a06:	3c37      	subs	r4, #55	; 0x37
 8006a08:	e7e2      	b.n	80069d0 <_strtol_l.constprop.0+0x78>
 8006a0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006a0e:	f1be 0f19 	cmp.w	lr, #25
 8006a12:	d804      	bhi.n	8006a1e <_strtol_l.constprop.0+0xc6>
 8006a14:	3c57      	subs	r4, #87	; 0x57
 8006a16:	e7db      	b.n	80069d0 <_strtol_l.constprop.0+0x78>
 8006a18:	f04f 3cff 	mov.w	ip, #4294967295
 8006a1c:	e7e6      	b.n	80069ec <_strtol_l.constprop.0+0x94>
 8006a1e:	f1bc 0f00 	cmp.w	ip, #0
 8006a22:	da05      	bge.n	8006a30 <_strtol_l.constprop.0+0xd8>
 8006a24:	2322      	movs	r3, #34	; 0x22
 8006a26:	6003      	str	r3, [r0, #0]
 8006a28:	4646      	mov	r6, r8
 8006a2a:	b942      	cbnz	r2, 8006a3e <_strtol_l.constprop.0+0xe6>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	e79e      	b.n	800696e <_strtol_l.constprop.0+0x16>
 8006a30:	b107      	cbz	r7, 8006a34 <_strtol_l.constprop.0+0xdc>
 8006a32:	4276      	negs	r6, r6
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	d0f9      	beq.n	8006a2c <_strtol_l.constprop.0+0xd4>
 8006a38:	f1bc 0f00 	cmp.w	ip, #0
 8006a3c:	d000      	beq.n	8006a40 <_strtol_l.constprop.0+0xe8>
 8006a3e:	1e69      	subs	r1, r5, #1
 8006a40:	6011      	str	r1, [r2, #0]
 8006a42:	e7f3      	b.n	8006a2c <_strtol_l.constprop.0+0xd4>
 8006a44:	2430      	movs	r4, #48	; 0x30
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1b1      	bne.n	80069ae <_strtol_l.constprop.0+0x56>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	e7af      	b.n	80069ae <_strtol_l.constprop.0+0x56>
 8006a4e:	2c30      	cmp	r4, #48	; 0x30
 8006a50:	d0a5      	beq.n	800699e <_strtol_l.constprop.0+0x46>
 8006a52:	230a      	movs	r3, #10
 8006a54:	e7ab      	b.n	80069ae <_strtol_l.constprop.0+0x56>
 8006a56:	bf00      	nop
 8006a58:	08007e85 	.word	0x08007e85

08006a5c <strtol>:
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	460a      	mov	r2, r1
 8006a60:	4601      	mov	r1, r0
 8006a62:	4802      	ldr	r0, [pc, #8]	; (8006a6c <strtol+0x10>)
 8006a64:	6800      	ldr	r0, [r0, #0]
 8006a66:	f7ff bf77 	b.w	8006958 <_strtol_l.constprop.0>
 8006a6a:	bf00      	nop
 8006a6c:	2000000c 	.word	0x2000000c

08006a70 <__assert_func>:
 8006a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a72:	4614      	mov	r4, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <__assert_func+0x2c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	68d8      	ldr	r0, [r3, #12]
 8006a7e:	b14c      	cbz	r4, 8006a94 <__assert_func+0x24>
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <__assert_func+0x30>)
 8006a82:	9100      	str	r1, [sp, #0]
 8006a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a88:	4906      	ldr	r1, [pc, #24]	; (8006aa4 <__assert_func+0x34>)
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	f000 f80e 	bl	8006aac <fiprintf>
 8006a90:	f000 fd34 	bl	80074fc <abort>
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <__assert_func+0x38>)
 8006a96:	461c      	mov	r4, r3
 8006a98:	e7f3      	b.n	8006a82 <__assert_func+0x12>
 8006a9a:	bf00      	nop
 8006a9c:	2000000c 	.word	0x2000000c
 8006aa0:	08008000 	.word	0x08008000
 8006aa4:	0800800d 	.word	0x0800800d
 8006aa8:	0800803b 	.word	0x0800803b

08006aac <fiprintf>:
 8006aac:	b40e      	push	{r1, r2, r3}
 8006aae:	b503      	push	{r0, r1, lr}
 8006ab0:	4601      	mov	r1, r0
 8006ab2:	ab03      	add	r3, sp, #12
 8006ab4:	4805      	ldr	r0, [pc, #20]	; (8006acc <fiprintf+0x20>)
 8006ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aba:	6800      	ldr	r0, [r0, #0]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	f000 f999 	bl	8006df4 <_vfiprintf_r>
 8006ac2:	b002      	add	sp, #8
 8006ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ac8:	b003      	add	sp, #12
 8006aca:	4770      	bx	lr
 8006acc:	2000000c 	.word	0x2000000c

08006ad0 <__malloc_lock>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__malloc_lock+0x8>)
 8006ad2:	f000 bed3 	b.w	800787c <__retarget_lock_acquire_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	20000358 	.word	0x20000358

08006adc <__malloc_unlock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__malloc_unlock+0x8>)
 8006ade:	f000 bece 	b.w	800787e <__retarget_lock_release_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	20000358 	.word	0x20000358

08006ae8 <__ssputs_r>:
 8006ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	688e      	ldr	r6, [r1, #8]
 8006aee:	429e      	cmp	r6, r3
 8006af0:	4682      	mov	sl, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	4690      	mov	r8, r2
 8006af6:	461f      	mov	r7, r3
 8006af8:	d838      	bhi.n	8006b6c <__ssputs_r+0x84>
 8006afa:	898a      	ldrh	r2, [r1, #12]
 8006afc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b00:	d032      	beq.n	8006b68 <__ssputs_r+0x80>
 8006b02:	6825      	ldr	r5, [r4, #0]
 8006b04:	6909      	ldr	r1, [r1, #16]
 8006b06:	eba5 0901 	sub.w	r9, r5, r1
 8006b0a:	6965      	ldr	r5, [r4, #20]
 8006b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b14:	3301      	adds	r3, #1
 8006b16:	444b      	add	r3, r9
 8006b18:	106d      	asrs	r5, r5, #1
 8006b1a:	429d      	cmp	r5, r3
 8006b1c:	bf38      	it	cc
 8006b1e:	461d      	movcc	r5, r3
 8006b20:	0553      	lsls	r3, r2, #21
 8006b22:	d531      	bpl.n	8006b88 <__ssputs_r+0xa0>
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7ff fdcf 	bl	80066c8 <_malloc_r>
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	b950      	cbnz	r0, 8006b44 <__ssputs_r+0x5c>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	f8ca 3000 	str.w	r3, [sl]
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3a:	81a3      	strh	r3, [r4, #12]
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b44:	6921      	ldr	r1, [r4, #16]
 8006b46:	464a      	mov	r2, r9
 8006b48:	f000 ff00 	bl	800794c <memcpy>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b56:	81a3      	strh	r3, [r4, #12]
 8006b58:	6126      	str	r6, [r4, #16]
 8006b5a:	6165      	str	r5, [r4, #20]
 8006b5c:	444e      	add	r6, r9
 8006b5e:	eba5 0509 	sub.w	r5, r5, r9
 8006b62:	6026      	str	r6, [r4, #0]
 8006b64:	60a5      	str	r5, [r4, #8]
 8006b66:	463e      	mov	r6, r7
 8006b68:	42be      	cmp	r6, r7
 8006b6a:	d900      	bls.n	8006b6e <__ssputs_r+0x86>
 8006b6c:	463e      	mov	r6, r7
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	4632      	mov	r2, r6
 8006b72:	4641      	mov	r1, r8
 8006b74:	f000 fef8 	bl	8007968 <memmove>
 8006b78:	68a3      	ldr	r3, [r4, #8]
 8006b7a:	1b9b      	subs	r3, r3, r6
 8006b7c:	60a3      	str	r3, [r4, #8]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	4433      	add	r3, r6
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	2000      	movs	r0, #0
 8006b86:	e7db      	b.n	8006b40 <__ssputs_r+0x58>
 8006b88:	462a      	mov	r2, r5
 8006b8a:	f000 ff07 	bl	800799c <_realloc_r>
 8006b8e:	4606      	mov	r6, r0
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d1e1      	bne.n	8006b58 <__ssputs_r+0x70>
 8006b94:	6921      	ldr	r1, [r4, #16]
 8006b96:	4650      	mov	r0, sl
 8006b98:	f7ff fd2a 	bl	80065f0 <_free_r>
 8006b9c:	e7c7      	b.n	8006b2e <__ssputs_r+0x46>
	...

08006ba0 <_svfiprintf_r>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4698      	mov	r8, r3
 8006ba6:	898b      	ldrh	r3, [r1, #12]
 8006ba8:	061b      	lsls	r3, r3, #24
 8006baa:	b09d      	sub	sp, #116	; 0x74
 8006bac:	4607      	mov	r7, r0
 8006bae:	460d      	mov	r5, r1
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	d50e      	bpl.n	8006bd2 <_svfiprintf_r+0x32>
 8006bb4:	690b      	ldr	r3, [r1, #16]
 8006bb6:	b963      	cbnz	r3, 8006bd2 <_svfiprintf_r+0x32>
 8006bb8:	2140      	movs	r1, #64	; 0x40
 8006bba:	f7ff fd85 	bl	80066c8 <_malloc_r>
 8006bbe:	6028      	str	r0, [r5, #0]
 8006bc0:	6128      	str	r0, [r5, #16]
 8006bc2:	b920      	cbnz	r0, 8006bce <_svfiprintf_r+0x2e>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	e0d1      	b.n	8006d72 <_svfiprintf_r+0x1d2>
 8006bce:	2340      	movs	r3, #64	; 0x40
 8006bd0:	616b      	str	r3, [r5, #20]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd6:	2320      	movs	r3, #32
 8006bd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006be0:	2330      	movs	r3, #48	; 0x30
 8006be2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d8c <_svfiprintf_r+0x1ec>
 8006be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bea:	f04f 0901 	mov.w	r9, #1
 8006bee:	4623      	mov	r3, r4
 8006bf0:	469a      	mov	sl, r3
 8006bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf6:	b10a      	cbz	r2, 8006bfc <_svfiprintf_r+0x5c>
 8006bf8:	2a25      	cmp	r2, #37	; 0x25
 8006bfa:	d1f9      	bne.n	8006bf0 <_svfiprintf_r+0x50>
 8006bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8006c00:	d00b      	beq.n	8006c1a <_svfiprintf_r+0x7a>
 8006c02:	465b      	mov	r3, fp
 8006c04:	4622      	mov	r2, r4
 8006c06:	4629      	mov	r1, r5
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7ff ff6d 	bl	8006ae8 <__ssputs_r>
 8006c0e:	3001      	adds	r0, #1
 8006c10:	f000 80aa 	beq.w	8006d68 <_svfiprintf_r+0x1c8>
 8006c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c16:	445a      	add	r2, fp
 8006c18:	9209      	str	r2, [sp, #36]	; 0x24
 8006c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80a2 	beq.w	8006d68 <_svfiprintf_r+0x1c8>
 8006c24:	2300      	movs	r3, #0
 8006c26:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c2e:	f10a 0a01 	add.w	sl, sl, #1
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	9307      	str	r3, [sp, #28]
 8006c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c3c:	4654      	mov	r4, sl
 8006c3e:	2205      	movs	r2, #5
 8006c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c44:	4851      	ldr	r0, [pc, #324]	; (8006d8c <_svfiprintf_r+0x1ec>)
 8006c46:	f7f9 fadb 	bl	8000200 <memchr>
 8006c4a:	9a04      	ldr	r2, [sp, #16]
 8006c4c:	b9d8      	cbnz	r0, 8006c86 <_svfiprintf_r+0xe6>
 8006c4e:	06d0      	lsls	r0, r2, #27
 8006c50:	bf44      	itt	mi
 8006c52:	2320      	movmi	r3, #32
 8006c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c58:	0711      	lsls	r1, r2, #28
 8006c5a:	bf44      	itt	mi
 8006c5c:	232b      	movmi	r3, #43	; 0x2b
 8006c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c62:	f89a 3000 	ldrb.w	r3, [sl]
 8006c66:	2b2a      	cmp	r3, #42	; 0x2a
 8006c68:	d015      	beq.n	8006c96 <_svfiprintf_r+0xf6>
 8006c6a:	9a07      	ldr	r2, [sp, #28]
 8006c6c:	4654      	mov	r4, sl
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f04f 0c0a 	mov.w	ip, #10
 8006c74:	4621      	mov	r1, r4
 8006c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c7a:	3b30      	subs	r3, #48	; 0x30
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	d94e      	bls.n	8006d1e <_svfiprintf_r+0x17e>
 8006c80:	b1b0      	cbz	r0, 8006cb0 <_svfiprintf_r+0x110>
 8006c82:	9207      	str	r2, [sp, #28]
 8006c84:	e014      	b.n	8006cb0 <_svfiprintf_r+0x110>
 8006c86:	eba0 0308 	sub.w	r3, r0, r8
 8006c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	9304      	str	r3, [sp, #16]
 8006c92:	46a2      	mov	sl, r4
 8006c94:	e7d2      	b.n	8006c3c <_svfiprintf_r+0x9c>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	1d19      	adds	r1, r3, #4
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	9103      	str	r1, [sp, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bfbb      	ittet	lt
 8006ca2:	425b      	neglt	r3, r3
 8006ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ca8:	9307      	strge	r3, [sp, #28]
 8006caa:	9307      	strlt	r3, [sp, #28]
 8006cac:	bfb8      	it	lt
 8006cae:	9204      	strlt	r2, [sp, #16]
 8006cb0:	7823      	ldrb	r3, [r4, #0]
 8006cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb4:	d10c      	bne.n	8006cd0 <_svfiprintf_r+0x130>
 8006cb6:	7863      	ldrb	r3, [r4, #1]
 8006cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cba:	d135      	bne.n	8006d28 <_svfiprintf_r+0x188>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	1d1a      	adds	r2, r3, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	9203      	str	r2, [sp, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfb8      	it	lt
 8006cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ccc:	3402      	adds	r4, #2
 8006cce:	9305      	str	r3, [sp, #20]
 8006cd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d9c <_svfiprintf_r+0x1fc>
 8006cd4:	7821      	ldrb	r1, [r4, #0]
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	4650      	mov	r0, sl
 8006cda:	f7f9 fa91 	bl	8000200 <memchr>
 8006cde:	b140      	cbz	r0, 8006cf2 <_svfiprintf_r+0x152>
 8006ce0:	2340      	movs	r3, #64	; 0x40
 8006ce2:	eba0 000a 	sub.w	r0, r0, sl
 8006ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	4303      	orrs	r3, r0
 8006cee:	3401      	adds	r4, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf6:	4826      	ldr	r0, [pc, #152]	; (8006d90 <_svfiprintf_r+0x1f0>)
 8006cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cfc:	2206      	movs	r2, #6
 8006cfe:	f7f9 fa7f 	bl	8000200 <memchr>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d038      	beq.n	8006d78 <_svfiprintf_r+0x1d8>
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <_svfiprintf_r+0x1f4>)
 8006d08:	bb1b      	cbnz	r3, 8006d52 <_svfiprintf_r+0x1b2>
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	3307      	adds	r3, #7
 8006d0e:	f023 0307 	bic.w	r3, r3, #7
 8006d12:	3308      	adds	r3, #8
 8006d14:	9303      	str	r3, [sp, #12]
 8006d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d18:	4433      	add	r3, r6
 8006d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1c:	e767      	b.n	8006bee <_svfiprintf_r+0x4e>
 8006d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d22:	460c      	mov	r4, r1
 8006d24:	2001      	movs	r0, #1
 8006d26:	e7a5      	b.n	8006c74 <_svfiprintf_r+0xd4>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	9305      	str	r3, [sp, #20]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f04f 0c0a 	mov.w	ip, #10
 8006d34:	4620      	mov	r0, r4
 8006d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d3a:	3a30      	subs	r2, #48	; 0x30
 8006d3c:	2a09      	cmp	r2, #9
 8006d3e:	d903      	bls.n	8006d48 <_svfiprintf_r+0x1a8>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0c5      	beq.n	8006cd0 <_svfiprintf_r+0x130>
 8006d44:	9105      	str	r1, [sp, #20]
 8006d46:	e7c3      	b.n	8006cd0 <_svfiprintf_r+0x130>
 8006d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e7f0      	b.n	8006d34 <_svfiprintf_r+0x194>
 8006d52:	ab03      	add	r3, sp, #12
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	462a      	mov	r2, r5
 8006d58:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <_svfiprintf_r+0x1f8>)
 8006d5a:	a904      	add	r1, sp, #16
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f3af 8000 	nop.w
 8006d62:	1c42      	adds	r2, r0, #1
 8006d64:	4606      	mov	r6, r0
 8006d66:	d1d6      	bne.n	8006d16 <_svfiprintf_r+0x176>
 8006d68:	89ab      	ldrh	r3, [r5, #12]
 8006d6a:	065b      	lsls	r3, r3, #25
 8006d6c:	f53f af2c 	bmi.w	8006bc8 <_svfiprintf_r+0x28>
 8006d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d72:	b01d      	add	sp, #116	; 0x74
 8006d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d78:	ab03      	add	r3, sp, #12
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	462a      	mov	r2, r5
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <_svfiprintf_r+0x1f8>)
 8006d80:	a904      	add	r1, sp, #16
 8006d82:	4638      	mov	r0, r7
 8006d84:	f000 f9d4 	bl	8007130 <_printf_i>
 8006d88:	e7eb      	b.n	8006d62 <_svfiprintf_r+0x1c2>
 8006d8a:	bf00      	nop
 8006d8c:	0800803c 	.word	0x0800803c
 8006d90:	08008046 	.word	0x08008046
 8006d94:	00000000 	.word	0x00000000
 8006d98:	08006ae9 	.word	0x08006ae9
 8006d9c:	08008042 	.word	0x08008042

08006da0 <__sfputc_r>:
 8006da0:	6893      	ldr	r3, [r2, #8]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	b410      	push	{r4}
 8006da8:	6093      	str	r3, [r2, #8]
 8006daa:	da08      	bge.n	8006dbe <__sfputc_r+0x1e>
 8006dac:	6994      	ldr	r4, [r2, #24]
 8006dae:	42a3      	cmp	r3, r4
 8006db0:	db01      	blt.n	8006db6 <__sfputc_r+0x16>
 8006db2:	290a      	cmp	r1, #10
 8006db4:	d103      	bne.n	8006dbe <__sfputc_r+0x1e>
 8006db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dba:	f000 badf 	b.w	800737c <__swbuf_r>
 8006dbe:	6813      	ldr	r3, [r2, #0]
 8006dc0:	1c58      	adds	r0, r3, #1
 8006dc2:	6010      	str	r0, [r2, #0]
 8006dc4:	7019      	strb	r1, [r3, #0]
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <__sfputs_r>:
 8006dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	18d5      	adds	r5, r2, r3
 8006dd8:	42ac      	cmp	r4, r5
 8006dda:	d101      	bne.n	8006de0 <__sfputs_r+0x12>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	e007      	b.n	8006df0 <__sfputs_r+0x22>
 8006de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de4:	463a      	mov	r2, r7
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7ff ffda 	bl	8006da0 <__sfputc_r>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d1f3      	bne.n	8006dd8 <__sfputs_r+0xa>
 8006df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006df4 <_vfiprintf_r>:
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df8:	460d      	mov	r5, r1
 8006dfa:	b09d      	sub	sp, #116	; 0x74
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	4698      	mov	r8, r3
 8006e00:	4606      	mov	r6, r0
 8006e02:	b118      	cbz	r0, 8006e0c <_vfiprintf_r+0x18>
 8006e04:	6983      	ldr	r3, [r0, #24]
 8006e06:	b90b      	cbnz	r3, 8006e0c <_vfiprintf_r+0x18>
 8006e08:	f000 fc9a 	bl	8007740 <__sinit>
 8006e0c:	4b89      	ldr	r3, [pc, #548]	; (8007034 <_vfiprintf_r+0x240>)
 8006e0e:	429d      	cmp	r5, r3
 8006e10:	d11b      	bne.n	8006e4a <_vfiprintf_r+0x56>
 8006e12:	6875      	ldr	r5, [r6, #4]
 8006e14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e16:	07d9      	lsls	r1, r3, #31
 8006e18:	d405      	bmi.n	8006e26 <_vfiprintf_r+0x32>
 8006e1a:	89ab      	ldrh	r3, [r5, #12]
 8006e1c:	059a      	lsls	r2, r3, #22
 8006e1e:	d402      	bmi.n	8006e26 <_vfiprintf_r+0x32>
 8006e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e22:	f000 fd2b 	bl	800787c <__retarget_lock_acquire_recursive>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	071b      	lsls	r3, r3, #28
 8006e2a:	d501      	bpl.n	8006e30 <_vfiprintf_r+0x3c>
 8006e2c:	692b      	ldr	r3, [r5, #16]
 8006e2e:	b9eb      	cbnz	r3, 8006e6c <_vfiprintf_r+0x78>
 8006e30:	4629      	mov	r1, r5
 8006e32:	4630      	mov	r0, r6
 8006e34:	f000 faf4 	bl	8007420 <__swsetup_r>
 8006e38:	b1c0      	cbz	r0, 8006e6c <_vfiprintf_r+0x78>
 8006e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e3c:	07dc      	lsls	r4, r3, #31
 8006e3e:	d50e      	bpl.n	8006e5e <_vfiprintf_r+0x6a>
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295
 8006e44:	b01d      	add	sp, #116	; 0x74
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	4b7b      	ldr	r3, [pc, #492]	; (8007038 <_vfiprintf_r+0x244>)
 8006e4c:	429d      	cmp	r5, r3
 8006e4e:	d101      	bne.n	8006e54 <_vfiprintf_r+0x60>
 8006e50:	68b5      	ldr	r5, [r6, #8]
 8006e52:	e7df      	b.n	8006e14 <_vfiprintf_r+0x20>
 8006e54:	4b79      	ldr	r3, [pc, #484]	; (800703c <_vfiprintf_r+0x248>)
 8006e56:	429d      	cmp	r5, r3
 8006e58:	bf08      	it	eq
 8006e5a:	68f5      	ldreq	r5, [r6, #12]
 8006e5c:	e7da      	b.n	8006e14 <_vfiprintf_r+0x20>
 8006e5e:	89ab      	ldrh	r3, [r5, #12]
 8006e60:	0598      	lsls	r0, r3, #22
 8006e62:	d4ed      	bmi.n	8006e40 <_vfiprintf_r+0x4c>
 8006e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e66:	f000 fd0a 	bl	800787e <__retarget_lock_release_recursive>
 8006e6a:	e7e9      	b.n	8006e40 <_vfiprintf_r+0x4c>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	2320      	movs	r3, #32
 8006e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e7a:	2330      	movs	r3, #48	; 0x30
 8006e7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007040 <_vfiprintf_r+0x24c>
 8006e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e84:	f04f 0901 	mov.w	r9, #1
 8006e88:	4623      	mov	r3, r4
 8006e8a:	469a      	mov	sl, r3
 8006e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e90:	b10a      	cbz	r2, 8006e96 <_vfiprintf_r+0xa2>
 8006e92:	2a25      	cmp	r2, #37	; 0x25
 8006e94:	d1f9      	bne.n	8006e8a <_vfiprintf_r+0x96>
 8006e96:	ebba 0b04 	subs.w	fp, sl, r4
 8006e9a:	d00b      	beq.n	8006eb4 <_vfiprintf_r+0xc0>
 8006e9c:	465b      	mov	r3, fp
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ff93 	bl	8006dce <__sfputs_r>
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f000 80aa 	beq.w	8007002 <_vfiprintf_r+0x20e>
 8006eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb0:	445a      	add	r2, fp
 8006eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8006eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80a2 	beq.w	8007002 <_vfiprintf_r+0x20e>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec8:	f10a 0a01 	add.w	sl, sl, #1
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ed6:	4654      	mov	r4, sl
 8006ed8:	2205      	movs	r2, #5
 8006eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ede:	4858      	ldr	r0, [pc, #352]	; (8007040 <_vfiprintf_r+0x24c>)
 8006ee0:	f7f9 f98e 	bl	8000200 <memchr>
 8006ee4:	9a04      	ldr	r2, [sp, #16]
 8006ee6:	b9d8      	cbnz	r0, 8006f20 <_vfiprintf_r+0x12c>
 8006ee8:	06d1      	lsls	r1, r2, #27
 8006eea:	bf44      	itt	mi
 8006eec:	2320      	movmi	r3, #32
 8006eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef2:	0713      	lsls	r3, r2, #28
 8006ef4:	bf44      	itt	mi
 8006ef6:	232b      	movmi	r3, #43	; 0x2b
 8006ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	2b2a      	cmp	r3, #42	; 0x2a
 8006f02:	d015      	beq.n	8006f30 <_vfiprintf_r+0x13c>
 8006f04:	9a07      	ldr	r2, [sp, #28]
 8006f06:	4654      	mov	r4, sl
 8006f08:	2000      	movs	r0, #0
 8006f0a:	f04f 0c0a 	mov.w	ip, #10
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f14:	3b30      	subs	r3, #48	; 0x30
 8006f16:	2b09      	cmp	r3, #9
 8006f18:	d94e      	bls.n	8006fb8 <_vfiprintf_r+0x1c4>
 8006f1a:	b1b0      	cbz	r0, 8006f4a <_vfiprintf_r+0x156>
 8006f1c:	9207      	str	r2, [sp, #28]
 8006f1e:	e014      	b.n	8006f4a <_vfiprintf_r+0x156>
 8006f20:	eba0 0308 	sub.w	r3, r0, r8
 8006f24:	fa09 f303 	lsl.w	r3, r9, r3
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	9304      	str	r3, [sp, #16]
 8006f2c:	46a2      	mov	sl, r4
 8006f2e:	e7d2      	b.n	8006ed6 <_vfiprintf_r+0xe2>
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	1d19      	adds	r1, r3, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	9103      	str	r1, [sp, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfbb      	ittet	lt
 8006f3c:	425b      	neglt	r3, r3
 8006f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f42:	9307      	strge	r3, [sp, #28]
 8006f44:	9307      	strlt	r3, [sp, #28]
 8006f46:	bfb8      	it	lt
 8006f48:	9204      	strlt	r2, [sp, #16]
 8006f4a:	7823      	ldrb	r3, [r4, #0]
 8006f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f4e:	d10c      	bne.n	8006f6a <_vfiprintf_r+0x176>
 8006f50:	7863      	ldrb	r3, [r4, #1]
 8006f52:	2b2a      	cmp	r3, #42	; 0x2a
 8006f54:	d135      	bne.n	8006fc2 <_vfiprintf_r+0x1ce>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	1d1a      	adds	r2, r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	9203      	str	r2, [sp, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bfb8      	it	lt
 8006f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f66:	3402      	adds	r4, #2
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007050 <_vfiprintf_r+0x25c>
 8006f6e:	7821      	ldrb	r1, [r4, #0]
 8006f70:	2203      	movs	r2, #3
 8006f72:	4650      	mov	r0, sl
 8006f74:	f7f9 f944 	bl	8000200 <memchr>
 8006f78:	b140      	cbz	r0, 8006f8c <_vfiprintf_r+0x198>
 8006f7a:	2340      	movs	r3, #64	; 0x40
 8006f7c:	eba0 000a 	sub.w	r0, r0, sl
 8006f80:	fa03 f000 	lsl.w	r0, r3, r0
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	4303      	orrs	r3, r0
 8006f88:	3401      	adds	r4, #1
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f90:	482c      	ldr	r0, [pc, #176]	; (8007044 <_vfiprintf_r+0x250>)
 8006f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f96:	2206      	movs	r2, #6
 8006f98:	f7f9 f932 	bl	8000200 <memchr>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d03f      	beq.n	8007020 <_vfiprintf_r+0x22c>
 8006fa0:	4b29      	ldr	r3, [pc, #164]	; (8007048 <_vfiprintf_r+0x254>)
 8006fa2:	bb1b      	cbnz	r3, 8006fec <_vfiprintf_r+0x1f8>
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	3307      	adds	r3, #7
 8006fa8:	f023 0307 	bic.w	r3, r3, #7
 8006fac:	3308      	adds	r3, #8
 8006fae:	9303      	str	r3, [sp, #12]
 8006fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb2:	443b      	add	r3, r7
 8006fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb6:	e767      	b.n	8006e88 <_vfiprintf_r+0x94>
 8006fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	e7a5      	b.n	8006f0e <_vfiprintf_r+0x11a>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	3401      	adds	r4, #1
 8006fc6:	9305      	str	r3, [sp, #20]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f04f 0c0a 	mov.w	ip, #10
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd4:	3a30      	subs	r2, #48	; 0x30
 8006fd6:	2a09      	cmp	r2, #9
 8006fd8:	d903      	bls.n	8006fe2 <_vfiprintf_r+0x1ee>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0c5      	beq.n	8006f6a <_vfiprintf_r+0x176>
 8006fde:	9105      	str	r1, [sp, #20]
 8006fe0:	e7c3      	b.n	8006f6a <_vfiprintf_r+0x176>
 8006fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e7f0      	b.n	8006fce <_vfiprintf_r+0x1da>
 8006fec:	ab03      	add	r3, sp, #12
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	462a      	mov	r2, r5
 8006ff2:	4b16      	ldr	r3, [pc, #88]	; (800704c <_vfiprintf_r+0x258>)
 8006ff4:	a904      	add	r1, sp, #16
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f3af 8000 	nop.w
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	1c78      	adds	r0, r7, #1
 8007000:	d1d6      	bne.n	8006fb0 <_vfiprintf_r+0x1bc>
 8007002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007004:	07d9      	lsls	r1, r3, #31
 8007006:	d405      	bmi.n	8007014 <_vfiprintf_r+0x220>
 8007008:	89ab      	ldrh	r3, [r5, #12]
 800700a:	059a      	lsls	r2, r3, #22
 800700c:	d402      	bmi.n	8007014 <_vfiprintf_r+0x220>
 800700e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007010:	f000 fc35 	bl	800787e <__retarget_lock_release_recursive>
 8007014:	89ab      	ldrh	r3, [r5, #12]
 8007016:	065b      	lsls	r3, r3, #25
 8007018:	f53f af12 	bmi.w	8006e40 <_vfiprintf_r+0x4c>
 800701c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800701e:	e711      	b.n	8006e44 <_vfiprintf_r+0x50>
 8007020:	ab03      	add	r3, sp, #12
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	462a      	mov	r2, r5
 8007026:	4b09      	ldr	r3, [pc, #36]	; (800704c <_vfiprintf_r+0x258>)
 8007028:	a904      	add	r1, sp, #16
 800702a:	4630      	mov	r0, r6
 800702c:	f000 f880 	bl	8007130 <_printf_i>
 8007030:	e7e4      	b.n	8006ffc <_vfiprintf_r+0x208>
 8007032:	bf00      	nop
 8007034:	08008090 	.word	0x08008090
 8007038:	080080b0 	.word	0x080080b0
 800703c:	08008070 	.word	0x08008070
 8007040:	0800803c 	.word	0x0800803c
 8007044:	08008046 	.word	0x08008046
 8007048:	00000000 	.word	0x00000000
 800704c:	08006dcf 	.word	0x08006dcf
 8007050:	08008042 	.word	0x08008042

08007054 <_printf_common>:
 8007054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	4616      	mov	r6, r2
 800705a:	4699      	mov	r9, r3
 800705c:	688a      	ldr	r2, [r1, #8]
 800705e:	690b      	ldr	r3, [r1, #16]
 8007060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007064:	4293      	cmp	r3, r2
 8007066:	bfb8      	it	lt
 8007068:	4613      	movlt	r3, r2
 800706a:	6033      	str	r3, [r6, #0]
 800706c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007070:	4607      	mov	r7, r0
 8007072:	460c      	mov	r4, r1
 8007074:	b10a      	cbz	r2, 800707a <_printf_common+0x26>
 8007076:	3301      	adds	r3, #1
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	0699      	lsls	r1, r3, #26
 800707e:	bf42      	ittt	mi
 8007080:	6833      	ldrmi	r3, [r6, #0]
 8007082:	3302      	addmi	r3, #2
 8007084:	6033      	strmi	r3, [r6, #0]
 8007086:	6825      	ldr	r5, [r4, #0]
 8007088:	f015 0506 	ands.w	r5, r5, #6
 800708c:	d106      	bne.n	800709c <_printf_common+0x48>
 800708e:	f104 0a19 	add.w	sl, r4, #25
 8007092:	68e3      	ldr	r3, [r4, #12]
 8007094:	6832      	ldr	r2, [r6, #0]
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	42ab      	cmp	r3, r5
 800709a:	dc26      	bgt.n	80070ea <_printf_common+0x96>
 800709c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070a0:	1e13      	subs	r3, r2, #0
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	bf18      	it	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	0692      	lsls	r2, r2, #26
 80070aa:	d42b      	bmi.n	8007104 <_printf_common+0xb0>
 80070ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b0:	4649      	mov	r1, r9
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c0      	blx	r8
 80070b6:	3001      	adds	r0, #1
 80070b8:	d01e      	beq.n	80070f8 <_printf_common+0xa4>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	68e5      	ldr	r5, [r4, #12]
 80070be:	6832      	ldr	r2, [r6, #0]
 80070c0:	f003 0306 	and.w	r3, r3, #6
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	bf08      	it	eq
 80070c8:	1aad      	subeq	r5, r5, r2
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	6922      	ldr	r2, [r4, #16]
 80070ce:	bf0c      	ite	eq
 80070d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d4:	2500      	movne	r5, #0
 80070d6:	4293      	cmp	r3, r2
 80070d8:	bfc4      	itt	gt
 80070da:	1a9b      	subgt	r3, r3, r2
 80070dc:	18ed      	addgt	r5, r5, r3
 80070de:	2600      	movs	r6, #0
 80070e0:	341a      	adds	r4, #26
 80070e2:	42b5      	cmp	r5, r6
 80070e4:	d11a      	bne.n	800711c <_printf_common+0xc8>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e008      	b.n	80070fc <_printf_common+0xa8>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4649      	mov	r1, r9
 80070f0:	4638      	mov	r0, r7
 80070f2:	47c0      	blx	r8
 80070f4:	3001      	adds	r0, #1
 80070f6:	d103      	bne.n	8007100 <_printf_common+0xac>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007100:	3501      	adds	r5, #1
 8007102:	e7c6      	b.n	8007092 <_printf_common+0x3e>
 8007104:	18e1      	adds	r1, r4, r3
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	2030      	movs	r0, #48	; 0x30
 800710a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800710e:	4422      	add	r2, r4
 8007110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007118:	3302      	adds	r3, #2
 800711a:	e7c7      	b.n	80070ac <_printf_common+0x58>
 800711c:	2301      	movs	r3, #1
 800711e:	4622      	mov	r2, r4
 8007120:	4649      	mov	r1, r9
 8007122:	4638      	mov	r0, r7
 8007124:	47c0      	blx	r8
 8007126:	3001      	adds	r0, #1
 8007128:	d0e6      	beq.n	80070f8 <_printf_common+0xa4>
 800712a:	3601      	adds	r6, #1
 800712c:	e7d9      	b.n	80070e2 <_printf_common+0x8e>
	...

08007130 <_printf_i>:
 8007130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	7e0f      	ldrb	r7, [r1, #24]
 8007136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007138:	2f78      	cmp	r7, #120	; 0x78
 800713a:	4691      	mov	r9, r2
 800713c:	4680      	mov	r8, r0
 800713e:	460c      	mov	r4, r1
 8007140:	469a      	mov	sl, r3
 8007142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007146:	d807      	bhi.n	8007158 <_printf_i+0x28>
 8007148:	2f62      	cmp	r7, #98	; 0x62
 800714a:	d80a      	bhi.n	8007162 <_printf_i+0x32>
 800714c:	2f00      	cmp	r7, #0
 800714e:	f000 80d8 	beq.w	8007302 <_printf_i+0x1d2>
 8007152:	2f58      	cmp	r7, #88	; 0x58
 8007154:	f000 80a3 	beq.w	800729e <_printf_i+0x16e>
 8007158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800715c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007160:	e03a      	b.n	80071d8 <_printf_i+0xa8>
 8007162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007166:	2b15      	cmp	r3, #21
 8007168:	d8f6      	bhi.n	8007158 <_printf_i+0x28>
 800716a:	a101      	add	r1, pc, #4	; (adr r1, 8007170 <_printf_i+0x40>)
 800716c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007170:	080071c9 	.word	0x080071c9
 8007174:	080071dd 	.word	0x080071dd
 8007178:	08007159 	.word	0x08007159
 800717c:	08007159 	.word	0x08007159
 8007180:	08007159 	.word	0x08007159
 8007184:	08007159 	.word	0x08007159
 8007188:	080071dd 	.word	0x080071dd
 800718c:	08007159 	.word	0x08007159
 8007190:	08007159 	.word	0x08007159
 8007194:	08007159 	.word	0x08007159
 8007198:	08007159 	.word	0x08007159
 800719c:	080072e9 	.word	0x080072e9
 80071a0:	0800720d 	.word	0x0800720d
 80071a4:	080072cb 	.word	0x080072cb
 80071a8:	08007159 	.word	0x08007159
 80071ac:	08007159 	.word	0x08007159
 80071b0:	0800730b 	.word	0x0800730b
 80071b4:	08007159 	.word	0x08007159
 80071b8:	0800720d 	.word	0x0800720d
 80071bc:	08007159 	.word	0x08007159
 80071c0:	08007159 	.word	0x08007159
 80071c4:	080072d3 	.word	0x080072d3
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	602a      	str	r2, [r5, #0]
 80071d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071d8:	2301      	movs	r3, #1
 80071da:	e0a3      	b.n	8007324 <_printf_i+0x1f4>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	6829      	ldr	r1, [r5, #0]
 80071e0:	0606      	lsls	r6, r0, #24
 80071e2:	f101 0304 	add.w	r3, r1, #4
 80071e6:	d50a      	bpl.n	80071fe <_printf_i+0xce>
 80071e8:	680e      	ldr	r6, [r1, #0]
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	2e00      	cmp	r6, #0
 80071ee:	da03      	bge.n	80071f8 <_printf_i+0xc8>
 80071f0:	232d      	movs	r3, #45	; 0x2d
 80071f2:	4276      	negs	r6, r6
 80071f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f8:	485e      	ldr	r0, [pc, #376]	; (8007374 <_printf_i+0x244>)
 80071fa:	230a      	movs	r3, #10
 80071fc:	e019      	b.n	8007232 <_printf_i+0x102>
 80071fe:	680e      	ldr	r6, [r1, #0]
 8007200:	602b      	str	r3, [r5, #0]
 8007202:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007206:	bf18      	it	ne
 8007208:	b236      	sxthne	r6, r6
 800720a:	e7ef      	b.n	80071ec <_printf_i+0xbc>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	6820      	ldr	r0, [r4, #0]
 8007210:	1d19      	adds	r1, r3, #4
 8007212:	6029      	str	r1, [r5, #0]
 8007214:	0601      	lsls	r1, r0, #24
 8007216:	d501      	bpl.n	800721c <_printf_i+0xec>
 8007218:	681e      	ldr	r6, [r3, #0]
 800721a:	e002      	b.n	8007222 <_printf_i+0xf2>
 800721c:	0646      	lsls	r6, r0, #25
 800721e:	d5fb      	bpl.n	8007218 <_printf_i+0xe8>
 8007220:	881e      	ldrh	r6, [r3, #0]
 8007222:	4854      	ldr	r0, [pc, #336]	; (8007374 <_printf_i+0x244>)
 8007224:	2f6f      	cmp	r7, #111	; 0x6f
 8007226:	bf0c      	ite	eq
 8007228:	2308      	moveq	r3, #8
 800722a:	230a      	movne	r3, #10
 800722c:	2100      	movs	r1, #0
 800722e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007232:	6865      	ldr	r5, [r4, #4]
 8007234:	60a5      	str	r5, [r4, #8]
 8007236:	2d00      	cmp	r5, #0
 8007238:	bfa2      	ittt	ge
 800723a:	6821      	ldrge	r1, [r4, #0]
 800723c:	f021 0104 	bicge.w	r1, r1, #4
 8007240:	6021      	strge	r1, [r4, #0]
 8007242:	b90e      	cbnz	r6, 8007248 <_printf_i+0x118>
 8007244:	2d00      	cmp	r5, #0
 8007246:	d04d      	beq.n	80072e4 <_printf_i+0x1b4>
 8007248:	4615      	mov	r5, r2
 800724a:	fbb6 f1f3 	udiv	r1, r6, r3
 800724e:	fb03 6711 	mls	r7, r3, r1, r6
 8007252:	5dc7      	ldrb	r7, [r0, r7]
 8007254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007258:	4637      	mov	r7, r6
 800725a:	42bb      	cmp	r3, r7
 800725c:	460e      	mov	r6, r1
 800725e:	d9f4      	bls.n	800724a <_printf_i+0x11a>
 8007260:	2b08      	cmp	r3, #8
 8007262:	d10b      	bne.n	800727c <_printf_i+0x14c>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07de      	lsls	r6, r3, #31
 8007268:	d508      	bpl.n	800727c <_printf_i+0x14c>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	6861      	ldr	r1, [r4, #4]
 800726e:	4299      	cmp	r1, r3
 8007270:	bfde      	ittt	le
 8007272:	2330      	movle	r3, #48	; 0x30
 8007274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800727c:	1b52      	subs	r2, r2, r5
 800727e:	6122      	str	r2, [r4, #16]
 8007280:	f8cd a000 	str.w	sl, [sp]
 8007284:	464b      	mov	r3, r9
 8007286:	aa03      	add	r2, sp, #12
 8007288:	4621      	mov	r1, r4
 800728a:	4640      	mov	r0, r8
 800728c:	f7ff fee2 	bl	8007054 <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	d14c      	bne.n	800732e <_printf_i+0x1fe>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	b004      	add	sp, #16
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	4835      	ldr	r0, [pc, #212]	; (8007374 <_printf_i+0x244>)
 80072a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072a4:	6829      	ldr	r1, [r5, #0]
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80072ac:	6029      	str	r1, [r5, #0]
 80072ae:	061d      	lsls	r5, r3, #24
 80072b0:	d514      	bpl.n	80072dc <_printf_i+0x1ac>
 80072b2:	07df      	lsls	r7, r3, #31
 80072b4:	bf44      	itt	mi
 80072b6:	f043 0320 	orrmi.w	r3, r3, #32
 80072ba:	6023      	strmi	r3, [r4, #0]
 80072bc:	b91e      	cbnz	r6, 80072c6 <_printf_i+0x196>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	f023 0320 	bic.w	r3, r3, #32
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	2310      	movs	r3, #16
 80072c8:	e7b0      	b.n	800722c <_printf_i+0xfc>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	f043 0320 	orr.w	r3, r3, #32
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	2378      	movs	r3, #120	; 0x78
 80072d4:	4828      	ldr	r0, [pc, #160]	; (8007378 <_printf_i+0x248>)
 80072d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072da:	e7e3      	b.n	80072a4 <_printf_i+0x174>
 80072dc:	0659      	lsls	r1, r3, #25
 80072de:	bf48      	it	mi
 80072e0:	b2b6      	uxthmi	r6, r6
 80072e2:	e7e6      	b.n	80072b2 <_printf_i+0x182>
 80072e4:	4615      	mov	r5, r2
 80072e6:	e7bb      	b.n	8007260 <_printf_i+0x130>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	6826      	ldr	r6, [r4, #0]
 80072ec:	6961      	ldr	r1, [r4, #20]
 80072ee:	1d18      	adds	r0, r3, #4
 80072f0:	6028      	str	r0, [r5, #0]
 80072f2:	0635      	lsls	r5, r6, #24
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	d501      	bpl.n	80072fc <_printf_i+0x1cc>
 80072f8:	6019      	str	r1, [r3, #0]
 80072fa:	e002      	b.n	8007302 <_printf_i+0x1d2>
 80072fc:	0670      	lsls	r0, r6, #25
 80072fe:	d5fb      	bpl.n	80072f8 <_printf_i+0x1c8>
 8007300:	8019      	strh	r1, [r3, #0]
 8007302:	2300      	movs	r3, #0
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	4615      	mov	r5, r2
 8007308:	e7ba      	b.n	8007280 <_printf_i+0x150>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	1d1a      	adds	r2, r3, #4
 800730e:	602a      	str	r2, [r5, #0]
 8007310:	681d      	ldr	r5, [r3, #0]
 8007312:	6862      	ldr	r2, [r4, #4]
 8007314:	2100      	movs	r1, #0
 8007316:	4628      	mov	r0, r5
 8007318:	f7f8 ff72 	bl	8000200 <memchr>
 800731c:	b108      	cbz	r0, 8007322 <_printf_i+0x1f2>
 800731e:	1b40      	subs	r0, r0, r5
 8007320:	6060      	str	r0, [r4, #4]
 8007322:	6863      	ldr	r3, [r4, #4]
 8007324:	6123      	str	r3, [r4, #16]
 8007326:	2300      	movs	r3, #0
 8007328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800732c:	e7a8      	b.n	8007280 <_printf_i+0x150>
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	462a      	mov	r2, r5
 8007332:	4649      	mov	r1, r9
 8007334:	4640      	mov	r0, r8
 8007336:	47d0      	blx	sl
 8007338:	3001      	adds	r0, #1
 800733a:	d0ab      	beq.n	8007294 <_printf_i+0x164>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	079b      	lsls	r3, r3, #30
 8007340:	d413      	bmi.n	800736a <_printf_i+0x23a>
 8007342:	68e0      	ldr	r0, [r4, #12]
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	4298      	cmp	r0, r3
 8007348:	bfb8      	it	lt
 800734a:	4618      	movlt	r0, r3
 800734c:	e7a4      	b.n	8007298 <_printf_i+0x168>
 800734e:	2301      	movs	r3, #1
 8007350:	4632      	mov	r2, r6
 8007352:	4649      	mov	r1, r9
 8007354:	4640      	mov	r0, r8
 8007356:	47d0      	blx	sl
 8007358:	3001      	adds	r0, #1
 800735a:	d09b      	beq.n	8007294 <_printf_i+0x164>
 800735c:	3501      	adds	r5, #1
 800735e:	68e3      	ldr	r3, [r4, #12]
 8007360:	9903      	ldr	r1, [sp, #12]
 8007362:	1a5b      	subs	r3, r3, r1
 8007364:	42ab      	cmp	r3, r5
 8007366:	dcf2      	bgt.n	800734e <_printf_i+0x21e>
 8007368:	e7eb      	b.n	8007342 <_printf_i+0x212>
 800736a:	2500      	movs	r5, #0
 800736c:	f104 0619 	add.w	r6, r4, #25
 8007370:	e7f5      	b.n	800735e <_printf_i+0x22e>
 8007372:	bf00      	nop
 8007374:	0800804d 	.word	0x0800804d
 8007378:	0800805e 	.word	0x0800805e

0800737c <__swbuf_r>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	460e      	mov	r6, r1
 8007380:	4614      	mov	r4, r2
 8007382:	4605      	mov	r5, r0
 8007384:	b118      	cbz	r0, 800738e <__swbuf_r+0x12>
 8007386:	6983      	ldr	r3, [r0, #24]
 8007388:	b90b      	cbnz	r3, 800738e <__swbuf_r+0x12>
 800738a:	f000 f9d9 	bl	8007740 <__sinit>
 800738e:	4b21      	ldr	r3, [pc, #132]	; (8007414 <__swbuf_r+0x98>)
 8007390:	429c      	cmp	r4, r3
 8007392:	d12b      	bne.n	80073ec <__swbuf_r+0x70>
 8007394:	686c      	ldr	r4, [r5, #4]
 8007396:	69a3      	ldr	r3, [r4, #24]
 8007398:	60a3      	str	r3, [r4, #8]
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	071a      	lsls	r2, r3, #28
 800739e:	d52f      	bpl.n	8007400 <__swbuf_r+0x84>
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	b36b      	cbz	r3, 8007400 <__swbuf_r+0x84>
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	6820      	ldr	r0, [r4, #0]
 80073a8:	1ac0      	subs	r0, r0, r3
 80073aa:	6963      	ldr	r3, [r4, #20]
 80073ac:	b2f6      	uxtb	r6, r6
 80073ae:	4283      	cmp	r3, r0
 80073b0:	4637      	mov	r7, r6
 80073b2:	dc04      	bgt.n	80073be <__swbuf_r+0x42>
 80073b4:	4621      	mov	r1, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 f92e 	bl	8007618 <_fflush_r>
 80073bc:	bb30      	cbnz	r0, 800740c <__swbuf_r+0x90>
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	60a3      	str	r3, [r4, #8]
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	6022      	str	r2, [r4, #0]
 80073ca:	701e      	strb	r6, [r3, #0]
 80073cc:	6963      	ldr	r3, [r4, #20]
 80073ce:	3001      	adds	r0, #1
 80073d0:	4283      	cmp	r3, r0
 80073d2:	d004      	beq.n	80073de <__swbuf_r+0x62>
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	07db      	lsls	r3, r3, #31
 80073d8:	d506      	bpl.n	80073e8 <__swbuf_r+0x6c>
 80073da:	2e0a      	cmp	r6, #10
 80073dc:	d104      	bne.n	80073e8 <__swbuf_r+0x6c>
 80073de:	4621      	mov	r1, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	f000 f919 	bl	8007618 <_fflush_r>
 80073e6:	b988      	cbnz	r0, 800740c <__swbuf_r+0x90>
 80073e8:	4638      	mov	r0, r7
 80073ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <__swbuf_r+0x9c>)
 80073ee:	429c      	cmp	r4, r3
 80073f0:	d101      	bne.n	80073f6 <__swbuf_r+0x7a>
 80073f2:	68ac      	ldr	r4, [r5, #8]
 80073f4:	e7cf      	b.n	8007396 <__swbuf_r+0x1a>
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <__swbuf_r+0xa0>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	bf08      	it	eq
 80073fc:	68ec      	ldreq	r4, [r5, #12]
 80073fe:	e7ca      	b.n	8007396 <__swbuf_r+0x1a>
 8007400:	4621      	mov	r1, r4
 8007402:	4628      	mov	r0, r5
 8007404:	f000 f80c 	bl	8007420 <__swsetup_r>
 8007408:	2800      	cmp	r0, #0
 800740a:	d0cb      	beq.n	80073a4 <__swbuf_r+0x28>
 800740c:	f04f 37ff 	mov.w	r7, #4294967295
 8007410:	e7ea      	b.n	80073e8 <__swbuf_r+0x6c>
 8007412:	bf00      	nop
 8007414:	08008090 	.word	0x08008090
 8007418:	080080b0 	.word	0x080080b0
 800741c:	08008070 	.word	0x08008070

08007420 <__swsetup_r>:
 8007420:	4b32      	ldr	r3, [pc, #200]	; (80074ec <__swsetup_r+0xcc>)
 8007422:	b570      	push	{r4, r5, r6, lr}
 8007424:	681d      	ldr	r5, [r3, #0]
 8007426:	4606      	mov	r6, r0
 8007428:	460c      	mov	r4, r1
 800742a:	b125      	cbz	r5, 8007436 <__swsetup_r+0x16>
 800742c:	69ab      	ldr	r3, [r5, #24]
 800742e:	b913      	cbnz	r3, 8007436 <__swsetup_r+0x16>
 8007430:	4628      	mov	r0, r5
 8007432:	f000 f985 	bl	8007740 <__sinit>
 8007436:	4b2e      	ldr	r3, [pc, #184]	; (80074f0 <__swsetup_r+0xd0>)
 8007438:	429c      	cmp	r4, r3
 800743a:	d10f      	bne.n	800745c <__swsetup_r+0x3c>
 800743c:	686c      	ldr	r4, [r5, #4]
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007444:	0719      	lsls	r1, r3, #28
 8007446:	d42c      	bmi.n	80074a2 <__swsetup_r+0x82>
 8007448:	06dd      	lsls	r5, r3, #27
 800744a:	d411      	bmi.n	8007470 <__swsetup_r+0x50>
 800744c:	2309      	movs	r3, #9
 800744e:	6033      	str	r3, [r6, #0]
 8007450:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007454:	81a3      	strh	r3, [r4, #12]
 8007456:	f04f 30ff 	mov.w	r0, #4294967295
 800745a:	e03e      	b.n	80074da <__swsetup_r+0xba>
 800745c:	4b25      	ldr	r3, [pc, #148]	; (80074f4 <__swsetup_r+0xd4>)
 800745e:	429c      	cmp	r4, r3
 8007460:	d101      	bne.n	8007466 <__swsetup_r+0x46>
 8007462:	68ac      	ldr	r4, [r5, #8]
 8007464:	e7eb      	b.n	800743e <__swsetup_r+0x1e>
 8007466:	4b24      	ldr	r3, [pc, #144]	; (80074f8 <__swsetup_r+0xd8>)
 8007468:	429c      	cmp	r4, r3
 800746a:	bf08      	it	eq
 800746c:	68ec      	ldreq	r4, [r5, #12]
 800746e:	e7e6      	b.n	800743e <__swsetup_r+0x1e>
 8007470:	0758      	lsls	r0, r3, #29
 8007472:	d512      	bpl.n	800749a <__swsetup_r+0x7a>
 8007474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007476:	b141      	cbz	r1, 800748a <__swsetup_r+0x6a>
 8007478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800747c:	4299      	cmp	r1, r3
 800747e:	d002      	beq.n	8007486 <__swsetup_r+0x66>
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff f8b5 	bl	80065f0 <_free_r>
 8007486:	2300      	movs	r3, #0
 8007488:	6363      	str	r3, [r4, #52]	; 0x34
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	2300      	movs	r3, #0
 8007494:	6063      	str	r3, [r4, #4]
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f043 0308 	orr.w	r3, r3, #8
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	b94b      	cbnz	r3, 80074ba <__swsetup_r+0x9a>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b0:	d003      	beq.n	80074ba <__swsetup_r+0x9a>
 80074b2:	4621      	mov	r1, r4
 80074b4:	4630      	mov	r0, r6
 80074b6:	f000 fa09 	bl	80078cc <__smakebuf_r>
 80074ba:	89a0      	ldrh	r0, [r4, #12]
 80074bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074c0:	f010 0301 	ands.w	r3, r0, #1
 80074c4:	d00a      	beq.n	80074dc <__swsetup_r+0xbc>
 80074c6:	2300      	movs	r3, #0
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	6963      	ldr	r3, [r4, #20]
 80074cc:	425b      	negs	r3, r3
 80074ce:	61a3      	str	r3, [r4, #24]
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	b943      	cbnz	r3, 80074e6 <__swsetup_r+0xc6>
 80074d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074d8:	d1ba      	bne.n	8007450 <__swsetup_r+0x30>
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	0781      	lsls	r1, r0, #30
 80074de:	bf58      	it	pl
 80074e0:	6963      	ldrpl	r3, [r4, #20]
 80074e2:	60a3      	str	r3, [r4, #8]
 80074e4:	e7f4      	b.n	80074d0 <__swsetup_r+0xb0>
 80074e6:	2000      	movs	r0, #0
 80074e8:	e7f7      	b.n	80074da <__swsetup_r+0xba>
 80074ea:	bf00      	nop
 80074ec:	2000000c 	.word	0x2000000c
 80074f0:	08008090 	.word	0x08008090
 80074f4:	080080b0 	.word	0x080080b0
 80074f8:	08008070 	.word	0x08008070

080074fc <abort>:
 80074fc:	b508      	push	{r3, lr}
 80074fe:	2006      	movs	r0, #6
 8007500:	f000 faa4 	bl	8007a4c <raise>
 8007504:	2001      	movs	r0, #1
 8007506:	f7fa f96b 	bl	80017e0 <_exit>
	...

0800750c <__sflush_r>:
 800750c:	898a      	ldrh	r2, [r1, #12]
 800750e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007512:	4605      	mov	r5, r0
 8007514:	0710      	lsls	r0, r2, #28
 8007516:	460c      	mov	r4, r1
 8007518:	d458      	bmi.n	80075cc <__sflush_r+0xc0>
 800751a:	684b      	ldr	r3, [r1, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	dc05      	bgt.n	800752c <__sflush_r+0x20>
 8007520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	dc02      	bgt.n	800752c <__sflush_r+0x20>
 8007526:	2000      	movs	r0, #0
 8007528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800752c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800752e:	2e00      	cmp	r6, #0
 8007530:	d0f9      	beq.n	8007526 <__sflush_r+0x1a>
 8007532:	2300      	movs	r3, #0
 8007534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007538:	682f      	ldr	r7, [r5, #0]
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	d032      	beq.n	80075a4 <__sflush_r+0x98>
 800753e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	075a      	lsls	r2, r3, #29
 8007544:	d505      	bpl.n	8007552 <__sflush_r+0x46>
 8007546:	6863      	ldr	r3, [r4, #4]
 8007548:	1ac0      	subs	r0, r0, r3
 800754a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800754c:	b10b      	cbz	r3, 8007552 <__sflush_r+0x46>
 800754e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007550:	1ac0      	subs	r0, r0, r3
 8007552:	2300      	movs	r3, #0
 8007554:	4602      	mov	r2, r0
 8007556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007558:	6a21      	ldr	r1, [r4, #32]
 800755a:	4628      	mov	r0, r5
 800755c:	47b0      	blx	r6
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	d106      	bne.n	8007572 <__sflush_r+0x66>
 8007564:	6829      	ldr	r1, [r5, #0]
 8007566:	291d      	cmp	r1, #29
 8007568:	d82c      	bhi.n	80075c4 <__sflush_r+0xb8>
 800756a:	4a2a      	ldr	r2, [pc, #168]	; (8007614 <__sflush_r+0x108>)
 800756c:	40ca      	lsrs	r2, r1
 800756e:	07d6      	lsls	r6, r2, #31
 8007570:	d528      	bpl.n	80075c4 <__sflush_r+0xb8>
 8007572:	2200      	movs	r2, #0
 8007574:	6062      	str	r2, [r4, #4]
 8007576:	04d9      	lsls	r1, r3, #19
 8007578:	6922      	ldr	r2, [r4, #16]
 800757a:	6022      	str	r2, [r4, #0]
 800757c:	d504      	bpl.n	8007588 <__sflush_r+0x7c>
 800757e:	1c42      	adds	r2, r0, #1
 8007580:	d101      	bne.n	8007586 <__sflush_r+0x7a>
 8007582:	682b      	ldr	r3, [r5, #0]
 8007584:	b903      	cbnz	r3, 8007588 <__sflush_r+0x7c>
 8007586:	6560      	str	r0, [r4, #84]	; 0x54
 8007588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800758a:	602f      	str	r7, [r5, #0]
 800758c:	2900      	cmp	r1, #0
 800758e:	d0ca      	beq.n	8007526 <__sflush_r+0x1a>
 8007590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007594:	4299      	cmp	r1, r3
 8007596:	d002      	beq.n	800759e <__sflush_r+0x92>
 8007598:	4628      	mov	r0, r5
 800759a:	f7ff f829 	bl	80065f0 <_free_r>
 800759e:	2000      	movs	r0, #0
 80075a0:	6360      	str	r0, [r4, #52]	; 0x34
 80075a2:	e7c1      	b.n	8007528 <__sflush_r+0x1c>
 80075a4:	6a21      	ldr	r1, [r4, #32]
 80075a6:	2301      	movs	r3, #1
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b0      	blx	r6
 80075ac:	1c41      	adds	r1, r0, #1
 80075ae:	d1c7      	bne.n	8007540 <__sflush_r+0x34>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0c4      	beq.n	8007540 <__sflush_r+0x34>
 80075b6:	2b1d      	cmp	r3, #29
 80075b8:	d001      	beq.n	80075be <__sflush_r+0xb2>
 80075ba:	2b16      	cmp	r3, #22
 80075bc:	d101      	bne.n	80075c2 <__sflush_r+0xb6>
 80075be:	602f      	str	r7, [r5, #0]
 80075c0:	e7b1      	b.n	8007526 <__sflush_r+0x1a>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	e7ad      	b.n	8007528 <__sflush_r+0x1c>
 80075cc:	690f      	ldr	r7, [r1, #16]
 80075ce:	2f00      	cmp	r7, #0
 80075d0:	d0a9      	beq.n	8007526 <__sflush_r+0x1a>
 80075d2:	0793      	lsls	r3, r2, #30
 80075d4:	680e      	ldr	r6, [r1, #0]
 80075d6:	bf08      	it	eq
 80075d8:	694b      	ldreq	r3, [r1, #20]
 80075da:	600f      	str	r7, [r1, #0]
 80075dc:	bf18      	it	ne
 80075de:	2300      	movne	r3, #0
 80075e0:	eba6 0807 	sub.w	r8, r6, r7
 80075e4:	608b      	str	r3, [r1, #8]
 80075e6:	f1b8 0f00 	cmp.w	r8, #0
 80075ea:	dd9c      	ble.n	8007526 <__sflush_r+0x1a>
 80075ec:	6a21      	ldr	r1, [r4, #32]
 80075ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075f0:	4643      	mov	r3, r8
 80075f2:	463a      	mov	r2, r7
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b0      	blx	r6
 80075f8:	2800      	cmp	r0, #0
 80075fa:	dc06      	bgt.n	800760a <__sflush_r+0xfe>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007602:	81a3      	strh	r3, [r4, #12]
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	e78e      	b.n	8007528 <__sflush_r+0x1c>
 800760a:	4407      	add	r7, r0
 800760c:	eba8 0800 	sub.w	r8, r8, r0
 8007610:	e7e9      	b.n	80075e6 <__sflush_r+0xda>
 8007612:	bf00      	nop
 8007614:	20400001 	.word	0x20400001

08007618 <_fflush_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	690b      	ldr	r3, [r1, #16]
 800761c:	4605      	mov	r5, r0
 800761e:	460c      	mov	r4, r1
 8007620:	b913      	cbnz	r3, 8007628 <_fflush_r+0x10>
 8007622:	2500      	movs	r5, #0
 8007624:	4628      	mov	r0, r5
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	b118      	cbz	r0, 8007632 <_fflush_r+0x1a>
 800762a:	6983      	ldr	r3, [r0, #24]
 800762c:	b90b      	cbnz	r3, 8007632 <_fflush_r+0x1a>
 800762e:	f000 f887 	bl	8007740 <__sinit>
 8007632:	4b14      	ldr	r3, [pc, #80]	; (8007684 <_fflush_r+0x6c>)
 8007634:	429c      	cmp	r4, r3
 8007636:	d11b      	bne.n	8007670 <_fflush_r+0x58>
 8007638:	686c      	ldr	r4, [r5, #4]
 800763a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0ef      	beq.n	8007622 <_fflush_r+0xa>
 8007642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007644:	07d0      	lsls	r0, r2, #31
 8007646:	d404      	bmi.n	8007652 <_fflush_r+0x3a>
 8007648:	0599      	lsls	r1, r3, #22
 800764a:	d402      	bmi.n	8007652 <_fflush_r+0x3a>
 800764c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800764e:	f000 f915 	bl	800787c <__retarget_lock_acquire_recursive>
 8007652:	4628      	mov	r0, r5
 8007654:	4621      	mov	r1, r4
 8007656:	f7ff ff59 	bl	800750c <__sflush_r>
 800765a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800765c:	07da      	lsls	r2, r3, #31
 800765e:	4605      	mov	r5, r0
 8007660:	d4e0      	bmi.n	8007624 <_fflush_r+0xc>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	059b      	lsls	r3, r3, #22
 8007666:	d4dd      	bmi.n	8007624 <_fflush_r+0xc>
 8007668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766a:	f000 f908 	bl	800787e <__retarget_lock_release_recursive>
 800766e:	e7d9      	b.n	8007624 <_fflush_r+0xc>
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <_fflush_r+0x70>)
 8007672:	429c      	cmp	r4, r3
 8007674:	d101      	bne.n	800767a <_fflush_r+0x62>
 8007676:	68ac      	ldr	r4, [r5, #8]
 8007678:	e7df      	b.n	800763a <_fflush_r+0x22>
 800767a:	4b04      	ldr	r3, [pc, #16]	; (800768c <_fflush_r+0x74>)
 800767c:	429c      	cmp	r4, r3
 800767e:	bf08      	it	eq
 8007680:	68ec      	ldreq	r4, [r5, #12]
 8007682:	e7da      	b.n	800763a <_fflush_r+0x22>
 8007684:	08008090 	.word	0x08008090
 8007688:	080080b0 	.word	0x080080b0
 800768c:	08008070 	.word	0x08008070

08007690 <std>:
 8007690:	2300      	movs	r3, #0
 8007692:	b510      	push	{r4, lr}
 8007694:	4604      	mov	r4, r0
 8007696:	e9c0 3300 	strd	r3, r3, [r0]
 800769a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800769e:	6083      	str	r3, [r0, #8]
 80076a0:	8181      	strh	r1, [r0, #12]
 80076a2:	6643      	str	r3, [r0, #100]	; 0x64
 80076a4:	81c2      	strh	r2, [r0, #14]
 80076a6:	6183      	str	r3, [r0, #24]
 80076a8:	4619      	mov	r1, r3
 80076aa:	2208      	movs	r2, #8
 80076ac:	305c      	adds	r0, #92	; 0x5c
 80076ae:	f7fe ff97 	bl	80065e0 <memset>
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <std+0x38>)
 80076b4:	6263      	str	r3, [r4, #36]	; 0x24
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <std+0x3c>)
 80076b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <std+0x40>)
 80076bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <std+0x44>)
 80076c0:	6224      	str	r4, [r4, #32]
 80076c2:	6323      	str	r3, [r4, #48]	; 0x30
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	bf00      	nop
 80076c8:	08007a85 	.word	0x08007a85
 80076cc:	08007aa7 	.word	0x08007aa7
 80076d0:	08007adf 	.word	0x08007adf
 80076d4:	08007b03 	.word	0x08007b03

080076d8 <_cleanup_r>:
 80076d8:	4901      	ldr	r1, [pc, #4]	; (80076e0 <_cleanup_r+0x8>)
 80076da:	f000 b8af 	b.w	800783c <_fwalk_reent>
 80076de:	bf00      	nop
 80076e0:	08007619 	.word	0x08007619

080076e4 <__sfmoreglue>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	2268      	movs	r2, #104	; 0x68
 80076e8:	1e4d      	subs	r5, r1, #1
 80076ea:	4355      	muls	r5, r2
 80076ec:	460e      	mov	r6, r1
 80076ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076f2:	f7fe ffe9 	bl	80066c8 <_malloc_r>
 80076f6:	4604      	mov	r4, r0
 80076f8:	b140      	cbz	r0, 800770c <__sfmoreglue+0x28>
 80076fa:	2100      	movs	r1, #0
 80076fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007700:	300c      	adds	r0, #12
 8007702:	60a0      	str	r0, [r4, #8]
 8007704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007708:	f7fe ff6a 	bl	80065e0 <memset>
 800770c:	4620      	mov	r0, r4
 800770e:	bd70      	pop	{r4, r5, r6, pc}

08007710 <__sfp_lock_acquire>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__sfp_lock_acquire+0x8>)
 8007712:	f000 b8b3 	b.w	800787c <__retarget_lock_acquire_recursive>
 8007716:	bf00      	nop
 8007718:	20000359 	.word	0x20000359

0800771c <__sfp_lock_release>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__sfp_lock_release+0x8>)
 800771e:	f000 b8ae 	b.w	800787e <__retarget_lock_release_recursive>
 8007722:	bf00      	nop
 8007724:	20000359 	.word	0x20000359

08007728 <__sinit_lock_acquire>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__sinit_lock_acquire+0x8>)
 800772a:	f000 b8a7 	b.w	800787c <__retarget_lock_acquire_recursive>
 800772e:	bf00      	nop
 8007730:	2000035a 	.word	0x2000035a

08007734 <__sinit_lock_release>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__sinit_lock_release+0x8>)
 8007736:	f000 b8a2 	b.w	800787e <__retarget_lock_release_recursive>
 800773a:	bf00      	nop
 800773c:	2000035a 	.word	0x2000035a

08007740 <__sinit>:
 8007740:	b510      	push	{r4, lr}
 8007742:	4604      	mov	r4, r0
 8007744:	f7ff fff0 	bl	8007728 <__sinit_lock_acquire>
 8007748:	69a3      	ldr	r3, [r4, #24]
 800774a:	b11b      	cbz	r3, 8007754 <__sinit+0x14>
 800774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007750:	f7ff bff0 	b.w	8007734 <__sinit_lock_release>
 8007754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007758:	6523      	str	r3, [r4, #80]	; 0x50
 800775a:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <__sinit+0x68>)
 800775c:	4a13      	ldr	r2, [pc, #76]	; (80077ac <__sinit+0x6c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	62a2      	str	r2, [r4, #40]	; 0x28
 8007762:	42a3      	cmp	r3, r4
 8007764:	bf04      	itt	eq
 8007766:	2301      	moveq	r3, #1
 8007768:	61a3      	streq	r3, [r4, #24]
 800776a:	4620      	mov	r0, r4
 800776c:	f000 f820 	bl	80077b0 <__sfp>
 8007770:	6060      	str	r0, [r4, #4]
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f81c 	bl	80077b0 <__sfp>
 8007778:	60a0      	str	r0, [r4, #8]
 800777a:	4620      	mov	r0, r4
 800777c:	f000 f818 	bl	80077b0 <__sfp>
 8007780:	2200      	movs	r2, #0
 8007782:	60e0      	str	r0, [r4, #12]
 8007784:	2104      	movs	r1, #4
 8007786:	6860      	ldr	r0, [r4, #4]
 8007788:	f7ff ff82 	bl	8007690 <std>
 800778c:	68a0      	ldr	r0, [r4, #8]
 800778e:	2201      	movs	r2, #1
 8007790:	2109      	movs	r1, #9
 8007792:	f7ff ff7d 	bl	8007690 <std>
 8007796:	68e0      	ldr	r0, [r4, #12]
 8007798:	2202      	movs	r2, #2
 800779a:	2112      	movs	r1, #18
 800779c:	f7ff ff78 	bl	8007690 <std>
 80077a0:	2301      	movs	r3, #1
 80077a2:	61a3      	str	r3, [r4, #24]
 80077a4:	e7d2      	b.n	800774c <__sinit+0xc>
 80077a6:	bf00      	nop
 80077a8:	08007f88 	.word	0x08007f88
 80077ac:	080076d9 	.word	0x080076d9

080077b0 <__sfp>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	4607      	mov	r7, r0
 80077b4:	f7ff ffac 	bl	8007710 <__sfp_lock_acquire>
 80077b8:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <__sfp+0x84>)
 80077ba:	681e      	ldr	r6, [r3, #0]
 80077bc:	69b3      	ldr	r3, [r6, #24]
 80077be:	b913      	cbnz	r3, 80077c6 <__sfp+0x16>
 80077c0:	4630      	mov	r0, r6
 80077c2:	f7ff ffbd 	bl	8007740 <__sinit>
 80077c6:	3648      	adds	r6, #72	; 0x48
 80077c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	d503      	bpl.n	80077d8 <__sfp+0x28>
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	b30b      	cbz	r3, 8007818 <__sfp+0x68>
 80077d4:	6836      	ldr	r6, [r6, #0]
 80077d6:	e7f7      	b.n	80077c8 <__sfp+0x18>
 80077d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077dc:	b9d5      	cbnz	r5, 8007814 <__sfp+0x64>
 80077de:	4b16      	ldr	r3, [pc, #88]	; (8007838 <__sfp+0x88>)
 80077e0:	60e3      	str	r3, [r4, #12]
 80077e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077e6:	6665      	str	r5, [r4, #100]	; 0x64
 80077e8:	f000 f847 	bl	800787a <__retarget_lock_init_recursive>
 80077ec:	f7ff ff96 	bl	800771c <__sfp_lock_release>
 80077f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077f8:	6025      	str	r5, [r4, #0]
 80077fa:	61a5      	str	r5, [r4, #24]
 80077fc:	2208      	movs	r2, #8
 80077fe:	4629      	mov	r1, r5
 8007800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007804:	f7fe feec 	bl	80065e0 <memset>
 8007808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800780c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007810:	4620      	mov	r0, r4
 8007812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007814:	3468      	adds	r4, #104	; 0x68
 8007816:	e7d9      	b.n	80077cc <__sfp+0x1c>
 8007818:	2104      	movs	r1, #4
 800781a:	4638      	mov	r0, r7
 800781c:	f7ff ff62 	bl	80076e4 <__sfmoreglue>
 8007820:	4604      	mov	r4, r0
 8007822:	6030      	str	r0, [r6, #0]
 8007824:	2800      	cmp	r0, #0
 8007826:	d1d5      	bne.n	80077d4 <__sfp+0x24>
 8007828:	f7ff ff78 	bl	800771c <__sfp_lock_release>
 800782c:	230c      	movs	r3, #12
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	e7ee      	b.n	8007810 <__sfp+0x60>
 8007832:	bf00      	nop
 8007834:	08007f88 	.word	0x08007f88
 8007838:	ffff0001 	.word	0xffff0001

0800783c <_fwalk_reent>:
 800783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007840:	4606      	mov	r6, r0
 8007842:	4688      	mov	r8, r1
 8007844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007848:	2700      	movs	r7, #0
 800784a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800784e:	f1b9 0901 	subs.w	r9, r9, #1
 8007852:	d505      	bpl.n	8007860 <_fwalk_reent+0x24>
 8007854:	6824      	ldr	r4, [r4, #0]
 8007856:	2c00      	cmp	r4, #0
 8007858:	d1f7      	bne.n	800784a <_fwalk_reent+0xe>
 800785a:	4638      	mov	r0, r7
 800785c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007860:	89ab      	ldrh	r3, [r5, #12]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d907      	bls.n	8007876 <_fwalk_reent+0x3a>
 8007866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800786a:	3301      	adds	r3, #1
 800786c:	d003      	beq.n	8007876 <_fwalk_reent+0x3a>
 800786e:	4629      	mov	r1, r5
 8007870:	4630      	mov	r0, r6
 8007872:	47c0      	blx	r8
 8007874:	4307      	orrs	r7, r0
 8007876:	3568      	adds	r5, #104	; 0x68
 8007878:	e7e9      	b.n	800784e <_fwalk_reent+0x12>

0800787a <__retarget_lock_init_recursive>:
 800787a:	4770      	bx	lr

0800787c <__retarget_lock_acquire_recursive>:
 800787c:	4770      	bx	lr

0800787e <__retarget_lock_release_recursive>:
 800787e:	4770      	bx	lr

08007880 <__swhatbuf_r>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	460e      	mov	r6, r1
 8007884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007888:	2900      	cmp	r1, #0
 800788a:	b096      	sub	sp, #88	; 0x58
 800788c:	4614      	mov	r4, r2
 800788e:	461d      	mov	r5, r3
 8007890:	da08      	bge.n	80078a4 <__swhatbuf_r+0x24>
 8007892:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	061a      	lsls	r2, r3, #24
 800789c:	d410      	bmi.n	80078c0 <__swhatbuf_r+0x40>
 800789e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a2:	e00e      	b.n	80078c2 <__swhatbuf_r+0x42>
 80078a4:	466a      	mov	r2, sp
 80078a6:	f000 f953 	bl	8007b50 <_fstat_r>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	dbf1      	blt.n	8007892 <__swhatbuf_r+0x12>
 80078ae:	9a01      	ldr	r2, [sp, #4]
 80078b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078b8:	425a      	negs	r2, r3
 80078ba:	415a      	adcs	r2, r3
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	e7ee      	b.n	800789e <__swhatbuf_r+0x1e>
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	2000      	movs	r0, #0
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	b016      	add	sp, #88	; 0x58
 80078c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080078cc <__smakebuf_r>:
 80078cc:	898b      	ldrh	r3, [r1, #12]
 80078ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078d0:	079d      	lsls	r5, r3, #30
 80078d2:	4606      	mov	r6, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	d507      	bpl.n	80078e8 <__smakebuf_r+0x1c>
 80078d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	2301      	movs	r3, #1
 80078e2:	6163      	str	r3, [r4, #20]
 80078e4:	b002      	add	sp, #8
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	ab01      	add	r3, sp, #4
 80078ea:	466a      	mov	r2, sp
 80078ec:	f7ff ffc8 	bl	8007880 <__swhatbuf_r>
 80078f0:	9900      	ldr	r1, [sp, #0]
 80078f2:	4605      	mov	r5, r0
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7fe fee7 	bl	80066c8 <_malloc_r>
 80078fa:	b948      	cbnz	r0, 8007910 <__smakebuf_r+0x44>
 80078fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007900:	059a      	lsls	r2, r3, #22
 8007902:	d4ef      	bmi.n	80078e4 <__smakebuf_r+0x18>
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	f043 0302 	orr.w	r3, r3, #2
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	e7e3      	b.n	80078d8 <__smakebuf_r+0xc>
 8007910:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <__smakebuf_r+0x7c>)
 8007912:	62b3      	str	r3, [r6, #40]	; 0x28
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	6020      	str	r0, [r4, #0]
 8007918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791c:	81a3      	strh	r3, [r4, #12]
 800791e:	9b00      	ldr	r3, [sp, #0]
 8007920:	6163      	str	r3, [r4, #20]
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	6120      	str	r0, [r4, #16]
 8007926:	b15b      	cbz	r3, 8007940 <__smakebuf_r+0x74>
 8007928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800792c:	4630      	mov	r0, r6
 800792e:	f000 f921 	bl	8007b74 <_isatty_r>
 8007932:	b128      	cbz	r0, 8007940 <__smakebuf_r+0x74>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	89a0      	ldrh	r0, [r4, #12]
 8007942:	4305      	orrs	r5, r0
 8007944:	81a5      	strh	r5, [r4, #12]
 8007946:	e7cd      	b.n	80078e4 <__smakebuf_r+0x18>
 8007948:	080076d9 	.word	0x080076d9

0800794c <memcpy>:
 800794c:	440a      	add	r2, r1
 800794e:	4291      	cmp	r1, r2
 8007950:	f100 33ff 	add.w	r3, r0, #4294967295
 8007954:	d100      	bne.n	8007958 <memcpy+0xc>
 8007956:	4770      	bx	lr
 8007958:	b510      	push	{r4, lr}
 800795a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007962:	4291      	cmp	r1, r2
 8007964:	d1f9      	bne.n	800795a <memcpy+0xe>
 8007966:	bd10      	pop	{r4, pc}

08007968 <memmove>:
 8007968:	4288      	cmp	r0, r1
 800796a:	b510      	push	{r4, lr}
 800796c:	eb01 0402 	add.w	r4, r1, r2
 8007970:	d902      	bls.n	8007978 <memmove+0x10>
 8007972:	4284      	cmp	r4, r0
 8007974:	4623      	mov	r3, r4
 8007976:	d807      	bhi.n	8007988 <memmove+0x20>
 8007978:	1e43      	subs	r3, r0, #1
 800797a:	42a1      	cmp	r1, r4
 800797c:	d008      	beq.n	8007990 <memmove+0x28>
 800797e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007986:	e7f8      	b.n	800797a <memmove+0x12>
 8007988:	4402      	add	r2, r0
 800798a:	4601      	mov	r1, r0
 800798c:	428a      	cmp	r2, r1
 800798e:	d100      	bne.n	8007992 <memmove+0x2a>
 8007990:	bd10      	pop	{r4, pc}
 8007992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800799a:	e7f7      	b.n	800798c <memmove+0x24>

0800799c <_realloc_r>:
 800799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	4680      	mov	r8, r0
 80079a2:	4614      	mov	r4, r2
 80079a4:	460e      	mov	r6, r1
 80079a6:	b921      	cbnz	r1, 80079b2 <_realloc_r+0x16>
 80079a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4611      	mov	r1, r2
 80079ae:	f7fe be8b 	b.w	80066c8 <_malloc_r>
 80079b2:	b92a      	cbnz	r2, 80079c0 <_realloc_r+0x24>
 80079b4:	f7fe fe1c 	bl	80065f0 <_free_r>
 80079b8:	4625      	mov	r5, r4
 80079ba:	4628      	mov	r0, r5
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c0:	f000 f8fa 	bl	8007bb8 <_malloc_usable_size_r>
 80079c4:	4284      	cmp	r4, r0
 80079c6:	4607      	mov	r7, r0
 80079c8:	d802      	bhi.n	80079d0 <_realloc_r+0x34>
 80079ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079ce:	d812      	bhi.n	80079f6 <_realloc_r+0x5a>
 80079d0:	4621      	mov	r1, r4
 80079d2:	4640      	mov	r0, r8
 80079d4:	f7fe fe78 	bl	80066c8 <_malloc_r>
 80079d8:	4605      	mov	r5, r0
 80079da:	2800      	cmp	r0, #0
 80079dc:	d0ed      	beq.n	80079ba <_realloc_r+0x1e>
 80079de:	42bc      	cmp	r4, r7
 80079e0:	4622      	mov	r2, r4
 80079e2:	4631      	mov	r1, r6
 80079e4:	bf28      	it	cs
 80079e6:	463a      	movcs	r2, r7
 80079e8:	f7ff ffb0 	bl	800794c <memcpy>
 80079ec:	4631      	mov	r1, r6
 80079ee:	4640      	mov	r0, r8
 80079f0:	f7fe fdfe 	bl	80065f0 <_free_r>
 80079f4:	e7e1      	b.n	80079ba <_realloc_r+0x1e>
 80079f6:	4635      	mov	r5, r6
 80079f8:	e7df      	b.n	80079ba <_realloc_r+0x1e>

080079fa <_raise_r>:
 80079fa:	291f      	cmp	r1, #31
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	d904      	bls.n	8007a0e <_raise_r+0x14>
 8007a04:	2316      	movs	r3, #22
 8007a06:	6003      	str	r3, [r0, #0]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a10:	b112      	cbz	r2, 8007a18 <_raise_r+0x1e>
 8007a12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a16:	b94b      	cbnz	r3, 8007a2c <_raise_r+0x32>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 f831 	bl	8007a80 <_getpid_r>
 8007a1e:	462a      	mov	r2, r5
 8007a20:	4601      	mov	r1, r0
 8007a22:	4620      	mov	r0, r4
 8007a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a28:	f000 b818 	b.w	8007a5c <_kill_r>
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d00a      	beq.n	8007a46 <_raise_r+0x4c>
 8007a30:	1c59      	adds	r1, r3, #1
 8007a32:	d103      	bne.n	8007a3c <_raise_r+0x42>
 8007a34:	2316      	movs	r3, #22
 8007a36:	6003      	str	r3, [r0, #0]
 8007a38:	2001      	movs	r0, #1
 8007a3a:	e7e7      	b.n	8007a0c <_raise_r+0x12>
 8007a3c:	2400      	movs	r4, #0
 8007a3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a42:	4628      	mov	r0, r5
 8007a44:	4798      	blx	r3
 8007a46:	2000      	movs	r0, #0
 8007a48:	e7e0      	b.n	8007a0c <_raise_r+0x12>
	...

08007a4c <raise>:
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <raise+0xc>)
 8007a4e:	4601      	mov	r1, r0
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	f7ff bfd2 	b.w	80079fa <_raise_r>
 8007a56:	bf00      	nop
 8007a58:	2000000c 	.word	0x2000000c

08007a5c <_kill_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_kill_r+0x20>)
 8007a60:	2300      	movs	r3, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	f7f9 fea9 	bl	80017c0 <_kill>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d102      	bne.n	8007a78 <_kill_r+0x1c>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	b103      	cbz	r3, 8007a78 <_kill_r+0x1c>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000354 	.word	0x20000354

08007a80 <_getpid_r>:
 8007a80:	f7f9 be96 	b.w	80017b0 <_getpid>

08007a84 <__sread>:
 8007a84:	b510      	push	{r4, lr}
 8007a86:	460c      	mov	r4, r1
 8007a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8c:	f000 f89c 	bl	8007bc8 <_read_r>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	bfab      	itete	ge
 8007a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a96:	89a3      	ldrhlt	r3, [r4, #12]
 8007a98:	181b      	addge	r3, r3, r0
 8007a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a9e:	bfac      	ite	ge
 8007aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aa2:	81a3      	strhlt	r3, [r4, #12]
 8007aa4:	bd10      	pop	{r4, pc}

08007aa6 <__swrite>:
 8007aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aaa:	461f      	mov	r7, r3
 8007aac:	898b      	ldrh	r3, [r1, #12]
 8007aae:	05db      	lsls	r3, r3, #23
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	4616      	mov	r6, r2
 8007ab6:	d505      	bpl.n	8007ac4 <__swrite+0x1e>
 8007ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007abc:	2302      	movs	r3, #2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f000 f868 	bl	8007b94 <_lseek_r>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	4632      	mov	r2, r6
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ada:	f000 b817 	b.w	8007b0c <_write_r>

08007ade <__sseek>:
 8007ade:	b510      	push	{r4, lr}
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae6:	f000 f855 	bl	8007b94 <_lseek_r>
 8007aea:	1c43      	adds	r3, r0, #1
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	bf15      	itete	ne
 8007af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007afa:	81a3      	strheq	r3, [r4, #12]
 8007afc:	bf18      	it	ne
 8007afe:	81a3      	strhne	r3, [r4, #12]
 8007b00:	bd10      	pop	{r4, pc}

08007b02 <__sclose>:
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 b813 	b.w	8007b30 <_close_r>
	...

08007b0c <_write_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4d07      	ldr	r5, [pc, #28]	; (8007b2c <_write_r+0x20>)
 8007b10:	4604      	mov	r4, r0
 8007b12:	4608      	mov	r0, r1
 8007b14:	4611      	mov	r1, r2
 8007b16:	2200      	movs	r2, #0
 8007b18:	602a      	str	r2, [r5, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f7f9 fe87 	bl	800182e <_write>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_write_r+0x1e>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_write_r+0x1e>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	20000354 	.word	0x20000354

08007b30 <_close_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	; (8007b4c <_close_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7f9 fe93 	bl	8001866 <_close>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_close_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_close_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000354 	.word	0x20000354

08007b50 <_fstat_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d07      	ldr	r5, [pc, #28]	; (8007b70 <_fstat_r+0x20>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	f7f9 fe8e 	bl	800187e <_fstat>
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	d102      	bne.n	8007b6c <_fstat_r+0x1c>
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	b103      	cbz	r3, 8007b6c <_fstat_r+0x1c>
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000354 	.word	0x20000354

08007b74 <_isatty_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d06      	ldr	r5, [pc, #24]	; (8007b90 <_isatty_r+0x1c>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	f7f9 fe8d 	bl	800189e <_isatty>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_isatty_r+0x1a>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_isatty_r+0x1a>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	20000354 	.word	0x20000354

08007b94 <_lseek_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d07      	ldr	r5, [pc, #28]	; (8007bb4 <_lseek_r+0x20>)
 8007b98:	4604      	mov	r4, r0
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	602a      	str	r2, [r5, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f7f9 fe86 	bl	80018b4 <_lseek>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_lseek_r+0x1e>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_lseek_r+0x1e>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20000354 	.word	0x20000354

08007bb8 <_malloc_usable_size_r>:
 8007bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbc:	1f18      	subs	r0, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bfbc      	itt	lt
 8007bc2:	580b      	ldrlt	r3, [r1, r0]
 8007bc4:	18c0      	addlt	r0, r0, r3
 8007bc6:	4770      	bx	lr

08007bc8 <_read_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d07      	ldr	r5, [pc, #28]	; (8007be8 <_read_r+0x20>)
 8007bcc:	4604      	mov	r4, r0
 8007bce:	4608      	mov	r0, r1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	602a      	str	r2, [r5, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f7f9 fe0c 	bl	80017f4 <_read>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_read_r+0x1e>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_read_r+0x1e>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	20000354 	.word	0x20000354

08007bec <_init>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	bf00      	nop
 8007bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	469e      	mov	lr, r3
 8007bf6:	4770      	bx	lr

08007bf8 <_fini>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr

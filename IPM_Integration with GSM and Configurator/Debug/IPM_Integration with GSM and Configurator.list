
IPM_Integration with GSM and Configurator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a948  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  0800aad8  0800aad8  0001aad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6cc  0800b6cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6cc  0800b6cc  0001b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6d4  0800b6d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001dc  0800b8b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800b8b8  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e1e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7e  00000000  00000000  0003a02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025564  00000000  00000000  000402a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001add2  00000000  00000000  0006580c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5e77  00000000  00000000  000805de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006340  00000000  00000000  001564a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aac0 	.word	0x0800aac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800aac0 	.word	0x0800aac0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <DataTosend>:
//}
//


void DataTosend(char* time,char* val)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
//	DataToCloud(1,RTC_time_data);
//	HAL_Delay(5000);
//	DataToCloud(2,ADC_cloud_data);


	DataToCloud((uint8_t*)time,(uint8_t*)val);
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fb37 	bl	80015ec <DataToCloud>


}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <Configurator>:
 int flag;
 char* pin_status;
 uint8_t config[4];

 void Configurator()
 {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	 //data_receive();

		  if (buffer[0] != '\0')
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <Configurator+0x44>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <Configurator+0x14>
		   {
		     flag = 1; // Set flag to indicate data has been received
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <Configurator+0x48>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e002      	b.n	8000fa2 <Configurator+0x1a>
		   }
		   else
		   {
			   flag=0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <Configurator+0x48>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
		   }

           if (flag)
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <Configurator+0x48>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <Configurator+0x2e>
           {
	        extract_data();
 8000faa:	f000 f889 	bl	80010c0 <extract_data>
	        pin_config();
 8000fae:	f000 f8bf 	bl	8001130 <pin_config>
	        clear_buffer();
 8000fb2:	f000 f811 	bl	8000fd8 <clear_buffer>
           }

           	set_output();
 8000fb6:	f000 f81b 	bl	8000ff0 <set_output>
            pin_status = readpin_status();
 8000fba:	f000 f845 	bl	8001048 <readpin_status>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <Configurator+0x4c>)
 8000fc2:	6013      	str	r3, [r2, #0]
            status_transmit();
 8000fc4:	f000 fca0 	bl	8001908 <status_transmit>



  }
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	200002ac 	.word	0x200002ac
 8000fd4:	200002b0 	.word	0x200002b0

08000fd8 <clear_buffer>:

 void clear_buffer()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	memset(buffer,0,sizeof (buffer));
 8000fdc:	220b      	movs	r2, #11
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <clear_buffer+0x14>)
 8000fe2:	f006 fdf5 	bl	8007bd0 <memset>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001fc 	.word	0x200001fc

08000ff0 <set_output>:



 void set_output()
 {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
 if(config[0] == 0)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <set_output+0x50>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <set_output+0x16>
            {
				write_gpio(GPIOB,GPIO_PIN_5, PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2120      	movs	r1, #32
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <set_output+0x54>)
 8001002:	f000 fca1 	bl	8001948 <write_gpio>
            }

            if(config[1] == 0)
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <set_output+0x50>)
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d104      	bne.n	8001018 <set_output+0x28>
			{
				write_gpio(GPIOB,GPIO_PIN_4, PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <set_output+0x54>)
 8001014:	f000 fc98 	bl	8001948 <write_gpio>
			}

            if(config[2] == 0)
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <set_output+0x50>)
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d104      	bne.n	800102a <set_output+0x3a>
			{
				write_gpio(GPIOB,GPIO_PIN_0, PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2101      	movs	r1, #1
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <set_output+0x54>)
 8001026:	f000 fc8f 	bl	8001948 <write_gpio>
			}
            if(config[3] == 0)
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <set_output+0x50>)
 800102c:	78db      	ldrb	r3, [r3, #3]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d104      	bne.n	800103c <set_output+0x4c>
			{
				write_gpio(GPIOB,GPIO_PIN_1, PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2102      	movs	r1, #2
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <set_output+0x54>)
 8001038:	f000 fc86 	bl	8001948 <write_gpio>
			}
 }
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200002b4 	.word	0x200002b4
 8001044:	48000400 	.word	0x48000400

08001048 <readpin_status>:

 char* readpin_status()
 {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	 if(config[0]==1)
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <readpin_status+0x6c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <readpin_status+0x1c>
	 {
	     A[0]=read_gpio( GPIOB,GPIO_PIN_5);
 8001054:	2120      	movs	r1, #32
 8001056:	4818      	ldr	r0, [pc, #96]	; (80010b8 <readpin_status+0x70>)
 8001058:	f000 fc66 	bl	8001928 <read_gpio>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <readpin_status+0x74>)
 8001062:	701a      	strb	r2, [r3, #0]
	 }
	 if(config[1]==1)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <readpin_status+0x6c>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d107      	bne.n	800107c <readpin_status+0x34>
	 {
		 A[1]=read_gpio( GPIOB,GPIO_PIN_4);
 800106c:	2110      	movs	r1, #16
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <readpin_status+0x70>)
 8001070:	f000 fc5a 	bl	8001928 <read_gpio>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <readpin_status+0x74>)
 800107a:	705a      	strb	r2, [r3, #1]
	 }
	 if(config[2]==1)
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <readpin_status+0x6c>)
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d107      	bne.n	8001094 <readpin_status+0x4c>
	 {
	    A[2]=read_gpio( GPIOB,GPIO_PIN_0);
 8001084:	2101      	movs	r1, #1
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <readpin_status+0x70>)
 8001088:	f000 fc4e 	bl	8001928 <read_gpio>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <readpin_status+0x74>)
 8001092:	709a      	strb	r2, [r3, #2]
	 }
	if(config[3]==1)
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <readpin_status+0x6c>)
 8001096:	78db      	ldrb	r3, [r3, #3]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <readpin_status+0x64>
	{
	   A[3]=read_gpio( GPIOB,GPIO_PIN_1);
 800109c:	2102      	movs	r1, #2
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <readpin_status+0x70>)
 80010a0:	f000 fc42 	bl	8001928 <read_gpio>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <readpin_status+0x74>)
 80010aa:	70da      	strb	r2, [r3, #3]
    }

//	 ssd1306_SetCursor(7, 20);
//	  OLED_data(A);
	 return A;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <readpin_status+0x74>)
 }
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200002b4 	.word	0x200002b4
 80010b8:	48000400 	.word	0x48000400
 80010bc:	200002a4 	.word	0x200002a4

080010c0 <extract_data>:


void extract_data()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	token = strtok(buffer, ",");
 80010c4:	4915      	ldr	r1, [pc, #84]	; (800111c <extract_data+0x5c>)
 80010c6:	4816      	ldr	r0, [pc, #88]	; (8001120 <extract_data+0x60>)
 80010c8:	f007 fb4c 	bl	8008764 <strtok>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <extract_data+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]


		     if (token != NULL)
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <extract_data+0x64>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d010      	beq.n	80010fc <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <extract_data+0x64>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2209      	movs	r2, #9
 80010e0:	4619      	mov	r1, r3
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <extract_data+0x68>)
 80010e4:	f007 fb2a 	bl	800873c <strncpy>

		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <extract_data+0x68>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	725a      	strb	r2, [r3, #9]
		         token = strtok(NULL, ",");
 80010ee:	490b      	ldr	r1, [pc, #44]	; (800111c <extract_data+0x5c>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f007 fb37 	bl	8008764 <strtok>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <extract_data+0x64>)
 80010fa:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <extract_data+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d009      	beq.n	8001118 <extract_data+0x58>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <extract_data+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2209      	movs	r2, #9
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <extract_data+0x6c>)
 800110e:	f007 fb15 	bl	800873c <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <extract_data+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	725a      	strb	r2, [r3, #9]
		         //token = strtok(NULL, ",");
		     }


}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800aad8 	.word	0x0800aad8
 8001120:	200001fc 	.word	0x200001fc
 8001124:	200002a8 	.word	0x200002a8
 8001128:	2000028c 	.word	0x2000028c
 800112c:	20000298 	.word	0x20000298

08001130 <pin_config>:


void pin_config()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"B5")==0)
 8001134:	4962      	ldr	r1, [pc, #392]	; (80012c0 <pin_config+0x190>)
 8001136:	4863      	ldr	r0, [pc, #396]	; (80012c4 <pin_config+0x194>)
 8001138:	f7ff f84a 	bl	80001d0 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <pin_config+0x1a>
			     {
			       switch_val=1;
 8001142:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <pin_config+0x198>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e01f      	b.n	800118a <pin_config+0x5a>
			     }
	            else if(strcmp(arr1,"B4")==0)
 800114a:	4960      	ldr	r1, [pc, #384]	; (80012cc <pin_config+0x19c>)
 800114c:	485d      	ldr	r0, [pc, #372]	; (80012c4 <pin_config+0x194>)
 800114e:	f7ff f83f 	bl	80001d0 <strcmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <pin_config+0x30>
				 {
				   switch_val=2;
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <pin_config+0x198>)
 800115a:	2202      	movs	r2, #2
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e014      	b.n	800118a <pin_config+0x5a>
				 }
	            else if(strcmp(arr1,"B0")==0)
 8001160:	495b      	ldr	r1, [pc, #364]	; (80012d0 <pin_config+0x1a0>)
 8001162:	4858      	ldr	r0, [pc, #352]	; (80012c4 <pin_config+0x194>)
 8001164:	f7ff f834 	bl	80001d0 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <pin_config+0x46>
	           	 {
	           		switch_val=3;
 800116e:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <pin_config+0x198>)
 8001170:	2203      	movs	r2, #3
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e009      	b.n	800118a <pin_config+0x5a>
	           	 }
	            else if(strcmp(arr1,"B1")==0)
 8001176:	4957      	ldr	r1, [pc, #348]	; (80012d4 <pin_config+0x1a4>)
 8001178:	4852      	ldr	r0, [pc, #328]	; (80012c4 <pin_config+0x194>)
 800117a:	f7ff f829 	bl	80001d0 <strcmp>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <pin_config+0x5a>
	             {
	            	switch_val=4;
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <pin_config+0x198>)
 8001186:	2204      	movs	r2, #4
 8001188:	601a      	str	r2, [r3, #0]
	             }


			     switch(switch_val)
 800118a:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <pin_config+0x198>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	2b03      	cmp	r3, #3
 8001192:	f200 8092 	bhi.w	80012ba <pin_config+0x18a>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <pin_config+0x6c>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011ed 	.word	0x080011ed
 80011a4:	0800122d 	.word	0x0800122d
 80011a8:	0800126d 	.word	0x0800126d
			     {

			     case 1: //{
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 80011ac:	494a      	ldr	r1, [pc, #296]	; (80012d8 <pin_config+0x1a8>)
 80011ae:	484b      	ldr	r0, [pc, #300]	; (80012dc <pin_config+0x1ac>)
 80011b0:	f7ff f80e 	bl	80001d0 <strcmp>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d108      	bne.n	80011cc <pin_config+0x9c>
						{
			              user_GPIO_Init(GPIOB,GPIO_PIN_5,OUTPUT);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	4848      	ldr	r0, [pc, #288]	; (80012e0 <pin_config+0x1b0>)
 80011c0:	f000 faf6 	bl	80017b0 <user_GPIO_Init>
//						  write_gpio(GPIOA,GPIO_PIN_5, PIN_SET);
					      config[0] = 0;
 80011c4:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <pin_config+0x1b4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
//									HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,PIN_RESET);
//								}
//							}
					    }
			     //}
			     break;
 80011ca:	e06f      	b.n	80012ac <pin_config+0x17c>
			              else if(strcmp(arr2,"INPUT")==0)
 80011cc:	4946      	ldr	r1, [pc, #280]	; (80012e8 <pin_config+0x1b8>)
 80011ce:	4843      	ldr	r0, [pc, #268]	; (80012dc <pin_config+0x1ac>)
 80011d0:	f7fe fffe 	bl	80001d0 <strcmp>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d168      	bne.n	80012ac <pin_config+0x17c>
						   user_GPIO_Init(GPIOB,GPIO_PIN_5,INPUT);
 80011da:	2201      	movs	r2, #1
 80011dc:	2120      	movs	r1, #32
 80011de:	4840      	ldr	r0, [pc, #256]	; (80012e0 <pin_config+0x1b0>)
 80011e0:	f000 fae6 	bl	80017b0 <user_GPIO_Init>
						   config[0] = 1;
 80011e4:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <pin_config+0x1b4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
			     break;
 80011ea:	e05f      	b.n	80012ac <pin_config+0x17c>

			   case 2: //{
				    	if(strcmp(arr2,"OUTPUT")==0)
 80011ec:	493a      	ldr	r1, [pc, #232]	; (80012d8 <pin_config+0x1a8>)
 80011ee:	483b      	ldr	r0, [pc, #236]	; (80012dc <pin_config+0x1ac>)
 80011f0:	f7fe ffee 	bl	80001d0 <strcmp>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d108      	bne.n	800120c <pin_config+0xdc>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_4,OUTPUT);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2110      	movs	r1, #16
 80011fe:	4838      	ldr	r0, [pc, #224]	; (80012e0 <pin_config+0x1b0>)
 8001200:	f000 fad6 	bl	80017b0 <user_GPIO_Init>
//			    		 write_gpio(GPIOA,GPIO_PIN_6, PIN_SET);
			    	      config[1]=0;
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <pin_config+0x1b4>)
 8001206:	2200      	movs	r2, #0
 8001208:	705a      	strb	r2, [r3, #1]
			    	     else if(strcmp(arr2,"INPUT")==0)
			    		{
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
			    		  config[1]=1;
			    		}
				    	break;
 800120a:	e051      	b.n	80012b0 <pin_config+0x180>
			    	     else if(strcmp(arr2,"INPUT")==0)
 800120c:	4936      	ldr	r1, [pc, #216]	; (80012e8 <pin_config+0x1b8>)
 800120e:	4833      	ldr	r0, [pc, #204]	; (80012dc <pin_config+0x1ac>)
 8001210:	f7fe ffde 	bl	80001d0 <strcmp>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d14a      	bne.n	80012b0 <pin_config+0x180>
			    		  user_GPIO_Init(GPIOB,GPIO_PIN_4,INPUT);
 800121a:	2201      	movs	r2, #1
 800121c:	2110      	movs	r1, #16
 800121e:	4830      	ldr	r0, [pc, #192]	; (80012e0 <pin_config+0x1b0>)
 8001220:	f000 fac6 	bl	80017b0 <user_GPIO_Init>
			    		  config[1]=1;
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <pin_config+0x1b4>)
 8001226:	2201      	movs	r2, #1
 8001228:	705a      	strb	r2, [r3, #1]
				    	break;
 800122a:	e041      	b.n	80012b0 <pin_config+0x180>

			     case 3:
			    	 	if(strcmp(arr2,"OUTPUT")==0)
 800122c:	492a      	ldr	r1, [pc, #168]	; (80012d8 <pin_config+0x1a8>)
 800122e:	482b      	ldr	r0, [pc, #172]	; (80012dc <pin_config+0x1ac>)
 8001230:	f7fe ffce 	bl	80001d0 <strcmp>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d108      	bne.n	800124c <pin_config+0x11c>
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_0,OUTPUT);
 800123a:	2200      	movs	r2, #0
 800123c:	2101      	movs	r1, #1
 800123e:	4828      	ldr	r0, [pc, #160]	; (80012e0 <pin_config+0x1b0>)
 8001240:	f000 fab6 	bl	80017b0 <user_GPIO_Init>
			     		  config[2]=0;
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <pin_config+0x1b4>)
 8001246:	2200      	movs	r2, #0
 8001248:	709a      	strb	r2, [r3, #2]
			     		{
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
			     		 config[2]=1;
			     		}

			     break;
 800124a:	e033      	b.n	80012b4 <pin_config+0x184>
			     		 else if(strcmp(arr2,"INPUT")==0)
 800124c:	4926      	ldr	r1, [pc, #152]	; (80012e8 <pin_config+0x1b8>)
 800124e:	4823      	ldr	r0, [pc, #140]	; (80012dc <pin_config+0x1ac>)
 8001250:	f7fe ffbe 	bl	80001d0 <strcmp>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d12c      	bne.n	80012b4 <pin_config+0x184>
			     		  user_GPIO_Init(GPIOB,GPIO_PIN_0,INPUT);
 800125a:	2201      	movs	r2, #1
 800125c:	2101      	movs	r1, #1
 800125e:	4820      	ldr	r0, [pc, #128]	; (80012e0 <pin_config+0x1b0>)
 8001260:	f000 faa6 	bl	80017b0 <user_GPIO_Init>
			     		 config[2]=1;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <pin_config+0x1b4>)
 8001266:	2201      	movs	r2, #1
 8001268:	709a      	strb	r2, [r3, #2]
			     break;
 800126a:	e023      	b.n	80012b4 <pin_config+0x184>

			     case 4:
			    	 	 if(strcmp(arr2,"OUTPUT")==0)
 800126c:	491a      	ldr	r1, [pc, #104]	; (80012d8 <pin_config+0x1a8>)
 800126e:	481b      	ldr	r0, [pc, #108]	; (80012dc <pin_config+0x1ac>)
 8001270:	f7fe ffae 	bl	80001d0 <strcmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <pin_config+0x15c>
			    		{
			    	      user_GPIO_Init(GPIOB,GPIO_PIN_1,OUTPUT);
 800127a:	2200      	movs	r2, #0
 800127c:	2102      	movs	r1, #2
 800127e:	4818      	ldr	r0, [pc, #96]	; (80012e0 <pin_config+0x1b0>)
 8001280:	f000 fa96 	bl	80017b0 <user_GPIO_Init>
			    		  config[3]=0;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <pin_config+0x1b4>)
 8001286:	2200      	movs	r2, #0
 8001288:	70da      	strb	r2, [r3, #3]
			    		  else if(strcmp(arr2,"INPUT")==0)
			    	    {
			              user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
			              config[3]=1;
			    	    }
			     break;
 800128a:	e015      	b.n	80012b8 <pin_config+0x188>
			    		  else if(strcmp(arr2,"INPUT")==0)
 800128c:	4916      	ldr	r1, [pc, #88]	; (80012e8 <pin_config+0x1b8>)
 800128e:	4813      	ldr	r0, [pc, #76]	; (80012dc <pin_config+0x1ac>)
 8001290:	f7fe ff9e 	bl	80001d0 <strcmp>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <pin_config+0x188>
			              user_GPIO_Init(GPIOB,GPIO_PIN_1,INPUT);
 800129a:	2201      	movs	r2, #1
 800129c:	2102      	movs	r1, #2
 800129e:	4810      	ldr	r0, [pc, #64]	; (80012e0 <pin_config+0x1b0>)
 80012a0:	f000 fa86 	bl	80017b0 <user_GPIO_Init>
			              config[3]=1;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <pin_config+0x1b4>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	70da      	strb	r2, [r3, #3]
			     break;
 80012aa:	e005      	b.n	80012b8 <pin_config+0x188>
			     break;
 80012ac:	bf00      	nop
 80012ae:	e004      	b.n	80012ba <pin_config+0x18a>
				    	break;
 80012b0:	bf00      	nop
 80012b2:	e002      	b.n	80012ba <pin_config+0x18a>
			     break;
 80012b4:	bf00      	nop
 80012b6:	e000      	b.n	80012ba <pin_config+0x18a>
			     break;
 80012b8:	bf00      	nop
			     }

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800aadc 	.word	0x0800aadc
 80012c4:	2000028c 	.word	0x2000028c
 80012c8:	200001f8 	.word	0x200001f8
 80012cc:	0800aae0 	.word	0x0800aae0
 80012d0:	0800aae4 	.word	0x0800aae4
 80012d4:	0800aae8 	.word	0x0800aae8
 80012d8:	0800aaec 	.word	0x0800aaec
 80012dc:	20000298 	.word	0x20000298
 80012e0:	48000400 	.word	0x48000400
 80012e4:	200002b4 	.word	0x200002b4
 80012e8:	0800aaf4 	.word	0x0800aaf4
 80012ec:	00000000 	.word	0x00000000

080012f0 <Voltage_Calculation>:
float vol;
int temp;


float Voltage_Calculation(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	vol=(float)(temp*(MIN_VALUE/MAX_VALUE));
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <Voltage_Calculation+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f923 	bl	8000544 <__aeabi_i2d>
 80012fe:	a30a      	add	r3, pc, #40	; (adr r3, 8001328 <Voltage_Calculation+0x38>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f988 	bl	8000618 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc5a 	bl	8000bc8 <__aeabi_d2f>
 8001314:	4603      	mov	r3, r0
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <Voltage_Calculation+0x44>)
 8001318:	6013      	str	r3, [r2, #0]
    return vol;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <Voltage_Calculation+0x44>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	ee07 3a90 	vmov	s15, r3
}
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	bd80      	pop	{r7, pc}
 8001328:	e734d9b4 	.word	0xe734d9b4
 800132c:	3f4a680c 	.word	0x3f4a680c
 8001330:	200002c0 	.word	0x200002c0
 8001334:	200002bc 	.word	0x200002bc

08001338 <adc_handler>:

void adc_handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

	d = (float)Voltage_Calculation();
 800133c:	f7ff ffd8 	bl	80012f0 <Voltage_Calculation>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <adc_handler+0x18>)
 8001346:	edc3 7a00 	vstr	s15, [r3]
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200002b8 	.word	0x200002b8

08001354 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	temp = adc_value();
 800135c:	f000 fc46 	bl	8001bec <adc_value>
 8001360:	4603      	mov	r3, r0
 8001362:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001364:	6013      	str	r3, [r2, #0]
	//HAL_ADC_Start_IT(&hadc1);

}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002c0 	.word	0x200002c0

08001374 <bcdToDec>:
	return (uint8_t)( (val/10*16) + (val%10) );
}

//Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	return (int)( (val/16*10) + (val%16) );
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	461a      	mov	r2, r3
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	4413      	add	r3, r2
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <Get_Time>:
      I2C_Write(&hi2c1, DS3107_ADDRESS, 0x00, 1, set_time, 7, 1000);


}
void Get_Time (void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	uint8_t get_time[7];

	I2C_read(get_time);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fba1 	bl	8001af4 <I2C_read>

	time.seconds 	= bcdToDec(get_time[0]);
 80013b2:	783b      	ldrb	r3, [r7, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ffdd 	bl	8001374 <bcdToDec>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <Get_Time+0x88>)
 80013c0:	701a      	strb	r2, [r3, #0]
    time.minutes 	= bcdToDec(get_time[1]);
 80013c2:	787b      	ldrb	r3, [r7, #1]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ffd5 	bl	8001374 <bcdToDec>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <Get_Time+0x88>)
 80013d0:	705a      	strb	r2, [r3, #1]
	time.hour 		= bcdToDec(get_time[2]);
 80013d2:	78bb      	ldrb	r3, [r7, #2]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ffcd 	bl	8001374 <bcdToDec>
 80013da:	4603      	mov	r3, r0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <Get_Time+0x88>)
 80013e0:	709a      	strb	r2, [r3, #2]
	time.dayofweek  = bcdToDec(get_time[3]);
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffc5 	bl	8001374 <bcdToDec>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <Get_Time+0x88>)
 80013f0:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 80013f2:	793b      	ldrb	r3, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ffbd 	bl	8001374 <bcdToDec>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <Get_Time+0x88>)
 8001400:	711a      	strb	r2, [r3, #4]
	time.month 		= bcdToDec(get_time[5]);
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ffb5 	bl	8001374 <bcdToDec>
 800140a:	4603      	mov	r3, r0
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <Get_Time+0x88>)
 8001410:	715a      	strb	r2, [r3, #5]
	time.year 		= bcdToDec(get_time[6]);
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffad 	bl	8001374 <bcdToDec>
 800141a:	4603      	mov	r3, r0
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b03      	ldr	r3, [pc, #12]	; (800142c <Get_Time+0x88>)
 8001420:	719a      	strb	r2, [r3, #6]
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200002c4 	.word	0x200002c4

08001430 <app>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void app(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af02      	add	r7, sp, #8
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


     data_receive();
 8001436:	f000 fa57 	bl	80018e8 <data_receive>


	  Get_Time();
 800143a:	f7ff ffb3 	bl	80013a4 <Get_Time>
	  	  sprintf(buffer_OLED, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <app+0x90>)
 8001440:	789b      	ldrb	r3, [r3, #2]
 8001442:	461a      	mov	r2, r3
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <app+0x90>)
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	4619      	mov	r1, r3
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <app+0x90>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	460b      	mov	r3, r1
 8001452:	491c      	ldr	r1, [pc, #112]	; (80014c4 <app+0x94>)
 8001454:	481c      	ldr	r0, [pc, #112]	; (80014c8 <app+0x98>)
 8001456:	f007 f951 	bl	80086fc <siprintf>





	  	  ssd1306_SetCursor(5, 5);
 800145a:	2105      	movs	r1, #5
 800145c:	2005      	movs	r0, #5
 800145e:	f000 fdbb 	bl	8001fd8 <ssd1306_SetCursor>
	  	  OLED_data(buffer_OLED);
 8001462:	4819      	ldr	r0, [pc, #100]	; (80014c8 <app+0x98>)
 8001464:	f000 f840 	bl	80014e8 <OLED_data>

	  	  //HAL_Delay(500);

	  	  /*ADC function started*/

	  	  HAL_ADC_Start_IT(&hadc1);
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <app+0x9c>)
 800146a:	f001 fc89 	bl	8002d80 <HAL_ADC_Start_IT>
	  	  adc_handler();
 800146e:	f7ff ff63 	bl	8001338 <adc_handler>

	  	sprintf(buffer_ADC, "%f", d);
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <app+0xa0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f876 	bl	8000568 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4914      	ldr	r1, [pc, #80]	; (80014d4 <app+0xa4>)
 8001482:	4815      	ldr	r0, [pc, #84]	; (80014d8 <app+0xa8>)
 8001484:	f007 f93a 	bl	80086fc <siprintf>
  		  ssd1306_SetCursor(7, 20);
 8001488:	2114      	movs	r1, #20
 800148a:	2007      	movs	r0, #7
 800148c:	f000 fda4 	bl	8001fd8 <ssd1306_SetCursor>
  		  OLED_data(buffer_ADC);
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <app+0xa8>)
 8001492:	f000 f829 	bl	80014e8 <OLED_data>
  		  /*GSM functionalities started*/

//  		DataTosend(time.hour,time.minutes,time.seconds,d);


  		  DataTosend(buffer_OLED,buffer_ADC);		// 3 sec;
 8001496:	4910      	ldr	r1, [pc, #64]	; (80014d8 <app+0xa8>)
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <app+0x98>)
 800149a:	f7ff fd67 	bl	8000f6c <DataTosend>
  		    /*Configurator functionalities*/
			  Configurator();
 800149e:	f7ff fd73 	bl	8000f88 <Configurator>
  		  sprintf(buffer_Configurator, "%s", A);
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <app+0xac>)
 80014a4:	490e      	ldr	r1, [pc, #56]	; (80014e0 <app+0xb0>)
 80014a6:	480f      	ldr	r0, [pc, #60]	; (80014e4 <app+0xb4>)
 80014a8:	f007 f928 	bl	80086fc <siprintf>
  		  ssd1306_SetCursor(7, 20);
 80014ac:	2114      	movs	r1, #20
 80014ae:	2007      	movs	r0, #7
 80014b0:	f000 fd92 	bl	8001fd8 <ssd1306_SetCursor>
 		  OLED_data(buffer_Configurator);
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <app+0xb4>)
 80014b6:	f000 f817 	bl	80014e8 <OLED_data>





  }
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200002c4 	.word	0x200002c4
 80014c4:	0800aafc 	.word	0x0800aafc
 80014c8:	200002cc 	.word	0x200002cc
 80014cc:	200005f4 	.word	0x200005f4
 80014d0:	200002b8 	.word	0x200002b8
 80014d4:	0800ab0c 	.word	0x0800ab0c
 80014d8:	200002dc 	.word	0x200002dc
 80014dc:	200002a4 	.word	0x200002a4
 80014e0:	0800ab10 	.word	0x0800ab10
 80014e4:	200002ec 	.word	0x200002ec

080014e8 <OLED_data>:


          void OLED_data(char* buffer)
         {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	6078      	str	r0, [r7, #4]

	  	    ssd1306_WriteString(buffer, Font_6x8, White);
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <OLED_data+0x24>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fd47 	bl	8001f8c <ssd1306_WriteString>
	  	    ssd1306_UpdateScreen();
 80014fe:	f000 fc37 	bl	8001d70 <ssd1306_UpdateScreen>

	  	  }
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	0800b238 	.word	0x0800b238

08001510 <UART2_Init>:
//
//}


void UART2_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <UART2_Init+0x58>)
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <UART2_Init+0x5c>)
 8001518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <UART2_Init+0x58>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <UART2_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <UART2_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <UART2_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <UART2_Init+0x58>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <UART2_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <UART2_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <UART2_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <UART2_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <UART2_Init+0x58>)
 8001554:	f004 fe00 	bl	8006158 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <UART2_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 fd9a 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000354 	.word	0x20000354
 800156c:	40004400 	.word	0x40004400

08001570 <GsmCommands>:


void GsmCommands(uint8_t* cmd)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit_IT(&huart2, cmd, strlen((char*)cmd));
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7fe fe33 	bl	80001e4 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29b      	uxth	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <GsmCommands+0x30>)
 8001588:	f004 ff9a 	bl	80064c0 <HAL_UART_Transmit_IT>
	 HAL_UART_Receive_IT(&huart2, Reply, max_buf_len);
 800158c:	2264      	movs	r2, #100	; 0x64
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <GsmCommands+0x34>)
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <GsmCommands+0x30>)
 8001592:	f005 f803 	bl	800659c <HAL_UART_Receive_IT>
//	 HAL_Delay(1000);
	// HAL_UART_Transmit_IT(&huart1, Reply, strlen((char*)Reply));


}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000354 	.word	0x20000354
 80015a4:	200002f0 	.word	0x200002f0

080015a8 <Gsm_Init>:



void Gsm_Init()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
//	          HAL_Delay(1000);


	          //send data to thingspeak

	                    GsmCommands((uint8_t*)"AT\r\n");
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <Gsm_Init+0x2c>)
 80015ae:	f7ff ffdf 	bl	8001570 <GsmCommands>
                        GsmCommands((uint8_t*)"AT+CPIN?\r\n");
 80015b2:	4809      	ldr	r0, [pc, #36]	; (80015d8 <Gsm_Init+0x30>)
 80015b4:	f7ff ffdc 	bl	8001570 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CSQ\r\n");
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <Gsm_Init+0x34>)
 80015ba:	f7ff ffd9 	bl	8001570 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGATT=1\r\n");
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <Gsm_Init+0x38>)
 80015c0:	f7ff ffd6 	bl	8001570 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGDCONT=1,\"IPV6\",\"jionet\"\r\n");
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <Gsm_Init+0x3c>)
 80015c6:	f7ff ffd3 	bl	8001570 <GsmCommands>
	                    GsmCommands((uint8_t*)"AT+CGACT=1,1\r\n");
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <Gsm_Init+0x40>)
 80015cc:	f7ff ffd0 	bl	8001570 <GsmCommands>
//


}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	0800ab14 	.word	0x0800ab14
 80015d8:	0800ab1c 	.word	0x0800ab1c
 80015dc:	0800ab28 	.word	0x0800ab28
 80015e0:	0800ab34 	.word	0x0800ab34
 80015e4:	0800ab44 	.word	0x0800ab44
 80015e8:	0800ab64 	.word	0x0800ab64

080015ec <DataToCloud>:
//
//}


void DataToCloud(uint8_t* RTC_data, uint8_t* adc_data)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0c6      	sub	sp, #280	; 0x118
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015fa:	6018      	str	r0, [r3, #0]
 80015fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001600:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001604:	6019      	str	r1, [r3, #0]

			uint8_t AT_RTCcloud_data[256];

			char* encoded_RTC_data = url_encode((char*)RTC_data);
 8001606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800160a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	f000 f836 	bl	8001680 <url_encode>
 8001614:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
			    char* encoded_adc_data = url_encode((char*)adc_data);
 8001618:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	f000 f82d 	bl	8001680 <url_encode>
 8001626:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108


				//	RTCdata_to_cloud

				 //GsmCommands((uint8_t*)"AT+HTTPTERM\r\n");
				 GsmCommands((uint8_t*)"AT+HTTPINIT\r\n");
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <DataToCloud+0x88>)
 800162c:	f7ff ffa0 	bl	8001570 <GsmCommands>


				 snprintf((char*)AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyLSuScQBF1GOx4mF4KqTnwraq44K9x2roV38OmpNi6GQOP_srVrmM2XlQHFSWzKbMI/exec?field1=%s&field2=%s\"\r\n",encoded_RTC_data, encoded_adc_data);
 8001630:	f107 0008 	add.w	r0, r7, #8
 8001634:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <DataToCloud+0x8c>)
 8001640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001644:	f007 f826 	bl	8008694 <sniprintf>
//					snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data), "AT+HTTPPARA=\"URL\",\https://api.thingspeak.com/update?api_key=Y1KDSHTWPIVWKUFJ&field%d=%s\"\r\n",field,cloud_data);


//				 snprintf(AT_RTCcloud_data, sizeof(AT_RTCcloud_data),"AT+HTTPPARA=\"URL\",\"https://script.google.com/macros/s/AKfycbyLSuScQBF1GOx4mF4KqTnwraq44K9x2roV38OmpNi6GQOP_srVrmM2XlQHFSWzKbMI/exec?field1=%s&field2=%s\"\r\n",RTC_data,adc_data);
//					snprintf(AT_RTCcloud_data,sizeof(AT_RTCcloud_data), "AT+HTTPPARA=\"URL\",\https://script.google.com/macros/s/AKfycbyRFUZ6mtG47oo06jN6elCj2Zq41r2QrjdROOz-AtCCj6mnL4hzXSkpr7Zdz16FgCHTXw/exec?field1=%s&field2=%s\"\r\n",(char*)RTC_data,(char*)adc_data);
					GsmCommands((uint8_t*)AT_RTCcloud_data);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff8f 	bl	8001570 <GsmCommands>
					 GsmCommands((uint8_t*)"AT+HTTPACTION=0\r\n");
 8001652:	480a      	ldr	r0, [pc, #40]	; (800167c <DataToCloud+0x90>)
 8001654:	f7ff ff8c 	bl	8001570 <GsmCommands>

					 free(encoded_RTC_data);
 8001658:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800165c:	f006 faa2 	bl	8007ba4 <free>
					free(encoded_adc_data);
 8001660:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001664:	f006 fa9e 	bl	8007ba4 <free>

}
 8001668:	bf00      	nop
 800166a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	0800ab74 	.word	0x0800ab74
 8001678:	0800ab84 	.word	0x0800ab84
 800167c:	0800ac20 	.word	0x0800ac20

08001680 <url_encode>:

char* url_encode(const char* str) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    const char* hex = "0123456789ABCDEF";
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <url_encode+0xc8>)
 800168a:	613b      	str	r3, [r7, #16]
    char* encoded = malloc(strlen(str) * 3 + 1); // Allocate enough space
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7fe fda9 	bl	80001e4 <strlen>
 8001692:	4602      	mov	r2, r0
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	3301      	adds	r3, #1
 800169c:	4618      	mov	r0, r3
 800169e:	f006 fa79 	bl	8007b94 <malloc>
 80016a2:	4603      	mov	r3, r0
 80016a4:	60fb      	str	r3, [r7, #12]
    char* ptr = encoded;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	617b      	str	r3, [r7, #20]

    while (*str) {
 80016aa:	e040      	b.n	800172e <url_encode+0xae>
        if (isalnum((unsigned char)*str) || *str == '-' || *str == '_' || *str == '.' || *str == '~') {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a26      	ldr	r2, [pc, #152]	; (800174c <url_encode+0xcc>)
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <url_encode+0x60>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b2d      	cmp	r3, #45	; 0x2d
 80016c6:	d00b      	beq.n	80016e0 <url_encode+0x60>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b5f      	cmp	r3, #95	; 0x5f
 80016ce:	d007      	beq.n	80016e0 <url_encode+0x60>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b2e      	cmp	r3, #46	; 0x2e
 80016d6:	d003      	beq.n	80016e0 <url_encode+0x60>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b7e      	cmp	r3, #126	; 0x7e
 80016de:	d106      	bne.n	80016ee <url_encode+0x6e>
            *ptr++ = *str;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	617a      	str	r2, [r7, #20]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e01c      	b.n	8001728 <url_encode+0xa8>
        } else {
            *ptr++ = '%';
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	617a      	str	r2, [r7, #20]
 80016f4:	2225      	movs	r2, #37	; 0x25
 80016f6:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[(*str >> 4) & 0xF];
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	1c59      	adds	r1, r3, #1
 800170c:	6179      	str	r1, [r7, #20]
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	701a      	strb	r2, [r3, #0]
            *ptr++ = hex[*str & 0xF];
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	441a      	add	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1c59      	adds	r1, r3, #1
 8001722:	6179      	str	r1, [r7, #20]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	701a      	strb	r2, [r3, #0]
        }
        str++;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3301      	adds	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
    while (*str) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ba      	bne.n	80016ac <url_encode+0x2c>
    }
    *ptr = '\0';
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
    return encoded;
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	0800ac34 	.word	0x0800ac34
 800174c:	0800b28c 	.word	0x0800b28c

08001750 <user_USART1_UART_Init>:
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

 void user_USART1_UART_Init(void)
 {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */
 ////////////////////
   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <user_USART1_UART_Init+0x58>)
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <user_USART1_UART_Init+0x5c>)
 8001758:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <user_USART1_UART_Init+0x58>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <user_USART1_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <user_USART1_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <user_USART1_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <user_USART1_UART_Init+0x58>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <user_USART1_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <user_USART1_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <user_USART1_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <user_USART1_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <user_USART1_UART_Init+0x58>)
 8001794:	f004 fce0 	bl	8006158 <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <user_USART1_UART_Init+0x52>
   {
     Error_Handler();
 800179e:	f000 fc7a 	bl	8002096 <Error_Handler>
   }

 }
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000208 	.word	0x20000208
 80017ac:	40013800 	.word	0x40013800

080017b0 <user_GPIO_Init>:

 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
 80017bc:	4613      	mov	r3, r2
 80017be:	707b      	strb	r3, [r7, #1]
 //  GPIO_InitTypeDef GPIO_InitStruct = {0};
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <user_GPIO_Init+0xac>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	4a25      	ldr	r2, [pc, #148]	; (800185c <user_GPIO_Init+0xac>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <user_GPIO_Init+0xac>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <user_GPIO_Init+0xac>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <user_GPIO_Init+0xac>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <user_GPIO_Init+0xac>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <user_GPIO_Init+0xac>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <user_GPIO_Init+0xac>)
 80017f6:	f043 0302 	orr.w	r3, r3, #2
 80017fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <user_GPIO_Init+0xac>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8001808:	787a      	ldrb	r2, [r7, #1]
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f002 fcea 	bl	80041e8 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <user_GPIO_Init+0x78>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 800181a:	787a      	ldrb	r2, [r7, #1]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f81f 	bl	8001864 <gpio_output>
 8001826:	e008      	b.n	800183a <user_GPIO_Init+0x8a>
     }
     else if(PIN_mode == INPUT)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d105      	bne.n	800183a <user_GPIO_Init+0x8a>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 800182e:	787a      	ldrb	r2, [r7, #1]
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f837 	bl	80018a8 <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
  // GPIO_InitStruct.Pin = VCP_RX_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <user_GPIO_Init+0xb0>)
 800183c:	2202      	movs	r2, #2
 800183e:	605a      	str	r2, [r3, #4]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <user_GPIO_Init+0xb0>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <user_GPIO_Init+0xb0>)
 8001848:	2203      	movs	r2, #3
 800184a:	60da      	str	r2, [r3, #12]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <user_GPIO_Init+0xb0>)
 800184e:	2203      	movs	r2, #3
 8001850:	611a      	str	r2, [r3, #16]
   //HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	200003d8 	.word	0x200003d8

08001864 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f002 fb22 	bl	8003ee4 <HAL_GPIO_Init>
 }
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f002 fb02 	bl	8003ee4 <HAL_GPIO_Init>
 }
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <data_receive>:
  /* USER CODE END MX_GPIO_Init_2 */
  }


 void data_receive()
 {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	 HAL_UART_Receive(&huart1,(uint8_t *)buffer,20,1000);
 80018ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f0:	2214      	movs	r2, #20
 80018f2:	4903      	ldr	r1, [pc, #12]	; (8001900 <data_receive+0x18>)
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <data_receive+0x1c>)
 80018f6:	f004 fd11 	bl	800631c <HAL_UART_Receive>
 }
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200001fc 	.word	0x200001fc
 8001904:	20000208 	.word	0x20000208

08001908 <status_transmit>:

 void status_transmit()
 {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	 HAL_UART_Transmit(&huart1, (uint8_t *)A, 4,1000);
 800190c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001910:	2204      	movs	r2, #4
 8001912:	4903      	ldr	r1, [pc, #12]	; (8001920 <status_transmit+0x18>)
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <status_transmit+0x1c>)
 8001916:	f004 fc6d 	bl	80061f4 <HAL_UART_Transmit>
 }
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002a4 	.word	0x200002a4
 8001924:	20000208 	.word	0x20000208

08001928 <read_gpio>:

 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4619      	mov	r1, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f002 fc3d 	bl	80041b8 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0

 }
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <write_gpio>:

 void write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8001958:	787a      	ldrb	r2, [r7, #1]
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f002 fc42 	bl	80041e8 <HAL_GPIO_WritePin>

 }
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <User_SystemClock_Config>:
#include "application_RTC.h"
#include "ssd1306.h"
extern I2C_HandleTypeDef hi2c1;

void User_SystemClock_Config(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b096      	sub	sp, #88	; 0x58
 8001970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2244      	movs	r2, #68	; 0x44
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f006 f928 	bl	8007bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800198e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001992:	f003 fa5b 	bl	8004e4c <HAL_PWREx_ControlVoltageScaling>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <User_SystemClock_Config+0x34>
  {
    Error_Handler();
 800199c:	f000 fb7b 	bl	8002096 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019a0:	f003 fa36 	bl	8004e10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <User_SystemClock_Config+0xc0>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <User_SystemClock_Config+0xc0>)
 80019ac:	f023 0318 	bic.w	r3, r3, #24
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80019b4:	2314      	movs	r3, #20
 80019b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019bc:	2301      	movs	r3, #1
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019c4:	2360      	movs	r3, #96	; 0x60
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	2302      	movs	r3, #2
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019cc:	2301      	movs	r3, #1
 80019ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80019d4:	2310      	movs	r3, #16
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019d8:	2307      	movs	r3, #7
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fa85 	bl	8004ef8 <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <User_SystemClock_Config+0x8c>
  {
    Error_Handler();
 80019f4:	f000 fb4f 	bl	8002096 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f8:	230f      	movs	r3, #15
 80019fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fc:	2303      	movs	r3, #3
 80019fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fe85 	bl	8005720 <HAL_RCC_ClockConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <User_SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a1c:	f000 fb3b 	bl	8002096 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a20:	f004 fa98 	bl	8005f54 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a24:	bf00      	nop
 8001a26:	3758      	adds	r7, #88	; 0x58
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000

08001a30 <USER_I2C1_Init>:


void USER_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <USER_I2C1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <USER_I2C1_Init+0x7c>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a6c:	f002 fbd4 	bl	8004218 <HAL_I2C_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <USER_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f000 fb0e 	bl	8002096 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a7e:	f003 f92f 	bl	8004ce0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <USER_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a88:	f000 fb05 	bl	8002096 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <USER_I2C1_Init+0x74>)
 8001a90:	f003 f971 	bl	8004d76 <HAL_I2CEx_ConfigDigitalFilter>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <USER_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 fafc 	bl	8002096 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000658 	.word	0x20000658
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	00707cbb 	.word	0x00707cbb

08001ab0 <I2C_Write>:


// Generic I2C write function
void I2C_Write(I2C_HandleTypeDef *hi2c, uint16_t device_address, uint16_t mem_address, uint8_t mem_address_size, uint8_t *data, size_t data_size, uint32_t timeout)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	817b      	strh	r3, [r7, #10]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	813b      	strh	r3, [r7, #8]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(hi2c, device_address, mem_address, mem_address_size, data, data_size, timeout);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	b29c      	uxth	r4, r3
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	8938      	ldrh	r0, [r7, #8]
 8001ad4:	8979      	ldrh	r1, [r7, #10]
 8001ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad8:	9202      	str	r2, [sp, #8]
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f002 fc27 	bl	8004338 <HAL_I2C_Mem_Write>
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}
	...

08001af4 <I2C_read>:

//read function for RTC
void I2C_read(uint8_t *data)
   {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af04      	add	r7, sp, #16
 8001afa:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, DS3107_ADDRESS, 0x00, 1, data, 7, 1000);
 8001afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2307      	movs	r3, #7
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	21d0      	movs	r1, #208	; 0xd0
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <I2C_read+0x2c>)
 8001b12:	f002 fd25 	bl	8004560 <HAL_I2C_Mem_Read>
   }
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000658 	.word	0x20000658

08001b24 <USER_ADC1_Init>:
//  HAL_RCCEx_EnableMSIPLLMode();
//}


 void USER_ADC1_Init(void)
 {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN ADC1_Init 0 */
 //
   /* USER CODE END ADC1_Init 0 */

   ADC_ChannelConfTypeDef sConfig = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]
 //
   /* USER CODE END ADC1_Init 1 */

   /** Common config
   */
   hadc1.Instance = ADC1;
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b3c:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <USER_ADC1_Init+0xc0>)
 8001b3e:	601a      	str	r2, [r3, #0]
   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	615a      	str	r2, [r3, #20]
   hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	761a      	strb	r2, [r3, #24]
   hadc1.Init.ContinuousConvMode = DISABLE;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	765a      	strb	r2, [r3, #25]
   hadc1.Init.NbrOfConversion = 1;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	61da      	str	r2, [r3, #28]
   hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2020 	strb.w	r2, [r3, #32]
   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
   hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34
   hadc1.Init.OversamplingMode = DISABLE;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b9a:	4811      	ldr	r0, [pc, #68]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001b9c:	f000 ffa8 	bl	8002af0 <HAL_ADC_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <USER_ADC1_Init+0x86>
   {
     Error_Handler();
 8001ba6:	f000 fa76 	bl	8002096 <Error_Handler>
   }

   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_5;
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <USER_ADC1_Init+0xc4>)
 8001bac:	603b      	str	r3, [r7, #0]
   sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bae:	2306      	movs	r3, #6
 8001bb0:	607b      	str	r3, [r7, #4]
   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bb6:	237f      	movs	r3, #127	; 0x7f
 8001bb8:	60fb      	str	r3, [r7, #12]
   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	613b      	str	r3, [r7, #16]
   sConfig.Offset = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	; (8001be0 <USER_ADC1_Init+0xbc>)
 8001bc8:	f001 fb64 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <USER_ADC1_Init+0xb2>
   {
     Error_Handler();
 8001bd2:	f000 fa60 	bl	8002096 <Error_Handler>
   }
   /* USER CODE BEGIN ADC1_Init 2 */
 //
   /* USER CODE END ADC1_Init 2 */

 }
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200005f4 	.word	0x200005f4
 8001be4:	50040000 	.word	0x50040000
 8001be8:	14f00020 	.word	0x14f00020

08001bec <adc_value>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

int adc_value(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
return	HAL_ADC_GetValue(&hadc1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <adc_value+0x10>)
 8001bf2:	f001 f97a 	bl	8002eea <HAL_ADC_GetValue>
 8001bf6:	4603      	mov	r3, r0

}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200005f4 	.word	0x200005f4

08001c00 <ssd1306_Reset>:
#include "common_RTC.h"


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <ssd1306_WriteCommand>:

 //Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af04      	add	r7, sp, #16
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	2301      	movs	r3, #1
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2178      	movs	r1, #120	; 0x78
 8001c2e:	4803      	ldr	r0, [pc, #12]	; (8001c3c <ssd1306_WriteCommand+0x2c>)
 8001c30:	f7ff ff3e 	bl	8001ab0 <I2C_Write>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000658 	.word	0x20000658

08001c40 <ssd1306_WriteData>:


// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    I2C_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	2178      	movs	r1, #120	; 0x78
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <ssd1306_WriteData+0x2c>)
 8001c60:	f7ff ff26 	bl	8001ab0 <I2C_Write>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000658 	.word	0x20000658

08001c70 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c74:	f7ff ffc4 	bl	8001c00 <ssd1306_Reset>

    // Wait for the screen to boot
//    HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f000 f9d9 	bl	8002030 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c7e:	2020      	movs	r0, #32
 8001c80:	f7ff ffc6 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff ffc3 	bl	8001c10 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c8a:	20b0      	movs	r0, #176	; 0xb0
 8001c8c:	f7ff ffc0 	bl	8001c10 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c90:	20c8      	movs	r0, #200	; 0xc8
 8001c92:	f7ff ffbd 	bl	8001c10 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff ffba 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c9c:	2010      	movs	r0, #16
 8001c9e:	f7ff ffb7 	bl	8001c10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001ca2:	2040      	movs	r0, #64	; 0x40
 8001ca4:	f7ff ffb4 	bl	8001c10 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001ca8:	20ff      	movs	r0, #255	; 0xff
 8001caa:	f000 f9ad 	bl	8002008 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001cae:	20a1      	movs	r0, #161	; 0xa1
 8001cb0:	f7ff ffae 	bl	8001c10 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001cb4:	20a6      	movs	r0, #166	; 0xa6
 8001cb6:	f7ff ffab 	bl	8001c10 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001cba:	20a8      	movs	r0, #168	; 0xa8
 8001cbc:	f7ff ffa8 	bl	8001c10 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001cc0:	201f      	movs	r0, #31
 8001cc2:	f7ff ffa5 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cc6:	20a4      	movs	r0, #164	; 0xa4
 8001cc8:	f7ff ffa2 	bl	8001c10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001ccc:	20d3      	movs	r0, #211	; 0xd3
 8001cce:	f7ff ff9f 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff ff9c 	bl	8001c10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001cd8:	20d5      	movs	r0, #213	; 0xd5
 8001cda:	f7ff ff99 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001cde:	20f0      	movs	r0, #240	; 0xf0
 8001ce0:	f7ff ff96 	bl	8001c10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ce4:	20d9      	movs	r0, #217	; 0xd9
 8001ce6:	f7ff ff93 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cea:	2022      	movs	r0, #34	; 0x22
 8001cec:	f7ff ff90 	bl	8001c10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cf0:	20da      	movs	r0, #218	; 0xda
 8001cf2:	f7ff ff8d 	bl	8001c10 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f7ff ff8a 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cfc:	20db      	movs	r0, #219	; 0xdb
 8001cfe:	f7ff ff87 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d02:	2020      	movs	r0, #32
 8001d04:	f7ff ff84 	bl	8001c10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d08:	208d      	movs	r0, #141	; 0x8d
 8001d0a:	f7ff ff81 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d0e:	2014      	movs	r0, #20
 8001d10:	f7ff ff7e 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d14:	2001      	movs	r0, #1
 8001d16:	f000 f98b 	bl	8002030 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 f810 	bl	8001d40 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001d20:	f000 f826 	bl	8001d70 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <ssd1306_Init+0xcc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <ssd1306_Init+0xcc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <ssd1306_Init+0xcc>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	711a      	strb	r2, [r3, #4]
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200005ec 	.word	0x200005ec

08001d40 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <ssd1306_Fill+0x14>
 8001d50:	2300      	movs	r3, #0
 8001d52:	e000      	b.n	8001d56 <ssd1306_Fill+0x16>
 8001d54:	23ff      	movs	r3, #255	; 0xff
 8001d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <ssd1306_Fill+0x2c>)
 8001d5e:	f005 ff37 	bl	8007bd0 <memset>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200003ec 	.word	0x200003ec

08001d70 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	e016      	b.n	8001daa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	3b50      	subs	r3, #80	; 0x50
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff44 	bl	8001c10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ff41 	bl	8001c10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d8e:	2010      	movs	r0, #16
 8001d90:	f7ff ff3e 	bl	8001c10 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	01db      	lsls	r3, r3, #7
 8001d98:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <ssd1306_UpdateScreen+0x4c>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff4e 	bl	8001c40 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	3301      	adds	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d9e5      	bls.n	8001d7c <ssd1306_UpdateScreen+0xc>
    }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200003ec 	.word	0x200003ec

08001dc0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	71bb      	strb	r3, [r7, #6]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db3d      	blt.n	8001e56 <ssd1306_DrawPixel+0x96>
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	2b1f      	cmp	r3, #31
 8001dde:	d83a      	bhi.n	8001e56 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001de0:	797b      	ldrb	r3, [r7, #5]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d11a      	bne.n	8001e1c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	79bb      	ldrb	r3, [r7, #6]
 8001dea:	08db      	lsrs	r3, r3, #3
 8001dec:	b2d8      	uxtb	r0, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	01db      	lsls	r3, r3, #7
 8001df2:	4413      	add	r3, r2
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <ssd1306_DrawPixel+0xa4>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	b25a      	sxtb	r2, r3
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b259      	sxtb	r1, r3
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	01db      	lsls	r3, r3, #7
 8001e12:	4413      	add	r3, r2
 8001e14:	b2c9      	uxtb	r1, r1
 8001e16:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <ssd1306_DrawPixel+0xa4>)
 8001e18:	54d1      	strb	r1, [r2, r3]
 8001e1a:	e01d      	b.n	8001e58 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	79bb      	ldrb	r3, [r7, #6]
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	b2d8      	uxtb	r0, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	01db      	lsls	r3, r3, #7
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <ssd1306_DrawPixel+0xa4>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	b25a      	sxtb	r2, r3
 8001e30:	79bb      	ldrb	r3, [r7, #6]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	4013      	ands	r3, r2
 8001e44:	b259      	sxtb	r1, r3
 8001e46:	79fa      	ldrb	r2, [r7, #7]
 8001e48:	4603      	mov	r3, r0
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b2c9      	uxtb	r1, r1
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <ssd1306_DrawPixel+0xa4>)
 8001e52:	54d1      	strb	r1, [r2, r3]
 8001e54:	e000      	b.n	8001e58 <ssd1306_DrawPixel+0x98>
        return;
 8001e56:	bf00      	nop
    }
}
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200003ec 	.word	0x200003ec

08001e68 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4638      	mov	r0, r7
 8001e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e76:	4623      	mov	r3, r4
 8001e78:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b1f      	cmp	r3, #31
 8001e7e:	d902      	bls.n	8001e86 <ssd1306_WriteChar+0x1e>
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b7e      	cmp	r3, #126	; 0x7e
 8001e84:	d901      	bls.n	8001e8a <ssd1306_WriteChar+0x22>
        return 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e079      	b.n	8001f7e <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	783b      	ldrb	r3, [r7, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	dc06      	bgt.n	8001ea6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e98:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	dd01      	ble.n	8001eaa <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e069      	b.n	8001f7e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e04e      	b.n	8001f4e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	3b20      	subs	r3, #32
 8001eb6:	7879      	ldrb	r1, [r7, #1]
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e036      	b.n	8001f3e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ee0:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b2d8      	uxtb	r0, r3
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001ef0:	885b      	ldrh	r3, [r3, #2]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <ssd1306_DrawPixel>
 8001f06:	e017      	b.n	8001f38 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	b2d8      	uxtb	r0, r3
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001f18:	885b      	ldrh	r3, [r3, #2]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b2d9      	uxtb	r1, r3
 8001f24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	f7ff ff44 	bl	8001dc0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	783b      	ldrb	r3, [r7, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d3c3      	bcc.n	8001ed0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	787b      	ldrb	r3, [r7, #1]
 8001f50:	461a      	mov	r2, r3
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d3ab      	bcc.n	8001eb0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <ssd1306_WriteChar+0x108>
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	3b20      	subs	r3, #32
 8001f68:	440b      	add	r3, r1
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	e001      	b.n	8001f74 <ssd1306_WriteChar+0x10c>
 8001f70:	783b      	ldrb	r3, [r7, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <ssd1306_WriteChar+0x120>)
 8001f7a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200005ec 	.word	0x200005ec

08001f8c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	4638      	mov	r0, r7
 8001f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f9a:	e013      	b.n	8001fc4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	7818      	ldrb	r0, [r3, #0]
 8001fa0:	7e3b      	ldrb	r3, [r7, #24]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa8:	f7ff ff5e 	bl	8001e68 <ssd1306_WriteChar>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d002      	beq.n	8001fbe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	e008      	b.n	8001fd0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e7      	bne.n	8001f9c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	781b      	ldrb	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <ssd1306_SetCursor+0x2c>)
 8001fee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <ssd1306_SetCursor+0x2c>)
 8001ff6:	805a      	strh	r2, [r3, #2]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	200005ec 	.word	0x200005ec

08002008 <ssd1306_SetContrast>:
//        }
//    }
//    return;
//}

void ssd1306_SetContrast(const uint8_t value) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002012:	2381      	movs	r3, #129	; 0x81
 8002014:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fdf9 	bl	8001c10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fdf5 	bl	8001c10 <ssd1306_WriteCommand>
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002040:	23af      	movs	r3, #175	; 0xaf
 8002042:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <ssd1306_SetDisplayOn+0x38>)
 8002046:	2201      	movs	r2, #1
 8002048:	715a      	strb	r2, [r3, #5]
 800204a:	e004      	b.n	8002056 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800204c:	23ae      	movs	r3, #174	; 0xae
 800204e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <ssd1306_SetDisplayOn+0x38>)
 8002052:	2200      	movs	r2, #0
 8002054:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fdd9 	bl	8001c10 <ssd1306_WriteCommand>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200005ec 	.word	0x200005ec

0800206c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002070:	f000 faef 	bl	8002652 <HAL_Init>
//  MX_I2C1_Init();
//  MX_ADC1_Init();
//  MX_USART1_UART_Init();
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  User_SystemClock_Config();
 8002074:	f7ff fc7a 	bl	800196c <User_SystemClock_Config>
  USER_ADC1_Init();
 8002078:	f7ff fd54 	bl	8001b24 <USER_ADC1_Init>
  USER_I2C1_Init();
 800207c:	f7ff fcd8 	bl	8001a30 <USER_I2C1_Init>
  ssd1306_Init();
 8002080:	f7ff fdf6 	bl	8001c70 <ssd1306_Init>
  //gsm data

  user_USART1_UART_Init();
 8002084:	f7ff fb64 	bl	8001750 <user_USART1_UART_Init>
    UART2_Init();
 8002088:	f7ff fa42 	bl	8001510 <UART2_Init>
    Gsm_Init();			// 8sec; // 200ms;
 800208c:	f7ff fa8c 	bl	80015a8 <Gsm_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  app();
 8002090:	f7ff f9ce 	bl	8001430 <app>
 8002094:	e7fc      	b.n	8002090 <main+0x24>

08002096 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209a:	b672      	cpsid	i
}
 800209c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209e:	e7fe      	b.n	800209e <Error_Handler+0x8>

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_MspInit+0x44>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_MspInit+0x44>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6613      	str	r3, [r2, #96]	; 0x60
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_MspInit+0x44>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_MspInit+0x44>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_MspInit+0x44>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_MspInit+0x44>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b09e      	sub	sp, #120	; 0x78
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	2254      	movs	r2, #84	; 0x54
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f005 fd61 	bl	8007bd0 <memset>
  if(hadc->Instance==ADC1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <HAL_ADC_MspInit+0xd0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d14b      	bne.n	80021b0 <HAL_ADC_MspInit+0xc8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800211c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800211e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002122:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002124:	2301      	movs	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800212c:	2310      	movs	r3, #16
 800212e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002130:	2307      	movs	r3, #7
 8002132:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002134:	2302      	movs	r3, #2
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800213c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4618      	mov	r0, r3
 8002148:	f003 fd0e 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002152:	f7ff ffa0 	bl	8002096 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_ADC_MspInit+0xd4>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_ADC_MspInit+0xd4>)
 800215c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_ADC_MspInit+0xd4>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_ADC_MspInit+0xd4>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_ADC_MspInit+0xd4>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_ADC_MspInit+0xd4>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002186:	2301      	movs	r3, #1
 8002188:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800218a:	230b      	movs	r3, #11
 800218c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219c:	f001 fea2 	bl	8003ee4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	2012      	movs	r0, #18
 80021a6:	f001 fde8 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80021aa:	2012      	movs	r0, #18
 80021ac:	f001 fe01 	bl	8003db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021b0:	bf00      	nop
 80021b2:	3778      	adds	r7, #120	; 0x78
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	50040000 	.word	0x50040000
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b09e      	sub	sp, #120	; 0x78
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	2254      	movs	r2, #84	; 0x54
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f005 fcf5 	bl	8007bd0 <memset>
  if(hi2c->Instance==I2C1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <HAL_I2C_MspInit+0xa4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d135      	bne.n	800225c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021f0:	2340      	movs	r3, #64	; 0x40
 80021f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fcb3 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002208:	f7ff ff45 	bl	8002096 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_I2C_MspInit+0xa8>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_I2C_MspInit+0xa8>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_I2C_MspInit+0xa8>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002224:	23c0      	movs	r3, #192	; 0xc0
 8002226:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002228:	2312      	movs	r3, #18
 800222a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002234:	2304      	movs	r3, #4
 8002236:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800223c:	4619      	mov	r1, r3
 800223e:	480b      	ldr	r0, [pc, #44]	; (800226c <HAL_I2C_MspInit+0xac>)
 8002240:	f001 fe50 	bl	8003ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_I2C_MspInit+0xa8>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_I2C_MspInit+0xa8>)
 800224a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800224e:	6593      	str	r3, [r2, #88]	; 0x58
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_I2C_MspInit+0xa8>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3778      	adds	r7, #120	; 0x78
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40005400 	.word	0x40005400
 8002268:	40021000 	.word	0x40021000
 800226c:	48000400 	.word	0x48000400

08002270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b0a0      	sub	sp, #128	; 0x80
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002288:	f107 0318 	add.w	r3, r7, #24
 800228c:	2254      	movs	r2, #84	; 0x54
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fc9d 	bl	8007bd0 <memset>
  if(huart->Instance==USART1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a46      	ldr	r2, [pc, #280]	; (80023b4 <HAL_UART_MspInit+0x144>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d140      	bne.n	8002322 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fc5b 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022b8:	f7ff feed 	bl	8002096 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_UART_MspInit+0x148>)
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <HAL_UART_MspInit+0x148>)
 80022c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c6:	6613      	str	r3, [r2, #96]	; 0x60
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_UART_MspInit+0x148>)
 80022ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_UART_MspInit+0x148>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <HAL_UART_MspInit+0x148>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e0:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <HAL_UART_MspInit+0x148>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022fe:	2307      	movs	r3, #7
 8002300:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002306:	4619      	mov	r1, r3
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230c:	f001 fdea 	bl	8003ee4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2025      	movs	r0, #37	; 0x25
 8002316:	f001 fd30 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800231a:	2025      	movs	r0, #37	; 0x25
 800231c:	f001 fd49 	bl	8003db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002320:	e043      	b.n	80023aa <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_UART_MspInit+0x14c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d13e      	bne.n	80023aa <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002334:	f107 0318 	add.w	r3, r7, #24
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fc15 	bl	8005b68 <HAL_RCCEx_PeriphCLKConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002344:	f7ff fea7 	bl	8002096 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_UART_MspInit+0x148>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_UART_MspInit+0x148>)
 800234e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_UART_MspInit+0x148>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_UART_MspInit+0x148>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <HAL_UART_MspInit+0x148>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_UART_MspInit+0x148>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002378:	230c      	movs	r3, #12
 800237a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002388:	2307      	movs	r3, #7
 800238a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002396:	f001 fda5 	bl	8003ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2026      	movs	r0, #38	; 0x26
 80023a0:	f001 fceb 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023a4:	2026      	movs	r0, #38	; 0x26
 80023a6:	f001 fd04 	bl	8003db2 <HAL_NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3780      	adds	r7, #128	; 0x80
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40004400 	.word	0x40004400

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <NMI_Handler+0x4>

080023c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <MemManage_Handler+0x4>

080023d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <UsageFault_Handler+0x4>

080023de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240c:	f000 f976 	bl	80026fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <ADC1_IRQHandler+0x10>)
 800241a:	f000 fd73 	bl	8002f04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200005f4 	.word	0x200005f4

08002428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <USART1_IRQHandler+0x10>)
 800242e:	f004 f90b 	bl	8006648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000208 	.word	0x20000208

0800243c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <USART2_IRQHandler+0x10>)
 8002442:	f004 f901 	bl	8006648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000354 	.word	0x20000354

08002450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_kill>:

int _kill(int pid, int sig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800246a:	f005 fb69 	bl	8007b40 <__errno>
 800246e:	4603      	mov	r3, r0
 8002470:	2216      	movs	r2, #22
 8002472:	601a      	str	r2, [r3, #0]
  return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_exit>:

void _exit (int status)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ffe7 	bl	8002460 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002492:	e7fe      	b.n	8002492 <_exit+0x12>

08002494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e00a      	b.n	80024bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a6:	f3af 8000 	nop.w
 80024aa:	4601      	mov	r1, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	60ba      	str	r2, [r7, #8]
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	dbf0      	blt.n	80024a6 <_read+0x12>
  }

  return len;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e009      	b.n	80024f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf1      	blt.n	80024e0 <_write+0x12>
  }
  return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_close>:

int _close(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252e:	605a      	str	r2, [r3, #4]
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_isatty>:

int _isatty(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f005 face 	bl	8007b40 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20010000 	.word	0x20010000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	200006ac 	.word	0x200006ac
 80025d8:	200006c8 	.word	0x200006c8

080025dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <SystemInit+0x20>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <SystemInit+0x20>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002604:	f7ff ffea 	bl	80025dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <LoopForever+0x6>)
  ldr r1, =_edata
 800260a:	490d      	ldr	r1, [pc, #52]	; (8002640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <LoopForever+0xe>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002620:	4c0a      	ldr	r4, [pc, #40]	; (800264c <LoopForever+0x16>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262e:	f005 fa8d 	bl	8007b4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002632:	f7ff fd1b 	bl	800206c <main>

08002636 <LoopForever>:

LoopForever:
    b LoopForever
 8002636:	e7fe      	b.n	8002636 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002638:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002644:	0800b6dc 	.word	0x0800b6dc
  ldr r2, =_sbss
 8002648:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800264c:	200006c4 	.word	0x200006c4

08002650 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <CAN1_RX0_IRQHandler>

08002652 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265c:	2003      	movs	r0, #3
 800265e:	f001 fb81 	bl	8003d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002662:	2000      	movs	r0, #0
 8002664:	f000 f80e 	bl	8002684 <HAL_InitTick>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	e001      	b.n	8002678 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002674:	f7ff fd14 	bl	80020a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002678:	79fb      	ldrb	r3, [r7, #7]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002690:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_InitTick+0x6c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_InitTick+0x70>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_InitTick+0x6c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 fb8d 	bl	8003dce <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d809      	bhi.n	80026d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f001 fb57 	bl	8003d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_InitTick+0x74>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e007      	b.n	80026e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e004      	b.n	80026e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e001      	b.n	80026e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000008 	.word	0x20000008
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x20>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_IncTick+0x24>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000008 	.word	0x20000008
 8002720:	200006b0 	.word	0x200006b0

08002724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	200006b0 	.word	0x200006b0

0800273c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	609a      	str	r2, [r3, #8]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3360      	adds	r3, #96	; 0x60
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <LL_ADC_SetOffset+0x44>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	03fff000 	.word	0x03fff000

080027ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3360      	adds	r3, #96	; 0x60
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3330      	adds	r3, #48	; 0x30
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	211f      	movs	r1, #31
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	401a      	ands	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	f003 011f 	and.w	r1, r3, #31
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	431a      	orrs	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b087      	sub	sp, #28
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3314      	adds	r3, #20
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0e5b      	lsrs	r3, r3, #25
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0d1b      	lsrs	r3, r3, #20
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2107      	movs	r1, #7
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0d1b      	lsrs	r3, r3, #20
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	431a      	orrs	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0318 	and.w	r3, r3, #24
 800296a:	4908      	ldr	r1, [pc, #32]	; (800298c <LL_ADC_SetChannelSingleDiff+0x44>)
 800296c:	40d9      	lsrs	r1, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	400b      	ands	r3, r1
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	431a      	orrs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	0007ffff 	.word	0x0007ffff

08002990 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6093      	str	r3, [r2, #8]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d101      	bne.n	80029ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a18:	d101      	bne.n	8002a1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <LL_ADC_IsEnabled+0x18>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <LL_ADC_IsEnabled+0x1a>
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d101      	bne.n	8002aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d101      	bne.n	8002ae0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e12c      	b.n	8002d64 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fae5 	bl	80020e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff3f 	bl	80029b4 <LL_ADC_IsDeepPowerDownEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff25 	bl	8002990 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff5a 	bl	8002a04 <LL_ADC_IsInternalRegulatorEnabled>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d115      	bne.n	8002b82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff3e 	bl	80029dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b60:	4b82      	ldr	r3, [pc, #520]	; (8002d6c <HAL_ADC_Init+0x27c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	4a82      	ldr	r2, [pc, #520]	; (8002d70 <HAL_ADC_Init+0x280>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b74:	e002      	b.n	8002b7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f9      	bne.n	8002b76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff3c 	bl	8002a04 <LL_ADC_IsInternalRegulatorEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff ff75 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002bb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 80c5 	bne.w	8002d52 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 80c1 	bne.w	8002d52 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bd8:	f043 0202 	orr.w	r2, r3, #2
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff35 	bl	8002a54 <LL_ADC_IsEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf0:	4860      	ldr	r0, [pc, #384]	; (8002d74 <HAL_ADC_Init+0x284>)
 8002bf2:	f7ff ff2f 	bl	8002a54 <LL_ADC_IsEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4619      	mov	r1, r3
 8002c02:	485d      	ldr	r0, [pc, #372]	; (8002d78 <HAL_ADC_Init+0x288>)
 8002c04:	f7ff fd9a 	bl	800273c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7e5b      	ldrb	r3, [r3, #25]
 8002c0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c12:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c26:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d106      	bne.n	8002c44 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	045b      	lsls	r3, r3, #17
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <HAL_ADC_Init+0x28c>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff12 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002c7e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff1f 	bl	8002ac8 <LL_ADC_INJ_IsConversionOngoing>
 8002c8a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d13d      	bne.n	8002d0e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d13a      	bne.n	8002d0e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c9c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ca4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb4:	f023 0302 	bic.w	r3, r3, #2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	69b9      	ldr	r1, [r7, #24]
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d118      	bne.n	8002cfe <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cd6:	f023 0304 	bic.w	r3, r3, #4
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	611a      	str	r2, [r3, #16]
 8002cfc:	e007      	b.n	8002d0e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d10c      	bne.n	8002d30 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f023 010f 	bic.w	r1, r3, #15
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	1e5a      	subs	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d2e:	e007      	b.n	8002d40 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 020f 	bic.w	r2, r2, #15
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f023 0303 	bic.w	r3, r3, #3
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
 8002d50:	e007      	b.n	8002d62 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f043 0210 	orr.w	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	053e2d63 	.word	0x053e2d63
 8002d74:	50040000 	.word	0x50040000
 8002d78:	50040300 	.word	0x50040300
 8002d7c:	fff0c007 	.word	0xfff0c007

08002d80 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fe88 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 80a1 	bne.w	8002edc <HAL_ADC_Start_IT+0x15c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_Start_IT+0x28>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e09c      	b.n	8002ee2 <HAL_ADC_Start_IT+0x162>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fe4f 	bl	8003a54 <ADC_Enable>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 8088 	bne.w	8002ed2 <HAL_ADC_Start_IT+0x152>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de6:	f023 0206 	bic.w	r2, r3, #6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	659a      	str	r2, [r3, #88]	; 0x58
 8002dee:	e002      	b.n	8002df6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	221c      	movs	r2, #28
 8002dfc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 021c 	bic.w	r2, r2, #28
 8002e14:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d108      	bne.n	8002e30 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0208 	orr.w	r2, r2, #8
 8002e2c:	605a      	str	r2, [r3, #4]
          break;
 8002e2e:	e008      	b.n	8002e42 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0204 	orr.w	r2, r2, #4
 8002e3e:	605a      	str	r2, [r3, #4]
          break;
 8002e40:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0210 	orr.w	r2, r2, #16
 8002e58:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02d      	beq.n	8002ec4 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d110      	bne.n	8002ea2 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0220 	bic.w	r2, r2, #32
 8002e8e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9e:	605a      	str	r2, [r3, #4]
            break;
 8002ea0:	e011      	b.n	8002ec6 <HAL_ADC_Start_IT+0x146>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb0:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0220 	orr.w	r2, r2, #32
 8002ec0:	605a      	str	r2, [r3, #4]
            break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_ADC_Start_IT+0x146>
        }
      }
 8002ec4:	bf00      	nop

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fdd5 	bl	8002a7a <LL_ADC_REG_StartConversion>
 8002ed0:	e006      	b.n	8002ee0 <HAL_ADC_Start_IT+0x160>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002eda:	e001      	b.n	8002ee0 <HAL_ADC_Start_IT+0x160>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
 8002ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d017      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x56>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fe2f 	bl	8003bb0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2202      	movs	r2, #2
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_IRQHandler+0x6a>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d05e      	beq.n	8003036 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d059      	beq.n	8003036 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fc55 	bl	800284e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03e      	beq.n	8003028 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d135      	bne.n	8003028 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d12e      	bne.n	8003028 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fd67 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11a      	bne.n	8003010 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 020c 	bic.w	r2, r2, #12
 8002fe8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d112      	bne.n	8003028 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
 800300e:	e00b      	b.n	8003028 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fe f993 	bl	8001354 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	220c      	movs	r2, #12
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_ADC_IRQHandler+0x146>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003050:	2b00      	cmp	r3, #0
 8003052:	d072      	beq.n	800313a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d06d      	beq.n	800313a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fc26 	bl	80028cc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003080:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fbe1 	bl	800284e <LL_ADC_REG_IsTriggerSourceSWStart>
 800308c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d047      	beq.n	800312c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_ADC_IRQHandler+0x1b2>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d03f      	beq.n	800312c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d13a      	bne.n	800312c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d133      	bne.n	800312c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d12e      	bne.n	800312c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fcf8 	bl	8002ac8 <LL_ADC_INJ_IsConversionOngoing>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11a      	bne.n	8003114 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
 8003112:	e00b      	b.n	800312c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	f043 0210 	orr.w	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	f043 0201 	orr.w	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fd17 	bl	8003b60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2260      	movs	r2, #96	; 0x60
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d011      	beq.n	8003168 <HAL_ADC_IRQHandler+0x264>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f886 	bl	800326c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <HAL_ADC_IRQHandler+0x294>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fcfd 	bl	8003b88 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003196:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x2c4>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fcef 	bl	8003b9c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02a      	beq.n	8003228 <HAL_ADC_IRQHandler+0x324>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d025      	beq.n	8003228 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80031e4:	2301      	movs	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	e008      	b.n	80031fc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80031f8:	2301      	movs	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10e      	bne.n	8003220 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f043 0202 	orr.w	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f830 	bl	8003280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2210      	movs	r2, #16
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <HAL_ADC_IRQHandler+0x360>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f043 0208 	orr.w	r2, r3, #8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fc88 	bl	8003b74 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003264:	bf00      	nop
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0b6      	sub	sp, #216	; 0xd8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x22>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e3b9      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x796>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fbed 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 839e 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d824      	bhi.n	8003322 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	3b02      	subs	r3, #2
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d81b      	bhi.n	800331a <HAL_ADC_ConfigChannel+0x86>
 80032e2:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <HAL_ADC_ConfigChannel+0x54>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	08003301 	.word	0x08003301
 80032f0:	08003309 	.word	0x08003309
 80032f4:	08003311 	.word	0x08003311
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	220c      	movs	r2, #12
 80032fc:	605a      	str	r2, [r3, #4]
          break;
 80032fe:	e011      	b.n	8003324 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2212      	movs	r2, #18
 8003304:	605a      	str	r2, [r3, #4]
          break;
 8003306:	e00d      	b.n	8003324 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2218      	movs	r2, #24
 800330c:	605a      	str	r2, [r3, #4]
          break;
 800330e:	e009      	b.n	8003324 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003316:	605a      	str	r2, [r3, #4]
          break;
 8003318:	e004      	b.n	8003324 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2206      	movs	r2, #6
 800331e:	605a      	str	r2, [r3, #4]
          break;
 8003320:	e000      	b.n	8003324 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003322:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	f7ff fa9f 	bl	8002874 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fbb1 	bl	8002aa2 <LL_ADC_REG_IsConversionOngoing>
 8003340:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fbbd 	bl	8002ac8 <LL_ADC_INJ_IsConversionOngoing>
 800334e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003352:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 81a6 	bne.w	80036a8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800335c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003360:	2b00      	cmp	r3, #0
 8003362:	f040 81a1 	bne.w	80036a8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	461a      	mov	r2, r3
 8003374:	f7ff fabd 	bl	80028f2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	08db      	lsrs	r3, r3, #3
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00a      	beq.n	80033b0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6919      	ldr	r1, [r3, #16]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033aa:	f7ff f9fb 	bl	80027a4 <LL_ADC_SetOffset>
 80033ae:	e17b      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fa18 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x148>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fa0d 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	e01e      	b.n	800341a <HAL_ADC_ConfigChannel+0x186>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fa02 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800340a:	2320      	movs	r3, #32
 800340c:	e004      	b.n	8003418 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800340e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x19e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	e018      	b.n	8003464 <HAL_ADC_ConfigChannel+0x1d0>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800344a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800344e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800345a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003464:	429a      	cmp	r2, r3
 8003466:	d106      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f9d1 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f9b5 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x20e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f9aa 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003498:	4603      	mov	r3, r0
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	e01e      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x24c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f99f 	bl	80027ec <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80034c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e004      	b.n	80034de <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80034d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x264>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	e018      	b.n	800352a <HAL_ADC_ConfigChannel+0x296>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800350c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e004      	b.n	800352a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800352a:	429a      	cmp	r2, r3
 800352c:	d106      	bne.n	800353c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff f96e 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f952 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x2d4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f947 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800355e:	4603      	mov	r3, r0
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	f003 021f 	and.w	r2, r3, #31
 8003566:	e01e      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x312>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2102      	movs	r1, #2
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f93c 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800358a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800358e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003596:	2320      	movs	r3, #32
 8003598:	e004      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800359a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <HAL_ADC_ConfigChannel+0x32a>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	0e9b      	lsrs	r3, r3, #26
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	e016      	b.n	80035ec <HAL_ADC_ConfigChannel+0x358>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80035d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80035d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e004      	b.n	80035ec <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80035e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d106      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f90d 	bl	8002818 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2103      	movs	r1, #3
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff f8f1 	bl	80027ec <LL_ADC_GetOffsetChannel>
 800360a:	4603      	mov	r3, r0
 800360c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10a      	bne.n	800362a <HAL_ADC_ConfigChannel+0x396>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2103      	movs	r1, #3
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f8e6 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003620:	4603      	mov	r3, r0
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	e017      	b.n	800365a <HAL_ADC_ConfigChannel+0x3c6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2103      	movs	r1, #3
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f8db 	bl	80027ec <LL_ADC_GetOffsetChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003644:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e003      	b.n	8003658 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x3de>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	e011      	b.n	8003696 <HAL_ADC_ConfigChannel+0x402>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003682:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e003      	b.n	8003696 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003696:	429a      	cmp	r2, r3
 8003698:	d106      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	2103      	movs	r1, #3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f8b8 	bl	8002818 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff f9d1 	bl	8002a54 <LL_ADC_IsEnabled>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 813f 	bne.w	8003938 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f7ff f93e 	bl	8002948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a8e      	ldr	r2, [pc, #568]	; (800390c <HAL_ADC_ConfigChannel+0x678>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f040 8130 	bne.w	8003938 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x46c>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2b09      	cmp	r3, #9
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e019      	b.n	8003734 <HAL_ADC_ConfigChannel+0x4a0>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800370e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003710:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003718:	2320      	movs	r3, #32
 800371a:	e003      	b.n	8003724 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800371c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3301      	adds	r3, #1
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2b09      	cmp	r3, #9
 800372c:	bf94      	ite	ls
 800372e:	2301      	movls	r3, #1
 8003730:	2300      	movhi	r3, #0
 8003732:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	2b00      	cmp	r3, #0
 8003736:	d079      	beq.n	800382c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x4c0>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	3301      	adds	r3, #1
 800374c:	069b      	lsls	r3, r3, #26
 800374e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003752:	e015      	b.n	8003780 <HAL_ADC_ConfigChannel+0x4ec>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003764:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800376c:	2320      	movs	r3, #32
 800376e:	e003      	b.n	8003778 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	069b      	lsls	r3, r3, #26
 800377c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x50c>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0e9b      	lsrs	r3, r3, #26
 8003792:	3301      	adds	r3, #1
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	e017      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x53c>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80037bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	ea42 0103 	orr.w	r1, r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x562>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0e9b      	lsrs	r3, r3, #26
 80037e6:	3301      	adds	r3, #1
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	051b      	lsls	r3, r3, #20
 80037f4:	e018      	b.n	8003828 <HAL_ADC_ConfigChannel+0x594>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800380e:	2320      	movs	r3, #32
 8003810:	e003      	b.n	800381a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003828:	430b      	orrs	r3, r1
 800382a:	e080      	b.n	800392e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x5b4>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e9b      	lsrs	r3, r3, #26
 800383e:	3301      	adds	r3, #1
 8003840:	069b      	lsls	r3, r3, #26
 8003842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003846:	e015      	b.n	8003874 <HAL_ADC_ConfigChannel+0x5e0>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003860:	2320      	movs	r3, #32
 8003862:	e003      	b.n	800386c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	3301      	adds	r3, #1
 800386e:	069b      	lsls	r3, r3, #26
 8003870:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x600>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0e9b      	lsrs	r3, r3, #26
 8003886:	3301      	adds	r3, #1
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	e017      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x630>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	61fb      	str	r3, [r7, #28]
  return result;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	e003      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	ea42 0103 	orr.w	r1, r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x65c>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0e9b      	lsrs	r3, r3, #26
 80038da:	3301      	adds	r3, #1
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4613      	mov	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	3b1e      	subs	r3, #30
 80038e8:	051b      	lsls	r3, r3, #20
 80038ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ee:	e01d      	b.n	800392c <HAL_ADC_ConfigChannel+0x698>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	613b      	str	r3, [r7, #16]
  return result;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	e005      	b.n	8003918 <HAL_ADC_ConfigChannel+0x684>
 800390c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f003 021f 	and.w	r2, r3, #31
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	3b1e      	subs	r3, #30
 8003926:	051b      	lsls	r3, r3, #20
 8003928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800392c:	430b      	orrs	r3, r1
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	6892      	ldr	r2, [r2, #8]
 8003932:	4619      	mov	r1, r3
 8003934:	f7fe ffdd 	bl	80028f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_ADC_ConfigChannel+0x7a0>)
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d06c      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003944:	483c      	ldr	r0, [pc, #240]	; (8003a38 <HAL_ADC_ConfigChannel+0x7a4>)
 8003946:	f7fe ff1f 	bl	8002788 <LL_ADC_GetCommonPathInternalCh>
 800394a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a3a      	ldr	r2, [pc, #232]	; (8003a3c <HAL_ADC_ConfigChannel+0x7a8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d127      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800395c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d121      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a35      	ldr	r2, [pc, #212]	; (8003a40 <HAL_ADC_ConfigChannel+0x7ac>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d157      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003976:	4619      	mov	r1, r3
 8003978:	482f      	ldr	r0, [pc, #188]	; (8003a38 <HAL_ADC_ConfigChannel+0x7a4>)
 800397a:	f7fe fef2 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_ADC_ConfigChannel+0x7b0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	4a30      	ldr	r2, [pc, #192]	; (8003a48 <HAL_ADC_ConfigChannel+0x7b4>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003998:	e002      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f9      	bne.n	800399a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a6:	e03a      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <HAL_ADC_ConfigChannel+0x7b8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d113      	bne.n	80039da <HAL_ADC_ConfigChannel+0x746>
 80039b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <HAL_ADC_ConfigChannel+0x7ac>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d12a      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d0:	4619      	mov	r1, r3
 80039d2:	4819      	ldr	r0, [pc, #100]	; (8003a38 <HAL_ADC_ConfigChannel+0x7a4>)
 80039d4:	f7fe fec5 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d8:	e021      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <HAL_ADC_ConfigChannel+0x7bc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d11c      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d116      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_ADC_ConfigChannel+0x7ac>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d111      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a02:	4619      	mov	r1, r3
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <HAL_ADC_ConfigChannel+0x7a4>)
 8003a06:	f7fe feac 	bl	8002762 <LL_ADC_SetCommonPathInternalCh>
 8003a0a:	e008      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	37d8      	adds	r7, #216	; 0xd8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	80080000 	.word	0x80080000
 8003a38:	50040300 	.word	0x50040300
 8003a3c:	c7520000 	.word	0xc7520000
 8003a40:	50040000 	.word	0x50040000
 8003a44:	20000000 	.word	0x20000000
 8003a48:	053e2d63 	.word	0x053e2d63
 8003a4c:	cb840000 	.word	0xcb840000
 8003a50:	80000001 	.word	0x80000001

08003a54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fff5 	bl	8002a54 <LL_ADC_IsEnabled>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d169      	bne.n	8003b44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <ADC_Enable+0xfc>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f043 0210 	orr.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e055      	b.n	8003b46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe ffc4 	bl	8002a2c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003aa4:	482b      	ldr	r0, [pc, #172]	; (8003b54 <ADC_Enable+0x100>)
 8003aa6:	f7fe fe6f 	bl	8002788 <LL_ADC_GetCommonPathInternalCh>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab4:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <ADC_Enable+0x104>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <ADC_Enable+0x108>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003ace:	e002      	b.n	8003ad6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f9      	bne.n	8003ad0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003adc:	f7fe fe22 	bl	8002724 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ae2:	e028      	b.n	8003b36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe ffb3 	bl	8002a54 <LL_ADC_IsEnabled>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe ff97 	bl	8002a2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003afe:	f7fe fe11 	bl	8002724 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d914      	bls.n	8003b36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00d      	beq.n	8003b36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d1cf      	bne.n	8003ae4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	8000003f 	.word	0x8000003f
 8003b54:	50040300 	.word	0x50040300
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	053e2d63 	.word	0x053e2d63

08003b60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	; (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	; (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d30:	d301      	bcc.n	8003d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <SysTick_Config+0x40>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3e:	210f      	movs	r1, #15
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f7ff ff8e 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <SysTick_Config+0x40>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SysTick_Config+0x40>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff29 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d8c:	f7ff ff3e 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	6978      	ldr	r0, [r7, #20]
 8003d98:	f7ff ff8e 	bl	8003cb8 <NVIC_EncodePriority>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff5d 	bl	8003c64 <__NVIC_SetPriority>
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff31 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ffa2 	bl	8003d20 <SysTick_Config>
 8003ddc:	4603      	mov	r3, r0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d008      	beq.n	8003e10 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2204      	movs	r2, #4
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e022      	b.n	8003e56 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 020e 	bic.w	r2, r2, #14
 8003e1e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	f003 021c 	and.w	r2, r3, #28
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d005      	beq.n	8003e86 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	e029      	b.n	8003eda <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 020e 	bic.w	r2, r2, #14
 8003e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f003 021c 	and.w	r2, r3, #28
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
    }
  }
  return status;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ef2:	e148      	b.n	8004186 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 813a 	beq.w	8004180 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d005      	beq.n	8003f24 <HAL_GPIO_Init+0x40>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d130      	bne.n	8003f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2203      	movs	r2, #3
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 0201 	and.w	r2, r3, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d017      	beq.n	8003fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d123      	bne.n	8004016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	08da      	lsrs	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3208      	adds	r2, #8
 8004010:	6939      	ldr	r1, [r7, #16]
 8004012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0203 	and.w	r2, r3, #3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8094 	beq.w	8004180 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004058:	4b52      	ldr	r3, [pc, #328]	; (80041a4 <HAL_GPIO_Init+0x2c0>)
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	4a51      	ldr	r2, [pc, #324]	; (80041a4 <HAL_GPIO_Init+0x2c0>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6613      	str	r3, [r2, #96]	; 0x60
 8004064:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <HAL_GPIO_Init+0x2c0>)
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004070:	4a4d      	ldr	r2, [pc, #308]	; (80041a8 <HAL_GPIO_Init+0x2c4>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	3302      	adds	r3, #2
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	220f      	movs	r2, #15
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800409a:	d00d      	beq.n	80040b8 <HAL_GPIO_Init+0x1d4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a43      	ldr	r2, [pc, #268]	; (80041ac <HAL_GPIO_Init+0x2c8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <HAL_GPIO_Init+0x1d0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a42      	ldr	r2, [pc, #264]	; (80041b0 <HAL_GPIO_Init+0x2cc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_GPIO_Init+0x1cc>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e004      	b.n	80040ba <HAL_GPIO_Init+0x1d6>
 80040b0:	2307      	movs	r3, #7
 80040b2:	e002      	b.n	80040ba <HAL_GPIO_Init+0x1d6>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_GPIO_Init+0x1d6>
 80040b8:	2300      	movs	r3, #0
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	f002 0203 	and.w	r2, r2, #3
 80040c0:	0092      	lsls	r2, r2, #2
 80040c2:	4093      	lsls	r3, r2
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ca:	4937      	ldr	r1, [pc, #220]	; (80041a8 <HAL_GPIO_Init+0x2c4>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	089b      	lsrs	r3, r3, #2
 80040d0:	3302      	adds	r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040d8:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040fc:	4a2d      	ldr	r2, [pc, #180]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004126:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	43db      	mvns	r3, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <HAL_GPIO_Init+0x2d0>)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3301      	adds	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	f47f aeaf 	bne.w	8003ef4 <HAL_GPIO_Init+0x10>
  }
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40010000 	.word	0x40010000
 80041ac:	48000400 	.word	0x48000400
 80041b0:	48000800 	.word	0x48000800
 80041b4:	40010400 	.word	0x40010400

080041b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e001      	b.n	80041da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
 80041f4:	4613      	mov	r3, r2
 80041f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f8:	787b      	ldrb	r3, [r7, #1]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004204:	e002      	b.n	800420c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e081      	b.n	800432e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd ffbe 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004268:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004278:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	e006      	b.n	80042a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800429e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d104      	bne.n	80042b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69d9      	ldr	r1, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4603      	mov	r3, r0
 8004348:	817b      	strh	r3, [r7, #10]
 800434a:	460b      	mov	r3, r1
 800434c:	813b      	strh	r3, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b20      	cmp	r3, #32
 800435c:	f040 80f9 	bne.w	8004552 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_I2C_Mem_Write+0x34>
 8004366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004372:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0ed      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_I2C_Mem_Write+0x4e>
 8004382:	2302      	movs	r3, #2
 8004384:	e0e6      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800438e:	f7fe f9c9 	bl	8002724 <HAL_GetTick>
 8004392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2319      	movs	r3, #25
 800439a:	2201      	movs	r2, #1
 800439c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fac3 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0d1      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2221      	movs	r2, #33	; 0x21
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2240      	movs	r2, #64	; 0x40
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043d8:	88f8      	ldrh	r0, [r7, #6]
 80043da:	893a      	ldrh	r2, [r7, #8]
 80043dc:	8979      	ldrh	r1, [r7, #10]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	9301      	str	r3, [sp, #4]
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	4603      	mov	r3, r0
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f9d3 	bl	8004794 <I2C_RequestMemoryWrite>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0a9      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2bff      	cmp	r3, #255	; 0xff
 8004408:	d90e      	bls.n	8004428 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	; 0xff
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	b2da      	uxtb	r2, r3
 8004416:	8979      	ldrh	r1, [r7, #10]
 8004418:	2300      	movs	r3, #0
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 fc2b 	bl	8004c7c <I2C_TransferConfig>
 8004426:	e00f      	b.n	8004448 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	b2da      	uxtb	r2, r3
 8004438:	8979      	ldrh	r1, [r7, #10]
 800443a:	2300      	movs	r3, #0
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fc1a 	bl	8004c7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 faad 	bl	80049ac <I2C_WaitOnTXISFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e07b      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d034      	beq.n	8004500 <HAL_I2C_Mem_Write+0x1c8>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d130      	bne.n	8004500 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	2200      	movs	r2, #0
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fa3f 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e04d      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2bff      	cmp	r3, #255	; 0xff
 80044c0:	d90e      	bls.n	80044e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	22ff      	movs	r2, #255	; 0xff
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	8979      	ldrh	r1, [r7, #10]
 80044d0:	2300      	movs	r3, #0
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fbcf 	bl	8004c7c <I2C_TransferConfig>
 80044de:	e00f      	b.n	8004500 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	8979      	ldrh	r1, [r7, #10]
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fbbe 	bl	8004c7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d19e      	bne.n	8004448 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fa8c 	bl	8004a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e01a      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2220      	movs	r2, #32
 8004524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_I2C_Mem_Write+0x224>)
 8004532:	400b      	ands	r3, r1
 8004534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	fe00e800 	.word	0xfe00e800

08004560 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	817b      	strh	r3, [r7, #10]
 8004572:	460b      	mov	r3, r1
 8004574:	813b      	strh	r3, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b20      	cmp	r3, #32
 8004584:	f040 80fd 	bne.w	8004782 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_I2C_Mem_Read+0x34>
 800458e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0f1      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_I2C_Mem_Read+0x4e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e0ea      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045b6:	f7fe f8b5 	bl	8002724 <HAL_GetTick>
 80045ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2319      	movs	r3, #25
 80045c2:	2201      	movs	r2, #1
 80045c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f9af 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0d5      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2222      	movs	r2, #34	; 0x22
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2240      	movs	r2, #64	; 0x40
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004600:	88f8      	ldrh	r0, [r7, #6]
 8004602:	893a      	ldrh	r2, [r7, #8]
 8004604:	8979      	ldrh	r1, [r7, #10]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4603      	mov	r3, r0
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f913 	bl	800483c <I2C_RequestMemoryRead>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0ad      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2bff      	cmp	r3, #255	; 0xff
 8004630:	d90e      	bls.n	8004650 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	22ff      	movs	r2, #255	; 0xff
 8004636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	b2da      	uxtb	r2, r3
 800463e:	8979      	ldrh	r1, [r7, #10]
 8004640:	4b52      	ldr	r3, [pc, #328]	; (800478c <HAL_I2C_Mem_Read+0x22c>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fb17 	bl	8004c7c <I2C_TransferConfig>
 800464e:	e00f      	b.n	8004670 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	b2da      	uxtb	r2, r3
 8004660:	8979      	ldrh	r1, [r7, #10]
 8004662:	4b4a      	ldr	r3, [pc, #296]	; (800478c <HAL_I2C_Mem_Read+0x22c>)
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fb06 	bl	8004c7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2200      	movs	r2, #0
 8004678:	2104      	movs	r1, #4
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f956 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e07c      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d034      	beq.n	8004730 <HAL_I2C_Mem_Read+0x1d0>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d130      	bne.n	8004730 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f927 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e04d      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2bff      	cmp	r3, #255	; 0xff
 80046f0:	d90e      	bls.n	8004710 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	8979      	ldrh	r1, [r7, #10]
 8004700:	2300      	movs	r3, #0
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fab7 	bl	8004c7c <I2C_TransferConfig>
 800470e:	e00f      	b.n	8004730 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	b2da      	uxtb	r2, r3
 8004720:	8979      	ldrh	r1, [r7, #10]
 8004722:	2300      	movs	r3, #0
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 faa6 	bl	8004c7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d19a      	bne.n	8004670 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f974 	bl	8004a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e01a      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2220      	movs	r2, #32
 8004754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_I2C_Mem_Read+0x230>)
 8004762:	400b      	ands	r3, r1
 8004764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	80002400 	.word	0x80002400
 8004790:	fe00e800 	.word	0xfe00e800

08004794 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	817b      	strh	r3, [r7, #10]
 80047a6:	460b      	mov	r3, r1
 80047a8:	813b      	strh	r3, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	8979      	ldrh	r1, [r7, #10]
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <I2C_RequestMemoryWrite+0xa4>)
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fa5d 	bl	8004c7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	69b9      	ldr	r1, [r7, #24]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f8f0 	bl	80049ac <I2C_WaitOnTXISFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e02c      	b.n	8004830 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047dc:	893b      	ldrh	r3, [r7, #8]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
 80047e6:	e015      	b.n	8004814 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047e8:	893b      	ldrh	r3, [r7, #8]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	69b9      	ldr	r1, [r7, #24]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f8d6 	bl	80049ac <I2C_WaitOnTXISFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e012      	b.n	8004830 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800480a:	893b      	ldrh	r3, [r7, #8]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2200      	movs	r2, #0
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f884 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	80002000 	.word	0x80002000

0800483c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4603      	mov	r3, r0
 800484c:	817b      	strh	r3, [r7, #10]
 800484e:	460b      	mov	r3, r1
 8004850:	813b      	strh	r3, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	8979      	ldrh	r1, [r7, #10]
 800485c:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <I2C_RequestMemoryRead+0xa4>)
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2300      	movs	r3, #0
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa0a 	bl	8004c7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	69b9      	ldr	r1, [r7, #24]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f89d 	bl	80049ac <I2C_WaitOnTXISFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e02c      	b.n	80048d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004882:	893b      	ldrh	r3, [r7, #8]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28
 800488c:	e015      	b.n	80048ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800488e:	893b      	ldrh	r3, [r7, #8]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b29b      	uxth	r3, r3
 8004894:	b2da      	uxtb	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 f883 	bl	80049ac <I2C_WaitOnTXISFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e012      	b.n	80048d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048b0:	893b      	ldrh	r3, [r7, #8]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2140      	movs	r1, #64	; 0x40
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f831 	bl	800492c <I2C_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	80002000 	.word	0x80002000

080048e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d103      	bne.n	8004902 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d007      	beq.n	8004920 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	619a      	str	r2, [r3, #24]
  }
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800493c:	e022      	b.n	8004984 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d01e      	beq.n	8004984 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fd feed 	bl	8002724 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d113      	bne.n	8004984 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e00f      	b.n	80049a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d0cd      	beq.n	800493e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049b8:	e02c      	b.n	8004a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f870 	bl	8004aa4 <I2C_IsErrorOccurred>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02a      	b.n	8004a24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d01e      	beq.n	8004a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fd fea5 	bl	8002724 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d113      	bne.n	8004a14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e007      	b.n	8004a24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d1cb      	bne.n	80049ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a38:	e028      	b.n	8004a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f830 	bl	8004aa4 <I2C_IsErrorOccurred>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e026      	b.n	8004a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fd fe69 	bl	8002724 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d113      	bne.n	8004a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a68:	f043 0220 	orr.w	r2, r3, #32
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e007      	b.n	8004a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d1cf      	bne.n	8004a3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d075      	beq.n	8004bbc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ad8:	e056      	b.n	8004b88 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d052      	beq.n	8004b88 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fd fe1f 	bl	8002724 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_IsErrorOccurred+0x54>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d147      	bne.n	8004b88 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d12e      	bne.n	8004b7a <I2C_IsErrorOccurred+0xd6>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b22:	d02a      	beq.n	8004b7a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d027      	beq.n	8004b7a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b3a:	f7fd fdf3 	bl	8002724 <HAL_GetTick>
 8004b3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b40:	e01b      	b.n	8004b7a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b42:	f7fd fdef 	bl	8002724 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b19      	cmp	r3, #25
 8004b4e:	d914      	bls.n	8004b7a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d1dc      	bne.n	8004b42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d003      	beq.n	8004b9e <I2C_IsErrorOccurred+0xfa>
 8004b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d09d      	beq.n	8004ada <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2220      	movs	r2, #32
 8004bac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f043 0304 	orr.w	r3, r3, #4
 8004bb4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f043 0308 	orr.w	r3, r3, #8
 8004bf6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01c      	beq.n	8004c6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fe56 	bl	80048e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6859      	ldr	r1, [r3, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <I2C_IsErrorOccurred+0x1d4>)
 8004c44:	400b      	ands	r3, r1
 8004c46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	; 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	fe00e800 	.word	0xfe00e800

08004c7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	817b      	strh	r3, [r7, #10]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c94:	7a7b      	ldrb	r3, [r7, #9]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004caa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	0d5b      	lsrs	r3, r3, #21
 8004cb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cba:	4b08      	ldr	r3, [pc, #32]	; (8004cdc <I2C_TransferConfig+0x60>)
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	ea02 0103 	and.w	r1, r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	03ff63ff 	.word	0x03ff63ff

08004ce0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d138      	bne.n	8004d68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e032      	b.n	8004d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	; 0x24
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d139      	bne.n	8004e00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e033      	b.n	8004e02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2224      	movs	r2, #36	; 0x24
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e000      	b.n	8004e02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
  }
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40007000 	.word	0x40007000

08004e30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40007000 	.word	0x40007000

08004e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5a:	d130      	bne.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e5c:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d038      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e72:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2232      	movs	r2, #50	; 0x32
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	4a1b      	ldr	r2, [pc, #108]	; (8004ef4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0c9b      	lsrs	r3, r3, #18
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e90:	e002      	b.n	8004e98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e98:	4b14      	ldr	r3, [pc, #80]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d102      	bne.n	8004eac <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f2      	bne.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb8:	d110      	bne.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e00f      	b.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eca:	d007      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ecc:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ed4:	4a05      	ldr	r2, [pc, #20]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	431bde83 	.word	0x431bde83

08004ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f000 bc02 	b.w	8005710 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0c:	4b96      	ldr	r3, [pc, #600]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f16:	4b94      	ldr	r3, [pc, #592]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80e4 	beq.w	80050f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_RCC_OscConfig+0x4c>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b0c      	cmp	r3, #12
 8004f38:	f040 808b 	bne.w	8005052 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	f040 8087 	bne.w	8005052 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f44:	4b88      	ldr	r3, [pc, #544]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_OscConfig+0x64>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e3d9      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1a      	ldr	r2, [r3, #32]
 8004f60:	4b81      	ldr	r3, [pc, #516]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <HAL_RCC_OscConfig+0x7e>
 8004f6c:	4b7e      	ldr	r3, [pc, #504]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f74:	e005      	b.n	8004f82 <HAL_RCC_OscConfig+0x8a>
 8004f76:	4b7c      	ldr	r3, [pc, #496]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d223      	bcs.n	8004fce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fd8c 	bl	8005aa8 <RCC_SetFlashLatencyFromMSIRange>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e3ba      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f9a:	4b73      	ldr	r3, [pc, #460]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a72      	ldr	r2, [pc, #456]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fa0:	f043 0308 	orr.w	r3, r3, #8
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	4b70      	ldr	r3, [pc, #448]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	496d      	ldr	r1, [pc, #436]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fb8:	4b6b      	ldr	r3, [pc, #428]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	4968      	ldr	r1, [pc, #416]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
 8004fcc:	e025      	b.n	800501a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fce:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a65      	ldr	r2, [pc, #404]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fd4:	f043 0308 	orr.w	r3, r3, #8
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4b63      	ldr	r3, [pc, #396]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	4960      	ldr	r1, [pc, #384]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fec:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	495b      	ldr	r1, [pc, #364]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fd4c 	bl	8005aa8 <RCC_SetFlashLatencyFromMSIRange>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e37a      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800501a:	f000 fc81 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 800501e:	4602      	mov	r2, r0
 8005020:	4b51      	ldr	r3, [pc, #324]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	4950      	ldr	r1, [pc, #320]	; (800516c <HAL_RCC_OscConfig+0x274>)
 800502c:	5ccb      	ldrb	r3, [r1, r3]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	4a4e      	ldr	r2, [pc, #312]	; (8005170 <HAL_RCC_OscConfig+0x278>)
 8005038:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800503a:	4b4e      	ldr	r3, [pc, #312]	; (8005174 <HAL_RCC_OscConfig+0x27c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd fb20 	bl	8002684 <HAL_InitTick>
 8005044:	4603      	mov	r3, r0
 8005046:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d052      	beq.n	80050f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	e35e      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d032      	beq.n	80050c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800505a:	4b43      	ldr	r3, [pc, #268]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a42      	ldr	r2, [pc, #264]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005066:	f7fd fb5d 	bl	8002724 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800506e:	f7fd fb59 	bl	8002724 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e347      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005080:	4b39      	ldr	r3, [pc, #228]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800508c:	4b36      	ldr	r3, [pc, #216]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a35      	ldr	r2, [pc, #212]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005092:	f043 0308 	orr.w	r3, r3, #8
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	4b33      	ldr	r3, [pc, #204]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	4930      	ldr	r1, [pc, #192]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	492b      	ldr	r1, [pc, #172]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
 80050be:	e01a      	b.n	80050f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050c0:	4b29      	ldr	r3, [pc, #164]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a28      	ldr	r2, [pc, #160]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050cc:	f7fd fb2a 	bl	8002724 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050d4:	f7fd fb26 	bl	8002724 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e314      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x1dc>
 80050f2:	e000      	b.n	80050f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d073      	beq.n	80051ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d005      	beq.n	8005114 <HAL_RCC_OscConfig+0x21c>
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b0c      	cmp	r3, #12
 800510c:	d10e      	bne.n	800512c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d10b      	bne.n	800512c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	4b14      	ldr	r3, [pc, #80]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d063      	beq.n	80051e8 <HAL_RCC_OscConfig+0x2f0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d15f      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e2f1      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d106      	bne.n	8005144 <HAL_RCC_OscConfig+0x24c>
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 800513c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e025      	b.n	8005190 <HAL_RCC_OscConfig+0x298>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800514c:	d114      	bne.n	8005178 <HAL_RCC_OscConfig+0x280>
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a05      	ldr	r2, [pc, #20]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4b03      	ldr	r3, [pc, #12]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a02      	ldr	r2, [pc, #8]	; (8005168 <HAL_RCC_OscConfig+0x270>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e013      	b.n	8005190 <HAL_RCC_OscConfig+0x298>
 8005168:	40021000 	.word	0x40021000
 800516c:	0800b244 	.word	0x0800b244
 8005170:	20000000 	.word	0x20000000
 8005174:	20000004 	.word	0x20000004
 8005178:	4ba0      	ldr	r3, [pc, #640]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a9f      	ldr	r2, [pc, #636]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b9d      	ldr	r3, [pc, #628]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a9c      	ldr	r2, [pc, #624]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fac4 	bl	8002724 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fd fac0 	bl	8002724 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e2ae      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b2:	4b92      	ldr	r3, [pc, #584]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x2a8>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fd fab0 	bl	8002724 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fd faac 	bl	8002724 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e29a      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051da:	4b88      	ldr	r3, [pc, #544]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x2d0>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d060      	beq.n	80052b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_OscConfig+0x310>
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d119      	bne.n	8005236 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d116      	bne.n	8005236 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005208:	4b7c      	ldr	r3, [pc, #496]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_RCC_OscConfig+0x328>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e277      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b76      	ldr	r3, [pc, #472]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	4973      	ldr	r1, [pc, #460]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005234:	e040      	b.n	80052b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d023      	beq.n	8005286 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800523e:	4b6f      	ldr	r3, [pc, #444]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6e      	ldr	r2, [pc, #440]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7fd fa6b 	bl	8002724 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005252:	f7fd fa67 	bl	8002724 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e255      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005264:	4b65      	ldr	r3, [pc, #404]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005270:	4b62      	ldr	r3, [pc, #392]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	495f      	ldr	r1, [pc, #380]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
 8005284:	e018      	b.n	80052b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005286:	4b5d      	ldr	r3, [pc, #372]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a5c      	ldr	r2, [pc, #368]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800528c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fd fa47 	bl	8002724 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529a:	f7fd fa43 	bl	8002724 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e231      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052ac:	4b53      	ldr	r3, [pc, #332]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1f0      	bne.n	800529a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03c      	beq.n	800533e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01c      	beq.n	8005306 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052cc:	4b4b      	ldr	r3, [pc, #300]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d2:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7fd fa22 	bl	8002724 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e4:	f7fd fa1e 	bl	8002724 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e20c      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052f6:	4b41      	ldr	r3, [pc, #260]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80052f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ef      	beq.n	80052e4 <HAL_RCC_OscConfig+0x3ec>
 8005304:	e01b      	b.n	800533e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005306:	4b3d      	ldr	r3, [pc, #244]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530c:	4a3b      	ldr	r2, [pc, #236]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7fd fa05 	bl	8002724 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531e:	f7fd fa01 	bl	8002724 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e1ef      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005330:	4b32      	ldr	r3, [pc, #200]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ef      	bne.n	800531e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80a6 	beq.w	8005498 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534c:	2300      	movs	r3, #0
 800534e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005350:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535c:	4b27      	ldr	r3, [pc, #156]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005360:	4a26      	ldr	r2, [pc, #152]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005366:	6593      	str	r3, [r2, #88]	; 0x58
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 800536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005374:	2301      	movs	r3, #1
 8005376:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005378:	4b21      	ldr	r3, [pc, #132]	; (8005400 <HAL_RCC_OscConfig+0x508>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d118      	bne.n	80053b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005384:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_RCC_OscConfig+0x508>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <HAL_RCC_OscConfig+0x508>)
 800538a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800538e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005390:	f7fd f9c8 	bl	8002724 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005398:	f7fd f9c4 	bl	8002724 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e1b2      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_RCC_OscConfig+0x508>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d108      	bne.n	80053d0 <HAL_RCC_OscConfig+0x4d8>
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ce:	e029      	b.n	8005424 <HAL_RCC_OscConfig+0x52c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	d115      	bne.n	8005404 <HAL_RCC_OscConfig+0x50c>
 80053d8:	4b08      	ldr	r3, [pc, #32]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	4a07      	ldr	r2, [pc, #28]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80053e0:	f043 0304 	orr.w	r3, r3, #4
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	4a03      	ldr	r2, [pc, #12]	; (80053fc <HAL_RCC_OscConfig+0x504>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053f8:	e014      	b.n	8005424 <HAL_RCC_OscConfig+0x52c>
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	40007000 	.word	0x40007000
 8005404:	4b9a      	ldr	r3, [pc, #616]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	4a99      	ldr	r2, [pc, #612]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005414:	4b96      	ldr	r3, [pc, #600]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	4a95      	ldr	r2, [pc, #596]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800541c:	f023 0304 	bic.w	r3, r3, #4
 8005420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d016      	beq.n	800545a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7fd f97a 	bl	8002724 <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005432:	e00a      	b.n	800544a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005434:	f7fd f976 	bl	8002724 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e162      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544a:	4b89      	ldr	r3, [pc, #548]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ed      	beq.n	8005434 <HAL_RCC_OscConfig+0x53c>
 8005458:	e015      	b.n	8005486 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545a:	f7fd f963 	bl	8002724 <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005462:	f7fd f95f 	bl	8002724 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e14b      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005478:	4b7d      	ldr	r3, [pc, #500]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ed      	bne.n	8005462 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005486:	7ffb      	ldrb	r3, [r7, #31]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d105      	bne.n	8005498 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800548c:	4b78      	ldr	r3, [pc, #480]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005490:	4a77      	ldr	r2, [pc, #476]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005496:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d03c      	beq.n	800551e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01c      	beq.n	80054e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054ac:	4b70      	ldr	r3, [pc, #448]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80054ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054b2:	4a6f      	ldr	r2, [pc, #444]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fd f932 	bl	8002724 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c4:	f7fd f92e 	bl	8002724 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e11c      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054d6:	4b66      	ldr	r3, [pc, #408]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80054d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ef      	beq.n	80054c4 <HAL_RCC_OscConfig+0x5cc>
 80054e4:	e01b      	b.n	800551e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054e6:	4b62      	ldr	r3, [pc, #392]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80054e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ec:	4a60      	ldr	r2, [pc, #384]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7fd f915 	bl	8002724 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054fe:	f7fd f911 	bl	8002724 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e0ff      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005510:	4b57      	ldr	r3, [pc, #348]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ef      	bne.n	80054fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80f3 	beq.w	800570e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	2b02      	cmp	r3, #2
 800552e:	f040 80c9 	bne.w	80056c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005532:	4b4f      	ldr	r3, [pc, #316]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f003 0203 	and.w	r2, r3, #3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	429a      	cmp	r2, r3
 8005544:	d12c      	bne.n	80055a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	3b01      	subs	r3, #1
 8005552:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005554:	429a      	cmp	r2, r3
 8005556:	d123      	bne.n	80055a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d11b      	bne.n	80055a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005574:	429a      	cmp	r2, r3
 8005576:	d113      	bne.n	80055a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	3b01      	subs	r3, #1
 8005586:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d109      	bne.n	80055a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	3b01      	subs	r3, #1
 800559a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800559c:	429a      	cmp	r2, r3
 800559e:	d06b      	beq.n	8005678 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d062      	beq.n	800566c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055a6:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0ac      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2d      	ldr	r2, [pc, #180]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80055bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055c2:	f7fd f8af 	bl	8002724 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ca:	f7fd f8ab 	bl	8002724 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e099      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f0      	bne.n	80055ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055e8:	4b21      	ldr	r3, [pc, #132]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	4b21      	ldr	r3, [pc, #132]	; (8005674 <HAL_RCC_OscConfig+0x77c>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055f8:	3a01      	subs	r2, #1
 80055fa:	0112      	lsls	r2, r2, #4
 80055fc:	4311      	orrs	r1, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005602:	0212      	lsls	r2, r2, #8
 8005604:	4311      	orrs	r1, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800560a:	0852      	lsrs	r2, r2, #1
 800560c:	3a01      	subs	r2, #1
 800560e:	0552      	lsls	r2, r2, #21
 8005610:	4311      	orrs	r1, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005616:	0852      	lsrs	r2, r2, #1
 8005618:	3a01      	subs	r2, #1
 800561a:	0652      	lsls	r2, r2, #25
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005622:	06d2      	lsls	r2, r2, #27
 8005624:	430a      	orrs	r2, r1
 8005626:	4912      	ldr	r1, [pc, #72]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005628:	4313      	orrs	r3, r2
 800562a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800562c:	4b10      	ldr	r3, [pc, #64]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0f      	ldr	r2, [pc, #60]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005636:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a0c      	ldr	r2, [pc, #48]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 800563e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005642:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005644:	f7fd f86e 	bl	8002724 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fd f86a 	bl	8002724 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e058      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <HAL_RCC_OscConfig+0x778>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800566a:	e050      	b.n	800570e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e04f      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
 8005670:	40021000 	.word	0x40021000
 8005674:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005678:	4b27      	ldr	r3, [pc, #156]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d144      	bne.n	800570e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 800568a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800568e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005690:	4b21      	ldr	r3, [pc, #132]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a20      	ldr	r2, [pc, #128]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 8005696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800569c:	f7fd f842 	bl	8002724 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a4:	f7fd f83e 	bl	8002724 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e02c      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b6:	4b18      	ldr	r3, [pc, #96]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x7ac>
 80056c2:	e024      	b.n	800570e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d01f      	beq.n	800570a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a12      	ldr	r2, [pc, #72]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 80056d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d6:	f7fd f825 	bl	8002724 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056de:	f7fd f821 	bl	8002724 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e00f      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f0      	bne.n	80056de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	4905      	ldr	r1, [pc, #20]	; (8005718 <HAL_RCC_OscConfig+0x820>)
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <HAL_RCC_OscConfig+0x824>)
 8005704:	4013      	ands	r3, r2
 8005706:	60cb      	str	r3, [r1, #12]
 8005708:	e001      	b.n	800570e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021000 	.word	0x40021000
 800571c:	feeefffc 	.word	0xfeeefffc

08005720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0e7      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005734:	4b75      	ldr	r3, [pc, #468]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d910      	bls.n	8005764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005742:	4b72      	ldr	r3, [pc, #456]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 0207 	bic.w	r2, r3, #7
 800574a:	4970      	ldr	r1, [pc, #448]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b6e      	ldr	r3, [pc, #440]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0cf      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d010      	beq.n	8005792 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	4b66      	ldr	r3, [pc, #408]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800577c:	429a      	cmp	r2, r3
 800577e:	d908      	bls.n	8005792 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b63      	ldr	r3, [pc, #396]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4960      	ldr	r1, [pc, #384]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04c      	beq.n	8005838 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a6:	4b5a      	ldr	r3, [pc, #360]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d121      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0a6      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057be:	4b54      	ldr	r3, [pc, #336]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d115      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e09a      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d107      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057d6:	4b4e      	ldr	r3, [pc, #312]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e08e      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057e6:	4b4a      	ldr	r3, [pc, #296]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e086      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f023 0203 	bic.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4943      	ldr	r1, [pc, #268]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 8005804:	4313      	orrs	r3, r2
 8005806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005808:	f7fc ff8c 	bl	8002724 <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	e00a      	b.n	8005826 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fc ff88 	bl	8002724 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e06e      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005826:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f003 020c 	and.w	r2, r3, #12
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	429a      	cmp	r2, r3
 8005836:	d1eb      	bne.n	8005810 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d010      	beq.n	8005866 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	4b31      	ldr	r3, [pc, #196]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005850:	429a      	cmp	r2, r3
 8005852:	d208      	bcs.n	8005866 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005854:	4b2e      	ldr	r3, [pc, #184]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	492b      	ldr	r1, [pc, #172]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 8005862:	4313      	orrs	r3, r2
 8005864:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005866:	4b29      	ldr	r3, [pc, #164]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d210      	bcs.n	8005896 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f023 0207 	bic.w	r2, r3, #7
 800587c:	4923      	ldr	r1, [pc, #140]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <HAL_RCC_ClockConfig+0x1ec>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d001      	beq.n	8005896 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e036      	b.n	8005904 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	4918      	ldr	r1, [pc, #96]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058c0:	4b13      	ldr	r3, [pc, #76]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4910      	ldr	r1, [pc, #64]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058d4:	f000 f824 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 80058d8:	4602      	mov	r2, r0
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <HAL_RCC_ClockConfig+0x1f0>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	490b      	ldr	r1, [pc, #44]	; (8005914 <HAL_RCC_ClockConfig+0x1f4>)
 80058e6:	5ccb      	ldrb	r3, [r1, r3]
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	4a09      	ldr	r2, [pc, #36]	; (8005918 <HAL_RCC_ClockConfig+0x1f8>)
 80058f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_RCC_ClockConfig+0x1fc>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fc fec3 	bl	8002684 <HAL_InitTick>
 80058fe:	4603      	mov	r3, r0
 8005900:	72fb      	strb	r3, [r7, #11]

  return status;
 8005902:	7afb      	ldrb	r3, [r7, #11]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40022000 	.word	0x40022000
 8005910:	40021000 	.word	0x40021000
 8005914:	0800b244 	.word	0x0800b244
 8005918:	20000000 	.word	0x20000000
 800591c:	20000004 	.word	0x20000004

08005920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005920:	b480      	push	{r7}
 8005922:	b089      	sub	sp, #36	; 0x24
 8005924:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800592e:	4b3e      	ldr	r3, [pc, #248]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005938:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x34>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d121      	bne.n	8005992 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d11e      	bne.n	8005992 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005954:	4b34      	ldr	r3, [pc, #208]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005960:	4b31      	ldr	r3, [pc, #196]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	e005      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005970:	4b2d      	ldr	r3, [pc, #180]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	091b      	lsrs	r3, r3, #4
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800597c:	4a2b      	ldr	r2, [pc, #172]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x10c>)
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005984:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10d      	bne.n	80059a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005990:	e00a      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b04      	cmp	r3, #4
 8005996:	d102      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005998:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x110>)
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	e004      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059a4:	4b23      	ldr	r3, [pc, #140]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80059a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d134      	bne.n	8005a18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059ae:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d003      	beq.n	80059c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d003      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0xac>
 80059c4:	e005      	b.n	80059d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059c6:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x110>)
 80059c8:	617b      	str	r3, [r7, #20]
      break;
 80059ca:	e005      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80059ce:	617b      	str	r3, [r7, #20]
      break;
 80059d0:	e002      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	617b      	str	r3, [r7, #20]
      break;
 80059d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	3301      	adds	r3, #1
 80059e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	fb03 f202 	mul.w	r2, r3, r2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	0e5b      	lsrs	r3, r3, #25
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	3301      	adds	r3, #1
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a18:	69bb      	ldr	r3, [r7, #24]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3724      	adds	r7, #36	; 0x24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	0800b25c 	.word	0x0800b25c
 8005a30:	00f42400 	.word	0x00f42400
 8005a34:	007a1200 	.word	0x007a1200

08005a38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	20000000 	.word	0x20000000

08005a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a54:	f7ff fff0 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	4904      	ldr	r1, [pc, #16]	; (8005a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a66:	5ccb      	ldrb	r3, [r1, r3]
 8005a68:	f003 031f 	and.w	r3, r3, #31
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40021000 	.word	0x40021000
 8005a78:	0800b254 	.word	0x0800b254

08005a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a80:	f7ff ffda 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0adb      	lsrs	r3, r3, #11
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4904      	ldr	r1, [pc, #16]	; (8005aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	0800b254 	.word	0x0800b254

08005aa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ac0:	f7ff f9b6 	bl	8004e30 <HAL_PWREx_GetVoltageRange>
 8005ac4:	6178      	str	r0, [r7, #20]
 8005ac6:	e014      	b.n	8005af2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac8:	4b25      	ldr	r3, [pc, #148]	; (8005b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ad4:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ae0:	f7ff f9a6 	bl	8004e30 <HAL_PWREx_GetVoltageRange>
 8005ae4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ae6:	4b1e      	ldr	r3, [pc, #120]	; (8005b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aea:	4a1d      	ldr	r2, [pc, #116]	; (8005b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af8:	d10b      	bne.n	8005b12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b80      	cmp	r3, #128	; 0x80
 8005afe:	d919      	bls.n	8005b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2ba0      	cmp	r3, #160	; 0xa0
 8005b04:	d902      	bls.n	8005b0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b06:	2302      	movs	r3, #2
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	e013      	b.n	8005b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	e010      	b.n	8005b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b80      	cmp	r3, #128	; 0x80
 8005b16:	d902      	bls.n	8005b1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b18:	2303      	movs	r3, #3
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	e00a      	b.n	8005b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d102      	bne.n	8005b2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b24:	2302      	movs	r3, #2
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	e004      	b.n	8005b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b70      	cmp	r3, #112	; 0x70
 8005b2e:	d101      	bne.n	8005b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b30:	2301      	movs	r3, #1
 8005b32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f023 0207 	bic.w	r2, r3, #7
 8005b3c:	4909      	ldr	r1, [pc, #36]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d001      	beq.n	8005b56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40022000 	.word	0x40022000

08005b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b70:	2300      	movs	r3, #0
 8005b72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b74:	2300      	movs	r3, #0
 8005b76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d031      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b8c:	d01a      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005b8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b92:	d814      	bhi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b9c:	d10f      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005b9e:	4b5d      	ldr	r3, [pc, #372]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4a5c      	ldr	r2, [pc, #368]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005baa:	e00c      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f9de 	bl	8005f74 <RCCEx_PLLSAI1_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10b      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bcc:	4b51      	ldr	r3, [pc, #324]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bda:	494e      	ldr	r1, [pc, #312]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005be2:	e001      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be4:	7cfb      	ldrb	r3, [r7, #19]
 8005be6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 809e 	beq.w	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bfa:	4b46      	ldr	r3, [pc, #280]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c10:	4b40      	ldr	r3, [pc, #256]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	4a3f      	ldr	r2, [pc, #252]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c1c:	4b3d      	ldr	r3, [pc, #244]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c2c:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a39      	ldr	r2, [pc, #228]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c38:	f7fc fd74 	bl	8002724 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c3e:	e009      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c40:	f7fc fd70 	bl	8002724 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d902      	bls.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	74fb      	strb	r3, [r7, #19]
        break;
 8005c52:	e005      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c54:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0ef      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005c60:	7cfb      	ldrb	r3, [r7, #19]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d15a      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01e      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d019      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c8e:	4b21      	ldr	r3, [pc, #132]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c94:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cae:	4a19      	ldr	r2, [pc, #100]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d016      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fc fd30 	bl	8002724 <HAL_GetTick>
 8005cc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc6:	e00b      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc8:	f7fc fd2c 	bl	8002724 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d902      	bls.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	74fb      	strb	r3, [r7, #19]
            break;
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ec      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d02:	4904      	ldr	r1, [pc, #16]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d0a:	e009      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	74bb      	strb	r3, [r7, #18]
 8005d10:	e006      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005d12:	bf00      	nop
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	7cfb      	ldrb	r3, [r7, #19]
 8005d1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d20:	7c7b      	ldrb	r3, [r7, #17]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d105      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d26:	4b8a      	ldr	r3, [pc, #552]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2a:	4a89      	ldr	r2, [pc, #548]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d3e:	4b84      	ldr	r3, [pc, #528]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	f023 0203 	bic.w	r2, r3, #3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	4980      	ldr	r1, [pc, #512]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d60:	4b7b      	ldr	r3, [pc, #492]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	f023 020c 	bic.w	r2, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	4978      	ldr	r1, [pc, #480]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d82:	4b73      	ldr	r3, [pc, #460]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	496f      	ldr	r1, [pc, #444]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005da4:	4b6a      	ldr	r3, [pc, #424]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005daa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	4967      	ldr	r1, [pc, #412]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dc6:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	495e      	ldr	r1, [pc, #376]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005de8:	4b59      	ldr	r3, [pc, #356]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4956      	ldr	r1, [pc, #344]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e0a:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	494d      	ldr	r1, [pc, #308]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d028      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e2c:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4945      	ldr	r1, [pc, #276]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4a:	d106      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e4c:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a3f      	ldr	r2, [pc, #252]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e56:	60d3      	str	r3, [r2, #12]
 8005e58:	e011      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e62:	d10c      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f882 	bl	8005f74 <RCCEx_PLLSAI1_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d028      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e8a:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	492d      	ldr	r1, [pc, #180]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea8:	d106      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb4:	60d3      	str	r3, [r2, #12]
 8005eb6:	e011      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ec0:	d10c      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f853 	bl	8005f74 <RCCEx_PLLSAI1_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ed2:	7cfb      	ldrb	r3, [r7, #19]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01c      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ee8:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef6:	4916      	ldr	r1, [pc, #88]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f06:	d10c      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	2102      	movs	r1, #2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f830 	bl	8005f74 <RCCEx_PLLSAI1_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f18:	7cfb      	ldrb	r3, [r7, #19]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005f1e:	7cfb      	ldrb	r3, [r7, #19]
 8005f20:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	4904      	ldr	r1, [pc, #16]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f44:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40021000 	.word	0x40021000

08005f54 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005f5e:	f043 0304 	orr.w	r3, r3, #4
 8005f62:	6013      	str	r3, [r2, #0]
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40021000 	.word	0x40021000

08005f74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f82:	4b74      	ldr	r3, [pc, #464]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d018      	beq.n	8005fc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f8e:	4b71      	ldr	r3, [pc, #452]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0203 	and.w	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d10d      	bne.n	8005fba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005fa6:	4b6b      	ldr	r3, [pc, #428]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d047      	beq.n	800604a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
 8005fbe:	e044      	b.n	800604a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d018      	beq.n	8005ffa <RCCEx_PLLSAI1_Config+0x86>
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d825      	bhi.n	8006018 <RCCEx_PLLSAI1_Config+0xa4>
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d002      	beq.n	8005fd6 <RCCEx_PLLSAI1_Config+0x62>
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d009      	beq.n	8005fe8 <RCCEx_PLLSAI1_Config+0x74>
 8005fd4:	e020      	b.n	8006018 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fd6:	4b5f      	ldr	r3, [pc, #380]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11d      	bne.n	800601e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe6:	e01a      	b.n	800601e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fe8:	4b5a      	ldr	r3, [pc, #360]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d116      	bne.n	8006022 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff8:	e013      	b.n	8006022 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ffa:	4b56      	ldr	r3, [pc, #344]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006006:	4b53      	ldr	r3, [pc, #332]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006016:	e006      	b.n	8006026 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
      break;
 800601c:	e004      	b.n	8006028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800601e:	bf00      	nop
 8006020:	e002      	b.n	8006028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006026:	bf00      	nop
    }

    if(status == HAL_OK)
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10d      	bne.n	800604a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800602e:	4b49      	ldr	r3, [pc, #292]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6819      	ldr	r1, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	3b01      	subs	r3, #1
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	430b      	orrs	r3, r1
 8006044:	4943      	ldr	r1, [pc, #268]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006046:	4313      	orrs	r3, r2
 8006048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d17c      	bne.n	800614a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006050:	4b40      	ldr	r3, [pc, #256]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3f      	ldr	r2, [pc, #252]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800605a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605c:	f7fc fb62 	bl	8002724 <HAL_GetTick>
 8006060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006062:	e009      	b.n	8006078 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006064:	f7fc fb5e 	bl	8002724 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d902      	bls.n	8006078 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	73fb      	strb	r3, [r7, #15]
        break;
 8006076:	e005      	b.n	8006084 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1ef      	bne.n	8006064 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d15f      	bne.n	800614a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d110      	bne.n	80060b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006090:	4b30      	ldr	r3, [pc, #192]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6892      	ldr	r2, [r2, #8]
 80060a0:	0211      	lsls	r1, r2, #8
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	68d2      	ldr	r2, [r2, #12]
 80060a6:	06d2      	lsls	r2, r2, #27
 80060a8:	430a      	orrs	r2, r1
 80060aa:	492a      	ldr	r1, [pc, #168]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	610b      	str	r3, [r1, #16]
 80060b0:	e027      	b.n	8006102 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d112      	bne.n	80060de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060b8:	4b26      	ldr	r3, [pc, #152]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80060c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6892      	ldr	r2, [r2, #8]
 80060c8:	0211      	lsls	r1, r2, #8
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6912      	ldr	r2, [r2, #16]
 80060ce:	0852      	lsrs	r2, r2, #1
 80060d0:	3a01      	subs	r2, #1
 80060d2:	0552      	lsls	r2, r2, #21
 80060d4:	430a      	orrs	r2, r1
 80060d6:	491f      	ldr	r1, [pc, #124]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	610b      	str	r3, [r1, #16]
 80060dc:	e011      	b.n	8006102 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6892      	ldr	r2, [r2, #8]
 80060ee:	0211      	lsls	r1, r2, #8
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6952      	ldr	r2, [r2, #20]
 80060f4:	0852      	lsrs	r2, r2, #1
 80060f6:	3a01      	subs	r2, #1
 80060f8:	0652      	lsls	r2, r2, #25
 80060fa:	430a      	orrs	r2, r1
 80060fc:	4915      	ldr	r1, [pc, #84]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a13      	ldr	r2, [pc, #76]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800610c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610e:	f7fc fb09 	bl	8002724 <HAL_GetTick>
 8006112:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006114:	e009      	b.n	800612a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006116:	f7fc fb05 	bl	8002724 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d902      	bls.n	800612a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	73fb      	strb	r3, [r7, #15]
          break;
 8006128:	e005      	b.n	8006136 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0ef      	beq.n	8006116 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	4903      	ldr	r1, [pc, #12]	; (8006154 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40021000 	.word	0x40021000

08006158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e040      	b.n	80061ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fc f878 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fd62 	bl	8006c60 <UART_SetConfig>
 800619c:	4603      	mov	r3, r0
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e022      	b.n	80061ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 ff82 	bl	80070b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 f809 	bl	80071fc <UART_CheckIdleState>
 80061ea:	4603      	mov	r3, r0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	4613      	mov	r3, r2
 8006202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006208:	2b20      	cmp	r3, #32
 800620a:	f040 8082 	bne.w	8006312 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_UART_Transmit+0x26>
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e07a      	b.n	8006314 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_UART_Transmit+0x38>
 8006228:	2302      	movs	r3, #2
 800622a:	e073      	b.n	8006314 <HAL_UART_Transmit+0x120>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2221      	movs	r2, #33	; 0x21
 8006240:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006242:	f7fc fa6f 	bl	8002724 <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	88fa      	ldrh	r2, [r7, #6]
 800624c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	88fa      	ldrh	r2, [r7, #6]
 8006254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006260:	d108      	bne.n	8006274 <HAL_UART_Transmit+0x80>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e003      	b.n	800627c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006284:	e02d      	b.n	80062e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2200      	movs	r2, #0
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fffc 	bl	800728e <UART_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e039      	b.n	8006314 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b2:	b292      	uxth	r2, r2
 80062b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3302      	adds	r3, #2
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e008      	b.n	80062d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	b292      	uxth	r2, r2
 80062c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1cb      	bne.n	8006286 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2140      	movs	r1, #64	; 0x40
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 ffc8 	bl	800728e <UART_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e005      	b.n	8006314 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006330:	2b20      	cmp	r3, #32
 8006332:	f040 80bf 	bne.w	80064b4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_UART_Receive+0x26>
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e0b7      	b.n	80064b6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_UART_Receive+0x38>
 8006350:	2302      	movs	r3, #2
 8006352:	e0b0      	b.n	80064b6 <HAL_UART_Receive+0x19a>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2222      	movs	r2, #34	; 0x22
 8006368:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006370:	f7fc f9d8 	bl	8002724 <HAL_GetTick>
 8006374:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	d10e      	bne.n	80063ae <HAL_UART_Receive+0x92>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <HAL_UART_Receive+0x88>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800639e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063a2:	e02d      	b.n	8006400 <HAL_UART_Receive+0xe4>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	22ff      	movs	r2, #255	; 0xff
 80063a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ac:	e028      	b.n	8006400 <HAL_UART_Receive+0xe4>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <HAL_UART_Receive+0xb6>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d104      	bne.n	80063c8 <HAL_UART_Receive+0xac>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	22ff      	movs	r2, #255	; 0xff
 80063c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063c6:	e01b      	b.n	8006400 <HAL_UART_Receive+0xe4>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	227f      	movs	r2, #127	; 0x7f
 80063cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063d0:	e016      	b.n	8006400 <HAL_UART_Receive+0xe4>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063da:	d10d      	bne.n	80063f8 <HAL_UART_Receive+0xdc>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <HAL_UART_Receive+0xd2>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	227f      	movs	r2, #127	; 0x7f
 80063e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ec:	e008      	b.n	8006400 <HAL_UART_Receive+0xe4>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	223f      	movs	r2, #63	; 0x3f
 80063f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063f6:	e003      	b.n	8006400 <HAL_UART_Receive+0xe4>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006406:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006410:	d108      	bne.n	8006424 <HAL_UART_Receive+0x108>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e003      	b.n	800642c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006428:	2300      	movs	r3, #0
 800642a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006434:	e033      	b.n	800649e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2200      	movs	r2, #0
 800643e:	2120      	movs	r1, #32
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 ff24 	bl	800728e <UART_WaitOnFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e032      	b.n	80064b6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10c      	bne.n	8006470 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800645c:	b29a      	uxth	r2, r3
 800645e:	8a7b      	ldrh	r3, [r7, #18]
 8006460:	4013      	ands	r3, r2
 8006462:	b29a      	uxth	r2, r3
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	3302      	adds	r3, #2
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e00d      	b.n	800648c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006476:	b29b      	uxth	r3, r3
 8006478:	b2da      	uxtb	r2, r3
 800647a:	8a7b      	ldrh	r3, [r7, #18]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	4013      	ands	r3, r2
 8006480:	b2da      	uxtb	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	3301      	adds	r3, #1
 800648a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1c5      	bne.n	8006436 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b08b      	sub	sp, #44	; 0x2c
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d156      	bne.n	8006584 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_UART_Transmit_IT+0x22>
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e04f      	b.n	8006586 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_UART_Transmit_IT+0x34>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e048      	b.n	8006586 <HAL_UART_Transmit_IT+0xc6>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2221      	movs	r2, #33	; 0x21
 8006524:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652e:	d107      	bne.n	8006540 <HAL_UART_Transmit_IT+0x80>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a16      	ldr	r2, [pc, #88]	; (8006594 <HAL_UART_Transmit_IT+0xd4>)
 800653c:	669a      	str	r2, [r3, #104]	; 0x68
 800653e:	e002      	b.n	8006546 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <HAL_UART_Transmit_IT+0xd8>)
 8006544:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	613b      	str	r3, [r7, #16]
   return(result);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69f9      	ldr	r1, [r7, #28]
 8006572:	6a3a      	ldr	r2, [r7, #32]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	61bb      	str	r3, [r7, #24]
   return(result);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	e000      	b.n	8006586 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006584:	2302      	movs	r3, #2
  }
}
 8006586:	4618      	mov	r0, r3
 8006588:	372c      	adds	r7, #44	; 0x2c
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	08007757 	.word	0x08007757
 8006598:	0800769f 	.word	0x0800769f

0800659c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d142      	bne.n	8006638 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_UART_Receive_IT+0x22>
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e03b      	b.n	800663a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Receive_IT+0x34>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e034      	b.n	800663a <HAL_UART_Receive_IT+0x9e>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_UART_Receive_IT+0xa8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d01f      	beq.n	8006628 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d018      	beq.n	8006628 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	613b      	str	r3, [r7, #16]
   return(result);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	623b      	str	r3, [r7, #32]
 8006616:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	69f9      	ldr	r1, [r7, #28]
 800661a:	6a3a      	ldr	r2, [r7, #32]
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	61bb      	str	r3, [r7, #24]
   return(result);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e6      	bne.n	80065f6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	461a      	mov	r2, r3
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fef2 	bl	8007418 <UART_Start_Receive_IT>
 8006634:	4603      	mov	r3, r0
 8006636:	e000      	b.n	800663a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
  }
}
 800663a:	4618      	mov	r0, r3
 800663c:	3728      	adds	r7, #40	; 0x28
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40008000 	.word	0x40008000

08006648 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b0ba      	sub	sp, #232	; 0xe8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800666e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006672:	f640 030f 	movw	r3, #2063	; 0x80f
 8006676:	4013      	ands	r3, r2
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800667c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d115      	bne.n	80066b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00f      	beq.n	80066b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 82a6 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
      }
      return;
 80066ae:	e2a0      	b.n	8006bf2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80066b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8117 	beq.w	80068e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066ca:	4b85      	ldr	r3, [pc, #532]	; (80068e0 <HAL_UART_IRQHandler+0x298>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 810a 	beq.w	80068e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <HAL_UART_IRQHandler+0xbc>
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2201      	movs	r2, #1
 80066f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fa:	f043 0201 	orr.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d011      	beq.n	8006734 <HAL_UART_IRQHandler+0xec>
 8006710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2202      	movs	r2, #2
 8006722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d011      	beq.n	8006764 <HAL_UART_IRQHandler+0x11c>
 8006740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2204      	movs	r2, #4
 8006752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800675a:	f043 0202 	orr.w	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800677c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006780:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006796:	f043 0208 	orr.w	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d012      	beq.n	80067d2 <HAL_UART_IRQHandler+0x18a>
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 820c 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800680c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b40      	cmp	r3, #64	; 0x40
 800681c:	d005      	beq.n	800682a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800681e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006822:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006826:	2b00      	cmp	r3, #0
 8006828:	d04f      	beq.n	80068ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 febe 	bl	80075ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d141      	bne.n	80068c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800686a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800686e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1d9      	bne.n	800683e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	2b00      	cmp	r3, #0
 8006890:	d013      	beq.n	80068ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006896:	4a13      	ldr	r2, [pc, #76]	; (80068e4 <HAL_UART_IRQHandler+0x29c>)
 8006898:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd fadf 	bl	8003e62 <HAL_DMA_Abort_IT>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d017      	beq.n	80068da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	e00f      	b.n	80068da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9ba 	bl	8006c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	e00b      	b.n	80068da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9b6 	bl	8006c34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	e007      	b.n	80068da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9b2 	bl	8006c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80068d8:	e18d      	b.n	8006bf6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068da:	bf00      	nop
    return;
 80068dc:	e18b      	b.n	8006bf6 <HAL_UART_IRQHandler+0x5ae>
 80068de:	bf00      	nop
 80068e0:	04000120 	.word	0x04000120
 80068e4:	08007673 	.word	0x08007673

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	f040 8146 	bne.w	8006b7e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 813f 	beq.w	8006b7e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8138 	beq.w	8006b7e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2210      	movs	r2, #16
 8006914:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	f040 80b4 	bne.w	8006a8e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006932:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 815f 	beq.w	8006bfa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006946:	429a      	cmp	r2, r3
 8006948:	f080 8157 	bcs.w	8006bfa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006952:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	f040 8085 	bne.w	8006a72 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800697c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006996:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800699e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1da      	bne.n	8006968 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3308      	adds	r3, #8
 80069b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e1      	bne.n	80069b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e3      	bne.n	80069ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a42:	f023 0310 	bic.w	r3, r3, #16
 8006a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a54:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e4      	bne.n	8006a32 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fd f9ba 	bl	8003de6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8de 	bl	8006c48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a8c:	e0b5      	b.n	8006bfa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80a7 	beq.w	8006bfe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80a2 	beq.w	8006bfe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006adc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ade:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e4      	bne.n	8006aba <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	623b      	str	r3, [r7, #32]
   return(result);
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b14:	633a      	str	r2, [r7, #48]	; 0x30
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e3      	bne.n	8006af0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0310 	bic.w	r3, r3, #16
 8006b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	69b9      	ldr	r1, [r7, #24]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	617b      	str	r3, [r7, #20]
   return(result);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e4      	bne.n	8006b3a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f866 	bl	8006c48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b7c:	e03f      	b.n	8006bfe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00e      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x560>
 8006b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 ffc2 	bl	8007b2a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba6:	e02d      	b.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01c      	beq.n	8006c02 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
    }
    return;
 8006bd0:	e017      	b.n	8006c02 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d012      	beq.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
 8006bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fe13 	bl	8007816 <UART_EndTransmit_IT>
    return;
 8006bf0:	e008      	b.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bf2:	bf00      	nop
 8006bf4:	e006      	b.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006bf6:	bf00      	nop
 8006bf8:	e004      	b.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bfa:	bf00      	nop
 8006bfc:	e002      	b.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006c02:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c04:	37e8      	adds	r7, #232	; 0xe8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop

08006c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c64:	b08a      	sub	sp, #40	; 0x28
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4bb4      	ldr	r3, [pc, #720]	; (8006f60 <UART_SetConfig+0x300>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4aa9      	ldr	r2, [pc, #676]	; (8006f64 <UART_SetConfig+0x304>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d004      	beq.n	8006ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4aa0      	ldr	r2, [pc, #640]	; (8006f68 <UART_SetConfig+0x308>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d126      	bne.n	8006d38 <UART_SetConfig+0xd8>
 8006cea:	4ba0      	ldr	r3, [pc, #640]	; (8006f6c <UART_SetConfig+0x30c>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d81b      	bhi.n	8006d30 <UART_SetConfig+0xd0>
 8006cf8:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0xa0>)
 8006cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfe:	bf00      	nop
 8006d00:	08006d11 	.word	0x08006d11
 8006d04:	08006d21 	.word	0x08006d21
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d16:	e080      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1e:	e07c      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006d20:	2304      	movs	r3, #4
 8006d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d26:	e078      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2e:	e074      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006d30:	2310      	movs	r3, #16
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d36:	e070      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a8c      	ldr	r2, [pc, #560]	; (8006f70 <UART_SetConfig+0x310>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d138      	bne.n	8006db4 <UART_SetConfig+0x154>
 8006d42:	4b8a      	ldr	r3, [pc, #552]	; (8006f6c <UART_SetConfig+0x30c>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d48:	f003 030c 	and.w	r3, r3, #12
 8006d4c:	2b0c      	cmp	r3, #12
 8006d4e:	d82d      	bhi.n	8006dac <UART_SetConfig+0x14c>
 8006d50:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <UART_SetConfig+0xf8>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006d8d 	.word	0x08006d8d
 8006d5c:	08006dad 	.word	0x08006dad
 8006d60:	08006dad 	.word	0x08006dad
 8006d64:	08006dad 	.word	0x08006dad
 8006d68:	08006d9d 	.word	0x08006d9d
 8006d6c:	08006dad 	.word	0x08006dad
 8006d70:	08006dad 	.word	0x08006dad
 8006d74:	08006dad 	.word	0x08006dad
 8006d78:	08006d95 	.word	0x08006d95
 8006d7c:	08006dad 	.word	0x08006dad
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	08006dad 	.word	0x08006dad
 8006d88:	08006da5 	.word	0x08006da5
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d92:	e042      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006d94:	2302      	movs	r3, #2
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e03e      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da2:	e03a      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006daa:	e036      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db2:	e032      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a6a      	ldr	r2, [pc, #424]	; (8006f64 <UART_SetConfig+0x304>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d12a      	bne.n	8006e14 <UART_SetConfig+0x1b4>
 8006dbe:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <UART_SetConfig+0x30c>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dcc:	d01a      	beq.n	8006e04 <UART_SetConfig+0x1a4>
 8006dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd2:	d81b      	bhi.n	8006e0c <UART_SetConfig+0x1ac>
 8006dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd8:	d00c      	beq.n	8006df4 <UART_SetConfig+0x194>
 8006dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dde:	d815      	bhi.n	8006e0c <UART_SetConfig+0x1ac>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <UART_SetConfig+0x18c>
 8006de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de8:	d008      	beq.n	8006dfc <UART_SetConfig+0x19c>
 8006dea:	e00f      	b.n	8006e0c <UART_SetConfig+0x1ac>
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df2:	e012      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006df4:	2302      	movs	r3, #2
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfa:	e00e      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e02:	e00a      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006e04:	2308      	movs	r3, #8
 8006e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0a:	e006      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e12:	e002      	b.n	8006e1a <UART_SetConfig+0x1ba>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a51      	ldr	r2, [pc, #324]	; (8006f64 <UART_SetConfig+0x304>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d17a      	bne.n	8006f1a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d824      	bhi.n	8006e76 <UART_SetConfig+0x216>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x1d4>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e77 	.word	0x08006e77
 8006e3c:	08006e61 	.word	0x08006e61
 8006e40:	08006e77 	.word	0x08006e77
 8006e44:	08006e67 	.word	0x08006e67
 8006e48:	08006e77 	.word	0x08006e77
 8006e4c:	08006e77 	.word	0x08006e77
 8006e50:	08006e77 	.word	0x08006e77
 8006e54:	08006e6f 	.word	0x08006e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fe fdfa 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	61f8      	str	r0, [r7, #28]
        break;
 8006e5e:	e010      	b.n	8006e82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e60:	4b44      	ldr	r3, [pc, #272]	; (8006f74 <UART_SetConfig+0x314>)
 8006e62:	61fb      	str	r3, [r7, #28]
        break;
 8006e64:	e00d      	b.n	8006e82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e66:	f7fe fd5b 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 8006e6a:	61f8      	str	r0, [r7, #28]
        break;
 8006e6c:	e009      	b.n	8006e82 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e72:	61fb      	str	r3, [r7, #28]
        break;
 8006e74:	e005      	b.n	8006e82 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 8107 	beq.w	8007098 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d305      	bcc.n	8006ea6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ea0:	69fa      	ldr	r2, [r7, #28]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d903      	bls.n	8006eae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006eac:	e0f4      	b.n	8007098 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	461c      	mov	r4, r3
 8006eb4:	4615      	mov	r5, r2
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	022b      	lsls	r3, r5, #8
 8006ec0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ec4:	0222      	lsls	r2, r4, #8
 8006ec6:	68f9      	ldr	r1, [r7, #12]
 8006ec8:	6849      	ldr	r1, [r1, #4]
 8006eca:	0849      	lsrs	r1, r1, #1
 8006ecc:	2000      	movs	r0, #0
 8006ece:	4688      	mov	r8, r1
 8006ed0:	4681      	mov	r9, r0
 8006ed2:	eb12 0a08 	adds.w	sl, r2, r8
 8006ed6:	eb43 0b09 	adc.w	fp, r3, r9
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee8:	4650      	mov	r0, sl
 8006eea:	4659      	mov	r1, fp
 8006eec:	f7f9 febc 	bl	8000c68 <__aeabi_uldivmod>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006efe:	d308      	bcc.n	8006f12 <UART_SetConfig+0x2b2>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f06:	d204      	bcs.n	8006f12 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	60da      	str	r2, [r3, #12]
 8006f10:	e0c2      	b.n	8007098 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f18:	e0be      	b.n	8007098 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f22:	d16a      	bne.n	8006ffa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d834      	bhi.n	8006f96 <UART_SetConfig+0x336>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <UART_SetConfig+0x2d4>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f79 	.word	0x08006f79
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f97 	.word	0x08006f97
 8006f44:	08006f87 	.word	0x08006f87
 8006f48:	08006f97 	.word	0x08006f97
 8006f4c:	08006f97 	.word	0x08006f97
 8006f50:	08006f97 	.word	0x08006f97
 8006f54:	08006f8f 	.word	0x08006f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f58:	f7fe fd7a 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	61f8      	str	r0, [r7, #28]
        break;
 8006f5e:	e020      	b.n	8006fa2 <UART_SetConfig+0x342>
 8006f60:	efff69f3 	.word	0xefff69f3
 8006f64:	40008000 	.word	0x40008000
 8006f68:	40013800 	.word	0x40013800
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	40004400 	.word	0x40004400
 8006f74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f78:	f7fe fd80 	bl	8005a7c <HAL_RCC_GetPCLK2Freq>
 8006f7c:	61f8      	str	r0, [r7, #28]
        break;
 8006f7e:	e010      	b.n	8006fa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f80:	4b4c      	ldr	r3, [pc, #304]	; (80070b4 <UART_SetConfig+0x454>)
 8006f82:	61fb      	str	r3, [r7, #28]
        break;
 8006f84:	e00d      	b.n	8006fa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f86:	f7fe fccb 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 8006f8a:	61f8      	str	r0, [r7, #28]
        break;
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f92:	61fb      	str	r3, [r7, #28]
        break;
 8006f94:	e005      	b.n	8006fa2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d077      	beq.n	8007098 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	005a      	lsls	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	085b      	lsrs	r3, r3, #1
 8006fb2:	441a      	add	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b0f      	cmp	r3, #15
 8006fc2:	d916      	bls.n	8006ff2 <UART_SetConfig+0x392>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fca:	d212      	bcs.n	8006ff2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f023 030f 	bic.w	r3, r3, #15
 8006fd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	8afb      	ldrh	r3, [r7, #22]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	8afa      	ldrh	r2, [r7, #22]
 8006fee:	60da      	str	r2, [r3, #12]
 8006ff0:	e052      	b.n	8007098 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ff8:	e04e      	b.n	8007098 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d827      	bhi.n	8007052 <UART_SetConfig+0x3f2>
 8007002:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <UART_SetConfig+0x3a8>)
 8007004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007008:	0800702d 	.word	0x0800702d
 800700c:	08007035 	.word	0x08007035
 8007010:	0800703d 	.word	0x0800703d
 8007014:	08007053 	.word	0x08007053
 8007018:	08007043 	.word	0x08007043
 800701c:	08007053 	.word	0x08007053
 8007020:	08007053 	.word	0x08007053
 8007024:	08007053 	.word	0x08007053
 8007028:	0800704b 	.word	0x0800704b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800702c:	f7fe fd10 	bl	8005a50 <HAL_RCC_GetPCLK1Freq>
 8007030:	61f8      	str	r0, [r7, #28]
        break;
 8007032:	e014      	b.n	800705e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007034:	f7fe fd22 	bl	8005a7c <HAL_RCC_GetPCLK2Freq>
 8007038:	61f8      	str	r0, [r7, #28]
        break;
 800703a:	e010      	b.n	800705e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800703c:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <UART_SetConfig+0x454>)
 800703e:	61fb      	str	r3, [r7, #28]
        break;
 8007040:	e00d      	b.n	800705e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007042:	f7fe fc6d 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 8007046:	61f8      	str	r0, [r7, #28]
        break;
 8007048:	e009      	b.n	800705e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800704a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704e:	61fb      	str	r3, [r7, #28]
        break;
 8007050:	e005      	b.n	800705e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800705c:	bf00      	nop
    }

    if (pclk != 0U)
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d019      	beq.n	8007098 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	085a      	lsrs	r2, r3, #1
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b0f      	cmp	r3, #15
 800707c:	d909      	bls.n	8007092 <UART_SetConfig+0x432>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007084:	d205      	bcs.n	8007092 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60da      	str	r2, [r3, #12]
 8007090:	e002      	b.n	8007098 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3728      	adds	r7, #40	; 0x28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b2:	bf00      	nop
 80070b4:	00f42400 	.word	0x00f42400

080070b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01a      	beq.n	80071ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b6:	d10a      	bne.n	80071ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af02      	add	r7, sp, #8
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800720c:	f7fb fa8a 	bl	8002724 <HAL_GetTick>
 8007210:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0308 	and.w	r3, r3, #8
 800721c:	2b08      	cmp	r3, #8
 800721e:	d10e      	bne.n	800723e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f82d 	bl	800728e <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e023      	b.n	8007286 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b04      	cmp	r3, #4
 800724a:	d10e      	bne.n	800726a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800724c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f817 	bl	800728e <UART_WaitOnFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e00d      	b.n	8007286 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b09c      	sub	sp, #112	; 0x70
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729e:	e0a5      	b.n	80073ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	f000 80a1 	beq.w	80073ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072aa:	f7fb fa3b 	bl	8002724 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d302      	bcc.n	80072c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80072ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d13e      	bne.n	800733e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072d4:	667b      	str	r3, [r7, #100]	; 0x64
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e6      	bne.n	80072c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	663b      	str	r3, [r7, #96]	; 0x60
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3308      	adds	r3, #8
 8007310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007312:	64ba      	str	r2, [r7, #72]	; 0x48
 8007314:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e5      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e067      	b.n	800740e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d04f      	beq.n	80073ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800735a:	d147      	bne.n	80073ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007364:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800737a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
 8007386:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800738a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	613b      	str	r3, [r7, #16]
   return(result);
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073b8:	623a      	str	r2, [r7, #32]
 80073ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	69f9      	ldr	r1, [r7, #28]
 80073be:	6a3a      	ldr	r2, [r7, #32]
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e5      	bne.n	8007398 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2220      	movs	r2, #32
 80073d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e010      	b.n	800740e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69da      	ldr	r2, [r3, #28]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4013      	ands	r3, r2
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	bf0c      	ite	eq
 80073fc:	2301      	moveq	r3, #1
 80073fe:	2300      	movne	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	429a      	cmp	r2, r3
 8007408:	f43f af4a 	beq.w	80072a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3770      	adds	r7, #112	; 0x70
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007418:	b480      	push	{r7}
 800741a:	b097      	sub	sp, #92	; 0x5c
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744a:	d10e      	bne.n	800746a <UART_Start_Receive_IT+0x52>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <UART_Start_Receive_IT+0x48>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f240 12ff 	movw	r2, #511	; 0x1ff
 800745a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800745e:	e02d      	b.n	80074bc <UART_Start_Receive_IT+0xa4>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	22ff      	movs	r2, #255	; 0xff
 8007464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007468:	e028      	b.n	80074bc <UART_Start_Receive_IT+0xa4>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <UART_Start_Receive_IT+0x76>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <UART_Start_Receive_IT+0x6c>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	22ff      	movs	r2, #255	; 0xff
 800747e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007482:	e01b      	b.n	80074bc <UART_Start_Receive_IT+0xa4>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	227f      	movs	r2, #127	; 0x7f
 8007488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800748c:	e016      	b.n	80074bc <UART_Start_Receive_IT+0xa4>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007496:	d10d      	bne.n	80074b4 <UART_Start_Receive_IT+0x9c>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <UART_Start_Receive_IT+0x92>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	227f      	movs	r2, #127	; 0x7f
 80074a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074a8:	e008      	b.n	80074bc <UART_Start_Receive_IT+0xa4>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	223f      	movs	r2, #63	; 0x3f
 80074ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b2:	e003      	b.n	80074bc <UART_Start_Receive_IT+0xa4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2222      	movs	r2, #34	; 0x22
 80074c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3308      	adds	r3, #8
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	657b      	str	r3, [r7, #84]	; 0x54
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80074ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e5      	bne.n	80074ca <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007506:	d107      	bne.n	8007518 <UART_Start_Receive_IT+0x100>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4a24      	ldr	r2, [pc, #144]	; (80075a4 <UART_Start_Receive_IT+0x18c>)
 8007514:	665a      	str	r2, [r3, #100]	; 0x64
 8007516:	e002      	b.n	800751e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4a23      	ldr	r2, [pc, #140]	; (80075a8 <UART_Start_Receive_IT+0x190>)
 800751c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d019      	beq.n	8007562 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
 800754e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <UART_Start_Receive_IT+0x116>
 8007560:	e018      	b.n	8007594 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	613b      	str	r3, [r7, #16]
   return(result);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f043 0320 	orr.w	r3, r3, #32
 8007576:	653b      	str	r3, [r7, #80]	; 0x50
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	623b      	str	r3, [r7, #32]
 8007582:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	69f9      	ldr	r1, [r7, #28]
 8007586:	6a3a      	ldr	r2, [r7, #32]
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	61bb      	str	r3, [r7, #24]
   return(result);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e6      	bne.n	8007562 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	375c      	adds	r7, #92	; 0x5c
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	080079cb 	.word	0x080079cb
 80075a8:	0800786b 	.word	0x0800786b

080075ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b095      	sub	sp, #84	; 0x54
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d2:	643b      	str	r3, [r7, #64]	; 0x40
 80075d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e6      	bne.n	80075b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3308      	adds	r3, #8
 80075ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007608:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800760c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761e:	2b01      	cmp	r3, #1
 8007620:	d118      	bne.n	8007654 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f023 0310 	bic.w	r3, r3, #16
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6979      	ldr	r1, [r7, #20]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	613b      	str	r3, [r7, #16]
   return(result);
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e6      	bne.n	8007622 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007666:	bf00      	nop
 8007668:	3754      	adds	r7, #84	; 0x54
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff facf 	bl	8006c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800769e:	b480      	push	{r7}
 80076a0:	b08f      	sub	sp, #60	; 0x3c
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076aa:	2b21      	cmp	r3, #33	; 0x21
 80076ac:	d14d      	bne.n	800774a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d132      	bne.n	8007720 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076da:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e6      	bne.n	80076ba <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007700:	633b      	str	r3, [r7, #48]	; 0x30
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6979      	ldr	r1, [r7, #20]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	613b      	str	r3, [r7, #16]
   return(result);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e6      	bne.n	80076ec <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800771e:	e014      	b.n	800774a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007724:	781a      	ldrb	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	b292      	uxth	r2, r2
 800772c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800774a:	bf00      	nop
 800774c:	373c      	adds	r7, #60	; 0x3c
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007756:	b480      	push	{r7}
 8007758:	b091      	sub	sp, #68	; 0x44
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007762:	2b21      	cmp	r3, #33	; 0x21
 8007764:	d151      	bne.n	800780a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d132      	bne.n	80077d8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	623b      	str	r3, [r7, #32]
   return(result);
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007786:	63bb      	str	r3, [r7, #56]	; 0x38
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
 8007792:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e6      	bne.n	8007772 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	617b      	str	r3, [r7, #20]
   return(result);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80077d6:	e018      	b.n	800780a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e0:	881a      	ldrh	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077ea:	b292      	uxth	r2, r2
 80077ec:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800780a:	bf00      	nop
 800780c:	3744      	adds	r7, #68	; 0x44
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b088      	sub	sp, #32
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	60bb      	str	r3, [r7, #8]
   return(result);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6979      	ldr	r1, [r7, #20]
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	613b      	str	r3, [r7, #16]
   return(result);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e6      	bne.n	800781e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff f9d5 	bl	8006c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007862:	bf00      	nop
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b096      	sub	sp, #88	; 0x58
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007878:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007880:	2b22      	cmp	r3, #34	; 0x22
 8007882:	f040 8094 	bne.w	80079ae <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800788c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007890:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007894:	b2d9      	uxtb	r1, r3
 8007896:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800789a:	b2da      	uxtb	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	400a      	ands	r2, r1
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d179      	bne.n	80079c2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078e2:	653b      	str	r3, [r7, #80]	; 0x50
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ec:	647b      	str	r3, [r7, #68]	; 0x44
 80078ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f4:	e841 2300 	strex	r3, r2, [r1]
 80078f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e6      	bne.n	80078ce <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	623b      	str	r3, [r7, #32]
   return(result);
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	f023 0301 	bic.w	r3, r3, #1
 8007916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007920:	633a      	str	r2, [r7, #48]	; 0x30
 8007922:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e5      	bne.n	8007900 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007944:	2b01      	cmp	r3, #1
 8007946:	d12e      	bne.n	80079a6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	60fb      	str	r3, [r7, #12]
   return(result);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0310 	bic.w	r3, r3, #16
 8007962:	64bb      	str	r3, [r7, #72]	; 0x48
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	69b9      	ldr	r1, [r7, #24]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	617b      	str	r3, [r7, #20]
   return(result);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f003 0310 	and.w	r3, r3, #16
 800798a:	2b10      	cmp	r3, #16
 800798c:	d103      	bne.n	8007996 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2210      	movs	r2, #16
 8007994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff f952 	bl	8006c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079a4:	e00d      	b.n	80079c2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff f93a 	bl	8006c20 <HAL_UART_RxCpltCallback>
}
 80079ac:	e009      	b.n	80079c2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	8b1b      	ldrh	r3, [r3, #24]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0208 	orr.w	r2, r2, #8
 80079be:	b292      	uxth	r2, r2
 80079c0:	831a      	strh	r2, [r3, #24]
}
 80079c2:	bf00      	nop
 80079c4:	3758      	adds	r7, #88	; 0x58
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b096      	sub	sp, #88	; 0x58
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e0:	2b22      	cmp	r3, #34	; 0x22
 80079e2:	f040 8094 	bne.w	8007b0e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80079f6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80079fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80079fe:	4013      	ands	r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0a:	1c9a      	adds	r2, r3, #2
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d179      	bne.n	8007b22 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3308      	adds	r3, #8
 8007a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f023 0301 	bic.w	r3, r3, #1
 8007a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e5      	bne.n	8007a60 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d12e      	bne.n	8007b06 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f023 0310 	bic.w	r3, r3, #16
 8007ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6979      	ldr	r1, [r7, #20]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e6      	bne.n	8007aae <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f003 0310 	and.w	r3, r3, #16
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d103      	bne.n	8007af6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2210      	movs	r2, #16
 8007af4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff f8a2 	bl	8006c48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b04:	e00d      	b.n	8007b22 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff f88a 	bl	8006c20 <HAL_UART_RxCpltCallback>
}
 8007b0c:	e009      	b.n	8007b22 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	8b1b      	ldrh	r3, [r3, #24]
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0208 	orr.w	r2, r2, #8
 8007b1e:	b292      	uxth	r2, r2
 8007b20:	831a      	strh	r2, [r3, #24]
}
 8007b22:	bf00      	nop
 8007b24:	3758      	adds	r7, #88	; 0x58
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <__errno>:
 8007b40:	4b01      	ldr	r3, [pc, #4]	; (8007b48 <__errno+0x8>)
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	2000000c 	.word	0x2000000c

08007b4c <__libc_init_array>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	4d0d      	ldr	r5, [pc, #52]	; (8007b84 <__libc_init_array+0x38>)
 8007b50:	4c0d      	ldr	r4, [pc, #52]	; (8007b88 <__libc_init_array+0x3c>)
 8007b52:	1b64      	subs	r4, r4, r5
 8007b54:	10a4      	asrs	r4, r4, #2
 8007b56:	2600      	movs	r6, #0
 8007b58:	42a6      	cmp	r6, r4
 8007b5a:	d109      	bne.n	8007b70 <__libc_init_array+0x24>
 8007b5c:	4d0b      	ldr	r5, [pc, #44]	; (8007b8c <__libc_init_array+0x40>)
 8007b5e:	4c0c      	ldr	r4, [pc, #48]	; (8007b90 <__libc_init_array+0x44>)
 8007b60:	f002 ffae 	bl	800aac0 <_init>
 8007b64:	1b64      	subs	r4, r4, r5
 8007b66:	10a4      	asrs	r4, r4, #2
 8007b68:	2600      	movs	r6, #0
 8007b6a:	42a6      	cmp	r6, r4
 8007b6c:	d105      	bne.n	8007b7a <__libc_init_array+0x2e>
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b74:	4798      	blx	r3
 8007b76:	3601      	adds	r6, #1
 8007b78:	e7ee      	b.n	8007b58 <__libc_init_array+0xc>
 8007b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7e:	4798      	blx	r3
 8007b80:	3601      	adds	r6, #1
 8007b82:	e7f2      	b.n	8007b6a <__libc_init_array+0x1e>
 8007b84:	0800b6d4 	.word	0x0800b6d4
 8007b88:	0800b6d4 	.word	0x0800b6d4
 8007b8c:	0800b6d4 	.word	0x0800b6d4
 8007b90:	0800b6d8 	.word	0x0800b6d8

08007b94 <malloc>:
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <malloc+0xc>)
 8007b96:	4601      	mov	r1, r0
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	f000 b88d 	b.w	8007cb8 <_malloc_r>
 8007b9e:	bf00      	nop
 8007ba0:	2000000c 	.word	0x2000000c

08007ba4 <free>:
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <free+0xc>)
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f000 b819 	b.w	8007be0 <_free_r>
 8007bae:	bf00      	nop
 8007bb0:	2000000c 	.word	0x2000000c

08007bb4 <memcpy>:
 8007bb4:	440a      	add	r2, r1
 8007bb6:	4291      	cmp	r1, r2
 8007bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bbc:	d100      	bne.n	8007bc0 <memcpy+0xc>
 8007bbe:	4770      	bx	lr
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	d1f9      	bne.n	8007bc2 <memcpy+0xe>
 8007bce:	bd10      	pop	{r4, pc}

08007bd0 <memset>:
 8007bd0:	4402      	add	r2, r0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d100      	bne.n	8007bda <memset+0xa>
 8007bd8:	4770      	bx	lr
 8007bda:	f803 1b01 	strb.w	r1, [r3], #1
 8007bde:	e7f9      	b.n	8007bd4 <memset+0x4>

08007be0 <_free_r>:
 8007be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007be2:	2900      	cmp	r1, #0
 8007be4:	d044      	beq.n	8007c70 <_free_r+0x90>
 8007be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bea:	9001      	str	r0, [sp, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f1a1 0404 	sub.w	r4, r1, #4
 8007bf2:	bfb8      	it	lt
 8007bf4:	18e4      	addlt	r4, r4, r3
 8007bf6:	f001 fcbf 	bl	8009578 <__malloc_lock>
 8007bfa:	4a1e      	ldr	r2, [pc, #120]	; (8007c74 <_free_r+0x94>)
 8007bfc:	9801      	ldr	r0, [sp, #4]
 8007bfe:	6813      	ldr	r3, [r2, #0]
 8007c00:	b933      	cbnz	r3, 8007c10 <_free_r+0x30>
 8007c02:	6063      	str	r3, [r4, #4]
 8007c04:	6014      	str	r4, [r2, #0]
 8007c06:	b003      	add	sp, #12
 8007c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c0c:	f001 bcba 	b.w	8009584 <__malloc_unlock>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d908      	bls.n	8007c26 <_free_r+0x46>
 8007c14:	6825      	ldr	r5, [r4, #0]
 8007c16:	1961      	adds	r1, r4, r5
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	bf01      	itttt	eq
 8007c1c:	6819      	ldreq	r1, [r3, #0]
 8007c1e:	685b      	ldreq	r3, [r3, #4]
 8007c20:	1949      	addeq	r1, r1, r5
 8007c22:	6021      	streq	r1, [r4, #0]
 8007c24:	e7ed      	b.n	8007c02 <_free_r+0x22>
 8007c26:	461a      	mov	r2, r3
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	b10b      	cbz	r3, 8007c30 <_free_r+0x50>
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	d9fa      	bls.n	8007c26 <_free_r+0x46>
 8007c30:	6811      	ldr	r1, [r2, #0]
 8007c32:	1855      	adds	r5, r2, r1
 8007c34:	42a5      	cmp	r5, r4
 8007c36:	d10b      	bne.n	8007c50 <_free_r+0x70>
 8007c38:	6824      	ldr	r4, [r4, #0]
 8007c3a:	4421      	add	r1, r4
 8007c3c:	1854      	adds	r4, r2, r1
 8007c3e:	42a3      	cmp	r3, r4
 8007c40:	6011      	str	r1, [r2, #0]
 8007c42:	d1e0      	bne.n	8007c06 <_free_r+0x26>
 8007c44:	681c      	ldr	r4, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	6053      	str	r3, [r2, #4]
 8007c4a:	4421      	add	r1, r4
 8007c4c:	6011      	str	r1, [r2, #0]
 8007c4e:	e7da      	b.n	8007c06 <_free_r+0x26>
 8007c50:	d902      	bls.n	8007c58 <_free_r+0x78>
 8007c52:	230c      	movs	r3, #12
 8007c54:	6003      	str	r3, [r0, #0]
 8007c56:	e7d6      	b.n	8007c06 <_free_r+0x26>
 8007c58:	6825      	ldr	r5, [r4, #0]
 8007c5a:	1961      	adds	r1, r4, r5
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	bf04      	itt	eq
 8007c60:	6819      	ldreq	r1, [r3, #0]
 8007c62:	685b      	ldreq	r3, [r3, #4]
 8007c64:	6063      	str	r3, [r4, #4]
 8007c66:	bf04      	itt	eq
 8007c68:	1949      	addeq	r1, r1, r5
 8007c6a:	6021      	streq	r1, [r4, #0]
 8007c6c:	6054      	str	r4, [r2, #4]
 8007c6e:	e7ca      	b.n	8007c06 <_free_r+0x26>
 8007c70:	b003      	add	sp, #12
 8007c72:	bd30      	pop	{r4, r5, pc}
 8007c74:	200006b4 	.word	0x200006b4

08007c78 <sbrk_aligned>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4e0e      	ldr	r6, [pc, #56]	; (8007cb4 <sbrk_aligned+0x3c>)
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	6831      	ldr	r1, [r6, #0]
 8007c80:	4605      	mov	r5, r0
 8007c82:	b911      	cbnz	r1, 8007c8a <sbrk_aligned+0x12>
 8007c84:	f000 fcf6 	bl	8008674 <_sbrk_r>
 8007c88:	6030      	str	r0, [r6, #0]
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 fcf1 	bl	8008674 <_sbrk_r>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d00a      	beq.n	8007cac <sbrk_aligned+0x34>
 8007c96:	1cc4      	adds	r4, r0, #3
 8007c98:	f024 0403 	bic.w	r4, r4, #3
 8007c9c:	42a0      	cmp	r0, r4
 8007c9e:	d007      	beq.n	8007cb0 <sbrk_aligned+0x38>
 8007ca0:	1a21      	subs	r1, r4, r0
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 fce6 	bl	8008674 <_sbrk_r>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d101      	bne.n	8007cb0 <sbrk_aligned+0x38>
 8007cac:	f04f 34ff 	mov.w	r4, #4294967295
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	200006b8 	.word	0x200006b8

08007cb8 <_malloc_r>:
 8007cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	1ccd      	adds	r5, r1, #3
 8007cbe:	f025 0503 	bic.w	r5, r5, #3
 8007cc2:	3508      	adds	r5, #8
 8007cc4:	2d0c      	cmp	r5, #12
 8007cc6:	bf38      	it	cc
 8007cc8:	250c      	movcc	r5, #12
 8007cca:	2d00      	cmp	r5, #0
 8007ccc:	4607      	mov	r7, r0
 8007cce:	db01      	blt.n	8007cd4 <_malloc_r+0x1c>
 8007cd0:	42a9      	cmp	r1, r5
 8007cd2:	d905      	bls.n	8007ce0 <_malloc_r+0x28>
 8007cd4:	230c      	movs	r3, #12
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	2600      	movs	r6, #0
 8007cda:	4630      	mov	r0, r6
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	4e2e      	ldr	r6, [pc, #184]	; (8007d9c <_malloc_r+0xe4>)
 8007ce2:	f001 fc49 	bl	8009578 <__malloc_lock>
 8007ce6:	6833      	ldr	r3, [r6, #0]
 8007ce8:	461c      	mov	r4, r3
 8007cea:	bb34      	cbnz	r4, 8007d3a <_malloc_r+0x82>
 8007cec:	4629      	mov	r1, r5
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f7ff ffc2 	bl	8007c78 <sbrk_aligned>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	d14d      	bne.n	8007d96 <_malloc_r+0xde>
 8007cfa:	6834      	ldr	r4, [r6, #0]
 8007cfc:	4626      	mov	r6, r4
 8007cfe:	2e00      	cmp	r6, #0
 8007d00:	d140      	bne.n	8007d84 <_malloc_r+0xcc>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	4631      	mov	r1, r6
 8007d06:	4638      	mov	r0, r7
 8007d08:	eb04 0803 	add.w	r8, r4, r3
 8007d0c:	f000 fcb2 	bl	8008674 <_sbrk_r>
 8007d10:	4580      	cmp	r8, r0
 8007d12:	d13a      	bne.n	8007d8a <_malloc_r+0xd2>
 8007d14:	6821      	ldr	r1, [r4, #0]
 8007d16:	3503      	adds	r5, #3
 8007d18:	1a6d      	subs	r5, r5, r1
 8007d1a:	f025 0503 	bic.w	r5, r5, #3
 8007d1e:	3508      	adds	r5, #8
 8007d20:	2d0c      	cmp	r5, #12
 8007d22:	bf38      	it	cc
 8007d24:	250c      	movcc	r5, #12
 8007d26:	4629      	mov	r1, r5
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f7ff ffa5 	bl	8007c78 <sbrk_aligned>
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d02b      	beq.n	8007d8a <_malloc_r+0xd2>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	442b      	add	r3, r5
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	e00e      	b.n	8007d58 <_malloc_r+0xa0>
 8007d3a:	6822      	ldr	r2, [r4, #0]
 8007d3c:	1b52      	subs	r2, r2, r5
 8007d3e:	d41e      	bmi.n	8007d7e <_malloc_r+0xc6>
 8007d40:	2a0b      	cmp	r2, #11
 8007d42:	d916      	bls.n	8007d72 <_malloc_r+0xba>
 8007d44:	1961      	adds	r1, r4, r5
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	6025      	str	r5, [r4, #0]
 8007d4a:	bf18      	it	ne
 8007d4c:	6059      	strne	r1, [r3, #4]
 8007d4e:	6863      	ldr	r3, [r4, #4]
 8007d50:	bf08      	it	eq
 8007d52:	6031      	streq	r1, [r6, #0]
 8007d54:	5162      	str	r2, [r4, r5]
 8007d56:	604b      	str	r3, [r1, #4]
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f104 060b 	add.w	r6, r4, #11
 8007d5e:	f001 fc11 	bl	8009584 <__malloc_unlock>
 8007d62:	f026 0607 	bic.w	r6, r6, #7
 8007d66:	1d23      	adds	r3, r4, #4
 8007d68:	1af2      	subs	r2, r6, r3
 8007d6a:	d0b6      	beq.n	8007cda <_malloc_r+0x22>
 8007d6c:	1b9b      	subs	r3, r3, r6
 8007d6e:	50a3      	str	r3, [r4, r2]
 8007d70:	e7b3      	b.n	8007cda <_malloc_r+0x22>
 8007d72:	6862      	ldr	r2, [r4, #4]
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	bf0c      	ite	eq
 8007d78:	6032      	streq	r2, [r6, #0]
 8007d7a:	605a      	strne	r2, [r3, #4]
 8007d7c:	e7ec      	b.n	8007d58 <_malloc_r+0xa0>
 8007d7e:	4623      	mov	r3, r4
 8007d80:	6864      	ldr	r4, [r4, #4]
 8007d82:	e7b2      	b.n	8007cea <_malloc_r+0x32>
 8007d84:	4634      	mov	r4, r6
 8007d86:	6876      	ldr	r6, [r6, #4]
 8007d88:	e7b9      	b.n	8007cfe <_malloc_r+0x46>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f001 fbf8 	bl	8009584 <__malloc_unlock>
 8007d94:	e7a1      	b.n	8007cda <_malloc_r+0x22>
 8007d96:	6025      	str	r5, [r4, #0]
 8007d98:	e7de      	b.n	8007d58 <_malloc_r+0xa0>
 8007d9a:	bf00      	nop
 8007d9c:	200006b4 	.word	0x200006b4

08007da0 <__cvt>:
 8007da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da4:	ec55 4b10 	vmov	r4, r5, d0
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	460e      	mov	r6, r1
 8007dac:	4619      	mov	r1, r3
 8007dae:	462b      	mov	r3, r5
 8007db0:	bfbb      	ittet	lt
 8007db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007db6:	461d      	movlt	r5, r3
 8007db8:	2300      	movge	r3, #0
 8007dba:	232d      	movlt	r3, #45	; 0x2d
 8007dbc:	700b      	strb	r3, [r1, #0]
 8007dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dc4:	4691      	mov	r9, r2
 8007dc6:	f023 0820 	bic.w	r8, r3, #32
 8007dca:	bfbc      	itt	lt
 8007dcc:	4622      	movlt	r2, r4
 8007dce:	4614      	movlt	r4, r2
 8007dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dd4:	d005      	beq.n	8007de2 <__cvt+0x42>
 8007dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dda:	d100      	bne.n	8007dde <__cvt+0x3e>
 8007ddc:	3601      	adds	r6, #1
 8007dde:	2102      	movs	r1, #2
 8007de0:	e000      	b.n	8007de4 <__cvt+0x44>
 8007de2:	2103      	movs	r1, #3
 8007de4:	ab03      	add	r3, sp, #12
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	ab02      	add	r3, sp, #8
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	ec45 4b10 	vmov	d0, r4, r5
 8007df0:	4653      	mov	r3, sl
 8007df2:	4632      	mov	r2, r6
 8007df4:	f000 fdbc 	bl	8008970 <_dtoa_r>
 8007df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	d102      	bne.n	8007e06 <__cvt+0x66>
 8007e00:	f019 0f01 	tst.w	r9, #1
 8007e04:	d022      	beq.n	8007e4c <__cvt+0xac>
 8007e06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e0a:	eb07 0906 	add.w	r9, r7, r6
 8007e0e:	d110      	bne.n	8007e32 <__cvt+0x92>
 8007e10:	783b      	ldrb	r3, [r7, #0]
 8007e12:	2b30      	cmp	r3, #48	; 0x30
 8007e14:	d10a      	bne.n	8007e2c <__cvt+0x8c>
 8007e16:	2200      	movs	r2, #0
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	f7f8 fe63 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e22:	b918      	cbnz	r0, 8007e2c <__cvt+0x8c>
 8007e24:	f1c6 0601 	rsb	r6, r6, #1
 8007e28:	f8ca 6000 	str.w	r6, [sl]
 8007e2c:	f8da 3000 	ldr.w	r3, [sl]
 8007e30:	4499      	add	r9, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fe55 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e3e:	b108      	cbz	r0, 8007e44 <__cvt+0xa4>
 8007e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e44:	2230      	movs	r2, #48	; 0x30
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	454b      	cmp	r3, r9
 8007e4a:	d307      	bcc.n	8007e5c <__cvt+0xbc>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e50:	1bdb      	subs	r3, r3, r7
 8007e52:	4638      	mov	r0, r7
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	b004      	add	sp, #16
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	1c59      	adds	r1, r3, #1
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e7f0      	b.n	8007e46 <__cvt+0xa6>

08007e64 <__exponent>:
 8007e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e66:	4603      	mov	r3, r0
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	bfb8      	it	lt
 8007e6c:	4249      	neglt	r1, r1
 8007e6e:	f803 2b02 	strb.w	r2, [r3], #2
 8007e72:	bfb4      	ite	lt
 8007e74:	222d      	movlt	r2, #45	; 0x2d
 8007e76:	222b      	movge	r2, #43	; 0x2b
 8007e78:	2909      	cmp	r1, #9
 8007e7a:	7042      	strb	r2, [r0, #1]
 8007e7c:	dd2a      	ble.n	8007ed4 <__exponent+0x70>
 8007e7e:	f10d 0407 	add.w	r4, sp, #7
 8007e82:	46a4      	mov	ip, r4
 8007e84:	270a      	movs	r7, #10
 8007e86:	46a6      	mov	lr, r4
 8007e88:	460a      	mov	r2, r1
 8007e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e8e:	fb07 1516 	mls	r5, r7, r6, r1
 8007e92:	3530      	adds	r5, #48	; 0x30
 8007e94:	2a63      	cmp	r2, #99	; 0x63
 8007e96:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	dcf1      	bgt.n	8007e86 <__exponent+0x22>
 8007ea2:	3130      	adds	r1, #48	; 0x30
 8007ea4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ea8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007eac:	1c44      	adds	r4, r0, #1
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4561      	cmp	r1, ip
 8007eb2:	d30a      	bcc.n	8007eca <__exponent+0x66>
 8007eb4:	f10d 0209 	add.w	r2, sp, #9
 8007eb8:	eba2 020e 	sub.w	r2, r2, lr
 8007ebc:	4565      	cmp	r5, ip
 8007ebe:	bf88      	it	hi
 8007ec0:	2200      	movhi	r2, #0
 8007ec2:	4413      	add	r3, r2
 8007ec4:	1a18      	subs	r0, r3, r0
 8007ec6:	b003      	add	sp, #12
 8007ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ece:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ed2:	e7ed      	b.n	8007eb0 <__exponent+0x4c>
 8007ed4:	2330      	movs	r3, #48	; 0x30
 8007ed6:	3130      	adds	r1, #48	; 0x30
 8007ed8:	7083      	strb	r3, [r0, #2]
 8007eda:	70c1      	strb	r1, [r0, #3]
 8007edc:	1d03      	adds	r3, r0, #4
 8007ede:	e7f1      	b.n	8007ec4 <__exponent+0x60>

08007ee0 <_printf_float>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	ed2d 8b02 	vpush	{d8}
 8007ee8:	b08d      	sub	sp, #52	; 0x34
 8007eea:	460c      	mov	r4, r1
 8007eec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	f001 fb3b 	bl	8009570 <_localeconv_r>
 8007efa:	f8d0 a000 	ldr.w	sl, [r0]
 8007efe:	4650      	mov	r0, sl
 8007f00:	f7f8 f970 	bl	80001e4 <strlen>
 8007f04:	2300      	movs	r3, #0
 8007f06:	930a      	str	r3, [sp, #40]	; 0x28
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f14:	3307      	adds	r3, #7
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	f103 0208 	add.w	r2, r3, #8
 8007f1e:	f8c8 2000 	str.w	r2, [r8]
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f32:	9307      	str	r3, [sp, #28]
 8007f34:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f38:	ee08 0a10 	vmov	s16, r0
 8007f3c:	4b9f      	ldr	r3, [pc, #636]	; (80081bc <_printf_float+0x2dc>)
 8007f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
 8007f46:	f7f8 fe01 	bl	8000b4c <__aeabi_dcmpun>
 8007f4a:	bb88      	cbnz	r0, 8007fb0 <_printf_float+0xd0>
 8007f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f50:	4b9a      	ldr	r3, [pc, #616]	; (80081bc <_printf_float+0x2dc>)
 8007f52:	f04f 32ff 	mov.w	r2, #4294967295
 8007f56:	f7f8 fddb 	bl	8000b10 <__aeabi_dcmple>
 8007f5a:	bb48      	cbnz	r0, 8007fb0 <_printf_float+0xd0>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	f7f8 fdca 	bl	8000afc <__aeabi_dcmplt>
 8007f68:	b110      	cbz	r0, 8007f70 <_printf_float+0x90>
 8007f6a:	232d      	movs	r3, #45	; 0x2d
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	4b93      	ldr	r3, [pc, #588]	; (80081c0 <_printf_float+0x2e0>)
 8007f72:	4894      	ldr	r0, [pc, #592]	; (80081c4 <_printf_float+0x2e4>)
 8007f74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f78:	bf94      	ite	ls
 8007f7a:	4698      	movls	r8, r3
 8007f7c:	4680      	movhi	r8, r0
 8007f7e:	2303      	movs	r3, #3
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	f023 0204 	bic.w	r2, r3, #4
 8007f88:	6022      	str	r2, [r4, #0]
 8007f8a:	f04f 0900 	mov.w	r9, #0
 8007f8e:	9700      	str	r7, [sp, #0]
 8007f90:	4633      	mov	r3, r6
 8007f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f94:	4621      	mov	r1, r4
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f9d8 	bl	800834c <_printf_common>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f040 8090 	bne.w	80080c2 <_printf_float+0x1e2>
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	b00d      	add	sp, #52	; 0x34
 8007fa8:	ecbd 8b02 	vpop	{d8}
 8007fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	f7f8 fdc8 	bl	8000b4c <__aeabi_dcmpun>
 8007fbc:	b140      	cbz	r0, 8007fd0 <_printf_float+0xf0>
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bfbc      	itt	lt
 8007fc4:	232d      	movlt	r3, #45	; 0x2d
 8007fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fca:	487f      	ldr	r0, [pc, #508]	; (80081c8 <_printf_float+0x2e8>)
 8007fcc:	4b7f      	ldr	r3, [pc, #508]	; (80081cc <_printf_float+0x2ec>)
 8007fce:	e7d1      	b.n	8007f74 <_printf_float+0x94>
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fd6:	9206      	str	r2, [sp, #24]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	d13f      	bne.n	800805c <_printf_float+0x17c>
 8007fdc:	2306      	movs	r3, #6
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	6861      	ldr	r1, [r4, #4]
 8007fe4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9303      	str	r3, [sp, #12]
 8007fec:	ab0a      	add	r3, sp, #40	; 0x28
 8007fee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007ff2:	ab09      	add	r3, sp, #36	; 0x24
 8007ff4:	ec49 8b10 	vmov	d0, r8, r9
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	6022      	str	r2, [r4, #0]
 8007ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008000:	4628      	mov	r0, r5
 8008002:	f7ff fecd 	bl	8007da0 <__cvt>
 8008006:	9b06      	ldr	r3, [sp, #24]
 8008008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800800a:	2b47      	cmp	r3, #71	; 0x47
 800800c:	4680      	mov	r8, r0
 800800e:	d108      	bne.n	8008022 <_printf_float+0x142>
 8008010:	1cc8      	adds	r0, r1, #3
 8008012:	db02      	blt.n	800801a <_printf_float+0x13a>
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	4299      	cmp	r1, r3
 8008018:	dd41      	ble.n	800809e <_printf_float+0x1be>
 800801a:	f1ab 0b02 	sub.w	fp, fp, #2
 800801e:	fa5f fb8b 	uxtb.w	fp, fp
 8008022:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008026:	d820      	bhi.n	800806a <_printf_float+0x18a>
 8008028:	3901      	subs	r1, #1
 800802a:	465a      	mov	r2, fp
 800802c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008030:	9109      	str	r1, [sp, #36]	; 0x24
 8008032:	f7ff ff17 	bl	8007e64 <__exponent>
 8008036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008038:	1813      	adds	r3, r2, r0
 800803a:	2a01      	cmp	r2, #1
 800803c:	4681      	mov	r9, r0
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	dc02      	bgt.n	8008048 <_printf_float+0x168>
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	07d2      	lsls	r2, r2, #31
 8008046:	d501      	bpl.n	800804c <_printf_float+0x16c>
 8008048:	3301      	adds	r3, #1
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008050:	2b00      	cmp	r3, #0
 8008052:	d09c      	beq.n	8007f8e <_printf_float+0xae>
 8008054:	232d      	movs	r3, #45	; 0x2d
 8008056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800805a:	e798      	b.n	8007f8e <_printf_float+0xae>
 800805c:	9a06      	ldr	r2, [sp, #24]
 800805e:	2a47      	cmp	r2, #71	; 0x47
 8008060:	d1be      	bne.n	8007fe0 <_printf_float+0x100>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1bc      	bne.n	8007fe0 <_printf_float+0x100>
 8008066:	2301      	movs	r3, #1
 8008068:	e7b9      	b.n	8007fde <_printf_float+0xfe>
 800806a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800806e:	d118      	bne.n	80080a2 <_printf_float+0x1c2>
 8008070:	2900      	cmp	r1, #0
 8008072:	6863      	ldr	r3, [r4, #4]
 8008074:	dd0b      	ble.n	800808e <_printf_float+0x1ae>
 8008076:	6121      	str	r1, [r4, #16]
 8008078:	b913      	cbnz	r3, 8008080 <_printf_float+0x1a0>
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	07d0      	lsls	r0, r2, #31
 800807e:	d502      	bpl.n	8008086 <_printf_float+0x1a6>
 8008080:	3301      	adds	r3, #1
 8008082:	440b      	add	r3, r1
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	65a1      	str	r1, [r4, #88]	; 0x58
 8008088:	f04f 0900 	mov.w	r9, #0
 800808c:	e7de      	b.n	800804c <_printf_float+0x16c>
 800808e:	b913      	cbnz	r3, 8008096 <_printf_float+0x1b6>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	07d2      	lsls	r2, r2, #31
 8008094:	d501      	bpl.n	800809a <_printf_float+0x1ba>
 8008096:	3302      	adds	r3, #2
 8008098:	e7f4      	b.n	8008084 <_printf_float+0x1a4>
 800809a:	2301      	movs	r3, #1
 800809c:	e7f2      	b.n	8008084 <_printf_float+0x1a4>
 800809e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a4:	4299      	cmp	r1, r3
 80080a6:	db05      	blt.n	80080b4 <_printf_float+0x1d4>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	6121      	str	r1, [r4, #16]
 80080ac:	07d8      	lsls	r0, r3, #31
 80080ae:	d5ea      	bpl.n	8008086 <_printf_float+0x1a6>
 80080b0:	1c4b      	adds	r3, r1, #1
 80080b2:	e7e7      	b.n	8008084 <_printf_float+0x1a4>
 80080b4:	2900      	cmp	r1, #0
 80080b6:	bfd4      	ite	le
 80080b8:	f1c1 0202 	rsble	r2, r1, #2
 80080bc:	2201      	movgt	r2, #1
 80080be:	4413      	add	r3, r2
 80080c0:	e7e0      	b.n	8008084 <_printf_float+0x1a4>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	055a      	lsls	r2, r3, #21
 80080c6:	d407      	bmi.n	80080d8 <_printf_float+0x1f8>
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	4642      	mov	r2, r8
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	d12c      	bne.n	8008130 <_printf_float+0x250>
 80080d6:	e764      	b.n	8007fa2 <_printf_float+0xc2>
 80080d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080dc:	f240 80e0 	bls.w	80082a0 <_printf_float+0x3c0>
 80080e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	f7f8 fcfe 	bl	8000ae8 <__aeabi_dcmpeq>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d034      	beq.n	800815a <_printf_float+0x27a>
 80080f0:	4a37      	ldr	r2, [pc, #220]	; (80081d0 <_printf_float+0x2f0>)
 80080f2:	2301      	movs	r3, #1
 80080f4:	4631      	mov	r1, r6
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	f43f af51 	beq.w	8007fa2 <_printf_float+0xc2>
 8008100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008104:	429a      	cmp	r2, r3
 8008106:	db02      	blt.n	800810e <_printf_float+0x22e>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	07d8      	lsls	r0, r3, #31
 800810c:	d510      	bpl.n	8008130 <_printf_float+0x250>
 800810e:	ee18 3a10 	vmov	r3, s16
 8008112:	4652      	mov	r2, sl
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af41 	beq.w	8007fa2 <_printf_float+0xc2>
 8008120:	f04f 0800 	mov.w	r8, #0
 8008124:	f104 091a 	add.w	r9, r4, #26
 8008128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	4543      	cmp	r3, r8
 800812e:	dc09      	bgt.n	8008144 <_printf_float+0x264>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	079b      	lsls	r3, r3, #30
 8008134:	f100 8105 	bmi.w	8008342 <_printf_float+0x462>
 8008138:	68e0      	ldr	r0, [r4, #12]
 800813a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813c:	4298      	cmp	r0, r3
 800813e:	bfb8      	it	lt
 8008140:	4618      	movlt	r0, r3
 8008142:	e730      	b.n	8007fa6 <_printf_float+0xc6>
 8008144:	2301      	movs	r3, #1
 8008146:	464a      	mov	r2, r9
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f af27 	beq.w	8007fa2 <_printf_float+0xc2>
 8008154:	f108 0801 	add.w	r8, r8, #1
 8008158:	e7e6      	b.n	8008128 <_printf_float+0x248>
 800815a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	dc39      	bgt.n	80081d4 <_printf_float+0x2f4>
 8008160:	4a1b      	ldr	r2, [pc, #108]	; (80081d0 <_printf_float+0x2f0>)
 8008162:	2301      	movs	r3, #1
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	f43f af19 	beq.w	8007fa2 <_printf_float+0xc2>
 8008170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008174:	4313      	orrs	r3, r2
 8008176:	d102      	bne.n	800817e <_printf_float+0x29e>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d5d8      	bpl.n	8008130 <_printf_float+0x250>
 800817e:	ee18 3a10 	vmov	r3, s16
 8008182:	4652      	mov	r2, sl
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af09 	beq.w	8007fa2 <_printf_float+0xc2>
 8008190:	f04f 0900 	mov.w	r9, #0
 8008194:	f104 0a1a 	add.w	sl, r4, #26
 8008198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819a:	425b      	negs	r3, r3
 800819c:	454b      	cmp	r3, r9
 800819e:	dc01      	bgt.n	80081a4 <_printf_float+0x2c4>
 80081a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a2:	e792      	b.n	80080ca <_printf_float+0x1ea>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4652      	mov	r2, sl
 80081a8:	4631      	mov	r1, r6
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b8      	blx	r7
 80081ae:	3001      	adds	r0, #1
 80081b0:	f43f aef7 	beq.w	8007fa2 <_printf_float+0xc2>
 80081b4:	f109 0901 	add.w	r9, r9, #1
 80081b8:	e7ee      	b.n	8008198 <_printf_float+0x2b8>
 80081ba:	bf00      	nop
 80081bc:	7fefffff 	.word	0x7fefffff
 80081c0:	0800b394 	.word	0x0800b394
 80081c4:	0800b398 	.word	0x0800b398
 80081c8:	0800b3a0 	.word	0x0800b3a0
 80081cc:	0800b39c 	.word	0x0800b39c
 80081d0:	0800b3a4 	.word	0x0800b3a4
 80081d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081d8:	429a      	cmp	r2, r3
 80081da:	bfa8      	it	ge
 80081dc:	461a      	movge	r2, r3
 80081de:	2a00      	cmp	r2, #0
 80081e0:	4691      	mov	r9, r2
 80081e2:	dc37      	bgt.n	8008254 <_printf_float+0x374>
 80081e4:	f04f 0b00 	mov.w	fp, #0
 80081e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ec:	f104 021a 	add.w	r2, r4, #26
 80081f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	eba3 0309 	sub.w	r3, r3, r9
 80081f8:	455b      	cmp	r3, fp
 80081fa:	dc33      	bgt.n	8008264 <_printf_float+0x384>
 80081fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008200:	429a      	cmp	r2, r3
 8008202:	db3b      	blt.n	800827c <_printf_float+0x39c>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07da      	lsls	r2, r3, #31
 8008208:	d438      	bmi.n	800827c <_printf_float+0x39c>
 800820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820c:	9a05      	ldr	r2, [sp, #20]
 800820e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008210:	1a9a      	subs	r2, r3, r2
 8008212:	eba3 0901 	sub.w	r9, r3, r1
 8008216:	4591      	cmp	r9, r2
 8008218:	bfa8      	it	ge
 800821a:	4691      	movge	r9, r2
 800821c:	f1b9 0f00 	cmp.w	r9, #0
 8008220:	dc35      	bgt.n	800828e <_printf_float+0x3ae>
 8008222:	f04f 0800 	mov.w	r8, #0
 8008226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800822a:	f104 0a1a 	add.w	sl, r4, #26
 800822e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	eba3 0309 	sub.w	r3, r3, r9
 8008238:	4543      	cmp	r3, r8
 800823a:	f77f af79 	ble.w	8008130 <_printf_float+0x250>
 800823e:	2301      	movs	r3, #1
 8008240:	4652      	mov	r2, sl
 8008242:	4631      	mov	r1, r6
 8008244:	4628      	mov	r0, r5
 8008246:	47b8      	blx	r7
 8008248:	3001      	adds	r0, #1
 800824a:	f43f aeaa 	beq.w	8007fa2 <_printf_float+0xc2>
 800824e:	f108 0801 	add.w	r8, r8, #1
 8008252:	e7ec      	b.n	800822e <_printf_float+0x34e>
 8008254:	4613      	mov	r3, r2
 8008256:	4631      	mov	r1, r6
 8008258:	4642      	mov	r2, r8
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	d1c0      	bne.n	80081e4 <_printf_float+0x304>
 8008262:	e69e      	b.n	8007fa2 <_printf_float+0xc2>
 8008264:	2301      	movs	r3, #1
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	9205      	str	r2, [sp, #20]
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f ae97 	beq.w	8007fa2 <_printf_float+0xc2>
 8008274:	9a05      	ldr	r2, [sp, #20]
 8008276:	f10b 0b01 	add.w	fp, fp, #1
 800827a:	e7b9      	b.n	80081f0 <_printf_float+0x310>
 800827c:	ee18 3a10 	vmov	r3, s16
 8008280:	4652      	mov	r2, sl
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	d1be      	bne.n	800820a <_printf_float+0x32a>
 800828c:	e689      	b.n	8007fa2 <_printf_float+0xc2>
 800828e:	9a05      	ldr	r2, [sp, #20]
 8008290:	464b      	mov	r3, r9
 8008292:	4442      	add	r2, r8
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	d1c1      	bne.n	8008222 <_printf_float+0x342>
 800829e:	e680      	b.n	8007fa2 <_printf_float+0xc2>
 80082a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082a2:	2a01      	cmp	r2, #1
 80082a4:	dc01      	bgt.n	80082aa <_printf_float+0x3ca>
 80082a6:	07db      	lsls	r3, r3, #31
 80082a8:	d538      	bpl.n	800831c <_printf_float+0x43c>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4642      	mov	r2, r8
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f ae74 	beq.w	8007fa2 <_printf_float+0xc2>
 80082ba:	ee18 3a10 	vmov	r3, s16
 80082be:	4652      	mov	r2, sl
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f ae6b 	beq.w	8007fa2 <_printf_float+0xc2>
 80082cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082d0:	2200      	movs	r2, #0
 80082d2:	2300      	movs	r3, #0
 80082d4:	f7f8 fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80082d8:	b9d8      	cbnz	r0, 8008312 <_printf_float+0x432>
 80082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082dc:	f108 0201 	add.w	r2, r8, #1
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4631      	mov	r1, r6
 80082e4:	4628      	mov	r0, r5
 80082e6:	47b8      	blx	r7
 80082e8:	3001      	adds	r0, #1
 80082ea:	d10e      	bne.n	800830a <_printf_float+0x42a>
 80082ec:	e659      	b.n	8007fa2 <_printf_float+0xc2>
 80082ee:	2301      	movs	r3, #1
 80082f0:	4652      	mov	r2, sl
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f ae52 	beq.w	8007fa2 <_printf_float+0xc2>
 80082fe:	f108 0801 	add.w	r8, r8, #1
 8008302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008304:	3b01      	subs	r3, #1
 8008306:	4543      	cmp	r3, r8
 8008308:	dcf1      	bgt.n	80082ee <_printf_float+0x40e>
 800830a:	464b      	mov	r3, r9
 800830c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008310:	e6dc      	b.n	80080cc <_printf_float+0x1ec>
 8008312:	f04f 0800 	mov.w	r8, #0
 8008316:	f104 0a1a 	add.w	sl, r4, #26
 800831a:	e7f2      	b.n	8008302 <_printf_float+0x422>
 800831c:	2301      	movs	r3, #1
 800831e:	4642      	mov	r2, r8
 8008320:	e7df      	b.n	80082e2 <_printf_float+0x402>
 8008322:	2301      	movs	r3, #1
 8008324:	464a      	mov	r2, r9
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	f43f ae38 	beq.w	8007fa2 <_printf_float+0xc2>
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	4543      	cmp	r3, r8
 800833e:	dcf0      	bgt.n	8008322 <_printf_float+0x442>
 8008340:	e6fa      	b.n	8008138 <_printf_float+0x258>
 8008342:	f04f 0800 	mov.w	r8, #0
 8008346:	f104 0919 	add.w	r9, r4, #25
 800834a:	e7f4      	b.n	8008336 <_printf_float+0x456>

0800834c <_printf_common>:
 800834c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008350:	4616      	mov	r6, r2
 8008352:	4699      	mov	r9, r3
 8008354:	688a      	ldr	r2, [r1, #8]
 8008356:	690b      	ldr	r3, [r1, #16]
 8008358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800835c:	4293      	cmp	r3, r2
 800835e:	bfb8      	it	lt
 8008360:	4613      	movlt	r3, r2
 8008362:	6033      	str	r3, [r6, #0]
 8008364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008368:	4607      	mov	r7, r0
 800836a:	460c      	mov	r4, r1
 800836c:	b10a      	cbz	r2, 8008372 <_printf_common+0x26>
 800836e:	3301      	adds	r3, #1
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	0699      	lsls	r1, r3, #26
 8008376:	bf42      	ittt	mi
 8008378:	6833      	ldrmi	r3, [r6, #0]
 800837a:	3302      	addmi	r3, #2
 800837c:	6033      	strmi	r3, [r6, #0]
 800837e:	6825      	ldr	r5, [r4, #0]
 8008380:	f015 0506 	ands.w	r5, r5, #6
 8008384:	d106      	bne.n	8008394 <_printf_common+0x48>
 8008386:	f104 0a19 	add.w	sl, r4, #25
 800838a:	68e3      	ldr	r3, [r4, #12]
 800838c:	6832      	ldr	r2, [r6, #0]
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	42ab      	cmp	r3, r5
 8008392:	dc26      	bgt.n	80083e2 <_printf_common+0x96>
 8008394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008398:	1e13      	subs	r3, r2, #0
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	bf18      	it	ne
 800839e:	2301      	movne	r3, #1
 80083a0:	0692      	lsls	r2, r2, #26
 80083a2:	d42b      	bmi.n	80083fc <_printf_common+0xb0>
 80083a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083a8:	4649      	mov	r1, r9
 80083aa:	4638      	mov	r0, r7
 80083ac:	47c0      	blx	r8
 80083ae:	3001      	adds	r0, #1
 80083b0:	d01e      	beq.n	80083f0 <_printf_common+0xa4>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	68e5      	ldr	r5, [r4, #12]
 80083b6:	6832      	ldr	r2, [r6, #0]
 80083b8:	f003 0306 	and.w	r3, r3, #6
 80083bc:	2b04      	cmp	r3, #4
 80083be:	bf08      	it	eq
 80083c0:	1aad      	subeq	r5, r5, r2
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	6922      	ldr	r2, [r4, #16]
 80083c6:	bf0c      	ite	eq
 80083c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083cc:	2500      	movne	r5, #0
 80083ce:	4293      	cmp	r3, r2
 80083d0:	bfc4      	itt	gt
 80083d2:	1a9b      	subgt	r3, r3, r2
 80083d4:	18ed      	addgt	r5, r5, r3
 80083d6:	2600      	movs	r6, #0
 80083d8:	341a      	adds	r4, #26
 80083da:	42b5      	cmp	r5, r6
 80083dc:	d11a      	bne.n	8008414 <_printf_common+0xc8>
 80083de:	2000      	movs	r0, #0
 80083e0:	e008      	b.n	80083f4 <_printf_common+0xa8>
 80083e2:	2301      	movs	r3, #1
 80083e4:	4652      	mov	r2, sl
 80083e6:	4649      	mov	r1, r9
 80083e8:	4638      	mov	r0, r7
 80083ea:	47c0      	blx	r8
 80083ec:	3001      	adds	r0, #1
 80083ee:	d103      	bne.n	80083f8 <_printf_common+0xac>
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f8:	3501      	adds	r5, #1
 80083fa:	e7c6      	b.n	800838a <_printf_common+0x3e>
 80083fc:	18e1      	adds	r1, r4, r3
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	2030      	movs	r0, #48	; 0x30
 8008402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008406:	4422      	add	r2, r4
 8008408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800840c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008410:	3302      	adds	r3, #2
 8008412:	e7c7      	b.n	80083a4 <_printf_common+0x58>
 8008414:	2301      	movs	r3, #1
 8008416:	4622      	mov	r2, r4
 8008418:	4649      	mov	r1, r9
 800841a:	4638      	mov	r0, r7
 800841c:	47c0      	blx	r8
 800841e:	3001      	adds	r0, #1
 8008420:	d0e6      	beq.n	80083f0 <_printf_common+0xa4>
 8008422:	3601      	adds	r6, #1
 8008424:	e7d9      	b.n	80083da <_printf_common+0x8e>
	...

08008428 <_printf_i>:
 8008428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	7e0f      	ldrb	r7, [r1, #24]
 800842e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008430:	2f78      	cmp	r7, #120	; 0x78
 8008432:	4691      	mov	r9, r2
 8008434:	4680      	mov	r8, r0
 8008436:	460c      	mov	r4, r1
 8008438:	469a      	mov	sl, r3
 800843a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800843e:	d807      	bhi.n	8008450 <_printf_i+0x28>
 8008440:	2f62      	cmp	r7, #98	; 0x62
 8008442:	d80a      	bhi.n	800845a <_printf_i+0x32>
 8008444:	2f00      	cmp	r7, #0
 8008446:	f000 80d8 	beq.w	80085fa <_printf_i+0x1d2>
 800844a:	2f58      	cmp	r7, #88	; 0x58
 800844c:	f000 80a3 	beq.w	8008596 <_printf_i+0x16e>
 8008450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008458:	e03a      	b.n	80084d0 <_printf_i+0xa8>
 800845a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800845e:	2b15      	cmp	r3, #21
 8008460:	d8f6      	bhi.n	8008450 <_printf_i+0x28>
 8008462:	a101      	add	r1, pc, #4	; (adr r1, 8008468 <_printf_i+0x40>)
 8008464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008468:	080084c1 	.word	0x080084c1
 800846c:	080084d5 	.word	0x080084d5
 8008470:	08008451 	.word	0x08008451
 8008474:	08008451 	.word	0x08008451
 8008478:	08008451 	.word	0x08008451
 800847c:	08008451 	.word	0x08008451
 8008480:	080084d5 	.word	0x080084d5
 8008484:	08008451 	.word	0x08008451
 8008488:	08008451 	.word	0x08008451
 800848c:	08008451 	.word	0x08008451
 8008490:	08008451 	.word	0x08008451
 8008494:	080085e1 	.word	0x080085e1
 8008498:	08008505 	.word	0x08008505
 800849c:	080085c3 	.word	0x080085c3
 80084a0:	08008451 	.word	0x08008451
 80084a4:	08008451 	.word	0x08008451
 80084a8:	08008603 	.word	0x08008603
 80084ac:	08008451 	.word	0x08008451
 80084b0:	08008505 	.word	0x08008505
 80084b4:	08008451 	.word	0x08008451
 80084b8:	08008451 	.word	0x08008451
 80084bc:	080085cb 	.word	0x080085cb
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	1d1a      	adds	r2, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084d0:	2301      	movs	r3, #1
 80084d2:	e0a3      	b.n	800861c <_printf_i+0x1f4>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	6829      	ldr	r1, [r5, #0]
 80084d8:	0606      	lsls	r6, r0, #24
 80084da:	f101 0304 	add.w	r3, r1, #4
 80084de:	d50a      	bpl.n	80084f6 <_printf_i+0xce>
 80084e0:	680e      	ldr	r6, [r1, #0]
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	2e00      	cmp	r6, #0
 80084e6:	da03      	bge.n	80084f0 <_printf_i+0xc8>
 80084e8:	232d      	movs	r3, #45	; 0x2d
 80084ea:	4276      	negs	r6, r6
 80084ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f0:	485e      	ldr	r0, [pc, #376]	; (800866c <_printf_i+0x244>)
 80084f2:	230a      	movs	r3, #10
 80084f4:	e019      	b.n	800852a <_printf_i+0x102>
 80084f6:	680e      	ldr	r6, [r1, #0]
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084fe:	bf18      	it	ne
 8008500:	b236      	sxthne	r6, r6
 8008502:	e7ef      	b.n	80084e4 <_printf_i+0xbc>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	6820      	ldr	r0, [r4, #0]
 8008508:	1d19      	adds	r1, r3, #4
 800850a:	6029      	str	r1, [r5, #0]
 800850c:	0601      	lsls	r1, r0, #24
 800850e:	d501      	bpl.n	8008514 <_printf_i+0xec>
 8008510:	681e      	ldr	r6, [r3, #0]
 8008512:	e002      	b.n	800851a <_printf_i+0xf2>
 8008514:	0646      	lsls	r6, r0, #25
 8008516:	d5fb      	bpl.n	8008510 <_printf_i+0xe8>
 8008518:	881e      	ldrh	r6, [r3, #0]
 800851a:	4854      	ldr	r0, [pc, #336]	; (800866c <_printf_i+0x244>)
 800851c:	2f6f      	cmp	r7, #111	; 0x6f
 800851e:	bf0c      	ite	eq
 8008520:	2308      	moveq	r3, #8
 8008522:	230a      	movne	r3, #10
 8008524:	2100      	movs	r1, #0
 8008526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800852a:	6865      	ldr	r5, [r4, #4]
 800852c:	60a5      	str	r5, [r4, #8]
 800852e:	2d00      	cmp	r5, #0
 8008530:	bfa2      	ittt	ge
 8008532:	6821      	ldrge	r1, [r4, #0]
 8008534:	f021 0104 	bicge.w	r1, r1, #4
 8008538:	6021      	strge	r1, [r4, #0]
 800853a:	b90e      	cbnz	r6, 8008540 <_printf_i+0x118>
 800853c:	2d00      	cmp	r5, #0
 800853e:	d04d      	beq.n	80085dc <_printf_i+0x1b4>
 8008540:	4615      	mov	r5, r2
 8008542:	fbb6 f1f3 	udiv	r1, r6, r3
 8008546:	fb03 6711 	mls	r7, r3, r1, r6
 800854a:	5dc7      	ldrb	r7, [r0, r7]
 800854c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008550:	4637      	mov	r7, r6
 8008552:	42bb      	cmp	r3, r7
 8008554:	460e      	mov	r6, r1
 8008556:	d9f4      	bls.n	8008542 <_printf_i+0x11a>
 8008558:	2b08      	cmp	r3, #8
 800855a:	d10b      	bne.n	8008574 <_printf_i+0x14c>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	07de      	lsls	r6, r3, #31
 8008560:	d508      	bpl.n	8008574 <_printf_i+0x14c>
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	6861      	ldr	r1, [r4, #4]
 8008566:	4299      	cmp	r1, r3
 8008568:	bfde      	ittt	le
 800856a:	2330      	movle	r3, #48	; 0x30
 800856c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008574:	1b52      	subs	r2, r2, r5
 8008576:	6122      	str	r2, [r4, #16]
 8008578:	f8cd a000 	str.w	sl, [sp]
 800857c:	464b      	mov	r3, r9
 800857e:	aa03      	add	r2, sp, #12
 8008580:	4621      	mov	r1, r4
 8008582:	4640      	mov	r0, r8
 8008584:	f7ff fee2 	bl	800834c <_printf_common>
 8008588:	3001      	adds	r0, #1
 800858a:	d14c      	bne.n	8008626 <_printf_i+0x1fe>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	b004      	add	sp, #16
 8008592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008596:	4835      	ldr	r0, [pc, #212]	; (800866c <_printf_i+0x244>)
 8008598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800859c:	6829      	ldr	r1, [r5, #0]
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80085a4:	6029      	str	r1, [r5, #0]
 80085a6:	061d      	lsls	r5, r3, #24
 80085a8:	d514      	bpl.n	80085d4 <_printf_i+0x1ac>
 80085aa:	07df      	lsls	r7, r3, #31
 80085ac:	bf44      	itt	mi
 80085ae:	f043 0320 	orrmi.w	r3, r3, #32
 80085b2:	6023      	strmi	r3, [r4, #0]
 80085b4:	b91e      	cbnz	r6, 80085be <_printf_i+0x196>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f023 0320 	bic.w	r3, r3, #32
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	2310      	movs	r3, #16
 80085c0:	e7b0      	b.n	8008524 <_printf_i+0xfc>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f043 0320 	orr.w	r3, r3, #32
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	2378      	movs	r3, #120	; 0x78
 80085cc:	4828      	ldr	r0, [pc, #160]	; (8008670 <_printf_i+0x248>)
 80085ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085d2:	e7e3      	b.n	800859c <_printf_i+0x174>
 80085d4:	0659      	lsls	r1, r3, #25
 80085d6:	bf48      	it	mi
 80085d8:	b2b6      	uxthmi	r6, r6
 80085da:	e7e6      	b.n	80085aa <_printf_i+0x182>
 80085dc:	4615      	mov	r5, r2
 80085de:	e7bb      	b.n	8008558 <_printf_i+0x130>
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	6826      	ldr	r6, [r4, #0]
 80085e4:	6961      	ldr	r1, [r4, #20]
 80085e6:	1d18      	adds	r0, r3, #4
 80085e8:	6028      	str	r0, [r5, #0]
 80085ea:	0635      	lsls	r5, r6, #24
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	d501      	bpl.n	80085f4 <_printf_i+0x1cc>
 80085f0:	6019      	str	r1, [r3, #0]
 80085f2:	e002      	b.n	80085fa <_printf_i+0x1d2>
 80085f4:	0670      	lsls	r0, r6, #25
 80085f6:	d5fb      	bpl.n	80085f0 <_printf_i+0x1c8>
 80085f8:	8019      	strh	r1, [r3, #0]
 80085fa:	2300      	movs	r3, #0
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	4615      	mov	r5, r2
 8008600:	e7ba      	b.n	8008578 <_printf_i+0x150>
 8008602:	682b      	ldr	r3, [r5, #0]
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	602a      	str	r2, [r5, #0]
 8008608:	681d      	ldr	r5, [r3, #0]
 800860a:	6862      	ldr	r2, [r4, #4]
 800860c:	2100      	movs	r1, #0
 800860e:	4628      	mov	r0, r5
 8008610:	f7f7 fdf6 	bl	8000200 <memchr>
 8008614:	b108      	cbz	r0, 800861a <_printf_i+0x1f2>
 8008616:	1b40      	subs	r0, r0, r5
 8008618:	6060      	str	r0, [r4, #4]
 800861a:	6863      	ldr	r3, [r4, #4]
 800861c:	6123      	str	r3, [r4, #16]
 800861e:	2300      	movs	r3, #0
 8008620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008624:	e7a8      	b.n	8008578 <_printf_i+0x150>
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	462a      	mov	r2, r5
 800862a:	4649      	mov	r1, r9
 800862c:	4640      	mov	r0, r8
 800862e:	47d0      	blx	sl
 8008630:	3001      	adds	r0, #1
 8008632:	d0ab      	beq.n	800858c <_printf_i+0x164>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	079b      	lsls	r3, r3, #30
 8008638:	d413      	bmi.n	8008662 <_printf_i+0x23a>
 800863a:	68e0      	ldr	r0, [r4, #12]
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	4298      	cmp	r0, r3
 8008640:	bfb8      	it	lt
 8008642:	4618      	movlt	r0, r3
 8008644:	e7a4      	b.n	8008590 <_printf_i+0x168>
 8008646:	2301      	movs	r3, #1
 8008648:	4632      	mov	r2, r6
 800864a:	4649      	mov	r1, r9
 800864c:	4640      	mov	r0, r8
 800864e:	47d0      	blx	sl
 8008650:	3001      	adds	r0, #1
 8008652:	d09b      	beq.n	800858c <_printf_i+0x164>
 8008654:	3501      	adds	r5, #1
 8008656:	68e3      	ldr	r3, [r4, #12]
 8008658:	9903      	ldr	r1, [sp, #12]
 800865a:	1a5b      	subs	r3, r3, r1
 800865c:	42ab      	cmp	r3, r5
 800865e:	dcf2      	bgt.n	8008646 <_printf_i+0x21e>
 8008660:	e7eb      	b.n	800863a <_printf_i+0x212>
 8008662:	2500      	movs	r5, #0
 8008664:	f104 0619 	add.w	r6, r4, #25
 8008668:	e7f5      	b.n	8008656 <_printf_i+0x22e>
 800866a:	bf00      	nop
 800866c:	0800b3a6 	.word	0x0800b3a6
 8008670:	0800b3b7 	.word	0x0800b3b7

08008674 <_sbrk_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d06      	ldr	r5, [pc, #24]	; (8008690 <_sbrk_r+0x1c>)
 8008678:	2300      	movs	r3, #0
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	f7f9 ff76 	bl	8002570 <_sbrk>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_sbrk_r+0x1a>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_sbrk_r+0x1a>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	200006bc 	.word	0x200006bc

08008694 <sniprintf>:
 8008694:	b40c      	push	{r2, r3}
 8008696:	b530      	push	{r4, r5, lr}
 8008698:	4b17      	ldr	r3, [pc, #92]	; (80086f8 <sniprintf+0x64>)
 800869a:	1e0c      	subs	r4, r1, #0
 800869c:	681d      	ldr	r5, [r3, #0]
 800869e:	b09d      	sub	sp, #116	; 0x74
 80086a0:	da08      	bge.n	80086b4 <sniprintf+0x20>
 80086a2:	238b      	movs	r3, #139	; 0x8b
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	b01d      	add	sp, #116	; 0x74
 80086ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086b0:	b002      	add	sp, #8
 80086b2:	4770      	bx	lr
 80086b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80086b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086bc:	bf14      	ite	ne
 80086be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086c2:	4623      	moveq	r3, r4
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	9307      	str	r3, [sp, #28]
 80086c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086cc:	9002      	str	r0, [sp, #8]
 80086ce:	9006      	str	r0, [sp, #24]
 80086d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086d6:	ab21      	add	r3, sp, #132	; 0x84
 80086d8:	a902      	add	r1, sp, #8
 80086da:	4628      	mov	r0, r5
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	f001 fb4d 	bl	8009d7c <_svfiprintf_r>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	bfbc      	itt	lt
 80086e6:	238b      	movlt	r3, #139	; 0x8b
 80086e8:	602b      	strlt	r3, [r5, #0]
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	d0dd      	beq.n	80086aa <sniprintf+0x16>
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	e7d9      	b.n	80086aa <sniprintf+0x16>
 80086f6:	bf00      	nop
 80086f8:	2000000c 	.word	0x2000000c

080086fc <siprintf>:
 80086fc:	b40e      	push	{r1, r2, r3}
 80086fe:	b500      	push	{lr}
 8008700:	b09c      	sub	sp, #112	; 0x70
 8008702:	ab1d      	add	r3, sp, #116	; 0x74
 8008704:	9002      	str	r0, [sp, #8]
 8008706:	9006      	str	r0, [sp, #24]
 8008708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800870c:	4809      	ldr	r0, [pc, #36]	; (8008734 <siprintf+0x38>)
 800870e:	9107      	str	r1, [sp, #28]
 8008710:	9104      	str	r1, [sp, #16]
 8008712:	4909      	ldr	r1, [pc, #36]	; (8008738 <siprintf+0x3c>)
 8008714:	f853 2b04 	ldr.w	r2, [r3], #4
 8008718:	9105      	str	r1, [sp, #20]
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	a902      	add	r1, sp, #8
 8008720:	f001 fb2c 	bl	8009d7c <_svfiprintf_r>
 8008724:	9b02      	ldr	r3, [sp, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	b01c      	add	sp, #112	; 0x70
 800872c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008730:	b003      	add	sp, #12
 8008732:	4770      	bx	lr
 8008734:	2000000c 	.word	0x2000000c
 8008738:	ffff0208 	.word	0xffff0208

0800873c <strncpy>:
 800873c:	b510      	push	{r4, lr}
 800873e:	3901      	subs	r1, #1
 8008740:	4603      	mov	r3, r0
 8008742:	b132      	cbz	r2, 8008752 <strncpy+0x16>
 8008744:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008748:	f803 4b01 	strb.w	r4, [r3], #1
 800874c:	3a01      	subs	r2, #1
 800874e:	2c00      	cmp	r4, #0
 8008750:	d1f7      	bne.n	8008742 <strncpy+0x6>
 8008752:	441a      	add	r2, r3
 8008754:	2100      	movs	r1, #0
 8008756:	4293      	cmp	r3, r2
 8008758:	d100      	bne.n	800875c <strncpy+0x20>
 800875a:	bd10      	pop	{r4, pc}
 800875c:	f803 1b01 	strb.w	r1, [r3], #1
 8008760:	e7f9      	b.n	8008756 <strncpy+0x1a>
	...

08008764 <strtok>:
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <strtok+0x5c>)
 8008766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008768:	681e      	ldr	r6, [r3, #0]
 800876a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800876c:	4605      	mov	r5, r0
 800876e:	b9fc      	cbnz	r4, 80087b0 <strtok+0x4c>
 8008770:	2050      	movs	r0, #80	; 0x50
 8008772:	9101      	str	r1, [sp, #4]
 8008774:	f7ff fa0e 	bl	8007b94 <malloc>
 8008778:	9901      	ldr	r1, [sp, #4]
 800877a:	65b0      	str	r0, [r6, #88]	; 0x58
 800877c:	4602      	mov	r2, r0
 800877e:	b920      	cbnz	r0, 800878a <strtok+0x26>
 8008780:	4b10      	ldr	r3, [pc, #64]	; (80087c4 <strtok+0x60>)
 8008782:	4811      	ldr	r0, [pc, #68]	; (80087c8 <strtok+0x64>)
 8008784:	2157      	movs	r1, #87	; 0x57
 8008786:	f000 f849 	bl	800881c <__assert_func>
 800878a:	e9c0 4400 	strd	r4, r4, [r0]
 800878e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008792:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008796:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800879a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800879e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80087a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80087a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80087aa:	6184      	str	r4, [r0, #24]
 80087ac:	7704      	strb	r4, [r0, #28]
 80087ae:	6244      	str	r4, [r0, #36]	; 0x24
 80087b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80087b2:	2301      	movs	r3, #1
 80087b4:	4628      	mov	r0, r5
 80087b6:	b002      	add	sp, #8
 80087b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087bc:	f000 b806 	b.w	80087cc <__strtok_r>
 80087c0:	2000000c 	.word	0x2000000c
 80087c4:	0800b3c8 	.word	0x0800b3c8
 80087c8:	0800b3df 	.word	0x0800b3df

080087cc <__strtok_r>:
 80087cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ce:	b908      	cbnz	r0, 80087d4 <__strtok_r+0x8>
 80087d0:	6810      	ldr	r0, [r2, #0]
 80087d2:	b188      	cbz	r0, 80087f8 <__strtok_r+0x2c>
 80087d4:	4604      	mov	r4, r0
 80087d6:	4620      	mov	r0, r4
 80087d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087dc:	460f      	mov	r7, r1
 80087de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087e2:	b91e      	cbnz	r6, 80087ec <__strtok_r+0x20>
 80087e4:	b965      	cbnz	r5, 8008800 <__strtok_r+0x34>
 80087e6:	6015      	str	r5, [r2, #0]
 80087e8:	4628      	mov	r0, r5
 80087ea:	e005      	b.n	80087f8 <__strtok_r+0x2c>
 80087ec:	42b5      	cmp	r5, r6
 80087ee:	d1f6      	bne.n	80087de <__strtok_r+0x12>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f0      	bne.n	80087d6 <__strtok_r+0xa>
 80087f4:	6014      	str	r4, [r2, #0]
 80087f6:	7003      	strb	r3, [r0, #0]
 80087f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fa:	461c      	mov	r4, r3
 80087fc:	e00c      	b.n	8008818 <__strtok_r+0x4c>
 80087fe:	b915      	cbnz	r5, 8008806 <__strtok_r+0x3a>
 8008800:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008804:	460e      	mov	r6, r1
 8008806:	f816 5b01 	ldrb.w	r5, [r6], #1
 800880a:	42ab      	cmp	r3, r5
 800880c:	d1f7      	bne.n	80087fe <__strtok_r+0x32>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0f3      	beq.n	80087fa <__strtok_r+0x2e>
 8008812:	2300      	movs	r3, #0
 8008814:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008818:	6014      	str	r4, [r2, #0]
 800881a:	e7ed      	b.n	80087f8 <__strtok_r+0x2c>

0800881c <__assert_func>:
 800881c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800881e:	4614      	mov	r4, r2
 8008820:	461a      	mov	r2, r3
 8008822:	4b09      	ldr	r3, [pc, #36]	; (8008848 <__assert_func+0x2c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4605      	mov	r5, r0
 8008828:	68d8      	ldr	r0, [r3, #12]
 800882a:	b14c      	cbz	r4, 8008840 <__assert_func+0x24>
 800882c:	4b07      	ldr	r3, [pc, #28]	; (800884c <__assert_func+0x30>)
 800882e:	9100      	str	r1, [sp, #0]
 8008830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008834:	4906      	ldr	r1, [pc, #24]	; (8008850 <__assert_func+0x34>)
 8008836:	462b      	mov	r3, r5
 8008838:	f000 fe88 	bl	800954c <fiprintf>
 800883c:	f001 fdb8 	bl	800a3b0 <abort>
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <__assert_func+0x38>)
 8008842:	461c      	mov	r4, r3
 8008844:	e7f3      	b.n	800882e <__assert_func+0x12>
 8008846:	bf00      	nop
 8008848:	2000000c 	.word	0x2000000c
 800884c:	0800b43c 	.word	0x0800b43c
 8008850:	0800b449 	.word	0x0800b449
 8008854:	0800b477 	.word	0x0800b477

08008858 <quorem>:
 8008858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	6903      	ldr	r3, [r0, #16]
 800885e:	690c      	ldr	r4, [r1, #16]
 8008860:	42a3      	cmp	r3, r4
 8008862:	4607      	mov	r7, r0
 8008864:	f2c0 8081 	blt.w	800896a <quorem+0x112>
 8008868:	3c01      	subs	r4, #1
 800886a:	f101 0814 	add.w	r8, r1, #20
 800886e:	f100 0514 	add.w	r5, r0, #20
 8008872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800887c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008880:	3301      	adds	r3, #1
 8008882:	429a      	cmp	r2, r3
 8008884:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008888:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800888c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008890:	d331      	bcc.n	80088f6 <quorem+0x9e>
 8008892:	f04f 0e00 	mov.w	lr, #0
 8008896:	4640      	mov	r0, r8
 8008898:	46ac      	mov	ip, r5
 800889a:	46f2      	mov	sl, lr
 800889c:	f850 2b04 	ldr.w	r2, [r0], #4
 80088a0:	b293      	uxth	r3, r2
 80088a2:	fb06 e303 	mla	r3, r6, r3, lr
 80088a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	ebaa 0303 	sub.w	r3, sl, r3
 80088b0:	f8dc a000 	ldr.w	sl, [ip]
 80088b4:	0c12      	lsrs	r2, r2, #16
 80088b6:	fa13 f38a 	uxtah	r3, r3, sl
 80088ba:	fb06 e202 	mla	r2, r6, r2, lr
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	9b00      	ldr	r3, [sp, #0]
 80088c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088c6:	b292      	uxth	r2, r2
 80088c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80088d4:	4581      	cmp	r9, r0
 80088d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088da:	f84c 3b04 	str.w	r3, [ip], #4
 80088de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088e2:	d2db      	bcs.n	800889c <quorem+0x44>
 80088e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80088e8:	b92b      	cbnz	r3, 80088f6 <quorem+0x9e>
 80088ea:	9b01      	ldr	r3, [sp, #4]
 80088ec:	3b04      	subs	r3, #4
 80088ee:	429d      	cmp	r5, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	d32e      	bcc.n	8008952 <quorem+0xfa>
 80088f4:	613c      	str	r4, [r7, #16]
 80088f6:	4638      	mov	r0, r7
 80088f8:	f001 f8cc 	bl	8009a94 <__mcmp>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	db24      	blt.n	800894a <quorem+0xf2>
 8008900:	3601      	adds	r6, #1
 8008902:	4628      	mov	r0, r5
 8008904:	f04f 0c00 	mov.w	ip, #0
 8008908:	f858 2b04 	ldr.w	r2, [r8], #4
 800890c:	f8d0 e000 	ldr.w	lr, [r0]
 8008910:	b293      	uxth	r3, r2
 8008912:	ebac 0303 	sub.w	r3, ip, r3
 8008916:	0c12      	lsrs	r2, r2, #16
 8008918:	fa13 f38e 	uxtah	r3, r3, lr
 800891c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008924:	b29b      	uxth	r3, r3
 8008926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800892a:	45c1      	cmp	r9, r8
 800892c:	f840 3b04 	str.w	r3, [r0], #4
 8008930:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008934:	d2e8      	bcs.n	8008908 <quorem+0xb0>
 8008936:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800893a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800893e:	b922      	cbnz	r2, 800894a <quorem+0xf2>
 8008940:	3b04      	subs	r3, #4
 8008942:	429d      	cmp	r5, r3
 8008944:	461a      	mov	r2, r3
 8008946:	d30a      	bcc.n	800895e <quorem+0x106>
 8008948:	613c      	str	r4, [r7, #16]
 800894a:	4630      	mov	r0, r6
 800894c:	b003      	add	sp, #12
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	3b04      	subs	r3, #4
 8008956:	2a00      	cmp	r2, #0
 8008958:	d1cc      	bne.n	80088f4 <quorem+0x9c>
 800895a:	3c01      	subs	r4, #1
 800895c:	e7c7      	b.n	80088ee <quorem+0x96>
 800895e:	6812      	ldr	r2, [r2, #0]
 8008960:	3b04      	subs	r3, #4
 8008962:	2a00      	cmp	r2, #0
 8008964:	d1f0      	bne.n	8008948 <quorem+0xf0>
 8008966:	3c01      	subs	r4, #1
 8008968:	e7eb      	b.n	8008942 <quorem+0xea>
 800896a:	2000      	movs	r0, #0
 800896c:	e7ee      	b.n	800894c <quorem+0xf4>
	...

08008970 <_dtoa_r>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	ed2d 8b04 	vpush	{d8-d9}
 8008978:	ec57 6b10 	vmov	r6, r7, d0
 800897c:	b093      	sub	sp, #76	; 0x4c
 800897e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008980:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008984:	9106      	str	r1, [sp, #24]
 8008986:	ee10 aa10 	vmov	sl, s0
 800898a:	4604      	mov	r4, r0
 800898c:	9209      	str	r2, [sp, #36]	; 0x24
 800898e:	930c      	str	r3, [sp, #48]	; 0x30
 8008990:	46bb      	mov	fp, r7
 8008992:	b975      	cbnz	r5, 80089b2 <_dtoa_r+0x42>
 8008994:	2010      	movs	r0, #16
 8008996:	f7ff f8fd 	bl	8007b94 <malloc>
 800899a:	4602      	mov	r2, r0
 800899c:	6260      	str	r0, [r4, #36]	; 0x24
 800899e:	b920      	cbnz	r0, 80089aa <_dtoa_r+0x3a>
 80089a0:	4ba7      	ldr	r3, [pc, #668]	; (8008c40 <_dtoa_r+0x2d0>)
 80089a2:	21ea      	movs	r1, #234	; 0xea
 80089a4:	48a7      	ldr	r0, [pc, #668]	; (8008c44 <_dtoa_r+0x2d4>)
 80089a6:	f7ff ff39 	bl	800881c <__assert_func>
 80089aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089ae:	6005      	str	r5, [r0, #0]
 80089b0:	60c5      	str	r5, [r0, #12]
 80089b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	b151      	cbz	r1, 80089ce <_dtoa_r+0x5e>
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	604a      	str	r2, [r1, #4]
 80089bc:	2301      	movs	r3, #1
 80089be:	4093      	lsls	r3, r2
 80089c0:	608b      	str	r3, [r1, #8]
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 fe24 	bl	8009610 <_Bfree>
 80089c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	1e3b      	subs	r3, r7, #0
 80089d0:	bfaa      	itet	ge
 80089d2:	2300      	movge	r3, #0
 80089d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80089d8:	f8c8 3000 	strge.w	r3, [r8]
 80089dc:	4b9a      	ldr	r3, [pc, #616]	; (8008c48 <_dtoa_r+0x2d8>)
 80089de:	bfbc      	itt	lt
 80089e0:	2201      	movlt	r2, #1
 80089e2:	f8c8 2000 	strlt.w	r2, [r8]
 80089e6:	ea33 030b 	bics.w	r3, r3, fp
 80089ea:	d11b      	bne.n	8008a24 <_dtoa_r+0xb4>
 80089ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089f8:	4333      	orrs	r3, r6
 80089fa:	f000 8592 	beq.w	8009522 <_dtoa_r+0xbb2>
 80089fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a00:	b963      	cbnz	r3, 8008a1c <_dtoa_r+0xac>
 8008a02:	4b92      	ldr	r3, [pc, #584]	; (8008c4c <_dtoa_r+0x2dc>)
 8008a04:	e022      	b.n	8008a4c <_dtoa_r+0xdc>
 8008a06:	4b92      	ldr	r3, [pc, #584]	; (8008c50 <_dtoa_r+0x2e0>)
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	9801      	ldr	r0, [sp, #4]
 8008a12:	b013      	add	sp, #76	; 0x4c
 8008a14:	ecbd 8b04 	vpop	{d8-d9}
 8008a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1c:	4b8b      	ldr	r3, [pc, #556]	; (8008c4c <_dtoa_r+0x2dc>)
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	3303      	adds	r3, #3
 8008a22:	e7f3      	b.n	8008a0c <_dtoa_r+0x9c>
 8008a24:	2200      	movs	r2, #0
 8008a26:	2300      	movs	r3, #0
 8008a28:	4650      	mov	r0, sl
 8008a2a:	4659      	mov	r1, fp
 8008a2c:	f7f8 f85c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a30:	ec4b ab19 	vmov	d9, sl, fp
 8008a34:	4680      	mov	r8, r0
 8008a36:	b158      	cbz	r0, 8008a50 <_dtoa_r+0xe0>
 8008a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 856b 	beq.w	800951c <_dtoa_r+0xbac>
 8008a46:	4883      	ldr	r0, [pc, #524]	; (8008c54 <_dtoa_r+0x2e4>)
 8008a48:	6018      	str	r0, [r3, #0]
 8008a4a:	1e43      	subs	r3, r0, #1
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	e7df      	b.n	8008a10 <_dtoa_r+0xa0>
 8008a50:	ec4b ab10 	vmov	d0, sl, fp
 8008a54:	aa10      	add	r2, sp, #64	; 0x40
 8008a56:	a911      	add	r1, sp, #68	; 0x44
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f001 f8c1 	bl	8009be0 <__d2b>
 8008a5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008a62:	ee08 0a10 	vmov	s16, r0
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	f000 8084 	beq.w	8008b74 <_dtoa_r+0x204>
 8008a6c:	ee19 3a90 	vmov	r3, s19
 8008a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a78:	4656      	mov	r6, sl
 8008a7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008a86:	4b74      	ldr	r3, [pc, #464]	; (8008c58 <_dtoa_r+0x2e8>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	f7f7 fc0b 	bl	80002a8 <__aeabi_dsub>
 8008a92:	a365      	add	r3, pc, #404	; (adr r3, 8008c28 <_dtoa_r+0x2b8>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f7f7 fdbe 	bl	8000618 <__aeabi_dmul>
 8008a9c:	a364      	add	r3, pc, #400	; (adr r3, 8008c30 <_dtoa_r+0x2c0>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fc03 	bl	80002ac <__adddf3>
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	460f      	mov	r7, r1
 8008aac:	f7f7 fd4a 	bl	8000544 <__aeabi_i2d>
 8008ab0:	a361      	add	r3, pc, #388	; (adr r3, 8008c38 <_dtoa_r+0x2c8>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fdaf 	bl	8000618 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	f7f7 fbf3 	bl	80002ac <__adddf3>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	f7f8 f855 	bl	8000b78 <__aeabi_d2iz>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	9000      	str	r0, [sp, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f7f8 f810 	bl	8000afc <__aeabi_dcmplt>
 8008adc:	b150      	cbz	r0, 8008af4 <_dtoa_r+0x184>
 8008ade:	9800      	ldr	r0, [sp, #0]
 8008ae0:	f7f7 fd30 	bl	8000544 <__aeabi_i2d>
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	f7f7 fffe 	bl	8000ae8 <__aeabi_dcmpeq>
 8008aec:	b910      	cbnz	r0, 8008af4 <_dtoa_r+0x184>
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	9b00      	ldr	r3, [sp, #0]
 8008af6:	2b16      	cmp	r3, #22
 8008af8:	d85a      	bhi.n	8008bb0 <_dtoa_r+0x240>
 8008afa:	9a00      	ldr	r2, [sp, #0]
 8008afc:	4b57      	ldr	r3, [pc, #348]	; (8008c5c <_dtoa_r+0x2ec>)
 8008afe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	ec51 0b19 	vmov	r0, r1, d9
 8008b0a:	f7f7 fff7 	bl	8000afc <__aeabi_dcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d050      	beq.n	8008bb4 <_dtoa_r+0x244>
 8008b12:	9b00      	ldr	r3, [sp, #0]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b1e:	1b5d      	subs	r5, r3, r5
 8008b20:	1e6b      	subs	r3, r5, #1
 8008b22:	9305      	str	r3, [sp, #20]
 8008b24:	bf45      	ittet	mi
 8008b26:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b2a:	9304      	strmi	r3, [sp, #16]
 8008b2c:	2300      	movpl	r3, #0
 8008b2e:	2300      	movmi	r3, #0
 8008b30:	bf4c      	ite	mi
 8008b32:	9305      	strmi	r3, [sp, #20]
 8008b34:	9304      	strpl	r3, [sp, #16]
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	db3d      	blt.n	8008bb8 <_dtoa_r+0x248>
 8008b3c:	9b05      	ldr	r3, [sp, #20]
 8008b3e:	9a00      	ldr	r2, [sp, #0]
 8008b40:	920a      	str	r2, [sp, #40]	; 0x28
 8008b42:	4413      	add	r3, r2
 8008b44:	9305      	str	r3, [sp, #20]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9307      	str	r3, [sp, #28]
 8008b4a:	9b06      	ldr	r3, [sp, #24]
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	f200 8089 	bhi.w	8008c64 <_dtoa_r+0x2f4>
 8008b52:	2b05      	cmp	r3, #5
 8008b54:	bfc4      	itt	gt
 8008b56:	3b04      	subgt	r3, #4
 8008b58:	9306      	strgt	r3, [sp, #24]
 8008b5a:	9b06      	ldr	r3, [sp, #24]
 8008b5c:	f1a3 0302 	sub.w	r3, r3, #2
 8008b60:	bfcc      	ite	gt
 8008b62:	2500      	movgt	r5, #0
 8008b64:	2501      	movle	r5, #1
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	f200 8087 	bhi.w	8008c7a <_dtoa_r+0x30a>
 8008b6c:	e8df f003 	tbb	[pc, r3]
 8008b70:	59383a2d 	.word	0x59383a2d
 8008b74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b78:	441d      	add	r5, r3
 8008b7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	bfc1      	itttt	gt
 8008b82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008b8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b92:	bfda      	itte	le
 8008b94:	f1c3 0320 	rsble	r3, r3, #32
 8008b98:	fa06 f003 	lslle.w	r0, r6, r3
 8008b9c:	4318      	orrgt	r0, r3
 8008b9e:	f7f7 fcc1 	bl	8000524 <__aeabi_ui2d>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008baa:	3d01      	subs	r5, #1
 8008bac:	930e      	str	r3, [sp, #56]	; 0x38
 8008bae:	e76a      	b.n	8008a86 <_dtoa_r+0x116>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e7b2      	b.n	8008b1a <_dtoa_r+0x1aa>
 8008bb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008bb6:	e7b1      	b.n	8008b1c <_dtoa_r+0x1ac>
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	9a00      	ldr	r2, [sp, #0]
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	4253      	negs	r3, r2
 8008bc2:	9307      	str	r3, [sp, #28]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bc8:	e7bf      	b.n	8008b4a <_dtoa_r+0x1da>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	9308      	str	r3, [sp, #32]
 8008bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dc55      	bgt.n	8008c80 <_dtoa_r+0x310>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8008bde:	e00c      	b.n	8008bfa <_dtoa_r+0x28a>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e7f3      	b.n	8008bcc <_dtoa_r+0x25c>
 8008be4:	2300      	movs	r3, #0
 8008be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008be8:	9308      	str	r3, [sp, #32]
 8008bea:	9b00      	ldr	r3, [sp, #0]
 8008bec:	4413      	add	r3, r2
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	bfb8      	it	lt
 8008bf8:	2301      	movlt	r3, #1
 8008bfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	6042      	str	r2, [r0, #4]
 8008c00:	2204      	movs	r2, #4
 8008c02:	f102 0614 	add.w	r6, r2, #20
 8008c06:	429e      	cmp	r6, r3
 8008c08:	6841      	ldr	r1, [r0, #4]
 8008c0a:	d93d      	bls.n	8008c88 <_dtoa_r+0x318>
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 fcbf 	bl	8009590 <_Balloc>
 8008c12:	9001      	str	r0, [sp, #4]
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d13b      	bne.n	8008c90 <_dtoa_r+0x320>
 8008c18:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <_dtoa_r+0x2f0>)
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c20:	e6c0      	b.n	80089a4 <_dtoa_r+0x34>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e7df      	b.n	8008be6 <_dtoa_r+0x276>
 8008c26:	bf00      	nop
 8008c28:	636f4361 	.word	0x636f4361
 8008c2c:	3fd287a7 	.word	0x3fd287a7
 8008c30:	8b60c8b3 	.word	0x8b60c8b3
 8008c34:	3fc68a28 	.word	0x3fc68a28
 8008c38:	509f79fb 	.word	0x509f79fb
 8008c3c:	3fd34413 	.word	0x3fd34413
 8008c40:	0800b3c8 	.word	0x0800b3c8
 8008c44:	0800b485 	.word	0x0800b485
 8008c48:	7ff00000 	.word	0x7ff00000
 8008c4c:	0800b481 	.word	0x0800b481
 8008c50:	0800b478 	.word	0x0800b478
 8008c54:	0800b3a5 	.word	0x0800b3a5
 8008c58:	3ff80000 	.word	0x3ff80000
 8008c5c:	0800b578 	.word	0x0800b578
 8008c60:	0800b4e0 	.word	0x0800b4e0
 8008c64:	2501      	movs	r5, #1
 8008c66:	2300      	movs	r3, #0
 8008c68:	9306      	str	r3, [sp, #24]
 8008c6a:	9508      	str	r5, [sp, #32]
 8008c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c74:	2200      	movs	r2, #0
 8008c76:	2312      	movs	r3, #18
 8008c78:	e7b0      	b.n	8008bdc <_dtoa_r+0x26c>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	9308      	str	r3, [sp, #32]
 8008c7e:	e7f5      	b.n	8008c6c <_dtoa_r+0x2fc>
 8008c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c86:	e7b8      	b.n	8008bfa <_dtoa_r+0x28a>
 8008c88:	3101      	adds	r1, #1
 8008c8a:	6041      	str	r1, [r0, #4]
 8008c8c:	0052      	lsls	r2, r2, #1
 8008c8e:	e7b8      	b.n	8008c02 <_dtoa_r+0x292>
 8008c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c92:	9a01      	ldr	r2, [sp, #4]
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	2b0e      	cmp	r3, #14
 8008c9a:	f200 809d 	bhi.w	8008dd8 <_dtoa_r+0x468>
 8008c9e:	2d00      	cmp	r5, #0
 8008ca0:	f000 809a 	beq.w	8008dd8 <_dtoa_r+0x468>
 8008ca4:	9b00      	ldr	r3, [sp, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	dd32      	ble.n	8008d10 <_dtoa_r+0x3a0>
 8008caa:	4ab7      	ldr	r2, [pc, #732]	; (8008f88 <_dtoa_r+0x618>)
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cb8:	9b00      	ldr	r3, [sp, #0]
 8008cba:	05d8      	lsls	r0, r3, #23
 8008cbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008cc0:	d516      	bpl.n	8008cf0 <_dtoa_r+0x380>
 8008cc2:	4bb2      	ldr	r3, [pc, #712]	; (8008f8c <_dtoa_r+0x61c>)
 8008cc4:	ec51 0b19 	vmov	r0, r1, d9
 8008cc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ccc:	f7f7 fdce 	bl	800086c <__aeabi_ddiv>
 8008cd0:	f007 070f 	and.w	r7, r7, #15
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	468b      	mov	fp, r1
 8008cd8:	2503      	movs	r5, #3
 8008cda:	4eac      	ldr	r6, [pc, #688]	; (8008f8c <_dtoa_r+0x61c>)
 8008cdc:	b957      	cbnz	r7, 8008cf4 <_dtoa_r+0x384>
 8008cde:	4642      	mov	r2, r8
 8008ce0:	464b      	mov	r3, r9
 8008ce2:	4650      	mov	r0, sl
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	f7f7 fdc1 	bl	800086c <__aeabi_ddiv>
 8008cea:	4682      	mov	sl, r0
 8008cec:	468b      	mov	fp, r1
 8008cee:	e028      	b.n	8008d42 <_dtoa_r+0x3d2>
 8008cf0:	2502      	movs	r5, #2
 8008cf2:	e7f2      	b.n	8008cda <_dtoa_r+0x36a>
 8008cf4:	07f9      	lsls	r1, r7, #31
 8008cf6:	d508      	bpl.n	8008d0a <_dtoa_r+0x39a>
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d00:	f7f7 fc8a 	bl	8000618 <__aeabi_dmul>
 8008d04:	3501      	adds	r5, #1
 8008d06:	4680      	mov	r8, r0
 8008d08:	4689      	mov	r9, r1
 8008d0a:	107f      	asrs	r7, r7, #1
 8008d0c:	3608      	adds	r6, #8
 8008d0e:	e7e5      	b.n	8008cdc <_dtoa_r+0x36c>
 8008d10:	f000 809b 	beq.w	8008e4a <_dtoa_r+0x4da>
 8008d14:	9b00      	ldr	r3, [sp, #0]
 8008d16:	4f9d      	ldr	r7, [pc, #628]	; (8008f8c <_dtoa_r+0x61c>)
 8008d18:	425e      	negs	r6, r3
 8008d1a:	4b9b      	ldr	r3, [pc, #620]	; (8008f88 <_dtoa_r+0x618>)
 8008d1c:	f006 020f 	and.w	r2, r6, #15
 8008d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	ec51 0b19 	vmov	r0, r1, d9
 8008d2c:	f7f7 fc74 	bl	8000618 <__aeabi_dmul>
 8008d30:	1136      	asrs	r6, r6, #4
 8008d32:	4682      	mov	sl, r0
 8008d34:	468b      	mov	fp, r1
 8008d36:	2300      	movs	r3, #0
 8008d38:	2502      	movs	r5, #2
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	d17a      	bne.n	8008e34 <_dtoa_r+0x4c4>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1d3      	bne.n	8008cea <_dtoa_r+0x37a>
 8008d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8082 	beq.w	8008e4e <_dtoa_r+0x4de>
 8008d4a:	4b91      	ldr	r3, [pc, #580]	; (8008f90 <_dtoa_r+0x620>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4650      	mov	r0, sl
 8008d50:	4659      	mov	r1, fp
 8008d52:	f7f7 fed3 	bl	8000afc <__aeabi_dcmplt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d079      	beq.n	8008e4e <_dtoa_r+0x4de>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d076      	beq.n	8008e4e <_dtoa_r+0x4de>
 8008d60:	9b02      	ldr	r3, [sp, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	dd36      	ble.n	8008dd4 <_dtoa_r+0x464>
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	4650      	mov	r0, sl
 8008d6a:	4659      	mov	r1, fp
 8008d6c:	1e5f      	subs	r7, r3, #1
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4b88      	ldr	r3, [pc, #544]	; (8008f94 <_dtoa_r+0x624>)
 8008d72:	f7f7 fc51 	bl	8000618 <__aeabi_dmul>
 8008d76:	9e02      	ldr	r6, [sp, #8]
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f7f7 fbe0 	bl	8000544 <__aeabi_i2d>
 8008d84:	4652      	mov	r2, sl
 8008d86:	465b      	mov	r3, fp
 8008d88:	f7f7 fc46 	bl	8000618 <__aeabi_dmul>
 8008d8c:	4b82      	ldr	r3, [pc, #520]	; (8008f98 <_dtoa_r+0x628>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f7f7 fa8c 	bl	80002ac <__adddf3>
 8008d94:	46d0      	mov	r8, sl
 8008d96:	46d9      	mov	r9, fp
 8008d98:	4682      	mov	sl, r0
 8008d9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	d158      	bne.n	8008e54 <_dtoa_r+0x4e4>
 8008da2:	4b7e      	ldr	r3, [pc, #504]	; (8008f9c <_dtoa_r+0x62c>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	4640      	mov	r0, r8
 8008da8:	4649      	mov	r1, r9
 8008daa:	f7f7 fa7d 	bl	80002a8 <__aeabi_dsub>
 8008dae:	4652      	mov	r2, sl
 8008db0:	465b      	mov	r3, fp
 8008db2:	4680      	mov	r8, r0
 8008db4:	4689      	mov	r9, r1
 8008db6:	f7f7 febf 	bl	8000b38 <__aeabi_dcmpgt>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f040 8295 	bne.w	80092ea <_dtoa_r+0x97a>
 8008dc0:	4652      	mov	r2, sl
 8008dc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	4649      	mov	r1, r9
 8008dca:	f7f7 fe97 	bl	8000afc <__aeabi_dcmplt>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f040 8289 	bne.w	80092e6 <_dtoa_r+0x976>
 8008dd4:	ec5b ab19 	vmov	sl, fp, d9
 8008dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f2c0 8148 	blt.w	8009070 <_dtoa_r+0x700>
 8008de0:	9a00      	ldr	r2, [sp, #0]
 8008de2:	2a0e      	cmp	r2, #14
 8008de4:	f300 8144 	bgt.w	8009070 <_dtoa_r+0x700>
 8008de8:	4b67      	ldr	r3, [pc, #412]	; (8008f88 <_dtoa_r+0x618>)
 8008dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f280 80d5 	bge.w	8008fa4 <_dtoa_r+0x634>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f300 80d1 	bgt.w	8008fa4 <_dtoa_r+0x634>
 8008e02:	f040 826f 	bne.w	80092e4 <_dtoa_r+0x974>
 8008e06:	4b65      	ldr	r3, [pc, #404]	; (8008f9c <_dtoa_r+0x62c>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fc03 	bl	8000618 <__aeabi_dmul>
 8008e12:	4652      	mov	r2, sl
 8008e14:	465b      	mov	r3, fp
 8008e16:	f7f7 fe85 	bl	8000b24 <__aeabi_dcmpge>
 8008e1a:	9e03      	ldr	r6, [sp, #12]
 8008e1c:	4637      	mov	r7, r6
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	f040 8245 	bne.w	80092ae <_dtoa_r+0x93e>
 8008e24:	9d01      	ldr	r5, [sp, #4]
 8008e26:	2331      	movs	r3, #49	; 0x31
 8008e28:	f805 3b01 	strb.w	r3, [r5], #1
 8008e2c:	9b00      	ldr	r3, [sp, #0]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	e240      	b.n	80092b6 <_dtoa_r+0x946>
 8008e34:	07f2      	lsls	r2, r6, #31
 8008e36:	d505      	bpl.n	8008e44 <_dtoa_r+0x4d4>
 8008e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e3c:	f7f7 fbec 	bl	8000618 <__aeabi_dmul>
 8008e40:	3501      	adds	r5, #1
 8008e42:	2301      	movs	r3, #1
 8008e44:	1076      	asrs	r6, r6, #1
 8008e46:	3708      	adds	r7, #8
 8008e48:	e777      	b.n	8008d3a <_dtoa_r+0x3ca>
 8008e4a:	2502      	movs	r5, #2
 8008e4c:	e779      	b.n	8008d42 <_dtoa_r+0x3d2>
 8008e4e:	9f00      	ldr	r7, [sp, #0]
 8008e50:	9e03      	ldr	r6, [sp, #12]
 8008e52:	e794      	b.n	8008d7e <_dtoa_r+0x40e>
 8008e54:	9901      	ldr	r1, [sp, #4]
 8008e56:	4b4c      	ldr	r3, [pc, #304]	; (8008f88 <_dtoa_r+0x618>)
 8008e58:	4431      	add	r1, r6
 8008e5a:	910d      	str	r1, [sp, #52]	; 0x34
 8008e5c:	9908      	ldr	r1, [sp, #32]
 8008e5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d043      	beq.n	8008ef2 <_dtoa_r+0x582>
 8008e6a:	494d      	ldr	r1, [pc, #308]	; (8008fa0 <_dtoa_r+0x630>)
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	f7f7 fcfd 	bl	800086c <__aeabi_ddiv>
 8008e72:	4652      	mov	r2, sl
 8008e74:	465b      	mov	r3, fp
 8008e76:	f7f7 fa17 	bl	80002a8 <__aeabi_dsub>
 8008e7a:	9d01      	ldr	r5, [sp, #4]
 8008e7c:	4682      	mov	sl, r0
 8008e7e:	468b      	mov	fp, r1
 8008e80:	4649      	mov	r1, r9
 8008e82:	4640      	mov	r0, r8
 8008e84:	f7f7 fe78 	bl	8000b78 <__aeabi_d2iz>
 8008e88:	4606      	mov	r6, r0
 8008e8a:	f7f7 fb5b 	bl	8000544 <__aeabi_i2d>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fa07 	bl	80002a8 <__aeabi_dsub>
 8008e9a:	3630      	adds	r6, #48	; 0x30
 8008e9c:	f805 6b01 	strb.w	r6, [r5], #1
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	4689      	mov	r9, r1
 8008ea8:	f7f7 fe28 	bl	8000afc <__aeabi_dcmplt>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d163      	bne.n	8008f78 <_dtoa_r+0x608>
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	4936      	ldr	r1, [pc, #216]	; (8008f90 <_dtoa_r+0x620>)
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	f7f7 f9f6 	bl	80002a8 <__aeabi_dsub>
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	465b      	mov	r3, fp
 8008ec0:	f7f7 fe1c 	bl	8000afc <__aeabi_dcmplt>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f040 80b5 	bne.w	8009034 <_dtoa_r+0x6c4>
 8008eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ecc:	429d      	cmp	r5, r3
 8008ece:	d081      	beq.n	8008dd4 <_dtoa_r+0x464>
 8008ed0:	4b30      	ldr	r3, [pc, #192]	; (8008f94 <_dtoa_r+0x624>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4650      	mov	r0, sl
 8008ed6:	4659      	mov	r1, fp
 8008ed8:	f7f7 fb9e 	bl	8000618 <__aeabi_dmul>
 8008edc:	4b2d      	ldr	r3, [pc, #180]	; (8008f94 <_dtoa_r+0x624>)
 8008ede:	4682      	mov	sl, r0
 8008ee0:	468b      	mov	fp, r1
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f7f7 fb96 	bl	8000618 <__aeabi_dmul>
 8008eec:	4680      	mov	r8, r0
 8008eee:	4689      	mov	r9, r1
 8008ef0:	e7c6      	b.n	8008e80 <_dtoa_r+0x510>
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	f7f7 fb8f 	bl	8000618 <__aeabi_dmul>
 8008efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008efc:	9d01      	ldr	r5, [sp, #4]
 8008efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f00:	4682      	mov	sl, r0
 8008f02:	468b      	mov	fp, r1
 8008f04:	4649      	mov	r1, r9
 8008f06:	4640      	mov	r0, r8
 8008f08:	f7f7 fe36 	bl	8000b78 <__aeabi_d2iz>
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	f7f7 fb19 	bl	8000544 <__aeabi_i2d>
 8008f12:	3630      	adds	r6, #48	; 0x30
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	f7f7 f9c4 	bl	80002a8 <__aeabi_dsub>
 8008f20:	f805 6b01 	strb.w	r6, [r5], #1
 8008f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f26:	429d      	cmp	r5, r3
 8008f28:	4680      	mov	r8, r0
 8008f2a:	4689      	mov	r9, r1
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	d124      	bne.n	8008f7c <_dtoa_r+0x60c>
 8008f32:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <_dtoa_r+0x630>)
 8008f34:	4650      	mov	r0, sl
 8008f36:	4659      	mov	r1, fp
 8008f38:	f7f7 f9b8 	bl	80002ac <__adddf3>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7f7 fdf8 	bl	8000b38 <__aeabi_dcmpgt>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d173      	bne.n	8009034 <_dtoa_r+0x6c4>
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	465b      	mov	r3, fp
 8008f50:	4913      	ldr	r1, [pc, #76]	; (8008fa0 <_dtoa_r+0x630>)
 8008f52:	2000      	movs	r0, #0
 8008f54:	f7f7 f9a8 	bl	80002a8 <__aeabi_dsub>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	4649      	mov	r1, r9
 8008f60:	f7f7 fdcc 	bl	8000afc <__aeabi_dcmplt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f43f af35 	beq.w	8008dd4 <_dtoa_r+0x464>
 8008f6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f6c:	1e6b      	subs	r3, r5, #1
 8008f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f74:	2b30      	cmp	r3, #48	; 0x30
 8008f76:	d0f8      	beq.n	8008f6a <_dtoa_r+0x5fa>
 8008f78:	9700      	str	r7, [sp, #0]
 8008f7a:	e049      	b.n	8009010 <_dtoa_r+0x6a0>
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <_dtoa_r+0x624>)
 8008f7e:	f7f7 fb4b 	bl	8000618 <__aeabi_dmul>
 8008f82:	4680      	mov	r8, r0
 8008f84:	4689      	mov	r9, r1
 8008f86:	e7bd      	b.n	8008f04 <_dtoa_r+0x594>
 8008f88:	0800b578 	.word	0x0800b578
 8008f8c:	0800b550 	.word	0x0800b550
 8008f90:	3ff00000 	.word	0x3ff00000
 8008f94:	40240000 	.word	0x40240000
 8008f98:	401c0000 	.word	0x401c0000
 8008f9c:	40140000 	.word	0x40140000
 8008fa0:	3fe00000 	.word	0x3fe00000
 8008fa4:	9d01      	ldr	r5, [sp, #4]
 8008fa6:	4656      	mov	r6, sl
 8008fa8:	465f      	mov	r7, fp
 8008faa:	4642      	mov	r2, r8
 8008fac:	464b      	mov	r3, r9
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	f7f7 fc5b 	bl	800086c <__aeabi_ddiv>
 8008fb6:	f7f7 fddf 	bl	8000b78 <__aeabi_d2iz>
 8008fba:	4682      	mov	sl, r0
 8008fbc:	f7f7 fac2 	bl	8000544 <__aeabi_i2d>
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	f7f7 fb28 	bl	8000618 <__aeabi_dmul>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4630      	mov	r0, r6
 8008fce:	4639      	mov	r1, r7
 8008fd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008fd4:	f7f7 f968 	bl	80002a8 <__aeabi_dsub>
 8008fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8008fdc:	9e01      	ldr	r6, [sp, #4]
 8008fde:	9f03      	ldr	r7, [sp, #12]
 8008fe0:	1bae      	subs	r6, r5, r6
 8008fe2:	42b7      	cmp	r7, r6
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	d135      	bne.n	8009056 <_dtoa_r+0x6e6>
 8008fea:	f7f7 f95f 	bl	80002ac <__adddf3>
 8008fee:	4642      	mov	r2, r8
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	460f      	mov	r7, r1
 8008ff6:	f7f7 fd9f 	bl	8000b38 <__aeabi_dcmpgt>
 8008ffa:	b9d0      	cbnz	r0, 8009032 <_dtoa_r+0x6c2>
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	464b      	mov	r3, r9
 8009000:	4630      	mov	r0, r6
 8009002:	4639      	mov	r1, r7
 8009004:	f7f7 fd70 	bl	8000ae8 <__aeabi_dcmpeq>
 8009008:	b110      	cbz	r0, 8009010 <_dtoa_r+0x6a0>
 800900a:	f01a 0f01 	tst.w	sl, #1
 800900e:	d110      	bne.n	8009032 <_dtoa_r+0x6c2>
 8009010:	4620      	mov	r0, r4
 8009012:	ee18 1a10 	vmov	r1, s16
 8009016:	f000 fafb 	bl	8009610 <_Bfree>
 800901a:	2300      	movs	r3, #0
 800901c:	9800      	ldr	r0, [sp, #0]
 800901e:	702b      	strb	r3, [r5, #0]
 8009020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009022:	3001      	adds	r0, #1
 8009024:	6018      	str	r0, [r3, #0]
 8009026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009028:	2b00      	cmp	r3, #0
 800902a:	f43f acf1 	beq.w	8008a10 <_dtoa_r+0xa0>
 800902e:	601d      	str	r5, [r3, #0]
 8009030:	e4ee      	b.n	8008a10 <_dtoa_r+0xa0>
 8009032:	9f00      	ldr	r7, [sp, #0]
 8009034:	462b      	mov	r3, r5
 8009036:	461d      	mov	r5, r3
 8009038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800903c:	2a39      	cmp	r2, #57	; 0x39
 800903e:	d106      	bne.n	800904e <_dtoa_r+0x6de>
 8009040:	9a01      	ldr	r2, [sp, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d1f7      	bne.n	8009036 <_dtoa_r+0x6c6>
 8009046:	9901      	ldr	r1, [sp, #4]
 8009048:	2230      	movs	r2, #48	; 0x30
 800904a:	3701      	adds	r7, #1
 800904c:	700a      	strb	r2, [r1, #0]
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	3201      	adds	r2, #1
 8009052:	701a      	strb	r2, [r3, #0]
 8009054:	e790      	b.n	8008f78 <_dtoa_r+0x608>
 8009056:	4ba6      	ldr	r3, [pc, #664]	; (80092f0 <_dtoa_r+0x980>)
 8009058:	2200      	movs	r2, #0
 800905a:	f7f7 fadd 	bl	8000618 <__aeabi_dmul>
 800905e:	2200      	movs	r2, #0
 8009060:	2300      	movs	r3, #0
 8009062:	4606      	mov	r6, r0
 8009064:	460f      	mov	r7, r1
 8009066:	f7f7 fd3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800906a:	2800      	cmp	r0, #0
 800906c:	d09d      	beq.n	8008faa <_dtoa_r+0x63a>
 800906e:	e7cf      	b.n	8009010 <_dtoa_r+0x6a0>
 8009070:	9a08      	ldr	r2, [sp, #32]
 8009072:	2a00      	cmp	r2, #0
 8009074:	f000 80d7 	beq.w	8009226 <_dtoa_r+0x8b6>
 8009078:	9a06      	ldr	r2, [sp, #24]
 800907a:	2a01      	cmp	r2, #1
 800907c:	f300 80ba 	bgt.w	80091f4 <_dtoa_r+0x884>
 8009080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009082:	2a00      	cmp	r2, #0
 8009084:	f000 80b2 	beq.w	80091ec <_dtoa_r+0x87c>
 8009088:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800908c:	9e07      	ldr	r6, [sp, #28]
 800908e:	9d04      	ldr	r5, [sp, #16]
 8009090:	9a04      	ldr	r2, [sp, #16]
 8009092:	441a      	add	r2, r3
 8009094:	9204      	str	r2, [sp, #16]
 8009096:	9a05      	ldr	r2, [sp, #20]
 8009098:	2101      	movs	r1, #1
 800909a:	441a      	add	r2, r3
 800909c:	4620      	mov	r0, r4
 800909e:	9205      	str	r2, [sp, #20]
 80090a0:	f000 fb6e 	bl	8009780 <__i2b>
 80090a4:	4607      	mov	r7, r0
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	dd0c      	ble.n	80090c4 <_dtoa_r+0x754>
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd09      	ble.n	80090c4 <_dtoa_r+0x754>
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	9a04      	ldr	r2, [sp, #16]
 80090b4:	bfa8      	it	ge
 80090b6:	462b      	movge	r3, r5
 80090b8:	1ad2      	subs	r2, r2, r3
 80090ba:	9204      	str	r2, [sp, #16]
 80090bc:	9a05      	ldr	r2, [sp, #20]
 80090be:	1aed      	subs	r5, r5, r3
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	b31b      	cbz	r3, 8009110 <_dtoa_r+0x7a0>
 80090c8:	9b08      	ldr	r3, [sp, #32]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 80af 	beq.w	800922e <_dtoa_r+0x8be>
 80090d0:	2e00      	cmp	r6, #0
 80090d2:	dd13      	ble.n	80090fc <_dtoa_r+0x78c>
 80090d4:	4639      	mov	r1, r7
 80090d6:	4632      	mov	r2, r6
 80090d8:	4620      	mov	r0, r4
 80090da:	f000 fc11 	bl	8009900 <__pow5mult>
 80090de:	ee18 2a10 	vmov	r2, s16
 80090e2:	4601      	mov	r1, r0
 80090e4:	4607      	mov	r7, r0
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 fb60 	bl	80097ac <__multiply>
 80090ec:	ee18 1a10 	vmov	r1, s16
 80090f0:	4680      	mov	r8, r0
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fa8c 	bl	8009610 <_Bfree>
 80090f8:	ee08 8a10 	vmov	s16, r8
 80090fc:	9b07      	ldr	r3, [sp, #28]
 80090fe:	1b9a      	subs	r2, r3, r6
 8009100:	d006      	beq.n	8009110 <_dtoa_r+0x7a0>
 8009102:	ee18 1a10 	vmov	r1, s16
 8009106:	4620      	mov	r0, r4
 8009108:	f000 fbfa 	bl	8009900 <__pow5mult>
 800910c:	ee08 0a10 	vmov	s16, r0
 8009110:	2101      	movs	r1, #1
 8009112:	4620      	mov	r0, r4
 8009114:	f000 fb34 	bl	8009780 <__i2b>
 8009118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	4606      	mov	r6, r0
 800911e:	f340 8088 	ble.w	8009232 <_dtoa_r+0x8c2>
 8009122:	461a      	mov	r2, r3
 8009124:	4601      	mov	r1, r0
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fbea 	bl	8009900 <__pow5mult>
 800912c:	9b06      	ldr	r3, [sp, #24]
 800912e:	2b01      	cmp	r3, #1
 8009130:	4606      	mov	r6, r0
 8009132:	f340 8081 	ble.w	8009238 <_dtoa_r+0x8c8>
 8009136:	f04f 0800 	mov.w	r8, #0
 800913a:	6933      	ldr	r3, [r6, #16]
 800913c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009140:	6918      	ldr	r0, [r3, #16]
 8009142:	f000 facd 	bl	80096e0 <__hi0bits>
 8009146:	f1c0 0020 	rsb	r0, r0, #32
 800914a:	9b05      	ldr	r3, [sp, #20]
 800914c:	4418      	add	r0, r3
 800914e:	f010 001f 	ands.w	r0, r0, #31
 8009152:	f000 8092 	beq.w	800927a <_dtoa_r+0x90a>
 8009156:	f1c0 0320 	rsb	r3, r0, #32
 800915a:	2b04      	cmp	r3, #4
 800915c:	f340 808a 	ble.w	8009274 <_dtoa_r+0x904>
 8009160:	f1c0 001c 	rsb	r0, r0, #28
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	4403      	add	r3, r0
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9b05      	ldr	r3, [sp, #20]
 800916c:	4403      	add	r3, r0
 800916e:	4405      	add	r5, r0
 8009170:	9305      	str	r3, [sp, #20]
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	dd07      	ble.n	8009188 <_dtoa_r+0x818>
 8009178:	ee18 1a10 	vmov	r1, s16
 800917c:	461a      	mov	r2, r3
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fc18 	bl	80099b4 <__lshift>
 8009184:	ee08 0a10 	vmov	s16, r0
 8009188:	9b05      	ldr	r3, [sp, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	dd05      	ble.n	800919a <_dtoa_r+0x82a>
 800918e:	4631      	mov	r1, r6
 8009190:	461a      	mov	r2, r3
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fc0e 	bl	80099b4 <__lshift>
 8009198:	4606      	mov	r6, r0
 800919a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d06e      	beq.n	800927e <_dtoa_r+0x90e>
 80091a0:	ee18 0a10 	vmov	r0, s16
 80091a4:	4631      	mov	r1, r6
 80091a6:	f000 fc75 	bl	8009a94 <__mcmp>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	da67      	bge.n	800927e <_dtoa_r+0x90e>
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	ee18 1a10 	vmov	r1, s16
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	220a      	movs	r2, #10
 80091ba:	2300      	movs	r3, #0
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fa49 	bl	8009654 <__multadd>
 80091c2:	9b08      	ldr	r3, [sp, #32]
 80091c4:	ee08 0a10 	vmov	s16, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 81b1 	beq.w	8009530 <_dtoa_r+0xbc0>
 80091ce:	2300      	movs	r3, #0
 80091d0:	4639      	mov	r1, r7
 80091d2:	220a      	movs	r2, #10
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fa3d 	bl	8009654 <__multadd>
 80091da:	9b02      	ldr	r3, [sp, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	4607      	mov	r7, r0
 80091e0:	f300 808e 	bgt.w	8009300 <_dtoa_r+0x990>
 80091e4:	9b06      	ldr	r3, [sp, #24]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	dc51      	bgt.n	800928e <_dtoa_r+0x91e>
 80091ea:	e089      	b.n	8009300 <_dtoa_r+0x990>
 80091ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091f2:	e74b      	b.n	800908c <_dtoa_r+0x71c>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	1e5e      	subs	r6, r3, #1
 80091f8:	9b07      	ldr	r3, [sp, #28]
 80091fa:	42b3      	cmp	r3, r6
 80091fc:	bfbf      	itttt	lt
 80091fe:	9b07      	ldrlt	r3, [sp, #28]
 8009200:	9607      	strlt	r6, [sp, #28]
 8009202:	1af2      	sublt	r2, r6, r3
 8009204:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009206:	bfb6      	itet	lt
 8009208:	189b      	addlt	r3, r3, r2
 800920a:	1b9e      	subge	r6, r3, r6
 800920c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	bfb8      	it	lt
 8009212:	2600      	movlt	r6, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	bfb7      	itett	lt
 8009218:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800921c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009220:	1a9d      	sublt	r5, r3, r2
 8009222:	2300      	movlt	r3, #0
 8009224:	e734      	b.n	8009090 <_dtoa_r+0x720>
 8009226:	9e07      	ldr	r6, [sp, #28]
 8009228:	9d04      	ldr	r5, [sp, #16]
 800922a:	9f08      	ldr	r7, [sp, #32]
 800922c:	e73b      	b.n	80090a6 <_dtoa_r+0x736>
 800922e:	9a07      	ldr	r2, [sp, #28]
 8009230:	e767      	b.n	8009102 <_dtoa_r+0x792>
 8009232:	9b06      	ldr	r3, [sp, #24]
 8009234:	2b01      	cmp	r3, #1
 8009236:	dc18      	bgt.n	800926a <_dtoa_r+0x8fa>
 8009238:	f1ba 0f00 	cmp.w	sl, #0
 800923c:	d115      	bne.n	800926a <_dtoa_r+0x8fa>
 800923e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009242:	b993      	cbnz	r3, 800926a <_dtoa_r+0x8fa>
 8009244:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009248:	0d1b      	lsrs	r3, r3, #20
 800924a:	051b      	lsls	r3, r3, #20
 800924c:	b183      	cbz	r3, 8009270 <_dtoa_r+0x900>
 800924e:	9b04      	ldr	r3, [sp, #16]
 8009250:	3301      	adds	r3, #1
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	9b05      	ldr	r3, [sp, #20]
 8009256:	3301      	adds	r3, #1
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	f04f 0801 	mov.w	r8, #1
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	2b00      	cmp	r3, #0
 8009262:	f47f af6a 	bne.w	800913a <_dtoa_r+0x7ca>
 8009266:	2001      	movs	r0, #1
 8009268:	e76f      	b.n	800914a <_dtoa_r+0x7da>
 800926a:	f04f 0800 	mov.w	r8, #0
 800926e:	e7f6      	b.n	800925e <_dtoa_r+0x8ee>
 8009270:	4698      	mov	r8, r3
 8009272:	e7f4      	b.n	800925e <_dtoa_r+0x8ee>
 8009274:	f43f af7d 	beq.w	8009172 <_dtoa_r+0x802>
 8009278:	4618      	mov	r0, r3
 800927a:	301c      	adds	r0, #28
 800927c:	e772      	b.n	8009164 <_dtoa_r+0x7f4>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	dc37      	bgt.n	80092f4 <_dtoa_r+0x984>
 8009284:	9b06      	ldr	r3, [sp, #24]
 8009286:	2b02      	cmp	r3, #2
 8009288:	dd34      	ble.n	80092f4 <_dtoa_r+0x984>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	9302      	str	r3, [sp, #8]
 800928e:	9b02      	ldr	r3, [sp, #8]
 8009290:	b96b      	cbnz	r3, 80092ae <_dtoa_r+0x93e>
 8009292:	4631      	mov	r1, r6
 8009294:	2205      	movs	r2, #5
 8009296:	4620      	mov	r0, r4
 8009298:	f000 f9dc 	bl	8009654 <__multadd>
 800929c:	4601      	mov	r1, r0
 800929e:	4606      	mov	r6, r0
 80092a0:	ee18 0a10 	vmov	r0, s16
 80092a4:	f000 fbf6 	bl	8009a94 <__mcmp>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	f73f adbb 	bgt.w	8008e24 <_dtoa_r+0x4b4>
 80092ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b0:	9d01      	ldr	r5, [sp, #4]
 80092b2:	43db      	mvns	r3, r3
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	f04f 0800 	mov.w	r8, #0
 80092ba:	4631      	mov	r1, r6
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 f9a7 	bl	8009610 <_Bfree>
 80092c2:	2f00      	cmp	r7, #0
 80092c4:	f43f aea4 	beq.w	8009010 <_dtoa_r+0x6a0>
 80092c8:	f1b8 0f00 	cmp.w	r8, #0
 80092cc:	d005      	beq.n	80092da <_dtoa_r+0x96a>
 80092ce:	45b8      	cmp	r8, r7
 80092d0:	d003      	beq.n	80092da <_dtoa_r+0x96a>
 80092d2:	4641      	mov	r1, r8
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 f99b 	bl	8009610 <_Bfree>
 80092da:	4639      	mov	r1, r7
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 f997 	bl	8009610 <_Bfree>
 80092e2:	e695      	b.n	8009010 <_dtoa_r+0x6a0>
 80092e4:	2600      	movs	r6, #0
 80092e6:	4637      	mov	r7, r6
 80092e8:	e7e1      	b.n	80092ae <_dtoa_r+0x93e>
 80092ea:	9700      	str	r7, [sp, #0]
 80092ec:	4637      	mov	r7, r6
 80092ee:	e599      	b.n	8008e24 <_dtoa_r+0x4b4>
 80092f0:	40240000 	.word	0x40240000
 80092f4:	9b08      	ldr	r3, [sp, #32]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 80ca 	beq.w	8009490 <_dtoa_r+0xb20>
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	9302      	str	r3, [sp, #8]
 8009300:	2d00      	cmp	r5, #0
 8009302:	dd05      	ble.n	8009310 <_dtoa_r+0x9a0>
 8009304:	4639      	mov	r1, r7
 8009306:	462a      	mov	r2, r5
 8009308:	4620      	mov	r0, r4
 800930a:	f000 fb53 	bl	80099b4 <__lshift>
 800930e:	4607      	mov	r7, r0
 8009310:	f1b8 0f00 	cmp.w	r8, #0
 8009314:	d05b      	beq.n	80093ce <_dtoa_r+0xa5e>
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4620      	mov	r0, r4
 800931a:	f000 f939 	bl	8009590 <_Balloc>
 800931e:	4605      	mov	r5, r0
 8009320:	b928      	cbnz	r0, 800932e <_dtoa_r+0x9be>
 8009322:	4b87      	ldr	r3, [pc, #540]	; (8009540 <_dtoa_r+0xbd0>)
 8009324:	4602      	mov	r2, r0
 8009326:	f240 21ea 	movw	r1, #746	; 0x2ea
 800932a:	f7ff bb3b 	b.w	80089a4 <_dtoa_r+0x34>
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	3202      	adds	r2, #2
 8009332:	0092      	lsls	r2, r2, #2
 8009334:	f107 010c 	add.w	r1, r7, #12
 8009338:	300c      	adds	r0, #12
 800933a:	f7fe fc3b 	bl	8007bb4 <memcpy>
 800933e:	2201      	movs	r2, #1
 8009340:	4629      	mov	r1, r5
 8009342:	4620      	mov	r0, r4
 8009344:	f000 fb36 	bl	80099b4 <__lshift>
 8009348:	9b01      	ldr	r3, [sp, #4]
 800934a:	f103 0901 	add.w	r9, r3, #1
 800934e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009352:	4413      	add	r3, r2
 8009354:	9305      	str	r3, [sp, #20]
 8009356:	f00a 0301 	and.w	r3, sl, #1
 800935a:	46b8      	mov	r8, r7
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	4607      	mov	r7, r0
 8009360:	4631      	mov	r1, r6
 8009362:	ee18 0a10 	vmov	r0, s16
 8009366:	f7ff fa77 	bl	8008858 <quorem>
 800936a:	4641      	mov	r1, r8
 800936c:	9002      	str	r0, [sp, #8]
 800936e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009372:	ee18 0a10 	vmov	r0, s16
 8009376:	f000 fb8d 	bl	8009a94 <__mcmp>
 800937a:	463a      	mov	r2, r7
 800937c:	9003      	str	r0, [sp, #12]
 800937e:	4631      	mov	r1, r6
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fba3 	bl	8009acc <__mdiff>
 8009386:	68c2      	ldr	r2, [r0, #12]
 8009388:	f109 3bff 	add.w	fp, r9, #4294967295
 800938c:	4605      	mov	r5, r0
 800938e:	bb02      	cbnz	r2, 80093d2 <_dtoa_r+0xa62>
 8009390:	4601      	mov	r1, r0
 8009392:	ee18 0a10 	vmov	r0, s16
 8009396:	f000 fb7d 	bl	8009a94 <__mcmp>
 800939a:	4602      	mov	r2, r0
 800939c:	4629      	mov	r1, r5
 800939e:	4620      	mov	r0, r4
 80093a0:	9207      	str	r2, [sp, #28]
 80093a2:	f000 f935 	bl	8009610 <_Bfree>
 80093a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80093aa:	ea43 0102 	orr.w	r1, r3, r2
 80093ae:	9b04      	ldr	r3, [sp, #16]
 80093b0:	430b      	orrs	r3, r1
 80093b2:	464d      	mov	r5, r9
 80093b4:	d10f      	bne.n	80093d6 <_dtoa_r+0xa66>
 80093b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80093ba:	d02a      	beq.n	8009412 <_dtoa_r+0xaa2>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dd02      	ble.n	80093c8 <_dtoa_r+0xa58>
 80093c2:	9b02      	ldr	r3, [sp, #8]
 80093c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80093c8:	f88b a000 	strb.w	sl, [fp]
 80093cc:	e775      	b.n	80092ba <_dtoa_r+0x94a>
 80093ce:	4638      	mov	r0, r7
 80093d0:	e7ba      	b.n	8009348 <_dtoa_r+0x9d8>
 80093d2:	2201      	movs	r2, #1
 80093d4:	e7e2      	b.n	800939c <_dtoa_r+0xa2c>
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	db04      	blt.n	80093e6 <_dtoa_r+0xa76>
 80093dc:	9906      	ldr	r1, [sp, #24]
 80093de:	430b      	orrs	r3, r1
 80093e0:	9904      	ldr	r1, [sp, #16]
 80093e2:	430b      	orrs	r3, r1
 80093e4:	d122      	bne.n	800942c <_dtoa_r+0xabc>
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	ddee      	ble.n	80093c8 <_dtoa_r+0xa58>
 80093ea:	ee18 1a10 	vmov	r1, s16
 80093ee:	2201      	movs	r2, #1
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 fadf 	bl	80099b4 <__lshift>
 80093f6:	4631      	mov	r1, r6
 80093f8:	ee08 0a10 	vmov	s16, r0
 80093fc:	f000 fb4a 	bl	8009a94 <__mcmp>
 8009400:	2800      	cmp	r0, #0
 8009402:	dc03      	bgt.n	800940c <_dtoa_r+0xa9c>
 8009404:	d1e0      	bne.n	80093c8 <_dtoa_r+0xa58>
 8009406:	f01a 0f01 	tst.w	sl, #1
 800940a:	d0dd      	beq.n	80093c8 <_dtoa_r+0xa58>
 800940c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009410:	d1d7      	bne.n	80093c2 <_dtoa_r+0xa52>
 8009412:	2339      	movs	r3, #57	; 0x39
 8009414:	f88b 3000 	strb.w	r3, [fp]
 8009418:	462b      	mov	r3, r5
 800941a:	461d      	mov	r5, r3
 800941c:	3b01      	subs	r3, #1
 800941e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009422:	2a39      	cmp	r2, #57	; 0x39
 8009424:	d071      	beq.n	800950a <_dtoa_r+0xb9a>
 8009426:	3201      	adds	r2, #1
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	e746      	b.n	80092ba <_dtoa_r+0x94a>
 800942c:	2a00      	cmp	r2, #0
 800942e:	dd07      	ble.n	8009440 <_dtoa_r+0xad0>
 8009430:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009434:	d0ed      	beq.n	8009412 <_dtoa_r+0xaa2>
 8009436:	f10a 0301 	add.w	r3, sl, #1
 800943a:	f88b 3000 	strb.w	r3, [fp]
 800943e:	e73c      	b.n	80092ba <_dtoa_r+0x94a>
 8009440:	9b05      	ldr	r3, [sp, #20]
 8009442:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009446:	4599      	cmp	r9, r3
 8009448:	d047      	beq.n	80094da <_dtoa_r+0xb6a>
 800944a:	ee18 1a10 	vmov	r1, s16
 800944e:	2300      	movs	r3, #0
 8009450:	220a      	movs	r2, #10
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f8fe 	bl	8009654 <__multadd>
 8009458:	45b8      	cmp	r8, r7
 800945a:	ee08 0a10 	vmov	s16, r0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	f04f 020a 	mov.w	r2, #10
 8009466:	4641      	mov	r1, r8
 8009468:	4620      	mov	r0, r4
 800946a:	d106      	bne.n	800947a <_dtoa_r+0xb0a>
 800946c:	f000 f8f2 	bl	8009654 <__multadd>
 8009470:	4680      	mov	r8, r0
 8009472:	4607      	mov	r7, r0
 8009474:	f109 0901 	add.w	r9, r9, #1
 8009478:	e772      	b.n	8009360 <_dtoa_r+0x9f0>
 800947a:	f000 f8eb 	bl	8009654 <__multadd>
 800947e:	4639      	mov	r1, r7
 8009480:	4680      	mov	r8, r0
 8009482:	2300      	movs	r3, #0
 8009484:	220a      	movs	r2, #10
 8009486:	4620      	mov	r0, r4
 8009488:	f000 f8e4 	bl	8009654 <__multadd>
 800948c:	4607      	mov	r7, r0
 800948e:	e7f1      	b.n	8009474 <_dtoa_r+0xb04>
 8009490:	9b03      	ldr	r3, [sp, #12]
 8009492:	9302      	str	r3, [sp, #8]
 8009494:	9d01      	ldr	r5, [sp, #4]
 8009496:	ee18 0a10 	vmov	r0, s16
 800949a:	4631      	mov	r1, r6
 800949c:	f7ff f9dc 	bl	8008858 <quorem>
 80094a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094a4:	9b01      	ldr	r3, [sp, #4]
 80094a6:	f805 ab01 	strb.w	sl, [r5], #1
 80094aa:	1aea      	subs	r2, r5, r3
 80094ac:	9b02      	ldr	r3, [sp, #8]
 80094ae:	4293      	cmp	r3, r2
 80094b0:	dd09      	ble.n	80094c6 <_dtoa_r+0xb56>
 80094b2:	ee18 1a10 	vmov	r1, s16
 80094b6:	2300      	movs	r3, #0
 80094b8:	220a      	movs	r2, #10
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 f8ca 	bl	8009654 <__multadd>
 80094c0:	ee08 0a10 	vmov	s16, r0
 80094c4:	e7e7      	b.n	8009496 <_dtoa_r+0xb26>
 80094c6:	9b02      	ldr	r3, [sp, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	bfc8      	it	gt
 80094cc:	461d      	movgt	r5, r3
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	bfd8      	it	le
 80094d2:	2501      	movle	r5, #1
 80094d4:	441d      	add	r5, r3
 80094d6:	f04f 0800 	mov.w	r8, #0
 80094da:	ee18 1a10 	vmov	r1, s16
 80094de:	2201      	movs	r2, #1
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fa67 	bl	80099b4 <__lshift>
 80094e6:	4631      	mov	r1, r6
 80094e8:	ee08 0a10 	vmov	s16, r0
 80094ec:	f000 fad2 	bl	8009a94 <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	dc91      	bgt.n	8009418 <_dtoa_r+0xaa8>
 80094f4:	d102      	bne.n	80094fc <_dtoa_r+0xb8c>
 80094f6:	f01a 0f01 	tst.w	sl, #1
 80094fa:	d18d      	bne.n	8009418 <_dtoa_r+0xaa8>
 80094fc:	462b      	mov	r3, r5
 80094fe:	461d      	mov	r5, r3
 8009500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009504:	2a30      	cmp	r2, #48	; 0x30
 8009506:	d0fa      	beq.n	80094fe <_dtoa_r+0xb8e>
 8009508:	e6d7      	b.n	80092ba <_dtoa_r+0x94a>
 800950a:	9a01      	ldr	r2, [sp, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d184      	bne.n	800941a <_dtoa_r+0xaaa>
 8009510:	9b00      	ldr	r3, [sp, #0]
 8009512:	3301      	adds	r3, #1
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	2331      	movs	r3, #49	; 0x31
 8009518:	7013      	strb	r3, [r2, #0]
 800951a:	e6ce      	b.n	80092ba <_dtoa_r+0x94a>
 800951c:	4b09      	ldr	r3, [pc, #36]	; (8009544 <_dtoa_r+0xbd4>)
 800951e:	f7ff ba95 	b.w	8008a4c <_dtoa_r+0xdc>
 8009522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009524:	2b00      	cmp	r3, #0
 8009526:	f47f aa6e 	bne.w	8008a06 <_dtoa_r+0x96>
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <_dtoa_r+0xbd8>)
 800952c:	f7ff ba8e 	b.w	8008a4c <_dtoa_r+0xdc>
 8009530:	9b02      	ldr	r3, [sp, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	dcae      	bgt.n	8009494 <_dtoa_r+0xb24>
 8009536:	9b06      	ldr	r3, [sp, #24]
 8009538:	2b02      	cmp	r3, #2
 800953a:	f73f aea8 	bgt.w	800928e <_dtoa_r+0x91e>
 800953e:	e7a9      	b.n	8009494 <_dtoa_r+0xb24>
 8009540:	0800b4e0 	.word	0x0800b4e0
 8009544:	0800b3a4 	.word	0x0800b3a4
 8009548:	0800b478 	.word	0x0800b478

0800954c <fiprintf>:
 800954c:	b40e      	push	{r1, r2, r3}
 800954e:	b503      	push	{r0, r1, lr}
 8009550:	4601      	mov	r1, r0
 8009552:	ab03      	add	r3, sp, #12
 8009554:	4805      	ldr	r0, [pc, #20]	; (800956c <fiprintf+0x20>)
 8009556:	f853 2b04 	ldr.w	r2, [r3], #4
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	f000 fd37 	bl	8009fd0 <_vfiprintf_r>
 8009562:	b002      	add	sp, #8
 8009564:	f85d eb04 	ldr.w	lr, [sp], #4
 8009568:	b003      	add	sp, #12
 800956a:	4770      	bx	lr
 800956c:	2000000c 	.word	0x2000000c

08009570 <_localeconv_r>:
 8009570:	4800      	ldr	r0, [pc, #0]	; (8009574 <_localeconv_r+0x4>)
 8009572:	4770      	bx	lr
 8009574:	20000160 	.word	0x20000160

08009578 <__malloc_lock>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__malloc_lock+0x8>)
 800957a:	f001 b8d9 	b.w	800a730 <__retarget_lock_acquire_recursive>
 800957e:	bf00      	nop
 8009580:	200006c0 	.word	0x200006c0

08009584 <__malloc_unlock>:
 8009584:	4801      	ldr	r0, [pc, #4]	; (800958c <__malloc_unlock+0x8>)
 8009586:	f001 b8d4 	b.w	800a732 <__retarget_lock_release_recursive>
 800958a:	bf00      	nop
 800958c:	200006c0 	.word	0x200006c0

08009590 <_Balloc>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009594:	4604      	mov	r4, r0
 8009596:	460d      	mov	r5, r1
 8009598:	b976      	cbnz	r6, 80095b8 <_Balloc+0x28>
 800959a:	2010      	movs	r0, #16
 800959c:	f7fe fafa 	bl	8007b94 <malloc>
 80095a0:	4602      	mov	r2, r0
 80095a2:	6260      	str	r0, [r4, #36]	; 0x24
 80095a4:	b920      	cbnz	r0, 80095b0 <_Balloc+0x20>
 80095a6:	4b18      	ldr	r3, [pc, #96]	; (8009608 <_Balloc+0x78>)
 80095a8:	4818      	ldr	r0, [pc, #96]	; (800960c <_Balloc+0x7c>)
 80095aa:	2166      	movs	r1, #102	; 0x66
 80095ac:	f7ff f936 	bl	800881c <__assert_func>
 80095b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095b4:	6006      	str	r6, [r0, #0]
 80095b6:	60c6      	str	r6, [r0, #12]
 80095b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095ba:	68f3      	ldr	r3, [r6, #12]
 80095bc:	b183      	cbz	r3, 80095e0 <_Balloc+0x50>
 80095be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095c6:	b9b8      	cbnz	r0, 80095f8 <_Balloc+0x68>
 80095c8:	2101      	movs	r1, #1
 80095ca:	fa01 f605 	lsl.w	r6, r1, r5
 80095ce:	1d72      	adds	r2, r6, #5
 80095d0:	0092      	lsls	r2, r2, #2
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fb60 	bl	8009c98 <_calloc_r>
 80095d8:	b160      	cbz	r0, 80095f4 <_Balloc+0x64>
 80095da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095de:	e00e      	b.n	80095fe <_Balloc+0x6e>
 80095e0:	2221      	movs	r2, #33	; 0x21
 80095e2:	2104      	movs	r1, #4
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 fb57 	bl	8009c98 <_calloc_r>
 80095ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ec:	60f0      	str	r0, [r6, #12]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e4      	bne.n	80095be <_Balloc+0x2e>
 80095f4:	2000      	movs	r0, #0
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	6802      	ldr	r2, [r0, #0]
 80095fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095fe:	2300      	movs	r3, #0
 8009600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009604:	e7f7      	b.n	80095f6 <_Balloc+0x66>
 8009606:	bf00      	nop
 8009608:	0800b3c8 	.word	0x0800b3c8
 800960c:	0800b4f1 	.word	0x0800b4f1

08009610 <_Bfree>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009614:	4605      	mov	r5, r0
 8009616:	460c      	mov	r4, r1
 8009618:	b976      	cbnz	r6, 8009638 <_Bfree+0x28>
 800961a:	2010      	movs	r0, #16
 800961c:	f7fe faba 	bl	8007b94 <malloc>
 8009620:	4602      	mov	r2, r0
 8009622:	6268      	str	r0, [r5, #36]	; 0x24
 8009624:	b920      	cbnz	r0, 8009630 <_Bfree+0x20>
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <_Bfree+0x3c>)
 8009628:	4809      	ldr	r0, [pc, #36]	; (8009650 <_Bfree+0x40>)
 800962a:	218a      	movs	r1, #138	; 0x8a
 800962c:	f7ff f8f6 	bl	800881c <__assert_func>
 8009630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009634:	6006      	str	r6, [r0, #0]
 8009636:	60c6      	str	r6, [r0, #12]
 8009638:	b13c      	cbz	r4, 800964a <_Bfree+0x3a>
 800963a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800963c:	6862      	ldr	r2, [r4, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009644:	6021      	str	r1, [r4, #0]
 8009646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	0800b3c8 	.word	0x0800b3c8
 8009650:	0800b4f1 	.word	0x0800b4f1

08009654 <__multadd>:
 8009654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	690d      	ldr	r5, [r1, #16]
 800965a:	4607      	mov	r7, r0
 800965c:	460c      	mov	r4, r1
 800965e:	461e      	mov	r6, r3
 8009660:	f101 0c14 	add.w	ip, r1, #20
 8009664:	2000      	movs	r0, #0
 8009666:	f8dc 3000 	ldr.w	r3, [ip]
 800966a:	b299      	uxth	r1, r3
 800966c:	fb02 6101 	mla	r1, r2, r1, r6
 8009670:	0c1e      	lsrs	r6, r3, #16
 8009672:	0c0b      	lsrs	r3, r1, #16
 8009674:	fb02 3306 	mla	r3, r2, r6, r3
 8009678:	b289      	uxth	r1, r1
 800967a:	3001      	adds	r0, #1
 800967c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009680:	4285      	cmp	r5, r0
 8009682:	f84c 1b04 	str.w	r1, [ip], #4
 8009686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800968a:	dcec      	bgt.n	8009666 <__multadd+0x12>
 800968c:	b30e      	cbz	r6, 80096d2 <__multadd+0x7e>
 800968e:	68a3      	ldr	r3, [r4, #8]
 8009690:	42ab      	cmp	r3, r5
 8009692:	dc19      	bgt.n	80096c8 <__multadd+0x74>
 8009694:	6861      	ldr	r1, [r4, #4]
 8009696:	4638      	mov	r0, r7
 8009698:	3101      	adds	r1, #1
 800969a:	f7ff ff79 	bl	8009590 <_Balloc>
 800969e:	4680      	mov	r8, r0
 80096a0:	b928      	cbnz	r0, 80096ae <__multadd+0x5a>
 80096a2:	4602      	mov	r2, r0
 80096a4:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <__multadd+0x84>)
 80096a6:	480d      	ldr	r0, [pc, #52]	; (80096dc <__multadd+0x88>)
 80096a8:	21b5      	movs	r1, #181	; 0xb5
 80096aa:	f7ff f8b7 	bl	800881c <__assert_func>
 80096ae:	6922      	ldr	r2, [r4, #16]
 80096b0:	3202      	adds	r2, #2
 80096b2:	f104 010c 	add.w	r1, r4, #12
 80096b6:	0092      	lsls	r2, r2, #2
 80096b8:	300c      	adds	r0, #12
 80096ba:	f7fe fa7b 	bl	8007bb4 <memcpy>
 80096be:	4621      	mov	r1, r4
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ffa5 	bl	8009610 <_Bfree>
 80096c6:	4644      	mov	r4, r8
 80096c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096cc:	3501      	adds	r5, #1
 80096ce:	615e      	str	r6, [r3, #20]
 80096d0:	6125      	str	r5, [r4, #16]
 80096d2:	4620      	mov	r0, r4
 80096d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d8:	0800b4e0 	.word	0x0800b4e0
 80096dc:	0800b4f1 	.word	0x0800b4f1

080096e0 <__hi0bits>:
 80096e0:	0c03      	lsrs	r3, r0, #16
 80096e2:	041b      	lsls	r3, r3, #16
 80096e4:	b9d3      	cbnz	r3, 800971c <__hi0bits+0x3c>
 80096e6:	0400      	lsls	r0, r0, #16
 80096e8:	2310      	movs	r3, #16
 80096ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096ee:	bf04      	itt	eq
 80096f0:	0200      	lsleq	r0, r0, #8
 80096f2:	3308      	addeq	r3, #8
 80096f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096f8:	bf04      	itt	eq
 80096fa:	0100      	lsleq	r0, r0, #4
 80096fc:	3304      	addeq	r3, #4
 80096fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009702:	bf04      	itt	eq
 8009704:	0080      	lsleq	r0, r0, #2
 8009706:	3302      	addeq	r3, #2
 8009708:	2800      	cmp	r0, #0
 800970a:	db05      	blt.n	8009718 <__hi0bits+0x38>
 800970c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009710:	f103 0301 	add.w	r3, r3, #1
 8009714:	bf08      	it	eq
 8009716:	2320      	moveq	r3, #32
 8009718:	4618      	mov	r0, r3
 800971a:	4770      	bx	lr
 800971c:	2300      	movs	r3, #0
 800971e:	e7e4      	b.n	80096ea <__hi0bits+0xa>

08009720 <__lo0bits>:
 8009720:	6803      	ldr	r3, [r0, #0]
 8009722:	f013 0207 	ands.w	r2, r3, #7
 8009726:	4601      	mov	r1, r0
 8009728:	d00b      	beq.n	8009742 <__lo0bits+0x22>
 800972a:	07da      	lsls	r2, r3, #31
 800972c:	d423      	bmi.n	8009776 <__lo0bits+0x56>
 800972e:	0798      	lsls	r0, r3, #30
 8009730:	bf49      	itett	mi
 8009732:	085b      	lsrmi	r3, r3, #1
 8009734:	089b      	lsrpl	r3, r3, #2
 8009736:	2001      	movmi	r0, #1
 8009738:	600b      	strmi	r3, [r1, #0]
 800973a:	bf5c      	itt	pl
 800973c:	600b      	strpl	r3, [r1, #0]
 800973e:	2002      	movpl	r0, #2
 8009740:	4770      	bx	lr
 8009742:	b298      	uxth	r0, r3
 8009744:	b9a8      	cbnz	r0, 8009772 <__lo0bits+0x52>
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	2010      	movs	r0, #16
 800974a:	b2da      	uxtb	r2, r3
 800974c:	b90a      	cbnz	r2, 8009752 <__lo0bits+0x32>
 800974e:	3008      	adds	r0, #8
 8009750:	0a1b      	lsrs	r3, r3, #8
 8009752:	071a      	lsls	r2, r3, #28
 8009754:	bf04      	itt	eq
 8009756:	091b      	lsreq	r3, r3, #4
 8009758:	3004      	addeq	r0, #4
 800975a:	079a      	lsls	r2, r3, #30
 800975c:	bf04      	itt	eq
 800975e:	089b      	lsreq	r3, r3, #2
 8009760:	3002      	addeq	r0, #2
 8009762:	07da      	lsls	r2, r3, #31
 8009764:	d403      	bmi.n	800976e <__lo0bits+0x4e>
 8009766:	085b      	lsrs	r3, r3, #1
 8009768:	f100 0001 	add.w	r0, r0, #1
 800976c:	d005      	beq.n	800977a <__lo0bits+0x5a>
 800976e:	600b      	str	r3, [r1, #0]
 8009770:	4770      	bx	lr
 8009772:	4610      	mov	r0, r2
 8009774:	e7e9      	b.n	800974a <__lo0bits+0x2a>
 8009776:	2000      	movs	r0, #0
 8009778:	4770      	bx	lr
 800977a:	2020      	movs	r0, #32
 800977c:	4770      	bx	lr
	...

08009780 <__i2b>:
 8009780:	b510      	push	{r4, lr}
 8009782:	460c      	mov	r4, r1
 8009784:	2101      	movs	r1, #1
 8009786:	f7ff ff03 	bl	8009590 <_Balloc>
 800978a:	4602      	mov	r2, r0
 800978c:	b928      	cbnz	r0, 800979a <__i2b+0x1a>
 800978e:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <__i2b+0x24>)
 8009790:	4805      	ldr	r0, [pc, #20]	; (80097a8 <__i2b+0x28>)
 8009792:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009796:	f7ff f841 	bl	800881c <__assert_func>
 800979a:	2301      	movs	r3, #1
 800979c:	6144      	str	r4, [r0, #20]
 800979e:	6103      	str	r3, [r0, #16]
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	bf00      	nop
 80097a4:	0800b4e0 	.word	0x0800b4e0
 80097a8:	0800b4f1 	.word	0x0800b4f1

080097ac <__multiply>:
 80097ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	4691      	mov	r9, r2
 80097b2:	690a      	ldr	r2, [r1, #16]
 80097b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	bfb8      	it	lt
 80097bc:	460b      	movlt	r3, r1
 80097be:	460c      	mov	r4, r1
 80097c0:	bfbc      	itt	lt
 80097c2:	464c      	movlt	r4, r9
 80097c4:	4699      	movlt	r9, r3
 80097c6:	6927      	ldr	r7, [r4, #16]
 80097c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	6861      	ldr	r1, [r4, #4]
 80097d0:	eb07 060a 	add.w	r6, r7, sl
 80097d4:	42b3      	cmp	r3, r6
 80097d6:	b085      	sub	sp, #20
 80097d8:	bfb8      	it	lt
 80097da:	3101      	addlt	r1, #1
 80097dc:	f7ff fed8 	bl	8009590 <_Balloc>
 80097e0:	b930      	cbnz	r0, 80097f0 <__multiply+0x44>
 80097e2:	4602      	mov	r2, r0
 80097e4:	4b44      	ldr	r3, [pc, #272]	; (80098f8 <__multiply+0x14c>)
 80097e6:	4845      	ldr	r0, [pc, #276]	; (80098fc <__multiply+0x150>)
 80097e8:	f240 115d 	movw	r1, #349	; 0x15d
 80097ec:	f7ff f816 	bl	800881c <__assert_func>
 80097f0:	f100 0514 	add.w	r5, r0, #20
 80097f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097f8:	462b      	mov	r3, r5
 80097fa:	2200      	movs	r2, #0
 80097fc:	4543      	cmp	r3, r8
 80097fe:	d321      	bcc.n	8009844 <__multiply+0x98>
 8009800:	f104 0314 	add.w	r3, r4, #20
 8009804:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009808:	f109 0314 	add.w	r3, r9, #20
 800980c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009810:	9202      	str	r2, [sp, #8]
 8009812:	1b3a      	subs	r2, r7, r4
 8009814:	3a15      	subs	r2, #21
 8009816:	f022 0203 	bic.w	r2, r2, #3
 800981a:	3204      	adds	r2, #4
 800981c:	f104 0115 	add.w	r1, r4, #21
 8009820:	428f      	cmp	r7, r1
 8009822:	bf38      	it	cc
 8009824:	2204      	movcc	r2, #4
 8009826:	9201      	str	r2, [sp, #4]
 8009828:	9a02      	ldr	r2, [sp, #8]
 800982a:	9303      	str	r3, [sp, #12]
 800982c:	429a      	cmp	r2, r3
 800982e:	d80c      	bhi.n	800984a <__multiply+0x9e>
 8009830:	2e00      	cmp	r6, #0
 8009832:	dd03      	ble.n	800983c <__multiply+0x90>
 8009834:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009838:	2b00      	cmp	r3, #0
 800983a:	d05a      	beq.n	80098f2 <__multiply+0x146>
 800983c:	6106      	str	r6, [r0, #16]
 800983e:	b005      	add	sp, #20
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	f843 2b04 	str.w	r2, [r3], #4
 8009848:	e7d8      	b.n	80097fc <__multiply+0x50>
 800984a:	f8b3 a000 	ldrh.w	sl, [r3]
 800984e:	f1ba 0f00 	cmp.w	sl, #0
 8009852:	d024      	beq.n	800989e <__multiply+0xf2>
 8009854:	f104 0e14 	add.w	lr, r4, #20
 8009858:	46a9      	mov	r9, r5
 800985a:	f04f 0c00 	mov.w	ip, #0
 800985e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009862:	f8d9 1000 	ldr.w	r1, [r9]
 8009866:	fa1f fb82 	uxth.w	fp, r2
 800986a:	b289      	uxth	r1, r1
 800986c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009870:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009874:	f8d9 2000 	ldr.w	r2, [r9]
 8009878:	4461      	add	r1, ip
 800987a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800987e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009882:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009886:	b289      	uxth	r1, r1
 8009888:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800988c:	4577      	cmp	r7, lr
 800988e:	f849 1b04 	str.w	r1, [r9], #4
 8009892:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009896:	d8e2      	bhi.n	800985e <__multiply+0xb2>
 8009898:	9a01      	ldr	r2, [sp, #4]
 800989a:	f845 c002 	str.w	ip, [r5, r2]
 800989e:	9a03      	ldr	r2, [sp, #12]
 80098a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098a4:	3304      	adds	r3, #4
 80098a6:	f1b9 0f00 	cmp.w	r9, #0
 80098aa:	d020      	beq.n	80098ee <__multiply+0x142>
 80098ac:	6829      	ldr	r1, [r5, #0]
 80098ae:	f104 0c14 	add.w	ip, r4, #20
 80098b2:	46ae      	mov	lr, r5
 80098b4:	f04f 0a00 	mov.w	sl, #0
 80098b8:	f8bc b000 	ldrh.w	fp, [ip]
 80098bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80098c0:	fb09 220b 	mla	r2, r9, fp, r2
 80098c4:	4492      	add	sl, r2
 80098c6:	b289      	uxth	r1, r1
 80098c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80098cc:	f84e 1b04 	str.w	r1, [lr], #4
 80098d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098d4:	f8be 1000 	ldrh.w	r1, [lr]
 80098d8:	0c12      	lsrs	r2, r2, #16
 80098da:	fb09 1102 	mla	r1, r9, r2, r1
 80098de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80098e2:	4567      	cmp	r7, ip
 80098e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80098e8:	d8e6      	bhi.n	80098b8 <__multiply+0x10c>
 80098ea:	9a01      	ldr	r2, [sp, #4]
 80098ec:	50a9      	str	r1, [r5, r2]
 80098ee:	3504      	adds	r5, #4
 80098f0:	e79a      	b.n	8009828 <__multiply+0x7c>
 80098f2:	3e01      	subs	r6, #1
 80098f4:	e79c      	b.n	8009830 <__multiply+0x84>
 80098f6:	bf00      	nop
 80098f8:	0800b4e0 	.word	0x0800b4e0
 80098fc:	0800b4f1 	.word	0x0800b4f1

08009900 <__pow5mult>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	4615      	mov	r5, r2
 8009906:	f012 0203 	ands.w	r2, r2, #3
 800990a:	4606      	mov	r6, r0
 800990c:	460f      	mov	r7, r1
 800990e:	d007      	beq.n	8009920 <__pow5mult+0x20>
 8009910:	4c25      	ldr	r4, [pc, #148]	; (80099a8 <__pow5mult+0xa8>)
 8009912:	3a01      	subs	r2, #1
 8009914:	2300      	movs	r3, #0
 8009916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800991a:	f7ff fe9b 	bl	8009654 <__multadd>
 800991e:	4607      	mov	r7, r0
 8009920:	10ad      	asrs	r5, r5, #2
 8009922:	d03d      	beq.n	80099a0 <__pow5mult+0xa0>
 8009924:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009926:	b97c      	cbnz	r4, 8009948 <__pow5mult+0x48>
 8009928:	2010      	movs	r0, #16
 800992a:	f7fe f933 	bl	8007b94 <malloc>
 800992e:	4602      	mov	r2, r0
 8009930:	6270      	str	r0, [r6, #36]	; 0x24
 8009932:	b928      	cbnz	r0, 8009940 <__pow5mult+0x40>
 8009934:	4b1d      	ldr	r3, [pc, #116]	; (80099ac <__pow5mult+0xac>)
 8009936:	481e      	ldr	r0, [pc, #120]	; (80099b0 <__pow5mult+0xb0>)
 8009938:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800993c:	f7fe ff6e 	bl	800881c <__assert_func>
 8009940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009944:	6004      	str	r4, [r0, #0]
 8009946:	60c4      	str	r4, [r0, #12]
 8009948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800994c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009950:	b94c      	cbnz	r4, 8009966 <__pow5mult+0x66>
 8009952:	f240 2171 	movw	r1, #625	; 0x271
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ff12 	bl	8009780 <__i2b>
 800995c:	2300      	movs	r3, #0
 800995e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009962:	4604      	mov	r4, r0
 8009964:	6003      	str	r3, [r0, #0]
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	07eb      	lsls	r3, r5, #31
 800996c:	d50a      	bpl.n	8009984 <__pow5mult+0x84>
 800996e:	4639      	mov	r1, r7
 8009970:	4622      	mov	r2, r4
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ff1a 	bl	80097ac <__multiply>
 8009978:	4639      	mov	r1, r7
 800997a:	4680      	mov	r8, r0
 800997c:	4630      	mov	r0, r6
 800997e:	f7ff fe47 	bl	8009610 <_Bfree>
 8009982:	4647      	mov	r7, r8
 8009984:	106d      	asrs	r5, r5, #1
 8009986:	d00b      	beq.n	80099a0 <__pow5mult+0xa0>
 8009988:	6820      	ldr	r0, [r4, #0]
 800998a:	b938      	cbnz	r0, 800999c <__pow5mult+0x9c>
 800998c:	4622      	mov	r2, r4
 800998e:	4621      	mov	r1, r4
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff ff0b 	bl	80097ac <__multiply>
 8009996:	6020      	str	r0, [r4, #0]
 8009998:	f8c0 9000 	str.w	r9, [r0]
 800999c:	4604      	mov	r4, r0
 800999e:	e7e4      	b.n	800996a <__pow5mult+0x6a>
 80099a0:	4638      	mov	r0, r7
 80099a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a6:	bf00      	nop
 80099a8:	0800b640 	.word	0x0800b640
 80099ac:	0800b3c8 	.word	0x0800b3c8
 80099b0:	0800b4f1 	.word	0x0800b4f1

080099b4 <__lshift>:
 80099b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	460c      	mov	r4, r1
 80099ba:	6849      	ldr	r1, [r1, #4]
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099c2:	68a3      	ldr	r3, [r4, #8]
 80099c4:	4607      	mov	r7, r0
 80099c6:	4691      	mov	r9, r2
 80099c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099cc:	f108 0601 	add.w	r6, r8, #1
 80099d0:	42b3      	cmp	r3, r6
 80099d2:	db0b      	blt.n	80099ec <__lshift+0x38>
 80099d4:	4638      	mov	r0, r7
 80099d6:	f7ff fddb 	bl	8009590 <_Balloc>
 80099da:	4605      	mov	r5, r0
 80099dc:	b948      	cbnz	r0, 80099f2 <__lshift+0x3e>
 80099de:	4602      	mov	r2, r0
 80099e0:	4b2a      	ldr	r3, [pc, #168]	; (8009a8c <__lshift+0xd8>)
 80099e2:	482b      	ldr	r0, [pc, #172]	; (8009a90 <__lshift+0xdc>)
 80099e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099e8:	f7fe ff18 	bl	800881c <__assert_func>
 80099ec:	3101      	adds	r1, #1
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	e7ee      	b.n	80099d0 <__lshift+0x1c>
 80099f2:	2300      	movs	r3, #0
 80099f4:	f100 0114 	add.w	r1, r0, #20
 80099f8:	f100 0210 	add.w	r2, r0, #16
 80099fc:	4618      	mov	r0, r3
 80099fe:	4553      	cmp	r3, sl
 8009a00:	db37      	blt.n	8009a72 <__lshift+0xbe>
 8009a02:	6920      	ldr	r0, [r4, #16]
 8009a04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a08:	f104 0314 	add.w	r3, r4, #20
 8009a0c:	f019 091f 	ands.w	r9, r9, #31
 8009a10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a18:	d02f      	beq.n	8009a7a <__lshift+0xc6>
 8009a1a:	f1c9 0e20 	rsb	lr, r9, #32
 8009a1e:	468a      	mov	sl, r1
 8009a20:	f04f 0c00 	mov.w	ip, #0
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	fa02 f209 	lsl.w	r2, r2, r9
 8009a2a:	ea42 020c 	orr.w	r2, r2, ip
 8009a2e:	f84a 2b04 	str.w	r2, [sl], #4
 8009a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a36:	4298      	cmp	r0, r3
 8009a38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a3c:	d8f2      	bhi.n	8009a24 <__lshift+0x70>
 8009a3e:	1b03      	subs	r3, r0, r4
 8009a40:	3b15      	subs	r3, #21
 8009a42:	f023 0303 	bic.w	r3, r3, #3
 8009a46:	3304      	adds	r3, #4
 8009a48:	f104 0215 	add.w	r2, r4, #21
 8009a4c:	4290      	cmp	r0, r2
 8009a4e:	bf38      	it	cc
 8009a50:	2304      	movcc	r3, #4
 8009a52:	f841 c003 	str.w	ip, [r1, r3]
 8009a56:	f1bc 0f00 	cmp.w	ip, #0
 8009a5a:	d001      	beq.n	8009a60 <__lshift+0xac>
 8009a5c:	f108 0602 	add.w	r6, r8, #2
 8009a60:	3e01      	subs	r6, #1
 8009a62:	4638      	mov	r0, r7
 8009a64:	612e      	str	r6, [r5, #16]
 8009a66:	4621      	mov	r1, r4
 8009a68:	f7ff fdd2 	bl	8009610 <_Bfree>
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a72:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a76:	3301      	adds	r3, #1
 8009a78:	e7c1      	b.n	80099fe <__lshift+0x4a>
 8009a7a:	3904      	subs	r1, #4
 8009a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a80:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a84:	4298      	cmp	r0, r3
 8009a86:	d8f9      	bhi.n	8009a7c <__lshift+0xc8>
 8009a88:	e7ea      	b.n	8009a60 <__lshift+0xac>
 8009a8a:	bf00      	nop
 8009a8c:	0800b4e0 	.word	0x0800b4e0
 8009a90:	0800b4f1 	.word	0x0800b4f1

08009a94 <__mcmp>:
 8009a94:	b530      	push	{r4, r5, lr}
 8009a96:	6902      	ldr	r2, [r0, #16]
 8009a98:	690c      	ldr	r4, [r1, #16]
 8009a9a:	1b12      	subs	r2, r2, r4
 8009a9c:	d10e      	bne.n	8009abc <__mcmp+0x28>
 8009a9e:	f100 0314 	add.w	r3, r0, #20
 8009aa2:	3114      	adds	r1, #20
 8009aa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009aa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009aac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ab0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ab4:	42a5      	cmp	r5, r4
 8009ab6:	d003      	beq.n	8009ac0 <__mcmp+0x2c>
 8009ab8:	d305      	bcc.n	8009ac6 <__mcmp+0x32>
 8009aba:	2201      	movs	r2, #1
 8009abc:	4610      	mov	r0, r2
 8009abe:	bd30      	pop	{r4, r5, pc}
 8009ac0:	4283      	cmp	r3, r0
 8009ac2:	d3f3      	bcc.n	8009aac <__mcmp+0x18>
 8009ac4:	e7fa      	b.n	8009abc <__mcmp+0x28>
 8009ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aca:	e7f7      	b.n	8009abc <__mcmp+0x28>

08009acc <__mdiff>:
 8009acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4690      	mov	r8, r2
 8009ada:	f7ff ffdb 	bl	8009a94 <__mcmp>
 8009ade:	1e05      	subs	r5, r0, #0
 8009ae0:	d110      	bne.n	8009b04 <__mdiff+0x38>
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7ff fd53 	bl	8009590 <_Balloc>
 8009aea:	b930      	cbnz	r0, 8009afa <__mdiff+0x2e>
 8009aec:	4b3a      	ldr	r3, [pc, #232]	; (8009bd8 <__mdiff+0x10c>)
 8009aee:	4602      	mov	r2, r0
 8009af0:	f240 2132 	movw	r1, #562	; 0x232
 8009af4:	4839      	ldr	r0, [pc, #228]	; (8009bdc <__mdiff+0x110>)
 8009af6:	f7fe fe91 	bl	800881c <__assert_func>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	bfa4      	itt	ge
 8009b06:	4643      	movge	r3, r8
 8009b08:	46a0      	movge	r8, r4
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b10:	bfa6      	itte	ge
 8009b12:	461c      	movge	r4, r3
 8009b14:	2500      	movge	r5, #0
 8009b16:	2501      	movlt	r5, #1
 8009b18:	f7ff fd3a 	bl	8009590 <_Balloc>
 8009b1c:	b920      	cbnz	r0, 8009b28 <__mdiff+0x5c>
 8009b1e:	4b2e      	ldr	r3, [pc, #184]	; (8009bd8 <__mdiff+0x10c>)
 8009b20:	4602      	mov	r2, r0
 8009b22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b26:	e7e5      	b.n	8009af4 <__mdiff+0x28>
 8009b28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b2c:	6926      	ldr	r6, [r4, #16]
 8009b2e:	60c5      	str	r5, [r0, #12]
 8009b30:	f104 0914 	add.w	r9, r4, #20
 8009b34:	f108 0514 	add.w	r5, r8, #20
 8009b38:	f100 0e14 	add.w	lr, r0, #20
 8009b3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b44:	f108 0210 	add.w	r2, r8, #16
 8009b48:	46f2      	mov	sl, lr
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b54:	fa1f f883 	uxth.w	r8, r3
 8009b58:	fa11 f18b 	uxtah	r1, r1, fp
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	eba1 0808 	sub.w	r8, r1, r8
 8009b62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009b6a:	fa1f f888 	uxth.w	r8, r8
 8009b6e:	1419      	asrs	r1, r3, #16
 8009b70:	454e      	cmp	r6, r9
 8009b72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009b76:	f84a 3b04 	str.w	r3, [sl], #4
 8009b7a:	d8e7      	bhi.n	8009b4c <__mdiff+0x80>
 8009b7c:	1b33      	subs	r3, r6, r4
 8009b7e:	3b15      	subs	r3, #21
 8009b80:	f023 0303 	bic.w	r3, r3, #3
 8009b84:	3304      	adds	r3, #4
 8009b86:	3415      	adds	r4, #21
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	bf38      	it	cc
 8009b8c:	2304      	movcc	r3, #4
 8009b8e:	441d      	add	r5, r3
 8009b90:	4473      	add	r3, lr
 8009b92:	469e      	mov	lr, r3
 8009b94:	462e      	mov	r6, r5
 8009b96:	4566      	cmp	r6, ip
 8009b98:	d30e      	bcc.n	8009bb8 <__mdiff+0xec>
 8009b9a:	f10c 0203 	add.w	r2, ip, #3
 8009b9e:	1b52      	subs	r2, r2, r5
 8009ba0:	f022 0203 	bic.w	r2, r2, #3
 8009ba4:	3d03      	subs	r5, #3
 8009ba6:	45ac      	cmp	ip, r5
 8009ba8:	bf38      	it	cc
 8009baa:	2200      	movcc	r2, #0
 8009bac:	441a      	add	r2, r3
 8009bae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009bb2:	b17b      	cbz	r3, 8009bd4 <__mdiff+0x108>
 8009bb4:	6107      	str	r7, [r0, #16]
 8009bb6:	e7a3      	b.n	8009b00 <__mdiff+0x34>
 8009bb8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009bbc:	fa11 f288 	uxtah	r2, r1, r8
 8009bc0:	1414      	asrs	r4, r2, #16
 8009bc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009bc6:	b292      	uxth	r2, r2
 8009bc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009bcc:	f84e 2b04 	str.w	r2, [lr], #4
 8009bd0:	1421      	asrs	r1, r4, #16
 8009bd2:	e7e0      	b.n	8009b96 <__mdiff+0xca>
 8009bd4:	3f01      	subs	r7, #1
 8009bd6:	e7ea      	b.n	8009bae <__mdiff+0xe2>
 8009bd8:	0800b4e0 	.word	0x0800b4e0
 8009bdc:	0800b4f1 	.word	0x0800b4f1

08009be0 <__d2b>:
 8009be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009be4:	4689      	mov	r9, r1
 8009be6:	2101      	movs	r1, #1
 8009be8:	ec57 6b10 	vmov	r6, r7, d0
 8009bec:	4690      	mov	r8, r2
 8009bee:	f7ff fccf 	bl	8009590 <_Balloc>
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	b930      	cbnz	r0, 8009c04 <__d2b+0x24>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	4b25      	ldr	r3, [pc, #148]	; (8009c90 <__d2b+0xb0>)
 8009bfa:	4826      	ldr	r0, [pc, #152]	; (8009c94 <__d2b+0xb4>)
 8009bfc:	f240 310a 	movw	r1, #778	; 0x30a
 8009c00:	f7fe fe0c 	bl	800881c <__assert_func>
 8009c04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c0c:	bb35      	cbnz	r5, 8009c5c <__d2b+0x7c>
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	d028      	beq.n	8009c66 <__d2b+0x86>
 8009c14:	4668      	mov	r0, sp
 8009c16:	9600      	str	r6, [sp, #0]
 8009c18:	f7ff fd82 	bl	8009720 <__lo0bits>
 8009c1c:	9900      	ldr	r1, [sp, #0]
 8009c1e:	b300      	cbz	r0, 8009c62 <__d2b+0x82>
 8009c20:	9a01      	ldr	r2, [sp, #4]
 8009c22:	f1c0 0320 	rsb	r3, r0, #32
 8009c26:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2a:	430b      	orrs	r3, r1
 8009c2c:	40c2      	lsrs	r2, r0
 8009c2e:	6163      	str	r3, [r4, #20]
 8009c30:	9201      	str	r2, [sp, #4]
 8009c32:	9b01      	ldr	r3, [sp, #4]
 8009c34:	61a3      	str	r3, [r4, #24]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bf14      	ite	ne
 8009c3a:	2202      	movne	r2, #2
 8009c3c:	2201      	moveq	r2, #1
 8009c3e:	6122      	str	r2, [r4, #16]
 8009c40:	b1d5      	cbz	r5, 8009c78 <__d2b+0x98>
 8009c42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c46:	4405      	add	r5, r0
 8009c48:	f8c9 5000 	str.w	r5, [r9]
 8009c4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c50:	f8c8 0000 	str.w	r0, [r8]
 8009c54:	4620      	mov	r0, r4
 8009c56:	b003      	add	sp, #12
 8009c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c60:	e7d5      	b.n	8009c0e <__d2b+0x2e>
 8009c62:	6161      	str	r1, [r4, #20]
 8009c64:	e7e5      	b.n	8009c32 <__d2b+0x52>
 8009c66:	a801      	add	r0, sp, #4
 8009c68:	f7ff fd5a 	bl	8009720 <__lo0bits>
 8009c6c:	9b01      	ldr	r3, [sp, #4]
 8009c6e:	6163      	str	r3, [r4, #20]
 8009c70:	2201      	movs	r2, #1
 8009c72:	6122      	str	r2, [r4, #16]
 8009c74:	3020      	adds	r0, #32
 8009c76:	e7e3      	b.n	8009c40 <__d2b+0x60>
 8009c78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c80:	f8c9 0000 	str.w	r0, [r9]
 8009c84:	6918      	ldr	r0, [r3, #16]
 8009c86:	f7ff fd2b 	bl	80096e0 <__hi0bits>
 8009c8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c8e:	e7df      	b.n	8009c50 <__d2b+0x70>
 8009c90:	0800b4e0 	.word	0x0800b4e0
 8009c94:	0800b4f1 	.word	0x0800b4f1

08009c98 <_calloc_r>:
 8009c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c9a:	fba1 2402 	umull	r2, r4, r1, r2
 8009c9e:	b94c      	cbnz	r4, 8009cb4 <_calloc_r+0x1c>
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	9201      	str	r2, [sp, #4]
 8009ca4:	f7fe f808 	bl	8007cb8 <_malloc_r>
 8009ca8:	9a01      	ldr	r2, [sp, #4]
 8009caa:	4605      	mov	r5, r0
 8009cac:	b930      	cbnz	r0, 8009cbc <_calloc_r+0x24>
 8009cae:	4628      	mov	r0, r5
 8009cb0:	b003      	add	sp, #12
 8009cb2:	bd30      	pop	{r4, r5, pc}
 8009cb4:	220c      	movs	r2, #12
 8009cb6:	6002      	str	r2, [r0, #0]
 8009cb8:	2500      	movs	r5, #0
 8009cba:	e7f8      	b.n	8009cae <_calloc_r+0x16>
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	f7fd ff87 	bl	8007bd0 <memset>
 8009cc2:	e7f4      	b.n	8009cae <_calloc_r+0x16>

08009cc4 <__ssputs_r>:
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	688e      	ldr	r6, [r1, #8]
 8009cca:	429e      	cmp	r6, r3
 8009ccc:	4682      	mov	sl, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	4690      	mov	r8, r2
 8009cd2:	461f      	mov	r7, r3
 8009cd4:	d838      	bhi.n	8009d48 <__ssputs_r+0x84>
 8009cd6:	898a      	ldrh	r2, [r1, #12]
 8009cd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cdc:	d032      	beq.n	8009d44 <__ssputs_r+0x80>
 8009cde:	6825      	ldr	r5, [r4, #0]
 8009ce0:	6909      	ldr	r1, [r1, #16]
 8009ce2:	eba5 0901 	sub.w	r9, r5, r1
 8009ce6:	6965      	ldr	r5, [r4, #20]
 8009ce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	444b      	add	r3, r9
 8009cf4:	106d      	asrs	r5, r5, #1
 8009cf6:	429d      	cmp	r5, r3
 8009cf8:	bf38      	it	cc
 8009cfa:	461d      	movcc	r5, r3
 8009cfc:	0553      	lsls	r3, r2, #21
 8009cfe:	d531      	bpl.n	8009d64 <__ssputs_r+0xa0>
 8009d00:	4629      	mov	r1, r5
 8009d02:	f7fd ffd9 	bl	8007cb8 <_malloc_r>
 8009d06:	4606      	mov	r6, r0
 8009d08:	b950      	cbnz	r0, 8009d20 <__ssputs_r+0x5c>
 8009d0a:	230c      	movs	r3, #12
 8009d0c:	f8ca 3000 	str.w	r3, [sl]
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d20:	6921      	ldr	r1, [r4, #16]
 8009d22:	464a      	mov	r2, r9
 8009d24:	f7fd ff46 	bl	8007bb4 <memcpy>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	6126      	str	r6, [r4, #16]
 8009d36:	6165      	str	r5, [r4, #20]
 8009d38:	444e      	add	r6, r9
 8009d3a:	eba5 0509 	sub.w	r5, r5, r9
 8009d3e:	6026      	str	r6, [r4, #0]
 8009d40:	60a5      	str	r5, [r4, #8]
 8009d42:	463e      	mov	r6, r7
 8009d44:	42be      	cmp	r6, r7
 8009d46:	d900      	bls.n	8009d4a <__ssputs_r+0x86>
 8009d48:	463e      	mov	r6, r7
 8009d4a:	6820      	ldr	r0, [r4, #0]
 8009d4c:	4632      	mov	r2, r6
 8009d4e:	4641      	mov	r1, r8
 8009d50:	f000 fd68 	bl	800a824 <memmove>
 8009d54:	68a3      	ldr	r3, [r4, #8]
 8009d56:	1b9b      	subs	r3, r3, r6
 8009d58:	60a3      	str	r3, [r4, #8]
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	4433      	add	r3, r6
 8009d5e:	6023      	str	r3, [r4, #0]
 8009d60:	2000      	movs	r0, #0
 8009d62:	e7db      	b.n	8009d1c <__ssputs_r+0x58>
 8009d64:	462a      	mov	r2, r5
 8009d66:	f000 fd77 	bl	800a858 <_realloc_r>
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d1e1      	bne.n	8009d34 <__ssputs_r+0x70>
 8009d70:	6921      	ldr	r1, [r4, #16]
 8009d72:	4650      	mov	r0, sl
 8009d74:	f7fd ff34 	bl	8007be0 <_free_r>
 8009d78:	e7c7      	b.n	8009d0a <__ssputs_r+0x46>
	...

08009d7c <_svfiprintf_r>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	4698      	mov	r8, r3
 8009d82:	898b      	ldrh	r3, [r1, #12]
 8009d84:	061b      	lsls	r3, r3, #24
 8009d86:	b09d      	sub	sp, #116	; 0x74
 8009d88:	4607      	mov	r7, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	4614      	mov	r4, r2
 8009d8e:	d50e      	bpl.n	8009dae <_svfiprintf_r+0x32>
 8009d90:	690b      	ldr	r3, [r1, #16]
 8009d92:	b963      	cbnz	r3, 8009dae <_svfiprintf_r+0x32>
 8009d94:	2140      	movs	r1, #64	; 0x40
 8009d96:	f7fd ff8f 	bl	8007cb8 <_malloc_r>
 8009d9a:	6028      	str	r0, [r5, #0]
 8009d9c:	6128      	str	r0, [r5, #16]
 8009d9e:	b920      	cbnz	r0, 8009daa <_svfiprintf_r+0x2e>
 8009da0:	230c      	movs	r3, #12
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e0d1      	b.n	8009f4e <_svfiprintf_r+0x1d2>
 8009daa:	2340      	movs	r3, #64	; 0x40
 8009dac:	616b      	str	r3, [r5, #20]
 8009dae:	2300      	movs	r3, #0
 8009db0:	9309      	str	r3, [sp, #36]	; 0x24
 8009db2:	2320      	movs	r3, #32
 8009db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dbc:	2330      	movs	r3, #48	; 0x30
 8009dbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f68 <_svfiprintf_r+0x1ec>
 8009dc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc6:	f04f 0901 	mov.w	r9, #1
 8009dca:	4623      	mov	r3, r4
 8009dcc:	469a      	mov	sl, r3
 8009dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd2:	b10a      	cbz	r2, 8009dd8 <_svfiprintf_r+0x5c>
 8009dd4:	2a25      	cmp	r2, #37	; 0x25
 8009dd6:	d1f9      	bne.n	8009dcc <_svfiprintf_r+0x50>
 8009dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8009ddc:	d00b      	beq.n	8009df6 <_svfiprintf_r+0x7a>
 8009dde:	465b      	mov	r3, fp
 8009de0:	4622      	mov	r2, r4
 8009de2:	4629      	mov	r1, r5
 8009de4:	4638      	mov	r0, r7
 8009de6:	f7ff ff6d 	bl	8009cc4 <__ssputs_r>
 8009dea:	3001      	adds	r0, #1
 8009dec:	f000 80aa 	beq.w	8009f44 <_svfiprintf_r+0x1c8>
 8009df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df2:	445a      	add	r2, fp
 8009df4:	9209      	str	r2, [sp, #36]	; 0x24
 8009df6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 80a2 	beq.w	8009f44 <_svfiprintf_r+0x1c8>
 8009e00:	2300      	movs	r3, #0
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295
 8009e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e0a:	f10a 0a01 	add.w	sl, sl, #1
 8009e0e:	9304      	str	r3, [sp, #16]
 8009e10:	9307      	str	r3, [sp, #28]
 8009e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e16:	931a      	str	r3, [sp, #104]	; 0x68
 8009e18:	4654      	mov	r4, sl
 8009e1a:	2205      	movs	r2, #5
 8009e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e20:	4851      	ldr	r0, [pc, #324]	; (8009f68 <_svfiprintf_r+0x1ec>)
 8009e22:	f7f6 f9ed 	bl	8000200 <memchr>
 8009e26:	9a04      	ldr	r2, [sp, #16]
 8009e28:	b9d8      	cbnz	r0, 8009e62 <_svfiprintf_r+0xe6>
 8009e2a:	06d0      	lsls	r0, r2, #27
 8009e2c:	bf44      	itt	mi
 8009e2e:	2320      	movmi	r3, #32
 8009e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e34:	0711      	lsls	r1, r2, #28
 8009e36:	bf44      	itt	mi
 8009e38:	232b      	movmi	r3, #43	; 0x2b
 8009e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e42:	2b2a      	cmp	r3, #42	; 0x2a
 8009e44:	d015      	beq.n	8009e72 <_svfiprintf_r+0xf6>
 8009e46:	9a07      	ldr	r2, [sp, #28]
 8009e48:	4654      	mov	r4, sl
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f04f 0c0a 	mov.w	ip, #10
 8009e50:	4621      	mov	r1, r4
 8009e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e56:	3b30      	subs	r3, #48	; 0x30
 8009e58:	2b09      	cmp	r3, #9
 8009e5a:	d94e      	bls.n	8009efa <_svfiprintf_r+0x17e>
 8009e5c:	b1b0      	cbz	r0, 8009e8c <_svfiprintf_r+0x110>
 8009e5e:	9207      	str	r2, [sp, #28]
 8009e60:	e014      	b.n	8009e8c <_svfiprintf_r+0x110>
 8009e62:	eba0 0308 	sub.w	r3, r0, r8
 8009e66:	fa09 f303 	lsl.w	r3, r9, r3
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	46a2      	mov	sl, r4
 8009e70:	e7d2      	b.n	8009e18 <_svfiprintf_r+0x9c>
 8009e72:	9b03      	ldr	r3, [sp, #12]
 8009e74:	1d19      	adds	r1, r3, #4
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	9103      	str	r1, [sp, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	bfbb      	ittet	lt
 8009e7e:	425b      	neglt	r3, r3
 8009e80:	f042 0202 	orrlt.w	r2, r2, #2
 8009e84:	9307      	strge	r3, [sp, #28]
 8009e86:	9307      	strlt	r3, [sp, #28]
 8009e88:	bfb8      	it	lt
 8009e8a:	9204      	strlt	r2, [sp, #16]
 8009e8c:	7823      	ldrb	r3, [r4, #0]
 8009e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e90:	d10c      	bne.n	8009eac <_svfiprintf_r+0x130>
 8009e92:	7863      	ldrb	r3, [r4, #1]
 8009e94:	2b2a      	cmp	r3, #42	; 0x2a
 8009e96:	d135      	bne.n	8009f04 <_svfiprintf_r+0x188>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9203      	str	r2, [sp, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfb8      	it	lt
 8009ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea8:	3402      	adds	r4, #2
 8009eaa:	9305      	str	r3, [sp, #20]
 8009eac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f78 <_svfiprintf_r+0x1fc>
 8009eb0:	7821      	ldrb	r1, [r4, #0]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	4650      	mov	r0, sl
 8009eb6:	f7f6 f9a3 	bl	8000200 <memchr>
 8009eba:	b140      	cbz	r0, 8009ece <_svfiprintf_r+0x152>
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	eba0 000a 	sub.w	r0, r0, sl
 8009ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec6:	9b04      	ldr	r3, [sp, #16]
 8009ec8:	4303      	orrs	r3, r0
 8009eca:	3401      	adds	r4, #1
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed2:	4826      	ldr	r0, [pc, #152]	; (8009f6c <_svfiprintf_r+0x1f0>)
 8009ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed8:	2206      	movs	r2, #6
 8009eda:	f7f6 f991 	bl	8000200 <memchr>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d038      	beq.n	8009f54 <_svfiprintf_r+0x1d8>
 8009ee2:	4b23      	ldr	r3, [pc, #140]	; (8009f70 <_svfiprintf_r+0x1f4>)
 8009ee4:	bb1b      	cbnz	r3, 8009f2e <_svfiprintf_r+0x1b2>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	3307      	adds	r3, #7
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	3308      	adds	r3, #8
 8009ef0:	9303      	str	r3, [sp, #12]
 8009ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef4:	4433      	add	r3, r6
 8009ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef8:	e767      	b.n	8009dca <_svfiprintf_r+0x4e>
 8009efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009efe:	460c      	mov	r4, r1
 8009f00:	2001      	movs	r0, #1
 8009f02:	e7a5      	b.n	8009e50 <_svfiprintf_r+0xd4>
 8009f04:	2300      	movs	r3, #0
 8009f06:	3401      	adds	r4, #1
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	f04f 0c0a 	mov.w	ip, #10
 8009f10:	4620      	mov	r0, r4
 8009f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f16:	3a30      	subs	r2, #48	; 0x30
 8009f18:	2a09      	cmp	r2, #9
 8009f1a:	d903      	bls.n	8009f24 <_svfiprintf_r+0x1a8>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0c5      	beq.n	8009eac <_svfiprintf_r+0x130>
 8009f20:	9105      	str	r1, [sp, #20]
 8009f22:	e7c3      	b.n	8009eac <_svfiprintf_r+0x130>
 8009f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f28:	4604      	mov	r4, r0
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e7f0      	b.n	8009f10 <_svfiprintf_r+0x194>
 8009f2e:	ab03      	add	r3, sp, #12
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	462a      	mov	r2, r5
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <_svfiprintf_r+0x1f8>)
 8009f36:	a904      	add	r1, sp, #16
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7fd ffd1 	bl	8007ee0 <_printf_float>
 8009f3e:	1c42      	adds	r2, r0, #1
 8009f40:	4606      	mov	r6, r0
 8009f42:	d1d6      	bne.n	8009ef2 <_svfiprintf_r+0x176>
 8009f44:	89ab      	ldrh	r3, [r5, #12]
 8009f46:	065b      	lsls	r3, r3, #25
 8009f48:	f53f af2c 	bmi.w	8009da4 <_svfiprintf_r+0x28>
 8009f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4e:	b01d      	add	sp, #116	; 0x74
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	ab03      	add	r3, sp, #12
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	462a      	mov	r2, r5
 8009f5a:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <_svfiprintf_r+0x1f8>)
 8009f5c:	a904      	add	r1, sp, #16
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f7fe fa62 	bl	8008428 <_printf_i>
 8009f64:	e7eb      	b.n	8009f3e <_svfiprintf_r+0x1c2>
 8009f66:	bf00      	nop
 8009f68:	0800b64c 	.word	0x0800b64c
 8009f6c:	0800b656 	.word	0x0800b656
 8009f70:	08007ee1 	.word	0x08007ee1
 8009f74:	08009cc5 	.word	0x08009cc5
 8009f78:	0800b652 	.word	0x0800b652

08009f7c <__sfputc_r>:
 8009f7c:	6893      	ldr	r3, [r2, #8]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	b410      	push	{r4}
 8009f84:	6093      	str	r3, [r2, #8]
 8009f86:	da08      	bge.n	8009f9a <__sfputc_r+0x1e>
 8009f88:	6994      	ldr	r4, [r2, #24]
 8009f8a:	42a3      	cmp	r3, r4
 8009f8c:	db01      	blt.n	8009f92 <__sfputc_r+0x16>
 8009f8e:	290a      	cmp	r1, #10
 8009f90:	d103      	bne.n	8009f9a <__sfputc_r+0x1e>
 8009f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f96:	f000 b94b 	b.w	800a230 <__swbuf_r>
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	1c58      	adds	r0, r3, #1
 8009f9e:	6010      	str	r0, [r2, #0]
 8009fa0:	7019      	strb	r1, [r3, #0]
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <__sfputs_r>:
 8009faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fac:	4606      	mov	r6, r0
 8009fae:	460f      	mov	r7, r1
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	18d5      	adds	r5, r2, r3
 8009fb4:	42ac      	cmp	r4, r5
 8009fb6:	d101      	bne.n	8009fbc <__sfputs_r+0x12>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	e007      	b.n	8009fcc <__sfputs_r+0x22>
 8009fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc0:	463a      	mov	r2, r7
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7ff ffda 	bl	8009f7c <__sfputc_r>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d1f3      	bne.n	8009fb4 <__sfputs_r+0xa>
 8009fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fd0 <_vfiprintf_r>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	460d      	mov	r5, r1
 8009fd6:	b09d      	sub	sp, #116	; 0x74
 8009fd8:	4614      	mov	r4, r2
 8009fda:	4698      	mov	r8, r3
 8009fdc:	4606      	mov	r6, r0
 8009fde:	b118      	cbz	r0, 8009fe8 <_vfiprintf_r+0x18>
 8009fe0:	6983      	ldr	r3, [r0, #24]
 8009fe2:	b90b      	cbnz	r3, 8009fe8 <_vfiprintf_r+0x18>
 8009fe4:	f000 fb06 	bl	800a5f4 <__sinit>
 8009fe8:	4b89      	ldr	r3, [pc, #548]	; (800a210 <_vfiprintf_r+0x240>)
 8009fea:	429d      	cmp	r5, r3
 8009fec:	d11b      	bne.n	800a026 <_vfiprintf_r+0x56>
 8009fee:	6875      	ldr	r5, [r6, #4]
 8009ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff2:	07d9      	lsls	r1, r3, #31
 8009ff4:	d405      	bmi.n	800a002 <_vfiprintf_r+0x32>
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	059a      	lsls	r2, r3, #22
 8009ffa:	d402      	bmi.n	800a002 <_vfiprintf_r+0x32>
 8009ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ffe:	f000 fb97 	bl	800a730 <__retarget_lock_acquire_recursive>
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	071b      	lsls	r3, r3, #28
 800a006:	d501      	bpl.n	800a00c <_vfiprintf_r+0x3c>
 800a008:	692b      	ldr	r3, [r5, #16]
 800a00a:	b9eb      	cbnz	r3, 800a048 <_vfiprintf_r+0x78>
 800a00c:	4629      	mov	r1, r5
 800a00e:	4630      	mov	r0, r6
 800a010:	f000 f960 	bl	800a2d4 <__swsetup_r>
 800a014:	b1c0      	cbz	r0, 800a048 <_vfiprintf_r+0x78>
 800a016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a018:	07dc      	lsls	r4, r3, #31
 800a01a:	d50e      	bpl.n	800a03a <_vfiprintf_r+0x6a>
 800a01c:	f04f 30ff 	mov.w	r0, #4294967295
 800a020:	b01d      	add	sp, #116	; 0x74
 800a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a026:	4b7b      	ldr	r3, [pc, #492]	; (800a214 <_vfiprintf_r+0x244>)
 800a028:	429d      	cmp	r5, r3
 800a02a:	d101      	bne.n	800a030 <_vfiprintf_r+0x60>
 800a02c:	68b5      	ldr	r5, [r6, #8]
 800a02e:	e7df      	b.n	8009ff0 <_vfiprintf_r+0x20>
 800a030:	4b79      	ldr	r3, [pc, #484]	; (800a218 <_vfiprintf_r+0x248>)
 800a032:	429d      	cmp	r5, r3
 800a034:	bf08      	it	eq
 800a036:	68f5      	ldreq	r5, [r6, #12]
 800a038:	e7da      	b.n	8009ff0 <_vfiprintf_r+0x20>
 800a03a:	89ab      	ldrh	r3, [r5, #12]
 800a03c:	0598      	lsls	r0, r3, #22
 800a03e:	d4ed      	bmi.n	800a01c <_vfiprintf_r+0x4c>
 800a040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a042:	f000 fb76 	bl	800a732 <__retarget_lock_release_recursive>
 800a046:	e7e9      	b.n	800a01c <_vfiprintf_r+0x4c>
 800a048:	2300      	movs	r3, #0
 800a04a:	9309      	str	r3, [sp, #36]	; 0x24
 800a04c:	2320      	movs	r3, #32
 800a04e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a052:	f8cd 800c 	str.w	r8, [sp, #12]
 800a056:	2330      	movs	r3, #48	; 0x30
 800a058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a21c <_vfiprintf_r+0x24c>
 800a05c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a060:	f04f 0901 	mov.w	r9, #1
 800a064:	4623      	mov	r3, r4
 800a066:	469a      	mov	sl, r3
 800a068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a06c:	b10a      	cbz	r2, 800a072 <_vfiprintf_r+0xa2>
 800a06e:	2a25      	cmp	r2, #37	; 0x25
 800a070:	d1f9      	bne.n	800a066 <_vfiprintf_r+0x96>
 800a072:	ebba 0b04 	subs.w	fp, sl, r4
 800a076:	d00b      	beq.n	800a090 <_vfiprintf_r+0xc0>
 800a078:	465b      	mov	r3, fp
 800a07a:	4622      	mov	r2, r4
 800a07c:	4629      	mov	r1, r5
 800a07e:	4630      	mov	r0, r6
 800a080:	f7ff ff93 	bl	8009faa <__sfputs_r>
 800a084:	3001      	adds	r0, #1
 800a086:	f000 80aa 	beq.w	800a1de <_vfiprintf_r+0x20e>
 800a08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a08c:	445a      	add	r2, fp
 800a08e:	9209      	str	r2, [sp, #36]	; 0x24
 800a090:	f89a 3000 	ldrb.w	r3, [sl]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 80a2 	beq.w	800a1de <_vfiprintf_r+0x20e>
 800a09a:	2300      	movs	r3, #0
 800a09c:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a4:	f10a 0a01 	add.w	sl, sl, #1
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	9307      	str	r3, [sp, #28]
 800a0ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0b0:	931a      	str	r3, [sp, #104]	; 0x68
 800a0b2:	4654      	mov	r4, sl
 800a0b4:	2205      	movs	r2, #5
 800a0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ba:	4858      	ldr	r0, [pc, #352]	; (800a21c <_vfiprintf_r+0x24c>)
 800a0bc:	f7f6 f8a0 	bl	8000200 <memchr>
 800a0c0:	9a04      	ldr	r2, [sp, #16]
 800a0c2:	b9d8      	cbnz	r0, 800a0fc <_vfiprintf_r+0x12c>
 800a0c4:	06d1      	lsls	r1, r2, #27
 800a0c6:	bf44      	itt	mi
 800a0c8:	2320      	movmi	r3, #32
 800a0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ce:	0713      	lsls	r3, r2, #28
 800a0d0:	bf44      	itt	mi
 800a0d2:	232b      	movmi	r3, #43	; 0x2b
 800a0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0de:	d015      	beq.n	800a10c <_vfiprintf_r+0x13c>
 800a0e0:	9a07      	ldr	r2, [sp, #28]
 800a0e2:	4654      	mov	r4, sl
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	f04f 0c0a 	mov.w	ip, #10
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f0:	3b30      	subs	r3, #48	; 0x30
 800a0f2:	2b09      	cmp	r3, #9
 800a0f4:	d94e      	bls.n	800a194 <_vfiprintf_r+0x1c4>
 800a0f6:	b1b0      	cbz	r0, 800a126 <_vfiprintf_r+0x156>
 800a0f8:	9207      	str	r2, [sp, #28]
 800a0fa:	e014      	b.n	800a126 <_vfiprintf_r+0x156>
 800a0fc:	eba0 0308 	sub.w	r3, r0, r8
 800a100:	fa09 f303 	lsl.w	r3, r9, r3
 800a104:	4313      	orrs	r3, r2
 800a106:	9304      	str	r3, [sp, #16]
 800a108:	46a2      	mov	sl, r4
 800a10a:	e7d2      	b.n	800a0b2 <_vfiprintf_r+0xe2>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	1d19      	adds	r1, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	9103      	str	r1, [sp, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	bfbb      	ittet	lt
 800a118:	425b      	neglt	r3, r3
 800a11a:	f042 0202 	orrlt.w	r2, r2, #2
 800a11e:	9307      	strge	r3, [sp, #28]
 800a120:	9307      	strlt	r3, [sp, #28]
 800a122:	bfb8      	it	lt
 800a124:	9204      	strlt	r2, [sp, #16]
 800a126:	7823      	ldrb	r3, [r4, #0]
 800a128:	2b2e      	cmp	r3, #46	; 0x2e
 800a12a:	d10c      	bne.n	800a146 <_vfiprintf_r+0x176>
 800a12c:	7863      	ldrb	r3, [r4, #1]
 800a12e:	2b2a      	cmp	r3, #42	; 0x2a
 800a130:	d135      	bne.n	800a19e <_vfiprintf_r+0x1ce>
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	1d1a      	adds	r2, r3, #4
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	9203      	str	r2, [sp, #12]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	bfb8      	it	lt
 800a13e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a142:	3402      	adds	r4, #2
 800a144:	9305      	str	r3, [sp, #20]
 800a146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a22c <_vfiprintf_r+0x25c>
 800a14a:	7821      	ldrb	r1, [r4, #0]
 800a14c:	2203      	movs	r2, #3
 800a14e:	4650      	mov	r0, sl
 800a150:	f7f6 f856 	bl	8000200 <memchr>
 800a154:	b140      	cbz	r0, 800a168 <_vfiprintf_r+0x198>
 800a156:	2340      	movs	r3, #64	; 0x40
 800a158:	eba0 000a 	sub.w	r0, r0, sl
 800a15c:	fa03 f000 	lsl.w	r0, r3, r0
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	4303      	orrs	r3, r0
 800a164:	3401      	adds	r4, #1
 800a166:	9304      	str	r3, [sp, #16]
 800a168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a16c:	482c      	ldr	r0, [pc, #176]	; (800a220 <_vfiprintf_r+0x250>)
 800a16e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a172:	2206      	movs	r2, #6
 800a174:	f7f6 f844 	bl	8000200 <memchr>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d03f      	beq.n	800a1fc <_vfiprintf_r+0x22c>
 800a17c:	4b29      	ldr	r3, [pc, #164]	; (800a224 <_vfiprintf_r+0x254>)
 800a17e:	bb1b      	cbnz	r3, 800a1c8 <_vfiprintf_r+0x1f8>
 800a180:	9b03      	ldr	r3, [sp, #12]
 800a182:	3307      	adds	r3, #7
 800a184:	f023 0307 	bic.w	r3, r3, #7
 800a188:	3308      	adds	r3, #8
 800a18a:	9303      	str	r3, [sp, #12]
 800a18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18e:	443b      	add	r3, r7
 800a190:	9309      	str	r3, [sp, #36]	; 0x24
 800a192:	e767      	b.n	800a064 <_vfiprintf_r+0x94>
 800a194:	fb0c 3202 	mla	r2, ip, r2, r3
 800a198:	460c      	mov	r4, r1
 800a19a:	2001      	movs	r0, #1
 800a19c:	e7a5      	b.n	800a0ea <_vfiprintf_r+0x11a>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	3401      	adds	r4, #1
 800a1a2:	9305      	str	r3, [sp, #20]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f04f 0c0a 	mov.w	ip, #10
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b0:	3a30      	subs	r2, #48	; 0x30
 800a1b2:	2a09      	cmp	r2, #9
 800a1b4:	d903      	bls.n	800a1be <_vfiprintf_r+0x1ee>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0c5      	beq.n	800a146 <_vfiprintf_r+0x176>
 800a1ba:	9105      	str	r1, [sp, #20]
 800a1bc:	e7c3      	b.n	800a146 <_vfiprintf_r+0x176>
 800a1be:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e7f0      	b.n	800a1aa <_vfiprintf_r+0x1da>
 800a1c8:	ab03      	add	r3, sp, #12
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4b16      	ldr	r3, [pc, #88]	; (800a228 <_vfiprintf_r+0x258>)
 800a1d0:	a904      	add	r1, sp, #16
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7fd fe84 	bl	8007ee0 <_printf_float>
 800a1d8:	4607      	mov	r7, r0
 800a1da:	1c78      	adds	r0, r7, #1
 800a1dc:	d1d6      	bne.n	800a18c <_vfiprintf_r+0x1bc>
 800a1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e0:	07d9      	lsls	r1, r3, #31
 800a1e2:	d405      	bmi.n	800a1f0 <_vfiprintf_r+0x220>
 800a1e4:	89ab      	ldrh	r3, [r5, #12]
 800a1e6:	059a      	lsls	r2, r3, #22
 800a1e8:	d402      	bmi.n	800a1f0 <_vfiprintf_r+0x220>
 800a1ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ec:	f000 faa1 	bl	800a732 <__retarget_lock_release_recursive>
 800a1f0:	89ab      	ldrh	r3, [r5, #12]
 800a1f2:	065b      	lsls	r3, r3, #25
 800a1f4:	f53f af12 	bmi.w	800a01c <_vfiprintf_r+0x4c>
 800a1f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1fa:	e711      	b.n	800a020 <_vfiprintf_r+0x50>
 800a1fc:	ab03      	add	r3, sp, #12
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	462a      	mov	r2, r5
 800a202:	4b09      	ldr	r3, [pc, #36]	; (800a228 <_vfiprintf_r+0x258>)
 800a204:	a904      	add	r1, sp, #16
 800a206:	4630      	mov	r0, r6
 800a208:	f7fe f90e 	bl	8008428 <_printf_i>
 800a20c:	e7e4      	b.n	800a1d8 <_vfiprintf_r+0x208>
 800a20e:	bf00      	nop
 800a210:	0800b680 	.word	0x0800b680
 800a214:	0800b6a0 	.word	0x0800b6a0
 800a218:	0800b660 	.word	0x0800b660
 800a21c:	0800b64c 	.word	0x0800b64c
 800a220:	0800b656 	.word	0x0800b656
 800a224:	08007ee1 	.word	0x08007ee1
 800a228:	08009fab 	.word	0x08009fab
 800a22c:	0800b652 	.word	0x0800b652

0800a230 <__swbuf_r>:
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a232:	460e      	mov	r6, r1
 800a234:	4614      	mov	r4, r2
 800a236:	4605      	mov	r5, r0
 800a238:	b118      	cbz	r0, 800a242 <__swbuf_r+0x12>
 800a23a:	6983      	ldr	r3, [r0, #24]
 800a23c:	b90b      	cbnz	r3, 800a242 <__swbuf_r+0x12>
 800a23e:	f000 f9d9 	bl	800a5f4 <__sinit>
 800a242:	4b21      	ldr	r3, [pc, #132]	; (800a2c8 <__swbuf_r+0x98>)
 800a244:	429c      	cmp	r4, r3
 800a246:	d12b      	bne.n	800a2a0 <__swbuf_r+0x70>
 800a248:	686c      	ldr	r4, [r5, #4]
 800a24a:	69a3      	ldr	r3, [r4, #24]
 800a24c:	60a3      	str	r3, [r4, #8]
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	071a      	lsls	r2, r3, #28
 800a252:	d52f      	bpl.n	800a2b4 <__swbuf_r+0x84>
 800a254:	6923      	ldr	r3, [r4, #16]
 800a256:	b36b      	cbz	r3, 800a2b4 <__swbuf_r+0x84>
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	6820      	ldr	r0, [r4, #0]
 800a25c:	1ac0      	subs	r0, r0, r3
 800a25e:	6963      	ldr	r3, [r4, #20]
 800a260:	b2f6      	uxtb	r6, r6
 800a262:	4283      	cmp	r3, r0
 800a264:	4637      	mov	r7, r6
 800a266:	dc04      	bgt.n	800a272 <__swbuf_r+0x42>
 800a268:	4621      	mov	r1, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 f92e 	bl	800a4cc <_fflush_r>
 800a270:	bb30      	cbnz	r0, 800a2c0 <__swbuf_r+0x90>
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	3b01      	subs	r3, #1
 800a276:	60a3      	str	r3, [r4, #8]
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	6022      	str	r2, [r4, #0]
 800a27e:	701e      	strb	r6, [r3, #0]
 800a280:	6963      	ldr	r3, [r4, #20]
 800a282:	3001      	adds	r0, #1
 800a284:	4283      	cmp	r3, r0
 800a286:	d004      	beq.n	800a292 <__swbuf_r+0x62>
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	07db      	lsls	r3, r3, #31
 800a28c:	d506      	bpl.n	800a29c <__swbuf_r+0x6c>
 800a28e:	2e0a      	cmp	r6, #10
 800a290:	d104      	bne.n	800a29c <__swbuf_r+0x6c>
 800a292:	4621      	mov	r1, r4
 800a294:	4628      	mov	r0, r5
 800a296:	f000 f919 	bl	800a4cc <_fflush_r>
 800a29a:	b988      	cbnz	r0, 800a2c0 <__swbuf_r+0x90>
 800a29c:	4638      	mov	r0, r7
 800a29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <__swbuf_r+0x9c>)
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	d101      	bne.n	800a2aa <__swbuf_r+0x7a>
 800a2a6:	68ac      	ldr	r4, [r5, #8]
 800a2a8:	e7cf      	b.n	800a24a <__swbuf_r+0x1a>
 800a2aa:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <__swbuf_r+0xa0>)
 800a2ac:	429c      	cmp	r4, r3
 800a2ae:	bf08      	it	eq
 800a2b0:	68ec      	ldreq	r4, [r5, #12]
 800a2b2:	e7ca      	b.n	800a24a <__swbuf_r+0x1a>
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 f80c 	bl	800a2d4 <__swsetup_r>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d0cb      	beq.n	800a258 <__swbuf_r+0x28>
 800a2c0:	f04f 37ff 	mov.w	r7, #4294967295
 800a2c4:	e7ea      	b.n	800a29c <__swbuf_r+0x6c>
 800a2c6:	bf00      	nop
 800a2c8:	0800b680 	.word	0x0800b680
 800a2cc:	0800b6a0 	.word	0x0800b6a0
 800a2d0:	0800b660 	.word	0x0800b660

0800a2d4 <__swsetup_r>:
 800a2d4:	4b32      	ldr	r3, [pc, #200]	; (800a3a0 <__swsetup_r+0xcc>)
 800a2d6:	b570      	push	{r4, r5, r6, lr}
 800a2d8:	681d      	ldr	r5, [r3, #0]
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	b125      	cbz	r5, 800a2ea <__swsetup_r+0x16>
 800a2e0:	69ab      	ldr	r3, [r5, #24]
 800a2e2:	b913      	cbnz	r3, 800a2ea <__swsetup_r+0x16>
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 f985 	bl	800a5f4 <__sinit>
 800a2ea:	4b2e      	ldr	r3, [pc, #184]	; (800a3a4 <__swsetup_r+0xd0>)
 800a2ec:	429c      	cmp	r4, r3
 800a2ee:	d10f      	bne.n	800a310 <__swsetup_r+0x3c>
 800a2f0:	686c      	ldr	r4, [r5, #4]
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2f8:	0719      	lsls	r1, r3, #28
 800a2fa:	d42c      	bmi.n	800a356 <__swsetup_r+0x82>
 800a2fc:	06dd      	lsls	r5, r3, #27
 800a2fe:	d411      	bmi.n	800a324 <__swsetup_r+0x50>
 800a300:	2309      	movs	r3, #9
 800a302:	6033      	str	r3, [r6, #0]
 800a304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	f04f 30ff 	mov.w	r0, #4294967295
 800a30e:	e03e      	b.n	800a38e <__swsetup_r+0xba>
 800a310:	4b25      	ldr	r3, [pc, #148]	; (800a3a8 <__swsetup_r+0xd4>)
 800a312:	429c      	cmp	r4, r3
 800a314:	d101      	bne.n	800a31a <__swsetup_r+0x46>
 800a316:	68ac      	ldr	r4, [r5, #8]
 800a318:	e7eb      	b.n	800a2f2 <__swsetup_r+0x1e>
 800a31a:	4b24      	ldr	r3, [pc, #144]	; (800a3ac <__swsetup_r+0xd8>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	bf08      	it	eq
 800a320:	68ec      	ldreq	r4, [r5, #12]
 800a322:	e7e6      	b.n	800a2f2 <__swsetup_r+0x1e>
 800a324:	0758      	lsls	r0, r3, #29
 800a326:	d512      	bpl.n	800a34e <__swsetup_r+0x7a>
 800a328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a32a:	b141      	cbz	r1, 800a33e <__swsetup_r+0x6a>
 800a32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a330:	4299      	cmp	r1, r3
 800a332:	d002      	beq.n	800a33a <__swsetup_r+0x66>
 800a334:	4630      	mov	r0, r6
 800a336:	f7fd fc53 	bl	8007be0 <_free_r>
 800a33a:	2300      	movs	r3, #0
 800a33c:	6363      	str	r3, [r4, #52]	; 0x34
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	2300      	movs	r3, #0
 800a348:	6063      	str	r3, [r4, #4]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	f043 0308 	orr.w	r3, r3, #8
 800a354:	81a3      	strh	r3, [r4, #12]
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	b94b      	cbnz	r3, 800a36e <__swsetup_r+0x9a>
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a364:	d003      	beq.n	800a36e <__swsetup_r+0x9a>
 800a366:	4621      	mov	r1, r4
 800a368:	4630      	mov	r0, r6
 800a36a:	f000 fa09 	bl	800a780 <__smakebuf_r>
 800a36e:	89a0      	ldrh	r0, [r4, #12]
 800a370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a374:	f010 0301 	ands.w	r3, r0, #1
 800a378:	d00a      	beq.n	800a390 <__swsetup_r+0xbc>
 800a37a:	2300      	movs	r3, #0
 800a37c:	60a3      	str	r3, [r4, #8]
 800a37e:	6963      	ldr	r3, [r4, #20]
 800a380:	425b      	negs	r3, r3
 800a382:	61a3      	str	r3, [r4, #24]
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	b943      	cbnz	r3, 800a39a <__swsetup_r+0xc6>
 800a388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a38c:	d1ba      	bne.n	800a304 <__swsetup_r+0x30>
 800a38e:	bd70      	pop	{r4, r5, r6, pc}
 800a390:	0781      	lsls	r1, r0, #30
 800a392:	bf58      	it	pl
 800a394:	6963      	ldrpl	r3, [r4, #20]
 800a396:	60a3      	str	r3, [r4, #8]
 800a398:	e7f4      	b.n	800a384 <__swsetup_r+0xb0>
 800a39a:	2000      	movs	r0, #0
 800a39c:	e7f7      	b.n	800a38e <__swsetup_r+0xba>
 800a39e:	bf00      	nop
 800a3a0:	2000000c 	.word	0x2000000c
 800a3a4:	0800b680 	.word	0x0800b680
 800a3a8:	0800b6a0 	.word	0x0800b6a0
 800a3ac:	0800b660 	.word	0x0800b660

0800a3b0 <abort>:
 800a3b0:	b508      	push	{r3, lr}
 800a3b2:	2006      	movs	r0, #6
 800a3b4:	f000 faa8 	bl	800a908 <raise>
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	f7f8 f861 	bl	8002480 <_exit>
	...

0800a3c0 <__sflush_r>:
 800a3c0:	898a      	ldrh	r2, [r1, #12]
 800a3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	0710      	lsls	r0, r2, #28
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	d458      	bmi.n	800a480 <__sflush_r+0xc0>
 800a3ce:	684b      	ldr	r3, [r1, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dc05      	bgt.n	800a3e0 <__sflush_r+0x20>
 800a3d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dc02      	bgt.n	800a3e0 <__sflush_r+0x20>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3e2:	2e00      	cmp	r6, #0
 800a3e4:	d0f9      	beq.n	800a3da <__sflush_r+0x1a>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3ec:	682f      	ldr	r7, [r5, #0]
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	d032      	beq.n	800a458 <__sflush_r+0x98>
 800a3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	075a      	lsls	r2, r3, #29
 800a3f8:	d505      	bpl.n	800a406 <__sflush_r+0x46>
 800a3fa:	6863      	ldr	r3, [r4, #4]
 800a3fc:	1ac0      	subs	r0, r0, r3
 800a3fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a400:	b10b      	cbz	r3, 800a406 <__sflush_r+0x46>
 800a402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a404:	1ac0      	subs	r0, r0, r3
 800a406:	2300      	movs	r3, #0
 800a408:	4602      	mov	r2, r0
 800a40a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a40c:	6a21      	ldr	r1, [r4, #32]
 800a40e:	4628      	mov	r0, r5
 800a410:	47b0      	blx	r6
 800a412:	1c43      	adds	r3, r0, #1
 800a414:	89a3      	ldrh	r3, [r4, #12]
 800a416:	d106      	bne.n	800a426 <__sflush_r+0x66>
 800a418:	6829      	ldr	r1, [r5, #0]
 800a41a:	291d      	cmp	r1, #29
 800a41c:	d82c      	bhi.n	800a478 <__sflush_r+0xb8>
 800a41e:	4a2a      	ldr	r2, [pc, #168]	; (800a4c8 <__sflush_r+0x108>)
 800a420:	40ca      	lsrs	r2, r1
 800a422:	07d6      	lsls	r6, r2, #31
 800a424:	d528      	bpl.n	800a478 <__sflush_r+0xb8>
 800a426:	2200      	movs	r2, #0
 800a428:	6062      	str	r2, [r4, #4]
 800a42a:	04d9      	lsls	r1, r3, #19
 800a42c:	6922      	ldr	r2, [r4, #16]
 800a42e:	6022      	str	r2, [r4, #0]
 800a430:	d504      	bpl.n	800a43c <__sflush_r+0x7c>
 800a432:	1c42      	adds	r2, r0, #1
 800a434:	d101      	bne.n	800a43a <__sflush_r+0x7a>
 800a436:	682b      	ldr	r3, [r5, #0]
 800a438:	b903      	cbnz	r3, 800a43c <__sflush_r+0x7c>
 800a43a:	6560      	str	r0, [r4, #84]	; 0x54
 800a43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a43e:	602f      	str	r7, [r5, #0]
 800a440:	2900      	cmp	r1, #0
 800a442:	d0ca      	beq.n	800a3da <__sflush_r+0x1a>
 800a444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a448:	4299      	cmp	r1, r3
 800a44a:	d002      	beq.n	800a452 <__sflush_r+0x92>
 800a44c:	4628      	mov	r0, r5
 800a44e:	f7fd fbc7 	bl	8007be0 <_free_r>
 800a452:	2000      	movs	r0, #0
 800a454:	6360      	str	r0, [r4, #52]	; 0x34
 800a456:	e7c1      	b.n	800a3dc <__sflush_r+0x1c>
 800a458:	6a21      	ldr	r1, [r4, #32]
 800a45a:	2301      	movs	r3, #1
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b0      	blx	r6
 800a460:	1c41      	adds	r1, r0, #1
 800a462:	d1c7      	bne.n	800a3f4 <__sflush_r+0x34>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0c4      	beq.n	800a3f4 <__sflush_r+0x34>
 800a46a:	2b1d      	cmp	r3, #29
 800a46c:	d001      	beq.n	800a472 <__sflush_r+0xb2>
 800a46e:	2b16      	cmp	r3, #22
 800a470:	d101      	bne.n	800a476 <__sflush_r+0xb6>
 800a472:	602f      	str	r7, [r5, #0]
 800a474:	e7b1      	b.n	800a3da <__sflush_r+0x1a>
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	e7ad      	b.n	800a3dc <__sflush_r+0x1c>
 800a480:	690f      	ldr	r7, [r1, #16]
 800a482:	2f00      	cmp	r7, #0
 800a484:	d0a9      	beq.n	800a3da <__sflush_r+0x1a>
 800a486:	0793      	lsls	r3, r2, #30
 800a488:	680e      	ldr	r6, [r1, #0]
 800a48a:	bf08      	it	eq
 800a48c:	694b      	ldreq	r3, [r1, #20]
 800a48e:	600f      	str	r7, [r1, #0]
 800a490:	bf18      	it	ne
 800a492:	2300      	movne	r3, #0
 800a494:	eba6 0807 	sub.w	r8, r6, r7
 800a498:	608b      	str	r3, [r1, #8]
 800a49a:	f1b8 0f00 	cmp.w	r8, #0
 800a49e:	dd9c      	ble.n	800a3da <__sflush_r+0x1a>
 800a4a0:	6a21      	ldr	r1, [r4, #32]
 800a4a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4a4:	4643      	mov	r3, r8
 800a4a6:	463a      	mov	r2, r7
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	47b0      	blx	r6
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	dc06      	bgt.n	800a4be <__sflush_r+0xfe>
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	e78e      	b.n	800a3dc <__sflush_r+0x1c>
 800a4be:	4407      	add	r7, r0
 800a4c0:	eba8 0800 	sub.w	r8, r8, r0
 800a4c4:	e7e9      	b.n	800a49a <__sflush_r+0xda>
 800a4c6:	bf00      	nop
 800a4c8:	20400001 	.word	0x20400001

0800a4cc <_fflush_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	690b      	ldr	r3, [r1, #16]
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	b913      	cbnz	r3, 800a4dc <_fflush_r+0x10>
 800a4d6:	2500      	movs	r5, #0
 800a4d8:	4628      	mov	r0, r5
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	b118      	cbz	r0, 800a4e6 <_fflush_r+0x1a>
 800a4de:	6983      	ldr	r3, [r0, #24]
 800a4e0:	b90b      	cbnz	r3, 800a4e6 <_fflush_r+0x1a>
 800a4e2:	f000 f887 	bl	800a5f4 <__sinit>
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <_fflush_r+0x6c>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	d11b      	bne.n	800a524 <_fflush_r+0x58>
 800a4ec:	686c      	ldr	r4, [r5, #4]
 800a4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0ef      	beq.n	800a4d6 <_fflush_r+0xa>
 800a4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4f8:	07d0      	lsls	r0, r2, #31
 800a4fa:	d404      	bmi.n	800a506 <_fflush_r+0x3a>
 800a4fc:	0599      	lsls	r1, r3, #22
 800a4fe:	d402      	bmi.n	800a506 <_fflush_r+0x3a>
 800a500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a502:	f000 f915 	bl	800a730 <__retarget_lock_acquire_recursive>
 800a506:	4628      	mov	r0, r5
 800a508:	4621      	mov	r1, r4
 800a50a:	f7ff ff59 	bl	800a3c0 <__sflush_r>
 800a50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a510:	07da      	lsls	r2, r3, #31
 800a512:	4605      	mov	r5, r0
 800a514:	d4e0      	bmi.n	800a4d8 <_fflush_r+0xc>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	059b      	lsls	r3, r3, #22
 800a51a:	d4dd      	bmi.n	800a4d8 <_fflush_r+0xc>
 800a51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a51e:	f000 f908 	bl	800a732 <__retarget_lock_release_recursive>
 800a522:	e7d9      	b.n	800a4d8 <_fflush_r+0xc>
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <_fflush_r+0x70>)
 800a526:	429c      	cmp	r4, r3
 800a528:	d101      	bne.n	800a52e <_fflush_r+0x62>
 800a52a:	68ac      	ldr	r4, [r5, #8]
 800a52c:	e7df      	b.n	800a4ee <_fflush_r+0x22>
 800a52e:	4b04      	ldr	r3, [pc, #16]	; (800a540 <_fflush_r+0x74>)
 800a530:	429c      	cmp	r4, r3
 800a532:	bf08      	it	eq
 800a534:	68ec      	ldreq	r4, [r5, #12]
 800a536:	e7da      	b.n	800a4ee <_fflush_r+0x22>
 800a538:	0800b680 	.word	0x0800b680
 800a53c:	0800b6a0 	.word	0x0800b6a0
 800a540:	0800b660 	.word	0x0800b660

0800a544 <std>:
 800a544:	2300      	movs	r3, #0
 800a546:	b510      	push	{r4, lr}
 800a548:	4604      	mov	r4, r0
 800a54a:	e9c0 3300 	strd	r3, r3, [r0]
 800a54e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a552:	6083      	str	r3, [r0, #8]
 800a554:	8181      	strh	r1, [r0, #12]
 800a556:	6643      	str	r3, [r0, #100]	; 0x64
 800a558:	81c2      	strh	r2, [r0, #14]
 800a55a:	6183      	str	r3, [r0, #24]
 800a55c:	4619      	mov	r1, r3
 800a55e:	2208      	movs	r2, #8
 800a560:	305c      	adds	r0, #92	; 0x5c
 800a562:	f7fd fb35 	bl	8007bd0 <memset>
 800a566:	4b05      	ldr	r3, [pc, #20]	; (800a57c <std+0x38>)
 800a568:	6263      	str	r3, [r4, #36]	; 0x24
 800a56a:	4b05      	ldr	r3, [pc, #20]	; (800a580 <std+0x3c>)
 800a56c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a56e:	4b05      	ldr	r3, [pc, #20]	; (800a584 <std+0x40>)
 800a570:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a572:	4b05      	ldr	r3, [pc, #20]	; (800a588 <std+0x44>)
 800a574:	6224      	str	r4, [r4, #32]
 800a576:	6323      	str	r3, [r4, #48]	; 0x30
 800a578:	bd10      	pop	{r4, pc}
 800a57a:	bf00      	nop
 800a57c:	0800a941 	.word	0x0800a941
 800a580:	0800a963 	.word	0x0800a963
 800a584:	0800a99b 	.word	0x0800a99b
 800a588:	0800a9bf 	.word	0x0800a9bf

0800a58c <_cleanup_r>:
 800a58c:	4901      	ldr	r1, [pc, #4]	; (800a594 <_cleanup_r+0x8>)
 800a58e:	f000 b8af 	b.w	800a6f0 <_fwalk_reent>
 800a592:	bf00      	nop
 800a594:	0800a4cd 	.word	0x0800a4cd

0800a598 <__sfmoreglue>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	2268      	movs	r2, #104	; 0x68
 800a59c:	1e4d      	subs	r5, r1, #1
 800a59e:	4355      	muls	r5, r2
 800a5a0:	460e      	mov	r6, r1
 800a5a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5a6:	f7fd fb87 	bl	8007cb8 <_malloc_r>
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	b140      	cbz	r0, 800a5c0 <__sfmoreglue+0x28>
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	e9c0 1600 	strd	r1, r6, [r0]
 800a5b4:	300c      	adds	r0, #12
 800a5b6:	60a0      	str	r0, [r4, #8]
 800a5b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5bc:	f7fd fb08 	bl	8007bd0 <memset>
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}

0800a5c4 <__sfp_lock_acquire>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	; (800a5cc <__sfp_lock_acquire+0x8>)
 800a5c6:	f000 b8b3 	b.w	800a730 <__retarget_lock_acquire_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	200006c1 	.word	0x200006c1

0800a5d0 <__sfp_lock_release>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__sfp_lock_release+0x8>)
 800a5d2:	f000 b8ae 	b.w	800a732 <__retarget_lock_release_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	200006c1 	.word	0x200006c1

0800a5dc <__sinit_lock_acquire>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	; (800a5e4 <__sinit_lock_acquire+0x8>)
 800a5de:	f000 b8a7 	b.w	800a730 <__retarget_lock_acquire_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	200006c2 	.word	0x200006c2

0800a5e8 <__sinit_lock_release>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__sinit_lock_release+0x8>)
 800a5ea:	f000 b8a2 	b.w	800a732 <__retarget_lock_release_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	200006c2 	.word	0x200006c2

0800a5f4 <__sinit>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	f7ff fff0 	bl	800a5dc <__sinit_lock_acquire>
 800a5fc:	69a3      	ldr	r3, [r4, #24]
 800a5fe:	b11b      	cbz	r3, 800a608 <__sinit+0x14>
 800a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a604:	f7ff bff0 	b.w	800a5e8 <__sinit_lock_release>
 800a608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a60c:	6523      	str	r3, [r4, #80]	; 0x50
 800a60e:	4b13      	ldr	r3, [pc, #76]	; (800a65c <__sinit+0x68>)
 800a610:	4a13      	ldr	r2, [pc, #76]	; (800a660 <__sinit+0x6c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	62a2      	str	r2, [r4, #40]	; 0x28
 800a616:	42a3      	cmp	r3, r4
 800a618:	bf04      	itt	eq
 800a61a:	2301      	moveq	r3, #1
 800a61c:	61a3      	streq	r3, [r4, #24]
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 f820 	bl	800a664 <__sfp>
 800a624:	6060      	str	r0, [r4, #4]
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f81c 	bl	800a664 <__sfp>
 800a62c:	60a0      	str	r0, [r4, #8]
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 f818 	bl	800a664 <__sfp>
 800a634:	2200      	movs	r2, #0
 800a636:	60e0      	str	r0, [r4, #12]
 800a638:	2104      	movs	r1, #4
 800a63a:	6860      	ldr	r0, [r4, #4]
 800a63c:	f7ff ff82 	bl	800a544 <std>
 800a640:	68a0      	ldr	r0, [r4, #8]
 800a642:	2201      	movs	r2, #1
 800a644:	2109      	movs	r1, #9
 800a646:	f7ff ff7d 	bl	800a544 <std>
 800a64a:	68e0      	ldr	r0, [r4, #12]
 800a64c:	2202      	movs	r2, #2
 800a64e:	2112      	movs	r1, #18
 800a650:	f7ff ff78 	bl	800a544 <std>
 800a654:	2301      	movs	r3, #1
 800a656:	61a3      	str	r3, [r4, #24]
 800a658:	e7d2      	b.n	800a600 <__sinit+0xc>
 800a65a:	bf00      	nop
 800a65c:	0800b390 	.word	0x0800b390
 800a660:	0800a58d 	.word	0x0800a58d

0800a664 <__sfp>:
 800a664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a666:	4607      	mov	r7, r0
 800a668:	f7ff ffac 	bl	800a5c4 <__sfp_lock_acquire>
 800a66c:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <__sfp+0x84>)
 800a66e:	681e      	ldr	r6, [r3, #0]
 800a670:	69b3      	ldr	r3, [r6, #24]
 800a672:	b913      	cbnz	r3, 800a67a <__sfp+0x16>
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff ffbd 	bl	800a5f4 <__sinit>
 800a67a:	3648      	adds	r6, #72	; 0x48
 800a67c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a680:	3b01      	subs	r3, #1
 800a682:	d503      	bpl.n	800a68c <__sfp+0x28>
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	b30b      	cbz	r3, 800a6cc <__sfp+0x68>
 800a688:	6836      	ldr	r6, [r6, #0]
 800a68a:	e7f7      	b.n	800a67c <__sfp+0x18>
 800a68c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a690:	b9d5      	cbnz	r5, 800a6c8 <__sfp+0x64>
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <__sfp+0x88>)
 800a694:	60e3      	str	r3, [r4, #12]
 800a696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a69a:	6665      	str	r5, [r4, #100]	; 0x64
 800a69c:	f000 f847 	bl	800a72e <__retarget_lock_init_recursive>
 800a6a0:	f7ff ff96 	bl	800a5d0 <__sfp_lock_release>
 800a6a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6ac:	6025      	str	r5, [r4, #0]
 800a6ae:	61a5      	str	r5, [r4, #24]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6b8:	f7fd fa8a 	bl	8007bd0 <memset>
 800a6bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c8:	3468      	adds	r4, #104	; 0x68
 800a6ca:	e7d9      	b.n	800a680 <__sfp+0x1c>
 800a6cc:	2104      	movs	r1, #4
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7ff ff62 	bl	800a598 <__sfmoreglue>
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	6030      	str	r0, [r6, #0]
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d1d5      	bne.n	800a688 <__sfp+0x24>
 800a6dc:	f7ff ff78 	bl	800a5d0 <__sfp_lock_release>
 800a6e0:	230c      	movs	r3, #12
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	e7ee      	b.n	800a6c4 <__sfp+0x60>
 800a6e6:	bf00      	nop
 800a6e8:	0800b390 	.word	0x0800b390
 800a6ec:	ffff0001 	.word	0xffff0001

0800a6f0 <_fwalk_reent>:
 800a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	4688      	mov	r8, r1
 800a6f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6fc:	2700      	movs	r7, #0
 800a6fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a702:	f1b9 0901 	subs.w	r9, r9, #1
 800a706:	d505      	bpl.n	800a714 <_fwalk_reent+0x24>
 800a708:	6824      	ldr	r4, [r4, #0]
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	d1f7      	bne.n	800a6fe <_fwalk_reent+0xe>
 800a70e:	4638      	mov	r0, r7
 800a710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a714:	89ab      	ldrh	r3, [r5, #12]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d907      	bls.n	800a72a <_fwalk_reent+0x3a>
 800a71a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a71e:	3301      	adds	r3, #1
 800a720:	d003      	beq.n	800a72a <_fwalk_reent+0x3a>
 800a722:	4629      	mov	r1, r5
 800a724:	4630      	mov	r0, r6
 800a726:	47c0      	blx	r8
 800a728:	4307      	orrs	r7, r0
 800a72a:	3568      	adds	r5, #104	; 0x68
 800a72c:	e7e9      	b.n	800a702 <_fwalk_reent+0x12>

0800a72e <__retarget_lock_init_recursive>:
 800a72e:	4770      	bx	lr

0800a730 <__retarget_lock_acquire_recursive>:
 800a730:	4770      	bx	lr

0800a732 <__retarget_lock_release_recursive>:
 800a732:	4770      	bx	lr

0800a734 <__swhatbuf_r>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	460e      	mov	r6, r1
 800a738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	b096      	sub	sp, #88	; 0x58
 800a740:	4614      	mov	r4, r2
 800a742:	461d      	mov	r5, r3
 800a744:	da08      	bge.n	800a758 <__swhatbuf_r+0x24>
 800a746:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	602a      	str	r2, [r5, #0]
 800a74e:	061a      	lsls	r2, r3, #24
 800a750:	d410      	bmi.n	800a774 <__swhatbuf_r+0x40>
 800a752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a756:	e00e      	b.n	800a776 <__swhatbuf_r+0x42>
 800a758:	466a      	mov	r2, sp
 800a75a:	f000 f963 	bl	800aa24 <_fstat_r>
 800a75e:	2800      	cmp	r0, #0
 800a760:	dbf1      	blt.n	800a746 <__swhatbuf_r+0x12>
 800a762:	9a01      	ldr	r2, [sp, #4]
 800a764:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a768:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a76c:	425a      	negs	r2, r3
 800a76e:	415a      	adcs	r2, r3
 800a770:	602a      	str	r2, [r5, #0]
 800a772:	e7ee      	b.n	800a752 <__swhatbuf_r+0x1e>
 800a774:	2340      	movs	r3, #64	; 0x40
 800a776:	2000      	movs	r0, #0
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	b016      	add	sp, #88	; 0x58
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a780 <__smakebuf_r>:
 800a780:	898b      	ldrh	r3, [r1, #12]
 800a782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a784:	079d      	lsls	r5, r3, #30
 800a786:	4606      	mov	r6, r0
 800a788:	460c      	mov	r4, r1
 800a78a:	d507      	bpl.n	800a79c <__smakebuf_r+0x1c>
 800a78c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	6123      	str	r3, [r4, #16]
 800a794:	2301      	movs	r3, #1
 800a796:	6163      	str	r3, [r4, #20]
 800a798:	b002      	add	sp, #8
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	ab01      	add	r3, sp, #4
 800a79e:	466a      	mov	r2, sp
 800a7a0:	f7ff ffc8 	bl	800a734 <__swhatbuf_r>
 800a7a4:	9900      	ldr	r1, [sp, #0]
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7fd fa85 	bl	8007cb8 <_malloc_r>
 800a7ae:	b948      	cbnz	r0, 800a7c4 <__smakebuf_r+0x44>
 800a7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b4:	059a      	lsls	r2, r3, #22
 800a7b6:	d4ef      	bmi.n	800a798 <__smakebuf_r+0x18>
 800a7b8:	f023 0303 	bic.w	r3, r3, #3
 800a7bc:	f043 0302 	orr.w	r3, r3, #2
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	e7e3      	b.n	800a78c <__smakebuf_r+0xc>
 800a7c4:	4b0d      	ldr	r3, [pc, #52]	; (800a7fc <__smakebuf_r+0x7c>)
 800a7c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	6020      	str	r0, [r4, #0]
 800a7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	6163      	str	r3, [r4, #20]
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	6120      	str	r0, [r4, #16]
 800a7da:	b15b      	cbz	r3, 800a7f4 <__smakebuf_r+0x74>
 800a7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f000 f931 	bl	800aa48 <_isatty_r>
 800a7e6:	b128      	cbz	r0, 800a7f4 <__smakebuf_r+0x74>
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	f043 0301 	orr.w	r3, r3, #1
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	89a0      	ldrh	r0, [r4, #12]
 800a7f6:	4305      	orrs	r5, r0
 800a7f8:	81a5      	strh	r5, [r4, #12]
 800a7fa:	e7cd      	b.n	800a798 <__smakebuf_r+0x18>
 800a7fc:	0800a58d 	.word	0x0800a58d

0800a800 <__ascii_mbtowc>:
 800a800:	b082      	sub	sp, #8
 800a802:	b901      	cbnz	r1, 800a806 <__ascii_mbtowc+0x6>
 800a804:	a901      	add	r1, sp, #4
 800a806:	b142      	cbz	r2, 800a81a <__ascii_mbtowc+0x1a>
 800a808:	b14b      	cbz	r3, 800a81e <__ascii_mbtowc+0x1e>
 800a80a:	7813      	ldrb	r3, [r2, #0]
 800a80c:	600b      	str	r3, [r1, #0]
 800a80e:	7812      	ldrb	r2, [r2, #0]
 800a810:	1e10      	subs	r0, r2, #0
 800a812:	bf18      	it	ne
 800a814:	2001      	movne	r0, #1
 800a816:	b002      	add	sp, #8
 800a818:	4770      	bx	lr
 800a81a:	4610      	mov	r0, r2
 800a81c:	e7fb      	b.n	800a816 <__ascii_mbtowc+0x16>
 800a81e:	f06f 0001 	mvn.w	r0, #1
 800a822:	e7f8      	b.n	800a816 <__ascii_mbtowc+0x16>

0800a824 <memmove>:
 800a824:	4288      	cmp	r0, r1
 800a826:	b510      	push	{r4, lr}
 800a828:	eb01 0402 	add.w	r4, r1, r2
 800a82c:	d902      	bls.n	800a834 <memmove+0x10>
 800a82e:	4284      	cmp	r4, r0
 800a830:	4623      	mov	r3, r4
 800a832:	d807      	bhi.n	800a844 <memmove+0x20>
 800a834:	1e43      	subs	r3, r0, #1
 800a836:	42a1      	cmp	r1, r4
 800a838:	d008      	beq.n	800a84c <memmove+0x28>
 800a83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a842:	e7f8      	b.n	800a836 <memmove+0x12>
 800a844:	4402      	add	r2, r0
 800a846:	4601      	mov	r1, r0
 800a848:	428a      	cmp	r2, r1
 800a84a:	d100      	bne.n	800a84e <memmove+0x2a>
 800a84c:	bd10      	pop	{r4, pc}
 800a84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a856:	e7f7      	b.n	800a848 <memmove+0x24>

0800a858 <_realloc_r>:
 800a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85c:	4680      	mov	r8, r0
 800a85e:	4614      	mov	r4, r2
 800a860:	460e      	mov	r6, r1
 800a862:	b921      	cbnz	r1, 800a86e <_realloc_r+0x16>
 800a864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a868:	4611      	mov	r1, r2
 800a86a:	f7fd ba25 	b.w	8007cb8 <_malloc_r>
 800a86e:	b92a      	cbnz	r2, 800a87c <_realloc_r+0x24>
 800a870:	f7fd f9b6 	bl	8007be0 <_free_r>
 800a874:	4625      	mov	r5, r4
 800a876:	4628      	mov	r0, r5
 800a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87c:	f000 f906 	bl	800aa8c <_malloc_usable_size_r>
 800a880:	4284      	cmp	r4, r0
 800a882:	4607      	mov	r7, r0
 800a884:	d802      	bhi.n	800a88c <_realloc_r+0x34>
 800a886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a88a:	d812      	bhi.n	800a8b2 <_realloc_r+0x5a>
 800a88c:	4621      	mov	r1, r4
 800a88e:	4640      	mov	r0, r8
 800a890:	f7fd fa12 	bl	8007cb8 <_malloc_r>
 800a894:	4605      	mov	r5, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d0ed      	beq.n	800a876 <_realloc_r+0x1e>
 800a89a:	42bc      	cmp	r4, r7
 800a89c:	4622      	mov	r2, r4
 800a89e:	4631      	mov	r1, r6
 800a8a0:	bf28      	it	cs
 800a8a2:	463a      	movcs	r2, r7
 800a8a4:	f7fd f986 	bl	8007bb4 <memcpy>
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	f7fd f998 	bl	8007be0 <_free_r>
 800a8b0:	e7e1      	b.n	800a876 <_realloc_r+0x1e>
 800a8b2:	4635      	mov	r5, r6
 800a8b4:	e7df      	b.n	800a876 <_realloc_r+0x1e>

0800a8b6 <_raise_r>:
 800a8b6:	291f      	cmp	r1, #31
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	460d      	mov	r5, r1
 800a8be:	d904      	bls.n	800a8ca <_raise_r+0x14>
 800a8c0:	2316      	movs	r3, #22
 800a8c2:	6003      	str	r3, [r0, #0]
 800a8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8cc:	b112      	cbz	r2, 800a8d4 <_raise_r+0x1e>
 800a8ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8d2:	b94b      	cbnz	r3, 800a8e8 <_raise_r+0x32>
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 f831 	bl	800a93c <_getpid_r>
 800a8da:	462a      	mov	r2, r5
 800a8dc:	4601      	mov	r1, r0
 800a8de:	4620      	mov	r0, r4
 800a8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8e4:	f000 b818 	b.w	800a918 <_kill_r>
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d00a      	beq.n	800a902 <_raise_r+0x4c>
 800a8ec:	1c59      	adds	r1, r3, #1
 800a8ee:	d103      	bne.n	800a8f8 <_raise_r+0x42>
 800a8f0:	2316      	movs	r3, #22
 800a8f2:	6003      	str	r3, [r0, #0]
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	e7e7      	b.n	800a8c8 <_raise_r+0x12>
 800a8f8:	2400      	movs	r4, #0
 800a8fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8fe:	4628      	mov	r0, r5
 800a900:	4798      	blx	r3
 800a902:	2000      	movs	r0, #0
 800a904:	e7e0      	b.n	800a8c8 <_raise_r+0x12>
	...

0800a908 <raise>:
 800a908:	4b02      	ldr	r3, [pc, #8]	; (800a914 <raise+0xc>)
 800a90a:	4601      	mov	r1, r0
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	f7ff bfd2 	b.w	800a8b6 <_raise_r>
 800a912:	bf00      	nop
 800a914:	2000000c 	.word	0x2000000c

0800a918 <_kill_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d07      	ldr	r5, [pc, #28]	; (800a938 <_kill_r+0x20>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	4611      	mov	r1, r2
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	f7f7 fd9b 	bl	8002460 <_kill>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	d102      	bne.n	800a934 <_kill_r+0x1c>
 800a92e:	682b      	ldr	r3, [r5, #0]
 800a930:	b103      	cbz	r3, 800a934 <_kill_r+0x1c>
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	bd38      	pop	{r3, r4, r5, pc}
 800a936:	bf00      	nop
 800a938:	200006bc 	.word	0x200006bc

0800a93c <_getpid_r>:
 800a93c:	f7f7 bd88 	b.w	8002450 <_getpid>

0800a940 <__sread>:
 800a940:	b510      	push	{r4, lr}
 800a942:	460c      	mov	r4, r1
 800a944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a948:	f000 f8a8 	bl	800aa9c <_read_r>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	bfab      	itete	ge
 800a950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a952:	89a3      	ldrhlt	r3, [r4, #12]
 800a954:	181b      	addge	r3, r3, r0
 800a956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a95a:	bfac      	ite	ge
 800a95c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a95e:	81a3      	strhlt	r3, [r4, #12]
 800a960:	bd10      	pop	{r4, pc}

0800a962 <__swrite>:
 800a962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a966:	461f      	mov	r7, r3
 800a968:	898b      	ldrh	r3, [r1, #12]
 800a96a:	05db      	lsls	r3, r3, #23
 800a96c:	4605      	mov	r5, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	4616      	mov	r6, r2
 800a972:	d505      	bpl.n	800a980 <__swrite+0x1e>
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	2302      	movs	r3, #2
 800a97a:	2200      	movs	r2, #0
 800a97c:	f000 f874 	bl	800aa68 <_lseek_r>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	4632      	mov	r2, r6
 800a98e:	463b      	mov	r3, r7
 800a990:	4628      	mov	r0, r5
 800a992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	f000 b823 	b.w	800a9e0 <_write_r>

0800a99a <__sseek>:
 800a99a:	b510      	push	{r4, lr}
 800a99c:	460c      	mov	r4, r1
 800a99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a2:	f000 f861 	bl	800aa68 <_lseek_r>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	bf15      	itete	ne
 800a9ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9b6:	81a3      	strheq	r3, [r4, #12]
 800a9b8:	bf18      	it	ne
 800a9ba:	81a3      	strhne	r3, [r4, #12]
 800a9bc:	bd10      	pop	{r4, pc}

0800a9be <__sclose>:
 800a9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c2:	f000 b81f 	b.w	800aa04 <_close_r>

0800a9c6 <__ascii_wctomb>:
 800a9c6:	b149      	cbz	r1, 800a9dc <__ascii_wctomb+0x16>
 800a9c8:	2aff      	cmp	r2, #255	; 0xff
 800a9ca:	bf85      	ittet	hi
 800a9cc:	238a      	movhi	r3, #138	; 0x8a
 800a9ce:	6003      	strhi	r3, [r0, #0]
 800a9d0:	700a      	strbls	r2, [r1, #0]
 800a9d2:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9d6:	bf98      	it	ls
 800a9d8:	2001      	movls	r0, #1
 800a9da:	4770      	bx	lr
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4770      	bx	lr

0800a9e0 <_write_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d07      	ldr	r5, [pc, #28]	; (800aa00 <_write_r+0x20>)
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	602a      	str	r2, [r5, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f7f7 fd6d 	bl	80024ce <_write>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_write_r+0x1e>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_write_r+0x1e>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	200006bc 	.word	0x200006bc

0800aa04 <_close_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d06      	ldr	r5, [pc, #24]	; (800aa20 <_close_r+0x1c>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f7f7 fd79 	bl	8002506 <_close>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	d102      	bne.n	800aa1e <_close_r+0x1a>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	b103      	cbz	r3, 800aa1e <_close_r+0x1a>
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	200006bc 	.word	0x200006bc

0800aa24 <_fstat_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d07      	ldr	r5, [pc, #28]	; (800aa44 <_fstat_r+0x20>)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	4608      	mov	r0, r1
 800aa2e:	4611      	mov	r1, r2
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	f7f7 fd74 	bl	800251e <_fstat>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d102      	bne.n	800aa40 <_fstat_r+0x1c>
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	b103      	cbz	r3, 800aa40 <_fstat_r+0x1c>
 800aa3e:	6023      	str	r3, [r4, #0]
 800aa40:	bd38      	pop	{r3, r4, r5, pc}
 800aa42:	bf00      	nop
 800aa44:	200006bc 	.word	0x200006bc

0800aa48 <_isatty_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d06      	ldr	r5, [pc, #24]	; (800aa64 <_isatty_r+0x1c>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	f7f7 fd73 	bl	800253e <_isatty>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_isatty_r+0x1a>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_isatty_r+0x1a>
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	200006bc 	.word	0x200006bc

0800aa68 <_lseek_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d07      	ldr	r5, [pc, #28]	; (800aa88 <_lseek_r+0x20>)
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	4608      	mov	r0, r1
 800aa70:	4611      	mov	r1, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	602a      	str	r2, [r5, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f7f7 fd6c 	bl	8002554 <_lseek>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_lseek_r+0x1e>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_lseek_r+0x1e>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	200006bc 	.word	0x200006bc

0800aa8c <_malloc_usable_size_r>:
 800aa8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa90:	1f18      	subs	r0, r3, #4
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bfbc      	itt	lt
 800aa96:	580b      	ldrlt	r3, [r1, r0]
 800aa98:	18c0      	addlt	r0, r0, r3
 800aa9a:	4770      	bx	lr

0800aa9c <_read_r>:
 800aa9c:	b538      	push	{r3, r4, r5, lr}
 800aa9e:	4d07      	ldr	r5, [pc, #28]	; (800aabc <_read_r+0x20>)
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	4608      	mov	r0, r1
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	602a      	str	r2, [r5, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f7f7 fcf2 	bl	8002494 <_read>
 800aab0:	1c43      	adds	r3, r0, #1
 800aab2:	d102      	bne.n	800aaba <_read_r+0x1e>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	b103      	cbz	r3, 800aaba <_read_r+0x1e>
 800aab8:	6023      	str	r3, [r4, #0]
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	200006bc 	.word	0x200006bc

0800aac0 <_init>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr

0800aacc <_fini>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr

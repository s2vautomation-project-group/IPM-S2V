
pin_config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d68  08004d68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d70  08004d70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004de8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004de8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9f2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022dc  00000000  00000000  0002da92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  000308b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f06  00000000  00000000  00031308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de11  00000000  00000000  0005220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0b1d  00000000  00000000  0006001f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120b3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  00120b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b88 	.word	0x08004b88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b88 	.word	0x08004b88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 f9c5 	bl	8000926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f003 f8a8 	bl	80036f0 <SystemClock_Config>
  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

 user_USART1_UART_Init();
 80005a0:	f003 f908 	bl	80037b4 <user_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  APPLICATION();
 80005a4:	f002 ffac 	bl	8003500 <APPLICATION>
 80005a8:	e7fc      	b.n	80005a4 <main+0x10>

080005aa <Error_Handler>:
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
void Error_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ae:	b672      	cpsid	i
}
 80005b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report  the HAL error return state */
  __disable_irq();
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <Error_Handler+0x8>

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_MspInit+0x44>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_MspInit+0x44>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6613      	str	r3, [r2, #96]	; 0x60
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_MspInit+0x44>)
 80005c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_MspInit+0x44>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_MspInit+0x44>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6593      	str	r3, [r2, #88]	; 0x58
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_MspInit+0x44>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09e      	sub	sp, #120	; 0x78
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	2254      	movs	r2, #84	; 0x54
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fa41 	bl	8003aa4 <memset>
  if(huart->Instance==USART1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <HAL_UART_MspInit+0xb8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d13f      	bne.n	80006ac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800062c:	2301      	movs	r3, #1
 800062e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fbbf 	bl	8001dbc <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000644:	f7ff ffb1 	bl	80005aa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <HAL_UART_MspInit+0xbc>)
 800064a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064c:	4a1a      	ldr	r2, [pc, #104]	; (80006b8 <HAL_UART_MspInit+0xbc>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6613      	str	r3, [r2, #96]	; 0x60
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <HAL_UART_MspInit+0xbc>)
 8000656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_UART_MspInit+0xbc>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_UART_MspInit+0xbc>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_UART_MspInit+0xbc>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000678:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800067c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800068a:	2307      	movs	r3, #7
 800068c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000698:	f000 fb4a 	bl	8000d30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2025      	movs	r0, #37	; 0x25
 80006a2:	f000 fa90 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006a6:	2025      	movs	r0, #37	; 0x25
 80006a8:	f000 faa9 	bl	8000bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	3778      	adds	r7, #120	; 0x78
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40013800 	.word	0x40013800
 80006b8:	40021000 	.word	0x40021000

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f962 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000714:	4802      	ldr	r0, [pc, #8]	; (8000720 <USART1_IRQHandler+0x10>)
 8000716:	f001 ff69 	bl	80025ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000f0 	.word	0x200000f0

08000724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return 1;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <_kill>:

int _kill(int pid, int sig)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800073e:	f003 f987 	bl	8003a50 <__errno>
 8000742:	4603      	mov	r3, r0
 8000744:	2216      	movs	r2, #22
 8000746:	601a      	str	r2, [r3, #0]
  return -1;
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <_exit>:

void _exit (int status)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800075c:	f04f 31ff 	mov.w	r1, #4294967295
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ffe7 	bl	8000734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000766:	e7fe      	b.n	8000766 <_exit+0x12>

08000768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	e00a      	b.n	8000790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800077a:	f3af 8000 	nop.w
 800077e:	4601      	mov	r1, r0
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	60ba      	str	r2, [r7, #8]
 8000786:	b2ca      	uxtb	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf0      	blt.n	800077a <_read+0x12>
  }

  return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	e009      	b.n	80007c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbf1      	blt.n	80007b4 <_write+0x12>
  }
  return len;
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <_close>:

int _close(int file)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000802:	605a      	str	r2, [r3, #4]
  return 0;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <_isatty>:

int _isatty(int file)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f003 f8ec 	bl	8003a50 <__errno>
 8000878:	4603      	mov	r3, r0
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <_sbrk+0x64>)
 8000894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20010000 	.word	0x20010000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	2000008c 	.word	0x2000008c
 80008ac:	20000188 	.word	0x20000188

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800090c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d8:	f7ff ffea 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	; (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	; (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f003 f8ab 	bl	8003a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000906:	f7ff fe45 	bl	8000594 <main>

0800090a <LoopForever>:

LoopForever:
    b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800090c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000918:	08004d78 	.word	0x08004d78
  ldr r2, =_sbss
 800091c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000920:	20000184 	.word	0x20000184

08000924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_IRQHandler>

08000926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f93d 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000936:	2000      	movs	r0, #0
 8000938:	f000 f80e 	bl	8000958 <HAL_InitTick>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	e001      	b.n	800094c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000948:	f7ff fe34 	bl	80005b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800094c:	79fb      	ldrb	r3, [r7, #7]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_InitTick+0x6c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d023      	beq.n	80009b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_InitTick+0x70>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f949 	bl	8000c1a <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10f      	bne.n	80009ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d809      	bhi.n	80009a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f913 	bl	8000bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_InitTick+0x74>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e007      	b.n	80009b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e004      	b.n	80009b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	e001      	b.n	80009b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000090 	.word	0x20000090

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000090 	.word	0x20000090

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff29 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff3e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffa2 	bl	8000b6c <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d008      	beq.n	8000c5c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e022      	b.n	8000ca2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 020e 	bic.w	r2, r2, #14
 8000c6a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0201 	bic.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	f003 021c 	and.w	r2, r3, #28
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d005      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2204      	movs	r2, #4
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e029      	b.n	8000d26 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 020e 	bic.w	r2, r2, #14
 8000ce0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0201 	bic.w	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f003 021c 	and.w	r2, r3, #28
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	2101      	movs	r1, #1
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	4798      	blx	r3
    }
  }
  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e148      	b.n	8000fd2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 813a 	beq.w	8000fcc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d005      	beq.n	8000d70 <HAL_GPIO_Init+0x40>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d130      	bne.n	8000dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 0201 	and.w	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d017      	beq.n	8000e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d123      	bne.n	8000e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	6939      	ldr	r1, [r7, #16]
 8000e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0203 	and.w	r2, r3, #3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8094 	beq.w	8000fcc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea4:	4b52      	ldr	r3, [pc, #328]	; (8000ff0 <HAL_GPIO_Init+0x2c0>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea8:	4a51      	ldr	r2, [pc, #324]	; (8000ff0 <HAL_GPIO_Init+0x2c0>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x2c0>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebc:	4a4d      	ldr	r2, [pc, #308]	; (8000ff4 <HAL_GPIO_Init+0x2c4>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee6:	d00d      	beq.n	8000f04 <HAL_GPIO_Init+0x1d4>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a43      	ldr	r2, [pc, #268]	; (8000ff8 <HAL_GPIO_Init+0x2c8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x1d0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a42      	ldr	r2, [pc, #264]	; (8000ffc <HAL_GPIO_Init+0x2cc>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d101      	bne.n	8000efc <HAL_GPIO_Init+0x1cc>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1d6>
 8000efc:	2307      	movs	r3, #7
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1d6>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1d6>
 8000f04:	2300      	movs	r3, #0
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f16:	4937      	ldr	r1, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x2c4>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f48:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f aeaf 	bne.w	8000d40 <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e001      	b.n	8001026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001050:	e002      	b.n	8001058 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40007000 	.word	0x40007000

08001084 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_PWREx_GetVoltageRange+0x18>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40007000 	.word	0x40007000

080010a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ae:	d130      	bne.n	8001112 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010bc:	d038      	beq.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2232      	movs	r2, #50	; 0x32
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	0c9b      	lsrs	r3, r3, #18
 80010e0:	3301      	adds	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e4:	e002      	b.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f8:	d102      	bne.n	8001100 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f2      	bne.n	80010e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110c:	d110      	bne.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e00f      	b.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800111a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111e:	d007      	beq.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001128:	4a05      	ldr	r2, [pc, #20]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40007000 	.word	0x40007000
 8001144:	20000000 	.word	0x20000000
 8001148:	431bde83 	.word	0x431bde83

0800114c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f000 bc02 	b.w	8001964 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001160:	4b96      	ldr	r3, [pc, #600]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800116a:	4b94      	ldr	r3, [pc, #592]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80e4 	beq.w	800134a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d007      	beq.n	8001198 <HAL_RCC_OscConfig+0x4c>
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b0c      	cmp	r3, #12
 800118c:	f040 808b 	bne.w	80012a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b01      	cmp	r3, #1
 8001194:	f040 8087 	bne.w	80012a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001198:	4b88      	ldr	r3, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_OscConfig+0x64>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e3d9      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	4b81      	ldr	r3, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <HAL_RCC_OscConfig+0x7e>
 80011c0:	4b7e      	ldr	r3, [pc, #504]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011c8:	e005      	b.n	80011d6 <HAL_RCC_OscConfig+0x8a>
 80011ca:	4b7c      	ldr	r3, [pc, #496]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80011cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d223      	bcs.n	8001222 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fd8c 	bl	8001cfc <RCC_SetFlashLatencyFromMSIRange>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e3ba      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ee:	4b73      	ldr	r3, [pc, #460]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a72      	ldr	r2, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b70      	ldr	r3, [pc, #448]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	496d      	ldr	r1, [pc, #436]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120c:	4b6b      	ldr	r3, [pc, #428]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	4968      	ldr	r1, [pc, #416]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
 8001220:	e025      	b.n	800126e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001222:	4b66      	ldr	r3, [pc, #408]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a65      	ldr	r2, [pc, #404]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b63      	ldr	r3, [pc, #396]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4960      	ldr	r1, [pc, #384]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001240:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	495b      	ldr	r1, [pc, #364]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fd4c 	bl	8001cfc <RCC_SetFlashLatencyFromMSIRange>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e37a      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800126e:	f000 fc81 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b51      	ldr	r3, [pc, #324]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	4950      	ldr	r1, [pc, #320]	; (80013c0 <HAL_RCC_OscConfig+0x274>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <HAL_RCC_OscConfig+0x278>)
 800128c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800128e:	4b4e      	ldr	r3, [pc, #312]	; (80013c8 <HAL_RCC_OscConfig+0x27c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fb60 	bl	8000958 <HAL_InitTick>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d052      	beq.n	8001348 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	e35e      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d032      	beq.n	8001314 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a42      	ldr	r2, [pc, #264]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb9d 	bl	80009f8 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c2:	f7ff fb99 	bl	80009f8 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e347      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a35      	ldr	r2, [pc, #212]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b33      	ldr	r3, [pc, #204]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4930      	ldr	r1, [pc, #192]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	492b      	ldr	r1, [pc, #172]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
 8001312:	e01a      	b.n	800134a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb6a 	bl	80009f8 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001328:	f7ff fb66 	bl	80009f8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e314      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x1dc>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d073      	beq.n	800143e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b08      	cmp	r3, #8
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x21c>
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b0c      	cmp	r3, #12
 8001360:	d10e      	bne.n	8001380 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d10b      	bne.n	8001380 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d063      	beq.n	800143c <HAL_RCC_OscConfig+0x2f0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d15f      	bne.n	800143c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e2f1      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d106      	bne.n	8001398 <HAL_RCC_OscConfig+0x24c>
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e025      	b.n	80013e4 <HAL_RCC_OscConfig+0x298>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a0:	d114      	bne.n	80013cc <HAL_RCC_OscConfig+0x280>
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a02      	ldr	r2, [pc, #8]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e013      	b.n	80013e4 <HAL_RCC_OscConfig+0x298>
 80013bc:	40021000 	.word	0x40021000
 80013c0:	08004bd8 	.word	0x08004bd8
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000004 	.word	0x20000004
 80013cc:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a9f      	ldr	r2, [pc, #636]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b9d      	ldr	r3, [pc, #628]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a9c      	ldr	r2, [pc, #624]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80013de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb04 	bl	80009f8 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f4:	f7ff fb00 	bl	80009f8 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	; 0x64
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e2ae      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001406:	4b92      	ldr	r3, [pc, #584]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x2a8>
 8001412:	e014      	b.n	800143e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff faf0 	bl	80009f8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff faec 	bl	80009f8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e29a      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142e:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x2d0>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d060      	beq.n	800150c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x310>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d119      	bne.n	800148a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d116      	bne.n	800148a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800145c:	4b7c      	ldr	r3, [pc, #496]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x328>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e277      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	4973      	ldr	r1, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001488:	e040      	b.n	800150c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d023      	beq.n	80014da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001492:	4b6f      	ldr	r3, [pc, #444]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6e      	ldr	r2, [pc, #440]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff faab 	bl	80009f8 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff faa7 	bl	80009f8 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e255      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b8:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b62      	ldr	r3, [pc, #392]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	061b      	lsls	r3, r3, #24
 80014d2:	495f      	ldr	r1, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
 80014d8:	e018      	b.n	800150c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a5c      	ldr	r2, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80014e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fa87 	bl	80009f8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fa83 	bl	80009f8 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e231      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d03c      	beq.n	8001592 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d01c      	beq.n	800155a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001520:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001526:	4a4a      	ldr	r2, [pc, #296]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001530:	f7ff fa62 	bl	80009f8 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7ff fa5e 	bl	80009f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e20c      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 800154c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ef      	beq.n	8001538 <HAL_RCC_OscConfig+0x3ec>
 8001558:	e01b      	b.n	8001592 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 800155c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001560:	4a3b      	ldr	r2, [pc, #236]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff fa45 	bl	80009f8 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fa41 	bl	80009f8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1ef      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ef      	bne.n	8001572 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 80a6 	beq.w	80016ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10d      	bne.n	80015cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6593      	str	r3, [r2, #88]	; 0x58
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c8:	2301      	movs	r3, #1
 80015ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_OscConfig+0x508>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d118      	bne.n	800160a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_RCC_OscConfig+0x508>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_RCC_OscConfig+0x508>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa08 	bl	80009f8 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ec:	f7ff fa04 	bl	80009f8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1b2      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_RCC_OscConfig+0x508>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d108      	bne.n	8001624 <HAL_RCC_OscConfig+0x4d8>
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001622:	e029      	b.n	8001678 <HAL_RCC_OscConfig+0x52c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d115      	bne.n	8001658 <HAL_RCC_OscConfig+0x50c>
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001642:	4a03      	ldr	r2, [pc, #12]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164c:	e014      	b.n	8001678 <HAL_RCC_OscConfig+0x52c>
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40007000 	.word	0x40007000
 8001658:	4b9a      	ldr	r3, [pc, #616]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	4a99      	ldr	r2, [pc, #612]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001668:	4b96      	ldr	r3, [pc, #600]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166e:	4a95      	ldr	r2, [pc, #596]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d016      	beq.n	80016ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff f9ba 	bl	80009f8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff f9b6 	bl	80009f8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e162      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169e:	4b89      	ldr	r3, [pc, #548]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ed      	beq.n	8001688 <HAL_RCC_OscConfig+0x53c>
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff f9a3 	bl	80009f8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f99f 	bl	80009f8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e14b      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016cc:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ed      	bne.n	80016b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03c      	beq.n	8001772 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01c      	beq.n	800173a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001706:	4a6f      	ldr	r2, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff f972 	bl	80009f8 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001718:	f7ff f96e 	bl	80009f8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e11c      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800172a:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800172c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ef      	beq.n	8001718 <HAL_RCC_OscConfig+0x5cc>
 8001738:	e01b      	b.n	8001772 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800173a:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800173c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001740:	4a60      	ldr	r2, [pc, #384]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff f955 	bl	80009f8 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001752:	f7ff f951 	bl	80009f8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0ff      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001764:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ef      	bne.n	8001752 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80f3 	beq.w	8001962 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	2b02      	cmp	r3, #2
 8001782:	f040 80c9 	bne.w	8001918 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001786:	4b4f      	ldr	r3, [pc, #316]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0203 	and.w	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	429a      	cmp	r2, r3
 8001798:	d12c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	3b01      	subs	r3, #1
 80017a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d123      	bne.n	80017f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d11b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d113      	bne.n	80017f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	3b01      	subs	r3, #1
 80017da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d109      	bne.n	80017f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	3b01      	subs	r3, #1
 80017ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d06b      	beq.n	80018cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d062      	beq.n	80018c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0ac      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001814:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001816:	f7ff f8ef 	bl	80009f8 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff f8eb 	bl	80009f8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e099      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_RCC_OscConfig+0x77c>)
 8001842:	4013      	ands	r3, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800184c:	3a01      	subs	r2, #1
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001856:	0212      	lsls	r2, r2, #8
 8001858:	4311      	orrs	r1, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800185e:	0852      	lsrs	r2, r2, #1
 8001860:	3a01      	subs	r2, #1
 8001862:	0552      	lsls	r2, r2, #21
 8001864:	4311      	orrs	r1, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800186a:	0852      	lsrs	r2, r2, #1
 800186c:	3a01      	subs	r2, #1
 800186e:	0652      	lsls	r2, r2, #25
 8001870:	4311      	orrs	r1, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001876:	06d2      	lsls	r2, r2, #27
 8001878:	430a      	orrs	r2, r1
 800187a:	4912      	ldr	r1, [pc, #72]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800187c:	4313      	orrs	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 8001892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001898:	f7ff f8ae 	bl	80009f8 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff f8aa 	bl	80009f8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e058      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_RCC_OscConfig+0x778>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018be:	e050      	b.n	8001962 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e04f      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x820>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d144      	bne.n	8001962 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_RCC_OscConfig+0x820>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_RCC_OscConfig+0x820>)
 80018de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_OscConfig+0x820>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <HAL_RCC_OscConfig+0x820>)
 80018ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018f0:	f7ff f882 	bl	80009f8 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff f87e 	bl	80009f8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e02c      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_RCC_OscConfig+0x820>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x7ac>
 8001916:	e024      	b.n	8001962 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d01f      	beq.n	800195e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_RCC_OscConfig+0x820>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_RCC_OscConfig+0x820>)
 8001924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff f865 	bl	80009f8 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f861 	bl	80009f8 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x820>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_OscConfig+0x820>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4905      	ldr	r1, [pc, #20]	; (800196c <HAL_RCC_OscConfig+0x820>)
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_OscConfig+0x824>)
 8001958:	4013      	ands	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
 800195c:	e001      	b.n	8001962 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	feeefffc 	.word	0xfeeefffc

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0e7      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4970      	ldr	r1, [pc, #448]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cf      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d908      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4960      	ldr	r1, [pc, #384]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d04c      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d121      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0a6      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e09a      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2a:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e08e      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e086      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4943      	ldr	r1, [pc, #268]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a5c:	f7fe ffcc 	bl	80009f8 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7fe ffc8 	bl	80009f8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e06e      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d010      	beq.n	8001aba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d208      	bcs.n	8001aba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	492b      	ldr	r1, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d210      	bcs.n	8001aea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 0207 	bic.w	r2, r3, #7
 8001ad0:	4923      	ldr	r1, [pc, #140]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e036      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4918      	ldr	r1, [pc, #96]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4910      	ldr	r1, [pc, #64]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b28:	f000 f824 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	490b      	ldr	r1, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x1f4>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1f8>)
 8001b46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1fc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe ff03 	bl	8000958 <HAL_InitTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b56:	7afb      	ldrb	r3, [r7, #11]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08004bd8 	.word	0x08004bd8
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d121      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d11e      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bd0:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d102      	bne.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e004      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d134      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d003      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0xac>
 8001c18:	e005      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c1c:	617b      	str	r3, [r7, #20]
      break;
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c22:	617b      	str	r3, [r7, #20]
      break;
 8001c24:	e002      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	617b      	str	r3, [r7, #20]
      break;
 8001c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	3301      	adds	r3, #1
 8001c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	fb03 f202 	mul.w	r2, r3, r2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	0e5b      	lsrs	r3, r3, #25
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08004bf0 	.word	0x08004bf0
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4904      	ldr	r1, [pc, #16]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08004be8 	.word	0x08004be8

08001cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cd4:	f7ff ffda 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0adb      	lsrs	r3, r3, #11
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4904      	ldr	r1, [pc, #16]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08004be8 	.word	0x08004be8

08001cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d14:	f7ff f9b6 	bl	8001084 <HAL_PWREx_GetVoltageRange>
 8001d18:	6178      	str	r0, [r7, #20]
 8001d1a:	e014      	b.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a24      	ldr	r2, [pc, #144]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d34:	f7ff f9a6 	bl	8001084 <HAL_PWREx_GetVoltageRange>
 8001d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4c:	d10b      	bne.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d919      	bls.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2ba0      	cmp	r3, #160	; 0xa0
 8001d58:	d902      	bls.n	8001d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	e013      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	e010      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b80      	cmp	r3, #128	; 0x80
 8001d6a:	d902      	bls.n	8001d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e00a      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d102      	bne.n	8001d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d78:	2302      	movs	r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e004      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b70      	cmp	r3, #112	; 0x70
 8001d82:	d101      	bne.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 0207 	bic.w	r2, r3, #7
 8001d90:	4909      	ldr	r1, [pc, #36]	; (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dc8:	2300      	movs	r3, #0
 8001dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d031      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001de0:	d01a      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001de6:	d814      	bhi.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001df0:	d10f      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001df2:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dfe:	e00c      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f9de 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e10:	e003      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	74fb      	strb	r3, [r7, #19]
      break;
 8001e16:	e000      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10b      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	494e      	ldr	r1, [pc, #312]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e36:	e001      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 809e 	beq.w	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a3f      	ldr	r2, [pc, #252]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a39      	ldr	r2, [pc, #228]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e8c:	f7fe fdb4 	bl	80009f8 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e92:	e009      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7fe fdb0 	bl	80009f8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d902      	bls.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ef      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d15a      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01e      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d019      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ee2:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f02:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d016      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe fd70 	bl	80009f8 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fd6c 	bl	80009f8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d902      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	74fb      	strb	r3, [r7, #19]
            break;
 8001f32:	e006      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0ec      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f42:	7cfb      	ldrb	r3, [r7, #19]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f56:	4904      	ldr	r1, [pc, #16]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f5e:	e009      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f60:	7cfb      	ldrb	r3, [r7, #19]
 8001f62:	74bb      	strb	r3, [r7, #18]
 8001f64:	e006      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f74:	7c7b      	ldrb	r3, [r7, #17]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b8a      	ldr	r3, [pc, #552]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4a89      	ldr	r2, [pc, #548]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f92:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f98:	f023 0203 	bic.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4980      	ldr	r1, [pc, #512]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb4:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	f023 020c 	bic.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	4978      	ldr	r1, [pc, #480]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fd6:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fdc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	496f      	ldr	r1, [pc, #444]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	4967      	ldr	r1, [pc, #412]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800201a:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002028:	495e      	ldr	r1, [pc, #376]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	4956      	ldr	r1, [pc, #344]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	494d      	ldr	r1, [pc, #308]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d028      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4945      	ldr	r1, [pc, #276]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800209e:	d106      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a0:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a3f      	ldr	r2, [pc, #252]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020aa:	60d3      	str	r3, [r2, #12]
 80020ac:	e011      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	2101      	movs	r1, #1
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f882 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80020ce:	7cfb      	ldrb	r3, [r7, #19]
 80020d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d028      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020fc:	d106      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002108:	60d3      	str	r3, [r2, #12]
 800210a:	e011      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f853 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01c      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214a:	4916      	ldr	r1, [pc, #88]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215a:	d10c      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f830 	bl	80021c8 <RCCEx_PLLSAI1_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	4904      	ldr	r1, [pc, #16]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002198:	7cbb      	ldrb	r3, [r7, #18]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021d6:	4b74      	ldr	r3, [pc, #464]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d018      	beq.n	8002214 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021e2:	4b71      	ldr	r3, [pc, #452]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0203 	and.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d10d      	bne.n	800220e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
       ||
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021fa:	4b6b      	ldr	r3, [pc, #428]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
       ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d047      	beq.n	800229e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e044      	b.n	800229e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d018      	beq.n	800224e <RCCEx_PLLSAI1_Config+0x86>
 800221c:	2b03      	cmp	r3, #3
 800221e:	d825      	bhi.n	800226c <RCCEx_PLLSAI1_Config+0xa4>
 8002220:	2b01      	cmp	r3, #1
 8002222:	d002      	beq.n	800222a <RCCEx_PLLSAI1_Config+0x62>
 8002224:	2b02      	cmp	r3, #2
 8002226:	d009      	beq.n	800223c <RCCEx_PLLSAI1_Config+0x74>
 8002228:	e020      	b.n	800226c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800222a:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11d      	bne.n	8002272 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223a:	e01a      	b.n	8002272 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800223c:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d116      	bne.n	8002276 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224c:	e013      	b.n	8002276 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800225a:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800226a:	e006      	b.n	800227a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e004      	b.n	800227c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002272:	bf00      	nop
 8002274:	e002      	b.n	800227c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002276:	bf00      	nop
 8002278:	e000      	b.n	800227c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800227a:	bf00      	nop
    }

    if(status == HAL_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002282:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	430b      	orrs	r3, r1
 8002298:	4943      	ldr	r1, [pc, #268]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d17c      	bne.n	800239e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022a4:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b0:	f7fe fba2 	bl	80009f8 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022b6:	e009      	b.n	80022cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022b8:	f7fe fb9e 	bl	80009f8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d902      	bls.n	80022cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	73fb      	strb	r3, [r7, #15]
        break;
 80022ca:	e005      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022cc:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ef      	bne.n	80022b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d15f      	bne.n	800239e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d110      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6892      	ldr	r2, [r2, #8]
 80022f4:	0211      	lsls	r1, r2, #8
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68d2      	ldr	r2, [r2, #12]
 80022fa:	06d2      	lsls	r2, r2, #27
 80022fc:	430a      	orrs	r2, r1
 80022fe:	492a      	ldr	r1, [pc, #168]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	610b      	str	r3, [r1, #16]
 8002304:	e027      	b.n	8002356 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d112      	bne.n	8002332 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800230c:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002314:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6892      	ldr	r2, [r2, #8]
 800231c:	0211      	lsls	r1, r2, #8
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6912      	ldr	r2, [r2, #16]
 8002322:	0852      	lsrs	r2, r2, #1
 8002324:	3a01      	subs	r2, #1
 8002326:	0552      	lsls	r2, r2, #21
 8002328:	430a      	orrs	r2, r1
 800232a:	491f      	ldr	r1, [pc, #124]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	610b      	str	r3, [r1, #16]
 8002330:	e011      	b.n	8002356 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800233a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6892      	ldr	r2, [r2, #8]
 8002342:	0211      	lsls	r1, r2, #8
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6952      	ldr	r2, [r2, #20]
 8002348:	0852      	lsrs	r2, r2, #1
 800234a:	3a01      	subs	r2, #1
 800234c:	0652      	lsls	r2, r2, #25
 800234e:	430a      	orrs	r2, r1
 8002350:	4915      	ldr	r1, [pc, #84]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800235c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002360:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7fe fb49 	bl	80009f8 <HAL_GetTick>
 8002366:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002368:	e009      	b.n	800237e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800236a:	f7fe fb45 	bl	80009f8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d902      	bls.n	800237e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	73fb      	strb	r3, [r7, #15]
          break;
 800237c:	e005      	b.n	800238a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0ef      	beq.n	800236a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4903      	ldr	r1, [pc, #12]	; (80023a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239a:	4313      	orrs	r3, r2
 800239c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000

080023ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e040      	b.n	8002440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe f914 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2224      	movs	r2, #36	; 0x24
 80023d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fc00 	bl	8002bf0 <UART_SetConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e022      	b.n	8002440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fe20 	bl	8003048 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fea7 	bl	800318c <UART_CheckIdleState>
 800243e:	4603      	mov	r3, r0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800245c:	2b20      	cmp	r3, #32
 800245e:	f040 80bf 	bne.w	80025e0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_UART_Receive+0x26>
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0b7      	b.n	80025e2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_UART_Receive+0x38>
 800247c:	2302      	movs	r3, #2
 800247e:	e0b0      	b.n	80025e2 <HAL_UART_Receive+0x19a>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2222      	movs	r2, #34	; 0x22
 8002494:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800249c:	f7fe faac 	bl	80009f8 <HAL_GetTick>
 80024a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	88fa      	ldrh	r2, [r7, #6]
 80024a6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	d10e      	bne.n	80024da <HAL_UART_Receive+0x92>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d105      	bne.n	80024d0 <HAL_UART_Receive+0x88>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024ce:	e02d      	b.n	800252c <HAL_UART_Receive+0xe4>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024d8:	e028      	b.n	800252c <HAL_UART_Receive+0xe4>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <HAL_UART_Receive+0xb6>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d104      	bne.n	80024f4 <HAL_UART_Receive+0xac>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	22ff      	movs	r2, #255	; 0xff
 80024ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024f2:	e01b      	b.n	800252c <HAL_UART_Receive+0xe4>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	227f      	movs	r2, #127	; 0x7f
 80024f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024fc:	e016      	b.n	800252c <HAL_UART_Receive+0xe4>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002506:	d10d      	bne.n	8002524 <HAL_UART_Receive+0xdc>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <HAL_UART_Receive+0xd2>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	227f      	movs	r2, #127	; 0x7f
 8002514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002518:	e008      	b.n	800252c <HAL_UART_Receive+0xe4>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	223f      	movs	r2, #63	; 0x3f
 800251e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002522:	e003      	b.n	800252c <HAL_UART_Receive+0xe4>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002532:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253c:	d108      	bne.n	8002550 <HAL_UART_Receive+0x108>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d104      	bne.n	8002550 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	e003      	b.n	8002558 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002560:	e033      	b.n	80025ca <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2120      	movs	r1, #32
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fe56 	bl	800321e <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e032      	b.n	80025e2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002588:	b29a      	uxth	r2, r3
 800258a:	8a7b      	ldrh	r3, [r7, #18]
 800258c:	4013      	ands	r3, r2
 800258e:	b29a      	uxth	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	3302      	adds	r3, #2
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e00d      	b.n	80025b8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	8a7b      	ldrh	r3, [r7, #18]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4013      	ands	r3, r2
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1c5      	bne.n	8002562 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0ba      	sub	sp, #232	; 0xe8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002612:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002616:	f640 030f 	movw	r3, #2063	; 0x80f
 800261a:	4013      	ands	r3, r2
 800261c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d115      	bne.n	8002654 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00f      	beq.n	8002654 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 82a6 	beq.w	8002b96 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
      }
      return;
 8002652:	e2a0      	b.n	8002b96 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8117 	beq.w	800288c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800265e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800266a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800266e:	4b85      	ldr	r3, [pc, #532]	; (8002884 <HAL_UART_IRQHandler+0x298>)
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 810a 	beq.w	800288c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d011      	beq.n	80026a8 <HAL_UART_IRQHandler+0xbc>
 8002684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d011      	beq.n	80026d8 <HAL_UART_IRQHandler+0xec>
 80026b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2202      	movs	r2, #2
 80026c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ce:	f043 0204 	orr.w	r2, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d011      	beq.n	8002708 <HAL_UART_IRQHandler+0x11c>
 80026e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2204      	movs	r2, #4
 80026f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026fe:	f043 0202 	orr.w	r2, r3, #2
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d017      	beq.n	8002744 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002724:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2208      	movs	r2, #8
 8002732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800273a:	f043 0208 	orr.w	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_UART_IRQHandler+0x18a>
 8002750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002754:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00c      	beq.n	8002776 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 820c 	beq.w	8002b9a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00d      	beq.n	80027aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800278e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d005      	beq.n	80027ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d04f      	beq.n	800286e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fde9 	bl	80033a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	d141      	bne.n	8002866 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3308      	adds	r3, #8
 80027e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3308      	adds	r3, #8
 800280a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800280e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800281a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1d9      	bne.n	80027e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	2b00      	cmp	r3, #0
 8002834:	d013      	beq.n	800285e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_UART_IRQHandler+0x29c>)
 800283c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fa33 	bl	8000cae <HAL_DMA_Abort_IT>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d017      	beq.n	800287e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002858:	4610      	mov	r0, r2
 800285a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285c:	e00f      	b.n	800287e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9b0 	bl	8002bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002864:	e00b      	b.n	800287e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9ac 	bl	8002bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800286c:	e007      	b.n	800287e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f9a8 	bl	8002bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800287c:	e18d      	b.n	8002b9a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800287e:	bf00      	nop
    return;
 8002880:	e18b      	b.n	8002b9a <HAL_UART_IRQHandler+0x5ae>
 8002882:	bf00      	nop
 8002884:	04000120 	.word	0x04000120
 8002888:	0800346d 	.word	0x0800346d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002890:	2b01      	cmp	r3, #1
 8002892:	f040 8146 	bne.w	8002b22 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 813f 	beq.w	8002b22 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8138 	beq.w	8002b22 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2210      	movs	r2, #16
 80028b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	f040 80b4 	bne.w	8002a32 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 815f 	beq.w	8002b9e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80028e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ea:	429a      	cmp	r2, r3
 80028ec:	f080 8157 	bcs.w	8002b9e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 8085 	bne.w	8002a16 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800293a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800294e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1da      	bne.n	800290c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3308      	adds	r3, #8
 800295c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3308      	adds	r3, #8
 8002976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800297a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800297e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800298c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e1      	bne.n	8002956 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3308      	adds	r3, #8
 8002998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3308      	adds	r3, #8
 80029b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e3      	bne.n	8002992 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029de:	e853 3f00 	ldrex	r3, [r3]
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e6:	f023 0310 	bic.w	r3, r3, #16
 80029ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80029fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e4      	bne.n	80029d6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe f90e 	bl	8000c32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8d4 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a30:	e0b5      	b.n	8002b9e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80a7 	beq.w	8002ba2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a2 	beq.w	8002ba2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	e853 3f00 	ldrex	r3, [r3]
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
 8002a82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a88:	e841 2300 	strex	r3, r2, [r1]
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e4      	bne.n	8002a5e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3308      	adds	r3, #8
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ab8:	633a      	str	r2, [r7, #48]	; 0x30
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e3      	bne.n	8002a94 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0310 	bic.w	r3, r3, #16
 8002af2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e4      	bne.n	8002ade <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f85c 	bl	8002bd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b20:	e03f      	b.n	8002ba2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00e      	beq.n	8002b4c <HAL_UART_IRQHandler+0x560>
 8002b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fcd1 	bl	80034ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b4a:	e02d      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01c      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
    }
    return;
 8002b74:	e017      	b.n	8002ba6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
 8002b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fc82 	bl	8003498 <UART_EndTransmit_IT>
    return;
 8002b94:	e008      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002b96:	bf00      	nop
 8002b98:	e006      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002b9a:	bf00      	nop
 8002b9c:	e004      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002b9e:	bf00      	nop
 8002ba0:	e002      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002ba2:	bf00      	nop
 8002ba4:	e000      	b.n	8002ba8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002ba6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002ba8:	37e8      	adds	r7, #232	; 0xe8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop

08002bb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b08a      	sub	sp, #40	; 0x28
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4bb4      	ldr	r3, [pc, #720]	; (8002ef0 <UART_SetConfig+0x300>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4aa9      	ldr	r2, [pc, #676]	; (8002ef4 <UART_SetConfig+0x304>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d004      	beq.n	8002c5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4aa0      	ldr	r2, [pc, #640]	; (8002ef8 <UART_SetConfig+0x308>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d126      	bne.n	8002cc8 <UART_SetConfig+0xd8>
 8002c7a:	4ba0      	ldr	r3, [pc, #640]	; (8002efc <UART_SetConfig+0x30c>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d81b      	bhi.n	8002cc0 <UART_SetConfig+0xd0>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <UART_SetConfig+0xa0>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002ca1 	.word	0x08002ca1
 8002c94:	08002cb1 	.word	0x08002cb1
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cb9 	.word	0x08002cb9
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca6:	e080      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cae:	e07c      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb6:	e078      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cbe:	e074      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc6:	e070      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a8c      	ldr	r2, [pc, #560]	; (8002f00 <UART_SetConfig+0x310>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d138      	bne.n	8002d44 <UART_SetConfig+0x154>
 8002cd2:	4b8a      	ldr	r3, [pc, #552]	; (8002efc <UART_SetConfig+0x30c>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d82d      	bhi.n	8002d3c <UART_SetConfig+0x14c>
 8002ce0:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <UART_SetConfig+0xf8>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002d3d 	.word	0x08002d3d
 8002cf4:	08002d3d 	.word	0x08002d3d
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d3d 	.word	0x08002d3d
 8002d00:	08002d3d 	.word	0x08002d3d
 8002d04:	08002d3d 	.word	0x08002d3d
 8002d08:	08002d25 	.word	0x08002d25
 8002d0c:	08002d3d 	.word	0x08002d3d
 8002d10:	08002d3d 	.word	0x08002d3d
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d35 	.word	0x08002d35
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d22:	e042      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d24:	2302      	movs	r3, #2
 8002d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2a:	e03e      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d32:	e03a      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d34:	2308      	movs	r3, #8
 8002d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d3a:	e036      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d42:	e032      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <UART_SetConfig+0x304>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d12a      	bne.n	8002da4 <UART_SetConfig+0x1b4>
 8002d4e:	4b6b      	ldr	r3, [pc, #428]	; (8002efc <UART_SetConfig+0x30c>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d5c:	d01a      	beq.n	8002d94 <UART_SetConfig+0x1a4>
 8002d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d62:	d81b      	bhi.n	8002d9c <UART_SetConfig+0x1ac>
 8002d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d68:	d00c      	beq.n	8002d84 <UART_SetConfig+0x194>
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6e:	d815      	bhi.n	8002d9c <UART_SetConfig+0x1ac>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <UART_SetConfig+0x18c>
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d78:	d008      	beq.n	8002d8c <UART_SetConfig+0x19c>
 8002d7a:	e00f      	b.n	8002d9c <UART_SetConfig+0x1ac>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d82:	e012      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d84:	2302      	movs	r3, #2
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8a:	e00e      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d92:	e00a      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d94:	2308      	movs	r3, #8
 8002d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9a:	e006      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da2:	e002      	b.n	8002daa <UART_SetConfig+0x1ba>
 8002da4:	2310      	movs	r3, #16
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <UART_SetConfig+0x304>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d17a      	bne.n	8002eaa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d824      	bhi.n	8002e06 <UART_SetConfig+0x216>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <UART_SetConfig+0x1d4>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	08002e07 	.word	0x08002e07
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	08002e07 	.word	0x08002e07
 8002dd4:	08002df7 	.word	0x08002df7
 8002dd8:	08002e07 	.word	0x08002e07
 8002ddc:	08002e07 	.word	0x08002e07
 8002de0:	08002e07 	.word	0x08002e07
 8002de4:	08002dff 	.word	0x08002dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7fe ff5c 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002dec:	61f8      	str	r0, [r7, #28]
        break;
 8002dee:	e010      	b.n	8002e12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002df0:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <UART_SetConfig+0x314>)
 8002df2:	61fb      	str	r3, [r7, #28]
        break;
 8002df4:	e00d      	b.n	8002e12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002df6:	f7fe febd 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8002dfa:	61f8      	str	r0, [r7, #28]
        break;
 8002dfc:	e009      	b.n	8002e12 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e02:	61fb      	str	r3, [r7, #28]
        break;
 8002e04:	e005      	b.n	8002e12 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8107 	beq.w	8003028 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d305      	bcc.n	8002e36 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d903      	bls.n	8002e3e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e3c:	e0f4      	b.n	8003028 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2200      	movs	r2, #0
 8002e42:	461c      	mov	r4, r3
 8002e44:	4615      	mov	r5, r2
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	022b      	lsls	r3, r5, #8
 8002e50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e54:	0222      	lsls	r2, r4, #8
 8002e56:	68f9      	ldr	r1, [r7, #12]
 8002e58:	6849      	ldr	r1, [r1, #4]
 8002e5a:	0849      	lsrs	r1, r1, #1
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	4688      	mov	r8, r1
 8002e60:	4681      	mov	r9, r0
 8002e62:	eb12 0a08 	adds.w	sl, r2, r8
 8002e66:	eb43 0b09 	adc.w	fp, r3, r9
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e78:	4650      	mov	r0, sl
 8002e7a:	4659      	mov	r1, fp
 8002e7c:	f7fd fa08 	bl	8000290 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e8e:	d308      	bcc.n	8002ea2 <UART_SetConfig+0x2b2>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e96:	d204      	bcs.n	8002ea2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	e0c2      	b.n	8003028 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ea8:	e0be      	b.n	8003028 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb2:	d16a      	bne.n	8002f8a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d834      	bhi.n	8002f26 <UART_SetConfig+0x336>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <UART_SetConfig+0x2d4>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	08002f09 	.word	0x08002f09
 8002ecc:	08002f11 	.word	0x08002f11
 8002ed0:	08002f27 	.word	0x08002f27
 8002ed4:	08002f17 	.word	0x08002f17
 8002ed8:	08002f27 	.word	0x08002f27
 8002edc:	08002f27 	.word	0x08002f27
 8002ee0:	08002f27 	.word	0x08002f27
 8002ee4:	08002f1f 	.word	0x08002f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f7fe fedc 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002eec:	61f8      	str	r0, [r7, #28]
        break;
 8002eee:	e020      	b.n	8002f32 <UART_SetConfig+0x342>
 8002ef0:	efff69f3 	.word	0xefff69f3
 8002ef4:	40008000 	.word	0x40008000
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40004400 	.word	0x40004400
 8002f04:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7fe fee2 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002f0c:	61f8      	str	r0, [r7, #28]
        break;
 8002f0e:	e010      	b.n	8002f32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <UART_SetConfig+0x454>)
 8002f12:	61fb      	str	r3, [r7, #28]
        break;
 8002f14:	e00d      	b.n	8002f32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7fe fe2d 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8002f1a:	61f8      	str	r0, [r7, #28]
        break;
 8002f1c:	e009      	b.n	8002f32 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	61fb      	str	r3, [r7, #28]
        break;
 8002f24:	e005      	b.n	8002f32 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d077      	beq.n	8003028 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005a      	lsls	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	441a      	add	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d916      	bls.n	8002f82 <UART_SetConfig+0x392>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5a:	d212      	bcs.n	8002f82 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f023 030f 	bic.w	r3, r3, #15
 8002f64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	8afb      	ldrh	r3, [r7, #22]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	8afa      	ldrh	r2, [r7, #22]
 8002f7e:	60da      	str	r2, [r3, #12]
 8002f80:	e052      	b.n	8003028 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f88:	e04e      	b.n	8003028 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d827      	bhi.n	8002fe2 <UART_SetConfig+0x3f2>
 8002f92:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <UART_SetConfig+0x3a8>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08002fc5 	.word	0x08002fc5
 8002fa0:	08002fcd 	.word	0x08002fcd
 8002fa4:	08002fe3 	.word	0x08002fe3
 8002fa8:	08002fd3 	.word	0x08002fd3
 8002fac:	08002fe3 	.word	0x08002fe3
 8002fb0:	08002fe3 	.word	0x08002fe3
 8002fb4:	08002fe3 	.word	0x08002fe3
 8002fb8:	08002fdb 	.word	0x08002fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f7fe fe72 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	61f8      	str	r0, [r7, #28]
        break;
 8002fc2:	e014      	b.n	8002fee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fc4:	f7fe fe84 	bl	8001cd0 <HAL_RCC_GetPCLK2Freq>
 8002fc8:	61f8      	str	r0, [r7, #28]
        break;
 8002fca:	e010      	b.n	8002fee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <UART_SetConfig+0x454>)
 8002fce:	61fb      	str	r3, [r7, #28]
        break;
 8002fd0:	e00d      	b.n	8002fee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fd2:	f7fe fdcf 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8002fd6:	61f8      	str	r0, [r7, #28]
        break;
 8002fd8:	e009      	b.n	8002fee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	61fb      	str	r3, [r7, #28]
        break;
 8002fe0:	e005      	b.n	8002fee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fec:	bf00      	nop
    }

    if (pclk != 0U)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d019      	beq.n	8003028 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	085a      	lsrs	r2, r3, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	441a      	add	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d909      	bls.n	8003022 <UART_SetConfig+0x432>
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003014:	d205      	bcs.n	8003022 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e002      	b.n	8003028 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003034:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003038:	4618      	mov	r0, r3
 800303a:	3728      	adds	r7, #40	; 0x28
 800303c:	46bd      	mov	sp, r7
 800303e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003042:	bf00      	nop
 8003044:	00f42400 	.word	0x00f42400

08003048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01a      	beq.n	800315e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003146:	d10a      	bne.n	800315e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af02      	add	r7, sp, #8
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800319c:	f7fd fc2c 	bl	80009f8 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d10e      	bne.n	80031ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f82d 	bl	800321e <UART_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e023      	b.n	8003216 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d10e      	bne.n	80031fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f817 	bl	800321e <UART_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e00d      	b.n	8003216 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b09c      	sub	sp, #112	; 0x70
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322e:	e0a5      	b.n	800337c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	f000 80a1 	beq.w	800337c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fd fbdd 	bl	80009f8 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <UART_WaitOnFlagUntilTimeout+0x32>
 800324a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13e      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003258:	e853 3f00 	ldrex	r3, [r3]
 800325c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800325e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003264:	667b      	str	r3, [r7, #100]	; 0x64
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800326e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003270:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003276:	e841 2300 	strex	r3, r2, [r1]
 800327a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800327c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e6      	bne.n	8003250 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3308      	adds	r3, #8
 8003288:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	663b      	str	r3, [r7, #96]	; 0x60
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3308      	adds	r3, #8
 80032a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e5      	bne.n	8003282 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e067      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d04f      	beq.n	800337c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d147      	bne.n	800337c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800330a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	637b      	str	r3, [r7, #52]	; 0x34
 8003316:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800331a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e6      	bne.n	80032f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3308      	adds	r3, #8
 800332e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	613b      	str	r3, [r7, #16]
   return(result);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3308      	adds	r3, #8
 8003346:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003348:	623a      	str	r2, [r7, #32]
 800334a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	69f9      	ldr	r1, [r7, #28]
 800334e:	6a3a      	ldr	r2, [r7, #32]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	61bb      	str	r3, [r7, #24]
   return(result);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e010      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	429a      	cmp	r2, r3
 8003398:	f43f af4a 	beq.w	8003230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3770      	adds	r7, #112	; 0x70
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b095      	sub	sp, #84	; 0x54
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	643b      	str	r3, [r7, #64]	; 0x40
 80033ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e6      	bne.n	80033ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	2b01      	cmp	r3, #1
 800341a:	d118      	bne.n	800344e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	60bb      	str	r3, [r7, #8]
   return(result);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f023 0310 	bic.w	r3, r3, #16
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6979      	ldr	r1, [r7, #20]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	613b      	str	r3, [r7, #16]
   return(result);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e6      	bne.n	800341c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003460:	bf00      	nop
 8003462:	3754      	adds	r7, #84	; 0x54
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff fb9a 	bl	8002bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6979      	ldr	r1, [r7, #20]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	613b      	str	r3, [r7, #16]
   return(result);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e6      	bne.n	80034a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fb66 	bl	8002bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e4:	bf00      	nop
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <APPLICATION>:
uint8_t button_state;



void APPLICATION()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
    clear_buffer();
 8003504:	f000 f808 	bl	8003518 <clear_buffer>
	data_receive();
 8003508:	f000 fa70 	bl	80039ec <data_receive>
	extract_data();
 800350c:	f000 f810 	bl	8003530 <extract_data>
	pin_config();
 8003510:	f000 f85e 	bl	80035d0 <pin_config>

}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}

08003518 <clear_buffer>:

void clear_buffer()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	memset(buffer,0,sizeof (buffer));
 800351c:	2214      	movs	r2, #20
 800351e:	2100      	movs	r1, #0
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <clear_buffer+0x14>)
 8003522:	f000 fabf 	bl	8003aa4 <memset>
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	2000009c 	.word	0x2000009c

08003530 <extract_data>:

void extract_data()
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
	token = strtok(buffer, ",");
 8003534:	4920      	ldr	r1, [pc, #128]	; (80035b8 <extract_data+0x88>)
 8003536:	4821      	ldr	r0, [pc, #132]	; (80035bc <extract_data+0x8c>)
 8003538:	f000 fad0 	bl	8003adc <strtok>
 800353c:	4603      	mov	r3, r0
 800353e:	4a20      	ldr	r2, [pc, #128]	; (80035c0 <extract_data+0x90>)
 8003540:	6013      	str	r3, [r2, #0]
		     if (token != NULL)
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <extract_data+0x90>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <extract_data+0x3c>
		     {
		         strncpy(arr1, token, sizeof(arr1) - 1);
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <extract_data+0x90>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2213      	movs	r2, #19
 8003550:	4619      	mov	r1, r3
 8003552:	481c      	ldr	r0, [pc, #112]	; (80035c4 <extract_data+0x94>)
 8003554:	f000 faae 	bl	8003ab4 <strncpy>
		         arr1[sizeof(arr1) - 1] = '\0'; // Ensure null-termination
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <extract_data+0x94>)
 800355a:	2200      	movs	r2, #0
 800355c:	74da      	strb	r2, [r3, #19]
		         token = strtok(NULL, ",");
 800355e:	4916      	ldr	r1, [pc, #88]	; (80035b8 <extract_data+0x88>)
 8003560:	2000      	movs	r0, #0
 8003562:	f000 fabb 	bl	8003adc <strtok>
 8003566:	4603      	mov	r3, r0
 8003568:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <extract_data+0x90>)
 800356a:	6013      	str	r3, [r2, #0]
		     }

		     // Get the second token and store it in arr2
		     if (token != NULL)
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <extract_data+0x90>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <extract_data+0x66>
		     {
		         strncpy(arr2, token, sizeof(arr2) - 1);
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <extract_data+0x90>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2213      	movs	r2, #19
 800357a:	4619      	mov	r1, r3
 800357c:	4812      	ldr	r0, [pc, #72]	; (80035c8 <extract_data+0x98>)
 800357e:	f000 fa99 	bl	8003ab4 <strncpy>
		         arr2[sizeof(arr2) - 1] = '\0'; // Ensure null-termination
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <extract_data+0x98>)
 8003584:	2200      	movs	r2, #0
 8003586:	74da      	strb	r2, [r3, #19]
		         token = strtok(NULL, ",");
 8003588:	490b      	ldr	r1, [pc, #44]	; (80035b8 <extract_data+0x88>)
 800358a:	2000      	movs	r0, #0
 800358c:	f000 faa6 	bl	8003adc <strtok>
 8003590:	4603      	mov	r3, r0
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <extract_data+0x90>)
 8003594:	6013      	str	r3, [r2, #0]
		     }

		     // Get the third token and store it in arr3
		     if (token != NULL)
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <extract_data+0x90>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <extract_data+0x82>
		     {
		         strncpy(arr3, token, sizeof(arr3) - 1);
 800359e:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <extract_data+0x90>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2213      	movs	r2, #19
 80035a4:	4619      	mov	r1, r3
 80035a6:	4809      	ldr	r0, [pc, #36]	; (80035cc <extract_data+0x9c>)
 80035a8:	f000 fa84 	bl	8003ab4 <strncpy>
		         arr3[sizeof(arr3) - 1] = '\0'; // Ensure null-termination
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <extract_data+0x9c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	74da      	strb	r2, [r3, #19]
		     }
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08004ba0 	.word	0x08004ba0
 80035bc:	2000009c 	.word	0x2000009c
 80035c0:	200000d8 	.word	0x200000d8
 80035c4:	200000b0 	.word	0x200000b0
 80035c8:	200000c4 	.word	0x200000c4
 80035cc:	200000dc 	.word	0x200000dc

080035d0 <pin_config>:


void pin_config()
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0

	            if(strcmp(arr1,"GPIO1")==0)
 80035d4:	493a      	ldr	r1, [pc, #232]	; (80036c0 <pin_config+0xf0>)
 80035d6:	483b      	ldr	r0, [pc, #236]	; (80036c4 <pin_config+0xf4>)
 80035d8:	f7fc fdfa 	bl	80001d0 <strcmp>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <pin_config+0x1a>
			     {
			       switch_val=1;
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <pin_config+0xf8>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e01f      	b.n	800362a <pin_config+0x5a>
			     }
	            else if(strcmp(arr1,"GPIO2")==0)
 80035ea:	4938      	ldr	r1, [pc, #224]	; (80036cc <pin_config+0xfc>)
 80035ec:	4835      	ldr	r0, [pc, #212]	; (80036c4 <pin_config+0xf4>)
 80035ee:	f7fc fdef 	bl	80001d0 <strcmp>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d103      	bne.n	8003600 <pin_config+0x30>
				 {
				   switch_val=2;
 80035f8:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <pin_config+0xf8>)
 80035fa:	2202      	movs	r2, #2
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e014      	b.n	800362a <pin_config+0x5a>
				 }
	            else if(strcmp(arr1,"GPIO3")==0)
 8003600:	4933      	ldr	r1, [pc, #204]	; (80036d0 <pin_config+0x100>)
 8003602:	4830      	ldr	r0, [pc, #192]	; (80036c4 <pin_config+0xf4>)
 8003604:	f7fc fde4 	bl	80001d0 <strcmp>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <pin_config+0x46>
	           	 {
	           		switch_val=3;
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <pin_config+0xf8>)
 8003610:	2203      	movs	r2, #3
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e009      	b.n	800362a <pin_config+0x5a>
	           	 }
	            else if(strcmp(arr1,"GPIO4")==0)
 8003616:	492f      	ldr	r1, [pc, #188]	; (80036d4 <pin_config+0x104>)
 8003618:	482a      	ldr	r0, [pc, #168]	; (80036c4 <pin_config+0xf4>)
 800361a:	f7fc fdd9 	bl	80001d0 <strcmp>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <pin_config+0x5a>
	             {
	            	switch_val=4;
 8003624:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <pin_config+0xf8>)
 8003626:	2204      	movs	r2, #4
 8003628:	601a      	str	r2, [r3, #0]
	             }


			     switch(switch_val)
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <pin_config+0xf8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d143      	bne.n	80036ba <pin_config+0xea>
			     {
			      case 1:if(strcmp(arr2,"A3")==0)
 8003632:	4929      	ldr	r1, [pc, #164]	; (80036d8 <pin_config+0x108>)
 8003634:	4829      	ldr	r0, [pc, #164]	; (80036dc <pin_config+0x10c>)
 8003636:	f7fc fdcb 	bl	80001d0 <strcmp>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d13c      	bne.n	80036ba <pin_config+0xea>
			            {
			             if(strcmp(arr3,"OUTPUT")==0)
 8003640:	4927      	ldr	r1, [pc, #156]	; (80036e0 <pin_config+0x110>)
 8003642:	4828      	ldr	r0, [pc, #160]	; (80036e4 <pin_config+0x114>)
 8003644:	f7fc fdc4 	bl	80001d0 <strcmp>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <pin_config+0x98>
						{
			              user_GPIO_Init(GPIOA,GPIO_PIN_3,OUTPUT);
 800364e:	2200      	movs	r2, #0
 8003650:	2108      	movs	r1, #8
 8003652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003656:	f000 f8dd 	bl	8003814 <user_GPIO_Init>
						  write_gpio(GPIOA,GPIO_PIN_3, PIN_SET);
 800365a:	2201      	movs	r2, #1
 800365c:	2108      	movs	r1, #8
 800365e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003662:	f000 f9e3 	bl	8003a2c <write_gpio>
					    }

					    }
			            }
			     }
}
 8003666:	e028      	b.n	80036ba <pin_config+0xea>
			              else if(strcmp(arr3,"INPUT")==0)
 8003668:	491f      	ldr	r1, [pc, #124]	; (80036e8 <pin_config+0x118>)
 800366a:	481e      	ldr	r0, [pc, #120]	; (80036e4 <pin_config+0x114>)
 800366c:	f7fc fdb0 	bl	80001d0 <strcmp>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d121      	bne.n	80036ba <pin_config+0xea>
						   user_GPIO_Init(GPIOA,GPIO_PIN_3,INPUT);
 8003676:	2201      	movs	r2, #1
 8003678:	2108      	movs	r1, #8
 800367a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800367e:	f000 f8c9 	bl	8003814 <user_GPIO_Init>
						   A=read_gpio( GPIOA,GPIO_PIN_3);
 8003682:	2108      	movs	r1, #8
 8003684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003688:	f000 f9c0 	bl	8003a0c <read_gpio>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <pin_config+0x11c>)
 8003692:	601a      	str	r2, [r3, #0]
						   if(A == 1)
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <pin_config+0x11c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d108      	bne.n	80036ae <pin_config+0xde>
						   user_output_GPIO_Init();
 800369c:	f000 f956 	bl	800394c <user_output_GPIO_Init>
						   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,PIN_SET);
 80036a0:	2201      	movs	r2, #1
 80036a2:	2180      	movs	r1, #128	; 0x80
 80036a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a8:	f7fd fcc4 	bl	8001034 <HAL_GPIO_WritePin>
}
 80036ac:	e005      	b.n	80036ba <pin_config+0xea>
						    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,PIN_RESET);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2180      	movs	r1, #128	; 0x80
 80036b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b6:	f7fd fcbd 	bl	8001034 <HAL_GPIO_WritePin>
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	08004ba4 	.word	0x08004ba4
 80036c4:	200000b0 	.word	0x200000b0
 80036c8:	20000098 	.word	0x20000098
 80036cc:	08004bac 	.word	0x08004bac
 80036d0:	08004bb4 	.word	0x08004bb4
 80036d4:	08004bbc 	.word	0x08004bbc
 80036d8:	08004bc4 	.word	0x08004bc4
 80036dc:	200000c4 	.word	0x200000c4
 80036e0:	08004bc8 	.word	0x08004bc8
 80036e4:	200000dc 	.word	0x200000dc
 80036e8:	08004bd0 	.word	0x08004bd0
 80036ec:	20000094 	.word	0x20000094

080036f0 <SystemClock_Config>:
GPIO_InitTypeDef GPIO_InitStruct = {0};


void SystemClock_Config(void)

{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b096      	sub	sp, #88	; 0x58
 80036f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	2244      	movs	r2, #68	; 0x44
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f9d0 	bl	8003aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003704:	463b      	mov	r3, r7
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003712:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003716:	f7fd fcc3 	bl	80010a0 <HAL_PWREx_ControlVoltageScaling>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003720:	f7fc ff43 	bl	80005aa <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003724:	f7fd fc9e 	bl	8001064 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <SystemClock_Config+0xc0>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <SystemClock_Config+0xc0>)
 8003730:	f023 0318 	bic.w	r3, r3, #24
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003738:	2314      	movs	r3, #20
 800373a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800373c:	2301      	movs	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003740:	2301      	movs	r3, #1
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003748:	2360      	movs	r3, #96	; 0x60
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374c:	2302      	movs	r3, #2
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003750:	2301      	movs	r3, #1
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003754:	2301      	movs	r3, #1
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003758:	2310      	movs	r3, #16
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800375c:	2307      	movs	r3, #7
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003760:	2302      	movs	r3, #2
 8003762:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003764:	2302      	movs	r3, #2
 8003766:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fced 	bl	800114c <HAL_RCC_OscConfig>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003778:	f7fc ff17 	bl	80005aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800377c:	230f      	movs	r3, #15
 800377e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003780:	2303      	movs	r3, #3
 8003782:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003790:	463b      	mov	r3, r7
 8003792:	2101      	movs	r1, #1
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe f8ed 	bl	8001974 <HAL_RCC_ClockConfig>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80037a0:	f7fc ff03 	bl	80005aa <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80037a4:	f7fe fd00 	bl	80021a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80037a8:	bf00      	nop
 80037aa:	3758      	adds	r7, #88	; 0x58
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <user_USART1_UART_Init>:

 void user_USART1_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <user_USART1_UART_Init+0x58>)
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <user_USART1_UART_Init+0x5c>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <user_USART1_UART_Init+0x58>)
 80037c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <user_USART1_UART_Init+0x58>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0f      	ldr	r3, [pc, #60]	; (800380c <user_USART1_UART_Init+0x58>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <user_USART1_UART_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <user_USART1_UART_Init+0x58>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <user_USART1_UART_Init+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <user_USART1_UART_Init+0x58>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <user_USART1_UART_Init+0x58>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <user_USART1_UART_Init+0x58>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037f6:	4805      	ldr	r0, [pc, #20]	; (800380c <user_USART1_UART_Init+0x58>)
 80037f8:	f7fe fdd8 	bl	80023ac <HAL_UART_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <user_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003802:	f7fc fed2 	bl	80005aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200000f0 	.word	0x200000f0
 8003810:	40013800 	.word	0x40013800

08003814 <user_GPIO_Init>:


 void user_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
 8003820:	4613      	mov	r3, r2
 8003822:	707b      	strb	r3, [r7, #1]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
 /* USER CODE BEGIN MX_GPIO_Init_1 */
 /* USER CODE END MX_GPIO_Init_1 */

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <user_GPIO_Init+0xb0>)
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <user_GPIO_Init+0xb0>)
 800383a:	f043 0304 	orr.w	r3, r3, #4
 800383e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003840:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <user_GPIO_Init+0xb0>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <user_GPIO_Init+0xb0>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <user_GPIO_Init+0xb0>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003858:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <user_GPIO_Init+0xb0>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]

   /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PIN_mode);
 8003864:	787a      	ldrb	r2, [r7, #1]
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fbe2 	bl	8001034 <HAL_GPIO_WritePin>

     if(PIN_mode == OUTPUT)
 8003870:	787b      	ldrb	r3, [r7, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <user_GPIO_Init+0x70>
     {
    	gpio_output(GPIOx,GPIO_Pin,PIN_mode);
 8003876:	787a      	ldrb	r2, [r7, #1]
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f823 	bl	80038c8 <gpio_output>
 8003882:	e008      	b.n	8003896 <user_GPIO_Init+0x82>
     }
     else if(PIN_mode == INPUT)
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <user_GPIO_Init+0x82>
     {
         gpio_input(GPIOx,GPIO_Pin,PIN_mode);
 800388a:	787a      	ldrb	r2, [r7, #1]
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f83b 	bl	800390c <gpio_input>
     }

     /*Configure GPIO pin : VCP_RX_Pin */
   GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389a:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a4:	2303      	movs	r3, #3
 80038a6:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80038a8:	2303      	movs	r3, #3
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4619      	mov	r1, r3
 80038b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b6:	f7fd fa3b 	bl	8000d30 <HAL_GPIO_Init>

 /* USER CODE BEGIN MX_GPIO_Init_2 */
 /* USER CODE END MX_GPIO_Init_2 */
 }
 80038ba:	bf00      	nop
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000

080038c8 <gpio_output>:

 void gpio_output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,mode PIN_mode)
 {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
 80038d4:	4613      	mov	r3, r2
 80038d6:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 PA7 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 80038e8:	887b      	ldrh	r3, [r7, #2]
 80038ea:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ec:	2301      	movs	r3, #1
 80038ee:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd fa16 	bl	8000d30 <HAL_GPIO_Init>
 }
 8003904:	bf00      	nop
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <gpio_input>:

 void gpio_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, mode PIN_mode)
 {
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	807b      	strh	r3, [r7, #2]
 8003918:	4613      	mov	r3, r2
 800391a:	707b      	strb	r3, [r7, #1]
     GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 030c 	add.w	r3, r7, #12
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]

     /* Configure GPIO pins : PA3 PA4 PA5 PA6 */
     GPIO_InitStruct.Pin = GPIO_Pin;
 800392c:	887b      	ldrh	r3, [r7, #2]
 800392e:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
     HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd f9f6 	bl	8000d30 <HAL_GPIO_Init>
 }
 8003944:	bf00      	nop
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <user_output_GPIO_Init>:

 void user_output_GPIO_Init(void)
  {
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003962:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <user_output_GPIO_Init+0x9c>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	4a20      	ldr	r2, [pc, #128]	; (80039e8 <user_output_GPIO_Init+0x9c>)
 8003968:	f043 0304 	orr.w	r3, r3, #4
 800396c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396e:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <user_output_GPIO_Init+0x9c>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <user_output_GPIO_Init+0x9c>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <user_output_GPIO_Init+0x9c>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <user_output_GPIO_Init+0x9c>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
         HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003992:	2200      	movs	r2, #0
 8003994:	21f8      	movs	r1, #248	; 0xf8
 8003996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800399a:	f7fd fb4b 	bl	8001034 <HAL_GPIO_WritePin>
                                 |GPIO_PIN_7, GPIO_PIN_RESET);


         /*Configure GPIO pins : PA3 PA4 PA5 PA6
                                  PA7 */
         GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800399e:	23f8      	movs	r3, #248	; 0xf8
 80039a0:	60fb      	str	r3, [r7, #12]
                                 |GPIO_PIN_7;
         GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a2:	2301      	movs	r3, #1
 80039a4:	613b      	str	r3, [r7, #16]
         GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	4619      	mov	r1, r3
 80039b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b8:	f7fd f9ba 	bl	8000d30 <HAL_GPIO_Init>



    /*Configure GPIO pin : VCP_RX_Pin */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80039bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2302      	movs	r3, #2
 80039c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ca:	2303      	movs	r3, #3
 80039cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80039ce:	2303      	movs	r3, #3
 80039d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	4619      	mov	r1, r3
 80039d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039dc:	f7fd f9a8 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
  }
 80039e0:	bf00      	nop
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000

080039ec <data_receive>:


 void data_receive()
 {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
 	HAL_UART_Receive(&huart1,(uint8_t *)buffer,20,500);
 80039f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80039f4:	2214      	movs	r2, #20
 80039f6:	4903      	ldr	r1, [pc, #12]	; (8003a04 <data_receive+0x18>)
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <data_receive+0x1c>)
 80039fa:	f7fe fd25 	bl	8002448 <HAL_UART_Receive>
 }
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2000009c 	.word	0x2000009c
 8003a08:	200000f0 	.word	0x200000f0

08003a0c <read_gpio>:


 myPinState read_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fd faf1 	bl	8001004 <HAL_GPIO_ReadPin>
 8003a22:	4603      	mov	r3, r0

 }
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <write_gpio>:

 void write_gpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, myPinState PinState)
 {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin,PinState);
 8003a3c:	787a      	ldrb	r2, [r7, #1]
 8003a3e:	887b      	ldrh	r3, [r7, #2]
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd faf6 	bl	8001034 <HAL_GPIO_WritePin>
 }
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <__errno>:
 8003a50:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <__errno+0x8>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	2000000c 	.word	0x2000000c

08003a5c <__libc_init_array>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	4d0d      	ldr	r5, [pc, #52]	; (8003a94 <__libc_init_array+0x38>)
 8003a60:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <__libc_init_array+0x3c>)
 8003a62:	1b64      	subs	r4, r4, r5
 8003a64:	10a4      	asrs	r4, r4, #2
 8003a66:	2600      	movs	r6, #0
 8003a68:	42a6      	cmp	r6, r4
 8003a6a:	d109      	bne.n	8003a80 <__libc_init_array+0x24>
 8003a6c:	4d0b      	ldr	r5, [pc, #44]	; (8003a9c <__libc_init_array+0x40>)
 8003a6e:	4c0c      	ldr	r4, [pc, #48]	; (8003aa0 <__libc_init_array+0x44>)
 8003a70:	f001 f88a 	bl	8004b88 <_init>
 8003a74:	1b64      	subs	r4, r4, r5
 8003a76:	10a4      	asrs	r4, r4, #2
 8003a78:	2600      	movs	r6, #0
 8003a7a:	42a6      	cmp	r6, r4
 8003a7c:	d105      	bne.n	8003a8a <__libc_init_array+0x2e>
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a84:	4798      	blx	r3
 8003a86:	3601      	adds	r6, #1
 8003a88:	e7ee      	b.n	8003a68 <__libc_init_array+0xc>
 8003a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a8e:	4798      	blx	r3
 8003a90:	3601      	adds	r6, #1
 8003a92:	e7f2      	b.n	8003a7a <__libc_init_array+0x1e>
 8003a94:	08004d70 	.word	0x08004d70
 8003a98:	08004d70 	.word	0x08004d70
 8003a9c:	08004d70 	.word	0x08004d70
 8003aa0:	08004d74 	.word	0x08004d74

08003aa4 <memset>:
 8003aa4:	4402      	add	r2, r0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d100      	bne.n	8003aae <memset+0xa>
 8003aac:	4770      	bx	lr
 8003aae:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab2:	e7f9      	b.n	8003aa8 <memset+0x4>

08003ab4 <strncpy>:
 8003ab4:	b510      	push	{r4, lr}
 8003ab6:	3901      	subs	r1, #1
 8003ab8:	4603      	mov	r3, r0
 8003aba:	b132      	cbz	r2, 8003aca <strncpy+0x16>
 8003abc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003ac0:	f803 4b01 	strb.w	r4, [r3], #1
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	2c00      	cmp	r4, #0
 8003ac8:	d1f7      	bne.n	8003aba <strncpy+0x6>
 8003aca:	441a      	add	r2, r3
 8003acc:	2100      	movs	r1, #0
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d100      	bne.n	8003ad4 <strncpy+0x20>
 8003ad2:	bd10      	pop	{r4, pc}
 8003ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad8:	e7f9      	b.n	8003ace <strncpy+0x1a>
	...

08003adc <strtok>:
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <strtok+0x5c>)
 8003ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ae0:	681e      	ldr	r6, [r3, #0]
 8003ae2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	b9fc      	cbnz	r4, 8003b28 <strtok+0x4c>
 8003ae8:	2050      	movs	r0, #80	; 0x50
 8003aea:	9101      	str	r1, [sp, #4]
 8003aec:	f000 f882 	bl	8003bf4 <malloc>
 8003af0:	9901      	ldr	r1, [sp, #4]
 8003af2:	65b0      	str	r0, [r6, #88]	; 0x58
 8003af4:	4602      	mov	r2, r0
 8003af6:	b920      	cbnz	r0, 8003b02 <strtok+0x26>
 8003af8:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <strtok+0x60>)
 8003afa:	4811      	ldr	r0, [pc, #68]	; (8003b40 <strtok+0x64>)
 8003afc:	2157      	movs	r1, #87	; 0x57
 8003afe:	f000 f849 	bl	8003b94 <__assert_func>
 8003b02:	e9c0 4400 	strd	r4, r4, [r0]
 8003b06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003b0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003b0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003b12:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003b16:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003b1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003b1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003b22:	6184      	str	r4, [r0, #24]
 8003b24:	7704      	strb	r4, [r0, #28]
 8003b26:	6244      	str	r4, [r0, #36]	; 0x24
 8003b28:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	b002      	add	sp, #8
 8003b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b34:	f000 b806 	b.w	8003b44 <__strtok_r>
 8003b38:	2000000c 	.word	0x2000000c
 8003b3c:	08004c24 	.word	0x08004c24
 8003b40:	08004c3b 	.word	0x08004c3b

08003b44 <__strtok_r>:
 8003b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b46:	b908      	cbnz	r0, 8003b4c <__strtok_r+0x8>
 8003b48:	6810      	ldr	r0, [r2, #0]
 8003b4a:	b188      	cbz	r0, 8003b70 <__strtok_r+0x2c>
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003b54:	460f      	mov	r7, r1
 8003b56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003b5a:	b91e      	cbnz	r6, 8003b64 <__strtok_r+0x20>
 8003b5c:	b965      	cbnz	r5, 8003b78 <__strtok_r+0x34>
 8003b5e:	6015      	str	r5, [r2, #0]
 8003b60:	4628      	mov	r0, r5
 8003b62:	e005      	b.n	8003b70 <__strtok_r+0x2c>
 8003b64:	42b5      	cmp	r5, r6
 8003b66:	d1f6      	bne.n	8003b56 <__strtok_r+0x12>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <__strtok_r+0xa>
 8003b6c:	6014      	str	r4, [r2, #0]
 8003b6e:	7003      	strb	r3, [r0, #0]
 8003b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b72:	461c      	mov	r4, r3
 8003b74:	e00c      	b.n	8003b90 <__strtok_r+0x4c>
 8003b76:	b915      	cbnz	r5, 8003b7e <__strtok_r+0x3a>
 8003b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b7c:	460e      	mov	r6, r1
 8003b7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003b82:	42ab      	cmp	r3, r5
 8003b84:	d1f7      	bne.n	8003b76 <__strtok_r+0x32>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f3      	beq.n	8003b72 <__strtok_r+0x2e>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003b90:	6014      	str	r4, [r2, #0]
 8003b92:	e7ed      	b.n	8003b70 <__strtok_r+0x2c>

08003b94 <__assert_func>:
 8003b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b96:	4614      	mov	r4, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <__assert_func+0x2c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	68d8      	ldr	r0, [r3, #12]
 8003ba2:	b14c      	cbz	r4, 8003bb8 <__assert_func+0x24>
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <__assert_func+0x30>)
 8003ba6:	9100      	str	r1, [sp, #0]
 8003ba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bac:	4906      	ldr	r1, [pc, #24]	; (8003bc8 <__assert_func+0x34>)
 8003bae:	462b      	mov	r3, r5
 8003bb0:	f000 f80e 	bl	8003bd0 <fiprintf>
 8003bb4:	f000 fcc4 	bl	8004540 <abort>
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <__assert_func+0x38>)
 8003bba:	461c      	mov	r4, r3
 8003bbc:	e7f3      	b.n	8003ba6 <__assert_func+0x12>
 8003bbe:	bf00      	nop
 8003bc0:	2000000c 	.word	0x2000000c
 8003bc4:	08004c98 	.word	0x08004c98
 8003bc8:	08004ca5 	.word	0x08004ca5
 8003bcc:	08004cd3 	.word	0x08004cd3

08003bd0 <fiprintf>:
 8003bd0:	b40e      	push	{r1, r2, r3}
 8003bd2:	b503      	push	{r0, r1, lr}
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	ab03      	add	r3, sp, #12
 8003bd8:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <fiprintf+0x20>)
 8003bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	f000 f919 	bl	8003e18 <_vfiprintf_r>
 8003be6:	b002      	add	sp, #8
 8003be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bec:	b003      	add	sp, #12
 8003bee:	4770      	bx	lr
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <malloc>:
 8003bf4:	4b02      	ldr	r3, [pc, #8]	; (8003c00 <malloc+0xc>)
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f000 b86f 	b.w	8003cdc <_malloc_r>
 8003bfe:	bf00      	nop
 8003c00:	2000000c 	.word	0x2000000c

08003c04 <_free_r>:
 8003c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c06:	2900      	cmp	r1, #0
 8003c08:	d044      	beq.n	8003c94 <_free_r+0x90>
 8003c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c0e:	9001      	str	r0, [sp, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f1a1 0404 	sub.w	r4, r1, #4
 8003c16:	bfb8      	it	lt
 8003c18:	18e4      	addlt	r4, r4, r3
 8003c1a:	f000 feb9 	bl	8004990 <__malloc_lock>
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <_free_r+0x94>)
 8003c20:	9801      	ldr	r0, [sp, #4]
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	b933      	cbnz	r3, 8003c34 <_free_r+0x30>
 8003c26:	6063      	str	r3, [r4, #4]
 8003c28:	6014      	str	r4, [r2, #0]
 8003c2a:	b003      	add	sp, #12
 8003c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c30:	f000 beb4 	b.w	800499c <__malloc_unlock>
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d908      	bls.n	8003c4a <_free_r+0x46>
 8003c38:	6825      	ldr	r5, [r4, #0]
 8003c3a:	1961      	adds	r1, r4, r5
 8003c3c:	428b      	cmp	r3, r1
 8003c3e:	bf01      	itttt	eq
 8003c40:	6819      	ldreq	r1, [r3, #0]
 8003c42:	685b      	ldreq	r3, [r3, #4]
 8003c44:	1949      	addeq	r1, r1, r5
 8003c46:	6021      	streq	r1, [r4, #0]
 8003c48:	e7ed      	b.n	8003c26 <_free_r+0x22>
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	b10b      	cbz	r3, 8003c54 <_free_r+0x50>
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d9fa      	bls.n	8003c4a <_free_r+0x46>
 8003c54:	6811      	ldr	r1, [r2, #0]
 8003c56:	1855      	adds	r5, r2, r1
 8003c58:	42a5      	cmp	r5, r4
 8003c5a:	d10b      	bne.n	8003c74 <_free_r+0x70>
 8003c5c:	6824      	ldr	r4, [r4, #0]
 8003c5e:	4421      	add	r1, r4
 8003c60:	1854      	adds	r4, r2, r1
 8003c62:	42a3      	cmp	r3, r4
 8003c64:	6011      	str	r1, [r2, #0]
 8003c66:	d1e0      	bne.n	8003c2a <_free_r+0x26>
 8003c68:	681c      	ldr	r4, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	6053      	str	r3, [r2, #4]
 8003c6e:	4421      	add	r1, r4
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	e7da      	b.n	8003c2a <_free_r+0x26>
 8003c74:	d902      	bls.n	8003c7c <_free_r+0x78>
 8003c76:	230c      	movs	r3, #12
 8003c78:	6003      	str	r3, [r0, #0]
 8003c7a:	e7d6      	b.n	8003c2a <_free_r+0x26>
 8003c7c:	6825      	ldr	r5, [r4, #0]
 8003c7e:	1961      	adds	r1, r4, r5
 8003c80:	428b      	cmp	r3, r1
 8003c82:	bf04      	itt	eq
 8003c84:	6819      	ldreq	r1, [r3, #0]
 8003c86:	685b      	ldreq	r3, [r3, #4]
 8003c88:	6063      	str	r3, [r4, #4]
 8003c8a:	bf04      	itt	eq
 8003c8c:	1949      	addeq	r1, r1, r5
 8003c8e:	6021      	streq	r1, [r4, #0]
 8003c90:	6054      	str	r4, [r2, #4]
 8003c92:	e7ca      	b.n	8003c2a <_free_r+0x26>
 8003c94:	b003      	add	sp, #12
 8003c96:	bd30      	pop	{r4, r5, pc}
 8003c98:	20000174 	.word	0x20000174

08003c9c <sbrk_aligned>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4e0e      	ldr	r6, [pc, #56]	; (8003cd8 <sbrk_aligned+0x3c>)
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	6831      	ldr	r1, [r6, #0]
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	b911      	cbnz	r1, 8003cae <sbrk_aligned+0x12>
 8003ca8:	f000 fb7a 	bl	80043a0 <_sbrk_r>
 8003cac:	6030      	str	r0, [r6, #0]
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 fb75 	bl	80043a0 <_sbrk_r>
 8003cb6:	1c43      	adds	r3, r0, #1
 8003cb8:	d00a      	beq.n	8003cd0 <sbrk_aligned+0x34>
 8003cba:	1cc4      	adds	r4, r0, #3
 8003cbc:	f024 0403 	bic.w	r4, r4, #3
 8003cc0:	42a0      	cmp	r0, r4
 8003cc2:	d007      	beq.n	8003cd4 <sbrk_aligned+0x38>
 8003cc4:	1a21      	subs	r1, r4, r0
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 fb6a 	bl	80043a0 <_sbrk_r>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d101      	bne.n	8003cd4 <sbrk_aligned+0x38>
 8003cd0:	f04f 34ff 	mov.w	r4, #4294967295
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	20000178 	.word	0x20000178

08003cdc <_malloc_r>:
 8003cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce0:	1ccd      	adds	r5, r1, #3
 8003ce2:	f025 0503 	bic.w	r5, r5, #3
 8003ce6:	3508      	adds	r5, #8
 8003ce8:	2d0c      	cmp	r5, #12
 8003cea:	bf38      	it	cc
 8003cec:	250c      	movcc	r5, #12
 8003cee:	2d00      	cmp	r5, #0
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	db01      	blt.n	8003cf8 <_malloc_r+0x1c>
 8003cf4:	42a9      	cmp	r1, r5
 8003cf6:	d905      	bls.n	8003d04 <_malloc_r+0x28>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	4630      	mov	r0, r6
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d04:	4e2e      	ldr	r6, [pc, #184]	; (8003dc0 <_malloc_r+0xe4>)
 8003d06:	f000 fe43 	bl	8004990 <__malloc_lock>
 8003d0a:	6833      	ldr	r3, [r6, #0]
 8003d0c:	461c      	mov	r4, r3
 8003d0e:	bb34      	cbnz	r4, 8003d5e <_malloc_r+0x82>
 8003d10:	4629      	mov	r1, r5
 8003d12:	4638      	mov	r0, r7
 8003d14:	f7ff ffc2 	bl	8003c9c <sbrk_aligned>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	d14d      	bne.n	8003dba <_malloc_r+0xde>
 8003d1e:	6834      	ldr	r4, [r6, #0]
 8003d20:	4626      	mov	r6, r4
 8003d22:	2e00      	cmp	r6, #0
 8003d24:	d140      	bne.n	8003da8 <_malloc_r+0xcc>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	4631      	mov	r1, r6
 8003d2a:	4638      	mov	r0, r7
 8003d2c:	eb04 0803 	add.w	r8, r4, r3
 8003d30:	f000 fb36 	bl	80043a0 <_sbrk_r>
 8003d34:	4580      	cmp	r8, r0
 8003d36:	d13a      	bne.n	8003dae <_malloc_r+0xd2>
 8003d38:	6821      	ldr	r1, [r4, #0]
 8003d3a:	3503      	adds	r5, #3
 8003d3c:	1a6d      	subs	r5, r5, r1
 8003d3e:	f025 0503 	bic.w	r5, r5, #3
 8003d42:	3508      	adds	r5, #8
 8003d44:	2d0c      	cmp	r5, #12
 8003d46:	bf38      	it	cc
 8003d48:	250c      	movcc	r5, #12
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f7ff ffa5 	bl	8003c9c <sbrk_aligned>
 8003d52:	3001      	adds	r0, #1
 8003d54:	d02b      	beq.n	8003dae <_malloc_r+0xd2>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	442b      	add	r3, r5
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	e00e      	b.n	8003d7c <_malloc_r+0xa0>
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	1b52      	subs	r2, r2, r5
 8003d62:	d41e      	bmi.n	8003da2 <_malloc_r+0xc6>
 8003d64:	2a0b      	cmp	r2, #11
 8003d66:	d916      	bls.n	8003d96 <_malloc_r+0xba>
 8003d68:	1961      	adds	r1, r4, r5
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	6025      	str	r5, [r4, #0]
 8003d6e:	bf18      	it	ne
 8003d70:	6059      	strne	r1, [r3, #4]
 8003d72:	6863      	ldr	r3, [r4, #4]
 8003d74:	bf08      	it	eq
 8003d76:	6031      	streq	r1, [r6, #0]
 8003d78:	5162      	str	r2, [r4, r5]
 8003d7a:	604b      	str	r3, [r1, #4]
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f104 060b 	add.w	r6, r4, #11
 8003d82:	f000 fe0b 	bl	800499c <__malloc_unlock>
 8003d86:	f026 0607 	bic.w	r6, r6, #7
 8003d8a:	1d23      	adds	r3, r4, #4
 8003d8c:	1af2      	subs	r2, r6, r3
 8003d8e:	d0b6      	beq.n	8003cfe <_malloc_r+0x22>
 8003d90:	1b9b      	subs	r3, r3, r6
 8003d92:	50a3      	str	r3, [r4, r2]
 8003d94:	e7b3      	b.n	8003cfe <_malloc_r+0x22>
 8003d96:	6862      	ldr	r2, [r4, #4]
 8003d98:	42a3      	cmp	r3, r4
 8003d9a:	bf0c      	ite	eq
 8003d9c:	6032      	streq	r2, [r6, #0]
 8003d9e:	605a      	strne	r2, [r3, #4]
 8003da0:	e7ec      	b.n	8003d7c <_malloc_r+0xa0>
 8003da2:	4623      	mov	r3, r4
 8003da4:	6864      	ldr	r4, [r4, #4]
 8003da6:	e7b2      	b.n	8003d0e <_malloc_r+0x32>
 8003da8:	4634      	mov	r4, r6
 8003daa:	6876      	ldr	r6, [r6, #4]
 8003dac:	e7b9      	b.n	8003d22 <_malloc_r+0x46>
 8003dae:	230c      	movs	r3, #12
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4638      	mov	r0, r7
 8003db4:	f000 fdf2 	bl	800499c <__malloc_unlock>
 8003db8:	e7a1      	b.n	8003cfe <_malloc_r+0x22>
 8003dba:	6025      	str	r5, [r4, #0]
 8003dbc:	e7de      	b.n	8003d7c <_malloc_r+0xa0>
 8003dbe:	bf00      	nop
 8003dc0:	20000174 	.word	0x20000174

08003dc4 <__sfputc_r>:
 8003dc4:	6893      	ldr	r3, [r2, #8]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	b410      	push	{r4}
 8003dcc:	6093      	str	r3, [r2, #8]
 8003dce:	da08      	bge.n	8003de2 <__sfputc_r+0x1e>
 8003dd0:	6994      	ldr	r4, [r2, #24]
 8003dd2:	42a3      	cmp	r3, r4
 8003dd4:	db01      	blt.n	8003dda <__sfputc_r+0x16>
 8003dd6:	290a      	cmp	r1, #10
 8003dd8:	d103      	bne.n	8003de2 <__sfputc_r+0x1e>
 8003dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dde:	f000 baef 	b.w	80043c0 <__swbuf_r>
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	1c58      	adds	r0, r3, #1
 8003de6:	6010      	str	r0, [r2, #0]
 8003de8:	7019      	strb	r1, [r3, #0]
 8003dea:	4608      	mov	r0, r1
 8003dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <__sfputs_r>:
 8003df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df4:	4606      	mov	r6, r0
 8003df6:	460f      	mov	r7, r1
 8003df8:	4614      	mov	r4, r2
 8003dfa:	18d5      	adds	r5, r2, r3
 8003dfc:	42ac      	cmp	r4, r5
 8003dfe:	d101      	bne.n	8003e04 <__sfputs_r+0x12>
 8003e00:	2000      	movs	r0, #0
 8003e02:	e007      	b.n	8003e14 <__sfputs_r+0x22>
 8003e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e08:	463a      	mov	r2, r7
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f7ff ffda 	bl	8003dc4 <__sfputc_r>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d1f3      	bne.n	8003dfc <__sfputs_r+0xa>
 8003e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e18 <_vfiprintf_r>:
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	460d      	mov	r5, r1
 8003e1e:	b09d      	sub	sp, #116	; 0x74
 8003e20:	4614      	mov	r4, r2
 8003e22:	4698      	mov	r8, r3
 8003e24:	4606      	mov	r6, r0
 8003e26:	b118      	cbz	r0, 8003e30 <_vfiprintf_r+0x18>
 8003e28:	6983      	ldr	r3, [r0, #24]
 8003e2a:	b90b      	cbnz	r3, 8003e30 <_vfiprintf_r+0x18>
 8003e2c:	f000 fcaa 	bl	8004784 <__sinit>
 8003e30:	4b89      	ldr	r3, [pc, #548]	; (8004058 <_vfiprintf_r+0x240>)
 8003e32:	429d      	cmp	r5, r3
 8003e34:	d11b      	bne.n	8003e6e <_vfiprintf_r+0x56>
 8003e36:	6875      	ldr	r5, [r6, #4]
 8003e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e3a:	07d9      	lsls	r1, r3, #31
 8003e3c:	d405      	bmi.n	8003e4a <_vfiprintf_r+0x32>
 8003e3e:	89ab      	ldrh	r3, [r5, #12]
 8003e40:	059a      	lsls	r2, r3, #22
 8003e42:	d402      	bmi.n	8003e4a <_vfiprintf_r+0x32>
 8003e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e46:	f000 fd3b 	bl	80048c0 <__retarget_lock_acquire_recursive>
 8003e4a:	89ab      	ldrh	r3, [r5, #12]
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	d501      	bpl.n	8003e54 <_vfiprintf_r+0x3c>
 8003e50:	692b      	ldr	r3, [r5, #16]
 8003e52:	b9eb      	cbnz	r3, 8003e90 <_vfiprintf_r+0x78>
 8003e54:	4629      	mov	r1, r5
 8003e56:	4630      	mov	r0, r6
 8003e58:	f000 fb04 	bl	8004464 <__swsetup_r>
 8003e5c:	b1c0      	cbz	r0, 8003e90 <_vfiprintf_r+0x78>
 8003e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e60:	07dc      	lsls	r4, r3, #31
 8003e62:	d50e      	bpl.n	8003e82 <_vfiprintf_r+0x6a>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	b01d      	add	sp, #116	; 0x74
 8003e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6e:	4b7b      	ldr	r3, [pc, #492]	; (800405c <_vfiprintf_r+0x244>)
 8003e70:	429d      	cmp	r5, r3
 8003e72:	d101      	bne.n	8003e78 <_vfiprintf_r+0x60>
 8003e74:	68b5      	ldr	r5, [r6, #8]
 8003e76:	e7df      	b.n	8003e38 <_vfiprintf_r+0x20>
 8003e78:	4b79      	ldr	r3, [pc, #484]	; (8004060 <_vfiprintf_r+0x248>)
 8003e7a:	429d      	cmp	r5, r3
 8003e7c:	bf08      	it	eq
 8003e7e:	68f5      	ldreq	r5, [r6, #12]
 8003e80:	e7da      	b.n	8003e38 <_vfiprintf_r+0x20>
 8003e82:	89ab      	ldrh	r3, [r5, #12]
 8003e84:	0598      	lsls	r0, r3, #22
 8003e86:	d4ed      	bmi.n	8003e64 <_vfiprintf_r+0x4c>
 8003e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e8a:	f000 fd1a 	bl	80048c2 <__retarget_lock_release_recursive>
 8003e8e:	e7e9      	b.n	8003e64 <_vfiprintf_r+0x4c>
 8003e90:	2300      	movs	r3, #0
 8003e92:	9309      	str	r3, [sp, #36]	; 0x24
 8003e94:	2320      	movs	r3, #32
 8003e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e9e:	2330      	movs	r3, #48	; 0x30
 8003ea0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004064 <_vfiprintf_r+0x24c>
 8003ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ea8:	f04f 0901 	mov.w	r9, #1
 8003eac:	4623      	mov	r3, r4
 8003eae:	469a      	mov	sl, r3
 8003eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eb4:	b10a      	cbz	r2, 8003eba <_vfiprintf_r+0xa2>
 8003eb6:	2a25      	cmp	r2, #37	; 0x25
 8003eb8:	d1f9      	bne.n	8003eae <_vfiprintf_r+0x96>
 8003eba:	ebba 0b04 	subs.w	fp, sl, r4
 8003ebe:	d00b      	beq.n	8003ed8 <_vfiprintf_r+0xc0>
 8003ec0:	465b      	mov	r3, fp
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f7ff ff93 	bl	8003df2 <__sfputs_r>
 8003ecc:	3001      	adds	r0, #1
 8003ece:	f000 80aa 	beq.w	8004026 <_vfiprintf_r+0x20e>
 8003ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ed4:	445a      	add	r2, fp
 8003ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80a2 	beq.w	8004026 <_vfiprintf_r+0x20e>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eec:	f10a 0a01 	add.w	sl, sl, #1
 8003ef0:	9304      	str	r3, [sp, #16]
 8003ef2:	9307      	str	r3, [sp, #28]
 8003ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8003efa:	4654      	mov	r4, sl
 8003efc:	2205      	movs	r2, #5
 8003efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f02:	4858      	ldr	r0, [pc, #352]	; (8004064 <_vfiprintf_r+0x24c>)
 8003f04:	f7fc f974 	bl	80001f0 <memchr>
 8003f08:	9a04      	ldr	r2, [sp, #16]
 8003f0a:	b9d8      	cbnz	r0, 8003f44 <_vfiprintf_r+0x12c>
 8003f0c:	06d1      	lsls	r1, r2, #27
 8003f0e:	bf44      	itt	mi
 8003f10:	2320      	movmi	r3, #32
 8003f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f16:	0713      	lsls	r3, r2, #28
 8003f18:	bf44      	itt	mi
 8003f1a:	232b      	movmi	r3, #43	; 0x2b
 8003f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f20:	f89a 3000 	ldrb.w	r3, [sl]
 8003f24:	2b2a      	cmp	r3, #42	; 0x2a
 8003f26:	d015      	beq.n	8003f54 <_vfiprintf_r+0x13c>
 8003f28:	9a07      	ldr	r2, [sp, #28]
 8003f2a:	4654      	mov	r4, sl
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f04f 0c0a 	mov.w	ip, #10
 8003f32:	4621      	mov	r1, r4
 8003f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f38:	3b30      	subs	r3, #48	; 0x30
 8003f3a:	2b09      	cmp	r3, #9
 8003f3c:	d94e      	bls.n	8003fdc <_vfiprintf_r+0x1c4>
 8003f3e:	b1b0      	cbz	r0, 8003f6e <_vfiprintf_r+0x156>
 8003f40:	9207      	str	r2, [sp, #28]
 8003f42:	e014      	b.n	8003f6e <_vfiprintf_r+0x156>
 8003f44:	eba0 0308 	sub.w	r3, r0, r8
 8003f48:	fa09 f303 	lsl.w	r3, r9, r3
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	9304      	str	r3, [sp, #16]
 8003f50:	46a2      	mov	sl, r4
 8003f52:	e7d2      	b.n	8003efa <_vfiprintf_r+0xe2>
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	1d19      	adds	r1, r3, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	9103      	str	r1, [sp, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bfbb      	ittet	lt
 8003f60:	425b      	neglt	r3, r3
 8003f62:	f042 0202 	orrlt.w	r2, r2, #2
 8003f66:	9307      	strge	r3, [sp, #28]
 8003f68:	9307      	strlt	r3, [sp, #28]
 8003f6a:	bfb8      	it	lt
 8003f6c:	9204      	strlt	r2, [sp, #16]
 8003f6e:	7823      	ldrb	r3, [r4, #0]
 8003f70:	2b2e      	cmp	r3, #46	; 0x2e
 8003f72:	d10c      	bne.n	8003f8e <_vfiprintf_r+0x176>
 8003f74:	7863      	ldrb	r3, [r4, #1]
 8003f76:	2b2a      	cmp	r3, #42	; 0x2a
 8003f78:	d135      	bne.n	8003fe6 <_vfiprintf_r+0x1ce>
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	1d1a      	adds	r2, r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	9203      	str	r2, [sp, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bfb8      	it	lt
 8003f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f8a:	3402      	adds	r4, #2
 8003f8c:	9305      	str	r3, [sp, #20]
 8003f8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004074 <_vfiprintf_r+0x25c>
 8003f92:	7821      	ldrb	r1, [r4, #0]
 8003f94:	2203      	movs	r2, #3
 8003f96:	4650      	mov	r0, sl
 8003f98:	f7fc f92a 	bl	80001f0 <memchr>
 8003f9c:	b140      	cbz	r0, 8003fb0 <_vfiprintf_r+0x198>
 8003f9e:	2340      	movs	r3, #64	; 0x40
 8003fa0:	eba0 000a 	sub.w	r0, r0, sl
 8003fa4:	fa03 f000 	lsl.w	r0, r3, r0
 8003fa8:	9b04      	ldr	r3, [sp, #16]
 8003faa:	4303      	orrs	r3, r0
 8003fac:	3401      	adds	r4, #1
 8003fae:	9304      	str	r3, [sp, #16]
 8003fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb4:	482c      	ldr	r0, [pc, #176]	; (8004068 <_vfiprintf_r+0x250>)
 8003fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fba:	2206      	movs	r2, #6
 8003fbc:	f7fc f918 	bl	80001f0 <memchr>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d03f      	beq.n	8004044 <_vfiprintf_r+0x22c>
 8003fc4:	4b29      	ldr	r3, [pc, #164]	; (800406c <_vfiprintf_r+0x254>)
 8003fc6:	bb1b      	cbnz	r3, 8004010 <_vfiprintf_r+0x1f8>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	3307      	adds	r3, #7
 8003fcc:	f023 0307 	bic.w	r3, r3, #7
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	9303      	str	r3, [sp, #12]
 8003fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd6:	443b      	add	r3, r7
 8003fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fda:	e767      	b.n	8003eac <_vfiprintf_r+0x94>
 8003fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	e7a5      	b.n	8003f32 <_vfiprintf_r+0x11a>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	3401      	adds	r4, #1
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	4619      	mov	r1, r3
 8003fee:	f04f 0c0a 	mov.w	ip, #10
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ff8:	3a30      	subs	r2, #48	; 0x30
 8003ffa:	2a09      	cmp	r2, #9
 8003ffc:	d903      	bls.n	8004006 <_vfiprintf_r+0x1ee>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0c5      	beq.n	8003f8e <_vfiprintf_r+0x176>
 8004002:	9105      	str	r1, [sp, #20]
 8004004:	e7c3      	b.n	8003f8e <_vfiprintf_r+0x176>
 8004006:	fb0c 2101 	mla	r1, ip, r1, r2
 800400a:	4604      	mov	r4, r0
 800400c:	2301      	movs	r3, #1
 800400e:	e7f0      	b.n	8003ff2 <_vfiprintf_r+0x1da>
 8004010:	ab03      	add	r3, sp, #12
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	462a      	mov	r2, r5
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <_vfiprintf_r+0x258>)
 8004018:	a904      	add	r1, sp, #16
 800401a:	4630      	mov	r0, r6
 800401c:	f3af 8000 	nop.w
 8004020:	4607      	mov	r7, r0
 8004022:	1c78      	adds	r0, r7, #1
 8004024:	d1d6      	bne.n	8003fd4 <_vfiprintf_r+0x1bc>
 8004026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004028:	07d9      	lsls	r1, r3, #31
 800402a:	d405      	bmi.n	8004038 <_vfiprintf_r+0x220>
 800402c:	89ab      	ldrh	r3, [r5, #12]
 800402e:	059a      	lsls	r2, r3, #22
 8004030:	d402      	bmi.n	8004038 <_vfiprintf_r+0x220>
 8004032:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004034:	f000 fc45 	bl	80048c2 <__retarget_lock_release_recursive>
 8004038:	89ab      	ldrh	r3, [r5, #12]
 800403a:	065b      	lsls	r3, r3, #25
 800403c:	f53f af12 	bmi.w	8003e64 <_vfiprintf_r+0x4c>
 8004040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004042:	e711      	b.n	8003e68 <_vfiprintf_r+0x50>
 8004044:	ab03      	add	r3, sp, #12
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	462a      	mov	r2, r5
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <_vfiprintf_r+0x258>)
 800404c:	a904      	add	r1, sp, #16
 800404e:	4630      	mov	r0, r6
 8004050:	f000 f880 	bl	8004154 <_printf_i>
 8004054:	e7e4      	b.n	8004020 <_vfiprintf_r+0x208>
 8004056:	bf00      	nop
 8004058:	08004d28 	.word	0x08004d28
 800405c:	08004d48 	.word	0x08004d48
 8004060:	08004d08 	.word	0x08004d08
 8004064:	08004cd4 	.word	0x08004cd4
 8004068:	08004cde 	.word	0x08004cde
 800406c:	00000000 	.word	0x00000000
 8004070:	08003df3 	.word	0x08003df3
 8004074:	08004cda 	.word	0x08004cda

08004078 <_printf_common>:
 8004078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800407c:	4616      	mov	r6, r2
 800407e:	4699      	mov	r9, r3
 8004080:	688a      	ldr	r2, [r1, #8]
 8004082:	690b      	ldr	r3, [r1, #16]
 8004084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004088:	4293      	cmp	r3, r2
 800408a:	bfb8      	it	lt
 800408c:	4613      	movlt	r3, r2
 800408e:	6033      	str	r3, [r6, #0]
 8004090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004094:	4607      	mov	r7, r0
 8004096:	460c      	mov	r4, r1
 8004098:	b10a      	cbz	r2, 800409e <_printf_common+0x26>
 800409a:	3301      	adds	r3, #1
 800409c:	6033      	str	r3, [r6, #0]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	0699      	lsls	r1, r3, #26
 80040a2:	bf42      	ittt	mi
 80040a4:	6833      	ldrmi	r3, [r6, #0]
 80040a6:	3302      	addmi	r3, #2
 80040a8:	6033      	strmi	r3, [r6, #0]
 80040aa:	6825      	ldr	r5, [r4, #0]
 80040ac:	f015 0506 	ands.w	r5, r5, #6
 80040b0:	d106      	bne.n	80040c0 <_printf_common+0x48>
 80040b2:	f104 0a19 	add.w	sl, r4, #25
 80040b6:	68e3      	ldr	r3, [r4, #12]
 80040b8:	6832      	ldr	r2, [r6, #0]
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	42ab      	cmp	r3, r5
 80040be:	dc26      	bgt.n	800410e <_printf_common+0x96>
 80040c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c4:	1e13      	subs	r3, r2, #0
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	bf18      	it	ne
 80040ca:	2301      	movne	r3, #1
 80040cc:	0692      	lsls	r2, r2, #26
 80040ce:	d42b      	bmi.n	8004128 <_printf_common+0xb0>
 80040d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d4:	4649      	mov	r1, r9
 80040d6:	4638      	mov	r0, r7
 80040d8:	47c0      	blx	r8
 80040da:	3001      	adds	r0, #1
 80040dc:	d01e      	beq.n	800411c <_printf_common+0xa4>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	68e5      	ldr	r5, [r4, #12]
 80040e2:	6832      	ldr	r2, [r6, #0]
 80040e4:	f003 0306 	and.w	r3, r3, #6
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	bf08      	it	eq
 80040ec:	1aad      	subeq	r5, r5, r2
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	6922      	ldr	r2, [r4, #16]
 80040f2:	bf0c      	ite	eq
 80040f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040f8:	2500      	movne	r5, #0
 80040fa:	4293      	cmp	r3, r2
 80040fc:	bfc4      	itt	gt
 80040fe:	1a9b      	subgt	r3, r3, r2
 8004100:	18ed      	addgt	r5, r5, r3
 8004102:	2600      	movs	r6, #0
 8004104:	341a      	adds	r4, #26
 8004106:	42b5      	cmp	r5, r6
 8004108:	d11a      	bne.n	8004140 <_printf_common+0xc8>
 800410a:	2000      	movs	r0, #0
 800410c:	e008      	b.n	8004120 <_printf_common+0xa8>
 800410e:	2301      	movs	r3, #1
 8004110:	4652      	mov	r2, sl
 8004112:	4649      	mov	r1, r9
 8004114:	4638      	mov	r0, r7
 8004116:	47c0      	blx	r8
 8004118:	3001      	adds	r0, #1
 800411a:	d103      	bne.n	8004124 <_printf_common+0xac>
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	3501      	adds	r5, #1
 8004126:	e7c6      	b.n	80040b6 <_printf_common+0x3e>
 8004128:	18e1      	adds	r1, r4, r3
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	2030      	movs	r0, #48	; 0x30
 800412e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004132:	4422      	add	r2, r4
 8004134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800413c:	3302      	adds	r3, #2
 800413e:	e7c7      	b.n	80040d0 <_printf_common+0x58>
 8004140:	2301      	movs	r3, #1
 8004142:	4622      	mov	r2, r4
 8004144:	4649      	mov	r1, r9
 8004146:	4638      	mov	r0, r7
 8004148:	47c0      	blx	r8
 800414a:	3001      	adds	r0, #1
 800414c:	d0e6      	beq.n	800411c <_printf_common+0xa4>
 800414e:	3601      	adds	r6, #1
 8004150:	e7d9      	b.n	8004106 <_printf_common+0x8e>
	...

08004154 <_printf_i>:
 8004154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	7e0f      	ldrb	r7, [r1, #24]
 800415a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800415c:	2f78      	cmp	r7, #120	; 0x78
 800415e:	4691      	mov	r9, r2
 8004160:	4680      	mov	r8, r0
 8004162:	460c      	mov	r4, r1
 8004164:	469a      	mov	sl, r3
 8004166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800416a:	d807      	bhi.n	800417c <_printf_i+0x28>
 800416c:	2f62      	cmp	r7, #98	; 0x62
 800416e:	d80a      	bhi.n	8004186 <_printf_i+0x32>
 8004170:	2f00      	cmp	r7, #0
 8004172:	f000 80d8 	beq.w	8004326 <_printf_i+0x1d2>
 8004176:	2f58      	cmp	r7, #88	; 0x58
 8004178:	f000 80a3 	beq.w	80042c2 <_printf_i+0x16e>
 800417c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004184:	e03a      	b.n	80041fc <_printf_i+0xa8>
 8004186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800418a:	2b15      	cmp	r3, #21
 800418c:	d8f6      	bhi.n	800417c <_printf_i+0x28>
 800418e:	a101      	add	r1, pc, #4	; (adr r1, 8004194 <_printf_i+0x40>)
 8004190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004194:	080041ed 	.word	0x080041ed
 8004198:	08004201 	.word	0x08004201
 800419c:	0800417d 	.word	0x0800417d
 80041a0:	0800417d 	.word	0x0800417d
 80041a4:	0800417d 	.word	0x0800417d
 80041a8:	0800417d 	.word	0x0800417d
 80041ac:	08004201 	.word	0x08004201
 80041b0:	0800417d 	.word	0x0800417d
 80041b4:	0800417d 	.word	0x0800417d
 80041b8:	0800417d 	.word	0x0800417d
 80041bc:	0800417d 	.word	0x0800417d
 80041c0:	0800430d 	.word	0x0800430d
 80041c4:	08004231 	.word	0x08004231
 80041c8:	080042ef 	.word	0x080042ef
 80041cc:	0800417d 	.word	0x0800417d
 80041d0:	0800417d 	.word	0x0800417d
 80041d4:	0800432f 	.word	0x0800432f
 80041d8:	0800417d 	.word	0x0800417d
 80041dc:	08004231 	.word	0x08004231
 80041e0:	0800417d 	.word	0x0800417d
 80041e4:	0800417d 	.word	0x0800417d
 80041e8:	080042f7 	.word	0x080042f7
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	602a      	str	r2, [r5, #0]
 80041f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0a3      	b.n	8004348 <_printf_i+0x1f4>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	6829      	ldr	r1, [r5, #0]
 8004204:	0606      	lsls	r6, r0, #24
 8004206:	f101 0304 	add.w	r3, r1, #4
 800420a:	d50a      	bpl.n	8004222 <_printf_i+0xce>
 800420c:	680e      	ldr	r6, [r1, #0]
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	2e00      	cmp	r6, #0
 8004212:	da03      	bge.n	800421c <_printf_i+0xc8>
 8004214:	232d      	movs	r3, #45	; 0x2d
 8004216:	4276      	negs	r6, r6
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421c:	485e      	ldr	r0, [pc, #376]	; (8004398 <_printf_i+0x244>)
 800421e:	230a      	movs	r3, #10
 8004220:	e019      	b.n	8004256 <_printf_i+0x102>
 8004222:	680e      	ldr	r6, [r1, #0]
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	f010 0f40 	tst.w	r0, #64	; 0x40
 800422a:	bf18      	it	ne
 800422c:	b236      	sxthne	r6, r6
 800422e:	e7ef      	b.n	8004210 <_printf_i+0xbc>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	1d19      	adds	r1, r3, #4
 8004236:	6029      	str	r1, [r5, #0]
 8004238:	0601      	lsls	r1, r0, #24
 800423a:	d501      	bpl.n	8004240 <_printf_i+0xec>
 800423c:	681e      	ldr	r6, [r3, #0]
 800423e:	e002      	b.n	8004246 <_printf_i+0xf2>
 8004240:	0646      	lsls	r6, r0, #25
 8004242:	d5fb      	bpl.n	800423c <_printf_i+0xe8>
 8004244:	881e      	ldrh	r6, [r3, #0]
 8004246:	4854      	ldr	r0, [pc, #336]	; (8004398 <_printf_i+0x244>)
 8004248:	2f6f      	cmp	r7, #111	; 0x6f
 800424a:	bf0c      	ite	eq
 800424c:	2308      	moveq	r3, #8
 800424e:	230a      	movne	r3, #10
 8004250:	2100      	movs	r1, #0
 8004252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004256:	6865      	ldr	r5, [r4, #4]
 8004258:	60a5      	str	r5, [r4, #8]
 800425a:	2d00      	cmp	r5, #0
 800425c:	bfa2      	ittt	ge
 800425e:	6821      	ldrge	r1, [r4, #0]
 8004260:	f021 0104 	bicge.w	r1, r1, #4
 8004264:	6021      	strge	r1, [r4, #0]
 8004266:	b90e      	cbnz	r6, 800426c <_printf_i+0x118>
 8004268:	2d00      	cmp	r5, #0
 800426a:	d04d      	beq.n	8004308 <_printf_i+0x1b4>
 800426c:	4615      	mov	r5, r2
 800426e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004272:	fb03 6711 	mls	r7, r3, r1, r6
 8004276:	5dc7      	ldrb	r7, [r0, r7]
 8004278:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800427c:	4637      	mov	r7, r6
 800427e:	42bb      	cmp	r3, r7
 8004280:	460e      	mov	r6, r1
 8004282:	d9f4      	bls.n	800426e <_printf_i+0x11a>
 8004284:	2b08      	cmp	r3, #8
 8004286:	d10b      	bne.n	80042a0 <_printf_i+0x14c>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	07de      	lsls	r6, r3, #31
 800428c:	d508      	bpl.n	80042a0 <_printf_i+0x14c>
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	6861      	ldr	r1, [r4, #4]
 8004292:	4299      	cmp	r1, r3
 8004294:	bfde      	ittt	le
 8004296:	2330      	movle	r3, #48	; 0x30
 8004298:	f805 3c01 	strble.w	r3, [r5, #-1]
 800429c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042a0:	1b52      	subs	r2, r2, r5
 80042a2:	6122      	str	r2, [r4, #16]
 80042a4:	f8cd a000 	str.w	sl, [sp]
 80042a8:	464b      	mov	r3, r9
 80042aa:	aa03      	add	r2, sp, #12
 80042ac:	4621      	mov	r1, r4
 80042ae:	4640      	mov	r0, r8
 80042b0:	f7ff fee2 	bl	8004078 <_printf_common>
 80042b4:	3001      	adds	r0, #1
 80042b6:	d14c      	bne.n	8004352 <_printf_i+0x1fe>
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	b004      	add	sp, #16
 80042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c2:	4835      	ldr	r0, [pc, #212]	; (8004398 <_printf_i+0x244>)
 80042c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042c8:	6829      	ldr	r1, [r5, #0]
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80042d0:	6029      	str	r1, [r5, #0]
 80042d2:	061d      	lsls	r5, r3, #24
 80042d4:	d514      	bpl.n	8004300 <_printf_i+0x1ac>
 80042d6:	07df      	lsls	r7, r3, #31
 80042d8:	bf44      	itt	mi
 80042da:	f043 0320 	orrmi.w	r3, r3, #32
 80042de:	6023      	strmi	r3, [r4, #0]
 80042e0:	b91e      	cbnz	r6, 80042ea <_printf_i+0x196>
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f023 0320 	bic.w	r3, r3, #32
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	2310      	movs	r3, #16
 80042ec:	e7b0      	b.n	8004250 <_printf_i+0xfc>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	f043 0320 	orr.w	r3, r3, #32
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	2378      	movs	r3, #120	; 0x78
 80042f8:	4828      	ldr	r0, [pc, #160]	; (800439c <_printf_i+0x248>)
 80042fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042fe:	e7e3      	b.n	80042c8 <_printf_i+0x174>
 8004300:	0659      	lsls	r1, r3, #25
 8004302:	bf48      	it	mi
 8004304:	b2b6      	uxthmi	r6, r6
 8004306:	e7e6      	b.n	80042d6 <_printf_i+0x182>
 8004308:	4615      	mov	r5, r2
 800430a:	e7bb      	b.n	8004284 <_printf_i+0x130>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	6826      	ldr	r6, [r4, #0]
 8004310:	6961      	ldr	r1, [r4, #20]
 8004312:	1d18      	adds	r0, r3, #4
 8004314:	6028      	str	r0, [r5, #0]
 8004316:	0635      	lsls	r5, r6, #24
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	d501      	bpl.n	8004320 <_printf_i+0x1cc>
 800431c:	6019      	str	r1, [r3, #0]
 800431e:	e002      	b.n	8004326 <_printf_i+0x1d2>
 8004320:	0670      	lsls	r0, r6, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0x1c8>
 8004324:	8019      	strh	r1, [r3, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	4615      	mov	r5, r2
 800432c:	e7ba      	b.n	80042a4 <_printf_i+0x150>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	1d1a      	adds	r2, r3, #4
 8004332:	602a      	str	r2, [r5, #0]
 8004334:	681d      	ldr	r5, [r3, #0]
 8004336:	6862      	ldr	r2, [r4, #4]
 8004338:	2100      	movs	r1, #0
 800433a:	4628      	mov	r0, r5
 800433c:	f7fb ff58 	bl	80001f0 <memchr>
 8004340:	b108      	cbz	r0, 8004346 <_printf_i+0x1f2>
 8004342:	1b40      	subs	r0, r0, r5
 8004344:	6060      	str	r0, [r4, #4]
 8004346:	6863      	ldr	r3, [r4, #4]
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	2300      	movs	r3, #0
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004350:	e7a8      	b.n	80042a4 <_printf_i+0x150>
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	462a      	mov	r2, r5
 8004356:	4649      	mov	r1, r9
 8004358:	4640      	mov	r0, r8
 800435a:	47d0      	blx	sl
 800435c:	3001      	adds	r0, #1
 800435e:	d0ab      	beq.n	80042b8 <_printf_i+0x164>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	079b      	lsls	r3, r3, #30
 8004364:	d413      	bmi.n	800438e <_printf_i+0x23a>
 8004366:	68e0      	ldr	r0, [r4, #12]
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	4298      	cmp	r0, r3
 800436c:	bfb8      	it	lt
 800436e:	4618      	movlt	r0, r3
 8004370:	e7a4      	b.n	80042bc <_printf_i+0x168>
 8004372:	2301      	movs	r3, #1
 8004374:	4632      	mov	r2, r6
 8004376:	4649      	mov	r1, r9
 8004378:	4640      	mov	r0, r8
 800437a:	47d0      	blx	sl
 800437c:	3001      	adds	r0, #1
 800437e:	d09b      	beq.n	80042b8 <_printf_i+0x164>
 8004380:	3501      	adds	r5, #1
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	9903      	ldr	r1, [sp, #12]
 8004386:	1a5b      	subs	r3, r3, r1
 8004388:	42ab      	cmp	r3, r5
 800438a:	dcf2      	bgt.n	8004372 <_printf_i+0x21e>
 800438c:	e7eb      	b.n	8004366 <_printf_i+0x212>
 800438e:	2500      	movs	r5, #0
 8004390:	f104 0619 	add.w	r6, r4, #25
 8004394:	e7f5      	b.n	8004382 <_printf_i+0x22e>
 8004396:	bf00      	nop
 8004398:	08004ce5 	.word	0x08004ce5
 800439c:	08004cf6 	.word	0x08004cf6

080043a0 <_sbrk_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	4d06      	ldr	r5, [pc, #24]	; (80043bc <_sbrk_r+0x1c>)
 80043a4:	2300      	movs	r3, #0
 80043a6:	4604      	mov	r4, r0
 80043a8:	4608      	mov	r0, r1
 80043aa:	602b      	str	r3, [r5, #0]
 80043ac:	f7fc fa4a 	bl	8000844 <_sbrk>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_sbrk_r+0x1a>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_sbrk_r+0x1a>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000180 	.word	0x20000180

080043c0 <__swbuf_r>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	460e      	mov	r6, r1
 80043c4:	4614      	mov	r4, r2
 80043c6:	4605      	mov	r5, r0
 80043c8:	b118      	cbz	r0, 80043d2 <__swbuf_r+0x12>
 80043ca:	6983      	ldr	r3, [r0, #24]
 80043cc:	b90b      	cbnz	r3, 80043d2 <__swbuf_r+0x12>
 80043ce:	f000 f9d9 	bl	8004784 <__sinit>
 80043d2:	4b21      	ldr	r3, [pc, #132]	; (8004458 <__swbuf_r+0x98>)
 80043d4:	429c      	cmp	r4, r3
 80043d6:	d12b      	bne.n	8004430 <__swbuf_r+0x70>
 80043d8:	686c      	ldr	r4, [r5, #4]
 80043da:	69a3      	ldr	r3, [r4, #24]
 80043dc:	60a3      	str	r3, [r4, #8]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	071a      	lsls	r2, r3, #28
 80043e2:	d52f      	bpl.n	8004444 <__swbuf_r+0x84>
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	b36b      	cbz	r3, 8004444 <__swbuf_r+0x84>
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	6820      	ldr	r0, [r4, #0]
 80043ec:	1ac0      	subs	r0, r0, r3
 80043ee:	6963      	ldr	r3, [r4, #20]
 80043f0:	b2f6      	uxtb	r6, r6
 80043f2:	4283      	cmp	r3, r0
 80043f4:	4637      	mov	r7, r6
 80043f6:	dc04      	bgt.n	8004402 <__swbuf_r+0x42>
 80043f8:	4621      	mov	r1, r4
 80043fa:	4628      	mov	r0, r5
 80043fc:	f000 f92e 	bl	800465c <_fflush_r>
 8004400:	bb30      	cbnz	r0, 8004450 <__swbuf_r+0x90>
 8004402:	68a3      	ldr	r3, [r4, #8]
 8004404:	3b01      	subs	r3, #1
 8004406:	60a3      	str	r3, [r4, #8]
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	6022      	str	r2, [r4, #0]
 800440e:	701e      	strb	r6, [r3, #0]
 8004410:	6963      	ldr	r3, [r4, #20]
 8004412:	3001      	adds	r0, #1
 8004414:	4283      	cmp	r3, r0
 8004416:	d004      	beq.n	8004422 <__swbuf_r+0x62>
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	07db      	lsls	r3, r3, #31
 800441c:	d506      	bpl.n	800442c <__swbuf_r+0x6c>
 800441e:	2e0a      	cmp	r6, #10
 8004420:	d104      	bne.n	800442c <__swbuf_r+0x6c>
 8004422:	4621      	mov	r1, r4
 8004424:	4628      	mov	r0, r5
 8004426:	f000 f919 	bl	800465c <_fflush_r>
 800442a:	b988      	cbnz	r0, 8004450 <__swbuf_r+0x90>
 800442c:	4638      	mov	r0, r7
 800442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <__swbuf_r+0x9c>)
 8004432:	429c      	cmp	r4, r3
 8004434:	d101      	bne.n	800443a <__swbuf_r+0x7a>
 8004436:	68ac      	ldr	r4, [r5, #8]
 8004438:	e7cf      	b.n	80043da <__swbuf_r+0x1a>
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <__swbuf_r+0xa0>)
 800443c:	429c      	cmp	r4, r3
 800443e:	bf08      	it	eq
 8004440:	68ec      	ldreq	r4, [r5, #12]
 8004442:	e7ca      	b.n	80043da <__swbuf_r+0x1a>
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	f000 f80c 	bl	8004464 <__swsetup_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	d0cb      	beq.n	80043e8 <__swbuf_r+0x28>
 8004450:	f04f 37ff 	mov.w	r7, #4294967295
 8004454:	e7ea      	b.n	800442c <__swbuf_r+0x6c>
 8004456:	bf00      	nop
 8004458:	08004d28 	.word	0x08004d28
 800445c:	08004d48 	.word	0x08004d48
 8004460:	08004d08 	.word	0x08004d08

08004464 <__swsetup_r>:
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <__swsetup_r+0xcc>)
 8004466:	b570      	push	{r4, r5, r6, lr}
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	4606      	mov	r6, r0
 800446c:	460c      	mov	r4, r1
 800446e:	b125      	cbz	r5, 800447a <__swsetup_r+0x16>
 8004470:	69ab      	ldr	r3, [r5, #24]
 8004472:	b913      	cbnz	r3, 800447a <__swsetup_r+0x16>
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f985 	bl	8004784 <__sinit>
 800447a:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <__swsetup_r+0xd0>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d10f      	bne.n	80044a0 <__swsetup_r+0x3c>
 8004480:	686c      	ldr	r4, [r5, #4]
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004488:	0719      	lsls	r1, r3, #28
 800448a:	d42c      	bmi.n	80044e6 <__swsetup_r+0x82>
 800448c:	06dd      	lsls	r5, r3, #27
 800448e:	d411      	bmi.n	80044b4 <__swsetup_r+0x50>
 8004490:	2309      	movs	r3, #9
 8004492:	6033      	str	r3, [r6, #0]
 8004494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	e03e      	b.n	800451e <__swsetup_r+0xba>
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <__swsetup_r+0xd4>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d101      	bne.n	80044aa <__swsetup_r+0x46>
 80044a6:	68ac      	ldr	r4, [r5, #8]
 80044a8:	e7eb      	b.n	8004482 <__swsetup_r+0x1e>
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <__swsetup_r+0xd8>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	bf08      	it	eq
 80044b0:	68ec      	ldreq	r4, [r5, #12]
 80044b2:	e7e6      	b.n	8004482 <__swsetup_r+0x1e>
 80044b4:	0758      	lsls	r0, r3, #29
 80044b6:	d512      	bpl.n	80044de <__swsetup_r+0x7a>
 80044b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ba:	b141      	cbz	r1, 80044ce <__swsetup_r+0x6a>
 80044bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044c0:	4299      	cmp	r1, r3
 80044c2:	d002      	beq.n	80044ca <__swsetup_r+0x66>
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7ff fb9d 	bl	8003c04 <_free_r>
 80044ca:	2300      	movs	r3, #0
 80044cc:	6363      	str	r3, [r4, #52]	; 0x34
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	b94b      	cbnz	r3, 80044fe <__swsetup_r+0x9a>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f4:	d003      	beq.n	80044fe <__swsetup_r+0x9a>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 fa09 	bl	8004910 <__smakebuf_r>
 80044fe:	89a0      	ldrh	r0, [r4, #12]
 8004500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004504:	f010 0301 	ands.w	r3, r0, #1
 8004508:	d00a      	beq.n	8004520 <__swsetup_r+0xbc>
 800450a:	2300      	movs	r3, #0
 800450c:	60a3      	str	r3, [r4, #8]
 800450e:	6963      	ldr	r3, [r4, #20]
 8004510:	425b      	negs	r3, r3
 8004512:	61a3      	str	r3, [r4, #24]
 8004514:	6923      	ldr	r3, [r4, #16]
 8004516:	b943      	cbnz	r3, 800452a <__swsetup_r+0xc6>
 8004518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800451c:	d1ba      	bne.n	8004494 <__swsetup_r+0x30>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	0781      	lsls	r1, r0, #30
 8004522:	bf58      	it	pl
 8004524:	6963      	ldrpl	r3, [r4, #20]
 8004526:	60a3      	str	r3, [r4, #8]
 8004528:	e7f4      	b.n	8004514 <__swsetup_r+0xb0>
 800452a:	2000      	movs	r0, #0
 800452c:	e7f7      	b.n	800451e <__swsetup_r+0xba>
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c
 8004534:	08004d28 	.word	0x08004d28
 8004538:	08004d48 	.word	0x08004d48
 800453c:	08004d08 	.word	0x08004d08

08004540 <abort>:
 8004540:	b508      	push	{r3, lr}
 8004542:	2006      	movs	r0, #6
 8004544:	f000 fa58 	bl	80049f8 <raise>
 8004548:	2001      	movs	r0, #1
 800454a:	f7fc f903 	bl	8000754 <_exit>
	...

08004550 <__sflush_r>:
 8004550:	898a      	ldrh	r2, [r1, #12]
 8004552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004556:	4605      	mov	r5, r0
 8004558:	0710      	lsls	r0, r2, #28
 800455a:	460c      	mov	r4, r1
 800455c:	d458      	bmi.n	8004610 <__sflush_r+0xc0>
 800455e:	684b      	ldr	r3, [r1, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	dc05      	bgt.n	8004570 <__sflush_r+0x20>
 8004564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	dc02      	bgt.n	8004570 <__sflush_r+0x20>
 800456a:	2000      	movs	r0, #0
 800456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004572:	2e00      	cmp	r6, #0
 8004574:	d0f9      	beq.n	800456a <__sflush_r+0x1a>
 8004576:	2300      	movs	r3, #0
 8004578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800457c:	682f      	ldr	r7, [r5, #0]
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	d032      	beq.n	80045e8 <__sflush_r+0x98>
 8004582:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	075a      	lsls	r2, r3, #29
 8004588:	d505      	bpl.n	8004596 <__sflush_r+0x46>
 800458a:	6863      	ldr	r3, [r4, #4]
 800458c:	1ac0      	subs	r0, r0, r3
 800458e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004590:	b10b      	cbz	r3, 8004596 <__sflush_r+0x46>
 8004592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004594:	1ac0      	subs	r0, r0, r3
 8004596:	2300      	movs	r3, #0
 8004598:	4602      	mov	r2, r0
 800459a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800459c:	6a21      	ldr	r1, [r4, #32]
 800459e:	4628      	mov	r0, r5
 80045a0:	47b0      	blx	r6
 80045a2:	1c43      	adds	r3, r0, #1
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	d106      	bne.n	80045b6 <__sflush_r+0x66>
 80045a8:	6829      	ldr	r1, [r5, #0]
 80045aa:	291d      	cmp	r1, #29
 80045ac:	d82c      	bhi.n	8004608 <__sflush_r+0xb8>
 80045ae:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <__sflush_r+0x108>)
 80045b0:	40ca      	lsrs	r2, r1
 80045b2:	07d6      	lsls	r6, r2, #31
 80045b4:	d528      	bpl.n	8004608 <__sflush_r+0xb8>
 80045b6:	2200      	movs	r2, #0
 80045b8:	6062      	str	r2, [r4, #4]
 80045ba:	04d9      	lsls	r1, r3, #19
 80045bc:	6922      	ldr	r2, [r4, #16]
 80045be:	6022      	str	r2, [r4, #0]
 80045c0:	d504      	bpl.n	80045cc <__sflush_r+0x7c>
 80045c2:	1c42      	adds	r2, r0, #1
 80045c4:	d101      	bne.n	80045ca <__sflush_r+0x7a>
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	b903      	cbnz	r3, 80045cc <__sflush_r+0x7c>
 80045ca:	6560      	str	r0, [r4, #84]	; 0x54
 80045cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ce:	602f      	str	r7, [r5, #0]
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d0ca      	beq.n	800456a <__sflush_r+0x1a>
 80045d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d8:	4299      	cmp	r1, r3
 80045da:	d002      	beq.n	80045e2 <__sflush_r+0x92>
 80045dc:	4628      	mov	r0, r5
 80045de:	f7ff fb11 	bl	8003c04 <_free_r>
 80045e2:	2000      	movs	r0, #0
 80045e4:	6360      	str	r0, [r4, #52]	; 0x34
 80045e6:	e7c1      	b.n	800456c <__sflush_r+0x1c>
 80045e8:	6a21      	ldr	r1, [r4, #32]
 80045ea:	2301      	movs	r3, #1
 80045ec:	4628      	mov	r0, r5
 80045ee:	47b0      	blx	r6
 80045f0:	1c41      	adds	r1, r0, #1
 80045f2:	d1c7      	bne.n	8004584 <__sflush_r+0x34>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0c4      	beq.n	8004584 <__sflush_r+0x34>
 80045fa:	2b1d      	cmp	r3, #29
 80045fc:	d001      	beq.n	8004602 <__sflush_r+0xb2>
 80045fe:	2b16      	cmp	r3, #22
 8004600:	d101      	bne.n	8004606 <__sflush_r+0xb6>
 8004602:	602f      	str	r7, [r5, #0]
 8004604:	e7b1      	b.n	800456a <__sflush_r+0x1a>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	e7ad      	b.n	800456c <__sflush_r+0x1c>
 8004610:	690f      	ldr	r7, [r1, #16]
 8004612:	2f00      	cmp	r7, #0
 8004614:	d0a9      	beq.n	800456a <__sflush_r+0x1a>
 8004616:	0793      	lsls	r3, r2, #30
 8004618:	680e      	ldr	r6, [r1, #0]
 800461a:	bf08      	it	eq
 800461c:	694b      	ldreq	r3, [r1, #20]
 800461e:	600f      	str	r7, [r1, #0]
 8004620:	bf18      	it	ne
 8004622:	2300      	movne	r3, #0
 8004624:	eba6 0807 	sub.w	r8, r6, r7
 8004628:	608b      	str	r3, [r1, #8]
 800462a:	f1b8 0f00 	cmp.w	r8, #0
 800462e:	dd9c      	ble.n	800456a <__sflush_r+0x1a>
 8004630:	6a21      	ldr	r1, [r4, #32]
 8004632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004634:	4643      	mov	r3, r8
 8004636:	463a      	mov	r2, r7
 8004638:	4628      	mov	r0, r5
 800463a:	47b0      	blx	r6
 800463c:	2800      	cmp	r0, #0
 800463e:	dc06      	bgt.n	800464e <__sflush_r+0xfe>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
 800464c:	e78e      	b.n	800456c <__sflush_r+0x1c>
 800464e:	4407      	add	r7, r0
 8004650:	eba8 0800 	sub.w	r8, r8, r0
 8004654:	e7e9      	b.n	800462a <__sflush_r+0xda>
 8004656:	bf00      	nop
 8004658:	20400001 	.word	0x20400001

0800465c <_fflush_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	4605      	mov	r5, r0
 8004662:	460c      	mov	r4, r1
 8004664:	b913      	cbnz	r3, 800466c <_fflush_r+0x10>
 8004666:	2500      	movs	r5, #0
 8004668:	4628      	mov	r0, r5
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	b118      	cbz	r0, 8004676 <_fflush_r+0x1a>
 800466e:	6983      	ldr	r3, [r0, #24]
 8004670:	b90b      	cbnz	r3, 8004676 <_fflush_r+0x1a>
 8004672:	f000 f887 	bl	8004784 <__sinit>
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <_fflush_r+0x6c>)
 8004678:	429c      	cmp	r4, r3
 800467a:	d11b      	bne.n	80046b4 <_fflush_r+0x58>
 800467c:	686c      	ldr	r4, [r5, #4]
 800467e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ef      	beq.n	8004666 <_fflush_r+0xa>
 8004686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004688:	07d0      	lsls	r0, r2, #31
 800468a:	d404      	bmi.n	8004696 <_fflush_r+0x3a>
 800468c:	0599      	lsls	r1, r3, #22
 800468e:	d402      	bmi.n	8004696 <_fflush_r+0x3a>
 8004690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004692:	f000 f915 	bl	80048c0 <__retarget_lock_acquire_recursive>
 8004696:	4628      	mov	r0, r5
 8004698:	4621      	mov	r1, r4
 800469a:	f7ff ff59 	bl	8004550 <__sflush_r>
 800469e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046a0:	07da      	lsls	r2, r3, #31
 80046a2:	4605      	mov	r5, r0
 80046a4:	d4e0      	bmi.n	8004668 <_fflush_r+0xc>
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	059b      	lsls	r3, r3, #22
 80046aa:	d4dd      	bmi.n	8004668 <_fflush_r+0xc>
 80046ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ae:	f000 f908 	bl	80048c2 <__retarget_lock_release_recursive>
 80046b2:	e7d9      	b.n	8004668 <_fflush_r+0xc>
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <_fflush_r+0x70>)
 80046b6:	429c      	cmp	r4, r3
 80046b8:	d101      	bne.n	80046be <_fflush_r+0x62>
 80046ba:	68ac      	ldr	r4, [r5, #8]
 80046bc:	e7df      	b.n	800467e <_fflush_r+0x22>
 80046be:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <_fflush_r+0x74>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	bf08      	it	eq
 80046c4:	68ec      	ldreq	r4, [r5, #12]
 80046c6:	e7da      	b.n	800467e <_fflush_r+0x22>
 80046c8:	08004d28 	.word	0x08004d28
 80046cc:	08004d48 	.word	0x08004d48
 80046d0:	08004d08 	.word	0x08004d08

080046d4 <std>:
 80046d4:	2300      	movs	r3, #0
 80046d6:	b510      	push	{r4, lr}
 80046d8:	4604      	mov	r4, r0
 80046da:	e9c0 3300 	strd	r3, r3, [r0]
 80046de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046e2:	6083      	str	r3, [r0, #8]
 80046e4:	8181      	strh	r1, [r0, #12]
 80046e6:	6643      	str	r3, [r0, #100]	; 0x64
 80046e8:	81c2      	strh	r2, [r0, #14]
 80046ea:	6183      	str	r3, [r0, #24]
 80046ec:	4619      	mov	r1, r3
 80046ee:	2208      	movs	r2, #8
 80046f0:	305c      	adds	r0, #92	; 0x5c
 80046f2:	f7ff f9d7 	bl	8003aa4 <memset>
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <std+0x38>)
 80046f8:	6263      	str	r3, [r4, #36]	; 0x24
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <std+0x3c>)
 80046fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <std+0x40>)
 8004700:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004702:	4b05      	ldr	r3, [pc, #20]	; (8004718 <std+0x44>)
 8004704:	6224      	str	r4, [r4, #32]
 8004706:	6323      	str	r3, [r4, #48]	; 0x30
 8004708:	bd10      	pop	{r4, pc}
 800470a:	bf00      	nop
 800470c:	08004a31 	.word	0x08004a31
 8004710:	08004a53 	.word	0x08004a53
 8004714:	08004a8b 	.word	0x08004a8b
 8004718:	08004aaf 	.word	0x08004aaf

0800471c <_cleanup_r>:
 800471c:	4901      	ldr	r1, [pc, #4]	; (8004724 <_cleanup_r+0x8>)
 800471e:	f000 b8af 	b.w	8004880 <_fwalk_reent>
 8004722:	bf00      	nop
 8004724:	0800465d 	.word	0x0800465d

08004728 <__sfmoreglue>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	2268      	movs	r2, #104	; 0x68
 800472c:	1e4d      	subs	r5, r1, #1
 800472e:	4355      	muls	r5, r2
 8004730:	460e      	mov	r6, r1
 8004732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004736:	f7ff fad1 	bl	8003cdc <_malloc_r>
 800473a:	4604      	mov	r4, r0
 800473c:	b140      	cbz	r0, 8004750 <__sfmoreglue+0x28>
 800473e:	2100      	movs	r1, #0
 8004740:	e9c0 1600 	strd	r1, r6, [r0]
 8004744:	300c      	adds	r0, #12
 8004746:	60a0      	str	r0, [r4, #8]
 8004748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800474c:	f7ff f9aa 	bl	8003aa4 <memset>
 8004750:	4620      	mov	r0, r4
 8004752:	bd70      	pop	{r4, r5, r6, pc}

08004754 <__sfp_lock_acquire>:
 8004754:	4801      	ldr	r0, [pc, #4]	; (800475c <__sfp_lock_acquire+0x8>)
 8004756:	f000 b8b3 	b.w	80048c0 <__retarget_lock_acquire_recursive>
 800475a:	bf00      	nop
 800475c:	2000017d 	.word	0x2000017d

08004760 <__sfp_lock_release>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__sfp_lock_release+0x8>)
 8004762:	f000 b8ae 	b.w	80048c2 <__retarget_lock_release_recursive>
 8004766:	bf00      	nop
 8004768:	2000017d 	.word	0x2000017d

0800476c <__sinit_lock_acquire>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__sinit_lock_acquire+0x8>)
 800476e:	f000 b8a7 	b.w	80048c0 <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	2000017e 	.word	0x2000017e

08004778 <__sinit_lock_release>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__sinit_lock_release+0x8>)
 800477a:	f000 b8a2 	b.w	80048c2 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	2000017e 	.word	0x2000017e

08004784 <__sinit>:
 8004784:	b510      	push	{r4, lr}
 8004786:	4604      	mov	r4, r0
 8004788:	f7ff fff0 	bl	800476c <__sinit_lock_acquire>
 800478c:	69a3      	ldr	r3, [r4, #24]
 800478e:	b11b      	cbz	r3, 8004798 <__sinit+0x14>
 8004790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004794:	f7ff bff0 	b.w	8004778 <__sinit_lock_release>
 8004798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800479c:	6523      	str	r3, [r4, #80]	; 0x50
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <__sinit+0x68>)
 80047a0:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <__sinit+0x6c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80047a6:	42a3      	cmp	r3, r4
 80047a8:	bf04      	itt	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	61a3      	streq	r3, [r4, #24]
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 f820 	bl	80047f4 <__sfp>
 80047b4:	6060      	str	r0, [r4, #4]
 80047b6:	4620      	mov	r0, r4
 80047b8:	f000 f81c 	bl	80047f4 <__sfp>
 80047bc:	60a0      	str	r0, [r4, #8]
 80047be:	4620      	mov	r0, r4
 80047c0:	f000 f818 	bl	80047f4 <__sfp>
 80047c4:	2200      	movs	r2, #0
 80047c6:	60e0      	str	r0, [r4, #12]
 80047c8:	2104      	movs	r1, #4
 80047ca:	6860      	ldr	r0, [r4, #4]
 80047cc:	f7ff ff82 	bl	80046d4 <std>
 80047d0:	68a0      	ldr	r0, [r4, #8]
 80047d2:	2201      	movs	r2, #1
 80047d4:	2109      	movs	r1, #9
 80047d6:	f7ff ff7d 	bl	80046d4 <std>
 80047da:	68e0      	ldr	r0, [r4, #12]
 80047dc:	2202      	movs	r2, #2
 80047de:	2112      	movs	r1, #18
 80047e0:	f7ff ff78 	bl	80046d4 <std>
 80047e4:	2301      	movs	r3, #1
 80047e6:	61a3      	str	r3, [r4, #24]
 80047e8:	e7d2      	b.n	8004790 <__sinit+0xc>
 80047ea:	bf00      	nop
 80047ec:	08004c20 	.word	0x08004c20
 80047f0:	0800471d 	.word	0x0800471d

080047f4 <__sfp>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	4607      	mov	r7, r0
 80047f8:	f7ff ffac 	bl	8004754 <__sfp_lock_acquire>
 80047fc:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <__sfp+0x84>)
 80047fe:	681e      	ldr	r6, [r3, #0]
 8004800:	69b3      	ldr	r3, [r6, #24]
 8004802:	b913      	cbnz	r3, 800480a <__sfp+0x16>
 8004804:	4630      	mov	r0, r6
 8004806:	f7ff ffbd 	bl	8004784 <__sinit>
 800480a:	3648      	adds	r6, #72	; 0x48
 800480c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004810:	3b01      	subs	r3, #1
 8004812:	d503      	bpl.n	800481c <__sfp+0x28>
 8004814:	6833      	ldr	r3, [r6, #0]
 8004816:	b30b      	cbz	r3, 800485c <__sfp+0x68>
 8004818:	6836      	ldr	r6, [r6, #0]
 800481a:	e7f7      	b.n	800480c <__sfp+0x18>
 800481c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004820:	b9d5      	cbnz	r5, 8004858 <__sfp+0x64>
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <__sfp+0x88>)
 8004824:	60e3      	str	r3, [r4, #12]
 8004826:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800482a:	6665      	str	r5, [r4, #100]	; 0x64
 800482c:	f000 f847 	bl	80048be <__retarget_lock_init_recursive>
 8004830:	f7ff ff96 	bl	8004760 <__sfp_lock_release>
 8004834:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004838:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800483c:	6025      	str	r5, [r4, #0]
 800483e:	61a5      	str	r5, [r4, #24]
 8004840:	2208      	movs	r2, #8
 8004842:	4629      	mov	r1, r5
 8004844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004848:	f7ff f92c 	bl	8003aa4 <memset>
 800484c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004854:	4620      	mov	r0, r4
 8004856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004858:	3468      	adds	r4, #104	; 0x68
 800485a:	e7d9      	b.n	8004810 <__sfp+0x1c>
 800485c:	2104      	movs	r1, #4
 800485e:	4638      	mov	r0, r7
 8004860:	f7ff ff62 	bl	8004728 <__sfmoreglue>
 8004864:	4604      	mov	r4, r0
 8004866:	6030      	str	r0, [r6, #0]
 8004868:	2800      	cmp	r0, #0
 800486a:	d1d5      	bne.n	8004818 <__sfp+0x24>
 800486c:	f7ff ff78 	bl	8004760 <__sfp_lock_release>
 8004870:	230c      	movs	r3, #12
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	e7ee      	b.n	8004854 <__sfp+0x60>
 8004876:	bf00      	nop
 8004878:	08004c20 	.word	0x08004c20
 800487c:	ffff0001 	.word	0xffff0001

08004880 <_fwalk_reent>:
 8004880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004884:	4606      	mov	r6, r0
 8004886:	4688      	mov	r8, r1
 8004888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800488c:	2700      	movs	r7, #0
 800488e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004892:	f1b9 0901 	subs.w	r9, r9, #1
 8004896:	d505      	bpl.n	80048a4 <_fwalk_reent+0x24>
 8004898:	6824      	ldr	r4, [r4, #0]
 800489a:	2c00      	cmp	r4, #0
 800489c:	d1f7      	bne.n	800488e <_fwalk_reent+0xe>
 800489e:	4638      	mov	r0, r7
 80048a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a4:	89ab      	ldrh	r3, [r5, #12]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d907      	bls.n	80048ba <_fwalk_reent+0x3a>
 80048aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048ae:	3301      	adds	r3, #1
 80048b0:	d003      	beq.n	80048ba <_fwalk_reent+0x3a>
 80048b2:	4629      	mov	r1, r5
 80048b4:	4630      	mov	r0, r6
 80048b6:	47c0      	blx	r8
 80048b8:	4307      	orrs	r7, r0
 80048ba:	3568      	adds	r5, #104	; 0x68
 80048bc:	e7e9      	b.n	8004892 <_fwalk_reent+0x12>

080048be <__retarget_lock_init_recursive>:
 80048be:	4770      	bx	lr

080048c0 <__retarget_lock_acquire_recursive>:
 80048c0:	4770      	bx	lr

080048c2 <__retarget_lock_release_recursive>:
 80048c2:	4770      	bx	lr

080048c4 <__swhatbuf_r>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	460e      	mov	r6, r1
 80048c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048cc:	2900      	cmp	r1, #0
 80048ce:	b096      	sub	sp, #88	; 0x58
 80048d0:	4614      	mov	r4, r2
 80048d2:	461d      	mov	r5, r3
 80048d4:	da08      	bge.n	80048e8 <__swhatbuf_r+0x24>
 80048d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	602a      	str	r2, [r5, #0]
 80048de:	061a      	lsls	r2, r3, #24
 80048e0:	d410      	bmi.n	8004904 <__swhatbuf_r+0x40>
 80048e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048e6:	e00e      	b.n	8004906 <__swhatbuf_r+0x42>
 80048e8:	466a      	mov	r2, sp
 80048ea:	f000 f907 	bl	8004afc <_fstat_r>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	dbf1      	blt.n	80048d6 <__swhatbuf_r+0x12>
 80048f2:	9a01      	ldr	r2, [sp, #4]
 80048f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80048f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80048fc:	425a      	negs	r2, r3
 80048fe:	415a      	adcs	r2, r3
 8004900:	602a      	str	r2, [r5, #0]
 8004902:	e7ee      	b.n	80048e2 <__swhatbuf_r+0x1e>
 8004904:	2340      	movs	r3, #64	; 0x40
 8004906:	2000      	movs	r0, #0
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	b016      	add	sp, #88	; 0x58
 800490c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004910 <__smakebuf_r>:
 8004910:	898b      	ldrh	r3, [r1, #12]
 8004912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004914:	079d      	lsls	r5, r3, #30
 8004916:	4606      	mov	r6, r0
 8004918:	460c      	mov	r4, r1
 800491a:	d507      	bpl.n	800492c <__smakebuf_r+0x1c>
 800491c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	2301      	movs	r3, #1
 8004926:	6163      	str	r3, [r4, #20]
 8004928:	b002      	add	sp, #8
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	ab01      	add	r3, sp, #4
 800492e:	466a      	mov	r2, sp
 8004930:	f7ff ffc8 	bl	80048c4 <__swhatbuf_r>
 8004934:	9900      	ldr	r1, [sp, #0]
 8004936:	4605      	mov	r5, r0
 8004938:	4630      	mov	r0, r6
 800493a:	f7ff f9cf 	bl	8003cdc <_malloc_r>
 800493e:	b948      	cbnz	r0, 8004954 <__smakebuf_r+0x44>
 8004940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004944:	059a      	lsls	r2, r3, #22
 8004946:	d4ef      	bmi.n	8004928 <__smakebuf_r+0x18>
 8004948:	f023 0303 	bic.w	r3, r3, #3
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	81a3      	strh	r3, [r4, #12]
 8004952:	e7e3      	b.n	800491c <__smakebuf_r+0xc>
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <__smakebuf_r+0x7c>)
 8004956:	62b3      	str	r3, [r6, #40]	; 0x28
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	6020      	str	r0, [r4, #0]
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	81a3      	strh	r3, [r4, #12]
 8004962:	9b00      	ldr	r3, [sp, #0]
 8004964:	6163      	str	r3, [r4, #20]
 8004966:	9b01      	ldr	r3, [sp, #4]
 8004968:	6120      	str	r0, [r4, #16]
 800496a:	b15b      	cbz	r3, 8004984 <__smakebuf_r+0x74>
 800496c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f8d5 	bl	8004b20 <_isatty_r>
 8004976:	b128      	cbz	r0, 8004984 <__smakebuf_r+0x74>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	89a0      	ldrh	r0, [r4, #12]
 8004986:	4305      	orrs	r5, r0
 8004988:	81a5      	strh	r5, [r4, #12]
 800498a:	e7cd      	b.n	8004928 <__smakebuf_r+0x18>
 800498c:	0800471d 	.word	0x0800471d

08004990 <__malloc_lock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_lock+0x8>)
 8004992:	f7ff bf95 	b.w	80048c0 <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	2000017c 	.word	0x2000017c

0800499c <__malloc_unlock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_unlock+0x8>)
 800499e:	f7ff bf90 	b.w	80048c2 <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	2000017c 	.word	0x2000017c

080049a8 <_raise_r>:
 80049a8:	291f      	cmp	r1, #31
 80049aa:	b538      	push	{r3, r4, r5, lr}
 80049ac:	4604      	mov	r4, r0
 80049ae:	460d      	mov	r5, r1
 80049b0:	d904      	bls.n	80049bc <_raise_r+0x14>
 80049b2:	2316      	movs	r3, #22
 80049b4:	6003      	str	r3, [r0, #0]
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80049be:	b112      	cbz	r2, 80049c6 <_raise_r+0x1e>
 80049c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049c4:	b94b      	cbnz	r3, 80049da <_raise_r+0x32>
 80049c6:	4620      	mov	r0, r4
 80049c8:	f000 f830 	bl	8004a2c <_getpid_r>
 80049cc:	462a      	mov	r2, r5
 80049ce:	4601      	mov	r1, r0
 80049d0:	4620      	mov	r0, r4
 80049d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d6:	f000 b817 	b.w	8004a08 <_kill_r>
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d00a      	beq.n	80049f4 <_raise_r+0x4c>
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	d103      	bne.n	80049ea <_raise_r+0x42>
 80049e2:	2316      	movs	r3, #22
 80049e4:	6003      	str	r3, [r0, #0]
 80049e6:	2001      	movs	r0, #1
 80049e8:	e7e7      	b.n	80049ba <_raise_r+0x12>
 80049ea:	2400      	movs	r4, #0
 80049ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049f0:	4628      	mov	r0, r5
 80049f2:	4798      	blx	r3
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7e0      	b.n	80049ba <_raise_r+0x12>

080049f8 <raise>:
 80049f8:	4b02      	ldr	r3, [pc, #8]	; (8004a04 <raise+0xc>)
 80049fa:	4601      	mov	r1, r0
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f7ff bfd3 	b.w	80049a8 <_raise_r>
 8004a02:	bf00      	nop
 8004a04:	2000000c 	.word	0x2000000c

08004a08 <_kill_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d07      	ldr	r5, [pc, #28]	; (8004a28 <_kill_r+0x20>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	4611      	mov	r1, r2
 8004a14:	602b      	str	r3, [r5, #0]
 8004a16:	f7fb fe8d 	bl	8000734 <_kill>
 8004a1a:	1c43      	adds	r3, r0, #1
 8004a1c:	d102      	bne.n	8004a24 <_kill_r+0x1c>
 8004a1e:	682b      	ldr	r3, [r5, #0]
 8004a20:	b103      	cbz	r3, 8004a24 <_kill_r+0x1c>
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	bf00      	nop
 8004a28:	20000180 	.word	0x20000180

08004a2c <_getpid_r>:
 8004a2c:	f7fb be7a 	b.w	8000724 <_getpid>

08004a30 <__sread>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	460c      	mov	r4, r1
 8004a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a38:	f000 f894 	bl	8004b64 <_read_r>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	bfab      	itete	ge
 8004a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a42:	89a3      	ldrhlt	r3, [r4, #12]
 8004a44:	181b      	addge	r3, r3, r0
 8004a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a4a:	bfac      	ite	ge
 8004a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a4e:	81a3      	strhlt	r3, [r4, #12]
 8004a50:	bd10      	pop	{r4, pc}

08004a52 <__swrite>:
 8004a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a56:	461f      	mov	r7, r3
 8004a58:	898b      	ldrh	r3, [r1, #12]
 8004a5a:	05db      	lsls	r3, r3, #23
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	4616      	mov	r6, r2
 8004a62:	d505      	bpl.n	8004a70 <__swrite+0x1e>
 8004a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a68:	2302      	movs	r3, #2
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f000 f868 	bl	8004b40 <_lseek_r>
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7a:	81a3      	strh	r3, [r4, #12]
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	463b      	mov	r3, r7
 8004a80:	4628      	mov	r0, r5
 8004a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a86:	f000 b817 	b.w	8004ab8 <_write_r>

08004a8a <__sseek>:
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a92:	f000 f855 	bl	8004b40 <_lseek_r>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	bf15      	itete	ne
 8004a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aa6:	81a3      	strheq	r3, [r4, #12]
 8004aa8:	bf18      	it	ne
 8004aaa:	81a3      	strhne	r3, [r4, #12]
 8004aac:	bd10      	pop	{r4, pc}

08004aae <__sclose>:
 8004aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab2:	f000 b813 	b.w	8004adc <_close_r>
	...

08004ab8 <_write_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d07      	ldr	r5, [pc, #28]	; (8004ad8 <_write_r+0x20>)
 8004abc:	4604      	mov	r4, r0
 8004abe:	4608      	mov	r0, r1
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	602a      	str	r2, [r5, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f7fb fe6b 	bl	80007a2 <_write>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d102      	bne.n	8004ad6 <_write_r+0x1e>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	b103      	cbz	r3, 8004ad6 <_write_r+0x1e>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	20000180 	.word	0x20000180

08004adc <_close_r>:
 8004adc:	b538      	push	{r3, r4, r5, lr}
 8004ade:	4d06      	ldr	r5, [pc, #24]	; (8004af8 <_close_r+0x1c>)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	602b      	str	r3, [r5, #0]
 8004ae8:	f7fb fe77 	bl	80007da <_close>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_close_r+0x1a>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_close_r+0x1a>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20000180 	.word	0x20000180

08004afc <_fstat_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d07      	ldr	r5, [pc, #28]	; (8004b1c <_fstat_r+0x20>)
 8004b00:	2300      	movs	r3, #0
 8004b02:	4604      	mov	r4, r0
 8004b04:	4608      	mov	r0, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	f7fb fe72 	bl	80007f2 <_fstat>
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	d102      	bne.n	8004b18 <_fstat_r+0x1c>
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	b103      	cbz	r3, 8004b18 <_fstat_r+0x1c>
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	bd38      	pop	{r3, r4, r5, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000180 	.word	0x20000180

08004b20 <_isatty_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d06      	ldr	r5, [pc, #24]	; (8004b3c <_isatty_r+0x1c>)
 8004b24:	2300      	movs	r3, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	602b      	str	r3, [r5, #0]
 8004b2c:	f7fb fe71 	bl	8000812 <_isatty>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_isatty_r+0x1a>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_isatty_r+0x1a>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000180 	.word	0x20000180

08004b40 <_lseek_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d07      	ldr	r5, [pc, #28]	; (8004b60 <_lseek_r+0x20>)
 8004b44:	4604      	mov	r4, r0
 8004b46:	4608      	mov	r0, r1
 8004b48:	4611      	mov	r1, r2
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	602a      	str	r2, [r5, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f7fb fe6a 	bl	8000828 <_lseek>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_lseek_r+0x1e>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_lseek_r+0x1e>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000180 	.word	0x20000180

08004b64 <_read_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d07      	ldr	r5, [pc, #28]	; (8004b84 <_read_r+0x20>)
 8004b68:	4604      	mov	r4, r0
 8004b6a:	4608      	mov	r0, r1
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	602a      	str	r2, [r5, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f7fb fdf8 	bl	8000768 <_read>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_read_r+0x1e>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_read_r+0x1e>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20000180 	.word	0x20000180

08004b88 <_init>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr

08004b94 <_fini>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr
